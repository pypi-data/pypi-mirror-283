# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.autocomplete_ok_response import AutocompleteOkResponse


class AutocompleteLocationLookupService(BaseService):

    @cast_models
    def autocomplete(
        self, access_key: str, query: str = None
    ) -> AutocompleteOkResponse:
        """The weatherstack API's location `autocomplete` endpoint can be used to pinpoint one or more specific locations and their identifying response objects with the aim of later passing them to a weather data endpoint. In our example below, we are looking for London, United Kingdom.

        A successful API request will return one or multiple results that match your search query. In our example, the first array object (London, United Kingdom) contains the correct result. Now that we have our identifying response objects of the target location we were looking for, we can make sure that the correct location is used by other API endpoints by using one of the available location identifiers (ideally: `lat` and `lon`) for upcoming queries.

        :param access_key: [Required] Use this parameter to pass your unique API access key to the API.
        :type access_key: str
        :param query: [Required] Use this parameter to pass your location search/autocomplete query to the API in free-text., defaults to None
        :type query: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: 200 OK â€“ Autocomplete
        :rtype: AutocompleteOkResponse
        """

        Validator(str).validate(access_key)
        Validator(str).is_optional().validate(query)

        serialized_request = (
            Serializer(f"{self.base_url}/autocomplete", self.get_default_headers())
            .add_query("access_key", access_key)
            .add_query("query", query)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return AutocompleteOkResponse._unmap(response)
