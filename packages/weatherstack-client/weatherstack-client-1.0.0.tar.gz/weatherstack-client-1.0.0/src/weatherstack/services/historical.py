# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.historical_data_ok_response import HistoricalDataOkResponse


class HistoricalService(BaseService):

    @cast_models
    def historical_data(
        self,
        access_key: str,
        query: str = None,
        historical_date: str = None,
        hourly: str = None,
        historical_date_start: str = None,
        historical_date_end: str = None,
    ) -> HistoricalDataOkResponse:
        """To look up historical weather data all the way back to 2008, simply pass one date of your choice (later than July 2008) or multiple semicolon-separated dates to the weatherstack API's `historical` endpoint using the `historical_date` parameter.

        :param access_key: [Required] Use this parameter to pass your unique API access key to the API.
        :type access_key: str
        :param query: [Required] Use this parameter to pass a single location or multiple semicolon-separated location identifiers to the API. Learn more about the Query Parameter., defaults to None
        :type query: str, optional
        :param historical_date: [Required] Use this parameter to pass one historical date or multiple semicolon-separated dates to the API. (Example: 2015-01-21 for a single date or 2015-01-21;2015-01-22 for multiple dates), defaults to None
        :type historical_date: str, optional
        :param hourly: hourly, defaults to None
        :type hourly: str, optional
        :param historical_date_start: [Required] Use this parameter to pass a start date for the current historical time-series request., defaults to None
        :type historical_date_start: str, optional
        :param historical_date_end: [Required] Use this parameter to pass an end date for the current historical time-series request., defaults to None
        :type historical_date_end: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: 200 OK – Historical data / 200 OK – Hourly Historical data / 200 OK – Historical time series
        :rtype: HistoricalDataOkResponse
        """

        Validator(str).validate(access_key)
        Validator(str).is_optional().validate(query)
        Validator(str).is_optional().validate(historical_date)
        Validator(str).is_optional().validate(hourly)
        Validator(str).is_optional().validate(historical_date_start)
        Validator(str).is_optional().validate(historical_date_end)

        serialized_request = (
            Serializer(f"{self.base_url}/historical", self.get_default_headers())
            .add_query("access_key", access_key)
            .add_query("query", query)
            .add_query("historical_date", historical_date)
            .add_query("hourly", hourly)
            .add_query("historical_date_start", historical_date_start)
            .add_query("historical_date_end", historical_date_end)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return HistoricalDataOkResponse._unmap(response)
