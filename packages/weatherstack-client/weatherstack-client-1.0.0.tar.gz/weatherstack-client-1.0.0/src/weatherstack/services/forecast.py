# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.forecast_data_ok_response import ForecastDataOkResponse


class ForecastService(BaseService):

    @cast_models
    def forecast_data(
        self, access_key: str, query: str = None, forecast_days: str = None
    ) -> ForecastDataOkResponse:
        """The weatherstack is capable of returning weather forecast data for up to 14 days into the future. To get weather forecasts, simply use the API's `forecast` endpoint and define your preferred number of forecast days using the `forecast_days` parameter.

        :param access_key: [Required] Use this parameter to pass your unique API access key to the API.
        :type access_key: str
        :param query: [Required] Use this parameter to pass a single location or multiple semicolon-separated location identifiers to the API. Learn more about the Query Parameter., defaults to None
        :type query: str, optional
        :param forecast_days: [Optional] Use this parameter to specify the number of days for which the API returns forecast data. (Default: 7 or 14 days, depending on your subscription), defaults to None
        :type forecast_days: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: 200 OK – forecast data
        :rtype: ForecastDataOkResponse
        """

        Validator(str).validate(access_key)
        Validator(str).is_optional().validate(query)
        Validator(str).is_optional().validate(forecast_days)

        serialized_request = (
            Serializer(f"{self.base_url}/forecast", self.get_default_headers())
            .add_query("access_key", access_key)
            .add_query("query", query)
            .add_query("forecast_days", forecast_days)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return ForecastDataOkResponse._unmap(response)
