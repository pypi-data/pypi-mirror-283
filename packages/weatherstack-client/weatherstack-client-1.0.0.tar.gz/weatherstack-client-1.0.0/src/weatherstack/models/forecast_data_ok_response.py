# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel


@JsonMap({})
class ForecastDataOkResponseCurrent(BaseModel):
    """ForecastDataOkResponseCurrent

    :param cloudcover: cloudcover, defaults to None
    :type cloudcover: float, optional
    :param feelslike: feelslike, defaults to None
    :type feelslike: float, optional
    :param humidity: humidity, defaults to None
    :type humidity: float, optional
    :param is_day: is_day, defaults to None
    :type is_day: str, optional
    :param observation_time: observation_time, defaults to None
    :type observation_time: str, optional
    :param precip: precip, defaults to None
    :type precip: float, optional
    :param pressure: pressure, defaults to None
    :type pressure: float, optional
    :param temperature: temperature, defaults to None
    :type temperature: float, optional
    :param uv_index: uv_index, defaults to None
    :type uv_index: float, optional
    :param visibility: visibility, defaults to None
    :type visibility: float, optional
    :param weather_code: weather_code, defaults to None
    :type weather_code: float, optional
    :param weather_descriptions: weather_descriptions, defaults to None
    :type weather_descriptions: List[str], optional
    :param weather_icons: weather_icons, defaults to None
    :type weather_icons: List[str], optional
    :param wind_degree: wind_degree, defaults to None
    :type wind_degree: float, optional
    :param wind_dir: wind_dir, defaults to None
    :type wind_dir: str, optional
    :param wind_speed: wind_speed, defaults to None
    :type wind_speed: float, optional
    """

    def __init__(
        self,
        cloudcover: float = None,
        feelslike: float = None,
        humidity: float = None,
        is_day: str = None,
        observation_time: str = None,
        precip: float = None,
        pressure: float = None,
        temperature: float = None,
        uv_index: float = None,
        visibility: float = None,
        weather_code: float = None,
        weather_descriptions: List[str] = None,
        weather_icons: List[str] = None,
        wind_degree: float = None,
        wind_dir: str = None,
        wind_speed: float = None,
    ):
        if cloudcover is not None:
            self.cloudcover = cloudcover
        if feelslike is not None:
            self.feelslike = feelslike
        if humidity is not None:
            self.humidity = humidity
        if is_day is not None:
            self.is_day = is_day
        if observation_time is not None:
            self.observation_time = observation_time
        if precip is not None:
            self.precip = precip
        if pressure is not None:
            self.pressure = pressure
        if temperature is not None:
            self.temperature = temperature
        if uv_index is not None:
            self.uv_index = uv_index
        if visibility is not None:
            self.visibility = visibility
        if weather_code is not None:
            self.weather_code = weather_code
        if weather_descriptions is not None:
            self.weather_descriptions = weather_descriptions
        if weather_icons is not None:
            self.weather_icons = weather_icons
        if wind_degree is not None:
            self.wind_degree = wind_degree
        if wind_dir is not None:
            self.wind_dir = wind_dir
        if wind_speed is not None:
            self.wind_speed = wind_speed


@JsonMap({})
class _2024_03_18Astro(BaseModel):
    """_2024_03_18Astro

    :param moon_illumination: moon_illumination, defaults to None
    :type moon_illumination: float, optional
    :param moon_phase: moon_phase, defaults to None
    :type moon_phase: str, optional
    :param moonrise: moonrise, defaults to None
    :type moonrise: str, optional
    :param moonset: moonset, defaults to None
    :type moonset: str, optional
    :param sunrise: sunrise, defaults to None
    :type sunrise: str, optional
    :param sunset: sunset, defaults to None
    :type sunset: str, optional
    """

    def __init__(
        self,
        moon_illumination: float = None,
        moon_phase: str = None,
        moonrise: str = None,
        moonset: str = None,
        sunrise: str = None,
        sunset: str = None,
    ):
        if moon_illumination is not None:
            self.moon_illumination = moon_illumination
        if moon_phase is not None:
            self.moon_phase = moon_phase
        if moonrise is not None:
            self.moonrise = moonrise
        if moonset is not None:
            self.moonset = moonset
        if sunrise is not None:
            self.sunrise = sunrise
        if sunset is not None:
            self.sunset = sunset


@JsonMap({"date_": "date"})
class _2024_03_18(BaseModel):
    """_2024_03_18

    :param astro: astro, defaults to None
    :type astro: _2024_03_18Astro, optional
    :param avgtemp: avgtemp, defaults to None
    :type avgtemp: float, optional
    :param date_: date_, defaults to None
    :type date_: str, optional
    :param date_epoch: date_epoch, defaults to None
    :type date_epoch: float, optional
    :param maxtemp: maxtemp, defaults to None
    :type maxtemp: float, optional
    :param mintemp: mintemp, defaults to None
    :type mintemp: float, optional
    :param sunhour: sunhour, defaults to None
    :type sunhour: float, optional
    :param totalsnow: totalsnow, defaults to None
    :type totalsnow: float, optional
    :param uv_index: uv_index, defaults to None
    :type uv_index: float, optional
    """

    def __init__(
        self,
        astro: _2024_03_18Astro = None,
        avgtemp: float = None,
        date_: str = None,
        date_epoch: float = None,
        maxtemp: float = None,
        mintemp: float = None,
        sunhour: float = None,
        totalsnow: float = None,
        uv_index: float = None,
    ):
        if astro is not None:
            self.astro = self._define_object(astro, _2024_03_18Astro)
        if avgtemp is not None:
            self.avgtemp = avgtemp
        if date_ is not None:
            self.date_ = date_
        if date_epoch is not None:
            self.date_epoch = date_epoch
        if maxtemp is not None:
            self.maxtemp = maxtemp
        if mintemp is not None:
            self.mintemp = mintemp
        if sunhour is not None:
            self.sunhour = sunhour
        if totalsnow is not None:
            self.totalsnow = totalsnow
        if uv_index is not None:
            self.uv_index = uv_index


@JsonMap({})
class _2024_03_19Astro(BaseModel):
    """_2024_03_19Astro

    :param moon_illumination: moon_illumination, defaults to None
    :type moon_illumination: float, optional
    :param moon_phase: moon_phase, defaults to None
    :type moon_phase: str, optional
    :param moonrise: moonrise, defaults to None
    :type moonrise: str, optional
    :param moonset: moonset, defaults to None
    :type moonset: str, optional
    :param sunrise: sunrise, defaults to None
    :type sunrise: str, optional
    :param sunset: sunset, defaults to None
    :type sunset: str, optional
    """

    def __init__(
        self,
        moon_illumination: float = None,
        moon_phase: str = None,
        moonrise: str = None,
        moonset: str = None,
        sunrise: str = None,
        sunset: str = None,
    ):
        if moon_illumination is not None:
            self.moon_illumination = moon_illumination
        if moon_phase is not None:
            self.moon_phase = moon_phase
        if moonrise is not None:
            self.moonrise = moonrise
        if moonset is not None:
            self.moonset = moonset
        if sunrise is not None:
            self.sunrise = sunrise
        if sunset is not None:
            self.sunset = sunset


@JsonMap({"date_": "date"})
class _2024_03_19(BaseModel):
    """_2024_03_19

    :param astro: astro, defaults to None
    :type astro: _2024_03_19Astro, optional
    :param avgtemp: avgtemp, defaults to None
    :type avgtemp: float, optional
    :param date_: date_, defaults to None
    :type date_: str, optional
    :param date_epoch: date_epoch, defaults to None
    :type date_epoch: float, optional
    :param maxtemp: maxtemp, defaults to None
    :type maxtemp: float, optional
    :param mintemp: mintemp, defaults to None
    :type mintemp: float, optional
    :param sunhour: sunhour, defaults to None
    :type sunhour: float, optional
    :param totalsnow: totalsnow, defaults to None
    :type totalsnow: float, optional
    :param uv_index: uv_index, defaults to None
    :type uv_index: float, optional
    """

    def __init__(
        self,
        astro: _2024_03_19Astro = None,
        avgtemp: float = None,
        date_: str = None,
        date_epoch: float = None,
        maxtemp: float = None,
        mintemp: float = None,
        sunhour: float = None,
        totalsnow: float = None,
        uv_index: float = None,
    ):
        if astro is not None:
            self.astro = self._define_object(astro, _2024_03_19Astro)
        if avgtemp is not None:
            self.avgtemp = avgtemp
        if date_ is not None:
            self.date_ = date_
        if date_epoch is not None:
            self.date_epoch = date_epoch
        if maxtemp is not None:
            self.maxtemp = maxtemp
        if mintemp is not None:
            self.mintemp = mintemp
        if sunhour is not None:
            self.sunhour = sunhour
        if totalsnow is not None:
            self.totalsnow = totalsnow
        if uv_index is not None:
            self.uv_index = uv_index


@JsonMap({})
class _2024_03_20Astro(BaseModel):
    """_2024_03_20Astro

    :param moon_illumination: moon_illumination, defaults to None
    :type moon_illumination: float, optional
    :param moon_phase: moon_phase, defaults to None
    :type moon_phase: str, optional
    :param moonrise: moonrise, defaults to None
    :type moonrise: str, optional
    :param moonset: moonset, defaults to None
    :type moonset: str, optional
    :param sunrise: sunrise, defaults to None
    :type sunrise: str, optional
    :param sunset: sunset, defaults to None
    :type sunset: str, optional
    """

    def __init__(
        self,
        moon_illumination: float = None,
        moon_phase: str = None,
        moonrise: str = None,
        moonset: str = None,
        sunrise: str = None,
        sunset: str = None,
    ):
        if moon_illumination is not None:
            self.moon_illumination = moon_illumination
        if moon_phase is not None:
            self.moon_phase = moon_phase
        if moonrise is not None:
            self.moonrise = moonrise
        if moonset is not None:
            self.moonset = moonset
        if sunrise is not None:
            self.sunrise = sunrise
        if sunset is not None:
            self.sunset = sunset


@JsonMap({"date_": "date"})
class _2024_03_20(BaseModel):
    """_2024_03_20

    :param astro: astro, defaults to None
    :type astro: _2024_03_20Astro, optional
    :param avgtemp: avgtemp, defaults to None
    :type avgtemp: float, optional
    :param date_: date_, defaults to None
    :type date_: str, optional
    :param date_epoch: date_epoch, defaults to None
    :type date_epoch: float, optional
    :param maxtemp: maxtemp, defaults to None
    :type maxtemp: float, optional
    :param mintemp: mintemp, defaults to None
    :type mintemp: float, optional
    :param sunhour: sunhour, defaults to None
    :type sunhour: float, optional
    :param totalsnow: totalsnow, defaults to None
    :type totalsnow: float, optional
    :param uv_index: uv_index, defaults to None
    :type uv_index: float, optional
    """

    def __init__(
        self,
        astro: _2024_03_20Astro = None,
        avgtemp: float = None,
        date_: str = None,
        date_epoch: float = None,
        maxtemp: float = None,
        mintemp: float = None,
        sunhour: float = None,
        totalsnow: float = None,
        uv_index: float = None,
    ):
        if astro is not None:
            self.astro = self._define_object(astro, _2024_03_20Astro)
        if avgtemp is not None:
            self.avgtemp = avgtemp
        if date_ is not None:
            self.date_ = date_
        if date_epoch is not None:
            self.date_epoch = date_epoch
        if maxtemp is not None:
            self.maxtemp = maxtemp
        if mintemp is not None:
            self.mintemp = mintemp
        if sunhour is not None:
            self.sunhour = sunhour
        if totalsnow is not None:
            self.totalsnow = totalsnow
        if uv_index is not None:
            self.uv_index = uv_index


@JsonMap({})
class _2024_03_21Astro(BaseModel):
    """_2024_03_21Astro

    :param moon_illumination: moon_illumination, defaults to None
    :type moon_illumination: float, optional
    :param moon_phase: moon_phase, defaults to None
    :type moon_phase: str, optional
    :param moonrise: moonrise, defaults to None
    :type moonrise: str, optional
    :param moonset: moonset, defaults to None
    :type moonset: str, optional
    :param sunrise: sunrise, defaults to None
    :type sunrise: str, optional
    :param sunset: sunset, defaults to None
    :type sunset: str, optional
    """

    def __init__(
        self,
        moon_illumination: float = None,
        moon_phase: str = None,
        moonrise: str = None,
        moonset: str = None,
        sunrise: str = None,
        sunset: str = None,
    ):
        if moon_illumination is not None:
            self.moon_illumination = moon_illumination
        if moon_phase is not None:
            self.moon_phase = moon_phase
        if moonrise is not None:
            self.moonrise = moonrise
        if moonset is not None:
            self.moonset = moonset
        if sunrise is not None:
            self.sunrise = sunrise
        if sunset is not None:
            self.sunset = sunset


@JsonMap({"date_": "date"})
class _2024_03_21(BaseModel):
    """_2024_03_21

    :param astro: astro, defaults to None
    :type astro: _2024_03_21Astro, optional
    :param avgtemp: avgtemp, defaults to None
    :type avgtemp: float, optional
    :param date_: date_, defaults to None
    :type date_: str, optional
    :param date_epoch: date_epoch, defaults to None
    :type date_epoch: float, optional
    :param maxtemp: maxtemp, defaults to None
    :type maxtemp: float, optional
    :param mintemp: mintemp, defaults to None
    :type mintemp: float, optional
    :param sunhour: sunhour, defaults to None
    :type sunhour: float, optional
    :param totalsnow: totalsnow, defaults to None
    :type totalsnow: float, optional
    :param uv_index: uv_index, defaults to None
    :type uv_index: float, optional
    """

    def __init__(
        self,
        astro: _2024_03_21Astro = None,
        avgtemp: float = None,
        date_: str = None,
        date_epoch: float = None,
        maxtemp: float = None,
        mintemp: float = None,
        sunhour: float = None,
        totalsnow: float = None,
        uv_index: float = None,
    ):
        if astro is not None:
            self.astro = self._define_object(astro, _2024_03_21Astro)
        if avgtemp is not None:
            self.avgtemp = avgtemp
        if date_ is not None:
            self.date_ = date_
        if date_epoch is not None:
            self.date_epoch = date_epoch
        if maxtemp is not None:
            self.maxtemp = maxtemp
        if mintemp is not None:
            self.mintemp = mintemp
        if sunhour is not None:
            self.sunhour = sunhour
        if totalsnow is not None:
            self.totalsnow = totalsnow
        if uv_index is not None:
            self.uv_index = uv_index


@JsonMap({})
class _2024_03_22Astro(BaseModel):
    """_2024_03_22Astro

    :param moon_illumination: moon_illumination, defaults to None
    :type moon_illumination: float, optional
    :param moon_phase: moon_phase, defaults to None
    :type moon_phase: str, optional
    :param moonrise: moonrise, defaults to None
    :type moonrise: str, optional
    :param moonset: moonset, defaults to None
    :type moonset: str, optional
    :param sunrise: sunrise, defaults to None
    :type sunrise: str, optional
    :param sunset: sunset, defaults to None
    :type sunset: str, optional
    """

    def __init__(
        self,
        moon_illumination: float = None,
        moon_phase: str = None,
        moonrise: str = None,
        moonset: str = None,
        sunrise: str = None,
        sunset: str = None,
    ):
        if moon_illumination is not None:
            self.moon_illumination = moon_illumination
        if moon_phase is not None:
            self.moon_phase = moon_phase
        if moonrise is not None:
            self.moonrise = moonrise
        if moonset is not None:
            self.moonset = moonset
        if sunrise is not None:
            self.sunrise = sunrise
        if sunset is not None:
            self.sunset = sunset


@JsonMap({"date_": "date"})
class _2024_03_22(BaseModel):
    """_2024_03_22

    :param astro: astro, defaults to None
    :type astro: _2024_03_22Astro, optional
    :param avgtemp: avgtemp, defaults to None
    :type avgtemp: float, optional
    :param date_: date_, defaults to None
    :type date_: str, optional
    :param date_epoch: date_epoch, defaults to None
    :type date_epoch: float, optional
    :param maxtemp: maxtemp, defaults to None
    :type maxtemp: float, optional
    :param mintemp: mintemp, defaults to None
    :type mintemp: float, optional
    :param sunhour: sunhour, defaults to None
    :type sunhour: float, optional
    :param totalsnow: totalsnow, defaults to None
    :type totalsnow: float, optional
    :param uv_index: uv_index, defaults to None
    :type uv_index: float, optional
    """

    def __init__(
        self,
        astro: _2024_03_22Astro = None,
        avgtemp: float = None,
        date_: str = None,
        date_epoch: float = None,
        maxtemp: float = None,
        mintemp: float = None,
        sunhour: float = None,
        totalsnow: float = None,
        uv_index: float = None,
    ):
        if astro is not None:
            self.astro = self._define_object(astro, _2024_03_22Astro)
        if avgtemp is not None:
            self.avgtemp = avgtemp
        if date_ is not None:
            self.date_ = date_
        if date_epoch is not None:
            self.date_epoch = date_epoch
        if maxtemp is not None:
            self.maxtemp = maxtemp
        if mintemp is not None:
            self.mintemp = mintemp
        if sunhour is not None:
            self.sunhour = sunhour
        if totalsnow is not None:
            self.totalsnow = totalsnow
        if uv_index is not None:
            self.uv_index = uv_index


@JsonMap({})
class _2024_03_23Astro(BaseModel):
    """_2024_03_23Astro

    :param moon_illumination: moon_illumination, defaults to None
    :type moon_illumination: float, optional
    :param moon_phase: moon_phase, defaults to None
    :type moon_phase: str, optional
    :param moonrise: moonrise, defaults to None
    :type moonrise: str, optional
    :param moonset: moonset, defaults to None
    :type moonset: str, optional
    :param sunrise: sunrise, defaults to None
    :type sunrise: str, optional
    :param sunset: sunset, defaults to None
    :type sunset: str, optional
    """

    def __init__(
        self,
        moon_illumination: float = None,
        moon_phase: str = None,
        moonrise: str = None,
        moonset: str = None,
        sunrise: str = None,
        sunset: str = None,
    ):
        if moon_illumination is not None:
            self.moon_illumination = moon_illumination
        if moon_phase is not None:
            self.moon_phase = moon_phase
        if moonrise is not None:
            self.moonrise = moonrise
        if moonset is not None:
            self.moonset = moonset
        if sunrise is not None:
            self.sunrise = sunrise
        if sunset is not None:
            self.sunset = sunset


@JsonMap({"date_": "date"})
class _2024_03_23(BaseModel):
    """_2024_03_23

    :param astro: astro, defaults to None
    :type astro: _2024_03_23Astro, optional
    :param avgtemp: avgtemp, defaults to None
    :type avgtemp: float, optional
    :param date_: date_, defaults to None
    :type date_: str, optional
    :param date_epoch: date_epoch, defaults to None
    :type date_epoch: float, optional
    :param maxtemp: maxtemp, defaults to None
    :type maxtemp: float, optional
    :param mintemp: mintemp, defaults to None
    :type mintemp: float, optional
    :param sunhour: sunhour, defaults to None
    :type sunhour: float, optional
    :param totalsnow: totalsnow, defaults to None
    :type totalsnow: float, optional
    :param uv_index: uv_index, defaults to None
    :type uv_index: float, optional
    """

    def __init__(
        self,
        astro: _2024_03_23Astro = None,
        avgtemp: float = None,
        date_: str = None,
        date_epoch: float = None,
        maxtemp: float = None,
        mintemp: float = None,
        sunhour: float = None,
        totalsnow: float = None,
        uv_index: float = None,
    ):
        if astro is not None:
            self.astro = self._define_object(astro, _2024_03_23Astro)
        if avgtemp is not None:
            self.avgtemp = avgtemp
        if date_ is not None:
            self.date_ = date_
        if date_epoch is not None:
            self.date_epoch = date_epoch
        if maxtemp is not None:
            self.maxtemp = maxtemp
        if mintemp is not None:
            self.mintemp = mintemp
        if sunhour is not None:
            self.sunhour = sunhour
        if totalsnow is not None:
            self.totalsnow = totalsnow
        if uv_index is not None:
            self.uv_index = uv_index


@JsonMap({})
class _2024_03_24Astro(BaseModel):
    """_2024_03_24Astro

    :param moon_illumination: moon_illumination, defaults to None
    :type moon_illumination: float, optional
    :param moon_phase: moon_phase, defaults to None
    :type moon_phase: str, optional
    :param moonrise: moonrise, defaults to None
    :type moonrise: str, optional
    :param moonset: moonset, defaults to None
    :type moonset: str, optional
    :param sunrise: sunrise, defaults to None
    :type sunrise: str, optional
    :param sunset: sunset, defaults to None
    :type sunset: str, optional
    """

    def __init__(
        self,
        moon_illumination: float = None,
        moon_phase: str = None,
        moonrise: str = None,
        moonset: str = None,
        sunrise: str = None,
        sunset: str = None,
    ):
        if moon_illumination is not None:
            self.moon_illumination = moon_illumination
        if moon_phase is not None:
            self.moon_phase = moon_phase
        if moonrise is not None:
            self.moonrise = moonrise
        if moonset is not None:
            self.moonset = moonset
        if sunrise is not None:
            self.sunrise = sunrise
        if sunset is not None:
            self.sunset = sunset


@JsonMap({"date_": "date"})
class _2024_03_24(BaseModel):
    """_2024_03_24

    :param astro: astro, defaults to None
    :type astro: _2024_03_24Astro, optional
    :param avgtemp: avgtemp, defaults to None
    :type avgtemp: float, optional
    :param date_: date_, defaults to None
    :type date_: str, optional
    :param date_epoch: date_epoch, defaults to None
    :type date_epoch: float, optional
    :param maxtemp: maxtemp, defaults to None
    :type maxtemp: float, optional
    :param mintemp: mintemp, defaults to None
    :type mintemp: float, optional
    :param sunhour: sunhour, defaults to None
    :type sunhour: float, optional
    :param totalsnow: totalsnow, defaults to None
    :type totalsnow: float, optional
    :param uv_index: uv_index, defaults to None
    :type uv_index: float, optional
    """

    def __init__(
        self,
        astro: _2024_03_24Astro = None,
        avgtemp: float = None,
        date_: str = None,
        date_epoch: float = None,
        maxtemp: float = None,
        mintemp: float = None,
        sunhour: float = None,
        totalsnow: float = None,
        uv_index: float = None,
    ):
        if astro is not None:
            self.astro = self._define_object(astro, _2024_03_24Astro)
        if avgtemp is not None:
            self.avgtemp = avgtemp
        if date_ is not None:
            self.date_ = date_
        if date_epoch is not None:
            self.date_epoch = date_epoch
        if maxtemp is not None:
            self.maxtemp = maxtemp
        if mintemp is not None:
            self.mintemp = mintemp
        if sunhour is not None:
            self.sunhour = sunhour
        if totalsnow is not None:
            self.totalsnow = totalsnow
        if uv_index is not None:
            self.uv_index = uv_index


@JsonMap(
    {
        "_2024_03_18": "2024-03-18",
        "_2024_03_19": "2024-03-19",
        "_2024_03_20": "2024-03-20",
        "_2024_03_21": "2024-03-21",
        "_2024_03_22": "2024-03-22",
        "_2024_03_23": "2024-03-23",
        "_2024_03_24": "2024-03-24",
    }
)
class Forecast(BaseModel):
    """Forecast

    :param _2024_03_18: _2024_03_18, defaults to None
    :type _2024_03_18: _2024_03_18, optional
    :param _2024_03_19: _2024_03_19, defaults to None
    :type _2024_03_19: _2024_03_19, optional
    :param _2024_03_20: _2024_03_20, defaults to None
    :type _2024_03_20: _2024_03_20, optional
    :param _2024_03_21: _2024_03_21, defaults to None
    :type _2024_03_21: _2024_03_21, optional
    :param _2024_03_22: _2024_03_22, defaults to None
    :type _2024_03_22: _2024_03_22, optional
    :param _2024_03_23: _2024_03_23, defaults to None
    :type _2024_03_23: _2024_03_23, optional
    :param _2024_03_24: _2024_03_24, defaults to None
    :type _2024_03_24: _2024_03_24, optional
    """

    def __init__(
        self,
        _2024_03_18: _2024_03_18 = None,
        _2024_03_19: _2024_03_19 = None,
        _2024_03_20: _2024_03_20 = None,
        _2024_03_21: _2024_03_21 = None,
        _2024_03_22: _2024_03_22 = None,
        _2024_03_23: _2024_03_23 = None,
        _2024_03_24: _2024_03_24 = None,
    ):
        if _2024_03_18 is not None:
            self._2024_03_18 = self._define_object(_2024_03_18, _2024_03_18)
        if _2024_03_19 is not None:
            self._2024_03_19 = self._define_object(_2024_03_19, _2024_03_19)
        if _2024_03_20 is not None:
            self._2024_03_20 = self._define_object(_2024_03_20, _2024_03_20)
        if _2024_03_21 is not None:
            self._2024_03_21 = self._define_object(_2024_03_21, _2024_03_21)
        if _2024_03_22 is not None:
            self._2024_03_22 = self._define_object(_2024_03_22, _2024_03_22)
        if _2024_03_23 is not None:
            self._2024_03_23 = self._define_object(_2024_03_23, _2024_03_23)
        if _2024_03_24 is not None:
            self._2024_03_24 = self._define_object(_2024_03_24, _2024_03_24)


@JsonMap({})
class ForecastDataOkResponseLocation(BaseModel):
    """ForecastDataOkResponseLocation

    :param country: country, defaults to None
    :type country: str, optional
    :param lat: lat, defaults to None
    :type lat: str, optional
    :param localtime: localtime, defaults to None
    :type localtime: str, optional
    :param localtime_epoch: localtime_epoch, defaults to None
    :type localtime_epoch: float, optional
    :param lon: lon, defaults to None
    :type lon: str, optional
    :param name: name, defaults to None
    :type name: str, optional
    :param region: region, defaults to None
    :type region: str, optional
    :param timezone_id: timezone_id, defaults to None
    :type timezone_id: str, optional
    :param utc_offset: utc_offset, defaults to None
    :type utc_offset: str, optional
    """

    def __init__(
        self,
        country: str = None,
        lat: str = None,
        localtime: str = None,
        localtime_epoch: float = None,
        lon: str = None,
        name: str = None,
        region: str = None,
        timezone_id: str = None,
        utc_offset: str = None,
    ):
        if country is not None:
            self.country = country
        if lat is not None:
            self.lat = lat
        if localtime is not None:
            self.localtime = localtime
        if localtime_epoch is not None:
            self.localtime_epoch = localtime_epoch
        if lon is not None:
            self.lon = lon
        if name is not None:
            self.name = name
        if region is not None:
            self.region = region
        if timezone_id is not None:
            self.timezone_id = timezone_id
        if utc_offset is not None:
            self.utc_offset = utc_offset


@JsonMap({"type_": "type"})
class ForecastDataOkResponseRequest(BaseModel):
    """ForecastDataOkResponseRequest

    :param language: language, defaults to None
    :type language: str, optional
    :param query: query, defaults to None
    :type query: str, optional
    :param type_: type_, defaults to None
    :type type_: str, optional
    :param unit: unit, defaults to None
    :type unit: str, optional
    """

    def __init__(
        self,
        language: str = None,
        query: str = None,
        type_: str = None,
        unit: str = None,
    ):
        if language is not None:
            self.language = language
        if query is not None:
            self.query = query
        if type_ is not None:
            self.type_ = type_
        if unit is not None:
            self.unit = unit


@JsonMap({})
class ForecastDataOkResponse(BaseModel):
    """ForecastDataOkResponse

    :param current: current, defaults to None
    :type current: ForecastDataOkResponseCurrent, optional
    :param forecast: forecast, defaults to None
    :type forecast: Forecast, optional
    :param location: location, defaults to None
    :type location: ForecastDataOkResponseLocation, optional
    :param request: request, defaults to None
    :type request: ForecastDataOkResponseRequest, optional
    """

    def __init__(
        self,
        current: ForecastDataOkResponseCurrent = None,
        forecast: Forecast = None,
        location: ForecastDataOkResponseLocation = None,
        request: ForecastDataOkResponseRequest = None,
    ):
        if current is not None:
            self.current = self._define_object(current, ForecastDataOkResponseCurrent)
        if forecast is not None:
            self.forecast = self._define_object(forecast, Forecast)
        if location is not None:
            self.location = self._define_object(
                location, ForecastDataOkResponseLocation
            )
        if request is not None:
            self.request = self._define_object(request, ForecastDataOkResponseRequest)
