# This file was generated by liblab | https://liblab.com/

from typing import Union
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .base import OneOfBaseModel


@JsonMap({})
class CurrentLocationOkResponse1Current(BaseModel):
    """CurrentLocationOkResponse1Current

    :param cloudcover: cloudcover, defaults to None
    :type cloudcover: float, optional
    :param feelslike: feelslike, defaults to None
    :type feelslike: float, optional
    :param humidity: humidity, defaults to None
    :type humidity: float, optional
    :param is_day: is_day, defaults to None
    :type is_day: str, optional
    :param observation_time: observation_time, defaults to None
    :type observation_time: str, optional
    :param precip: precip, defaults to None
    :type precip: float, optional
    :param pressure: pressure, defaults to None
    :type pressure: float, optional
    :param temperature: temperature, defaults to None
    :type temperature: float, optional
    :param uv_index: uv_index, defaults to None
    :type uv_index: float, optional
    :param visibility: visibility, defaults to None
    :type visibility: float, optional
    :param weather_code: weather_code, defaults to None
    :type weather_code: float, optional
    :param weather_descriptions: weather_descriptions, defaults to None
    :type weather_descriptions: List[str], optional
    :param weather_icons: weather_icons, defaults to None
    :type weather_icons: List[str], optional
    :param wind_degree: wind_degree, defaults to None
    :type wind_degree: float, optional
    :param wind_dir: wind_dir, defaults to None
    :type wind_dir: str, optional
    :param wind_speed: wind_speed, defaults to None
    :type wind_speed: float, optional
    """

    def __init__(
        self,
        cloudcover: float = None,
        feelslike: float = None,
        humidity: float = None,
        is_day: str = None,
        observation_time: str = None,
        precip: float = None,
        pressure: float = None,
        temperature: float = None,
        uv_index: float = None,
        visibility: float = None,
        weather_code: float = None,
        weather_descriptions: List[str] = None,
        weather_icons: List[str] = None,
        wind_degree: float = None,
        wind_dir: str = None,
        wind_speed: float = None,
    ):
        if cloudcover is not None:
            self.cloudcover = cloudcover
        if feelslike is not None:
            self.feelslike = feelslike
        if humidity is not None:
            self.humidity = humidity
        if is_day is not None:
            self.is_day = is_day
        if observation_time is not None:
            self.observation_time = observation_time
        if precip is not None:
            self.precip = precip
        if pressure is not None:
            self.pressure = pressure
        if temperature is not None:
            self.temperature = temperature
        if uv_index is not None:
            self.uv_index = uv_index
        if visibility is not None:
            self.visibility = visibility
        if weather_code is not None:
            self.weather_code = weather_code
        if weather_descriptions is not None:
            self.weather_descriptions = weather_descriptions
        if weather_icons is not None:
            self.weather_icons = weather_icons
        if wind_degree is not None:
            self.wind_degree = wind_degree
        if wind_dir is not None:
            self.wind_dir = wind_dir
        if wind_speed is not None:
            self.wind_speed = wind_speed


@JsonMap({})
class CurrentLocationOkResponse1Location(BaseModel):
    """CurrentLocationOkResponse1Location

    :param country: country, defaults to None
    :type country: str, optional
    :param lat: lat, defaults to None
    :type lat: str, optional
    :param localtime: localtime, defaults to None
    :type localtime: str, optional
    :param localtime_epoch: localtime_epoch, defaults to None
    :type localtime_epoch: float, optional
    :param lon: lon, defaults to None
    :type lon: str, optional
    :param name: name, defaults to None
    :type name: str, optional
    :param region: region, defaults to None
    :type region: str, optional
    :param timezone_id: timezone_id, defaults to None
    :type timezone_id: str, optional
    :param utc_offset: utc_offset, defaults to None
    :type utc_offset: str, optional
    """

    def __init__(
        self,
        country: str = None,
        lat: str = None,
        localtime: str = None,
        localtime_epoch: float = None,
        lon: str = None,
        name: str = None,
        region: str = None,
        timezone_id: str = None,
        utc_offset: str = None,
    ):
        if country is not None:
            self.country = country
        if lat is not None:
            self.lat = lat
        if localtime is not None:
            self.localtime = localtime
        if localtime_epoch is not None:
            self.localtime_epoch = localtime_epoch
        if lon is not None:
            self.lon = lon
        if name is not None:
            self.name = name
        if region is not None:
            self.region = region
        if timezone_id is not None:
            self.timezone_id = timezone_id
        if utc_offset is not None:
            self.utc_offset = utc_offset


@JsonMap({"type_": "type"})
class CurrentLocationOkResponse1Request(BaseModel):
    """CurrentLocationOkResponse1Request

    :param language: language, defaults to None
    :type language: str, optional
    :param query: query, defaults to None
    :type query: str, optional
    :param type_: type_, defaults to None
    :type type_: str, optional
    :param unit: unit, defaults to None
    :type unit: str, optional
    """

    def __init__(
        self,
        language: str = None,
        query: str = None,
        type_: str = None,
        unit: str = None,
    ):
        if language is not None:
            self.language = language
        if query is not None:
            self.query = query
        if type_ is not None:
            self.type_ = type_
        if unit is not None:
            self.unit = unit


@JsonMap({})
class CurrentLocationOkResponse1(BaseModel):
    """CurrentLocationOkResponse1

    :param current: current, defaults to None
    :type current: CurrentLocationOkResponse1Current, optional
    :param location: location, defaults to None
    :type location: CurrentLocationOkResponse1Location, optional
    :param request: request, defaults to None
    :type request: CurrentLocationOkResponse1Request, optional
    """

    def __init__(
        self,
        current: CurrentLocationOkResponse1Current = None,
        location: CurrentLocationOkResponse1Location = None,
        request: CurrentLocationOkResponse1Request = None,
    ):
        if current is not None:
            self.current = self._define_object(
                current, CurrentLocationOkResponse1Current
            )
        if location is not None:
            self.location = self._define_object(
                location, CurrentLocationOkResponse1Location
            )
        if request is not None:
            self.request = self._define_object(
                request, CurrentLocationOkResponse1Request
            )


@JsonMap({})
class CurrentLocationOkResponse2Current(BaseModel):
    """CurrentLocationOkResponse2Current

    :param cloudcover: cloudcover, defaults to None
    :type cloudcover: float, optional
    :param feelslike: feelslike, defaults to None
    :type feelslike: float, optional
    :param humidity: humidity, defaults to None
    :type humidity: float, optional
    :param is_day: is_day, defaults to None
    :type is_day: str, optional
    :param observation_time: observation_time, defaults to None
    :type observation_time: str, optional
    :param precip: precip, defaults to None
    :type precip: float, optional
    :param pressure: pressure, defaults to None
    :type pressure: float, optional
    :param temperature: temperature, defaults to None
    :type temperature: float, optional
    :param uv_index: uv_index, defaults to None
    :type uv_index: float, optional
    :param visibility: visibility, defaults to None
    :type visibility: float, optional
    :param weather_code: weather_code, defaults to None
    :type weather_code: float, optional
    :param weather_descriptions: weather_descriptions, defaults to None
    :type weather_descriptions: List[str], optional
    :param weather_icons: weather_icons, defaults to None
    :type weather_icons: List[str], optional
    :param wind_degree: wind_degree, defaults to None
    :type wind_degree: float, optional
    :param wind_dir: wind_dir, defaults to None
    :type wind_dir: str, optional
    :param wind_speed: wind_speed, defaults to None
    :type wind_speed: float, optional
    """

    def __init__(
        self,
        cloudcover: float = None,
        feelslike: float = None,
        humidity: float = None,
        is_day: str = None,
        observation_time: str = None,
        precip: float = None,
        pressure: float = None,
        temperature: float = None,
        uv_index: float = None,
        visibility: float = None,
        weather_code: float = None,
        weather_descriptions: List[str] = None,
        weather_icons: List[str] = None,
        wind_degree: float = None,
        wind_dir: str = None,
        wind_speed: float = None,
    ):
        if cloudcover is not None:
            self.cloudcover = cloudcover
        if feelslike is not None:
            self.feelslike = feelslike
        if humidity is not None:
            self.humidity = humidity
        if is_day is not None:
            self.is_day = is_day
        if observation_time is not None:
            self.observation_time = observation_time
        if precip is not None:
            self.precip = precip
        if pressure is not None:
            self.pressure = pressure
        if temperature is not None:
            self.temperature = temperature
        if uv_index is not None:
            self.uv_index = uv_index
        if visibility is not None:
            self.visibility = visibility
        if weather_code is not None:
            self.weather_code = weather_code
        if weather_descriptions is not None:
            self.weather_descriptions = weather_descriptions
        if weather_icons is not None:
            self.weather_icons = weather_icons
        if wind_degree is not None:
            self.wind_degree = wind_degree
        if wind_dir is not None:
            self.wind_dir = wind_dir
        if wind_speed is not None:
            self.wind_speed = wind_speed


@JsonMap({})
class CurrentLocationOkResponse2Location(BaseModel):
    """CurrentLocationOkResponse2Location

    :param country: country, defaults to None
    :type country: str, optional
    :param lat: lat, defaults to None
    :type lat: str, optional
    :param localtime: localtime, defaults to None
    :type localtime: str, optional
    :param localtime_epoch: localtime_epoch, defaults to None
    :type localtime_epoch: float, optional
    :param lon: lon, defaults to None
    :type lon: str, optional
    :param name: name, defaults to None
    :type name: str, optional
    :param region: region, defaults to None
    :type region: str, optional
    :param timezone_id: timezone_id, defaults to None
    :type timezone_id: str, optional
    :param utc_offset: utc_offset, defaults to None
    :type utc_offset: str, optional
    """

    def __init__(
        self,
        country: str = None,
        lat: str = None,
        localtime: str = None,
        localtime_epoch: float = None,
        lon: str = None,
        name: str = None,
        region: str = None,
        timezone_id: str = None,
        utc_offset: str = None,
    ):
        if country is not None:
            self.country = country
        if lat is not None:
            self.lat = lat
        if localtime is not None:
            self.localtime = localtime
        if localtime_epoch is not None:
            self.localtime_epoch = localtime_epoch
        if lon is not None:
            self.lon = lon
        if name is not None:
            self.name = name
        if region is not None:
            self.region = region
        if timezone_id is not None:
            self.timezone_id = timezone_id
        if utc_offset is not None:
            self.utc_offset = utc_offset


@JsonMap({"type_": "type"})
class CurrentLocationOkResponse2Request(BaseModel):
    """CurrentLocationOkResponse2Request

    :param language: language, defaults to None
    :type language: str, optional
    :param query: query, defaults to None
    :type query: str, optional
    :param type_: type_, defaults to None
    :type type_: str, optional
    :param unit: unit, defaults to None
    :type unit: str, optional
    """

    def __init__(
        self,
        language: str = None,
        query: str = None,
        type_: str = None,
        unit: str = None,
    ):
        if language is not None:
            self.language = language
        if query is not None:
            self.query = query
        if type_ is not None:
            self.type_ = type_
        if unit is not None:
            self.unit = unit


@JsonMap({})
class CurrentLocationOkResponse2(BaseModel):
    """CurrentLocationOkResponse2

    :param current: current, defaults to None
    :type current: CurrentLocationOkResponse2Current, optional
    :param location: location, defaults to None
    :type location: CurrentLocationOkResponse2Location, optional
    :param request: request, defaults to None
    :type request: CurrentLocationOkResponse2Request, optional
    """

    def __init__(
        self,
        current: CurrentLocationOkResponse2Current = None,
        location: CurrentLocationOkResponse2Location = None,
        request: CurrentLocationOkResponse2Request = None,
    ):
        if current is not None:
            self.current = self._define_object(
                current, CurrentLocationOkResponse2Current
            )
        if location is not None:
            self.location = self._define_object(
                location, CurrentLocationOkResponse2Location
            )
        if request is not None:
            self.request = self._define_object(
                request, CurrentLocationOkResponse2Request
            )


@JsonMap({})
class CurrentLocationOkResponse3Current(BaseModel):
    """CurrentLocationOkResponse3Current

    :param cloudcover: cloudcover, defaults to None
    :type cloudcover: float, optional
    :param feelslike: feelslike, defaults to None
    :type feelslike: float, optional
    :param humidity: humidity, defaults to None
    :type humidity: float, optional
    :param is_day: is_day, defaults to None
    :type is_day: str, optional
    :param observation_time: observation_time, defaults to None
    :type observation_time: str, optional
    :param precip: precip, defaults to None
    :type precip: float, optional
    :param pressure: pressure, defaults to None
    :type pressure: float, optional
    :param temperature: temperature, defaults to None
    :type temperature: float, optional
    :param uv_index: uv_index, defaults to None
    :type uv_index: float, optional
    :param visibility: visibility, defaults to None
    :type visibility: float, optional
    :param weather_code: weather_code, defaults to None
    :type weather_code: float, optional
    :param weather_descriptions: weather_descriptions, defaults to None
    :type weather_descriptions: List[str], optional
    :param weather_icons: weather_icons, defaults to None
    :type weather_icons: List[str], optional
    :param wind_degree: wind_degree, defaults to None
    :type wind_degree: float, optional
    :param wind_dir: wind_dir, defaults to None
    :type wind_dir: str, optional
    :param wind_speed: wind_speed, defaults to None
    :type wind_speed: float, optional
    """

    def __init__(
        self,
        cloudcover: float = None,
        feelslike: float = None,
        humidity: float = None,
        is_day: str = None,
        observation_time: str = None,
        precip: float = None,
        pressure: float = None,
        temperature: float = None,
        uv_index: float = None,
        visibility: float = None,
        weather_code: float = None,
        weather_descriptions: List[str] = None,
        weather_icons: List[str] = None,
        wind_degree: float = None,
        wind_dir: str = None,
        wind_speed: float = None,
    ):
        if cloudcover is not None:
            self.cloudcover = cloudcover
        if feelslike is not None:
            self.feelslike = feelslike
        if humidity is not None:
            self.humidity = humidity
        if is_day is not None:
            self.is_day = is_day
        if observation_time is not None:
            self.observation_time = observation_time
        if precip is not None:
            self.precip = precip
        if pressure is not None:
            self.pressure = pressure
        if temperature is not None:
            self.temperature = temperature
        if uv_index is not None:
            self.uv_index = uv_index
        if visibility is not None:
            self.visibility = visibility
        if weather_code is not None:
            self.weather_code = weather_code
        if weather_descriptions is not None:
            self.weather_descriptions = weather_descriptions
        if weather_icons is not None:
            self.weather_icons = weather_icons
        if wind_degree is not None:
            self.wind_degree = wind_degree
        if wind_dir is not None:
            self.wind_dir = wind_dir
        if wind_speed is not None:
            self.wind_speed = wind_speed


@JsonMap({})
class CurrentLocationOkResponse3Location(BaseModel):
    """CurrentLocationOkResponse3Location

    :param country: country, defaults to None
    :type country: str, optional
    :param lat: lat, defaults to None
    :type lat: str, optional
    :param localtime: localtime, defaults to None
    :type localtime: str, optional
    :param localtime_epoch: localtime_epoch, defaults to None
    :type localtime_epoch: float, optional
    :param lon: lon, defaults to None
    :type lon: str, optional
    :param name: name, defaults to None
    :type name: str, optional
    :param region: region, defaults to None
    :type region: str, optional
    :param timezone_id: timezone_id, defaults to None
    :type timezone_id: str, optional
    :param utc_offset: utc_offset, defaults to None
    :type utc_offset: str, optional
    """

    def __init__(
        self,
        country: str = None,
        lat: str = None,
        localtime: str = None,
        localtime_epoch: float = None,
        lon: str = None,
        name: str = None,
        region: str = None,
        timezone_id: str = None,
        utc_offset: str = None,
    ):
        if country is not None:
            self.country = country
        if lat is not None:
            self.lat = lat
        if localtime is not None:
            self.localtime = localtime
        if localtime_epoch is not None:
            self.localtime_epoch = localtime_epoch
        if lon is not None:
            self.lon = lon
        if name is not None:
            self.name = name
        if region is not None:
            self.region = region
        if timezone_id is not None:
            self.timezone_id = timezone_id
        if utc_offset is not None:
            self.utc_offset = utc_offset


@JsonMap({"type_": "type"})
class CurrentLocationOkResponse3Request(BaseModel):
    """CurrentLocationOkResponse3Request

    :param language: language, defaults to None
    :type language: str, optional
    :param query: query, defaults to None
    :type query: str, optional
    :param type_: type_, defaults to None
    :type type_: str, optional
    :param unit: unit, defaults to None
    :type unit: str, optional
    """

    def __init__(
        self,
        language: str = None,
        query: str = None,
        type_: str = None,
        unit: str = None,
    ):
        if language is not None:
            self.language = language
        if query is not None:
            self.query = query
        if type_ is not None:
            self.type_ = type_
        if unit is not None:
            self.unit = unit


@JsonMap({})
class CurrentLocationOkResponse3(BaseModel):
    """CurrentLocationOkResponse3

    :param current: current, defaults to None
    :type current: CurrentLocationOkResponse3Current, optional
    :param location: location, defaults to None
    :type location: CurrentLocationOkResponse3Location, optional
    :param request: request, defaults to None
    :type request: CurrentLocationOkResponse3Request, optional
    """

    def __init__(
        self,
        current: CurrentLocationOkResponse3Current = None,
        location: CurrentLocationOkResponse3Location = None,
        request: CurrentLocationOkResponse3Request = None,
    ):
        if current is not None:
            self.current = self._define_object(
                current, CurrentLocationOkResponse3Current
            )
        if location is not None:
            self.location = self._define_object(
                location, CurrentLocationOkResponse3Location
            )
        if request is not None:
            self.request = self._define_object(
                request, CurrentLocationOkResponse3Request
            )


class CurrentLocationOkResponseGuard(OneOfBaseModel):
    class_list = {
        "CurrentLocationOkResponse1": CurrentLocationOkResponse1,
        "List[CurrentLocationOkResponse2]": List[CurrentLocationOkResponse2],
        "CurrentLocationOkResponse3": CurrentLocationOkResponse3,
    }


CurrentLocationOkResponse = Union[
    CurrentLocationOkResponse1,
    List[CurrentLocationOkResponse2],
    CurrentLocationOkResponse3,
]
