# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel


@JsonMap({})
class AutocompleteOkResponseRequest(BaseModel):
    """AutocompleteOkResponseRequest

    :param query: query, defaults to None
    :type query: str, optional
    :param results: results, defaults to None
    :type results: float, optional
    """

    def __init__(self, query: str = None, results: float = None):
        if query is not None:
            self.query = query
        if results is not None:
            self.results = results


@JsonMap({})
class Results(BaseModel):
    """Results

    :param country: country, defaults to None
    :type country: str, optional
    :param lat: lat, defaults to None
    :type lat: str, optional
    :param lon: lon, defaults to None
    :type lon: str, optional
    :param name: name, defaults to None
    :type name: str, optional
    :param region: region, defaults to None
    :type region: str, optional
    :param timezone_id: timezone_id, defaults to None
    :type timezone_id: str, optional
    :param utc_offset: utc_offset, defaults to None
    :type utc_offset: str, optional
    """

    def __init__(
        self,
        country: str = None,
        lat: str = None,
        lon: str = None,
        name: str = None,
        region: str = None,
        timezone_id: str = None,
        utc_offset: str = None,
    ):
        if country is not None:
            self.country = country
        if lat is not None:
            self.lat = lat
        if lon is not None:
            self.lon = lon
        if name is not None:
            self.name = name
        if region is not None:
            self.region = region
        if timezone_id is not None:
            self.timezone_id = timezone_id
        if utc_offset is not None:
            self.utc_offset = utc_offset


@JsonMap({})
class AutocompleteOkResponse(BaseModel):
    """AutocompleteOkResponse

    :param request: request, defaults to None
    :type request: AutocompleteOkResponseRequest, optional
    :param results: results, defaults to None
    :type results: List[Results], optional
    """

    def __init__(
        self,
        request: AutocompleteOkResponseRequest = None,
        results: List[Results] = None,
    ):
        if request is not None:
            self.request = self._define_object(request, AutocompleteOkResponseRequest)
        if results is not None:
            self.results = self._define_list(results, Results)
