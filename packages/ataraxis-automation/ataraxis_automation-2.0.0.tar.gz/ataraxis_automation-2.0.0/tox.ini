# This file provides configurations for tox-based project automation. Generally, this project uses tox similar to how
# some other projects use build-systems.

# Base tox configurations. Note, the 'envlist' will be run in the listed order whenever 'tox' is used without an -e
# specifier.
[tox]
requires =
    tox-uv
    tox>=4
envlist =
    lint
    stubs
    {py310, py311, py312}-test
    combine-test-reports
    docs

# This forces tox to create a 'sterile' environment into which the project with all dependencies is installed prior to
# running the requested tasks, isolating the process from the rest of the system. This is almost always the desired
# runtime mode.
isolated_build = True

# Note: The 'basepython' argument should either be set to the oldest version in the supported stack or to the main
# version. It controls the specific ruleset used to format and (especially) style-check the code. Also, existing
# stubs prevent mypy from checking source code, so they are removed before linting.
[testenv: lint]
description =
    Runs static code formatting, style and typing checkers. Mypy may not work properly until py.typed marker is
    added by 'stubs' task.
deps =
    mypy
    ruff
    types-pyyaml
    ataraxis-automation
extras = types
basepython = py310
commands =
    automation-cli purge-stubs
    ruff check --select I --fix
    ruff format
    mypy . --strict --extra-checks --warn-redundant-casts --warn-unreachable --no-incremental

# Note: if py.typed is not present, generates the marker in the highest library directory before generating stub files.
# Builds and uses the distribution package to generate the stubs.
[testenv: stubs]
description =
    Generates the py.typed marker and the stub files using the built library wheel. Formats the stubs with ruff before
    moving them to appropriate source sub-directories.
deps =
    mypy
    ruff
    ataraxis-automation
depends = lint
commands =
    automation-cli process-typed-markers
    stubgen -o stubs --include-private --include-docstrings -p ataraxis_automation -v
    ruff check --select I --fix
    ruff format
    automation-cli process-stubs

# Note: The test source code should be written to import and use intended library name, as the project is compiled and
# installed as a library prior to running the tests. Therefore, the tests need to be designed to test the distributed
# library, rather than the source code.
[testenv: {py310, py311, py312}-test]
package = wheel
description =
    Runs unit and integration tests for each of the python versions listed in the task name. Uses 'loadgroup' balancing
    and all logical cores to optimize runtime speed while allowing manual control over which cores execute tasks (see
    pytest-xdist documentation).
deps =
    pytest
    pytest-cov
    pytest-xdist
    coverage[toml]
setenv =
# Sets environment parameters, which includes intermediate coverage aggregation file used by combine-test-reports.
    COVERAGE_FILE = reports{/}.coverage.{envname}
commands =
# Make sure the --cov is always set to the intended library name, so that coverage runs on the whole library
# exactly once.
    pytest --import-mode=append --cov=ataraxis_automation --cov-config=pyproject.toml --cov-report=xml \
    --junitxml=reports/pytest.xml.{envname} -n logical --dist loadgroup

[testenv:combine-test-reports]
skip_install = true
description =
    Combines test-coverage data from multiple test runs (for different python versions) into a single html file. The file
    can be viewed by loading the 'reports/coverage_html/index.html'.
setenv = COVERAGE_FILE = reports/.coverage
depends = {py310, py311, py312}-test
deps =
    junitparser
    coverage[toml]
commands =
    junitparser merge --glob reports/pytest.xml.* reports/pytest.xml
    coverage combine --keep
    coverage xml
    coverage html

# Uses '-j auto' to parallelize the build process and '-v' to make it verbose.
[testenv:docs]
description =
    Builds the API documentation from source code docstrings using Sphinx. The result can be viewed by loading
    'docs/build/html/index.html'.
deps =
    sphinx
    importlib_metadata
    sphinx-rtd-theme
    sphinx-click
commands =
    sphinx-build -b html -d docs/build/doctrees docs/source docs/build/html -j auto -v

[testenv:build]
skip-install = true
description =
    Builds the source code distribution (sdist) and the binary distribution package (wheel). Use 'upload' task to
    subsequently upload built wheels to PIP.
deps =
    build
    hatchling
allowlist_externals =
    docker
commands =
    python -m build . --sdist
    python -m build . --wheel

# You can pass the '--replace-token' flag from the command line to replace the token stored in the .pypirc file.
[testenv:upload]
skip_install = true
description =
    Uses twine to upload all files inside the '/dist' folder to pip, ignoring any files that are already uploaded.
    Uses API token stored in '.pypirc' file or provided by user to authenticate the upload.
deps =
    twine
    ataraxis-automation
allowlist_externals =
    distutils
commands =
    automation-cli set-pypi-token {posargs:}
    twine upload dist/* --skip-existing --config-file .pypirc

# Note: This task automatically uses the latest version of the pacakge uploaded to PIP and expects it to contain
# sdist archive. Ideally, it should be used together with the build and twine tasks, as that would ensure the recipe
# always matches the latest distributed code version.
[testenv:recipe]
skip_install = true
description =
    Uses grayskull to parse the source code tarball stored on pip and generate the recipe used to submit the
    package to conda-forge. The submission process has to be carried out manually, see
    https://conda-forge.org/docs/maintainer/adding_pkgs/ for more details.
deps =
    grayskull
    ataraxis-automation
commands =
    automation-cli generate-recipe-folder
    grayskull pypi ataraxis_automation -o recipe --strict-conda-forge --list-missing-deps -m Inkaros

[testenv:install]
basepython = py310
deps =
    ataraxis-automation
description =
    Builds and installs the project into the project- and os-specific conda environment. If the environment does
    not exist, creates it before installing the project.
commands =
    automation-cli --verbose install-project --environment-name axa_dev --python-version 3.12

[testenv:uninstall]
basepython = py310
deps =
    ataraxis-automation
description =
    Uninstalls the project from the project- and os-specific conda environment. If the environment does not exist,
    this function silently succeeds.
commands =
    automation-cli --verbose uninstall-project --environment-name axa_dev --python-version 3.12

# Note: You can provide an additional '--recreate' flag to forcibly remove and create the environment from scratch if
# it already exists. Generally, it is advised to use 'tox -e remove' followed by this task instead though.
[testenv:create]
basepython = py310
deps =
    ataraxis-automation
description =
    Creates a minimally-configured conda environment using the requested python version and installs conda- and pip-
    dependencies extracted from pyproject.toml file into the environment. Does not install the project!
commands =
    automation-cli --verbose create-env --environment-name axa_dev --python-version 3.12

[testenv:remove]
basepython = py310
deps =
    ataraxis-automation
description =
    Removes the project conda environment, if it is installed locally.
commands =
    automation-cli --verbose remove-env --environment-name axa_dev

[testenv:export]
deps =
    ataraxis-automation
description =
    Exports the project's conda environment to the 'envs' folder as a .yml file and as a spec.txt with revision history.
commands =
    automation-cli --verbose export-env --environment-name axa_dev

[testenv:import]
deps =
    ataraxis-automation
description =
    Automatically discovers and imports or updates an already existing os-specific environment using the .yml file
    stored in the 'envs' directory.
commands =
    automation-cli --verbose import-env --environment-name axa_dev

[testenv:rename]
deps =
    ataraxis-automation
description =
    Replaces the base environment name used by all files inside the 'envs' directory with the user-input name.
commands =
    automation-cli --verbose rename-environments

[testenv:adopt]
skip_install = true
deps =
    ataraxis-automation
description =
    Adopts a Sun Lab template-generated project by replacing default placeholders with user-provided information.
commands =
    automation-cli adopt-project
