Metadata-Version: 2.1
Name: py-consistent-hash
Version: 1.0.0
Summary: A consistent hash implementation in python
Author-email: Gaurav Tiwari <gtinside@gmail.com>
License: MIT License
        
        Copyright (c) [year] [fullname]
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
Project-URL: Homepage, https://github.com/gtinside/consistent-hashing
Keywords: hash,consistent hash
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE

### Consistent Hashing

Consistent hashing is used in distributed systems to efficiently distribute data among multiple nodes while minimizing reorganization when nodes are added or removed.It maps both data and nodes onto a common hash space (typically a circle), where each node is responsible for the data that falls within its range on the circle.

#### Features
1. This library use md5 from hashlib. Get the string value (hex digest) and convert it into a string
2. Two maps are maintained by this library
    a. Map to identify the hash of nodes adding to the ring
    b. Map to identify which keys are part of what nodes

#### Usage
```
consistent_hashing_impl = ConsistentHashingImpl()
consistent_hashing_impl.add_node("node1")
consistent_hashing_impl.add_node("node2")
consistent_hashing_impl.add_node("node3")

print("Key will be stored in node :%s" % consistent_hashing_impl.get_node_for_data("python"))
print("Key will be stored in node :%s" % consistent_hashing_impl.get_node_for_data("Java"))
```
The above code will generate the following output
```
2024-07-09 00:01:34,035: Generating hash for key: node1
2024-07-09 00:01:34,035: Generating hash for key: node2
2024-07-09 00:01:34,035: Generating hash for key: node3
2024-07-09 00:01:34,035: Generating hash for key: python
Key will be stored in node :node2
2024-07-09 00:01:34,035: Generating hash for key: Java
Key will be stored in node :node1
```
