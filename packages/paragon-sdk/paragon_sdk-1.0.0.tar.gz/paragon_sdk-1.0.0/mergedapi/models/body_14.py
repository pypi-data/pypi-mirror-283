# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.inventory_hardware_asset import InventoryHardwareAsset
from mergedapi.models.inventory_software_asset import InventorySoftwareAsset


class Body14(object):

    """Implementation of the 'body14' model.

    TODO: type model description here.

    Attributes:
        device_id (str): Optionally the device that is the subject of the
            inventory.
        hardware (List[InventoryHardwareAsset]): The hardware assets of the
            inventory.
        software (List[InventorySoftwareAsset]): The software assets of the
            inventory.
        labels (Dict[str, str]): Labels applied to the inventory.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "device_id": 'deviceId',
        "hardware": 'hardware',
        "software": 'software',
        "labels": 'labels'
    }

    _optionals = [
        'device_id',
        'hardware',
        'software',
        'labels',
    ]

    def __init__(self,
                 device_id=APIHelper.SKIP,
                 hardware=APIHelper.SKIP,
                 software=APIHelper.SKIP,
                 labels=APIHelper.SKIP):
        """Constructor for the Body14 class"""

        # Initialize members of the class
        if device_id is not APIHelper.SKIP:
            self.device_id = device_id 
        if hardware is not APIHelper.SKIP:
            self.hardware = hardware 
        if software is not APIHelper.SKIP:
            self.software = software 
        if labels is not APIHelper.SKIP:
            self.labels = labels 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        device_id = dictionary.get("deviceId") if dictionary.get("deviceId") else APIHelper.SKIP
        hardware = None
        if dictionary.get('hardware') is not None:
            hardware = [InventoryHardwareAsset.from_dictionary(x) for x in dictionary.get('hardware')]
        else:
            hardware = APIHelper.SKIP
        software = None
        if dictionary.get('software') is not None:
            software = [InventorySoftwareAsset.from_dictionary(x) for x in dictionary.get('software')]
        else:
            software = APIHelper.SKIP
        labels = dictionary.get("labels") if dictionary.get("labels") else APIHelper.SKIP
        # Return an object of this model
        return cls(device_id,
                   hardware,
                   software,
                   labels)
