# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.parameter_1 import Parameter1


class Plugin(object):

    """Implementation of the 'Plugin' model.

    Input plugin

    Attributes:
        name (str): Name of the input plugin
        parameters (List[Parameter1]): Plugin specific parameters (config)

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "parameters": 'parameters'
    }

    _optionals = [
        'parameters',
    ]

    def __init__(self,
                 name=None,
                 parameters=APIHelper.SKIP):
        """Constructor for the Plugin class"""

        # Initialize members of the class
        self.name = name 
        if parameters is not APIHelper.SKIP:
            self.parameters = parameters 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else None
        parameters = None
        if dictionary.get('parameters') is not None:
            parameters = [Parameter1.from_dictionary(x) for x in dictionary.get('parameters')]
        else:
            parameters = APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   parameters)
