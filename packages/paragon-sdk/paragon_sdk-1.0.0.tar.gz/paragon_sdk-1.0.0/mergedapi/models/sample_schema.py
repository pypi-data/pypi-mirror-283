# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.field import Field


class SampleSchema(object):

    """Implementation of the 'sample_schema' model.

    TODO: type model description here.

    Attributes:
        enterprise (int): Enterprise to which sample belongs
        field (List[Field]): List of fields
        format (int): Format of sample
        record_type (RecordTypeEnum): Type of records in this sample type
        sample_name (str): Name of sample type

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "enterprise": 'enterprise',
        "field": 'field',
        "format": 'format',
        "sample_name": 'sample-name',
        "record_type": 'record-type'
    }

    _optionals = [
        'record_type',
    ]

    def __init__(self,
                 enterprise=None,
                 field=None,
                 format=None,
                 sample_name=None,
                 record_type=APIHelper.SKIP):
        """Constructor for the SampleSchema class"""

        # Initialize members of the class
        self.enterprise = enterprise 
        self.field = field 
        self.format = format 
        if record_type is not APIHelper.SKIP:
            self.record_type = record_type 
        self.sample_name = sample_name 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        enterprise = dictionary.get("enterprise") if dictionary.get("enterprise") else None
        field = None
        if dictionary.get('field') is not None:
            field = [Field.from_dictionary(x) for x in dictionary.get('field')]
        format = dictionary.get("format") if dictionary.get("format") else None
        sample_name = dictionary.get("sample-name") if dictionary.get("sample-name") else None
        record_type = dictionary.get("record-type") if dictionary.get("record-type") else APIHelper.SKIP
        # Return an object of this model
        return cls(enterprise,
                   field,
                   format,
                   sample_name,
                   record_type)
