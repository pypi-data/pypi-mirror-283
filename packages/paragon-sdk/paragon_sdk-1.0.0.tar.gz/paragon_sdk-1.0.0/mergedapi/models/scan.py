# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.compliance_target_result_summary import ComplianceTargetResultSummary
from mergedapi.models.request import Request


class Scan(object):

    """Implementation of the 'Scan' model.

    TODO: type model description here.

    Attributes:
        id (str): id is the system-generated unique identifier of the scan.
        request (Request): TODO: type description here.
        started_at (datetime): The time at which the scan started. This might
            be undefined, depending on the state of the scan.
        ended_at (datetime): The time at which the scan ended. This will be
            undefined until the scan is complete.
        results (List[ComplianceTargetResultSummary]): Contains a summary of
            the status of the scan for each of the target devices.
        summary_status (ComplianceScanStatusEnum): TODO: type description
            here.
        labels (Dict[str, str]): Labels applied to the scan.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "request": 'request',
        "started_at": 'startedAt',
        "ended_at": 'endedAt',
        "results": 'results',
        "summary_status": 'summaryStatus',
        "labels": 'labels'
    }

    _optionals = [
        'id',
        'request',
        'started_at',
        'ended_at',
        'results',
        'summary_status',
        'labels',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 request=APIHelper.SKIP,
                 started_at=APIHelper.SKIP,
                 ended_at=APIHelper.SKIP,
                 results=APIHelper.SKIP,
                 summary_status=APIHelper.SKIP,
                 labels=APIHelper.SKIP):
        """Constructor for the Scan class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if request is not APIHelper.SKIP:
            self.request = request 
        if started_at is not APIHelper.SKIP:
            self.started_at = APIHelper.apply_datetime_converter(started_at, APIHelper.RFC3339DateTime) if started_at else None 
        if ended_at is not APIHelper.SKIP:
            self.ended_at = APIHelper.apply_datetime_converter(ended_at, APIHelper.RFC3339DateTime) if ended_at else None 
        if results is not APIHelper.SKIP:
            self.results = results 
        if summary_status is not APIHelper.SKIP:
            self.summary_status = summary_status 
        if labels is not APIHelper.SKIP:
            self.labels = labels 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        request = Request.from_dictionary(dictionary.get('request')) if 'request' in dictionary.keys() else APIHelper.SKIP
        started_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("startedAt")).datetime if dictionary.get("startedAt") else APIHelper.SKIP
        ended_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("endedAt")).datetime if dictionary.get("endedAt") else APIHelper.SKIP
        results = None
        if dictionary.get('results') is not None:
            results = [ComplianceTargetResultSummary.from_dictionary(x) for x in dictionary.get('results')]
        else:
            results = APIHelper.SKIP
        summary_status = dictionary.get("summaryStatus") if dictionary.get("summaryStatus") else APIHelper.SKIP
        labels = dictionary.get("labels") if dictionary.get("labels") else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   request,
                   started_at,
                   ended_at,
                   results,
                   summary_status,
                   labels)
