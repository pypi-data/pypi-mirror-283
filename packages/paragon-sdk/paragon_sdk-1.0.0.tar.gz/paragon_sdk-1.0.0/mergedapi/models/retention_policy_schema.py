# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class RetentionPolicySchema(object):

    """Implementation of the 'retention-policy_schema' model.

    TODO: type model description here.

    Attributes:
        duration (str): Schedule duration in days or hours, Should be of
            pattern [1-9][0-9]*[dh]
        replication (int): Number of independent copies if stored in the
            cluster
        retention_policy_name (str): Name of the retention-policy. Should be
            of pattern [a-zA-Z][a-zA-Z0-9_-]*

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "retention_policy_name": 'retention-policy-name',
        "duration": 'duration',
        "replication": 'replication'
    }

    _optionals = [
        'duration',
        'replication',
    ]

    def __init__(self,
                 retention_policy_name=None,
                 duration=APIHelper.SKIP,
                 replication=APIHelper.SKIP):
        """Constructor for the RetentionPolicySchema class"""

        # Initialize members of the class
        if duration is not APIHelper.SKIP:
            self.duration = duration 
        if replication is not APIHelper.SKIP:
            self.replication = replication 
        self.retention_policy_name = retention_policy_name 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        retention_policy_name = dictionary.get("retention-policy-name") if dictionary.get("retention-policy-name") else None
        duration = dictionary.get("duration") if dictionary.get("duration") else APIHelper.SKIP
        replication = dictionary.get("replication") if dictionary.get("replication") else APIHelper.SKIP
        # Return an object of this model
        return cls(retention_policy_name,
                   duration,
                   replication)
