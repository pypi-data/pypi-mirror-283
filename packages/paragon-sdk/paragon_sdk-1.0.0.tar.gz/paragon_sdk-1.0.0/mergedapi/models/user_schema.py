# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.group import Group


class UserSchema(object):

    """Implementation of the 'user_schema' model.

    TODO: type model description here.

    Attributes:
        user_name (str): Name of the user
        first_name (str): First name of the user
        last_name (str): Last name of the user
        email (str): Email of the user
        password (str): Password of the user
        active (bool): Status of the user
        groups (List[Group]): list of groups associated

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "user_name": 'userName',
        "first_name": 'firstName',
        "last_name": 'lastName',
        "email": 'email',
        "password": 'password',
        "active": 'active',
        "groups": 'groups'
    }

    _optionals = [
        'user_name',
        'first_name',
        'last_name',
        'email',
        'password',
        'active',
        'groups',
    ]

    def __init__(self,
                 user_name=APIHelper.SKIP,
                 first_name=APIHelper.SKIP,
                 last_name=APIHelper.SKIP,
                 email=APIHelper.SKIP,
                 password=APIHelper.SKIP,
                 active=APIHelper.SKIP,
                 groups=APIHelper.SKIP):
        """Constructor for the UserSchema class"""

        # Initialize members of the class
        if user_name is not APIHelper.SKIP:
            self.user_name = user_name 
        if first_name is not APIHelper.SKIP:
            self.first_name = first_name 
        if last_name is not APIHelper.SKIP:
            self.last_name = last_name 
        if email is not APIHelper.SKIP:
            self.email = email 
        if password is not APIHelper.SKIP:
            self.password = password 
        if active is not APIHelper.SKIP:
            self.active = active 
        if groups is not APIHelper.SKIP:
            self.groups = groups 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        user_name = dictionary.get("userName") if dictionary.get("userName") else APIHelper.SKIP
        first_name = dictionary.get("firstName") if dictionary.get("firstName") else APIHelper.SKIP
        last_name = dictionary.get("lastName") if dictionary.get("lastName") else APIHelper.SKIP
        email = dictionary.get("email") if dictionary.get("email") else APIHelper.SKIP
        password = dictionary.get("password") if dictionary.get("password") else APIHelper.SKIP
        active = dictionary.get("active") if "active" in dictionary.keys() else APIHelper.SKIP
        groups = None
        if dictionary.get('groups') is not None:
            groups = [Group.from_dictionary(x) for x in dictionary.get('groups')]
        else:
            groups = APIHelper.SKIP
        # Return an object of this model
        return cls(user_name,
                   first_name,
                   last_name,
                   email,
                   password,
                   active,
                   groups)
