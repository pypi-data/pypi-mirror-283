# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.formula_1 import Formula1


class Vector(object):

    """Implementation of the 'Vector' model.

    TODO: type model description here.

    Attributes:
        formula (Formula1): TODO: type description here.
        path (List[str]): TODO: type description here.
        time_range (str): How much back in time should we look for data.
            Specify positive integer followed by s/m/h/d/w/y/o representing
            seconds/minutes/hours/days/weeks/years/offset. Eg: 2s
        vector_name (str): Name of the vector. Should be of pattern
            [a-zA-Z][a-zA-Z0-9_-]*

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "vector_name": 'vector-name',
        "formula": 'formula',
        "path": 'path',
        "time_range": 'time-range'
    }

    _optionals = [
        'formula',
        'path',
        'time_range',
    ]

    def __init__(self,
                 vector_name=None,
                 formula=APIHelper.SKIP,
                 path=APIHelper.SKIP,
                 time_range=APIHelper.SKIP):
        """Constructor for the Vector class"""

        # Initialize members of the class
        if formula is not APIHelper.SKIP:
            self.formula = formula 
        if path is not APIHelper.SKIP:
            self.path = path 
        if time_range is not APIHelper.SKIP:
            self.time_range = time_range 
        self.vector_name = vector_name 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        vector_name = dictionary.get("vector-name") if dictionary.get("vector-name") else None
        formula = Formula1.from_dictionary(dictionary.get('formula')) if 'formula' in dictionary.keys() else APIHelper.SKIP
        path = dictionary.get("path") if dictionary.get("path") else APIHelper.SKIP
        time_range = dictionary.get("time-range") if dictionary.get("time-range") else APIHelper.SKIP
        # Return an object of this model
        return cls(vector_name,
                   formula,
                   path,
                   time_range)
