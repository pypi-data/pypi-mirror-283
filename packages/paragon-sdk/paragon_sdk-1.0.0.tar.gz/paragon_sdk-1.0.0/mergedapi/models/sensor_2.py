# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.byoi_1 import Byoi1
from mergedapi.models.flow_4 import Flow4
from mergedapi.models.i_agent_3 import IAgent3
from mergedapi.models.ifa_2 import Ifa2
from mergedapi.models.native_gpb_4 import NativeGpb4
from mergedapi.models.open_config_4 import OpenConfig4
from mergedapi.models.server_monitoring_3 import ServerMonitoring3
from mergedapi.models.sflow_3 import Sflow3
from mergedapi.models.snmp_4 import Snmp4
from mergedapi.models.snmp_notification_2 import SnmpNotification2
from mergedapi.models.syslog_5 import Syslog5


class Sensor2(object):

    """Implementation of the 'Sensor2' model.

    TODO: type model description here.

    Attributes:
        description (str): Description about the sensor
        sflow (Sflow3): TODO: type description here.
        ifa (Ifa2): TODO: type description here.
        flow (Flow4): TODO: type description here.
        i_agent (IAgent3): TODO: type description here.
        native_gpb (NativeGpb4): TODO: type description here.
        open_config (OpenConfig4): TODO: type description here.
        server_monitoring (ServerMonitoring3): TODO: type description here.
        sensor_name (str): Name of sensor. Should be of pattern
            [a-zA-Z][a-zA-Z0-9_-]*
        snmp (Snmp4): TODO: type description here.
        snmp_notification (SnmpNotification2): SNMP Trap/Inform sensors
        syslog (Syslog5): TODO: type description here.
        synopsis (str): Synopsis about the sensor
        byoi (Byoi1): Bring your own ingest ingest plugin config

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "sensor_name": 'sensor-name',
        "description": 'description',
        "sflow": 'sflow',
        "ifa": 'ifa',
        "flow": 'flow',
        "i_agent": 'iAgent',
        "native_gpb": 'native-gpb',
        "open_config": 'open-config',
        "server_monitoring": 'server-monitoring',
        "snmp": 'snmp',
        "snmp_notification": 'snmp-notification',
        "syslog": 'syslog',
        "synopsis": 'synopsis',
        "byoi": 'byoi'
    }

    _optionals = [
        'description',
        'sflow',
        'ifa',
        'flow',
        'i_agent',
        'native_gpb',
        'open_config',
        'server_monitoring',
        'snmp',
        'snmp_notification',
        'syslog',
        'synopsis',
        'byoi',
    ]

    def __init__(self,
                 sensor_name=None,
                 description=APIHelper.SKIP,
                 sflow=APIHelper.SKIP,
                 ifa=APIHelper.SKIP,
                 flow=APIHelper.SKIP,
                 i_agent=APIHelper.SKIP,
                 native_gpb=APIHelper.SKIP,
                 open_config=APIHelper.SKIP,
                 server_monitoring=APIHelper.SKIP,
                 snmp=APIHelper.SKIP,
                 snmp_notification=APIHelper.SKIP,
                 syslog=APIHelper.SKIP,
                 synopsis=APIHelper.SKIP,
                 byoi=APIHelper.SKIP):
        """Constructor for the Sensor2 class"""

        # Initialize members of the class
        if description is not APIHelper.SKIP:
            self.description = description 
        if sflow is not APIHelper.SKIP:
            self.sflow = sflow 
        if ifa is not APIHelper.SKIP:
            self.ifa = ifa 
        if flow is not APIHelper.SKIP:
            self.flow = flow 
        if i_agent is not APIHelper.SKIP:
            self.i_agent = i_agent 
        if native_gpb is not APIHelper.SKIP:
            self.native_gpb = native_gpb 
        if open_config is not APIHelper.SKIP:
            self.open_config = open_config 
        if server_monitoring is not APIHelper.SKIP:
            self.server_monitoring = server_monitoring 
        self.sensor_name = sensor_name 
        if snmp is not APIHelper.SKIP:
            self.snmp = snmp 
        if snmp_notification is not APIHelper.SKIP:
            self.snmp_notification = snmp_notification 
        if syslog is not APIHelper.SKIP:
            self.syslog = syslog 
        if synopsis is not APIHelper.SKIP:
            self.synopsis = synopsis 
        if byoi is not APIHelper.SKIP:
            self.byoi = byoi 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        sensor_name = dictionary.get("sensor-name") if dictionary.get("sensor-name") else None
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        sflow = Sflow3.from_dictionary(dictionary.get('sflow')) if 'sflow' in dictionary.keys() else APIHelper.SKIP
        ifa = Ifa2.from_dictionary(dictionary.get('ifa')) if 'ifa' in dictionary.keys() else APIHelper.SKIP
        flow = Flow4.from_dictionary(dictionary.get('flow')) if 'flow' in dictionary.keys() else APIHelper.SKIP
        i_agent = IAgent3.from_dictionary(dictionary.get('iAgent')) if 'iAgent' in dictionary.keys() else APIHelper.SKIP
        native_gpb = NativeGpb4.from_dictionary(dictionary.get('native-gpb')) if 'native-gpb' in dictionary.keys() else APIHelper.SKIP
        open_config = OpenConfig4.from_dictionary(dictionary.get('open-config')) if 'open-config' in dictionary.keys() else APIHelper.SKIP
        server_monitoring = ServerMonitoring3.from_dictionary(dictionary.get('server-monitoring')) if 'server-monitoring' in dictionary.keys() else APIHelper.SKIP
        snmp = Snmp4.from_dictionary(dictionary.get('snmp')) if 'snmp' in dictionary.keys() else APIHelper.SKIP
        snmp_notification = SnmpNotification2.from_dictionary(dictionary.get('snmp-notification')) if 'snmp-notification' in dictionary.keys() else APIHelper.SKIP
        syslog = Syslog5.from_dictionary(dictionary.get('syslog')) if 'syslog' in dictionary.keys() else APIHelper.SKIP
        synopsis = dictionary.get("synopsis") if dictionary.get("synopsis") else APIHelper.SKIP
        byoi = Byoi1.from_dictionary(dictionary.get('byoi')) if 'byoi' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(sensor_name,
                   description,
                   sflow,
                   ifa,
                   flow,
                   i_agent,
                   native_gpb,
                   open_config,
                   server_monitoring,
                   snmp,
                   snmp_notification,
                   syslog,
                   synopsis,
                   byoi)
