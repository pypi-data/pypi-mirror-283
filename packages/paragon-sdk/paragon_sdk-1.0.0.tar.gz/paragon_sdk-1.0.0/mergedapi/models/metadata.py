# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class Metadata(object):

    """Implementation of the 'Metadata' model.

    TODO: type model description here.

    Attributes:
        id (str): The id of the document. This should not be defined when the
            message is used in a CreateDocumentRequest.
        name (str): The name of the document.
        location (str): The location of the document.
        version (str): The version of the document.
        created_at (datetime): The time at which the document was created.
        description (str): Optional description of the document.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "name": 'name',
        "location": 'location',
        "version": 'version',
        "created_at": 'createdAt',
        "description": 'description'
    }

    _optionals = [
        'id',
        'name',
        'location',
        'version',
        'created_at',
        'description',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 location=APIHelper.SKIP,
                 version=APIHelper.SKIP,
                 created_at=APIHelper.SKIP,
                 description=APIHelper.SKIP):
        """Constructor for the Metadata class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if name is not APIHelper.SKIP:
            self.name = name 
        if location is not APIHelper.SKIP:
            self.location = location 
        if version is not APIHelper.SKIP:
            self.version = version 
        if created_at is not APIHelper.SKIP:
            self.created_at = APIHelper.apply_datetime_converter(created_at, APIHelper.RFC3339DateTime) if created_at else None 
        if description is not APIHelper.SKIP:
            self.description = description 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        location = dictionary.get("location") if dictionary.get("location") else APIHelper.SKIP
        version = dictionary.get("version") if dictionary.get("version") else APIHelper.SKIP
        created_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("createdAt")).datetime if dictionary.get("createdAt") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   name,
                   location,
                   version,
                   created_at,
                   description)
