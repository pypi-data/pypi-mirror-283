# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.edge_schema import EdgeSchema


class SiteSchema(object):

    """Implementation of the 'site_schema' model.

    TODO: type model description here.

    Attributes:
        description (str): Description about the site
        edge (List[EdgeSchema]): TODO: type description here.
        site_name (str): Name of the site. Should be of pattern
            [a-zA-Z][a-zA-Z0-9_-]*

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "site_name": 'site-name',
        "description": 'description',
        "edge": 'edge'
    }

    _optionals = [
        'description',
        'edge',
    ]

    def __init__(self,
                 site_name=None,
                 description=APIHelper.SKIP,
                 edge=APIHelper.SKIP):
        """Constructor for the SiteSchema class"""

        # Initialize members of the class
        if description is not APIHelper.SKIP:
            self.description = description 
        if edge is not APIHelper.SKIP:
            self.edge = edge 
        self.site_name = site_name 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        site_name = dictionary.get("site-name") if dictionary.get("site-name") else None
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        edge = None
        if dictionary.get('edge') is not None:
            edge = [EdgeSchema.from_dictionary(x) for x in dictionary.get('edge')]
        else:
            edge = APIHelper.SKIP
        # Return an object of this model
        return cls(site_name,
                   description,
                   edge)
