# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.entity_id import EntityId
from mergedapi.models.score_value_post import ScoreValuePost
from mergedapi.models.source_id import SourceId


class Request1(object):

    """Implementation of the 'Request1' model.

    TODO: type model description here.

    Attributes:
        org_id (str): TODO: type description here.
        entity_id (EntityId): TODO: type description here.
        source_id (SourceId): TODO: type description here.
        values (List[ScoreValuePost]): Defines the factors and associated
            values that are being reported.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "org_id": 'orgId',
        "entity_id": 'entityId',
        "source_id": 'sourceId',
        "values": 'values'
    }

    _optionals = [
        'org_id',
        'entity_id',
        'source_id',
        'values',
    ]

    def __init__(self,
                 org_id=APIHelper.SKIP,
                 entity_id=APIHelper.SKIP,
                 source_id=APIHelper.SKIP,
                 values=APIHelper.SKIP):
        """Constructor for the Request1 class"""

        # Initialize members of the class
        if org_id is not APIHelper.SKIP:
            self.org_id = org_id 
        if entity_id is not APIHelper.SKIP:
            self.entity_id = entity_id 
        if source_id is not APIHelper.SKIP:
            self.source_id = source_id 
        if values is not APIHelper.SKIP:
            self.values = values 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        org_id = dictionary.get("orgId") if dictionary.get("orgId") else APIHelper.SKIP
        entity_id = EntityId.from_dictionary(dictionary.get('entityId')) if 'entityId' in dictionary.keys() else APIHelper.SKIP
        source_id = SourceId.from_dictionary(dictionary.get('sourceId')) if 'sourceId' in dictionary.keys() else APIHelper.SKIP
        values = None
        if dictionary.get('values') is not None:
            values = [ScoreValuePost.from_dictionary(x) for x in dictionary.get('values')]
        else:
            values = APIHelper.SKIP
        # Return an object of this model
        return cls(org_id,
                   entity_id,
                   source_id,
                   values)
