# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.amqp_publish import AmqpPublish
from mergedapi.models.emails import Emails
from mergedapi.models.http_post import HttpPost
from mergedapi.models.kafka_publish import KafkaPublish
from mergedapi.models.microsoft_teams import MicrosoftTeams
from mergedapi.models.slack import Slack


class NotificationSchema(object):

    """Implementation of the 'notification_schema' model.

    TODO: type model description here.

    Attributes:
        description (str): Description about the notification
        http_post (HttpPost): Define HTTP endpoint to post the notification
        notification_name (str): Name of the notification. Should be of
            pattern [a-zA-Z][a-zA-Z0-9_-]*
        slack (Slack): Define slack notification
        microsoft_teams (MicrosoftTeams): Define Microsoft Teams Connector
            channel endpoint to post notification
        emails (Emails): Define email notification
        kafka_publish (KafkaPublish): Define kafka notification
        amqp_publish (AmqpPublish): Define amqp notification

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "notification_name": 'notification-name',
        "description": 'description',
        "http_post": 'http-post',
        "slack": 'slack',
        "microsoft_teams": 'microsoft-teams',
        "emails": 'emails',
        "kafka_publish": 'kafka-publish',
        "amqp_publish": 'amqp-publish'
    }

    _optionals = [
        'description',
        'http_post',
        'slack',
        'microsoft_teams',
        'emails',
        'kafka_publish',
        'amqp_publish',
    ]

    def __init__(self,
                 notification_name=None,
                 description=APIHelper.SKIP,
                 http_post=APIHelper.SKIP,
                 slack=APIHelper.SKIP,
                 microsoft_teams=APIHelper.SKIP,
                 emails=APIHelper.SKIP,
                 kafka_publish=APIHelper.SKIP,
                 amqp_publish=APIHelper.SKIP):
        """Constructor for the NotificationSchema class"""

        # Initialize members of the class
        if description is not APIHelper.SKIP:
            self.description = description 
        if http_post is not APIHelper.SKIP:
            self.http_post = http_post 
        self.notification_name = notification_name 
        if slack is not APIHelper.SKIP:
            self.slack = slack 
        if microsoft_teams is not APIHelper.SKIP:
            self.microsoft_teams = microsoft_teams 
        if emails is not APIHelper.SKIP:
            self.emails = emails 
        if kafka_publish is not APIHelper.SKIP:
            self.kafka_publish = kafka_publish 
        if amqp_publish is not APIHelper.SKIP:
            self.amqp_publish = amqp_publish 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        notification_name = dictionary.get("notification-name") if dictionary.get("notification-name") else None
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        http_post = HttpPost.from_dictionary(dictionary.get('http-post')) if 'http-post' in dictionary.keys() else APIHelper.SKIP
        slack = Slack.from_dictionary(dictionary.get('slack')) if 'slack' in dictionary.keys() else APIHelper.SKIP
        microsoft_teams = MicrosoftTeams.from_dictionary(dictionary.get('microsoft-teams')) if 'microsoft-teams' in dictionary.keys() else APIHelper.SKIP
        emails = Emails.from_dictionary(dictionary.get('emails')) if 'emails' in dictionary.keys() else APIHelper.SKIP
        kafka_publish = KafkaPublish.from_dictionary(dictionary.get('kafka-publish')) if 'kafka-publish' in dictionary.keys() else APIHelper.SKIP
        amqp_publish = AmqpPublish.from_dictionary(dictionary.get('amqp-publish')) if 'amqp-publish' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(notification_name,
                   description,
                   http_post,
                   slack,
                   microsoft_teams,
                   emails,
                   kafka_publish,
                   amqp_publish)
