# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.product_1 import Product1


class OperatingSystem2(object):

    """Implementation of the 'OperatingSystem2' model.

    TODO: type model description here.

    Attributes:
        os_name (OsNameEnum): Operating system for the supported devices
        products (List[Product1]): Product information of the device
        sensors (List[str]): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "os_name": 'os-name',
        "products": 'products',
        "sensors": 'sensors'
    }

    _optionals = [
        'products',
        'sensors',
    ]

    def __init__(self,
                 os_name=None,
                 products=APIHelper.SKIP,
                 sensors=APIHelper.SKIP):
        """Constructor for the OperatingSystem2 class"""

        # Initialize members of the class
        self.os_name = os_name 
        if products is not APIHelper.SKIP:
            self.products = products 
        if sensors is not APIHelper.SKIP:
            self.sensors = sensors 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        os_name = dictionary.get("os-name") if dictionary.get("os-name") else None
        products = None
        if dictionary.get('products') is not None:
            products = [Product1.from_dictionary(x) for x in dictionary.get('products')]
        else:
            products = APIHelper.SKIP
        sensors = dictionary.get("sensors") if dictionary.get("sensors") else APIHelper.SKIP
        # Return an object of this model
        return cls(os_name,
                   products,
                   sensors)
