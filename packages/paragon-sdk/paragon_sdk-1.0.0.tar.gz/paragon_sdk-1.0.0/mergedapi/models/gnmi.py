# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class Gnmi(object):

    """Implementation of the 'Gnmi' model.

    TODO: type model description here.

    Attributes:
        enable (bool): If true, enable gnmi
        encoding (EncodingEnum): Encoding to be used, default is protobuf

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "enable": 'enable',
        "encoding": 'encoding'
    }

    _optionals = [
        'enable',
        'encoding',
    ]

    def __init__(self,
                 enable=APIHelper.SKIP,
                 encoding=APIHelper.SKIP):
        """Constructor for the Gnmi class"""

        # Initialize members of the class
        if enable is not APIHelper.SKIP:
            self.enable = enable 
        if encoding is not APIHelper.SKIP:
            self.encoding = encoding 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        enable = dictionary.get("enable") if "enable" in dictionary.keys() else APIHelper.SKIP
        encoding = dictionary.get("encoding") if dictionary.get("encoding") else APIHelper.SKIP
        # Return an object of this model
        return cls(enable,
                   encoding)
