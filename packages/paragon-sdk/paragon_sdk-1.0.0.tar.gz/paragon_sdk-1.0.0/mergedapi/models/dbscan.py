# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.sensitivity import Sensitivity


class Dbscan(object):

    """Implementation of the 'Dbscan' model.

    TODO: type model description here.

    Attributes:
        learning_period (str): Time period on which to detect outliers
        sensitivity (Sensitivity): Sensitivity to outliers: high sensitivity
            detects more outliers

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "learning_period": 'learning-period',
        "sensitivity": 'sensitivity'
    }

    _optionals = [
        'sensitivity',
    ]

    def __init__(self,
                 learning_period=None,
                 sensitivity=APIHelper.SKIP):
        """Constructor for the Dbscan class"""

        # Initialize members of the class
        self.learning_period = learning_period 
        if sensitivity is not APIHelper.SKIP:
            self.sensitivity = sensitivity 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        learning_period = dictionary.get("learning-period") if dictionary.get("learning-period") else None
        sensitivity = Sensitivity.from_dictionary(dictionary.get('sensitivity')) if 'sensitivity' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(learning_period,
                   sensitivity)
