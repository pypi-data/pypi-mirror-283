# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.evidence import Evidence


class Attestation(object):

    """Implementation of the 'Attestation' model.

    TODO: type model description here.

    Attributes:
        id (str): System-defined unique identifier of the attestation.
        device_id (str): The device that is the subject of the attestation.
        create_time (datetime): The time at which the attestation was
            created.
        end_time (datetime): The time at which the attestaion was completed.
        status (AttestationStatusEnum): TODO: type description here.
        errors (List[str]): When status is Error or Failure, holds explanatory
            details.
        evidence (Evidence): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "device_id": 'deviceId',
        "create_time": 'createTime',
        "end_time": 'endTime',
        "status": 'status',
        "errors": 'errors',
        "evidence": 'evidence'
    }

    _optionals = [
        'id',
        'device_id',
        'create_time',
        'end_time',
        'status',
        'errors',
        'evidence',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 device_id=APIHelper.SKIP,
                 create_time=APIHelper.SKIP,
                 end_time=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 errors=APIHelper.SKIP,
                 evidence=APIHelper.SKIP):
        """Constructor for the Attestation class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if device_id is not APIHelper.SKIP:
            self.device_id = device_id 
        if create_time is not APIHelper.SKIP:
            self.create_time = APIHelper.apply_datetime_converter(create_time, APIHelper.RFC3339DateTime) if create_time else None 
        if end_time is not APIHelper.SKIP:
            self.end_time = APIHelper.apply_datetime_converter(end_time, APIHelper.RFC3339DateTime) if end_time else None 
        if status is not APIHelper.SKIP:
            self.status = status 
        if errors is not APIHelper.SKIP:
            self.errors = errors 
        if evidence is not APIHelper.SKIP:
            self.evidence = evidence 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        device_id = dictionary.get("deviceId") if dictionary.get("deviceId") else APIHelper.SKIP
        create_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("createTime")).datetime if dictionary.get("createTime") else APIHelper.SKIP
        end_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("endTime")).datetime if dictionary.get("endTime") else APIHelper.SKIP
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        errors = dictionary.get("errors") if dictionary.get("errors") else APIHelper.SKIP
        evidence = Evidence.from_dictionary(dictionary.get('evidence')) if 'evidence' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   device_id,
                   create_time,
                   end_time,
                   status,
                   errors,
                   evidence)
