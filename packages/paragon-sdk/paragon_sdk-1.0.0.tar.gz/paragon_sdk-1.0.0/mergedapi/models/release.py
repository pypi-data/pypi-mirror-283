# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class Release(object):

    """Implementation of the 'Release' model.

    TODO: type model description here.

    Attributes:
        release_name (str): Release name, Should be of pattern
            (\d){1,2}[.](\d){1}([\w\-_\.]*)
        release_support (ReleaseSupportEnum): Specifies the min/max support
            for this release
        sensors (List[str]): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "release_name": 'release-name',
        "release_support": 'release-support',
        "sensors": 'sensors'
    }

    _optionals = [
        'release_support',
        'sensors',
    ]

    def __init__(self,
                 release_name=None,
                 release_support=APIHelper.SKIP,
                 sensors=APIHelper.SKIP):
        """Constructor for the Release class"""

        # Initialize members of the class
        self.release_name = release_name 
        if release_support is not APIHelper.SKIP:
            self.release_support = release_support 
        if sensors is not APIHelper.SKIP:
            self.sensors = sensors 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        release_name = dictionary.get("release-name") if dictionary.get("release-name") else None
        release_support = dictionary.get("release-support") if dictionary.get("release-support") else APIHelper.SKIP
        sensors = dictionary.get("sensors") if dictionary.get("sensors") else APIHelper.SKIP
        # Return an object of this model
        return cls(release_name,
                   release_support,
                   sensors)
