# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.graph_canva import GraphCanva


class ReportSchema(object):

    """Implementation of the 'report_schema' model.

    TODO: type model description here.

    Attributes:
        capture_fields (List[str]): TODO: type description here.
        destination (List[str]): TODO: type description here.
        format (FormatEnum): Generated report format
        graph_canvas (List[GraphCanva]): Canvas name
        name (str): Name of the report
        schedule (List[str]): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "destination": 'destination',
        "format": 'format',
        "name": 'name',
        "schedule": 'schedule',
        "capture_fields": 'capture-fields',
        "graph_canvas": 'graph-canvas'
    }

    _optionals = [
        'capture_fields',
        'graph_canvas',
    ]

    def __init__(self,
                 destination=None,
                 format=None,
                 name=None,
                 schedule=None,
                 capture_fields=APIHelper.SKIP,
                 graph_canvas=APIHelper.SKIP):
        """Constructor for the ReportSchema class"""

        # Initialize members of the class
        if capture_fields is not APIHelper.SKIP:
            self.capture_fields = capture_fields 
        self.destination = destination 
        self.format = format 
        if graph_canvas is not APIHelper.SKIP:
            self.graph_canvas = graph_canvas 
        self.name = name 
        self.schedule = schedule 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        destination = dictionary.get("destination") if dictionary.get("destination") else None
        format = dictionary.get("format") if dictionary.get("format") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        schedule = dictionary.get("schedule") if dictionary.get("schedule") else None
        capture_fields = dictionary.get("capture-fields") if dictionary.get("capture-fields") else APIHelper.SKIP
        graph_canvas = None
        if dictionary.get('graph-canvas') is not None:
            graph_canvas = [GraphCanva.from_dictionary(x) for x in dictionary.get('graph-canvas')]
        else:
            graph_canvas = APIHelper.SKIP
        # Return an object of this model
        return cls(destination,
                   format,
                   name,
                   schedule,
                   capture_fields,
                   graph_canvas)
