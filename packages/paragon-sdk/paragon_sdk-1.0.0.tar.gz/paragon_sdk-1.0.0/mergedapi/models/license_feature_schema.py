# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class LicenseFeatureSchema(object):

    """Implementation of the 'license-feature_schema' model.

    TODO: type model description here.

    Attributes:
        feature_id (int): Unique ID of the licensed feature
        feature_name (str): Name of the licensed feature
        feature_description (str): Brief description of the licensed feature
        license_total (int): Total license count for feature
        license_remaining (int): Remaining license count for feature
        license_requested (int): Local requested license count for feature
        license_usage (int): License feature usage count
        max_remaining_days (int): Maximum remaining time of the feature's
            license in days
        validity_type (ValidityTypeEnum): License validity type
        mode (ModeEnum): License mode of operation
        compliance (bool): Compliance status indicating if the feature usage
            is in compliance or not
        end_date (int): Feature end date timestamp
        valid_until (str): Validity information of license feature

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "feature_name": 'feature-name',
        "feature_description": 'feature-description',
        "license_total": 'license-total',
        "license_usage": 'license-usage',
        "max_remaining_days": 'max-remaining-days',
        "validity_type": 'validity-type',
        "mode": 'mode',
        "compliance": 'compliance',
        "end_date": 'end-date',
        "valid_until": 'valid-until',
        "feature_id": 'feature-id',
        "license_remaining": 'license-remaining',
        "license_requested": 'license-requested'
    }

    _optionals = [
        'feature_id',
        'license_remaining',
        'license_requested',
    ]

    def __init__(self,
                 feature_name=None,
                 feature_description=None,
                 license_total=None,
                 license_usage=None,
                 max_remaining_days=None,
                 validity_type=None,
                 mode=None,
                 compliance=None,
                 end_date=None,
                 valid_until=None,
                 feature_id=APIHelper.SKIP,
                 license_remaining=APIHelper.SKIP,
                 license_requested=APIHelper.SKIP):
        """Constructor for the LicenseFeatureSchema class"""

        # Initialize members of the class
        if feature_id is not APIHelper.SKIP:
            self.feature_id = feature_id 
        self.feature_name = feature_name 
        self.feature_description = feature_description 
        self.license_total = license_total 
        if license_remaining is not APIHelper.SKIP:
            self.license_remaining = license_remaining 
        if license_requested is not APIHelper.SKIP:
            self.license_requested = license_requested 
        self.license_usage = license_usage 
        self.max_remaining_days = max_remaining_days 
        self.validity_type = validity_type 
        self.mode = mode 
        self.compliance = compliance 
        self.end_date = end_date 
        self.valid_until = valid_until 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        feature_name = dictionary.get("feature-name") if dictionary.get("feature-name") else None
        feature_description = dictionary.get("feature-description") if dictionary.get("feature-description") else None
        license_total = dictionary.get("license-total") if dictionary.get("license-total") else None
        license_usage = dictionary.get("license-usage") if dictionary.get("license-usage") else None
        max_remaining_days = dictionary.get("max-remaining-days") if dictionary.get("max-remaining-days") else None
        validity_type = dictionary.get("validity-type") if dictionary.get("validity-type") else None
        mode = dictionary.get("mode") if dictionary.get("mode") else None
        compliance = dictionary.get("compliance") if "compliance" in dictionary.keys() else None
        end_date = dictionary.get("end-date") if dictionary.get("end-date") else None
        valid_until = dictionary.get("valid-until") if dictionary.get("valid-until") else None
        feature_id = dictionary.get("feature-id") if dictionary.get("feature-id") else APIHelper.SKIP
        license_remaining = dictionary.get("license-remaining") if dictionary.get("license-remaining") else APIHelper.SKIP
        license_requested = dictionary.get("license-requested") if dictionary.get("license-requested") else APIHelper.SKIP
        # Return an object of this model
        return cls(feature_name,
                   feature_description,
                   license_total,
                   license_usage,
                   max_remaining_days,
                   validity_type,
                   mode,
                   compliance,
                   end_date,
                   valid_until,
                   feature_id,
                   license_remaining,
                   license_requested)
