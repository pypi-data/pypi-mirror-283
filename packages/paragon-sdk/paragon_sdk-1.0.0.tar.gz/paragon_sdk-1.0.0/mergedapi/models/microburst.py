# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Microburst(object):

    """Implementation of the 'Microburst' model.

    Detect microbursts in the egress queues. This has to be used only with
    qmon sensors

    Attributes:
        if_name (str): Interface name. This should be field name where
            interface names are being stored
        packets (str): Queue egress packets. This should be field name where
            queue egress packets are being stored
        percentage (str): Queue buffer occupancy percentage. This should be
            field name where queue buffer occupancy percentage are being
            stored
        queue_no (str): Queue numbers. This should be field name where queue
            numbers are being stored

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "if_name": 'if-name',
        "packets": 'packets',
        "percentage": 'percentage',
        "queue_no": 'queue-no'
    }

    def __init__(self,
                 if_name=None,
                 packets=None,
                 percentage=None,
                 queue_no=None):
        """Constructor for the Microburst class"""

        # Initialize members of the class
        self.if_name = if_name 
        self.packets = packets 
        self.percentage = percentage 
        self.queue_no = queue_no 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        if_name = dictionary.get("if-name") if dictionary.get("if-name") else None
        packets = dictionary.get("packets") if dictionary.get("packets") else None
        percentage = dictionary.get("percentage") if dictionary.get("percentage") else None
        queue_no = dictionary.get("queue-no") if dictionary.get("queue-no") else None
        # Return an object of this model
        return cls(if_name,
                   packets,
                   percentage,
                   queue_no)
