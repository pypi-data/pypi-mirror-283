# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class Snmp4(object):

    """Implementation of the 'Snmp4' model.

    TODO: type model description here.

    Attributes:
        frequency (str): Frequency at which data needs to be extracted from
            given SNMP table. Specify positive integer followed by s/m/h/d/w/y
            representing seconds/minutes/hours/days/weeks/years. Eg: 2s
        scalars (List[str]): TODO: type description here.
        table (str): OID of an SNMP table

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "frequency": 'frequency',
        "scalars": 'scalars',
        "table": 'table'
    }

    _optionals = [
        'scalars',
        'table',
    ]

    def __init__(self,
                 frequency=None,
                 scalars=APIHelper.SKIP,
                 table=APIHelper.SKIP):
        """Constructor for the Snmp4 class"""

        # Initialize members of the class
        self.frequency = frequency 
        if scalars is not APIHelper.SKIP:
            self.scalars = scalars 
        if table is not APIHelper.SKIP:
            self.table = table 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        frequency = dictionary.get("frequency") if dictionary.get("frequency") else None
        scalars = dictionary.get("scalars") if dictionary.get("scalars") else APIHelper.SKIP
        table = dictionary.get("table") if dictionary.get("table") else APIHelper.SKIP
        # Return an object of this model
        return cls(frequency,
                   scalars,
                   table)
