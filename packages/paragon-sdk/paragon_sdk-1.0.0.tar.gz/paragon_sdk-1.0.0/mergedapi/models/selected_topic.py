# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class SelectedTopic(object):

    """Implementation of the 'SelectedTopic' model.

    Topic name

    Attributes:
        label (str): Label name(Topic/rule name)
        retention_policy (str): Retention policy of the topic
        mtype (str): Type of
            measurement(field-table/trigger-table/rollup-table)
        value (str): Label value

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "label": 'label',
        "retention_policy": 'retention-policy',
        "mtype": 'type',
        "value": 'value'
    }

    _optionals = [
        'label',
        'retention_policy',
        'mtype',
        'value',
    ]

    def __init__(self,
                 label=APIHelper.SKIP,
                 retention_policy=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 value=APIHelper.SKIP):
        """Constructor for the SelectedTopic class"""

        # Initialize members of the class
        if label is not APIHelper.SKIP:
            self.label = label 
        if retention_policy is not APIHelper.SKIP:
            self.retention_policy = retention_policy 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if value is not APIHelper.SKIP:
            self.value = value 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        label = dictionary.get("label") if dictionary.get("label") else APIHelper.SKIP
        retention_policy = dictionary.get("retention-policy") if dictionary.get("retention-policy") else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        value = dictionary.get("value") if dictionary.get("value") else APIHelper.SKIP
        # Return an object of this model
        return cls(label,
                   retention_policy,
                   mtype,
                   value)
