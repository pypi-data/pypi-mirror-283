# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.checklist_group_definition import ChecklistGroupDefinition
from mergedapi.models.checklist_rule_definition import ChecklistRuleDefinition
from mergedapi.models.checklist_rule_set import ChecklistRuleSet


class ChecklistTemplate(object):

    """Implementation of the 'checklistTemplate' model.

    Template defines a checklist template.

    Attributes:
        id (str): id is the system-generated unique identifier of the
            template.
        name (str): Name and version of the template.
        version (str): TODO: type description here.
        description (str): Optional description of the template.
        labels (Dict[str, str]): Labels applied to the template.
        created_at (datetime): Time at which the template was created.
        rule_sets (List[ChecklistRuleSet]): The rule sets that define
            relationships between groups of rules.
        rule_definitions (List[ChecklistRuleDefinition]): Defines the rules
            that make up the checklist template.
        group_definitions (List[ChecklistGroupDefinition]): Defines the groups
            containing the rules in the template.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "name": 'name',
        "version": 'version',
        "description": 'description',
        "labels": 'labels',
        "created_at": 'createdAt',
        "rule_sets": 'ruleSets',
        "rule_definitions": 'ruleDefinitions',
        "group_definitions": 'groupDefinitions'
    }

    _optionals = [
        'id',
        'name',
        'version',
        'description',
        'labels',
        'created_at',
        'rule_sets',
        'rule_definitions',
        'group_definitions',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 version=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 labels=APIHelper.SKIP,
                 created_at=APIHelper.SKIP,
                 rule_sets=APIHelper.SKIP,
                 rule_definitions=APIHelper.SKIP,
                 group_definitions=APIHelper.SKIP):
        """Constructor for the ChecklistTemplate class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if name is not APIHelper.SKIP:
            self.name = name 
        if version is not APIHelper.SKIP:
            self.version = version 
        if description is not APIHelper.SKIP:
            self.description = description 
        if labels is not APIHelper.SKIP:
            self.labels = labels 
        if created_at is not APIHelper.SKIP:
            self.created_at = APIHelper.apply_datetime_converter(created_at, APIHelper.RFC3339DateTime) if created_at else None 
        if rule_sets is not APIHelper.SKIP:
            self.rule_sets = rule_sets 
        if rule_definitions is not APIHelper.SKIP:
            self.rule_definitions = rule_definitions 
        if group_definitions is not APIHelper.SKIP:
            self.group_definitions = group_definitions 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        version = dictionary.get("version") if dictionary.get("version") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        labels = dictionary.get("labels") if dictionary.get("labels") else APIHelper.SKIP
        created_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("createdAt")).datetime if dictionary.get("createdAt") else APIHelper.SKIP
        rule_sets = None
        if dictionary.get('ruleSets') is not None:
            rule_sets = [ChecklistRuleSet.from_dictionary(x) for x in dictionary.get('ruleSets')]
        else:
            rule_sets = APIHelper.SKIP
        rule_definitions = None
        if dictionary.get('ruleDefinitions') is not None:
            rule_definitions = [ChecklistRuleDefinition.from_dictionary(x) for x in dictionary.get('ruleDefinitions')]
        else:
            rule_definitions = APIHelper.SKIP
        group_definitions = None
        if dictionary.get('groupDefinitions') is not None:
            group_definitions = [ChecklistGroupDefinition.from_dictionary(x) for x in dictionary.get('groupDefinitions')]
        else:
            group_definitions = APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   name,
                   version,
                   description,
                   labels,
                   created_at,
                   rule_sets,
                   rule_definitions,
                   group_definitions)
