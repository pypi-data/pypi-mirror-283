# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class DataRollupOrder(object):

    """Implementation of the 'DataRollupOrder' model.

    TODO: type model description here.

    Attributes:
        instance_id (str): Instance-id/aggregation-id of data rollup
            summarization instance. Should be of pattern
            [a-zA-Z][a-zA-Z0-9_-]*
        interval (str): Time interval for the data roll up to occur( m/h/d/w
            representing minutes/hours/days/weeks. Min value: 30m, Max value:
            52w )
        retention_policy (str): Retention policy for the data-rollup instance.
            If not configured, default retention policy will be considered

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "instance_id": 'instance-id',
        "interval": 'interval',
        "retention_policy": 'retention-policy'
    }

    _optionals = [
        'retention_policy',
    ]

    def __init__(self,
                 instance_id=None,
                 interval=None,
                 retention_policy=APIHelper.SKIP):
        """Constructor for the DataRollupOrder class"""

        # Initialize members of the class
        self.instance_id = instance_id 
        self.interval = interval 
        if retention_policy is not APIHelper.SKIP:
            self.retention_policy = retention_policy 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        instance_id = dictionary.get("instance-id") if dictionary.get("instance-id") else None
        interval = dictionary.get("interval") if dictionary.get("interval") else None
        retention_policy = dictionary.get("retention-policy") if dictionary.get("retention-policy") else APIHelper.SKIP
        # Return an object of this model
        return cls(instance_id,
                   interval,
                   retention_policy)
