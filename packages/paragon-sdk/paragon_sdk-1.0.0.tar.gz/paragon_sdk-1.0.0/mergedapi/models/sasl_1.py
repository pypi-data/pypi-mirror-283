# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class Sasl1(object):

    """Implementation of the 'Sasl1' model.

    Authetication using username and password over SSL connection

    Attributes:
        certificate (str): File path to kafka CA-Certificate. Should be of
            pattern .+\.pem
        password (str): Password for sasl_ssl authentication
        username (str): Username for sasl_ssl authentication

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "certificate": 'certificate',
        "password": 'password',
        "username": 'username'
    }

    _optionals = [
        'certificate',
        'password',
        'username',
    ]

    def __init__(self,
                 certificate=APIHelper.SKIP,
                 password=APIHelper.SKIP,
                 username=APIHelper.SKIP):
        """Constructor for the Sasl1 class"""

        # Initialize members of the class
        if certificate is not APIHelper.SKIP:
            self.certificate = certificate 
        if password is not APIHelper.SKIP:
            self.password = password 
        if username is not APIHelper.SKIP:
            self.username = username 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        certificate = dictionary.get("certificate") if dictionary.get("certificate") else APIHelper.SKIP
        password = dictionary.get("password") if dictionary.get("password") else APIHelper.SKIP
        username = dictionary.get("username") if dictionary.get("username") else APIHelper.SKIP
        # Return an object of this model
        return cls(certificate,
                   password,
                   username)
