# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class Tenantrepresentsatenant(object):

    """Implementation of the 'Tenantrepresentsatenant' model.

    TODO: type model description here.

    Attributes:
        id (str): System-defined unique identifier of the tenant.
        name (str): User-defined name of the snapshat.
        description (str): User-defined description of the snapshat.
        create_time (datetime): Output only. The time at which the tenant was
            created.
        source (str): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "name": 'name',
        "description": 'description',
        "create_time": 'createTime',
        "source": 'source'
    }

    _optionals = [
        'id',
        'name',
        'description',
        'create_time',
        'source',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 create_time=APIHelper.SKIP,
                 source=APIHelper.SKIP):
        """Constructor for the Tenantrepresentsatenant class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if name is not APIHelper.SKIP:
            self.name = name 
        if description is not APIHelper.SKIP:
            self.description = description 
        if create_time is not APIHelper.SKIP:
            self.create_time = APIHelper.apply_datetime_converter(create_time, APIHelper.RFC3339DateTime) if create_time else None 
        if source is not APIHelper.SKIP:
            self.source = source 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        create_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("createTime")).datetime if dictionary.get("createTime") else APIHelper.SKIP
        source = dictionary.get("source") if dictionary.get("source") else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   name,
                   description,
                   create_time,
                   source)
