# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class CommandRpc(object):

    """Implementation of the 'command-rpc' model.

    TODO: type model description here.

    Attributes:
        args (Dict[str, str]): Optional key/value pair arguments to table
        filename (str): Command-rpc table filename in which the table is
            defined
        host (str): Host name or ip-address of the device in which command
            will be inspected
        password (str): Password to connect to device
        tablename (str): Command-rpc table name
        target (str): To run command on FPC, specifiy FPC target
        username (str): Username to connect to device

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "filename": 'filename',
        "host": 'host',
        "password": 'password',
        "tablename": 'tablename',
        "username": 'username',
        "args": 'args',
        "target": 'target'
    }

    _optionals = [
        'args',
        'target',
    ]

    def __init__(self,
                 filename=None,
                 host=None,
                 password=None,
                 tablename=None,
                 username=None,
                 args=APIHelper.SKIP,
                 target=APIHelper.SKIP):
        """Constructor for the CommandRpc class"""

        # Initialize members of the class
        if args is not APIHelper.SKIP:
            self.args = args 
        self.filename = filename 
        self.host = host 
        self.password = password 
        self.tablename = tablename 
        if target is not APIHelper.SKIP:
            self.target = target 
        self.username = username 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        filename = dictionary.get("filename") if dictionary.get("filename") else None
        host = dictionary.get("host") if dictionary.get("host") else None
        password = dictionary.get("password") if dictionary.get("password") else None
        tablename = dictionary.get("tablename") if dictionary.get("tablename") else None
        username = dictionary.get("username") if dictionary.get("username") else None
        args = dictionary.get("args") if dictionary.get("args") else APIHelper.SKIP
        target = dictionary.get("target") if dictionary.get("target") else APIHelper.SKIP
        # Return an object of this model
        return cls(filename,
                   host,
                   password,
                   tablename,
                   username,
                   args,
                   target)
