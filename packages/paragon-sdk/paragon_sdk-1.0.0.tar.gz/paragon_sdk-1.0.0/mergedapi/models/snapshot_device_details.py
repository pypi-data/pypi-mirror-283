# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.config_2 import Config2
from mergedapi.models.device_device import DeviceDevice
from mergedapi.models.hw_authenticity import HwAuthenticity
from mergedapi.models.hw_end_of_life import HwEndOfLife
from mergedapi.models.inventory_5 import Inventory5
from mergedapi.models.snapshot_device_scan import SnapshotDeviceScan
from mergedapi.models.snapshot_operational_data import SnapshotOperationalData
from mergedapi.models.snapshot_trust_score import SnapshotTrustScore
from mergedapi.models.sw_authenticity import SwAuthenticity
from mergedapi.models.sw_end_of_life import SwEndOfLife
from mergedapi.models.vulnerability import Vulnerability


class SnapshotDeviceDetails(object):

    """Implementation of the 'snapshotDeviceDetails' model.

    DeviceDetails holds snapshot details that are specific to a device.

    Attributes:
        device_details (DeviceDevice): TODO: type description here.
        scans (List[SnapshotDeviceScan]): Holds details of each of the
            automated scans executed at the time of the snapshot.
        scores (List[SnapshotTrustScore]): Holds details of each of the trust
            scores calculated at the time of the snapshot.
        vulnerability (Vulnerability): TODO: type description here.
        config (Config2): TODO: type description here.
        inventory (Inventory5): TODO: type description here.
        sw_end_of_life (SwEndOfLife): TODO: type description here.
        hw_end_of_life (HwEndOfLife): TODO: type description here.
        sw_authenticity (SwAuthenticity): TODO: type description here.
        hw_authenticity (HwAuthenticity): TODO: type description here.
        operational_data (SnapshotOperationalData): TODO: type description
            here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "device_details": 'deviceDetails',
        "scans": 'scans',
        "scores": 'scores',
        "vulnerability": 'vulnerability',
        "config": 'config',
        "inventory": 'inventory',
        "sw_end_of_life": 'swEndOfLife',
        "hw_end_of_life": 'hwEndOfLife',
        "sw_authenticity": 'swAuthenticity',
        "hw_authenticity": 'hwAuthenticity',
        "operational_data": 'operationalData'
    }

    _optionals = [
        'device_details',
        'scans',
        'scores',
        'vulnerability',
        'config',
        'inventory',
        'sw_end_of_life',
        'hw_end_of_life',
        'sw_authenticity',
        'hw_authenticity',
        'operational_data',
    ]

    def __init__(self,
                 device_details=APIHelper.SKIP,
                 scans=APIHelper.SKIP,
                 scores=APIHelper.SKIP,
                 vulnerability=APIHelper.SKIP,
                 config=APIHelper.SKIP,
                 inventory=APIHelper.SKIP,
                 sw_end_of_life=APIHelper.SKIP,
                 hw_end_of_life=APIHelper.SKIP,
                 sw_authenticity=APIHelper.SKIP,
                 hw_authenticity=APIHelper.SKIP,
                 operational_data=APIHelper.SKIP):
        """Constructor for the SnapshotDeviceDetails class"""

        # Initialize members of the class
        if device_details is not APIHelper.SKIP:
            self.device_details = device_details 
        if scans is not APIHelper.SKIP:
            self.scans = scans 
        if scores is not APIHelper.SKIP:
            self.scores = scores 
        if vulnerability is not APIHelper.SKIP:
            self.vulnerability = vulnerability 
        if config is not APIHelper.SKIP:
            self.config = config 
        if inventory is not APIHelper.SKIP:
            self.inventory = inventory 
        if sw_end_of_life is not APIHelper.SKIP:
            self.sw_end_of_life = sw_end_of_life 
        if hw_end_of_life is not APIHelper.SKIP:
            self.hw_end_of_life = hw_end_of_life 
        if sw_authenticity is not APIHelper.SKIP:
            self.sw_authenticity = sw_authenticity 
        if hw_authenticity is not APIHelper.SKIP:
            self.hw_authenticity = hw_authenticity 
        if operational_data is not APIHelper.SKIP:
            self.operational_data = operational_data 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        device_details = DeviceDevice.from_dictionary(dictionary.get('deviceDetails')) if 'deviceDetails' in dictionary.keys() else APIHelper.SKIP
        scans = None
        if dictionary.get('scans') is not None:
            scans = [SnapshotDeviceScan.from_dictionary(x) for x in dictionary.get('scans')]
        else:
            scans = APIHelper.SKIP
        scores = None
        if dictionary.get('scores') is not None:
            scores = [SnapshotTrustScore.from_dictionary(x) for x in dictionary.get('scores')]
        else:
            scores = APIHelper.SKIP
        vulnerability = Vulnerability.from_dictionary(dictionary.get('vulnerability')) if 'vulnerability' in dictionary.keys() else APIHelper.SKIP
        config = Config2.from_dictionary(dictionary.get('config')) if 'config' in dictionary.keys() else APIHelper.SKIP
        inventory = Inventory5.from_dictionary(dictionary.get('inventory')) if 'inventory' in dictionary.keys() else APIHelper.SKIP
        sw_end_of_life = SwEndOfLife.from_dictionary(dictionary.get('swEndOfLife')) if 'swEndOfLife' in dictionary.keys() else APIHelper.SKIP
        hw_end_of_life = HwEndOfLife.from_dictionary(dictionary.get('hwEndOfLife')) if 'hwEndOfLife' in dictionary.keys() else APIHelper.SKIP
        sw_authenticity = SwAuthenticity.from_dictionary(dictionary.get('swAuthenticity')) if 'swAuthenticity' in dictionary.keys() else APIHelper.SKIP
        hw_authenticity = HwAuthenticity.from_dictionary(dictionary.get('hwAuthenticity')) if 'hwAuthenticity' in dictionary.keys() else APIHelper.SKIP
        operational_data = SnapshotOperationalData.from_dictionary(dictionary.get('operationalData')) if 'operationalData' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(device_details,
                   scans,
                   scores,
                   vulnerability,
                   config,
                   inventory,
                   sw_end_of_life,
                   hw_end_of_life,
                   sw_authenticity,
                   hw_authenticity,
                   operational_data)
