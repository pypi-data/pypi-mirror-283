# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.depends_on import DependsOn
from mergedapi.models.field_13 import Field13
from mergedapi.models.function_1 import Function1


class ResourceSchema(object):

    """Implementation of the 'resource_schema' model.

    TODO: type model description here.

    Attributes:
        depends_on (List[DependsOn]): TODO: type description here.
        description (str): Description about the resource
        field (List[Field13]): TODO: type description here.
        function (List[Function1]): TODO: type description here.
        keys (List[str]): TODO: type description here.
        resource_name (str): Name of the resource. Should be of pattern
            [a-z][a-z0-9-]*
        is_default (bool): Flag to denote default resource
        is_modified (bool): Flag to denote if default resource is modified

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "resource_name": 'resource-name',
        "depends_on": 'depends-on',
        "description": 'description',
        "field": 'field',
        "function": 'function',
        "keys": 'keys',
        "is_default": 'is-default',
        "is_modified": 'is-modified'
    }

    _optionals = [
        'depends_on',
        'description',
        'field',
        'function',
        'keys',
        'is_default',
        'is_modified',
    ]

    def __init__(self,
                 resource_name=None,
                 depends_on=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 field=APIHelper.SKIP,
                 function=APIHelper.SKIP,
                 keys=APIHelper.SKIP,
                 is_default=APIHelper.SKIP,
                 is_modified=APIHelper.SKIP):
        """Constructor for the ResourceSchema class"""

        # Initialize members of the class
        if depends_on is not APIHelper.SKIP:
            self.depends_on = depends_on 
        if description is not APIHelper.SKIP:
            self.description = description 
        if field is not APIHelper.SKIP:
            self.field = field 
        if function is not APIHelper.SKIP:
            self.function = function 
        if keys is not APIHelper.SKIP:
            self.keys = keys 
        self.resource_name = resource_name 
        if is_default is not APIHelper.SKIP:
            self.is_default = is_default 
        if is_modified is not APIHelper.SKIP:
            self.is_modified = is_modified 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        resource_name = dictionary.get("resource-name") if dictionary.get("resource-name") else None
        depends_on = None
        if dictionary.get('depends-on') is not None:
            depends_on = [DependsOn.from_dictionary(x) for x in dictionary.get('depends-on')]
        else:
            depends_on = APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        field = None
        if dictionary.get('field') is not None:
            field = [Field13.from_dictionary(x) for x in dictionary.get('field')]
        else:
            field = APIHelper.SKIP
        function = None
        if dictionary.get('function') is not None:
            function = [Function1.from_dictionary(x) for x in dictionary.get('function')]
        else:
            function = APIHelper.SKIP
        keys = dictionary.get("keys") if dictionary.get("keys") else APIHelper.SKIP
        is_default = dictionary.get("is-default") if "is-default" in dictionary.keys() else APIHelper.SKIP
        is_modified = dictionary.get("is-modified") if "is-modified" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(resource_name,
                   depends_on,
                   description,
                   field,
                   function,
                   keys,
                   is_default,
                   is_modified)
