# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.query import Query


class PinGraphs(object):

    """Implementation of the 'pin_graphs' model.

    Create Panels in a Canvas

    Attributes:
        graph_name (str): Graph name
        graph_description (str): Graph description
        graph_type (GraphTypeEnum): Graph type: Time Series or Histogram or
            Heatmap
        time_range (TimeRange1Enum): Time range for the graph
        query (Query): Query for the graph
        y_label (str): Y Label value in visualization
        y_max (str): Y max value in visualization
        y_min (str): Y min value in visualization
        unit_type (UnitType1Enum): unit type value in visualization
        decimals (str): Decimals value in visualization

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "graph_name": 'graph_name',
        "graph_description": 'graph_description',
        "graph_type": 'graph_type',
        "time_range": 'time_range',
        "query": 'query',
        "y_label": 'y_label',
        "y_max": 'y_max',
        "y_min": 'y_min',
        "unit_type": 'unit_type',
        "decimals": 'decimals'
    }

    _optionals = [
        'graph_name',
        'graph_description',
        'graph_type',
        'time_range',
        'query',
        'y_label',
        'y_max',
        'y_min',
        'unit_type',
        'decimals',
    ]

    def __init__(self,
                 graph_name=APIHelper.SKIP,
                 graph_description=APIHelper.SKIP,
                 graph_type=APIHelper.SKIP,
                 time_range=APIHelper.SKIP,
                 query=APIHelper.SKIP,
                 y_label=APIHelper.SKIP,
                 y_max=APIHelper.SKIP,
                 y_min=APIHelper.SKIP,
                 unit_type=APIHelper.SKIP,
                 decimals=APIHelper.SKIP):
        """Constructor for the PinGraphs class"""

        # Initialize members of the class
        if graph_name is not APIHelper.SKIP:
            self.graph_name = graph_name 
        if graph_description is not APIHelper.SKIP:
            self.graph_description = graph_description 
        if graph_type is not APIHelper.SKIP:
            self.graph_type = graph_type 
        if time_range is not APIHelper.SKIP:
            self.time_range = time_range 
        if query is not APIHelper.SKIP:
            self.query = query 
        if y_label is not APIHelper.SKIP:
            self.y_label = y_label 
        if y_max is not APIHelper.SKIP:
            self.y_max = y_max 
        if y_min is not APIHelper.SKIP:
            self.y_min = y_min 
        if unit_type is not APIHelper.SKIP:
            self.unit_type = unit_type 
        if decimals is not APIHelper.SKIP:
            self.decimals = decimals 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        graph_name = dictionary.get("graph_name") if dictionary.get("graph_name") else APIHelper.SKIP
        graph_description = dictionary.get("graph_description") if dictionary.get("graph_description") else APIHelper.SKIP
        graph_type = dictionary.get("graph_type") if dictionary.get("graph_type") else APIHelper.SKIP
        time_range = dictionary.get("time_range") if dictionary.get("time_range") else APIHelper.SKIP
        query = Query.from_dictionary(dictionary.get('query')) if 'query' in dictionary.keys() else APIHelper.SKIP
        y_label = dictionary.get("y_label") if dictionary.get("y_label") else APIHelper.SKIP
        y_max = dictionary.get("y_max") if dictionary.get("y_max") else APIHelper.SKIP
        y_min = dictionary.get("y_min") if dictionary.get("y_min") else APIHelper.SKIP
        unit_type = dictionary.get("unit_type") if dictionary.get("unit_type") else APIHelper.SKIP
        decimals = dictionary.get("decimals") if dictionary.get("decimals") else APIHelper.SKIP
        # Return an object of this model
        return cls(graph_name,
                   graph_description,
                   graph_type,
                   time_range,
                   query,
                   y_label,
                   y_max,
                   y_min,
                   unit_type,
                   decimals)
