# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.add_field import AddField
from mergedapi.models.add_key import AddKey


class Then17(object):

    """Implementation of the 'Then17' model.

    TODO: type model description here.

    Attributes:
        add_field (List[AddField]): TODO: type description here.
        add_key (List[AddKey]): TODO: type description here.
        next (List[object]): Continue evaluating next term in the policy

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "add_field": 'add-field',
        "add_key": 'add-key',
        "next": 'next'
    }

    _optionals = [
        'add_field',
        'add_key',
        'next',
    ]

    def __init__(self,
                 add_field=APIHelper.SKIP,
                 add_key=APIHelper.SKIP,
                 next=APIHelper.SKIP):
        """Constructor for the Then17 class"""

        # Initialize members of the class
        if add_field is not APIHelper.SKIP:
            self.add_field = add_field 
        if add_key is not APIHelper.SKIP:
            self.add_key = add_key 
        if next is not APIHelper.SKIP:
            self.next = next 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        add_field = None
        if dictionary.get('add-field') is not None:
            add_field = [AddField.from_dictionary(x) for x in dictionary.get('add-field')]
        else:
            add_field = APIHelper.SKIP
        add_key = None
        if dictionary.get('add-key') is not None:
            add_key = [AddKey.from_dictionary(x) for x in dictionary.get('add-key')]
        else:
            add_key = APIHelper.SKIP
        next = dictionary.get("next") if dictionary.get("next") else APIHelper.SKIP
        # Return an object of this model
        return cls(add_field,
                   add_key,
                   next)
