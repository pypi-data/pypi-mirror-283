# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.mand import And
from mergedapi.models.mor import Or
from mergedapi.models.unique import Unique
from mergedapi.models.unless import Unless


class Formula1(object):

    """Implementation of the 'Formula1' model.

    TODO: type model description here.

    Attributes:
        mand (And): AND(intersection) operation between two vectors. Resultant
            vector is a set with elements common in both vectors
        mor (Or): OR(union) operation between two vectors. Resultant vector is
            a set with elements from both the vectors
        unique (Unique): Create a vector with unique elements from another
            vector
        unless (Unless): UNLESS(difference) operation between vectors.
            Resultant vector is a set with elements in left-vector but not in
            right-vector

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mand": 'and',
        "mor": 'or',
        "unique": 'unique',
        "unless": 'unless'
    }

    _optionals = [
        'mand',
        'mor',
        'unique',
        'unless',
    ]

    def __init__(self,
                 mand=APIHelper.SKIP,
                 mor=APIHelper.SKIP,
                 unique=APIHelper.SKIP,
                 unless=APIHelper.SKIP):
        """Constructor for the Formula1 class"""

        # Initialize members of the class
        if mand is not APIHelper.SKIP:
            self.mand = mand 
        if mor is not APIHelper.SKIP:
            self.mor = mor 
        if unique is not APIHelper.SKIP:
            self.unique = unique 
        if unless is not APIHelper.SKIP:
            self.unless = unless 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        mand = And.from_dictionary(dictionary.get('and')) if 'and' in dictionary.keys() else APIHelper.SKIP
        mor = Or.from_dictionary(dictionary.get('or')) if 'or' in dictionary.keys() else APIHelper.SKIP
        unique = Unique.from_dictionary(dictionary.get('unique')) if 'unique' in dictionary.keys() else APIHelper.SKIP
        unless = Unless.from_dictionary(dictionary.get('unless')) if 'unless' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(mand,
                   mor,
                   unique,
                   unless)
