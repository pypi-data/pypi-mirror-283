# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class Sku(object):

    """Implementation of the 'Sku' model.

    TODO: type model description here.

    Attributes:
        id (str): Unique identification of the unit.
        model_id (str): Name of the unit.
        replacement_model (str): Comma-separated list of replacement models.
            May be empty.
        description (str): Description of the unit.
        products (str): Comma-separated list of products with which the SKU is
            associated.
        psn_number (str): PSN number.
        announced_date (datetime): EOL-related dates.
        end_sale_date (datetime): TODO: type description here.
        end_engineering_date (datetime): TODO: type description here.
        end_engineering_date_hw (datetime): TODO: type description here.
        end_service_date (datetime): TODO: type description here.
        end_warranty_svc_cnvrsn_date (datetime): TODO: type description here.
        first_service_step_down_date (datetime): TODO: type description here.
        second_service_step_down_date (datetime): TODO: type description
            here.
        created_at (datetime): TODO: type description here.
        updated_at (datetime): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "model_id": 'modelId',
        "replacement_model": 'replacementModel',
        "description": 'description',
        "products": 'products',
        "psn_number": 'psnNumber',
        "announced_date": 'announcedDate',
        "end_sale_date": 'endSaleDate',
        "end_engineering_date": 'endEngineeringDate',
        "end_engineering_date_hw": 'endEngineeringDateHw',
        "end_service_date": 'endServiceDate',
        "end_warranty_svc_cnvrsn_date": 'endWarrantySvcCnvrsnDate',
        "first_service_step_down_date": 'firstServiceStepDownDate',
        "second_service_step_down_date": 'secondServiceStepDownDate',
        "created_at": 'createdAt',
        "updated_at": 'updatedAt'
    }

    _optionals = [
        'id',
        'model_id',
        'replacement_model',
        'description',
        'products',
        'psn_number',
        'announced_date',
        'end_sale_date',
        'end_engineering_date',
        'end_engineering_date_hw',
        'end_service_date',
        'end_warranty_svc_cnvrsn_date',
        'first_service_step_down_date',
        'second_service_step_down_date',
        'created_at',
        'updated_at',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 model_id=APIHelper.SKIP,
                 replacement_model=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 products=APIHelper.SKIP,
                 psn_number=APIHelper.SKIP,
                 announced_date=APIHelper.SKIP,
                 end_sale_date=APIHelper.SKIP,
                 end_engineering_date=APIHelper.SKIP,
                 end_engineering_date_hw=APIHelper.SKIP,
                 end_service_date=APIHelper.SKIP,
                 end_warranty_svc_cnvrsn_date=APIHelper.SKIP,
                 first_service_step_down_date=APIHelper.SKIP,
                 second_service_step_down_date=APIHelper.SKIP,
                 created_at=APIHelper.SKIP,
                 updated_at=APIHelper.SKIP):
        """Constructor for the Sku class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if model_id is not APIHelper.SKIP:
            self.model_id = model_id 
        if replacement_model is not APIHelper.SKIP:
            self.replacement_model = replacement_model 
        if description is not APIHelper.SKIP:
            self.description = description 
        if products is not APIHelper.SKIP:
            self.products = products 
        if psn_number is not APIHelper.SKIP:
            self.psn_number = psn_number 
        if announced_date is not APIHelper.SKIP:
            self.announced_date = APIHelper.apply_datetime_converter(announced_date, APIHelper.RFC3339DateTime) if announced_date else None 
        if end_sale_date is not APIHelper.SKIP:
            self.end_sale_date = APIHelper.apply_datetime_converter(end_sale_date, APIHelper.RFC3339DateTime) if end_sale_date else None 
        if end_engineering_date is not APIHelper.SKIP:
            self.end_engineering_date = APIHelper.apply_datetime_converter(end_engineering_date, APIHelper.RFC3339DateTime) if end_engineering_date else None 
        if end_engineering_date_hw is not APIHelper.SKIP:
            self.end_engineering_date_hw = APIHelper.apply_datetime_converter(end_engineering_date_hw, APIHelper.RFC3339DateTime) if end_engineering_date_hw else None 
        if end_service_date is not APIHelper.SKIP:
            self.end_service_date = APIHelper.apply_datetime_converter(end_service_date, APIHelper.RFC3339DateTime) if end_service_date else None 
        if end_warranty_svc_cnvrsn_date is not APIHelper.SKIP:
            self.end_warranty_svc_cnvrsn_date = APIHelper.apply_datetime_converter(end_warranty_svc_cnvrsn_date, APIHelper.RFC3339DateTime) if end_warranty_svc_cnvrsn_date else None 
        if first_service_step_down_date is not APIHelper.SKIP:
            self.first_service_step_down_date = APIHelper.apply_datetime_converter(first_service_step_down_date, APIHelper.RFC3339DateTime) if first_service_step_down_date else None 
        if second_service_step_down_date is not APIHelper.SKIP:
            self.second_service_step_down_date = APIHelper.apply_datetime_converter(second_service_step_down_date, APIHelper.RFC3339DateTime) if second_service_step_down_date else None 
        if created_at is not APIHelper.SKIP:
            self.created_at = APIHelper.apply_datetime_converter(created_at, APIHelper.RFC3339DateTime) if created_at else None 
        if updated_at is not APIHelper.SKIP:
            self.updated_at = APIHelper.apply_datetime_converter(updated_at, APIHelper.RFC3339DateTime) if updated_at else None 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        model_id = dictionary.get("modelId") if dictionary.get("modelId") else APIHelper.SKIP
        replacement_model = dictionary.get("replacementModel") if dictionary.get("replacementModel") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        products = dictionary.get("products") if dictionary.get("products") else APIHelper.SKIP
        psn_number = dictionary.get("psnNumber") if dictionary.get("psnNumber") else APIHelper.SKIP
        announced_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("announcedDate")).datetime if dictionary.get("announcedDate") else APIHelper.SKIP
        end_sale_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("endSaleDate")).datetime if dictionary.get("endSaleDate") else APIHelper.SKIP
        end_engineering_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("endEngineeringDate")).datetime if dictionary.get("endEngineeringDate") else APIHelper.SKIP
        end_engineering_date_hw = APIHelper.RFC3339DateTime.from_value(dictionary.get("endEngineeringDateHw")).datetime if dictionary.get("endEngineeringDateHw") else APIHelper.SKIP
        end_service_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("endServiceDate")).datetime if dictionary.get("endServiceDate") else APIHelper.SKIP
        end_warranty_svc_cnvrsn_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("endWarrantySvcCnvrsnDate")).datetime if dictionary.get("endWarrantySvcCnvrsnDate") else APIHelper.SKIP
        first_service_step_down_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("firstServiceStepDownDate")).datetime if dictionary.get("firstServiceStepDownDate") else APIHelper.SKIP
        second_service_step_down_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("secondServiceStepDownDate")).datetime if dictionary.get("secondServiceStepDownDate") else APIHelper.SKIP
        created_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("createdAt")).datetime if dictionary.get("createdAt") else APIHelper.SKIP
        updated_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("updatedAt")).datetime if dictionary.get("updatedAt") else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   model_id,
                   replacement_model,
                   description,
                   products,
                   psn_number,
                   announced_date,
                   end_sale_date,
                   end_engineering_date,
                   end_engineering_date_hw,
                   end_service_date,
                   end_warranty_svc_cnvrsn_date,
                   first_service_step_down_date,
                   second_service_step_down_date,
                   created_at,
                   updated_at)
