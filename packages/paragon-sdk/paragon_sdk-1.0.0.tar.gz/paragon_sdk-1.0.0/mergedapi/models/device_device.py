# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.device_location import DeviceLocation
from mergedapi.models.device_status import DeviceStatus
from mergedapi.models.device_type import DeviceType


class DeviceDevice(object):

    """Implementation of the 'deviceDevice' model.

    TODO: type model description here.

    Attributes:
        id (str): Output only.
        name (str): TODO: type description here.
        address (str): TODO: type description here.
        port (int): TODO: type description here.
        user (str): TODO: type description here.
        password (str): TODO: type description here.
        protocol (str): TODO: type description here.
        mtype (DeviceType): TODO: type description here.
        location (DeviceLocation): TODO: type description here.
        status (DeviceStatus): TODO: type description here.
        profile (str): TODO: type description here.
        source (str): TODO: type description here.
        hostname (str): TODO: type description here.
        friendly_name (str): Output only.
        labels (Dict[str, str]): Labels applied to the device.
        source_id (str): Output only. When source is an external application
            (for example, JCloud), holds the value used to identify the device
            in that application.
        mac_address (str): Holds the mac address of the device, when
            available.
        site_id (str): Holds the id of the site with which this device is
            associated, if defined.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "name": 'name',
        "address": 'address',
        "port": 'port',
        "user": 'user',
        "password": 'password',
        "protocol": 'protocol',
        "mtype": 'type',
        "location": 'location',
        "status": 'status',
        "profile": 'profile',
        "source": 'source',
        "hostname": 'hostname',
        "friendly_name": 'friendlyName',
        "labels": 'labels',
        "source_id": 'sourceId',
        "mac_address": 'macAddress',
        "site_id": 'siteId'
    }

    _optionals = [
        'id',
        'name',
        'address',
        'port',
        'user',
        'password',
        'protocol',
        'mtype',
        'location',
        'status',
        'profile',
        'source',
        'hostname',
        'friendly_name',
        'labels',
        'source_id',
        'mac_address',
        'site_id',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 address=APIHelper.SKIP,
                 port=APIHelper.SKIP,
                 user=APIHelper.SKIP,
                 password=APIHelper.SKIP,
                 protocol=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 location=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 profile=APIHelper.SKIP,
                 source=APIHelper.SKIP,
                 hostname=APIHelper.SKIP,
                 friendly_name=APIHelper.SKIP,
                 labels=APIHelper.SKIP,
                 source_id=APIHelper.SKIP,
                 mac_address=APIHelper.SKIP,
                 site_id=APIHelper.SKIP):
        """Constructor for the DeviceDevice class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if name is not APIHelper.SKIP:
            self.name = name 
        if address is not APIHelper.SKIP:
            self.address = address 
        if port is not APIHelper.SKIP:
            self.port = port 
        if user is not APIHelper.SKIP:
            self.user = user 
        if password is not APIHelper.SKIP:
            self.password = password 
        if protocol is not APIHelper.SKIP:
            self.protocol = protocol 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if location is not APIHelper.SKIP:
            self.location = location 
        if status is not APIHelper.SKIP:
            self.status = status 
        if profile is not APIHelper.SKIP:
            self.profile = profile 
        if source is not APIHelper.SKIP:
            self.source = source 
        if hostname is not APIHelper.SKIP:
            self.hostname = hostname 
        if friendly_name is not APIHelper.SKIP:
            self.friendly_name = friendly_name 
        if labels is not APIHelper.SKIP:
            self.labels = labels 
        if source_id is not APIHelper.SKIP:
            self.source_id = source_id 
        if mac_address is not APIHelper.SKIP:
            self.mac_address = mac_address 
        if site_id is not APIHelper.SKIP:
            self.site_id = site_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        address = dictionary.get("address") if dictionary.get("address") else APIHelper.SKIP
        port = dictionary.get("port") if dictionary.get("port") else APIHelper.SKIP
        user = dictionary.get("user") if dictionary.get("user") else APIHelper.SKIP
        password = dictionary.get("password") if dictionary.get("password") else APIHelper.SKIP
        protocol = dictionary.get("protocol") if dictionary.get("protocol") else APIHelper.SKIP
        mtype = DeviceType.from_dictionary(dictionary.get('type')) if 'type' in dictionary.keys() else APIHelper.SKIP
        location = DeviceLocation.from_dictionary(dictionary.get('location')) if 'location' in dictionary.keys() else APIHelper.SKIP
        status = DeviceStatus.from_dictionary(dictionary.get('status')) if 'status' in dictionary.keys() else APIHelper.SKIP
        profile = dictionary.get("profile") if dictionary.get("profile") else APIHelper.SKIP
        source = dictionary.get("source") if dictionary.get("source") else APIHelper.SKIP
        hostname = dictionary.get("hostname") if dictionary.get("hostname") else APIHelper.SKIP
        friendly_name = dictionary.get("friendlyName") if dictionary.get("friendlyName") else APIHelper.SKIP
        labels = dictionary.get("labels") if dictionary.get("labels") else APIHelper.SKIP
        source_id = dictionary.get("sourceId") if dictionary.get("sourceId") else APIHelper.SKIP
        mac_address = dictionary.get("macAddress") if dictionary.get("macAddress") else APIHelper.SKIP
        site_id = dictionary.get("siteId") if dictionary.get("siteId") else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   name,
                   address,
                   port,
                   user,
                   password,
                   protocol,
                   mtype,
                   location,
                   status,
                   profile,
                   source,
                   hostname,
                   friendly_name,
                   labels,
                   source_id,
                   mac_address,
                   site_id)
