# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.release_2 import Release2


class Platform1(object):

    """Implementation of the 'Platform1' model.

    TODO: type model description here.

    Attributes:
        platform_name (str): Platform name, Ex: MX960
        releases (List[Release2]): Release information for the products
        sensors (List[str]): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "platform_name": 'platform-name',
        "releases": 'releases',
        "sensors": 'sensors'
    }

    _optionals = [
        'releases',
        'sensors',
    ]

    def __init__(self,
                 platform_name=None,
                 releases=APIHelper.SKIP,
                 sensors=APIHelper.SKIP):
        """Constructor for the Platform1 class"""

        # Initialize members of the class
        self.platform_name = platform_name 
        if releases is not APIHelper.SKIP:
            self.releases = releases 
        if sensors is not APIHelper.SKIP:
            self.sensors = sensors 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        platform_name = dictionary.get("platform-name") if dictionary.get("platform-name") else None
        releases = None
        if dictionary.get('releases') is not None:
            releases = [Release2.from_dictionary(x) for x in dictionary.get('releases')]
        else:
            releases = APIHelper.SKIP
        sensors = dictionary.get("sensors") if dictionary.get("sensors") else APIHelper.SKIP
        # Return an object of this model
        return cls(platform_name,
                   releases,
                   sensors)
