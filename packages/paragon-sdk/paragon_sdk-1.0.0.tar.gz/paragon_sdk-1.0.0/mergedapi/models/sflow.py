# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.counter_record_schema import CounterRecordSchema
from mergedapi.models.protocol_schema import ProtocolSchema
from mergedapi.models.sample_schema import SampleSchema


class Sflow(object):

    """Implementation of the 'Sflow' model.

    TODO: type model description here.

    Attributes:
        counter_record (List[CounterRecordSchema]): Counter record formats
        flow_record (List[CounterRecordSchema]): Flow record formats
        protocol (List[ProtocolSchema]): Decoding schema for protocols found
            in sflow
        sample (List[SampleSchema]): Sample types and their header fields

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "counter_record": 'counter-record',
        "flow_record": 'flow-record',
        "protocol": 'protocol',
        "sample": 'sample'
    }

    _optionals = [
        'counter_record',
        'flow_record',
        'protocol',
        'sample',
    ]

    def __init__(self,
                 counter_record=APIHelper.SKIP,
                 flow_record=APIHelper.SKIP,
                 protocol=APIHelper.SKIP,
                 sample=APIHelper.SKIP):
        """Constructor for the Sflow class"""

        # Initialize members of the class
        if counter_record is not APIHelper.SKIP:
            self.counter_record = counter_record 
        if flow_record is not APIHelper.SKIP:
            self.flow_record = flow_record 
        if protocol is not APIHelper.SKIP:
            self.protocol = protocol 
        if sample is not APIHelper.SKIP:
            self.sample = sample 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        counter_record = None
        if dictionary.get('counter-record') is not None:
            counter_record = [CounterRecordSchema.from_dictionary(x) for x in dictionary.get('counter-record')]
        else:
            counter_record = APIHelper.SKIP
        flow_record = None
        if dictionary.get('flow-record') is not None:
            flow_record = [CounterRecordSchema.from_dictionary(x) for x in dictionary.get('flow-record')]
        else:
            flow_record = APIHelper.SKIP
        protocol = None
        if dictionary.get('protocol') is not None:
            protocol = [ProtocolSchema.from_dictionary(x) for x in dictionary.get('protocol')]
        else:
            protocol = APIHelper.SKIP
        sample = None
        if dictionary.get('sample') is not None:
            sample = [SampleSchema.from_dictionary(x) for x in dictionary.get('sample')]
        else:
            sample = APIHelper.SKIP
        # Return an object of this model
        return cls(counter_record,
                   flow_record,
                   protocol,
                   sample)
