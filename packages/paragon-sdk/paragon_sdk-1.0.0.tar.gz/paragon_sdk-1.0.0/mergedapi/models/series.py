# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class Series(object):

    """Implementation of the 'Series' model.

    TODO: type model description here.

    Attributes:
        name (str): TODO: type description here.
        tags (Dict[str, str]): TODO: type description here.
        columns (List[str]): TODO: type description here.
        values (List[str]): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "tags": 'tags',
        "columns": 'columns',
        "values": 'values'
    }

    _optionals = [
        'name',
        'tags',
        'columns',
        'values',
    ]

    def __init__(self,
                 name=APIHelper.SKIP,
                 tags=APIHelper.SKIP,
                 columns=APIHelper.SKIP,
                 values=APIHelper.SKIP):
        """Constructor for the Series class"""

        # Initialize members of the class
        if name is not APIHelper.SKIP:
            self.name = name 
        if tags is not APIHelper.SKIP:
            self.tags = tags 
        if columns is not APIHelper.SKIP:
            self.columns = columns 
        if values is not APIHelper.SKIP:
            self.values = values 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        tags = dictionary.get("tags") if dictionary.get("tags") else APIHelper.SKIP
        columns = dictionary.get("columns") if dictionary.get("columns") else APIHelper.SKIP
        values = dictionary.get("values") if dictionary.get("values") else APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   tags,
                   columns,
                   values)
