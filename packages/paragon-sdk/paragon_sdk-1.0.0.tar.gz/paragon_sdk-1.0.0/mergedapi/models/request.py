# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class Request(object):

    """Implementation of the 'Request' model.

    TODO: type model description here.

    Attributes:
        org_id (str): TODO: type description here.
        name (str): Optionally a name to be assigned to the scan. Note that
            this name does not have to be unique. If not specified, a random
            name will be chosen automatically.
        description (str): Optional description of the scan.
        target_ids (List[str]): The ids of the devices that are the target of
            the scan. At least one must be specified.
        benchmark_doc (str): References the benchmark document containing the
            rules to be applied by the scan. TODO Clarify what form this
            takes; needs to include version.
        tailoring_doc (str): Optionally references a tailoring document that
            qualifies how the rules are to be applied. TODO Clarify what form
            this takes; needs to include version.
        profile (str): Optionally holds the name of a profile to be applied to
            the benchmark for scan execution.
        labels (Dict[str, str]): Labels applied to the scan.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "org_id": 'orgId',
        "name": 'name',
        "description": 'description',
        "target_ids": 'targetIds',
        "benchmark_doc": 'benchmarkDoc',
        "tailoring_doc": 'tailoringDoc',
        "profile": 'profile',
        "labels": 'labels'
    }

    _optionals = [
        'org_id',
        'name',
        'description',
        'target_ids',
        'benchmark_doc',
        'tailoring_doc',
        'profile',
        'labels',
    ]

    def __init__(self,
                 org_id=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 target_ids=APIHelper.SKIP,
                 benchmark_doc=APIHelper.SKIP,
                 tailoring_doc=APIHelper.SKIP,
                 profile=APIHelper.SKIP,
                 labels=APIHelper.SKIP):
        """Constructor for the Request class"""

        # Initialize members of the class
        if org_id is not APIHelper.SKIP:
            self.org_id = org_id 
        if name is not APIHelper.SKIP:
            self.name = name 
        if description is not APIHelper.SKIP:
            self.description = description 
        if target_ids is not APIHelper.SKIP:
            self.target_ids = target_ids 
        if benchmark_doc is not APIHelper.SKIP:
            self.benchmark_doc = benchmark_doc 
        if tailoring_doc is not APIHelper.SKIP:
            self.tailoring_doc = tailoring_doc 
        if profile is not APIHelper.SKIP:
            self.profile = profile 
        if labels is not APIHelper.SKIP:
            self.labels = labels 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        org_id = dictionary.get("orgId") if dictionary.get("orgId") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        target_ids = dictionary.get("targetIds") if dictionary.get("targetIds") else APIHelper.SKIP
        benchmark_doc = dictionary.get("benchmarkDoc") if dictionary.get("benchmarkDoc") else APIHelper.SKIP
        tailoring_doc = dictionary.get("tailoringDoc") if dictionary.get("tailoringDoc") else APIHelper.SKIP
        profile = dictionary.get("profile") if dictionary.get("profile") else APIHelper.SKIP
        labels = dictionary.get("labels") if dictionary.get("labels") else APIHelper.SKIP
        # Return an object of this model
        return cls(org_id,
                   name,
                   description,
                   target_ids,
                   benchmark_doc,
                   tailoring_doc,
                   profile,
                   labels)
