# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class Predict(object):

    """Implementation of the 'Predict' model.

    Learn baseline threshold based on the ML alogrithms and predict value in
    future

    Attributes:
        algorithm (Algorithm3Enum): Algorithm used to create baseline
            thresholds
        field_name (str): Field name on which ML algorithm needs to be
            applied
        learning_period (str): Learning period to learn the baseline
            threshold. Should be of pattern
            [1-9][0-9]*(\.[0-9]+)?(offset|seconds|minutes|hours|days|weeks|year
            s|o|s|m|h|d|w|y)
        pattern_periodicity (str): Pattern periodicity. Should be of pattern
            [1-9][0-9]*(minutes|hours|days|weeks|months)(,[1-9][0-9]*(minutes|h
            ours|days|weeks|months))*
        seasonality (str): Seasonality. Should be of pattern
            [1-9][0-9]*(minutes|hours|days|weeks|months)(,[1-9][0-9]*(minutes|h
            ours|days|weeks|months))*
        prediction_offset (str): Time offset in future to predict. Should be
            of pattern
            [1-9][0-9]*(\.[0-9]+)?(offset|seconds|minutes|hours|days|weeks|year
            s|o|s|m|h|d|w|y)

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "algorithm": 'algorithm',
        "field_name": 'field-name',
        "learning_period": 'learning-period',
        "prediction_offset": 'prediction-offset',
        "pattern_periodicity": 'pattern-periodicity',
        "seasonality": 'seasonality'
    }

    _optionals = [
        'pattern_periodicity',
        'seasonality',
    ]

    def __init__(self,
                 algorithm=None,
                 field_name=None,
                 learning_period=None,
                 prediction_offset=None,
                 pattern_periodicity=APIHelper.SKIP,
                 seasonality=APIHelper.SKIP):
        """Constructor for the Predict class"""

        # Initialize members of the class
        self.algorithm = algorithm 
        self.field_name = field_name 
        self.learning_period = learning_period 
        if pattern_periodicity is not APIHelper.SKIP:
            self.pattern_periodicity = pattern_periodicity 
        if seasonality is not APIHelper.SKIP:
            self.seasonality = seasonality 
        self.prediction_offset = prediction_offset 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        algorithm = dictionary.get("algorithm") if dictionary.get("algorithm") else None
        field_name = dictionary.get("field-name") if dictionary.get("field-name") else None
        learning_period = dictionary.get("learning-period") if dictionary.get("learning-period") else None
        prediction_offset = dictionary.get("prediction-offset") if dictionary.get("prediction-offset") else None
        pattern_periodicity = dictionary.get("pattern-periodicity") if dictionary.get("pattern-periodicity") else APIHelper.SKIP
        seasonality = dictionary.get("seasonality") if dictionary.get("seasonality") else APIHelper.SKIP
        # Return an object of this model
        return cls(algorithm,
                   field_name,
                   learning_period,
                   prediction_offset,
                   pattern_periodicity,
                   seasonality)
