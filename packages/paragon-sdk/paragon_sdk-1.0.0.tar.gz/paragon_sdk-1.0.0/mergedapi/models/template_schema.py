# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.recognition_pattern import RecognitionPattern


class TemplateSchema(object):

    """Implementation of the 'template_schema' model.

    TODO: type model description here.

    Attributes:
        description (str): Template description.
        key_fields (List[str]): TODO: type description here.
        name (str): Name of the template.
        priority (int): Priority given to template during matching.
        protocol_version (ProtocolVersionEnum): Flow protocol version.
        recognition_pattern (RecognitionPattern): TODO: type description
            here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "description": 'description',
        "key_fields": 'key-fields',
        "priority": 'priority',
        "protocol_version": 'protocol-version',
        "recognition_pattern": 'recognition-pattern'
    }

    _optionals = [
        'description',
        'key_fields',
        'priority',
        'protocol_version',
        'recognition_pattern',
    ]

    def __init__(self,
                 name=None,
                 description=APIHelper.SKIP,
                 key_fields=APIHelper.SKIP,
                 priority=APIHelper.SKIP,
                 protocol_version=APIHelper.SKIP,
                 recognition_pattern=APIHelper.SKIP):
        """Constructor for the TemplateSchema class"""

        # Initialize members of the class
        if description is not APIHelper.SKIP:
            self.description = description 
        if key_fields is not APIHelper.SKIP:
            self.key_fields = key_fields 
        self.name = name 
        if priority is not APIHelper.SKIP:
            self.priority = priority 
        if protocol_version is not APIHelper.SKIP:
            self.protocol_version = protocol_version 
        if recognition_pattern is not APIHelper.SKIP:
            self.recognition_pattern = recognition_pattern 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else None
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        key_fields = dictionary.get("key-fields") if dictionary.get("key-fields") else APIHelper.SKIP
        priority = dictionary.get("priority") if dictionary.get("priority") else APIHelper.SKIP
        protocol_version = dictionary.get("protocol-version") if dictionary.get("protocol-version") else APIHelper.SKIP
        recognition_pattern = RecognitionPattern.from_dictionary(dictionary.get('recognition-pattern')) if 'recognition-pattern' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   description,
                   key_fields,
                   priority,
                   protocol_version,
                   recognition_pattern)
