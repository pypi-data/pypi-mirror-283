# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class VulnerabilityPBNDefinition(object):

    """Implementation of the 'vulnerabilityPBNDefinition' model.

    PBNDefinition defines a PBN.

    Attributes:
        id (str): Uniquely identifies the PBN.
        bug_id (int): Unique integer assigned to the problem; otherwise known
            as PR number.
        pds (float): TODO: type description here.
        trigger (str): Describes what triggers the problem.
        description (str): Detailed description of the problem.
        headline (str): A brief description of the problem.
        platform_category (List[str]): Identifies platforms affected by the
            problem.
        product_category (List[str]): Identifies products affected by the
            problem.
        affected_version (List[str]): Identifies releases that are affected by
            the problem.
        fixed_in (List[str]): Identifies Committed-Release values where the
            problem is fixed.
        customer_risk (VulnerabilityCustomerRiskEnum): TODO: type description
            here.
        problem_level (str): Represents the level of service impact of the
            problem represented by the problem.
        acked (bool): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "bug_id": 'bugId',
        "pds": 'pds',
        "trigger": 'trigger',
        "description": 'description',
        "headline": 'headline',
        "platform_category": 'platformCategory',
        "product_category": 'productCategory',
        "affected_version": 'affectedVersion',
        "fixed_in": 'fixedIn',
        "customer_risk": 'customerRisk',
        "problem_level": 'problemLevel',
        "acked": 'acked'
    }

    _optionals = [
        'id',
        'bug_id',
        'pds',
        'trigger',
        'description',
        'headline',
        'platform_category',
        'product_category',
        'affected_version',
        'fixed_in',
        'customer_risk',
        'problem_level',
        'acked',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 bug_id=APIHelper.SKIP,
                 pds=APIHelper.SKIP,
                 trigger=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 headline=APIHelper.SKIP,
                 platform_category=APIHelper.SKIP,
                 product_category=APIHelper.SKIP,
                 affected_version=APIHelper.SKIP,
                 fixed_in=APIHelper.SKIP,
                 customer_risk=APIHelper.SKIP,
                 problem_level=APIHelper.SKIP,
                 acked=APIHelper.SKIP):
        """Constructor for the VulnerabilityPBNDefinition class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if bug_id is not APIHelper.SKIP:
            self.bug_id = bug_id 
        if pds is not APIHelper.SKIP:
            self.pds = pds 
        if trigger is not APIHelper.SKIP:
            self.trigger = trigger 
        if description is not APIHelper.SKIP:
            self.description = description 
        if headline is not APIHelper.SKIP:
            self.headline = headline 
        if platform_category is not APIHelper.SKIP:
            self.platform_category = platform_category 
        if product_category is not APIHelper.SKIP:
            self.product_category = product_category 
        if affected_version is not APIHelper.SKIP:
            self.affected_version = affected_version 
        if fixed_in is not APIHelper.SKIP:
            self.fixed_in = fixed_in 
        if customer_risk is not APIHelper.SKIP:
            self.customer_risk = customer_risk 
        if problem_level is not APIHelper.SKIP:
            self.problem_level = problem_level 
        if acked is not APIHelper.SKIP:
            self.acked = acked 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        bug_id = dictionary.get("bugId") if dictionary.get("bugId") else APIHelper.SKIP
        pds = dictionary.get("pds") if dictionary.get("pds") else APIHelper.SKIP
        trigger = dictionary.get("trigger") if dictionary.get("trigger") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        headline = dictionary.get("headline") if dictionary.get("headline") else APIHelper.SKIP
        platform_category = dictionary.get("platformCategory") if dictionary.get("platformCategory") else APIHelper.SKIP
        product_category = dictionary.get("productCategory") if dictionary.get("productCategory") else APIHelper.SKIP
        affected_version = dictionary.get("affectedVersion") if dictionary.get("affectedVersion") else APIHelper.SKIP
        fixed_in = dictionary.get("fixedIn") if dictionary.get("fixedIn") else APIHelper.SKIP
        customer_risk = dictionary.get("customerRisk") if dictionary.get("customerRisk") else APIHelper.SKIP
        problem_level = dictionary.get("problemLevel") if dictionary.get("problemLevel") else APIHelper.SKIP
        acked = dictionary.get("acked") if "acked" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   bug_id,
                   pds,
                   trigger,
                   description,
                   headline,
                   platform_category,
                   product_category,
                   affected_version,
                   fixed_in,
                   customer_risk,
                   problem_level,
                   acked)
