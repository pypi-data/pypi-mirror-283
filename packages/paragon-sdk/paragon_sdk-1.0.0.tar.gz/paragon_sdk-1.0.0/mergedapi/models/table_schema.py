# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class TableSchema(object):

    """Implementation of the 'table_schema' model.

    TODO: type model description here.

    Attributes:
        name (str): Name of the table
        mtype (Type14Enum): TODO: type description here.
        db_name (str): Database name in which the measurement is present.
        retention_policy (str): Retention policy of the measurement

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "mtype": 'type',
        "db_name": 'db_name',
        "retention_policy": 'retention_policy'
    }

    _optionals = [
        'db_name',
        'retention_policy',
    ]

    def __init__(self,
                 name=None,
                 mtype=None,
                 db_name=APIHelper.SKIP,
                 retention_policy=APIHelper.SKIP):
        """Constructor for the TableSchema class"""

        # Initialize members of the class
        self.name = name 
        self.mtype = mtype 
        if db_name is not APIHelper.SKIP:
            self.db_name = db_name 
        if retention_policy is not APIHelper.SKIP:
            self.retention_policy = retention_policy 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else None
        mtype = dictionary.get("type") if dictionary.get("type") else None
        db_name = dictionary.get("db_name") if dictionary.get("db_name") else APIHelper.SKIP
        retention_policy = dictionary.get("retention_policy") if dictionary.get("retention_policy") else APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   mtype,
                   db_name,
                   retention_policy)
