# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.bom_external_reference import BomExternalReference
from mergedapi.models.bom_hash import BomHash
from mergedapi.models.license import License


class BomComponent(object):

    """Implementation of the 'bomComponent' model.

    Summarises the key properties of a BOM Component.
    For full semantics, refer to
    https://github.com/CycloneDX/specification/blob/fd4d383658196992364e5d62568
    a48c431ace515/schema/bom-1.5.xsd#L434.

    Attributes:
        name (str): TODO: type description here.
        version (str): TODO: type description here.
        mtype (str): TODO: type description here.
        license (License): TODO: type description here.
        hashes (List[BomHash]): TODO: type description here.
        external_references (List[BomExternalReference]): TODO: type
            description here.
        bom_ref (str): TODO: type description here.
        bom_id (str): Id of the BOM which defined this component.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "version": 'version',
        "mtype": 'type',
        "license": 'license',
        "hashes": 'hashes',
        "external_references": 'externalReferences',
        "bom_ref": 'bomRef',
        "bom_id": 'bomId'
    }

    _optionals = [
        'name',
        'version',
        'mtype',
        'license',
        'hashes',
        'external_references',
        'bom_ref',
        'bom_id',
    ]

    def __init__(self,
                 name=APIHelper.SKIP,
                 version=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 license=APIHelper.SKIP,
                 hashes=APIHelper.SKIP,
                 external_references=APIHelper.SKIP,
                 bom_ref=APIHelper.SKIP,
                 bom_id=APIHelper.SKIP):
        """Constructor for the BomComponent class"""

        # Initialize members of the class
        if name is not APIHelper.SKIP:
            self.name = name 
        if version is not APIHelper.SKIP:
            self.version = version 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if license is not APIHelper.SKIP:
            self.license = license 
        if hashes is not APIHelper.SKIP:
            self.hashes = hashes 
        if external_references is not APIHelper.SKIP:
            self.external_references = external_references 
        if bom_ref is not APIHelper.SKIP:
            self.bom_ref = bom_ref 
        if bom_id is not APIHelper.SKIP:
            self.bom_id = bom_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        version = dictionary.get("version") if dictionary.get("version") else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        license = License.from_dictionary(dictionary.get('license')) if 'license' in dictionary.keys() else APIHelper.SKIP
        hashes = None
        if dictionary.get('hashes') is not None:
            hashes = [BomHash.from_dictionary(x) for x in dictionary.get('hashes')]
        else:
            hashes = APIHelper.SKIP
        external_references = None
        if dictionary.get('externalReferences') is not None:
            external_references = [BomExternalReference.from_dictionary(x) for x in dictionary.get('externalReferences')]
        else:
            external_references = APIHelper.SKIP
        bom_ref = dictionary.get("bomRef") if dictionary.get("bomRef") else APIHelper.SKIP
        bom_id = dictionary.get("bomId") if dictionary.get("bomId") else APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   version,
                   mtype,
                   license,
                   hashes,
                   external_references,
                   bom_ref,
                   bom_id)
