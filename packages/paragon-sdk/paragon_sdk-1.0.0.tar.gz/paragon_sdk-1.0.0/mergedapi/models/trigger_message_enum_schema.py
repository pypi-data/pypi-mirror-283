# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class TriggerMessageEnumSchema(object):

    """Implementation of the 'trigger_message_enum_schema' model.

    TODO: type model description here.

    Attributes:
        trigger_enums (Dict[str, str]): TODO: type description here.
        field_enums (Dict[str, str]): TODO: type description here.
        used_fields (List[str]): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "trigger_enums": 'TriggerEnums',
        "field_enums": 'FieldEnums',
        "used_fields": 'UsedFields'
    }

    _optionals = [
        'trigger_enums',
        'field_enums',
        'used_fields',
    ]

    def __init__(self,
                 trigger_enums=APIHelper.SKIP,
                 field_enums=APIHelper.SKIP,
                 used_fields=APIHelper.SKIP):
        """Constructor for the TriggerMessageEnumSchema class"""

        # Initialize members of the class
        if trigger_enums is not APIHelper.SKIP:
            self.trigger_enums = trigger_enums 
        if field_enums is not APIHelper.SKIP:
            self.field_enums = field_enums 
        if used_fields is not APIHelper.SKIP:
            self.used_fields = used_fields 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        trigger_enums = dictionary.get("TriggerEnums") if dictionary.get("TriggerEnums") else APIHelper.SKIP
        field_enums = dictionary.get("FieldEnums") if dictionary.get("FieldEnums") else APIHelper.SKIP
        used_fields = dictionary.get("UsedFields") if dictionary.get("UsedFields") else APIHelper.SKIP
        # Return an object of this model
        return cls(trigger_enums,
                   field_enums,
                   used_fields)
