# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.snmp_proxy import SnmpProxy


class Loadbalancer(object):

    """Implementation of the 'Loadbalancer' model.

    Loadbalancer deployment configuration

    Attributes:
        snmp_proxy (SnmpProxy): Loadbalancer deployment configuration for SNMP
            Notifications

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "snmp_proxy": 'snmp-proxy'
    }

    _optionals = [
        'snmp_proxy',
    ]

    def __init__(self,
                 snmp_proxy=APIHelper.SKIP):
        """Constructor for the Loadbalancer class"""

        # Initialize members of the class
        if snmp_proxy is not APIHelper.SKIP:
            self.snmp_proxy = snmp_proxy 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        snmp_proxy = SnmpProxy.from_dictionary(dictionary.get('snmp-proxy')) if 'snmp-proxy' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(snmp_proxy)
