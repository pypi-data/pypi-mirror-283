# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class AttestationLogEvent(object):

    """Implementation of the 'attestationLogEvent' model.

    Contains details of a logged event.

    Attributes:
        pcr_index (int): Index of the associated PCR.
        mtype (long|int): Event type as an integer.
        type_name (str): Event type as a string.
        digest_name (str): TODO: type description here.
        digest (str): Digest value.
        data (str): Data associated with the event.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "pcr_index": 'pcrIndex',
        "mtype": 'type',
        "type_name": 'typeName',
        "digest_name": 'digestName',
        "digest": 'digest',
        "data": 'data'
    }

    _optionals = [
        'pcr_index',
        'mtype',
        'type_name',
        'digest_name',
        'digest',
        'data',
    ]

    def __init__(self,
                 pcr_index=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 type_name=APIHelper.SKIP,
                 digest_name=APIHelper.SKIP,
                 digest=APIHelper.SKIP,
                 data=APIHelper.SKIP):
        """Constructor for the AttestationLogEvent class"""

        # Initialize members of the class
        if pcr_index is not APIHelper.SKIP:
            self.pcr_index = pcr_index 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if type_name is not APIHelper.SKIP:
            self.type_name = type_name 
        if digest_name is not APIHelper.SKIP:
            self.digest_name = digest_name 
        if digest is not APIHelper.SKIP:
            self.digest = digest 
        if data is not APIHelper.SKIP:
            self.data = data 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        pcr_index = dictionary.get("pcrIndex") if dictionary.get("pcrIndex") else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        type_name = dictionary.get("typeName") if dictionary.get("typeName") else APIHelper.SKIP
        digest_name = dictionary.get("digestName") if dictionary.get("digestName") else APIHelper.SKIP
        digest = dictionary.get("digest") if dictionary.get("digest") else APIHelper.SKIP
        data = dictionary.get("data") if dictionary.get("data") else APIHelper.SKIP
        # Return an object of this model
        return cls(pcr_index,
                   mtype,
                   type_name,
                   digest_name,
                   digest,
                   data)
