# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class AddField(object):

    """Implementation of the 'AddField' model.

    TODO: type model description here.

    Attributes:
        name (str): Tagged field name
        mtype (Type8Enum): TODO: type description here.
        value (str): Tagged value
        in_memory (bool): Look for value in internal cache

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "value": 'value',
        "mtype": 'type',
        "in_memory": 'in-memory'
    }

    _optionals = [
        'mtype',
        'in_memory',
    ]

    def __init__(self,
                 name=None,
                 value=None,
                 mtype=APIHelper.SKIP,
                 in_memory=APIHelper.SKIP):
        """Constructor for the AddField class"""

        # Initialize members of the class
        self.name = name 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        self.value = value 
        if in_memory is not APIHelper.SKIP:
            self.in_memory = in_memory 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else None
        value = dictionary.get("value") if dictionary.get("value") else None
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        in_memory = dictionary.get("in-memory") if "in-memory" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   value,
                   mtype,
                   in_memory)
