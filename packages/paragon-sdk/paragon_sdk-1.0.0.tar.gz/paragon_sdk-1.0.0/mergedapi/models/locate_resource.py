# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.where_1 import Where1
from mergedapi.models.with_capture_group import WithCaptureGroup


class LocateResource(object):

    """Implementation of the 'LocateResource' model.

    TODO: type model description here.

    Attributes:
        label_as (str): TODO: type description here.
        resource (str): Name of the resource which needs to looped over.
            Format: <optional-idetifier followed by :><topic-name/rule-name>.
            Should be of pattern
            ([a-zA-Z][a-zA-Z0-9-]*:)?[a-z][a-z-]*(\.{1}[a-z0-9-]+)*/[a-z][a-z0-
            9-]*.
        where (Where1): TODO: type description here.
        with_capture_group (List[WithCaptureGroup]): TODO: type description
            here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "label_as": 'label-as',
        "resource": 'resource',
        "where": 'where',
        "with_capture_group": 'with-capture-group'
    }

    _optionals = [
        'where',
        'with_capture_group',
    ]

    def __init__(self,
                 label_as=None,
                 resource=None,
                 where=APIHelper.SKIP,
                 with_capture_group=APIHelper.SKIP):
        """Constructor for the LocateResource class"""

        # Initialize members of the class
        self.label_as = label_as 
        self.resource = resource 
        if where is not APIHelper.SKIP:
            self.where = where 
        if with_capture_group is not APIHelper.SKIP:
            self.with_capture_group = with_capture_group 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        label_as = dictionary.get("label-as") if dictionary.get("label-as") else None
        resource = dictionary.get("resource") if dictionary.get("resource") else None
        where = Where1.from_dictionary(dictionary.get('where')) if 'where' in dictionary.keys() else APIHelper.SKIP
        with_capture_group = None
        if dictionary.get('with-capture-group') is not None:
            with_capture_group = [WithCaptureGroup.from_dictionary(x) for x in dictionary.get('with-capture-group')]
        else:
            with_capture_group = APIHelper.SKIP
        # Return an object of this model
        return cls(label_as,
                   resource,
                   where,
                   with_capture_group)
