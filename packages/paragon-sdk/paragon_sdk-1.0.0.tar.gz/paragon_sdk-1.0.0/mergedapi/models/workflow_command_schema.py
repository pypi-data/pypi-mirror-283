# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.command import Command


class WorkflowCommandSchema(object):

    """Implementation of the 'workflow_command_schema' model.

    Workflow command configuration

    Attributes:
        command_tag (str): Command tag
        commands (List[Command]): List of commands to execute
        ignore (List[object]): Ignore if this command fails
        delay (str): Delay between this command's repeated attempts
        repeat (float): Repeat this command on failure
        mtype (Type18Enum): Type of the data produced or consumed
        arguments (List[str]): TODO: type description here.
        environment (List[str]): TODO: type description here.
        device (List[str]): TODO: type description here.
        device_group (List[str]): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "command_tag": 'command-tag',
        "commands": 'commands',
        "ignore": 'ignore',
        "delay": 'delay',
        "repeat": 'repeat',
        "mtype": 'type',
        "arguments": 'arguments',
        "environment": 'environment',
        "device": 'device',
        "device_group": 'device-group'
    }

    _optionals = [
        'commands',
        'ignore',
        'delay',
        'repeat',
        'mtype',
        'arguments',
        'environment',
        'device',
        'device_group',
    ]

    def __init__(self,
                 command_tag=None,
                 commands=APIHelper.SKIP,
                 ignore=APIHelper.SKIP,
                 delay='10s',
                 repeat=0,
                 mtype=APIHelper.SKIP,
                 arguments=APIHelper.SKIP,
                 environment=APIHelper.SKIP,
                 device=APIHelper.SKIP,
                 device_group=APIHelper.SKIP):
        """Constructor for the WorkflowCommandSchema class"""

        # Initialize members of the class
        self.command_tag = command_tag 
        if commands is not APIHelper.SKIP:
            self.commands = commands 
        if ignore is not APIHelper.SKIP:
            self.ignore = ignore 
        self.delay = delay 
        self.repeat = repeat 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if arguments is not APIHelper.SKIP:
            self.arguments = arguments 
        if environment is not APIHelper.SKIP:
            self.environment = environment 
        if device is not APIHelper.SKIP:
            self.device = device 
        if device_group is not APIHelper.SKIP:
            self.device_group = device_group 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        command_tag = dictionary.get("command-tag") if dictionary.get("command-tag") else None
        commands = None
        if dictionary.get('commands') is not None:
            commands = [Command.from_dictionary(x) for x in dictionary.get('commands')]
        else:
            commands = APIHelper.SKIP
        ignore = dictionary.get("ignore") if dictionary.get("ignore") else APIHelper.SKIP
        delay = dictionary.get("delay") if dictionary.get("delay") else '10s'
        repeat = dictionary.get("repeat") if dictionary.get("repeat") else 0
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        arguments = dictionary.get("arguments") if dictionary.get("arguments") else APIHelper.SKIP
        environment = dictionary.get("environment") if dictionary.get("environment") else APIHelper.SKIP
        device = dictionary.get("device") if dictionary.get("device") else APIHelper.SKIP
        device_group = dictionary.get("device-group") if dictionary.get("device-group") else APIHelper.SKIP
        # Return an object of this model
        return cls(command_tag,
                   commands,
                   ignore,
                   delay,
                   repeat,
                   mtype,
                   arguments,
                   environment,
                   device,
                   device_group)
