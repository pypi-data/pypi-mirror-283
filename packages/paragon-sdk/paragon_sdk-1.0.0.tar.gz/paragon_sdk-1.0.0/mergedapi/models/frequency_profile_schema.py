# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.non_sensor import NonSensor
from mergedapi.models.sensor import Sensor


class FrequencyProfileSchema(object):

    """Implementation of the 'frequency-profile_schema' model.

    TODO: type model description here.

    Attributes:
        name (str): Frequency profile name
        non_sensor (List[NonSensor]): TODO: type description here.
        sensor (List[Sensor]): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "non_sensor": 'non-sensor',
        "sensor": 'sensor'
    }

    _optionals = [
        'non_sensor',
        'sensor',
    ]

    def __init__(self,
                 name=None,
                 non_sensor=APIHelper.SKIP,
                 sensor=APIHelper.SKIP):
        """Constructor for the FrequencyProfileSchema class"""

        # Initialize members of the class
        self.name = name 
        if non_sensor is not APIHelper.SKIP:
            self.non_sensor = non_sensor 
        if sensor is not APIHelper.SKIP:
            self.sensor = sensor 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else None
        non_sensor = None
        if dictionary.get('non-sensor') is not None:
            non_sensor = [NonSensor.from_dictionary(x) for x in dictionary.get('non-sensor')]
        else:
            non_sensor = APIHelper.SKIP
        sensor = None
        if dictionary.get('sensor') is not None:
            sensor = [Sensor.from_dictionary(x) for x in dictionary.get('sensor')]
        else:
            sensor = APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   non_sensor,
                   sensor)
