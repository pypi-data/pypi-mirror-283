# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.checklist_rule_result import ChecklistRuleResult
from mergedapi.models.target import Target
from mergedapi.models.template import Template


class ChecklistChecklist(object):

    """Implementation of the 'checklistChecklist' model.

    Checklist represents a checklist.

    Attributes:
        id (str): The id of the checklist.
        name (str): The name of the checklist - this must be unique.
        description (str): Optional description of the checklist.
        target (Target): TODO: type description here.
        template (Template): TODO: type description here.
        labels (Dict[str, str]): Labels applied to the checklist.
        last_updated (datetime): Time at which the checklist was last updated.
            Output only.
        results (List[ChecklistRuleResult]): Represents the results of the
            evaluation of the rules. The order of results is the same as the
            order of the rule_definitions in the template on which the
            template is based.
        imported_scans (List[str]): Lists the ids of scans from which results
            have been imported.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "name": 'name',
        "description": 'description',
        "target": 'target',
        "template": 'template',
        "labels": 'labels',
        "last_updated": 'lastUpdated',
        "results": 'results',
        "imported_scans": 'importedScans'
    }

    _optionals = [
        'id',
        'name',
        'description',
        'target',
        'template',
        'labels',
        'last_updated',
        'results',
        'imported_scans',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 target=APIHelper.SKIP,
                 template=APIHelper.SKIP,
                 labels=APIHelper.SKIP,
                 last_updated=APIHelper.SKIP,
                 results=APIHelper.SKIP,
                 imported_scans=APIHelper.SKIP):
        """Constructor for the ChecklistChecklist class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if name is not APIHelper.SKIP:
            self.name = name 
        if description is not APIHelper.SKIP:
            self.description = description 
        if target is not APIHelper.SKIP:
            self.target = target 
        if template is not APIHelper.SKIP:
            self.template = template 
        if labels is not APIHelper.SKIP:
            self.labels = labels 
        if last_updated is not APIHelper.SKIP:
            self.last_updated = APIHelper.apply_datetime_converter(last_updated, APIHelper.RFC3339DateTime) if last_updated else None 
        if results is not APIHelper.SKIP:
            self.results = results 
        if imported_scans is not APIHelper.SKIP:
            self.imported_scans = imported_scans 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        target = Target.from_dictionary(dictionary.get('target')) if 'target' in dictionary.keys() else APIHelper.SKIP
        template = Template.from_dictionary(dictionary.get('template')) if 'template' in dictionary.keys() else APIHelper.SKIP
        labels = dictionary.get("labels") if dictionary.get("labels") else APIHelper.SKIP
        last_updated = APIHelper.RFC3339DateTime.from_value(dictionary.get("lastUpdated")).datetime if dictionary.get("lastUpdated") else APIHelper.SKIP
        results = None
        if dictionary.get('results') is not None:
            results = [ChecklistRuleResult.from_dictionary(x) for x in dictionary.get('results')]
        else:
            results = APIHelper.SKIP
        imported_scans = dictionary.get("importedScans") if dictionary.get("importedScans") else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   name,
                   description,
                   target,
                   template,
                   labels,
                   last_updated,
                   results,
                   imported_scans)
