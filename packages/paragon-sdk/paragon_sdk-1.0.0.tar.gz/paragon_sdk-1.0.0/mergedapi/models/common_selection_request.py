# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.filtering import Filtering
from mergedapi.models.pagination import Pagination
from mergedapi.models.sort import Sort


class CommonSelectionRequest(object):

    """Implementation of the 'commonSelectionRequest' model.

    SelectRequest defines properties that qualify the entities to be returned
    by a bulk-read request.

    Attributes:
        pagination (Pagination): TODO: type description here.
        filtering (Filtering): TODO: type description here.
        sort (Sort): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "pagination": 'pagination',
        "filtering": 'filtering',
        "sort": 'sort'
    }

    _optionals = [
        'pagination',
        'filtering',
        'sort',
    ]

    def __init__(self,
                 pagination=APIHelper.SKIP,
                 filtering=APIHelper.SKIP,
                 sort=APIHelper.SKIP):
        """Constructor for the CommonSelectionRequest class"""

        # Initialize members of the class
        if pagination is not APIHelper.SKIP:
            self.pagination = pagination 
        if filtering is not APIHelper.SKIP:
            self.filtering = filtering 
        if sort is not APIHelper.SKIP:
            self.sort = sort 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        pagination = Pagination.from_dictionary(dictionary.get('pagination')) if 'pagination' in dictionary.keys() else APIHelper.SKIP
        filtering = Filtering.from_dictionary(dictionary.get('filtering')) if 'filtering' in dictionary.keys() else APIHelper.SKIP
        sort = Sort.from_dictionary(dictionary.get('sort')) if 'sort' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(pagination,
                   filtering,
                   sort)
