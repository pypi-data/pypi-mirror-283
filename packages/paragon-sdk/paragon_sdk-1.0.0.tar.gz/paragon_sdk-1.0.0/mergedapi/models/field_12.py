# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.constant_1 import Constant1
from mergedapi.models.enumerate import Enumerate
from mergedapi.models.formula import Formula
from mergedapi.models.reference import Reference
from mergedapi.models.sensor_1 import Sensor1


class Field12(object):

    """Implementation of the 'Field12' model.

    TODO: type model description here.

    Attributes:
        constant (Constant1): TODO: type description here.
        description (str): Description about this field
        field_name (str): Name of the field. Should be of pattern
            [a-z][a-zA-Z0-9_-]*
        formula (Formula): TODO: type description here.
        reference (Reference): TODO: type description here.
        sensor (List[Sensor1]): TODO: type description here.
        mtype (Type8Enum): TODO: type description here.
        enumerate (List[Enumerate]): Enumerate the possible value for the
            fields

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "field_name": 'field-name',
        "constant": 'constant',
        "description": 'description',
        "formula": 'formula',
        "reference": 'reference',
        "sensor": 'sensor',
        "mtype": 'type',
        "enumerate": 'enumerate'
    }

    _optionals = [
        'constant',
        'description',
        'formula',
        'reference',
        'sensor',
        'mtype',
        'enumerate',
    ]

    def __init__(self,
                 field_name=None,
                 constant=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 formula=APIHelper.SKIP,
                 reference=APIHelper.SKIP,
                 sensor=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 enumerate=APIHelper.SKIP):
        """Constructor for the Field12 class"""

        # Initialize members of the class
        if constant is not APIHelper.SKIP:
            self.constant = constant 
        if description is not APIHelper.SKIP:
            self.description = description 
        self.field_name = field_name 
        if formula is not APIHelper.SKIP:
            self.formula = formula 
        if reference is not APIHelper.SKIP:
            self.reference = reference 
        if sensor is not APIHelper.SKIP:
            self.sensor = sensor 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if enumerate is not APIHelper.SKIP:
            self.enumerate = enumerate 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        field_name = dictionary.get("field-name") if dictionary.get("field-name") else None
        constant = Constant1.from_dictionary(dictionary.get('constant')) if 'constant' in dictionary.keys() else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        formula = Formula.from_dictionary(dictionary.get('formula')) if 'formula' in dictionary.keys() else APIHelper.SKIP
        reference = Reference.from_dictionary(dictionary.get('reference')) if 'reference' in dictionary.keys() else APIHelper.SKIP
        sensor = None
        if dictionary.get('sensor') is not None:
            sensor = [Sensor1.from_dictionary(x) for x in dictionary.get('sensor')]
        else:
            sensor = APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        enumerate = None
        if dictionary.get('enumerate') is not None:
            enumerate = [Enumerate.from_dictionary(x) for x in dictionary.get('enumerate')]
        else:
            enumerate = APIHelper.SKIP
        # Return an object of this model
        return cls(field_name,
                   constant,
                   description,
                   formula,
                   reference,
                   sensor,
                   mtype,
                   enumerate)
