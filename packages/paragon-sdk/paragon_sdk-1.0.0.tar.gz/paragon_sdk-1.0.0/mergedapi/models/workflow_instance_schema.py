# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.parameter_2 import Parameter2
from mergedapi.models.retry import Retry
from mergedapi.models.workflow_argument_group_schema import WorkflowArgumentGroupSchema
from mergedapi.models.workflow_cron_options_schema import WorkflowCronOptionsSchema


class WorkflowInstanceSchema(object):

    """Implementation of the 'workflow_instance_schema' model.

    Workflow instance information

    Attributes:
        description (str): Description about this workflow instance
        created_at (str): Workflow instance creation time
        started_at (str): Workflow instance startup time
        finished_at (str): Workflow instance completion time
        status (str): Workflow instance current status
        message (str): Workflow instance current status message
        devices (List[str]): TODO: type description here.
        device_groups (List[str]): TODO: type description here.
        parameters (List[Parameter2]): TODO: type description here.
        argument (List[WorkflowArgumentGroupSchema]): Workflow input
            arguments
        cron_options (WorkflowCronOptionsSchema): Workflow Cron Workflow
            Options information
        batch (int): Maximum parallel steps launched
        pod_gc_strategy (str): Garbage Collection Strategy for workflow pods
        retry (Retry): Retry failed steps
        timeout (str): Maximum time to wait for the step completion before
            bailing out (default 60 seconds)
        workflow_instance_name (str): Name of the workflow instance
        workflow_name (str): Name of the workflow. Should be of pattern
            [a-zA-Z][a-zA-Z0-9_-]*

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "workflow_name": 'workflow-name',
        "description": 'description',
        "created_at": 'created-at',
        "started_at": 'started-at',
        "finished_at": 'finished-at',
        "status": 'status',
        "message": 'message',
        "devices": 'devices',
        "device_groups": 'device-groups',
        "parameters": 'parameters',
        "argument": 'argument',
        "cron_options": 'cron-options',
        "batch": 'batch',
        "pod_gc_strategy": 'pod-gc-strategy',
        "retry": 'retry',
        "timeout": 'timeout',
        "workflow_instance_name": 'workflow-instance-name'
    }

    _optionals = [
        'description',
        'created_at',
        'started_at',
        'finished_at',
        'status',
        'message',
        'devices',
        'device_groups',
        'parameters',
        'argument',
        'cron_options',
        'batch',
        'pod_gc_strategy',
        'retry',
        'timeout',
        'workflow_instance_name',
    ]

    def __init__(self,
                 workflow_name=None,
                 description=APIHelper.SKIP,
                 created_at=APIHelper.SKIP,
                 started_at=APIHelper.SKIP,
                 finished_at=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 message=APIHelper.SKIP,
                 devices=APIHelper.SKIP,
                 device_groups=APIHelper.SKIP,
                 parameters=APIHelper.SKIP,
                 argument=APIHelper.SKIP,
                 cron_options=APIHelper.SKIP,
                 batch=APIHelper.SKIP,
                 pod_gc_strategy=APIHelper.SKIP,
                 retry=APIHelper.SKIP,
                 timeout=APIHelper.SKIP,
                 workflow_instance_name=APIHelper.SKIP):
        """Constructor for the WorkflowInstanceSchema class"""

        # Initialize members of the class
        if description is not APIHelper.SKIP:
            self.description = description 
        if created_at is not APIHelper.SKIP:
            self.created_at = created_at 
        if started_at is not APIHelper.SKIP:
            self.started_at = started_at 
        if finished_at is not APIHelper.SKIP:
            self.finished_at = finished_at 
        if status is not APIHelper.SKIP:
            self.status = status 
        if message is not APIHelper.SKIP:
            self.message = message 
        if devices is not APIHelper.SKIP:
            self.devices = devices 
        if device_groups is not APIHelper.SKIP:
            self.device_groups = device_groups 
        if parameters is not APIHelper.SKIP:
            self.parameters = parameters 
        if argument is not APIHelper.SKIP:
            self.argument = argument 
        if cron_options is not APIHelper.SKIP:
            self.cron_options = cron_options 
        if batch is not APIHelper.SKIP:
            self.batch = batch 
        if pod_gc_strategy is not APIHelper.SKIP:
            self.pod_gc_strategy = pod_gc_strategy 
        if retry is not APIHelper.SKIP:
            self.retry = retry 
        if timeout is not APIHelper.SKIP:
            self.timeout = timeout 
        if workflow_instance_name is not APIHelper.SKIP:
            self.workflow_instance_name = workflow_instance_name 
        self.workflow_name = workflow_name 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        workflow_name = dictionary.get("workflow-name") if dictionary.get("workflow-name") else None
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        created_at = dictionary.get("created-at") if dictionary.get("created-at") else APIHelper.SKIP
        started_at = dictionary.get("started-at") if dictionary.get("started-at") else APIHelper.SKIP
        finished_at = dictionary.get("finished-at") if dictionary.get("finished-at") else APIHelper.SKIP
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        message = dictionary.get("message") if dictionary.get("message") else APIHelper.SKIP
        devices = dictionary.get("devices") if dictionary.get("devices") else APIHelper.SKIP
        device_groups = dictionary.get("device-groups") if dictionary.get("device-groups") else APIHelper.SKIP
        parameters = None
        if dictionary.get('parameters') is not None:
            parameters = [Parameter2.from_dictionary(x) for x in dictionary.get('parameters')]
        else:
            parameters = APIHelper.SKIP
        argument = None
        if dictionary.get('argument') is not None:
            argument = [WorkflowArgumentGroupSchema.from_dictionary(x) for x in dictionary.get('argument')]
        else:
            argument = APIHelper.SKIP
        cron_options = WorkflowCronOptionsSchema.from_dictionary(dictionary.get('cron-options')) if 'cron-options' in dictionary.keys() else APIHelper.SKIP
        batch = dictionary.get("batch") if dictionary.get("batch") else APIHelper.SKIP
        pod_gc_strategy = dictionary.get("pod-gc-strategy") if dictionary.get("pod-gc-strategy") else APIHelper.SKIP
        retry = Retry.from_dictionary(dictionary.get('retry')) if 'retry' in dictionary.keys() else APIHelper.SKIP
        timeout = dictionary.get("timeout") if dictionary.get("timeout") else APIHelper.SKIP
        workflow_instance_name = dictionary.get("workflow-instance-name") if dictionary.get("workflow-instance-name") else APIHelper.SKIP
        # Return an object of this model
        return cls(workflow_name,
                   description,
                   created_at,
                   started_at,
                   finished_at,
                   status,
                   message,
                   devices,
                   device_groups,
                   parameters,
                   argument,
                   cron_options,
                   batch,
                   pod_gc_strategy,
                   retry,
                   timeout,
                   workflow_instance_name)
