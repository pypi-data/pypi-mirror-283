# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.use_plugin import UsePlugin


class OpenConfig(object):

    """Implementation of the 'OpenConfig' model.

    TODO: type model description here.

    Attributes:
        for_device_groups (List[str]): TODO: type description here.
        use_plugin (UsePlugin): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "for_device_groups": 'for-device-groups',
        "use_plugin": 'use-plugin'
    }

    _optionals = [
        'for_device_groups',
        'use_plugin',
    ]

    def __init__(self,
                 for_device_groups=APIHelper.SKIP,
                 use_plugin=APIHelper.SKIP):
        """Constructor for the OpenConfig class"""

        # Initialize members of the class
        if for_device_groups is not APIHelper.SKIP:
            self.for_device_groups = for_device_groups 
        if use_plugin is not APIHelper.SKIP:
            self.use_plugin = use_plugin 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        for_device_groups = dictionary.get("for-device-groups") if dictionary.get("for-device-groups") else APIHelper.SKIP
        use_plugin = UsePlugin.from_dictionary(dictionary.get('use-plugin')) if 'use-plugin' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(for_device_groups,
                   use_plugin)
