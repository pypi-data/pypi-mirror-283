# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.size_based_on_field import SizeBasedOnField


class Field(object):

    """Implementation of the 'Field' model.

    TODO: type model description here.

    Attributes:
        description (str): Description of field
        export_as (ExportAsEnum): Export field as tag/field
        field_name (str): Field name that needs to be exported
        next_header (List[str]): Flag to indicate current field points to next
            header format
        size_based_on_field (SizeBasedOnField): Current field size derived
            using previous field values
        size_in_bits (int): Field size in bits
        mtype (TypeEnum): Data type of field

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "field_name": 'field-name',
        "description": 'description',
        "export_as": 'export-as',
        "next_header": 'next-header',
        "size_based_on_field": 'size-based-on-field',
        "size_in_bits": 'size-in-bits',
        "mtype": 'type'
    }

    _optionals = [
        'description',
        'export_as',
        'next_header',
        'size_based_on_field',
        'size_in_bits',
        'mtype',
    ]

    _nullables = [
        'next_header',
    ]

    def __init__(self,
                 field_name=None,
                 description=APIHelper.SKIP,
                 export_as=APIHelper.SKIP,
                 next_header=APIHelper.SKIP,
                 size_based_on_field=APIHelper.SKIP,
                 size_in_bits=APIHelper.SKIP,
                 mtype=APIHelper.SKIP):
        """Constructor for the Field class"""

        # Initialize members of the class
        if description is not APIHelper.SKIP:
            self.description = description 
        if export_as is not APIHelper.SKIP:
            self.export_as = export_as 
        self.field_name = field_name 
        if next_header is not APIHelper.SKIP:
            self.next_header = next_header 
        if size_based_on_field is not APIHelper.SKIP:
            self.size_based_on_field = size_based_on_field 
        if size_in_bits is not APIHelper.SKIP:
            self.size_in_bits = size_in_bits 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        field_name = dictionary.get("field-name") if dictionary.get("field-name") else None
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        export_as = dictionary.get("export-as") if dictionary.get("export-as") else APIHelper.SKIP
        next_header = dictionary.get("next-header") if "next-header" in dictionary.keys() else APIHelper.SKIP
        size_based_on_field = SizeBasedOnField.from_dictionary(dictionary.get('size-based-on-field')) if 'size-based-on-field' in dictionary.keys() else APIHelper.SKIP
        size_in_bits = dictionary.get("size-in-bits") if dictionary.get("size-in-bits") else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        # Return an object of this model
        return cls(field_name,
                   description,
                   export_as,
                   next_header,
                   size_based_on_field,
                   size_in_bits,
                   mtype)
