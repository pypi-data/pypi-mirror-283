# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.where_2 import Where2


class Query(object):

    """Implementation of the 'Query' model.

    Query for the graph

    Attributes:
        group_name (str): Device/Network group name
        group_type (GroupType1Enum): Device/Network group type
        device_name (str): label name
        measurement_name (str): Measurement name (topic/rule name)
        measurement_type (MeasurementTypeEnum): Measurement type: Field
            table/Trigger table/Rollup table
        transformation (TransformationEnum): Transformation value for query
        field_name (str): Field name of a measurement
        field_type (str): Field type of the measurement (int, float, string,
            uint)
        field_aggregation (FieldAggregationEnum): Data aggregation type of the
            field/key
        where (Where2): where clause for graph
        group_by_interval (str): Group by interval of the query
        group_by_fill (GroupByFill1Enum): Group by fill value of the query
        group_by_tag_key (str): Group by tag key value of the query
        retention_policy (str): Retention policy name

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "group_name": 'group_name',
        "group_type": 'group_type',
        "device_name": 'device_name',
        "measurement_name": 'measurement_name',
        "measurement_type": 'measurement_type',
        "transformation": 'transformation',
        "field_name": 'field_name',
        "field_type": 'field_type',
        "field_aggregation": 'field_aggregation',
        "where": 'where',
        "group_by_interval": 'group_by_interval',
        "group_by_fill": 'group_by_fill',
        "group_by_tag_key": 'group_by_tag_key',
        "retention_policy": 'retention_policy'
    }

    _optionals = [
        'group_name',
        'group_type',
        'device_name',
        'measurement_name',
        'measurement_type',
        'transformation',
        'field_name',
        'field_type',
        'field_aggregation',
        'where',
        'group_by_interval',
        'group_by_fill',
        'group_by_tag_key',
        'retention_policy',
    ]

    def __init__(self,
                 group_name=APIHelper.SKIP,
                 group_type=APIHelper.SKIP,
                 device_name=APIHelper.SKIP,
                 measurement_name=APIHelper.SKIP,
                 measurement_type=APIHelper.SKIP,
                 transformation=APIHelper.SKIP,
                 field_name=APIHelper.SKIP,
                 field_type=APIHelper.SKIP,
                 field_aggregation=APIHelper.SKIP,
                 where=APIHelper.SKIP,
                 group_by_interval=APIHelper.SKIP,
                 group_by_fill=APIHelper.SKIP,
                 group_by_tag_key=APIHelper.SKIP,
                 retention_policy=APIHelper.SKIP):
        """Constructor for the Query class"""

        # Initialize members of the class
        if group_name is not APIHelper.SKIP:
            self.group_name = group_name 
        if group_type is not APIHelper.SKIP:
            self.group_type = group_type 
        if device_name is not APIHelper.SKIP:
            self.device_name = device_name 
        if measurement_name is not APIHelper.SKIP:
            self.measurement_name = measurement_name 
        if measurement_type is not APIHelper.SKIP:
            self.measurement_type = measurement_type 
        if transformation is not APIHelper.SKIP:
            self.transformation = transformation 
        if field_name is not APIHelper.SKIP:
            self.field_name = field_name 
        if field_type is not APIHelper.SKIP:
            self.field_type = field_type 
        if field_aggregation is not APIHelper.SKIP:
            self.field_aggregation = field_aggregation 
        if where is not APIHelper.SKIP:
            self.where = where 
        if group_by_interval is not APIHelper.SKIP:
            self.group_by_interval = group_by_interval 
        if group_by_fill is not APIHelper.SKIP:
            self.group_by_fill = group_by_fill 
        if group_by_tag_key is not APIHelper.SKIP:
            self.group_by_tag_key = group_by_tag_key 
        if retention_policy is not APIHelper.SKIP:
            self.retention_policy = retention_policy 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        group_name = dictionary.get("group_name") if dictionary.get("group_name") else APIHelper.SKIP
        group_type = dictionary.get("group_type") if dictionary.get("group_type") else APIHelper.SKIP
        device_name = dictionary.get("device_name") if dictionary.get("device_name") else APIHelper.SKIP
        measurement_name = dictionary.get("measurement_name") if dictionary.get("measurement_name") else APIHelper.SKIP
        measurement_type = dictionary.get("measurement_type") if dictionary.get("measurement_type") else APIHelper.SKIP
        transformation = dictionary.get("transformation") if dictionary.get("transformation") else APIHelper.SKIP
        field_name = dictionary.get("field_name") if dictionary.get("field_name") else APIHelper.SKIP
        field_type = dictionary.get("field_type") if dictionary.get("field_type") else APIHelper.SKIP
        field_aggregation = dictionary.get("field_aggregation") if dictionary.get("field_aggregation") else APIHelper.SKIP
        where = Where2.from_dictionary(dictionary.get('where')) if 'where' in dictionary.keys() else APIHelper.SKIP
        group_by_interval = dictionary.get("group_by_interval") if dictionary.get("group_by_interval") else APIHelper.SKIP
        group_by_fill = dictionary.get("group_by_fill") if dictionary.get("group_by_fill") else APIHelper.SKIP
        group_by_tag_key = dictionary.get("group_by_tag_key") if dictionary.get("group_by_tag_key") else APIHelper.SKIP
        retention_policy = dictionary.get("retention_policy") if dictionary.get("retention_policy") else APIHelper.SKIP
        # Return an object of this model
        return cls(group_name,
                   group_type,
                   device_name,
                   measurement_name,
                   measurement_type,
                   transformation,
                   field_name,
                   field_type,
                   field_aggregation,
                   where,
                   group_by_interval,
                   group_by_fill,
                   group_by_tag_key,
                   retention_policy)
