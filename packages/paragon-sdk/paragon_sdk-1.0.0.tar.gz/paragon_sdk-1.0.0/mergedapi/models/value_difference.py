# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class ValueDifference(object):

    """Implementation of the 'ValueDifference' model.

    Value difference between present and previous value

    Attributes:
        field_name (str): Field name on which delta operation needs to be
            performed
        hold_time (str): How long previous value should be stored. Should
            match the pattern
            [0-9]*(seconds|minutes|hours|days|weeks|years|offset). Default is
            1 day
        multiplication_factor (str): Value to be multiplied with calculated
            time. Default is 1.0. Should be IEEE-754 64-bit floating-point
            numbers
        extra_keys (List[str]): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "field_name": 'field-name',
        "hold_time": 'hold-time',
        "multiplication_factor": 'multiplication-factor',
        "extra_keys": 'extra-keys'
    }

    _optionals = [
        'hold_time',
        'multiplication_factor',
        'extra_keys',
    ]

    def __init__(self,
                 field_name=None,
                 hold_time=APIHelper.SKIP,
                 multiplication_factor=APIHelper.SKIP,
                 extra_keys=APIHelper.SKIP):
        """Constructor for the ValueDifference class"""

        # Initialize members of the class
        self.field_name = field_name 
        if hold_time is not APIHelper.SKIP:
            self.hold_time = hold_time 
        if multiplication_factor is not APIHelper.SKIP:
            self.multiplication_factor = multiplication_factor 
        if extra_keys is not APIHelper.SKIP:
            self.extra_keys = extra_keys 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        field_name = dictionary.get("field-name") if dictionary.get("field-name") else None
        hold_time = dictionary.get("hold-time") if dictionary.get("hold-time") else APIHelper.SKIP
        multiplication_factor = dictionary.get("multiplication-factor") if dictionary.get("multiplication-factor") else APIHelper.SKIP
        extra_keys = dictionary.get("extra-keys") if dictionary.get("extra-keys") else APIHelper.SKIP
        # Return an object of this model
        return cls(field_name,
                   hold_time,
                   multiplication_factor,
                   extra_keys)
