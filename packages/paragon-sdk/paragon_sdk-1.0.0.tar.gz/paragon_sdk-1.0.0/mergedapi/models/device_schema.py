# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.authentication_1 import Authentication1
from mergedapi.models.flow_3 import Flow3
from mergedapi.models.i_agent_2 import IAgent2
from mergedapi.models.open_config_3 import OpenConfig3
from mergedapi.models.outbound_ssh_2 import OutboundSsh2
from mergedapi.models.server_monitoring_2 import ServerMonitoring2
from mergedapi.models.snmp_3 import Snmp3
from mergedapi.models.syslog_4 import Syslog4
from mergedapi.models.variable_11 import Variable11
from mergedapi.models.vendor import Vendor


class DeviceSchema(object):

    """Implementation of the 'device_schema' model.

    TODO: type model description here.

    Attributes:
        authentication (Authentication1): Common authentication parameters
        description (str): Description about the device
        name (str): Name for the device. Should be of pattern
            ^\*|[a-zA-Z0-9]([a-zA-Z0-9_-]*\.*)*$
        device_id (str): Identifier for the device. Should be of pattern
            ^\*|[a-zA-Z0-9]([a-zA-Z0-9_-]*\.*)*$
        uuid (uuid|str): EMS: uuid of the EMS-advertised device
        flow (Flow3): TODO: type description here.
        host (str): Name or IP of the device
        i_agent (IAgent2): TODO: type description here.
        open_config (OpenConfig3): TODO: type description here.
        server_monitoring (ServerMonitoring2): TODO: type description here.
        outbound_ssh (OutboundSsh2): Disable Outbound-SSH  service for a
            device
        owner (str): Owner of the device: this is a read-only attribute and
            should not be added to the request payload, value if added will be
            discarded.
        snmp (Snmp3): SNMP ingest related configuration for a device
        syslog (Syslog4): TODO: type description here.
        tagging_profile (List[str]): TODO: type description here.
        timezone (str): Timezone in the format +/-hh:mm, Example: -08:00
        system_id (str): ID which is sent in the JTI UDP messages
        use_ingest_receive_time (List[object]): Enable using ingest receive
            time in formulas like elapsed-time and rate-of-change
        variable (List[Variable11]): Playbook variable configuration
        vendor (Vendor): Vendor specific configuration
        marked_for_delete (bool): Mark device for deletion

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "device_id": 'device-id',
        "host": 'host',
        "authentication": 'authentication',
        "description": 'description',
        "name": 'name',
        "uuid": 'uuid',
        "flow": 'flow',
        "i_agent": 'iAgent',
        "open_config": 'open-config',
        "server_monitoring": 'server-monitoring',
        "outbound_ssh": 'outbound-ssh',
        "owner": 'owner',
        "snmp": 'snmp',
        "syslog": 'syslog',
        "tagging_profile": 'tagging-profile',
        "timezone": 'timezone',
        "system_id": 'system-id',
        "use_ingest_receive_time": 'use-ingest-receive-time',
        "variable": 'variable',
        "vendor": 'vendor',
        "marked_for_delete": 'marked-for-delete'
    }

    _optionals = [
        'authentication',
        'description',
        'name',
        'uuid',
        'flow',
        'i_agent',
        'open_config',
        'server_monitoring',
        'outbound_ssh',
        'owner',
        'snmp',
        'syslog',
        'tagging_profile',
        'timezone',
        'system_id',
        'use_ingest_receive_time',
        'variable',
        'vendor',
        'marked_for_delete',
    ]

    def __init__(self,
                 device_id=None,
                 host=None,
                 authentication=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 uuid=APIHelper.SKIP,
                 flow=APIHelper.SKIP,
                 i_agent=APIHelper.SKIP,
                 open_config=APIHelper.SKIP,
                 server_monitoring=APIHelper.SKIP,
                 outbound_ssh=APIHelper.SKIP,
                 owner=APIHelper.SKIP,
                 snmp=APIHelper.SKIP,
                 syslog=APIHelper.SKIP,
                 tagging_profile=APIHelper.SKIP,
                 timezone=APIHelper.SKIP,
                 system_id=APIHelper.SKIP,
                 use_ingest_receive_time=APIHelper.SKIP,
                 variable=APIHelper.SKIP,
                 vendor=APIHelper.SKIP,
                 marked_for_delete=APIHelper.SKIP):
        """Constructor for the DeviceSchema class"""

        # Initialize members of the class
        if authentication is not APIHelper.SKIP:
            self.authentication = authentication 
        if description is not APIHelper.SKIP:
            self.description = description 
        if name is not APIHelper.SKIP:
            self.name = name 
        self.device_id = device_id 
        if uuid is not APIHelper.SKIP:
            self.uuid = uuid 
        if flow is not APIHelper.SKIP:
            self.flow = flow 
        self.host = host 
        if i_agent is not APIHelper.SKIP:
            self.i_agent = i_agent 
        if open_config is not APIHelper.SKIP:
            self.open_config = open_config 
        if server_monitoring is not APIHelper.SKIP:
            self.server_monitoring = server_monitoring 
        if outbound_ssh is not APIHelper.SKIP:
            self.outbound_ssh = outbound_ssh 
        if owner is not APIHelper.SKIP:
            self.owner = owner 
        if snmp is not APIHelper.SKIP:
            self.snmp = snmp 
        if syslog is not APIHelper.SKIP:
            self.syslog = syslog 
        if tagging_profile is not APIHelper.SKIP:
            self.tagging_profile = tagging_profile 
        if timezone is not APIHelper.SKIP:
            self.timezone = timezone 
        if system_id is not APIHelper.SKIP:
            self.system_id = system_id 
        if use_ingest_receive_time is not APIHelper.SKIP:
            self.use_ingest_receive_time = use_ingest_receive_time 
        if variable is not APIHelper.SKIP:
            self.variable = variable 
        if vendor is not APIHelper.SKIP:
            self.vendor = vendor 
        if marked_for_delete is not APIHelper.SKIP:
            self.marked_for_delete = marked_for_delete 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        device_id = dictionary.get("device-id") if dictionary.get("device-id") else None
        host = dictionary.get("host") if dictionary.get("host") else None
        authentication = Authentication1.from_dictionary(dictionary.get('authentication')) if 'authentication' in dictionary.keys() else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        uuid = dictionary.get("uuid") if dictionary.get("uuid") else APIHelper.SKIP
        flow = Flow3.from_dictionary(dictionary.get('flow')) if 'flow' in dictionary.keys() else APIHelper.SKIP
        i_agent = IAgent2.from_dictionary(dictionary.get('iAgent')) if 'iAgent' in dictionary.keys() else APIHelper.SKIP
        open_config = OpenConfig3.from_dictionary(dictionary.get('open-config')) if 'open-config' in dictionary.keys() else APIHelper.SKIP
        server_monitoring = ServerMonitoring2.from_dictionary(dictionary.get('server-monitoring')) if 'server-monitoring' in dictionary.keys() else APIHelper.SKIP
        outbound_ssh = OutboundSsh2.from_dictionary(dictionary.get('outbound-ssh')) if 'outbound-ssh' in dictionary.keys() else APIHelper.SKIP
        owner = dictionary.get("owner") if dictionary.get("owner") else APIHelper.SKIP
        snmp = Snmp3.from_dictionary(dictionary.get('snmp')) if 'snmp' in dictionary.keys() else APIHelper.SKIP
        syslog = Syslog4.from_dictionary(dictionary.get('syslog')) if 'syslog' in dictionary.keys() else APIHelper.SKIP
        tagging_profile = dictionary.get("tagging-profile") if dictionary.get("tagging-profile") else APIHelper.SKIP
        timezone = dictionary.get("timezone") if dictionary.get("timezone") else APIHelper.SKIP
        system_id = dictionary.get("system-id") if dictionary.get("system-id") else APIHelper.SKIP
        use_ingest_receive_time = dictionary.get("use-ingest-receive-time") if dictionary.get("use-ingest-receive-time") else APIHelper.SKIP
        variable = None
        if dictionary.get('variable') is not None:
            variable = [Variable11.from_dictionary(x) for x in dictionary.get('variable')]
        else:
            variable = APIHelper.SKIP
        vendor = Vendor.from_dictionary(dictionary.get('vendor')) if 'vendor' in dictionary.keys() else APIHelper.SKIP
        marked_for_delete = dictionary.get("marked-for-delete") if "marked-for-delete" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(device_id,
                   host,
                   authentication,
                   description,
                   name,
                   uuid,
                   flow,
                   i_agent,
                   open_config,
                   server_monitoring,
                   outbound_ssh,
                   owner,
                   snmp,
                   syslog,
                   tagging_profile,
                   timezone,
                   system_id,
                   use_ingest_receive_time,
                   variable,
                   vendor,
                   marked_for_delete)
