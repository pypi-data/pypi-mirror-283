# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.variable_value import VariableValue


class Variable1(object):

    """Implementation of the 'Variable1' model.

    TODO: type model description here.

    Attributes:
        instance_id (str): Unique ID of the variable instance. This should be
            unique per playbook and rule combination. Should be of pattern
            [a-zA-Z0-9][a-zA-Z0-9_-]*
        playbook (str): Name of the playbook in which the variable instance
            needs to be used
        rule (str): Name of the rule. This must be of the format
            <topic-name>/<rule-name>
        running_state (RunningStateEnum): Current running state of the
            playbook instance
        variable_value (List[VariableValue]): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "instance_id": 'instance-id',
        "playbook": 'playbook',
        "rule": 'rule',
        "running_state": 'running-state',
        "variable_value": 'variable-value'
    }

    _optionals = [
        'running_state',
        'variable_value',
    ]

    def __init__(self,
                 instance_id=None,
                 playbook=None,
                 rule=None,
                 running_state=APIHelper.SKIP,
                 variable_value=APIHelper.SKIP):
        """Constructor for the Variable1 class"""

        # Initialize members of the class
        self.instance_id = instance_id 
        self.playbook = playbook 
        self.rule = rule 
        if running_state is not APIHelper.SKIP:
            self.running_state = running_state 
        if variable_value is not APIHelper.SKIP:
            self.variable_value = variable_value 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        instance_id = dictionary.get("instance-id") if dictionary.get("instance-id") else None
        playbook = dictionary.get("playbook") if dictionary.get("playbook") else None
        rule = dictionary.get("rule") if dictionary.get("rule") else None
        running_state = dictionary.get("running-state") if dictionary.get("running-state") else APIHelper.SKIP
        variable_value = None
        if dictionary.get('variable-value') is not None:
            variable_value = [VariableValue.from_dictionary(x) for x in dictionary.get('variable-value')]
        else:
            variable_value = APIHelper.SKIP
        # Return an object of this model
        return cls(instance_id,
                   playbook,
                   rule,
                   running_state,
                   variable_value)
