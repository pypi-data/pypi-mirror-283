# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.destination_schema import DestinationSchema
from mergedapi.models.report_schema import ReportSchema


class ReportGenerationSchema(object):

    """Implementation of the 'report-generation_schema' model.

    TODO: type model description here.

    Attributes:
        destination (List[DestinationSchema]): TODO: type description here.
        report (List[ReportSchema]): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "destination": 'destination',
        "report": 'report'
    }

    _optionals = [
        'destination',
        'report',
    ]

    def __init__(self,
                 destination=APIHelper.SKIP,
                 report=APIHelper.SKIP):
        """Constructor for the ReportGenerationSchema class"""

        # Initialize members of the class
        if destination is not APIHelper.SKIP:
            self.destination = destination 
        if report is not APIHelper.SKIP:
            self.report = report 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        destination = None
        if dictionary.get('destination') is not None:
            destination = [DestinationSchema.from_dictionary(x) for x in dictionary.get('destination')]
        else:
            destination = APIHelper.SKIP
        report = None
        if dictionary.get('report') is not None:
            report = [ReportSchema.from_dictionary(x) for x in dictionary.get('report')]
        else:
            report = APIHelper.SKIP
        # Return an object of this model
        return cls(destination,
                   report)
