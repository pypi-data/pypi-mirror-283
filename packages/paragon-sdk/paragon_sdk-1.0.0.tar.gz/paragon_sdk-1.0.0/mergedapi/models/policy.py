# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.term_2 import Term2


class Policy(object):

    """Implementation of the 'Policy' model.

    TODO: type model description here.

    Attributes:
        description (str): Description about policy
        name (str): Policy name. Should be of pattern [a-zA-Z][a-zA-Z0-9_-]*
        rules (List[str]): TODO: type description here.
        term (List[Term2]): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "rules": 'rules',
        "term": 'term',
        "description": 'description'
    }

    _optionals = [
        'description',
    ]

    def __init__(self,
                 name=None,
                 rules=None,
                 term=None,
                 description=APIHelper.SKIP):
        """Constructor for the Policy class"""

        # Initialize members of the class
        if description is not APIHelper.SKIP:
            self.description = description 
        self.name = name 
        self.rules = rules 
        self.term = term 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else None
        rules = dictionary.get("rules") if dictionary.get("rules") else None
        term = None
        if dictionary.get('term') is not None:
            term = [Term2.from_dictionary(x) for x in dictionary.get('term')]
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   rules,
                   term,
                   description)
