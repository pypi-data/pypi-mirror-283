# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.argument import Argument


class UserDefinedFunction1(object):

    """Implementation of the 'UserDefinedFunction1' model.

    TODO: type model description here.

    Attributes:
        all (List[object]): With this flag, result is set to True only if all
            the data matches the given condition
        any (List[object]): With this flag, result is set to True if any one
            of the data matches the condition
        latest (List[object]): With this flag, result is set to True if the
            latest data matches the condition
        argument (List[Argument]): TODO: type description here.
        function_name (str): Function name
        time_range (str): How much back in time should we look for data.
            Specify positive integer followed by s/m/h/d/w/y/o representing
            seconds/minutes/hours/days/weeks/years/offset. Eg: 2s

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "function_name": 'function-name',
        "all": 'all',
        "any": 'any',
        "latest": 'latest',
        "argument": 'argument',
        "time_range": 'time-range'
    }

    _optionals = [
        'all',
        'any',
        'latest',
        'argument',
        'time_range',
    ]

    def __init__(self,
                 function_name=None,
                 all=APIHelper.SKIP,
                 any=APIHelper.SKIP,
                 latest=APIHelper.SKIP,
                 argument=APIHelper.SKIP,
                 time_range=APIHelper.SKIP):
        """Constructor for the UserDefinedFunction1 class"""

        # Initialize members of the class
        if all is not APIHelper.SKIP:
            self.all = all 
        if any is not APIHelper.SKIP:
            self.any = any 
        if latest is not APIHelper.SKIP:
            self.latest = latest 
        if argument is not APIHelper.SKIP:
            self.argument = argument 
        self.function_name = function_name 
        if time_range is not APIHelper.SKIP:
            self.time_range = time_range 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        function_name = dictionary.get("function-name") if dictionary.get("function-name") else None
        all = dictionary.get("all") if dictionary.get("all") else APIHelper.SKIP
        any = dictionary.get("any") if dictionary.get("any") else APIHelper.SKIP
        latest = dictionary.get("latest") if dictionary.get("latest") else APIHelper.SKIP
        argument = None
        if dictionary.get('argument') is not None:
            argument = [Argument.from_dictionary(x) for x in dictionary.get('argument')]
        else:
            argument = APIHelper.SKIP
        time_range = dictionary.get("time-range") if dictionary.get("time-range") else APIHelper.SKIP
        # Return an object of this model
        return cls(function_name,
                   all,
                   any,
                   latest,
                   argument,
                   time_range)
