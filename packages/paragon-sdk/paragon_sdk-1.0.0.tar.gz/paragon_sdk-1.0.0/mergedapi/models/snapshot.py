# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.device_1 import Device1
from mergedapi.models.target_2 import Target2


class Snapshot(object):

    """Implementation of the 'Snapshot' model.

    TODO: type model description here.

    Attributes:
        id (str): System-defined unique identifier of the snapshot. For a
            device target, this will be the same as the friendly name of the
            device.
        target (Target2): TODO: type description here.
        name (str): System-defined name of the snapshat.
        description (str): User-defined description of the snapshot.
        start_time (datetime): The time at which the data collection for the
            snapshot started.
        end_time (datetime): The time at which the snapshot was completed.
        status (SnapshotStatusEnum): TODO: type description here.
        error (str): When status is Error, holds details of the error.
        labels (Dict[str, str]): Holds any labels associated with the
            snapshot.
        device (Device1): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "target": 'target',
        "name": 'name',
        "description": 'description',
        "start_time": 'startTime',
        "end_time": 'endTime',
        "status": 'status',
        "error": 'error',
        "labels": 'labels',
        "device": 'device'
    }

    _optionals = [
        'id',
        'target',
        'name',
        'description',
        'start_time',
        'end_time',
        'status',
        'error',
        'labels',
        'device',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 target=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 start_time=APIHelper.SKIP,
                 end_time=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 error=APIHelper.SKIP,
                 labels=APIHelper.SKIP,
                 device=APIHelper.SKIP):
        """Constructor for the Snapshot class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if target is not APIHelper.SKIP:
            self.target = target 
        if name is not APIHelper.SKIP:
            self.name = name 
        if description is not APIHelper.SKIP:
            self.description = description 
        if start_time is not APIHelper.SKIP:
            self.start_time = APIHelper.apply_datetime_converter(start_time, APIHelper.RFC3339DateTime) if start_time else None 
        if end_time is not APIHelper.SKIP:
            self.end_time = APIHelper.apply_datetime_converter(end_time, APIHelper.RFC3339DateTime) if end_time else None 
        if status is not APIHelper.SKIP:
            self.status = status 
        if error is not APIHelper.SKIP:
            self.error = error 
        if labels is not APIHelper.SKIP:
            self.labels = labels 
        if device is not APIHelper.SKIP:
            self.device = device 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        target = Target2.from_dictionary(dictionary.get('target')) if 'target' in dictionary.keys() else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        start_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("startTime")).datetime if dictionary.get("startTime") else APIHelper.SKIP
        end_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("endTime")).datetime if dictionary.get("endTime") else APIHelper.SKIP
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        error = dictionary.get("error") if dictionary.get("error") else APIHelper.SKIP
        labels = dictionary.get("labels") if dictionary.get("labels") else APIHelper.SKIP
        device = Device1.from_dictionary(dictionary.get('device')) if 'device' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   target,
                   name,
                   description,
                   start_time,
                   end_time,
                   status,
                   error,
                   labels,
                   device)
