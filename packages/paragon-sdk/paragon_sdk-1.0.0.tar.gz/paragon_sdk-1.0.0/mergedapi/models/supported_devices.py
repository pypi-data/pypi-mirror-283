# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.juniper_1 import Juniper1
from mergedapi.models.other_vendor_1 import OtherVendor1


class SupportedDevices(object):

    """Implementation of the 'SupportedDevices' model.

    Devices in which the sensors used by the rule are supported

    Attributes:
        juniper (Juniper1): Supported juniper devices
        other_vendor (List[OtherVendor1]): Supported other-vendor devices
        sensors (List[str]): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "juniper": 'juniper',
        "other_vendor": 'other-vendor',
        "sensors": 'sensors'
    }

    _optionals = [
        'juniper',
        'other_vendor',
        'sensors',
    ]

    def __init__(self,
                 juniper=APIHelper.SKIP,
                 other_vendor=APIHelper.SKIP,
                 sensors=APIHelper.SKIP):
        """Constructor for the SupportedDevices class"""

        # Initialize members of the class
        if juniper is not APIHelper.SKIP:
            self.juniper = juniper 
        if other_vendor is not APIHelper.SKIP:
            self.other_vendor = other_vendor 
        if sensors is not APIHelper.SKIP:
            self.sensors = sensors 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        juniper = Juniper1.from_dictionary(dictionary.get('juniper')) if 'juniper' in dictionary.keys() else APIHelper.SKIP
        other_vendor = None
        if dictionary.get('other-vendor') is not None:
            other_vendor = [OtherVendor1.from_dictionary(x) for x in dictionary.get('other-vendor')]
        else:
            other_vendor = APIHelper.SKIP
        sensors = dictionary.get("sensors") if dictionary.get("sensors") else APIHelper.SKIP
        # Return an object of this model
        return cls(juniper,
                   other_vendor,
                   sensors)
