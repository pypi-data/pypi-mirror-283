# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.resource_schema import ResourceSchema
from mergedapi.models.rule_schema import RuleSchema


class TopicSchema(object):

    """Implementation of the 'topic_schema' model.

    TODO: type model description here.

    Attributes:
        description (str): Description about this topic
        resource (List[ResourceSchema]): TODO: type description here.
        rule (List[RuleSchema]): TODO: type description here.
        sub_topics (List[str]): TODO: type description here.
        synopsis (str): Short description about this topic
        topic_name (str): Name of the topic. Should be of pattern
            [a-z][a-z-]*(\.{1}[a-z0-9-]+)*

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "topic_name": 'topic-name',
        "description": 'description',
        "resource": 'resource',
        "rule": 'rule',
        "sub_topics": 'sub-topics',
        "synopsis": 'synopsis'
    }

    _optionals = [
        'description',
        'resource',
        'rule',
        'sub_topics',
        'synopsis',
    ]

    def __init__(self,
                 topic_name=None,
                 description=APIHelper.SKIP,
                 resource=APIHelper.SKIP,
                 rule=APIHelper.SKIP,
                 sub_topics=APIHelper.SKIP,
                 synopsis=APIHelper.SKIP):
        """Constructor for the TopicSchema class"""

        # Initialize members of the class
        if description is not APIHelper.SKIP:
            self.description = description 
        if resource is not APIHelper.SKIP:
            self.resource = resource 
        if rule is not APIHelper.SKIP:
            self.rule = rule 
        if sub_topics is not APIHelper.SKIP:
            self.sub_topics = sub_topics 
        if synopsis is not APIHelper.SKIP:
            self.synopsis = synopsis 
        self.topic_name = topic_name 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        topic_name = dictionary.get("topic-name") if dictionary.get("topic-name") else None
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        resource = None
        if dictionary.get('resource') is not None:
            resource = [ResourceSchema.from_dictionary(x) for x in dictionary.get('resource')]
        else:
            resource = APIHelper.SKIP
        rule = None
        if dictionary.get('rule') is not None:
            rule = [RuleSchema.from_dictionary(x) for x in dictionary.get('rule')]
        else:
            rule = APIHelper.SKIP
        sub_topics = dictionary.get("sub-topics") if dictionary.get("sub-topics") else APIHelper.SKIP
        synopsis = dictionary.get("synopsis") if dictionary.get("synopsis") else APIHelper.SKIP
        # Return an object of this model
        return cls(topic_name,
                   description,
                   resource,
                   rule,
                   sub_topics,
                   synopsis)
