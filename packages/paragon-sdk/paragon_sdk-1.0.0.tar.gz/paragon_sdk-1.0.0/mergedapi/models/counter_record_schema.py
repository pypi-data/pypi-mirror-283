# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.models.field import Field


class CounterRecordSchema(object):

    """Implementation of the 'counter-record_schema' model.

    TODO: type model description here.

    Attributes:
        enterprise (int): Enterprise to which record belongs
        field (List[Field]): List of fields
        format (int): Format of record
        record_name (str): Name of record

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "enterprise": 'enterprise',
        "field": 'field',
        "format": 'format',
        "record_name": 'record-name'
    }

    def __init__(self,
                 enterprise=None,
                 field=None,
                 format=None,
                 record_name=None):
        """Constructor for the CounterRecordSchema class"""

        # Initialize members of the class
        self.enterprise = enterprise 
        self.field = field 
        self.format = format 
        self.record_name = record_name 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        enterprise = dictionary.get("enterprise") if dictionary.get("enterprise") else None
        field = None
        if dictionary.get('field') is not None:
            field = [Field.from_dictionary(x) for x in dictionary.get('field')]
        format = dictionary.get("format") if dictionary.get("format") else None
        record_name = dictionary.get("record-name") if dictionary.get("record-name") else None
        # Return an object of this model
        return cls(enterprise,
                   field,
                   format,
                   record_name)
