# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.v_21 import V21
from mergedapi.models.v_32 import V32


class Snmp3(object):

    """Implementation of the 'Snmp3' model.

    SNMP ingest related configuration for a device

    Attributes:
        port (int): Port on which SNMP requests need to be sent. Port 161 is
            used if not configured.
        v_2 (V21): SNMP version 2 configuration
        v_3 (V32): SNMP version 3 configuration

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "port": 'port',
        "v_2": 'v2',
        "v_3": 'v3'
    }

    _optionals = [
        'port',
        'v_2',
        'v_3',
    ]

    def __init__(self,
                 port=APIHelper.SKIP,
                 v_2=APIHelper.SKIP,
                 v_3=APIHelper.SKIP):
        """Constructor for the Snmp3 class"""

        # Initialize members of the class
        if port is not APIHelper.SKIP:
            self.port = port 
        if v_2 is not APIHelper.SKIP:
            self.v_2 = v_2 
        if v_3 is not APIHelper.SKIP:
            self.v_3 = v_3 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        port = dictionary.get("port") if dictionary.get("port") else APIHelper.SKIP
        v_2 = V21.from_dictionary(dictionary.get('v2')) if 'v2' in dictionary.keys() else APIHelper.SKIP
        v_3 = V32.from_dictionary(dictionary.get('v3')) if 'v3' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(port,
                   v_2,
                   v_3)
