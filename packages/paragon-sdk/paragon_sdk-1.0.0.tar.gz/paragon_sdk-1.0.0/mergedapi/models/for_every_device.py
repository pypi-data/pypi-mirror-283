# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class ForEveryDevice(object):

    """Implementation of the 'ForEveryDevice' model.

    Loop over all devices

    Attributes:
        across_all_device_groups (bool): evaluate for all device groups
        in_groups (List[str]): TODO: type description here.
        label_as (str): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "label_as": 'label-as',
        "across_all_device_groups": 'across-all-device-groups',
        "in_groups": 'in-groups'
    }

    _optionals = [
        'across_all_device_groups',
        'in_groups',
    ]

    def __init__(self,
                 label_as=None,
                 across_all_device_groups=APIHelper.SKIP,
                 in_groups=APIHelper.SKIP):
        """Constructor for the ForEveryDevice class"""

        # Initialize members of the class
        if across_all_device_groups is not APIHelper.SKIP:
            self.across_all_device_groups = across_all_device_groups 
        if in_groups is not APIHelper.SKIP:
            self.in_groups = in_groups 
        self.label_as = label_as 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        label_as = dictionary.get("label-as") if dictionary.get("label-as") else None
        across_all_device_groups = dictionary.get("across-all-device-groups") if "across-all-device-groups" in dictionary.keys() else APIHelper.SKIP
        in_groups = dictionary.get("in-groups") if dictionary.get("in-groups") else APIHelper.SKIP
        # Return an object of this model
        return cls(label_as,
                   across_all_device_groups,
                   in_groups)
