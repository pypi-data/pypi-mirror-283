# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class BomLicense(object):

    """Implementation of the 'bomLicense' model.

    License defines basic metadata for a license.

    Attributes:
        id (str): The SPDX-ID of the license.
        title (str): TODO: type description here.
        description (str): TODO: type description here.
        permissions (List[BomPermissionEnum]): These define permissions,
            conditions and limitations of the licence, as described in
            https://choosealicense.com/appendix/. These may not be defined if
            the license is not supported by choosealicense.com.
        conditions (List[BomConditionEnum]): TODO: type description here.
        limitations (List[BomLimitationEnum]): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "title": 'title',
        "description": 'description',
        "permissions": 'permissions',
        "conditions": 'conditions',
        "limitations": 'limitations'
    }

    _optionals = [
        'id',
        'title',
        'description',
        'permissions',
        'conditions',
        'limitations',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 title=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 permissions=APIHelper.SKIP,
                 conditions=APIHelper.SKIP,
                 limitations=APIHelper.SKIP):
        """Constructor for the BomLicense class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if title is not APIHelper.SKIP:
            self.title = title 
        if description is not APIHelper.SKIP:
            self.description = description 
        if permissions is not APIHelper.SKIP:
            self.permissions = permissions 
        if conditions is not APIHelper.SKIP:
            self.conditions = conditions 
        if limitations is not APIHelper.SKIP:
            self.limitations = limitations 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        title = dictionary.get("title") if dictionary.get("title") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        permissions = dictionary.get("permissions") if dictionary.get("permissions") else APIHelper.SKIP
        conditions = dictionary.get("conditions") if dictionary.get("conditions") else APIHelper.SKIP
        limitations = dictionary.get("limitations") if dictionary.get("limitations") else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   title,
                   description,
                   permissions,
                   conditions,
                   limitations)
