# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.platform import Platform
from mergedapi.models.release_1 import Release1


class Product1(object):

    """Implementation of the 'Product1' model.

    TODO: type model description here.

    Attributes:
        platforms (List[Platform]): Platform information
        product_name (str): Product name, Ex: MX, SRX. Should be of pattern
            [a-zA-Z][a-zA-Z0-9_-]*
        releases (List[Release1]): Release information for the products
        sensors (List[str]): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "product_name": 'product-name',
        "platforms": 'platforms',
        "releases": 'releases',
        "sensors": 'sensors'
    }

    _optionals = [
        'platforms',
        'releases',
        'sensors',
    ]

    def __init__(self,
                 product_name=None,
                 platforms=APIHelper.SKIP,
                 releases=APIHelper.SKIP,
                 sensors=APIHelper.SKIP):
        """Constructor for the Product1 class"""

        # Initialize members of the class
        if platforms is not APIHelper.SKIP:
            self.platforms = platforms 
        self.product_name = product_name 
        if releases is not APIHelper.SKIP:
            self.releases = releases 
        if sensors is not APIHelper.SKIP:
            self.sensors = sensors 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        product_name = dictionary.get("product-name") if dictionary.get("product-name") else None
        platforms = None
        if dictionary.get('platforms') is not None:
            platforms = [Platform.from_dictionary(x) for x in dictionary.get('platforms')]
        else:
            platforms = APIHelper.SKIP
        releases = None
        if dictionary.get('releases') is not None:
            releases = [Release1.from_dictionary(x) for x in dictionary.get('releases')]
        else:
            releases = APIHelper.SKIP
        sensors = dictionary.get("sensors") if dictionary.get("sensors") else APIHelper.SKIP
        # Return an object of this model
        return cls(product_name,
                   platforms,
                   releases,
                   sensors)
