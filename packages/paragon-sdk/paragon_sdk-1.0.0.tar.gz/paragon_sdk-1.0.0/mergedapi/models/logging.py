# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.byoi import Byoi
from mergedapi.models.flow_1 import Flow1
from mergedapi.models.i_agent_1 import IAgent1
from mergedapi.models.ifa import Ifa
from mergedapi.models.ml_model_builder import MLModelBuilder
from mergedapi.models.native_gpb_2 import NativeGpb2
from mergedapi.models.non_sensor_rules import NonSensorRules
from mergedapi.models.open_config_1 import OpenConfig1
from mergedapi.models.reports_generation import ReportsGeneration
from mergedapi.models.resource_discovery import ResourceDiscovery
from mergedapi.models.server_monitoring_1 import ServerMonitoring1
from mergedapi.models.sflow_1 import Sflow1
from mergedapi.models.snmp_1 import Snmp1
from mergedapi.models.snmp_notification_1 import SnmpNotification1
from mergedapi.models.syslog_2 import Syslog2
from mergedapi.models.trigger_evaluation import TriggerEvaluation


class Logging(object):

    """Implementation of the 'Logging' model.

    Logging configuration

    Attributes:
        i_agent (IAgent1): Service responsible for iAgent sensor data
            collection
        log_level (LogLevel1Enum): Global log level
        native_gpb (NativeGpb2): Service responsible for native-gpb-sensor
            data collection
        non_sensor_rules (NonSensorRules): Service responsible for non-sensor
            and network-rules
        open_config (OpenConfig1): Service responsible for openconfig sensor
            data collection
        server_monitoring (ServerMonitoring1): Service responsible for
            server-monitoring sensor data collection
        reports_generation (ReportsGeneration): Service responsible for
            generating reports
        snmp (Snmp1): Service responsible for SNMP data collection
        trigger_evaluation (TriggerEvaluation): Service responsible for
            trigger-evaluation
        ml_model_builder (MLModelBuilder): Service responsible for building
            the model for Machine Learning
        resource_discovery (ResourceDiscovery): Service responsible for
            discovering resources
        flow (Flow1): Service responsible for flow data collection
        sflow (Sflow1): Service responsible for sflow data collection
        ifa (Ifa): Service responsible for Inband Flow Analyzer data
            collection
        byoi (Byoi): Service responsible for the custom BYOI plugins
        snmp_notification (SnmpNotification1): Service responsible for SNMP
            Notification data collection
        syslog (Syslog2): Service responsible for Syslog data collection

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "i_agent": 'iAgent',
        "log_level": 'log-level',
        "native_gpb": 'native-gpb',
        "non_sensor_rules": 'non-sensor-rules',
        "open_config": 'open-config',
        "server_monitoring": 'server-monitoring',
        "reports_generation": 'reports-generation',
        "snmp": 'snmp',
        "trigger_evaluation": 'trigger-evaluation',
        "ml_model_builder": 'ML-model-builder',
        "resource_discovery": 'resource-discovery',
        "flow": 'flow',
        "sflow": 'sflow',
        "ifa": 'ifa',
        "byoi": 'byoi',
        "snmp_notification": 'snmp-notification',
        "syslog": 'syslog'
    }

    _optionals = [
        'i_agent',
        'log_level',
        'native_gpb',
        'non_sensor_rules',
        'open_config',
        'server_monitoring',
        'reports_generation',
        'snmp',
        'trigger_evaluation',
        'ml_model_builder',
        'resource_discovery',
        'flow',
        'sflow',
        'ifa',
        'byoi',
        'snmp_notification',
        'syslog',
    ]

    def __init__(self,
                 i_agent=APIHelper.SKIP,
                 log_level=APIHelper.SKIP,
                 native_gpb=APIHelper.SKIP,
                 non_sensor_rules=APIHelper.SKIP,
                 open_config=APIHelper.SKIP,
                 server_monitoring=APIHelper.SKIP,
                 reports_generation=APIHelper.SKIP,
                 snmp=APIHelper.SKIP,
                 trigger_evaluation=APIHelper.SKIP,
                 ml_model_builder=APIHelper.SKIP,
                 resource_discovery=APIHelper.SKIP,
                 flow=APIHelper.SKIP,
                 sflow=APIHelper.SKIP,
                 ifa=APIHelper.SKIP,
                 byoi=APIHelper.SKIP,
                 snmp_notification=APIHelper.SKIP,
                 syslog=APIHelper.SKIP):
        """Constructor for the Logging class"""

        # Initialize members of the class
        if i_agent is not APIHelper.SKIP:
            self.i_agent = i_agent 
        if log_level is not APIHelper.SKIP:
            self.log_level = log_level 
        if native_gpb is not APIHelper.SKIP:
            self.native_gpb = native_gpb 
        if non_sensor_rules is not APIHelper.SKIP:
            self.non_sensor_rules = non_sensor_rules 
        if open_config is not APIHelper.SKIP:
            self.open_config = open_config 
        if server_monitoring is not APIHelper.SKIP:
            self.server_monitoring = server_monitoring 
        if reports_generation is not APIHelper.SKIP:
            self.reports_generation = reports_generation 
        if snmp is not APIHelper.SKIP:
            self.snmp = snmp 
        if trigger_evaluation is not APIHelper.SKIP:
            self.trigger_evaluation = trigger_evaluation 
        if ml_model_builder is not APIHelper.SKIP:
            self.ml_model_builder = ml_model_builder 
        if resource_discovery is not APIHelper.SKIP:
            self.resource_discovery = resource_discovery 
        if flow is not APIHelper.SKIP:
            self.flow = flow 
        if sflow is not APIHelper.SKIP:
            self.sflow = sflow 
        if ifa is not APIHelper.SKIP:
            self.ifa = ifa 
        if byoi is not APIHelper.SKIP:
            self.byoi = byoi 
        if snmp_notification is not APIHelper.SKIP:
            self.snmp_notification = snmp_notification 
        if syslog is not APIHelper.SKIP:
            self.syslog = syslog 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        i_agent = IAgent1.from_dictionary(dictionary.get('iAgent')) if 'iAgent' in dictionary.keys() else APIHelper.SKIP
        log_level = dictionary.get("log-level") if dictionary.get("log-level") else APIHelper.SKIP
        native_gpb = NativeGpb2.from_dictionary(dictionary.get('native-gpb')) if 'native-gpb' in dictionary.keys() else APIHelper.SKIP
        non_sensor_rules = NonSensorRules.from_dictionary(dictionary.get('non-sensor-rules')) if 'non-sensor-rules' in dictionary.keys() else APIHelper.SKIP
        open_config = OpenConfig1.from_dictionary(dictionary.get('open-config')) if 'open-config' in dictionary.keys() else APIHelper.SKIP
        server_monitoring = ServerMonitoring1.from_dictionary(dictionary.get('server-monitoring')) if 'server-monitoring' in dictionary.keys() else APIHelper.SKIP
        reports_generation = ReportsGeneration.from_dictionary(dictionary.get('reports-generation')) if 'reports-generation' in dictionary.keys() else APIHelper.SKIP
        snmp = Snmp1.from_dictionary(dictionary.get('snmp')) if 'snmp' in dictionary.keys() else APIHelper.SKIP
        trigger_evaluation = TriggerEvaluation.from_dictionary(dictionary.get('trigger-evaluation')) if 'trigger-evaluation' in dictionary.keys() else APIHelper.SKIP
        ml_model_builder = MLModelBuilder.from_dictionary(dictionary.get('ML-model-builder')) if 'ML-model-builder' in dictionary.keys() else APIHelper.SKIP
        resource_discovery = ResourceDiscovery.from_dictionary(dictionary.get('resource-discovery')) if 'resource-discovery' in dictionary.keys() else APIHelper.SKIP
        flow = Flow1.from_dictionary(dictionary.get('flow')) if 'flow' in dictionary.keys() else APIHelper.SKIP
        sflow = Sflow1.from_dictionary(dictionary.get('sflow')) if 'sflow' in dictionary.keys() else APIHelper.SKIP
        ifa = Ifa.from_dictionary(dictionary.get('ifa')) if 'ifa' in dictionary.keys() else APIHelper.SKIP
        byoi = Byoi.from_dictionary(dictionary.get('byoi')) if 'byoi' in dictionary.keys() else APIHelper.SKIP
        snmp_notification = SnmpNotification1.from_dictionary(dictionary.get('snmp-notification')) if 'snmp-notification' in dictionary.keys() else APIHelper.SKIP
        syslog = Syslog2.from_dictionary(dictionary.get('syslog')) if 'syslog' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(i_agent,
                   log_level,
                   native_gpb,
                   non_sensor_rules,
                   open_config,
                   server_monitoring,
                   reports_generation,
                   snmp,
                   trigger_evaluation,
                   ml_model_builder,
                   resource_discovery,
                   flow,
                   sflow,
                   ifa,
                   byoi,
                   snmp_notification,
                   syslog)
