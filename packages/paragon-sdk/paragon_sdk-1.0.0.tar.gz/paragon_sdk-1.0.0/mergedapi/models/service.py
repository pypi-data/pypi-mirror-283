# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class Service(object):

    """Implementation of the 'Service' model.

    TODO: type model description here.

    Attributes:
        daemons (List[DaemonEnum]): TODO: type description here.
        log_level (LogLevelEnum): Set the logging level
        name (str): Name of the service

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "log_level": 'log-level',
        "name": 'name',
        "daemons": 'daemons'
    }

    _optionals = [
        'daemons',
    ]

    def __init__(self,
                 log_level=None,
                 name=None,
                 daemons=APIHelper.SKIP):
        """Constructor for the Service class"""

        # Initialize members of the class
        if daemons is not APIHelper.SKIP:
            self.daemons = daemons 
        self.log_level = log_level 
        self.name = name 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        log_level = dictionary.get("log-level") if dictionary.get("log-level") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        daemons = dictionary.get("daemons") if dictionary.get("daemons") else APIHelper.SKIP
        # Return an object of this model
        return cls(log_level,
                   name,
                   daemons)
