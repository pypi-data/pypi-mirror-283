# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Path1(object):

    """Implementation of the 'Path1' model.

    TODO: type model description here.

    Attributes:
        aggregation_functions (List[AggregationFunctionEnum]): TODO: type
            description here.
        name (str): Sensor field path for which summarization should be
            changed. Apart from JTI OC sensor path, '<sensor-name>:' should be
            prepended to the sensor path

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "aggregation_functions": 'aggregation-functions',
        "name": 'name'
    }

    def __init__(self,
                 aggregation_functions=None,
                 name=None):
        """Constructor for the Path1 class"""

        # Initialize members of the class
        self.aggregation_functions = aggregation_functions 
        self.name = name 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        aggregation_functions = dictionary.get("aggregation-functions") if dictionary.get("aggregation-functions") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        # Return an object of this model
        return cls(aggregation_functions,
                   name)
