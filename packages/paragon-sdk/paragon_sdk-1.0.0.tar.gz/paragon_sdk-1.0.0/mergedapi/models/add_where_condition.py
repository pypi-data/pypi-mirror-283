# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.key_or_field import KeyOrField
from mergedapi.models.key_or_field_value import KeyOrFieldValue
from mergedapi.models.operator import Operator


class AddWhereCondition(object):

    """Implementation of the 'AddWhereCondition' model.

    Where condition to filter

    Attributes:
        key_or_field (KeyOrField): Configured value is field/key type in
            influx
        key_or_field_value (KeyOrFieldValue): Key or Field value for the where
            condition
        operator (Operator): operator for where condition

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "key_or_field": 'keyOrField',
        "key_or_field_value": 'keyOrFieldValue',
        "operator": 'operator'
    }

    _optionals = [
        'key_or_field',
        'key_or_field_value',
        'operator',
    ]

    def __init__(self,
                 key_or_field=APIHelper.SKIP,
                 key_or_field_value=APIHelper.SKIP,
                 operator=APIHelper.SKIP):
        """Constructor for the AddWhereCondition class"""

        # Initialize members of the class
        if key_or_field is not APIHelper.SKIP:
            self.key_or_field = key_or_field 
        if key_or_field_value is not APIHelper.SKIP:
            self.key_or_field_value = key_or_field_value 
        if operator is not APIHelper.SKIP:
            self.operator = operator 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        key_or_field = KeyOrField.from_dictionary(dictionary.get('keyOrField')) if 'keyOrField' in dictionary.keys() else APIHelper.SKIP
        key_or_field_value = KeyOrFieldValue.from_dictionary(dictionary.get('keyOrFieldValue')) if 'keyOrFieldValue' in dictionary.keys() else APIHelper.SKIP
        operator = Operator.from_dictionary(dictionary.get('operator')) if 'operator' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(key_or_field,
                   key_or_field_value,
                   operator)
