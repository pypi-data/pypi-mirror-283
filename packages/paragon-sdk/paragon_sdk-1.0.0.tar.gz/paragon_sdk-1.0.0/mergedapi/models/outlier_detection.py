# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.algorithm_2 import Algorithm2


class OutlierDetection(object):

    """Implementation of the 'OutlierDetection' model.

    Apply outlier detection.

    Attributes:
        algorithm (Algorithm2): TODO: type description here.
        dataset (str): Variable containing the list of XPATHs to the data

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "dataset": 'dataset',
        "algorithm": 'algorithm'
    }

    _optionals = [
        'algorithm',
    ]

    def __init__(self,
                 dataset=None,
                 algorithm=APIHelper.SKIP):
        """Constructor for the OutlierDetection class"""

        # Initialize members of the class
        if algorithm is not APIHelper.SKIP:
            self.algorithm = algorithm 
        self.dataset = dataset 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        dataset = dictionary.get("dataset") if dictionary.get("dataset") else None
        algorithm = Algorithm2.from_dictionary(dictionary.get('algorithm')) if 'algorithm' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(dataset,
                   algorithm)
