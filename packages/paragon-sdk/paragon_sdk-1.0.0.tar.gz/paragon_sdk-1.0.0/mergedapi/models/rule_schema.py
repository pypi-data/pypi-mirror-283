# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.field_12 import Field12
from mergedapi.models.function import Function
from mergedapi.models.redirect_to import RedirectTo
from mergedapi.models.rule_properties import RuleProperties
from mergedapi.models.sensor_2 import Sensor2
from mergedapi.models.trigger import Trigger
from mergedapi.models.variable_3 import Variable3
from mergedapi.models.vector import Vector


class RuleSchema(object):

    """Implementation of the 'rule_schema' model.

    TODO: type model description here.

    Attributes:
        description (str): Description about the rule
        field (List[Field12]): TODO: type description here.
        function (List[Function]): TODO: type description here.
        keys (List[str]): TODO: type description here.
        network_rule (List[object]): Flag to denote a network rule
        disable_no_data_alarm (List[object]): Disable No Data Alarm
        redirect_to (RedirectTo): TODO: type description here.
        rule_frequency (str): Frequency at which the rule’s field, reference,
            and vector elements should be computed. Required only when a rule
            doesn’t have a sensor defined. Specify integer >= 0 followed by
            s/m/h/d/w/y representing seconds/minutes/hours/days/weeks/years.
            Eg: 2s
        rule_name (str): Name of the rule. Should be of pattern
            [a-z][a-z0-9_-]*
        sensor (List[Sensor2]): TODO: type description here.
        synopsis (str): Synopsis about the rule
        field_aggregation_time_range (str): How much back in time should we
            look for field aggregation. Specify positive integer followed by
            o/s/m/h/d/w/y/offset representing
            seconds/minutes/hours/days/weeks/years. Eg: 2s
        trigger (List[Trigger]): TODO: type description here.
        variable (List[Variable3]): Playbook variable configuration
        vector (List[Vector]): TODO: type description here.
        rule_properties (RuleProperties): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "rule_name": 'rule-name',
        "description": 'description',
        "field": 'field',
        "function": 'function',
        "keys": 'keys',
        "network_rule": 'network-rule',
        "disable_no_data_alarm": 'disable-no-data-alarm',
        "redirect_to": 'redirect-to',
        "rule_frequency": 'rule-frequency',
        "sensor": 'sensor',
        "synopsis": 'synopsis',
        "field_aggregation_time_range": 'field-aggregation-time-range',
        "trigger": 'trigger',
        "variable": 'variable',
        "vector": 'vector',
        "rule_properties": 'rule-properties'
    }

    _optionals = [
        'description',
        'field',
        'function',
        'keys',
        'network_rule',
        'disable_no_data_alarm',
        'redirect_to',
        'rule_frequency',
        'sensor',
        'synopsis',
        'field_aggregation_time_range',
        'trigger',
        'variable',
        'vector',
        'rule_properties',
    ]

    def __init__(self,
                 rule_name=None,
                 description=APIHelper.SKIP,
                 field=APIHelper.SKIP,
                 function=APIHelper.SKIP,
                 keys=APIHelper.SKIP,
                 network_rule=APIHelper.SKIP,
                 disable_no_data_alarm=APIHelper.SKIP,
                 redirect_to=APIHelper.SKIP,
                 rule_frequency=APIHelper.SKIP,
                 sensor=APIHelper.SKIP,
                 synopsis=APIHelper.SKIP,
                 field_aggregation_time_range=APIHelper.SKIP,
                 trigger=APIHelper.SKIP,
                 variable=APIHelper.SKIP,
                 vector=APIHelper.SKIP,
                 rule_properties=APIHelper.SKIP):
        """Constructor for the RuleSchema class"""

        # Initialize members of the class
        if description is not APIHelper.SKIP:
            self.description = description 
        if field is not APIHelper.SKIP:
            self.field = field 
        if function is not APIHelper.SKIP:
            self.function = function 
        if keys is not APIHelper.SKIP:
            self.keys = keys 
        if network_rule is not APIHelper.SKIP:
            self.network_rule = network_rule 
        if disable_no_data_alarm is not APIHelper.SKIP:
            self.disable_no_data_alarm = disable_no_data_alarm 
        if redirect_to is not APIHelper.SKIP:
            self.redirect_to = redirect_to 
        if rule_frequency is not APIHelper.SKIP:
            self.rule_frequency = rule_frequency 
        self.rule_name = rule_name 
        if sensor is not APIHelper.SKIP:
            self.sensor = sensor 
        if synopsis is not APIHelper.SKIP:
            self.synopsis = synopsis 
        if field_aggregation_time_range is not APIHelper.SKIP:
            self.field_aggregation_time_range = field_aggregation_time_range 
        if trigger is not APIHelper.SKIP:
            self.trigger = trigger 
        if variable is not APIHelper.SKIP:
            self.variable = variable 
        if vector is not APIHelper.SKIP:
            self.vector = vector 
        if rule_properties is not APIHelper.SKIP:
            self.rule_properties = rule_properties 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        rule_name = dictionary.get("rule-name") if dictionary.get("rule-name") else None
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        field = None
        if dictionary.get('field') is not None:
            field = [Field12.from_dictionary(x) for x in dictionary.get('field')]
        else:
            field = APIHelper.SKIP
        function = None
        if dictionary.get('function') is not None:
            function = [Function.from_dictionary(x) for x in dictionary.get('function')]
        else:
            function = APIHelper.SKIP
        keys = dictionary.get("keys") if dictionary.get("keys") else APIHelper.SKIP
        network_rule = dictionary.get("network-rule") if dictionary.get("network-rule") else APIHelper.SKIP
        disable_no_data_alarm = dictionary.get("disable-no-data-alarm") if dictionary.get("disable-no-data-alarm") else APIHelper.SKIP
        redirect_to = RedirectTo.from_dictionary(dictionary.get('redirect-to')) if 'redirect-to' in dictionary.keys() else APIHelper.SKIP
        rule_frequency = dictionary.get("rule-frequency") if dictionary.get("rule-frequency") else APIHelper.SKIP
        sensor = None
        if dictionary.get('sensor') is not None:
            sensor = [Sensor2.from_dictionary(x) for x in dictionary.get('sensor')]
        else:
            sensor = APIHelper.SKIP
        synopsis = dictionary.get("synopsis") if dictionary.get("synopsis") else APIHelper.SKIP
        field_aggregation_time_range = dictionary.get("field-aggregation-time-range") if dictionary.get("field-aggregation-time-range") else APIHelper.SKIP
        trigger = None
        if dictionary.get('trigger') is not None:
            trigger = [Trigger.from_dictionary(x) for x in dictionary.get('trigger')]
        else:
            trigger = APIHelper.SKIP
        variable = None
        if dictionary.get('variable') is not None:
            variable = [Variable3.from_dictionary(x) for x in dictionary.get('variable')]
        else:
            variable = APIHelper.SKIP
        vector = None
        if dictionary.get('vector') is not None:
            vector = [Vector.from_dictionary(x) for x in dictionary.get('vector')]
        else:
            vector = APIHelper.SKIP
        rule_properties = RuleProperties.from_dictionary(dictionary.get('rule-properties')) if 'rule-properties' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(rule_name,
                   description,
                   field,
                   function,
                   keys,
                   network_rule,
                   disable_no_data_alarm,
                   redirect_to,
                   rule_frequency,
                   sensor,
                   synopsis,
                   field_aggregation_time_range,
                   trigger,
                   variable,
                   vector,
                   rule_properties)
