# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.source import Source


class Field13(object):

    """Implementation of the 'Field13' model.

    TODO: type model description here.

    Attributes:
        description (str): Description about resource field
        field_name (str): Name of the resource field. Should be of pattern
            [a-z][a-zA-Z0-9-]*
        source (Source): TODO: type description here.
        mtype (Type15Enum): Resource field type

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "field_name": 'field-name',
        "mtype": 'type',
        "description": 'description',
        "source": 'source'
    }

    _optionals = [
        'description',
        'source',
    ]

    def __init__(self,
                 field_name=None,
                 mtype=None,
                 description=APIHelper.SKIP,
                 source=APIHelper.SKIP):
        """Constructor for the Field13 class"""

        # Initialize members of the class
        if description is not APIHelper.SKIP:
            self.description = description 
        self.field_name = field_name 
        if source is not APIHelper.SKIP:
            self.source = source 
        self.mtype = mtype 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        field_name = dictionary.get("field-name") if dictionary.get("field-name") else None
        mtype = dictionary.get("type") if dictionary.get("type") else None
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        source = Source.from_dictionary(dictionary.get('source')) if 'source' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(field_name,
                   mtype,
                   description,
                   source)
