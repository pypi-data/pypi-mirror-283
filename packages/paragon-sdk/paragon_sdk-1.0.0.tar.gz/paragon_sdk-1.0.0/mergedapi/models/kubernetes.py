# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.loadbalancer import Loadbalancer


class Kubernetes(object):

    """Implementation of the 'Kubernetes' model.

    Kubernetes deployment configuration

    Attributes:
        loadbalancer (Loadbalancer): Loadbalancer deployment configuration

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "loadbalancer": 'loadbalancer'
    }

    _optionals = [
        'loadbalancer',
    ]

    def __init__(self,
                 loadbalancer=APIHelper.SKIP):
        """Constructor for the Kubernetes class"""

        # Initialize members of the class
        if loadbalancer is not APIHelper.SKIP:
            self.loadbalancer = loadbalancer 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        loadbalancer = Loadbalancer.from_dictionary(dictionary.get('loadbalancer')) if 'loadbalancer' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(loadbalancer)
