# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.v_3 import V3


class SnmpNotification(object):

    """Implementation of the 'SnmpNotification' model.

    SNMP Notification messages(Traps/Informs) ingest configuration

    Attributes:
        engine_id (str): Autogenerated Engine-id for Healthbot in Hex Format
            Eg: '80001f8880bd5b8d052eb40d6000000000'
        port (int): Port to listen for SNMP Notification(Traps/Informs)
            messages
        v_3 (V3): SNMP version 3 configuration for HealthBot

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "engine_id": 'engine-id',
        "port": 'port',
        "v_3": 'v3'
    }

    _optionals = [
        'engine_id',
        'port',
        'v_3',
    ]

    def __init__(self,
                 engine_id=APIHelper.SKIP,
                 port=APIHelper.SKIP,
                 v_3=APIHelper.SKIP):
        """Constructor for the SnmpNotification class"""

        # Initialize members of the class
        if engine_id is not APIHelper.SKIP:
            self.engine_id = engine_id 
        if port is not APIHelper.SKIP:
            self.port = port 
        if v_3 is not APIHelper.SKIP:
            self.v_3 = v_3 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        engine_id = dictionary.get("engine-id") if dictionary.get("engine-id") else APIHelper.SKIP
        port = dictionary.get("port") if dictionary.get("port") else APIHelper.SKIP
        v_3 = V3.from_dictionary(dictionary.get('v3')) if 'v3' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(engine_id,
                   port,
                   v_3)
