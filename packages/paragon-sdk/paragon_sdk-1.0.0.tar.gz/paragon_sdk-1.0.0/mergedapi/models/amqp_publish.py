# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.sasl_2 import Sasl2


class AmqpPublish(object):

    """Implementation of the 'AmqpPublish' model.

    Define amqp notification

    Attributes:
        exchange (str): Name of exchange/routing agent of amqp on which
            connection has to be instantiated
        host (str): Host is amqp server/broker valid hostname or IP address
        port (int): Port is amqp server/broker listner port
        routing_key (str): Routing key is a message attribute the exchange
            looks at when deciding how to route the message to queues. Should
            be of pattern \.*[a-zA-Z0-9_-]+[a-zA-Z0-9\._-]* , Default value is
            derived from
            <device/network-group>.<device-id>.<topic>.<rule>.<trigger>
        sasl (Sasl2): Authetication using username and password over TLS
            connection
        vhost (str): Virtual host of amqp on which connection has to be
            instantiated

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "exchange": 'exchange',
        "host": 'host',
        "port": 'port',
        "routing_key": 'routing-key',
        "sasl": 'sasl',
        "vhost": 'vhost'
    }

    _optionals = [
        'routing_key',
        'sasl',
        'vhost',
    ]

    def __init__(self,
                 exchange=None,
                 host=None,
                 port=None,
                 routing_key=APIHelper.SKIP,
                 sasl=APIHelper.SKIP,
                 vhost=APIHelper.SKIP):
        """Constructor for the AmqpPublish class"""

        # Initialize members of the class
        self.exchange = exchange 
        self.host = host 
        self.port = port 
        if routing_key is not APIHelper.SKIP:
            self.routing_key = routing_key 
        if sasl is not APIHelper.SKIP:
            self.sasl = sasl 
        if vhost is not APIHelper.SKIP:
            self.vhost = vhost 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        exchange = dictionary.get("exchange") if dictionary.get("exchange") else None
        host = dictionary.get("host") if dictionary.get("host") else None
        port = dictionary.get("port") if dictionary.get("port") else None
        routing_key = dictionary.get("routing-key") if dictionary.get("routing-key") else APIHelper.SKIP
        sasl = Sasl2.from_dictionary(dictionary.get('sasl')) if 'sasl' in dictionary.keys() else APIHelper.SKIP
        vhost = dictionary.get("vhost") if dictionary.get("vhost") else APIHelper.SKIP
        # Return an object of this model
        return cls(exchange,
                   host,
                   port,
                   routing_key,
                   sasl,
                   vhost)
