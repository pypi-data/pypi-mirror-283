# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.i_agent import IAgent
from mergedapi.models.native_gpb_1 import NativeGpb1
from mergedapi.models.netflow import Netflow
from mergedapi.models.open_config import OpenConfig
from mergedapi.models.server_monitoring import ServerMonitoring
from mergedapi.models.snmp import Snmp
from mergedapi.models.syslog_1 import Syslog1


class IngestMappingSchema(object):

    """Implementation of the 'ingest-mapping_schema' model.

    TODO: type model description here.

    Attributes:
        i_agent (IAgent): TODO: type description here.
        name (str): Name of the mapping
        native_gpb (NativeGpb1): TODO: type description here.
        netflow (Netflow): TODO: type description here.
        open_config (OpenConfig): TODO: type description here.
        server_monitoring (ServerMonitoring): TODO: type description here.
        snmp (Snmp): TODO: type description here.
        syslog (Syslog1): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "i_agent": 'iAgent',
        "native_gpb": 'native-gpb',
        "netflow": 'netflow',
        "open_config": 'open-config',
        "server_monitoring": 'server-monitoring',
        "snmp": 'snmp',
        "syslog": 'syslog'
    }

    _optionals = [
        'i_agent',
        'native_gpb',
        'netflow',
        'open_config',
        'server_monitoring',
        'snmp',
        'syslog',
    ]

    def __init__(self,
                 name=None,
                 i_agent=APIHelper.SKIP,
                 native_gpb=APIHelper.SKIP,
                 netflow=APIHelper.SKIP,
                 open_config=APIHelper.SKIP,
                 server_monitoring=APIHelper.SKIP,
                 snmp=APIHelper.SKIP,
                 syslog=APIHelper.SKIP):
        """Constructor for the IngestMappingSchema class"""

        # Initialize members of the class
        if i_agent is not APIHelper.SKIP:
            self.i_agent = i_agent 
        self.name = name 
        if native_gpb is not APIHelper.SKIP:
            self.native_gpb = native_gpb 
        if netflow is not APIHelper.SKIP:
            self.netflow = netflow 
        if open_config is not APIHelper.SKIP:
            self.open_config = open_config 
        if server_monitoring is not APIHelper.SKIP:
            self.server_monitoring = server_monitoring 
        if snmp is not APIHelper.SKIP:
            self.snmp = snmp 
        if syslog is not APIHelper.SKIP:
            self.syslog = syslog 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else None
        i_agent = IAgent.from_dictionary(dictionary.get('iAgent')) if 'iAgent' in dictionary.keys() else APIHelper.SKIP
        native_gpb = NativeGpb1.from_dictionary(dictionary.get('native-gpb')) if 'native-gpb' in dictionary.keys() else APIHelper.SKIP
        netflow = Netflow.from_dictionary(dictionary.get('netflow')) if 'netflow' in dictionary.keys() else APIHelper.SKIP
        open_config = OpenConfig.from_dictionary(dictionary.get('open-config')) if 'open-config' in dictionary.keys() else APIHelper.SKIP
        server_monitoring = ServerMonitoring.from_dictionary(dictionary.get('server-monitoring')) if 'server-monitoring' in dictionary.keys() else APIHelper.SKIP
        snmp = Snmp.from_dictionary(dictionary.get('snmp')) if 'snmp' in dictionary.keys() else APIHelper.SKIP
        syslog = Syslog1.from_dictionary(dictionary.get('syslog')) if 'syslog' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   i_agent,
                   native_gpb,
                   netflow,
                   open_config,
                   server_monitoring,
                   snmp,
                   syslog)
