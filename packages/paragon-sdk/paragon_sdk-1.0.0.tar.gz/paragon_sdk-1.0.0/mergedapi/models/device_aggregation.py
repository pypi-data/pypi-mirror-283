# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class DeviceAggregation(object):

    """Implementation of the 'DeviceAggregation' model.

    TODO: type model description here.

    Attributes:
        add_device_as_tag (bool): Add device-id tag as basis for aggregation
        bottom_limit (int): Fetch bottom N results
        field (str): Field based on whiuch to aggregate data
        top_limit (int): Fetch Top N results

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "field": 'field',
        "add_device_as_tag": 'addDeviceAsTag',
        "bottom_limit": 'bottomLimit',
        "top_limit": 'topLimit'
    }

    _optionals = [
        'add_device_as_tag',
        'bottom_limit',
        'top_limit',
    ]

    def __init__(self,
                 field=None,
                 add_device_as_tag=APIHelper.SKIP,
                 bottom_limit=APIHelper.SKIP,
                 top_limit=APIHelper.SKIP):
        """Constructor for the DeviceAggregation class"""

        # Initialize members of the class
        if add_device_as_tag is not APIHelper.SKIP:
            self.add_device_as_tag = add_device_as_tag 
        if bottom_limit is not APIHelper.SKIP:
            self.bottom_limit = bottom_limit 
        self.field = field 
        if top_limit is not APIHelper.SKIP:
            self.top_limit = top_limit 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        field = dictionary.get("field") if dictionary.get("field") else None
        add_device_as_tag = dictionary.get("addDeviceAsTag") if "addDeviceAsTag" in dictionary.keys() else APIHelper.SKIP
        bottom_limit = dictionary.get("bottomLimit") if dictionary.get("bottomLimit") else APIHelper.SKIP
        top_limit = dictionary.get("topLimit") if dictionary.get("topLimit") else APIHelper.SKIP
        # Return an object of this model
        return cls(field,
                   add_device_as_tag,
                   bottom_limit,
                   top_limit)
