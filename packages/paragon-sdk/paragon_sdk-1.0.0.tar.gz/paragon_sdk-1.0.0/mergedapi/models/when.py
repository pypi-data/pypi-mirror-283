# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.does_not_match_with import DoesNotMatchWith
from mergedapi.models.does_not_match_with_previou import DoesNotMatchWithPreviou
from mergedapi.models.equal_to import EqualTo
from mergedapi.models.exist import Exist
from mergedapi.models.greater_than import GreaterThan
from mergedapi.models.greater_than_or_equal_to import GreaterThanOrEqualTo
from mergedapi.models.increasing_at_least_by_rate import IncreasingAtLeastByRate
from mergedapi.models.increasing_at_least_by_value import IncreasingAtLeastByValue
from mergedapi.models.increasing_at_most_by_rate import IncreasingAtMostByRate
from mergedapi.models.increasing_at_most_by_value import IncreasingAtMostByValue
from mergedapi.models.less_than import LessThan
from mergedapi.models.less_than_or_equal_to import LessThanOrEqualTo
from mergedapi.models.matches_with import MatchesWith
from mergedapi.models.matches_with_previou import MatchesWithPreviou
from mergedapi.models.max_rate_of_increase import MaxRateOfIncrease
from mergedapi.models.min_rate_of_increase import MinRateOfIncrease
from mergedapi.models.not_equal_to import NotEqualTo
from mergedapi.models.range import Range
from mergedapi.models.user_defined_function_1 import UserDefinedFunction1


class When(object):

    """Implementation of the 'When' model.

    TODO: type model description here.

    Attributes:
        does_not_match_with (List[DoesNotMatchWith]): TODO: type description
            here.
        equal_to (List[EqualTo]): TODO: type description here.
        exists (List[Exist]): TODO: type description here.
        matches_with_previous (List[MatchesWithPreviou]): TODO: type
            description here.
        does_not_match_with_previous (List[DoesNotMatchWithPreviou]): TODO:
            type description here.
        greater_than (List[GreaterThan]): TODO: type description here.
        greater_than_or_equal_to (List[GreaterThanOrEqualTo]): TODO: type
            description here.
        increasing_at_least_by_rate (List[IncreasingAtLeastByRate]): Rate of
            increase between successive values is at least given rate
        increasing_at_least_by_value (List[IncreasingAtLeastByValue]):
            Increase between successive values is at least given value
        increasing_at_most_by_rate (List[IncreasingAtMostByRate]): Rate of
            increase between successive values is at most given rate
        increasing_at_most_by_value (List[IncreasingAtMostByValue]): Increase
            between successive values is at most given value
        less_than (List[LessThan]): TODO: type description here.
        less_than_or_equal_to (List[LessThanOrEqualTo]): TODO: type
            description here.
        matches_with (List[MatchesWith]): TODO: type description here.
        max_rate_of_increase (List[MaxRateOfIncrease]): TODO: type description
            here.
        min_rate_of_increase (List[MinRateOfIncrease]): TODO: type description
            here.
        not_equal_to (List[NotEqualTo]): TODO: type description here.
        range (List[Range]): TODO: type description here.
        user_defined_function (List[UserDefinedFunction1]): TODO: type
            description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "does_not_match_with": 'does-not-match-with',
        "equal_to": 'equal-to',
        "exists": 'exists',
        "matches_with_previous": 'matches-with-previous',
        "does_not_match_with_previous": 'does-not-match-with-previous',
        "greater_than": 'greater-than',
        "greater_than_or_equal_to": 'greater-than-or-equal-to',
        "increasing_at_least_by_rate": 'increasing-at-least-by-rate',
        "increasing_at_least_by_value": 'increasing-at-least-by-value',
        "increasing_at_most_by_rate": 'increasing-at-most-by-rate',
        "increasing_at_most_by_value": 'increasing-at-most-by-value',
        "less_than": 'less-than',
        "less_than_or_equal_to": 'less-than-or-equal-to',
        "matches_with": 'matches-with',
        "max_rate_of_increase": 'max-rate-of-increase',
        "min_rate_of_increase": 'min-rate-of-increase',
        "not_equal_to": 'not-equal-to',
        "range": 'range',
        "user_defined_function": 'user-defined-function'
    }

    _optionals = [
        'does_not_match_with',
        'equal_to',
        'exists',
        'matches_with_previous',
        'does_not_match_with_previous',
        'greater_than',
        'greater_than_or_equal_to',
        'increasing_at_least_by_rate',
        'increasing_at_least_by_value',
        'increasing_at_most_by_rate',
        'increasing_at_most_by_value',
        'less_than',
        'less_than_or_equal_to',
        'matches_with',
        'max_rate_of_increase',
        'min_rate_of_increase',
        'not_equal_to',
        'range',
        'user_defined_function',
    ]

    def __init__(self,
                 does_not_match_with=APIHelper.SKIP,
                 equal_to=APIHelper.SKIP,
                 exists=APIHelper.SKIP,
                 matches_with_previous=APIHelper.SKIP,
                 does_not_match_with_previous=APIHelper.SKIP,
                 greater_than=APIHelper.SKIP,
                 greater_than_or_equal_to=APIHelper.SKIP,
                 increasing_at_least_by_rate=APIHelper.SKIP,
                 increasing_at_least_by_value=APIHelper.SKIP,
                 increasing_at_most_by_rate=APIHelper.SKIP,
                 increasing_at_most_by_value=APIHelper.SKIP,
                 less_than=APIHelper.SKIP,
                 less_than_or_equal_to=APIHelper.SKIP,
                 matches_with=APIHelper.SKIP,
                 max_rate_of_increase=APIHelper.SKIP,
                 min_rate_of_increase=APIHelper.SKIP,
                 not_equal_to=APIHelper.SKIP,
                 range=APIHelper.SKIP,
                 user_defined_function=APIHelper.SKIP):
        """Constructor for the When class"""

        # Initialize members of the class
        if does_not_match_with is not APIHelper.SKIP:
            self.does_not_match_with = does_not_match_with 
        if equal_to is not APIHelper.SKIP:
            self.equal_to = equal_to 
        if exists is not APIHelper.SKIP:
            self.exists = exists 
        if matches_with_previous is not APIHelper.SKIP:
            self.matches_with_previous = matches_with_previous 
        if does_not_match_with_previous is not APIHelper.SKIP:
            self.does_not_match_with_previous = does_not_match_with_previous 
        if greater_than is not APIHelper.SKIP:
            self.greater_than = greater_than 
        if greater_than_or_equal_to is not APIHelper.SKIP:
            self.greater_than_or_equal_to = greater_than_or_equal_to 
        if increasing_at_least_by_rate is not APIHelper.SKIP:
            self.increasing_at_least_by_rate = increasing_at_least_by_rate 
        if increasing_at_least_by_value is not APIHelper.SKIP:
            self.increasing_at_least_by_value = increasing_at_least_by_value 
        if increasing_at_most_by_rate is not APIHelper.SKIP:
            self.increasing_at_most_by_rate = increasing_at_most_by_rate 
        if increasing_at_most_by_value is not APIHelper.SKIP:
            self.increasing_at_most_by_value = increasing_at_most_by_value 
        if less_than is not APIHelper.SKIP:
            self.less_than = less_than 
        if less_than_or_equal_to is not APIHelper.SKIP:
            self.less_than_or_equal_to = less_than_or_equal_to 
        if matches_with is not APIHelper.SKIP:
            self.matches_with = matches_with 
        if max_rate_of_increase is not APIHelper.SKIP:
            self.max_rate_of_increase = max_rate_of_increase 
        if min_rate_of_increase is not APIHelper.SKIP:
            self.min_rate_of_increase = min_rate_of_increase 
        if not_equal_to is not APIHelper.SKIP:
            self.not_equal_to = not_equal_to 
        if range is not APIHelper.SKIP:
            self.range = range 
        if user_defined_function is not APIHelper.SKIP:
            self.user_defined_function = user_defined_function 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        does_not_match_with = None
        if dictionary.get('does-not-match-with') is not None:
            does_not_match_with = [DoesNotMatchWith.from_dictionary(x) for x in dictionary.get('does-not-match-with')]
        else:
            does_not_match_with = APIHelper.SKIP
        equal_to = None
        if dictionary.get('equal-to') is not None:
            equal_to = [EqualTo.from_dictionary(x) for x in dictionary.get('equal-to')]
        else:
            equal_to = APIHelper.SKIP
        exists = None
        if dictionary.get('exists') is not None:
            exists = [Exist.from_dictionary(x) for x in dictionary.get('exists')]
        else:
            exists = APIHelper.SKIP
        matches_with_previous = None
        if dictionary.get('matches-with-previous') is not None:
            matches_with_previous = [MatchesWithPreviou.from_dictionary(x) for x in dictionary.get('matches-with-previous')]
        else:
            matches_with_previous = APIHelper.SKIP
        does_not_match_with_previous = None
        if dictionary.get('does-not-match-with-previous') is not None:
            does_not_match_with_previous = [DoesNotMatchWithPreviou.from_dictionary(x) for x in dictionary.get('does-not-match-with-previous')]
        else:
            does_not_match_with_previous = APIHelper.SKIP
        greater_than = None
        if dictionary.get('greater-than') is not None:
            greater_than = [GreaterThan.from_dictionary(x) for x in dictionary.get('greater-than')]
        else:
            greater_than = APIHelper.SKIP
        greater_than_or_equal_to = None
        if dictionary.get('greater-than-or-equal-to') is not None:
            greater_than_or_equal_to = [GreaterThanOrEqualTo.from_dictionary(x) for x in dictionary.get('greater-than-or-equal-to')]
        else:
            greater_than_or_equal_to = APIHelper.SKIP
        increasing_at_least_by_rate = None
        if dictionary.get('increasing-at-least-by-rate') is not None:
            increasing_at_least_by_rate = [IncreasingAtLeastByRate.from_dictionary(x) for x in dictionary.get('increasing-at-least-by-rate')]
        else:
            increasing_at_least_by_rate = APIHelper.SKIP
        increasing_at_least_by_value = None
        if dictionary.get('increasing-at-least-by-value') is not None:
            increasing_at_least_by_value = [IncreasingAtLeastByValue.from_dictionary(x) for x in dictionary.get('increasing-at-least-by-value')]
        else:
            increasing_at_least_by_value = APIHelper.SKIP
        increasing_at_most_by_rate = None
        if dictionary.get('increasing-at-most-by-rate') is not None:
            increasing_at_most_by_rate = [IncreasingAtMostByRate.from_dictionary(x) for x in dictionary.get('increasing-at-most-by-rate')]
        else:
            increasing_at_most_by_rate = APIHelper.SKIP
        increasing_at_most_by_value = None
        if dictionary.get('increasing-at-most-by-value') is not None:
            increasing_at_most_by_value = [IncreasingAtMostByValue.from_dictionary(x) for x in dictionary.get('increasing-at-most-by-value')]
        else:
            increasing_at_most_by_value = APIHelper.SKIP
        less_than = None
        if dictionary.get('less-than') is not None:
            less_than = [LessThan.from_dictionary(x) for x in dictionary.get('less-than')]
        else:
            less_than = APIHelper.SKIP
        less_than_or_equal_to = None
        if dictionary.get('less-than-or-equal-to') is not None:
            less_than_or_equal_to = [LessThanOrEqualTo.from_dictionary(x) for x in dictionary.get('less-than-or-equal-to')]
        else:
            less_than_or_equal_to = APIHelper.SKIP
        matches_with = None
        if dictionary.get('matches-with') is not None:
            matches_with = [MatchesWith.from_dictionary(x) for x in dictionary.get('matches-with')]
        else:
            matches_with = APIHelper.SKIP
        max_rate_of_increase = None
        if dictionary.get('max-rate-of-increase') is not None:
            max_rate_of_increase = [MaxRateOfIncrease.from_dictionary(x) for x in dictionary.get('max-rate-of-increase')]
        else:
            max_rate_of_increase = APIHelper.SKIP
        min_rate_of_increase = None
        if dictionary.get('min-rate-of-increase') is not None:
            min_rate_of_increase = [MinRateOfIncrease.from_dictionary(x) for x in dictionary.get('min-rate-of-increase')]
        else:
            min_rate_of_increase = APIHelper.SKIP
        not_equal_to = None
        if dictionary.get('not-equal-to') is not None:
            not_equal_to = [NotEqualTo.from_dictionary(x) for x in dictionary.get('not-equal-to')]
        else:
            not_equal_to = APIHelper.SKIP
        range = None
        if dictionary.get('range') is not None:
            range = [Range.from_dictionary(x) for x in dictionary.get('range')]
        else:
            range = APIHelper.SKIP
        user_defined_function = None
        if dictionary.get('user-defined-function') is not None:
            user_defined_function = [UserDefinedFunction1.from_dictionary(x) for x in dictionary.get('user-defined-function')]
        else:
            user_defined_function = APIHelper.SKIP
        # Return an object of this model
        return cls(does_not_match_with,
                   equal_to,
                   exists,
                   matches_with_previous,
                   does_not_match_with_previous,
                   greater_than,
                   greater_than_or_equal_to,
                   increasing_at_least_by_rate,
                   increasing_at_least_by_value,
                   increasing_at_most_by_rate,
                   increasing_at_most_by_value,
                   less_than,
                   less_than_or_equal_to,
                   matches_with,
                   max_rate_of_increase,
                   min_rate_of_increase,
                   not_equal_to,
                   range,
                   user_defined_function)
