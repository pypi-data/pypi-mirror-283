# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class Exist1(object):

    """Implementation of the 'Exist1' model.

    TODO: type model description here.

    Attributes:
        field (str): This is the string that we need to look for within path
            when in-memory is set to True, else this contains the field-name
            that we need to look for in TSDB
        path (str): Look for the field value in the given path, if it exist as
            key in dict or value in list if in-memory is set to true
        in_memory (bool): Look for field in internal cache path

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "field": 'field',
        "path": 'path',
        "in_memory": 'in-memory'
    }

    _optionals = [
        'path',
        'in_memory',
    ]

    def __init__(self,
                 field=None,
                 path=APIHelper.SKIP,
                 in_memory=APIHelper.SKIP):
        """Constructor for the Exist1 class"""

        # Initialize members of the class
        self.field = field 
        if path is not APIHelper.SKIP:
            self.path = path 
        if in_memory is not APIHelper.SKIP:
            self.in_memory = in_memory 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        field = dictionary.get("field") if dictionary.get("field") else None
        path = dictionary.get("path") if dictionary.get("path") else APIHelper.SKIP
        in_memory = dictionary.get("in-memory") if "in-memory" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(field,
                   path,
                   in_memory)
