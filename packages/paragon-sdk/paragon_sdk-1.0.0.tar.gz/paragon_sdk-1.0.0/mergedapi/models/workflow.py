# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.retry import Retry
from mergedapi.models.workflow_argument_group_schema import WorkflowArgumentGroupSchema


class Workflow(object):

    """Implementation of the 'Workflow' model.

    TODO: type model description here.

    Attributes:
        argument (List[WorkflowArgumentGroupSchema]): Workflow input
            arguments
        batch (int): Maximum parallel steps launched
        retry (Retry): Retry failed steps
        timeout (str): Maximum time to wait for the step completion before
            bailing out (default 60 seconds)
        workflow_name (str): Name of the workflow to trigger

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "workflow_name": 'workflow-name',
        "argument": 'argument',
        "batch": 'batch',
        "retry": 'retry',
        "timeout": 'timeout'
    }

    _optionals = [
        'argument',
        'batch',
        'retry',
        'timeout',
    ]

    def __init__(self,
                 workflow_name=None,
                 argument=APIHelper.SKIP,
                 batch=APIHelper.SKIP,
                 retry=APIHelper.SKIP,
                 timeout=APIHelper.SKIP):
        """Constructor for the Workflow class"""

        # Initialize members of the class
        if argument is not APIHelper.SKIP:
            self.argument = argument 
        if batch is not APIHelper.SKIP:
            self.batch = batch 
        if retry is not APIHelper.SKIP:
            self.retry = retry 
        if timeout is not APIHelper.SKIP:
            self.timeout = timeout 
        self.workflow_name = workflow_name 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        workflow_name = dictionary.get("workflow-name") if dictionary.get("workflow-name") else None
        argument = None
        if dictionary.get('argument') is not None:
            argument = [WorkflowArgumentGroupSchema.from_dictionary(x) for x in dictionary.get('argument')]
        else:
            argument = APIHelper.SKIP
        batch = dictionary.get("batch") if dictionary.get("batch") else APIHelper.SKIP
        retry = Retry.from_dictionary(dictionary.get('retry')) if 'retry' in dictionary.keys() else APIHelper.SKIP
        timeout = dictionary.get("timeout") if dictionary.get("timeout") else APIHelper.SKIP
        # Return an object of this model
        return cls(workflow_name,
                   argument,
                   batch,
                   retry,
                   timeout)
