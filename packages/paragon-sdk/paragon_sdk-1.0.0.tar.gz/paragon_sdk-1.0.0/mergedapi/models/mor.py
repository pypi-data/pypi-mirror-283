# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Or(object):

    """Implementation of the 'Or' model.

    OR(union) operation between two vectors. Resultant vector is a set with
    elements from both the vectors

    Attributes:
        left_vector (str): Vector name. Pattern for giving vector name is
            @[a-z][a-zA-Z0-9_-]*
        right_vector (str): Vector name. Pattern for giving vector name is
            @[a-z][a-zA-Z0-9_-]*

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "left_vector": 'left-vector',
        "right_vector": 'right-vector'
    }

    def __init__(self,
                 left_vector=None,
                 right_vector=None):
        """Constructor for the Or class"""

        # Initialize members of the class
        self.left_vector = left_vector 
        self.right_vector = right_vector 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        left_vector = dictionary.get("left-vector") if dictionary.get("left-vector") else None
        right_vector = dictionary.get("right-vector") if dictionary.get("right-vector") else None
        # Return an object of this model
        return cls(left_vector,
                   right_vector)
