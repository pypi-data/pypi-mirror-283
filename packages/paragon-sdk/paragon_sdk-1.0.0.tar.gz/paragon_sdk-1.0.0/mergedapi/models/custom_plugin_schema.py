# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.parameter import Parameter
from mergedapi.models.security_parameters import SecurityParameters


class CustomPluginSchema(object):

    """Implementation of the 'custom-plugin_schema' model.

    TODO: type model description here.

    Attributes:
        name (str): Name is the identifier of this config, referred in sensor
            config under topic/rule
        parameters (List[Parameter]): Plugin specific parameters (config)
        plugin_name (str): Name of the loaded input plugin of BYOI
        security_parameters (SecurityParameters): Plugin specific security
            parameters
        service_name (str): Name of the service (docker container) which
            implements this plugin

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "parameters": 'parameters',
        "plugin_name": 'plugin-name',
        "security_parameters": 'security-parameters',
        "service_name": 'service-name'
    }

    _optionals = [
        'parameters',
        'plugin_name',
        'security_parameters',
        'service_name',
    ]

    def __init__(self,
                 name=None,
                 parameters=APIHelper.SKIP,
                 plugin_name=APIHelper.SKIP,
                 security_parameters=APIHelper.SKIP,
                 service_name=APIHelper.SKIP):
        """Constructor for the CustomPluginSchema class"""

        # Initialize members of the class
        self.name = name 
        if parameters is not APIHelper.SKIP:
            self.parameters = parameters 
        if plugin_name is not APIHelper.SKIP:
            self.plugin_name = plugin_name 
        if security_parameters is not APIHelper.SKIP:
            self.security_parameters = security_parameters 
        if service_name is not APIHelper.SKIP:
            self.service_name = service_name 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else None
        parameters = None
        if dictionary.get('parameters') is not None:
            parameters = [Parameter.from_dictionary(x) for x in dictionary.get('parameters')]
        else:
            parameters = APIHelper.SKIP
        plugin_name = dictionary.get("plugin-name") if dictionary.get("plugin-name") else APIHelper.SKIP
        security_parameters = SecurityParameters.from_dictionary(dictionary.get('security-parameters')) if 'security-parameters' in dictionary.keys() else APIHelper.SKIP
        service_name = dictionary.get("service-name") if dictionary.get("service-name") else APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   parameters,
                   plugin_name,
                   security_parameters,
                   service_name)
