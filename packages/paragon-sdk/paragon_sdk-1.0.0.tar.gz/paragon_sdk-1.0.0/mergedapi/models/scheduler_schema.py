# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.repeat import Repeat
from mergedapi.models.run_for import RunFor


class SchedulerSchema(object):

    """Implementation of the 'scheduler_schema' model.

    TODO: type model description here.

    Attributes:
        end_time (str): End scheduler at this time
        name (str): Name of the scheduler
        repeat (Repeat): Control when to repeat scheduling
        start_time (str): Start scheduler at this time
        run_for (RunFor): Duration of time for the schedule to run after the
            start time
        mtype (Type16Enum): Type of the scheduler.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "repeat": 'repeat',
        "start_time": 'start-time',
        "end_time": 'end-time',
        "run_for": 'run-for',
        "mtype": 'type'
    }

    _optionals = [
        'end_time',
        'run_for',
        'mtype',
    ]

    def __init__(self,
                 name=None,
                 repeat=None,
                 start_time=None,
                 end_time=APIHelper.SKIP,
                 run_for=APIHelper.SKIP,
                 mtype='continuous'):
        """Constructor for the SchedulerSchema class"""

        # Initialize members of the class
        if end_time is not APIHelper.SKIP:
            self.end_time = end_time 
        self.name = name 
        self.repeat = repeat 
        self.start_time = start_time 
        if run_for is not APIHelper.SKIP:
            self.run_for = run_for 
        self.mtype = mtype 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else None
        repeat = Repeat.from_dictionary(dictionary.get('repeat')) if dictionary.get('repeat') else None
        start_time = dictionary.get("start-time") if dictionary.get("start-time") else None
        end_time = dictionary.get("end-time") if dictionary.get("end-time") else APIHelper.SKIP
        run_for = RunFor.from_dictionary(dictionary.get('run-for')) if 'run-for' in dictionary.keys() else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else 'continuous'
        # Return an object of this model
        return cls(name,
                   repeat,
                   start_time,
                   end_time,
                   run_for,
                   mtype)
