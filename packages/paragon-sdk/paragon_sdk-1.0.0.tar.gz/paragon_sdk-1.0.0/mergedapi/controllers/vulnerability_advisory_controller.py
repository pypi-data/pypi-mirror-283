# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mergedapi.api_helper import APIHelper
from mergedapi.configuration import Server
from mergedapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mergedapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from mergedapi.models.vulnerability_list_advisories_response import VulnerabilityListAdvisoriesResponse
from mergedapi.models.vulnerability_create_advisory_response import VulnerabilityCreateAdvisoryResponse
from mergedapi.models.vulnerability_update_advisory_response import VulnerabilityUpdateAdvisoryResponse
from mergedapi.models.vulnerability_read_advisory_response import VulnerabilityReadAdvisoryResponse
from mergedapi.exceptions.googlerpc_status_exception import GooglerpcStatusException


class VulnerabilityAdvisoryController(BaseController):

    """A Controller to access Endpoints in the mergedapi API."""
    def __init__(self, config):
        super(VulnerabilityAdvisoryController, self).__init__(config)

    def vulnerability_service_list_advisories(self,
                                              org_id):
        """Does a GET request to /trust/api/v1.1alpha/{orgId}/vulnerability/advisories.

        List all advisories from the server.

        Args:
            org_id (str): TODO: type description here.

        Returns:
            VulnerabilityListAdvisoriesResponse: Response from the API. A
                successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/trust/api/v1.1alpha/{orgId}/vulnerability/advisories')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('orgId')
                            .value(org_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('APIKeyHeader'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(VulnerabilityListAdvisoriesResponse.from_dictionary)
            .local_error('default', 'An unexpected error response.', GooglerpcStatusException)
        ).execute()

    def vulnerability_service_create_advisory(self,
                                              org_id,
                                              body):
        """Does a POST request to /trust/api/v1.1alpha/{orgId}/vulnerability/advisories.

        Create advisory on the server

        Args:
            org_id (str): TODO: type description here.
            body (TrustApiV11alphaVulnerabilityAdvisoriesRequest): TODO: type
                description here.

        Returns:
            VulnerabilityCreateAdvisoryResponse: Response from the API. A
                successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/trust/api/v1.1alpha/{orgId}/vulnerability/advisories')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('orgId')
                            .value(org_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('APIKeyHeader'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(VulnerabilityCreateAdvisoryResponse.from_dictionary)
            .local_error('default', 'An unexpected error response.', GooglerpcStatusException)
        ).execute()

    def vulnerability_service_update_advisory(self,
                                              org_id,
                                              definition_id=None,
                                              definition_sirt_id=None,
                                              definition_title=None,
                                              definition_conditions=None,
                                              definition_description=None,
                                              definition_workaround=None,
                                              definition_product_categories=None,
                                              definition_affected_versions=None,
                                              definition_cvss_score=None,
                                              definition_cvss_score_metrics=None,
                                              definition_last_modified=None,
                                              definition_severity_level=None,
                                              definition_cve_ids=None,
                                              definition_acked=None):
        """Does a PUT request to /trust/api/v1.1alpha/{orgId}/vulnerability/advisories.

        Update advisory on the server.

        Args:
            org_id (str): TODO: type description here.
            definition_id (str, optional): Uniquely identifies the advisory;
                assigned by the server.
            definition_sirt_id (str, optional): The SIRT-supplied ID of the
                advisory. Derived from SIRT document field:
                sirtSecurityAdvisory.
            definition_title (str, optional): Title of the advisory. Derived
                from SIRT document field: headline.
            definition_conditions (str, optional): Describes the conditions in
                which the incident applies. Derived from SIRT document field:
                trigger.
            definition_description (str, optional): Full description of the
                incident described by the advisory. Derived from SIRT document
                field: description.
            definition_workaround (str, optional): Describes any workaround
                for the incident described by the advisory. Derived from SIRT
                document field: workaround.
            definition_product_categories (List[str], optional): Identifies
                the products that are affected by the incident, for example
                MX240, PTX5000. Derived from the SIRT document field:
                productCategory.
            definition_affected_versions (List[str], optional): Lists the OS
                versions that are affected by the advisory, for example
                19.4X52, 20.1R2-S2. Derived from the SIRT document field:
                affectedVersion.
            definition_cvss_score (str, optional): The CVSS score assigned to
                the incident, for example 7.5, 5.3. Derived from the SIRT
                document field: cvssScore.
            definition_cvss_score_metrics (str, optional): Identfies the
                metrics used to calculate the CVSS score, for example
                CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H. Derived from the
                SIRT document field: cvssScoreMetrics.
            definition_last_modified (datetime, optional): Time at which the
                advisory was last modified. Derived from the SIRT document
                field: lastModified.
            definition_severity_level (DefinitionSeverityLevel1Enum,
                optional): Identifies the severity level of the advisory
                Derived from the SIRT document field: severityLevel.
            definition_cve_ids (List[str], optional): The associated CVE
                (Common Vulnerabilities and Exposures) identifiers. Derived
                from the SIRT document field: cveId
            definition_acked (bool, optional): Has the advisory been
                acknowledged?

        Returns:
            VulnerabilityUpdateAdvisoryResponse: Response from the API. A
                successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/trust/api/v1.1alpha/{orgId}/vulnerability/advisories')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('orgId')
                            .value(org_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('definition.id')
                         .value(definition_id))
            .query_param(Parameter()
                         .key('definition.sirtId')
                         .value(definition_sirt_id))
            .query_param(Parameter()
                         .key('definition.title')
                         .value(definition_title))
            .query_param(Parameter()
                         .key('definition.conditions')
                         .value(definition_conditions))
            .query_param(Parameter()
                         .key('definition.description')
                         .value(definition_description))
            .query_param(Parameter()
                         .key('definition.workaround')
                         .value(definition_workaround))
            .query_param(Parameter()
                         .key('definition.productCategories')
                         .value(definition_product_categories))
            .query_param(Parameter()
                         .key('definition.affectedVersions')
                         .value(definition_affected_versions))
            .query_param(Parameter()
                         .key('definition.cvssScore')
                         .value(definition_cvss_score))
            .query_param(Parameter()
                         .key('definition.cvssScoreMetrics')
                         .value(definition_cvss_score_metrics))
            .query_param(Parameter()
                         .key('definition.lastModified')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, definition_last_modified)))
            .query_param(Parameter()
                         .key('definition.severityLevel')
                         .value(definition_severity_level))
            .query_param(Parameter()
                         .key('definition.cveIds')
                         .value(definition_cve_ids))
            .query_param(Parameter()
                         .key('definition.acked')
                         .value(definition_acked))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('APIKeyHeader'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(VulnerabilityUpdateAdvisoryResponse.from_dictionary)
            .local_error('default', 'An unexpected error response.', GooglerpcStatusException)
        ).execute()

    def vulnerability_service_read_advisory(self,
                                            org_id,
                                            id):
        """Does a GET request to /trust/api/v1.1alpha/{orgId}/vulnerability/advisories/{id}.

        Read advisory from the server.

        Args:
            org_id (str): TODO: type description here.
            id (str): TODO: type description here.

        Returns:
            VulnerabilityReadAdvisoryResponse: Response from the API. A
                successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/trust/api/v1.1alpha/{orgId}/vulnerability/advisories/{id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('orgId')
                            .value(org_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('APIKeyHeader'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(VulnerabilityReadAdvisoryResponse.from_dictionary)
            .local_error('default', 'An unexpected error response.', GooglerpcStatusException)
        ).execute()

    def vulnerability_service_delete_advisory(self,
                                              org_id,
                                              id):
        """Does a DELETE request to /trust/api/v1.1alpha/{orgId}/vulnerability/advisories/{id}.

        Delete advisory on the server.

        Args:
            org_id (str): TODO: type description here.
            id (str): TODO: type description here.

        Returns:
            object: Response from the API. A successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/trust/api/v1.1alpha/{orgId}/vulnerability/advisories/{id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('orgId')
                            .value(org_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('APIKeyHeader'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('default', 'An unexpected error response.', GooglerpcStatusException)
        ).execute()

    def vulnerability_service_update_advisory_ack_status(self,
                                                         org_id,
                                                         ack=None,
                                                         advisory_ids=None):
        """Does a PUT request to /trust/api/v1.1alpha/{orgId}/vulnerability/device/ack.

        Updates the ack status of a list of advisories.

        Args:
            org_id (str): TODO: type description here.
            ack (bool, optional): Holds true/false to indicate whether the
                advisories should be acked/unacked.
            advisory_ids (List[str], optional): Defines the ids of the
                advisories for which ack status is to be updated.

        Returns:
            object: Response from the API. A successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/trust/api/v1.1alpha/{orgId}/vulnerability/device/ack')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('orgId')
                            .value(org_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('ack')
                         .value(ack))
            .query_param(Parameter()
                         .key('advisoryIds')
                         .value(advisory_ids))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('APIKeyHeader'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('default', 'An unexpected error response.', GooglerpcStatusException)
        ).execute()
