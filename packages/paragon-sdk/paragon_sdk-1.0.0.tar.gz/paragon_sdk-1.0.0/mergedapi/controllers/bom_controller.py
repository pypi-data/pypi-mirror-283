# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mergedapi.api_helper import APIHelper
from mergedapi.configuration import Server
from mergedapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mergedapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from mergedapi.models.bom_create_response import BomCreateResponse
from mergedapi.models.bom_list_response import BomListResponse
from mergedapi.models.bom_read_response import BomReadResponse
from mergedapi.exceptions.googlerpc_status_exception import GooglerpcStatusException


class BOMController(BaseController):

    """A Controller to access Endpoints in the mergedapi API."""
    def __init__(self, config):
        super(BOMController, self).__init__(config)

    def bom_service_create(self,
                           org_id,
                           body):
        """Does a POST request to /trust/api/v1.1alpha/{orgId}/boms.

        Create a new Bill of Materials

        Args:
            org_id (str): TODO: type description here.
            body (BomReadResponse): TODO: type description here.

        Returns:
            BomCreateResponse: Response from the API. A successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/trust/api/v1.1alpha/{orgId}/boms')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('orgId')
                            .value(org_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('APIKeyHeader'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(BomCreateResponse.from_dictionary)
            .local_error('default', 'An unexpected error response.', GooglerpcStatusException)
        ).execute()

    def bom_service_list(self,
                         org_id,
                         selection_pagination_page_size=None,
                         selection_pagination_page_offset=None,
                         selection_filtering_filter=None,
                         selection_sort_keys=None):
        """Does a GET request to /trust/api/v1.1alpha/{orgId}/boms/summaries.

        List all Bill of Materials summaries known to the server.

        Args:
            org_id (str): TODO: type description here.
            selection_pagination_page_size (int, optional): Defines the number
                of entities to be returned. If this is 0, the other fields are
                ignored and all qualifying entities will be returned. If
                non-0, the corresponding PaginationResponse will be populated
                with the total number of entities (subject to any filtering).
            selection_pagination_page_offset (int, optional): Holds the
                zero-based index of the page of results to be returned.
            selection_filtering_filter (str, optional): Defines a filter using
                language derived from the grammar described by
                https://google.aip.dev/160. - `address = "192.168.1.82"` -
                `count < 10` - `started_at > 2023-05-03T11:43:41.266Z` -
                `host_name = "mx*" AND severity = "major"` -
                `time_acknowledged != null` -
                `target_ids:"34f3ae1d-1829-4175-9482-b80f61e4fac7"`   #
                target_ids array contains specified id  Field names must
                appear on the left-hand side of a comparison operator; the
                right-hand side accepts only literals and logical operators. 
                A filter can only reference fields which are listed in the
                table definition in the relevant persistence repository.  When
                a filter compares the value of an enumeration, it can specify
                the value either as an integer or as a string containing the
                corresponding enumeration string, as in `severity = "major"`
                above.
            selection_sort_keys (List[str], optional): Defines the names of
                columns used to sort the returned entities. Format is
                "columname[ order]". order can be asc (ascending) or desc
                (descending); if omitted, order defaults to ascending. If
                multiple sort columns are defined, the precedence reflects the
                order in which they are specified, with the first column
                having the highest precedence. Examples: - "name" -
                "started_at desc" - "score asc"

        Returns:
            BomListResponse: Response from the API. A successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/trust/api/v1.1alpha/{orgId}/boms/summaries')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('orgId')
                            .value(org_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('selection.pagination.pageSize')
                         .value(selection_pagination_page_size))
            .query_param(Parameter()
                         .key('selection.pagination.pageOffset')
                         .value(selection_pagination_page_offset))
            .query_param(Parameter()
                         .key('selection.filtering.filter')
                         .value(selection_filtering_filter))
            .query_param(Parameter()
                         .key('selection.sort.keys')
                         .value(selection_sort_keys))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('APIKeyHeader'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(BomListResponse.from_dictionary)
            .local_error('default', 'An unexpected error response.', GooglerpcStatusException)
        ).execute()

    def bom_service_read(self,
                         org_id,
                         serial_number,
                         version):
        """Does a GET request to /trust/api/v1.1alpha/{orgId}/boms/{serialNumber}/{version}.

        Delivers Bill of Materials with the given id.

        Args:
            org_id (str): TODO: type description here.
            serial_number (str): TODO: type description here.
            version (int): TODO: type description here.

        Returns:
            BomReadResponse: Response from the API. A successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/trust/api/v1.1alpha/{orgId}/boms/{serialNumber}/{version}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('orgId')
                            .value(org_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('serialNumber')
                            .value(serial_number)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('version')
                            .value(version)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('APIKeyHeader'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(BomReadResponse.from_dictionary)
            .local_error('default', 'An unexpected error response.', GooglerpcStatusException)
        ).execute()

    def bom_service_delete(self,
                           org_id,
                           serial_number,
                           version):
        """Does a DELETE request to /trust/api/v1.1alpha/{orgId}/boms/{serialNumber}/{version}.

        Delete specified Bill of Materials from the server

        Args:
            org_id (str): TODO: type description here.
            serial_number (str): TODO: type description here.
            version (int): TODO: type description here.

        Returns:
            object: Response from the API. A successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/trust/api/v1.1alpha/{orgId}/boms/{serialNumber}/{version}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('orgId')
                            .value(org_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('serialNumber')
                            .value(serial_number)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('version')
                            .value(version)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('APIKeyHeader'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('default', 'An unexpected error response.', GooglerpcStatusException)
        ).execute()
