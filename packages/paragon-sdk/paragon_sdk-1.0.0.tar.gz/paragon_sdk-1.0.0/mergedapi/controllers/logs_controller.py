# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mergedapi.api_helper import APIHelper
from mergedapi.configuration import Server
from mergedapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mergedapi.http.http_method_enum import HttpMethodEnum
from mergedapi.exceptions.api_exception import APIException


class LogsController(BaseController):

    """A Controller to access Endpoints in the mergedapi API."""
    def __init__(self, config):
        super(LogsController, self).__init__(config)

    def retrieve_logs_for_device_group(self,
                                       device_group_name,
                                       x_iam_token=None,
                                       download=True,
                                       filename=None):
        """Does a GET request to /logs/device-group/{device_group_name}/.

        Get the logs for all the services for the given {device_group_name}

        Args:
            device_group_name (str): Device group name
            x_iam_token (str, optional): authentication header object
            download (bool, optional): Download the logs
            filename (str, optional): Name of the log file

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/logs/device-group/{device_group_name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('device_group_name')
                            .value(device_group_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('download')
                         .value(download))
            .query_param(Parameter()
                         .key('filename')
                         .value(filename))
        ).execute()

    def retrieve_logs_for_device_group_service(self,
                                               device_group_name,
                                               service_name,
                                               x_iam_token=None,
                                               download=True,
                                               filename=None,
                                               number_of_lines=100000):
        """Does a GET request to /logs/device-group/{device_group_name}/service/{service_name}/.

        Get the logs for the service {service_name} for the given
        {device_group_name}

        Args:
            device_group_name (str): Device group name
            service_name (str): Device-group service name
            x_iam_token (str, optional): authentication header object
            download (bool, optional): Download the logs
            filename (str, optional): Name of the log file
            number_of_lines (int, optional): Number of lines to show from the
                end of the logs

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/logs/device-group/{device_group_name}/service/{service_name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('device_group_name')
                            .value(device_group_name)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('service_name')
                            .value(service_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('download')
                         .value(download))
            .query_param(Parameter()
                         .key('filename')
                         .value(filename))
            .query_param(Parameter()
                         .key('number_of_lines')
                         .value(number_of_lines))
        ).execute()

    def retrieve_logs_for_network_group(self,
                                        network_group_name,
                                        x_iam_token=None,
                                        download=True,
                                        filename=None):
        """Does a GET request to /logs/network-group/{network_group_name}/.

        Get the logs for the service {service_name} for the given
        {network_group_name}

        Args:
            network_group_name (str): Network group name
            x_iam_token (str, optional): authentication header object
            download (bool, optional): Download the logs
            filename (str, optional): Name of the log file

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/logs/network-group/{network_group_name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('network_group_name')
                            .value(network_group_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('download')
                         .value(download))
            .query_param(Parameter()
                         .key('filename')
                         .value(filename))
        ).execute()

    def retrieve_logs_for_network_group_service(self,
                                                network_group_name,
                                                service_name,
                                                x_iam_token=None,
                                                download=True,
                                                filename=None,
                                                number_of_lines=100000):
        """Does a GET request to /logs/network-group/{network_group_name}/service/{service_name}/.

        Get the logs for all the services for the given {network_group_name}

        Args:
            network_group_name (str): Network group name
            service_name (str): Network group service name
            x_iam_token (str, optional): authentication header object
            download (bool, optional): Download the logs
            filename (str, optional): Name of the log file
            number_of_lines (int, optional): Number of lines to show from the
                end of the logs

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/logs/network-group/{network_group_name}/service/{service_name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('network_group_name')
                            .value(network_group_name)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('service_name')
                            .value(service_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('download')
                         .value(download))
            .query_param(Parameter()
                         .key('filename')
                         .value(filename))
            .query_param(Parameter()
                         .key('number_of_lines')
                         .value(number_of_lines))
        ).execute()
