# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mergedapi.api_helper import APIHelper
from mergedapi.configuration import Server
from mergedapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mergedapi.http.http_method_enum import HttpMethodEnum
from mergedapi.models.tsdb_results import TsdbResults
from mergedapi.models.health_monitoring import HealthMonitoring
from mergedapi.exceptions.error_exception import ErrorException
from mergedapi.exceptions.tsdb_error_exception import TsdbErrorException
from mergedapi.exceptions.health_monitoring_error_exception import HealthMonitoringErrorException


class SystemController(BaseController):

    """A Controller to access Endpoints in the mergedapi API."""
    def __init__(self, config):
        super(SystemController, self).__init__(config)

    def retrieve_available_nodes(self,
                                 x_iam_token=None):
        """Does a GET request to /nodes/.

        Get the list of available nodes in the installation.

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/nodes/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_tsdb_counters(self,
                               x_iam_token=None):
        """Does a GET request to /tsdb-counters/.

        Get TSDB counters

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/tsdb-counters/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def query_tsdb(self,
                   db,
                   device_group,
                   device,
                   measurement=None,
                   topic=None,
                   rule=None,
                   trigger=None,
                   fields=None,
                   order=None,
                   group_by=None,
                   limit=None,
                   where=None,
                   q=None):
        """Does a GET request to /tsdb/query.

        Query TSDB

        Args:
            db (str): Name of the database. Multiple databases should be
                separated by ','. '*' can be used to specify all databases.
            device_group (str): Name of the deviceGroup(s). Multiple device
                groups should be separated by ','. This can be used in
                combination with device, but is not mandatory. If device is
                given, then query will be executed only for that particular
                devices in the given device group, else all devices in group
                will be considered. Given devices will be applicable for all
                give device-groups.
            device (str): Name of the device. Multiple device should be
                separated by ','. This should be used along with deviceGroup.
                Without deviceGroup, this config will not be considered
            measurement (str, optional): Name of the measurement. Optional if
                topic/rule/trigger is used
            topic (str, optional): Name of Healthbot topic. Optional if
                measurement is used
            rule (str, optional): Name of Healthbot rule. Required if topic is
                used. Optional if measurement is used
            trigger (str, optional): Name of Healthbot trigger. Optional if
                measurement is used or rule table is being queried
            fields (str, optional): Fields that needs to be retrieved. Use *
                for to query all fields. Eg: fields=field1, field2
            order (str, optional): Sort points in descending order based on
                time. By default points will be sorted in ascending order. Eg:
                order=desc
            group_by (str, optional): Group results based on specified tags.
                Use * to group by all tags. Eg: groupBy=key1, key2
            limit (str, optional): Limit number of points in the result. If
                groupBy is used limit is applied per group. Eg: limit=10
            where (str, optional): Where clause filters data based on fields,
                tags, and/or timestamps. Eg: where="interface-name" =
                'ge-0/0/1' and "in-pkts" > 0
            q (str, optional): Influx query string. Use this when custom query
                format does not support a query

        Returns:
            TsdbResults: Response from the API. Successful operation. NOTE:
                the "values" in the query result is a list of list. Elements
                in this list can be of any type string/integer/float/boolean.
                Because of the limitation in swagger 2.0, this information
                could not be encoded. So for now it is maked as string

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/tsdb/query')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('db')
                         .value(db))
            .query_param(Parameter()
                         .key('deviceGroup')
                         .value(device_group))
            .query_param(Parameter()
                         .key('device')
                         .value(device))
            .query_param(Parameter()
                         .key('measurement')
                         .value(measurement))
            .query_param(Parameter()
                         .key('topic')
                         .value(topic))
            .query_param(Parameter()
                         .key('rule')
                         .value(rule))
            .query_param(Parameter()
                         .key('trigger')
                         .value(trigger))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .query_param(Parameter()
                         .key('order')
                         .value(order))
            .query_param(Parameter()
                         .key('groupBy')
                         .value(group_by))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('where')
                         .value(where))
            .query_param(Parameter()
                         .key('q')
                         .value(q))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TsdbResults.from_dictionary)
            .local_error('400', 'Bad Request', TsdbErrorException)
            .local_error('500', 'Innternal Error', TsdbErrorException)
        ).execute()

    def query_tsdb_post(self,
                        db,
                        device_group,
                        device,
                        tsdb_query_body=None,
                        measurement=None,
                        topic=None,
                        rule=None,
                        trigger=None,
                        fields=None,
                        order=None,
                        group_by=None,
                        limit=None,
                        where=None,
                        q=None):
        """Does a POST request to /tsdb/query.

        Query TSDB

        Args:
            db (str): Name of the database. Multiple databases should be
                separated by ','. '*' can be used to specify all databases.
            device_group (str): Name of the deviceGroup(s). Multiple device
                groups should be separated by ','. This can be used in
                combination with device, but is not mandatory. If device is
                given, then query will be executed only for that particular
                devices in the given device group, else all devices in group
                will be considered. Given devices will be applicable for all
                give device-groups.
            device (str): Name of the device. Multiple device should be
                separated by ','. This should be used along with deviceGroup.
                Without deviceGroup, this config will not be considered
            tsdb_query_body (TsdbPostBody, optional): Query TSDB body object
            measurement (str, optional): Name of the measurement. Optional if
                topic/rule/trigger is used
            topic (str, optional): Name of Healthbot topic. Optional if
                measurement is used
            rule (str, optional): Name of Healthbot rule. Required if topic is
                used. Optional if measurement is used
            trigger (str, optional): Name of Healthbot trigger. Optional if
                measurement is used or rule table is being queried
            fields (str, optional): Fields that needs to be retrieved. Use *
                for to query all fields. Eg: fields=field1, field2
            order (str, optional): Sort points in descending order based on
                time. By default points will be sorted in ascending order. Eg:
                order=desc
            group_by (str, optional): Group results based on specified tags.
                Use * to group by all tags. Eg: groupBy=key1, key2
            limit (str, optional): Limit number of points in the result. If
                groupBy is used limit is applied per group. Eg: limit=10
            where (str, optional): Where clause filters data based on fields,
                tags, and/or timestamps. Eg: where="interface-name" =
                'ge-0/0/1' and "in-pkts" > 0
            q (str, optional): Influx query string. Use this when custom query
                format does not support a query

        Returns:
            TsdbResults: Response from the API. Successful operation. NOTE:
                the "values" in the query result is a list of list. Elements
                in this list can be of any type string/integer/float/boolean.
                Because of the limitation in swagger 2.0, this information
                could not be encoded. So for now it is maked as string

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/tsdb/query')
            .http_method(HttpMethodEnum.POST)
            .query_param(Parameter()
                         .key('db')
                         .value(db))
            .query_param(Parameter()
                         .key('deviceGroup')
                         .value(device_group))
            .query_param(Parameter()
                         .key('device')
                         .value(device))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(tsdb_query_body))
            .query_param(Parameter()
                         .key('measurement')
                         .value(measurement))
            .query_param(Parameter()
                         .key('topic')
                         .value(topic))
            .query_param(Parameter()
                         .key('rule')
                         .value(rule))
            .query_param(Parameter()
                         .key('trigger')
                         .value(trigger))
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .query_param(Parameter()
                         .key('order')
                         .value(order))
            .query_param(Parameter()
                         .key('groupBy')
                         .value(group_by))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('where')
                         .value(where))
            .query_param(Parameter()
                         .key('q')
                         .value(q))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TsdbResults.from_dictionary)
            .local_error('400', 'Bad Request', TsdbErrorException)
            .local_error('500', 'Innternal Error', TsdbErrorException)
        ).execute()

    def check_api_server_health_liveness(self):
        """Does a GET request to /live/.

        Check liveness status of the api-server

        Returns:
            HealthMonitoring: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/live/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(HealthMonitoring.from_dictionary)
            .local_error('500', 'Unsuccessful operation', HealthMonitoringErrorException)
            .local_error('default', 'unexpected error', ErrorException)
        ).execute()

    def check_config_server_health_liveness(self):
        """Does a GET request to /config/live/.

        Check liveness status of the config-server

        Returns:
            HealthMonitoring: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/live/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(HealthMonitoring.from_dictionary)
            .local_error('500', 'Unsuccessful operation', HealthMonitoringErrorException)
            .local_error('default', 'unexpected error', ErrorException)
        ).execute()

    def check_api_server_health_readiness(self):
        """Does a GET request to /ready/.

        Check readiness status of the api-server

        Returns:
            HealthMonitoring: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/ready/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(HealthMonitoring.from_dictionary)
            .local_error('500', 'Unsuccessful operation', HealthMonitoringErrorException)
            .local_error('default', 'unexpected error', ErrorException)
        ).execute()

    def check_config_server_health_readiness(self):
        """Does a GET request to /config/ready/.

        Check readiness status of the config-server

        Returns:
            HealthMonitoring: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ready/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(HealthMonitoring.from_dictionary)
            .local_error('500', 'Unsuccessful operation', HealthMonitoringErrorException)
            .local_error('default', 'unexpected error', ErrorException)
        ).execute()

    def generate_resource_dependencies(self,
                                       x_iam_token=None):
        """Does a GET request to /config/rca/generate-resource-dependencies.

        Get resource dependency events. Internal API

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/rca/generate-resource-dependencies')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_sensor_device_group(self,
                                     device_group_name,
                                     x_iam_token=None):
        """Does a GET request to /config/sensor/device-group/{device_group_name}/.

        GET sensors subscribed for a device-group

        Args:
            device_group_name (str): Device Group
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Subscribed sensors for device-group

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/sensor/device-group/{device_group_name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('device_group_name')
                            .value(device_group_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_system_details(self,
                                x_iam_token=None,
                                service_name=None):
        """Does a GET request to /system-details/.

        Retrieve system details for HealthBot system.

        Args:
            x_iam_token (str, optional): authentication header object
            service_name (str, optional): service name takes in the name of
                the service for which details are required.

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/system-details/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('service_name')
                         .value(service_name))
        ).execute()
