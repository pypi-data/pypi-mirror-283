# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mergedapi.api_helper import APIHelper
from mergedapi.configuration import Server
from mergedapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mergedapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from mergedapi.models.tenant_list_response import TenantListResponse
from mergedapi.models.tenant_create_response import TenantCreateResponse
from mergedapi.models.tenant_update_response import TenantUpdateResponse
from mergedapi.models.tenant_read_response import TenantReadResponse
from mergedapi.exceptions.googlerpc_status_exception import GooglerpcStatusException


class TenantController(BaseController):

    """A Controller to access Endpoints in the mergedapi API."""
    def __init__(self, config):
        super(TenantController, self).__init__(config)

    def tenant_service_list(self,
                            org_id):
        """Does a GET request to /trust/api/v1.1alpha/{orgId}/tenants.

        List all tenants known to the server.

        Args:
            org_id (str): TODO: type description here.

        Returns:
            TenantListResponse: Response from the API. A successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/trust/api/v1.1alpha/{orgId}/tenants')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('orgId')
                            .value(org_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('APIKeyHeader'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TenantListResponse.from_dictionary)
            .local_error('default', 'An unexpected error response.', GooglerpcStatusException)
        ).execute()

    def tenant_service_create(self,
                              org_id,
                              body):
        """Does a POST request to /trust/api/v1.1alpha/{orgId}/tenants.

        Create a new tenant

        Args:
            org_id (str): TODO: type description here.
            body (Body22): TODO: type description here.

        Returns:
            TenantCreateResponse: Response from the API. A successful
                response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/trust/api/v1.1alpha/{orgId}/tenants')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('orgId')
                            .value(org_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('APIKeyHeader'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TenantCreateResponse.from_dictionary)
            .local_error('default', 'An unexpected error response.', GooglerpcStatusException)
        ).execute()

    def tenant_service_update(self,
                              org_id,
                              body):
        """Does a PUT request to /trust/api/v1.1alpha/{orgId}/tenants.

        Update tenant on the server.

        Args:
            org_id (str): TODO: type description here.
            body (TenantCreateResponse): TODO: type description here.

        Returns:
            TenantUpdateResponse: Response from the API. A successful
                response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/trust/api/v1.1alpha/{orgId}/tenants')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('orgId')
                            .value(org_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('APIKeyHeader'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TenantUpdateResponse.from_dictionary)
            .local_error('default', 'An unexpected error response.', GooglerpcStatusException)
        ).execute()

    def tenant_service_read(self,
                            org_id,
                            id):
        """Does a GET request to /trust/api/v1.1alpha/{orgId}/tenants/{id}.

        Delivers tenant with the given id.

        Args:
            org_id (str): TODO: type description here.
            id (str): TODO: type description here.

        Returns:
            TenantReadResponse: Response from the API. A successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/trust/api/v1.1alpha/{orgId}/tenants/{id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('orgId')
                            .value(org_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('APIKeyHeader'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TenantReadResponse.from_dictionary)
            .local_error('default', 'An unexpected error response.', GooglerpcStatusException)
        ).execute()

    def tenant_service_delete(self,
                              org_id,
                              id):
        """Does a DELETE request to /trust/api/v1.1alpha/{orgId}/tenants/{id}.

        Delete specified tenant from the server

        Args:
            org_id (str): TODO: type description here.
            id (str): TODO: type description here.

        Returns:
            object: Response from the API. A successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/trust/api/v1.1alpha/{orgId}/tenants/{id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('orgId')
                            .value(org_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('APIKeyHeader'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('default', 'An unexpected error response.', GooglerpcStatusException)
        ).execute()
