# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mergedapi.api_helper import APIHelper
from mergedapi.configuration import Server
from mergedapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mergedapi.http.http_method_enum import HttpMethodEnum
from mergedapi.models.retrieve_debug_for_scenario_response import RetrieveDebugForScenarioResponse
from mergedapi.exceptions.error_exception import ErrorException


class DebugController(BaseController):

    """A Controller to access Endpoints in the mergedapi API."""
    def __init__(self, config):
        super(DebugController, self).__init__(config)

    def retrieve_debug_for_scenario(self,
                                    scenario_name,
                                    x_iam_token=None,
                                    debug_arguments=None):
        """Does a POST request to /debug/scenario/{scenario_name}/.

        Run debugging for the given scenario name

        Args:
            scenario_name (str): Scenario name
            x_iam_token (str, optional): authentication header object
            debug_arguments (DebugArgumentsSchema, optional): Debug arguments
                object

        Returns:
            List[RetrieveDebugForScenarioResponse]: Response from the API.
                Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/debug/scenario/{scenario_name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('scenario_name')
                            .value(scenario_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_param(Parameter()
                        .value(debug_arguments))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/json; charset=utf-8'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RetrieveDebugForScenarioResponse.from_dictionary)
            .local_error('default', 'Unexpected error', ErrorException)
        ).execute()

    def healthbot_debug_generate_configuration(self,
                                               x_iam_token=None):
        """Does a POST request to /debug/configuration/.

        Request Healthbot MGD service to generate the debug related
        configuration for healthbot debugger to consume.

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/debug/configuration/')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()
