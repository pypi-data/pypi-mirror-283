# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mergedapi.api_helper import APIHelper
from mergedapi.configuration import Server
from mergedapi.utilities.file_wrapper import FileWrapper
from mergedapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mergedapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.configurations.endpoint_configuration import EndpointConfiguration
from mergedapi.models.create_iceberg_add_license_from_file_response import CreateIcebergAddLicenseFromFileResponse
from mergedapi.models.update_iceberg_replace_license_response import UpdateIcebergReplaceLicenseResponse
from mergedapi.models.license_keys_schema import LicenseKeysSchema
from mergedapi.models.license_key_schema import LicenseKeySchema
from mergedapi.models.license_features_schema import LicenseFeaturesSchema
from mergedapi.exceptions.error_exception import ErrorException


class LicenseController(BaseController):

    """A Controller to access Endpoints in the mergedapi API."""
    def __init__(self, config):
        super(LicenseController, self).__init__(config)

    def delete_iceberg_delete_all_license(self,
                                          x_iam_token=None):
        """Does a DELETE request to /license/keys/.

        Delete all the previously added license keys.

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/license/keys/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def create_iceberg_add_license_from_file(self,
                                             license_file,
                                             x_iam_token=None):
        """Does a POST request to /license/keys/.

        Add license keys from file.

        Args:
            license_file (typing.BinaryIO): License key file content
            x_iam_token (str, optional): authentication header object

        Returns:
            CreateIcebergAddLicenseFromFileResponse: Response from the API.
                Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/license/keys/')
            .http_method(HttpMethodEnum.POST)
            .multipart_param(Parameter()
                             .key('license_file')
                             .value(license_file)
                             .default_content_type('application/octet-stream'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CreateIcebergAddLicenseFromFileResponse.from_dictionary)
            .local_error('default', 'unexpected error', ErrorException)
        ).execute()

    def retrieve_iceberg_get_all_license_id(self,
                                            x_iam_token=None):
        """Does a GET request to /license/keys/.

        Get the list of all available license id's.

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/license/keys/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('default', 'unexpected error', ErrorException)
        ).execute()

    def update_iceberg_replace_license(self,
                                       license_raw_keys,
                                       x_iam_token=None):
        """Does a PUT request to /license/keys/.

        Update existing license keys with the new one provided in this
        request.

        Args:
            license_raw_keys (LicenseRawKeysSchema): License raw keys
                contents
            x_iam_token (str, optional): authentication header object

        Returns:
            UpdateIcebergReplaceLicenseResponse: Response from the API.
                Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/license/keys/')
            .http_method(HttpMethodEnum.PUT)
            .body_param(Parameter()
                        .value(license_raw_keys))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UpdateIcebergReplaceLicenseResponse.from_dictionary)
            .local_error('default', 'unexpected error', ErrorException)
        ).execute()

    def delete_iceberg_delete_license_by_id(self,
                                            license_id,
                                            x_iam_token=None):
        """Does a DELETE request to /license/key/{license_id}/.

        Delete a license matching the license id.

        Args:
            license_id (str): License id
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/license/key/{license_id}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('license_id')
                            .value(license_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_license_file_by_license_id(self,
                                                    license_id,
                                                    x_iam_token=None):
        """Does a GET request to /license/key/{license_id}/.

        Download the specified license file based on license id.

        Args:
            license_id (str): License id
            x_iam_token (str, optional): authentication header object

        Returns:
            binary: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/license/key/{license_id}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('license_id')
                            .value(license_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('default', 'unexpected error', ErrorException)
        ).endpoint_configuration(
            EndpointConfiguration()
            .has_binary_response(True)
        ).execute()

    def retrieve_iceberg_license_key_contents(self,
                                              x_iam_token=None):
        """Does a GET request to /license/keys/contents/.

        Get the license key contents for all the available licenses.

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            LicenseKeysSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/license/keys/contents/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LicenseKeysSchema.from_dictionary)
            .local_error('default', 'unexpected error', ErrorException)
        ).execute()

    def retrieve_iceberg_license_key_contents_by_id(self,
                                                    license_id,
                                                    x_iam_token=None):
        """Does a GET request to /license/key/{license_id}/contents/.

        Get the license key contents by the license id.

        Args:
            license_id (str): License id
            x_iam_token (str, optional): authentication header object

        Returns:
            LicenseKeySchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/license/key/{license_id}/contents/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('license_id')
                            .value(license_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LicenseKeySchema.from_dictionary)
            .local_error('default', 'unexpected error', ErrorException)
        ).execute()

    def retrieve_iceberg_license_features_info(self,
                                               x_iam_token=None):
        """Does a GET request to /license/status/.

        Get the status of all the licensed features. Also provides the
        compliance info per feature

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            LicenseFeaturesSchema: Response from the API. Successful
                operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/license/status/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LicenseFeaturesSchema.from_dictionary)
            .local_error('default', 'unexpected error', ErrorException)
        ).execute()
