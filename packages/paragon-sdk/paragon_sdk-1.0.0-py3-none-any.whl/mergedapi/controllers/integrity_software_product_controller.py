# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mergedapi.api_helper import APIHelper
from mergedapi.configuration import Server
from mergedapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mergedapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from mergedapi.models.integrity_list_software_products_response import IntegrityListSoftwareProductsResponse
from mergedapi.models.integrity_create_software_product_response import IntegrityCreateSoftwareProductResponse
from mergedapi.models.integrity_update_software_product_response import IntegrityUpdateSoftwareProductResponse
from mergedapi.models.integrity_read_software_product_response import IntegrityReadSoftwareProductResponse
from mergedapi.exceptions.googlerpc_status_exception import GooglerpcStatusException


class IntegritySoftwareProductController(BaseController):

    """A Controller to access Endpoints in the mergedapi API."""
    def __init__(self, config):
        super(IntegritySoftwareProductController, self).__init__(config)

    def integrity_service_list_software_products(self,
                                                 org_id):
        """Does a GET request to /trust/api/v1.1alpha/{orgId}/integrity/swproducts.

        List all software products from the server.

        Args:
            org_id (str): TODO: type description here.

        Returns:
            IntegrityListSoftwareProductsResponse: Response from the API. A
                successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/trust/api/v1.1alpha/{orgId}/integrity/swproducts')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('orgId')
                            .value(org_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('APIKeyHeader'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(IntegrityListSoftwareProductsResponse.from_dictionary)
            .local_error('default', 'An unexpected error response.', GooglerpcStatusException)
        ).execute()

    def integrity_service_create_software_product(self,
                                                  org_id,
                                                  body):
        """Does a POST request to /trust/api/v1.1alpha/{orgId}/integrity/swproducts.

        Create software product on the server

        Args:
            org_id (str): TODO: type description here.
            body (TrustApiV11alphaIntegritySwproductsRequest): TODO: type
                description here.

        Returns:
            IntegrityCreateSoftwareProductResponse: Response from the API. A
                successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/trust/api/v1.1alpha/{orgId}/integrity/swproducts')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('orgId')
                            .value(org_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('APIKeyHeader'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(IntegrityCreateSoftwareProductResponse.from_dictionary)
            .local_error('default', 'An unexpected error response.', GooglerpcStatusException)
        ).execute()

    def integrity_service_update_software_product(self,
                                                  org_id,
                                                  body):
        """Does a PUT request to /trust/api/v1.1alpha/{orgId}/integrity/swproducts.

        Update software product on the server.

        Args:
            org_id (str): TODO: type description here.
            body (TrustApiV11alphaIntegritySwproductsRequest): TODO: type
                description here.

        Returns:
            IntegrityUpdateSoftwareProductResponse: Response from the API. A
                successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/trust/api/v1.1alpha/{orgId}/integrity/swproducts')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('orgId')
                            .value(org_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('APIKeyHeader'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(IntegrityUpdateSoftwareProductResponse.from_dictionary)
            .local_error('default', 'An unexpected error response.', GooglerpcStatusException)
        ).execute()

    def integrity_service_read_software_product(self,
                                                org_id,
                                                id):
        """Does a GET request to /trust/api/v1.1alpha/{orgId}/integrity/swproducts/{id}.

        Read software product from the server.

        Args:
            org_id (str): TODO: type description here.
            id (str): TODO: type description here.

        Returns:
            IntegrityReadSoftwareProductResponse: Response from the API. A
                successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/trust/api/v1.1alpha/{orgId}/integrity/swproducts/{id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('orgId')
                            .value(org_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('APIKeyHeader'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(IntegrityReadSoftwareProductResponse.from_dictionary)
            .local_error('default', 'An unexpected error response.', GooglerpcStatusException)
        ).execute()

    def integrity_service_delete_software_product(self,
                                                  org_id,
                                                  id):
        """Does a DELETE request to /trust/api/v1.1alpha/{orgId}/integrity/swproducts/{id}.

        Delete software product on the server.

        Args:
            org_id (str): TODO: type description here.
            id (str): TODO: type description here.

        Returns:
            object: Response from the API. A successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/trust/api/v1.1alpha/{orgId}/integrity/swproducts/{id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('orgId')
                            .value(org_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('APIKeyHeader'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('default', 'An unexpected error response.', GooglerpcStatusException)
        ).execute()
