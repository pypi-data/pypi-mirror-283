# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mergedapi.api_helper import APIHelper
from mergedapi.configuration import Server
from mergedapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mergedapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from mergedapi.models.compliance_list_documents_response import ComplianceListDocumentsResponse
from mergedapi.models.compliance_create_document_response import ComplianceCreateDocumentResponse
from mergedapi.models.compliance_read_document_response import ComplianceReadDocumentResponse
from mergedapi.exceptions.googlerpc_status_exception import GooglerpcStatusException


class ComplianceDocumentController(BaseController):

    """A Controller to access Endpoints in the mergedapi API."""
    def __init__(self, config):
        super(ComplianceDocumentController, self).__init__(config)

    def compliance_service_list_documents(self,
                                          org_id,
                                          location=None,
                                          name=None):
        """Does a GET request to /trust/api/v1.1alpha/{orgId}/compliance/documents.

        List all compliance documents registered on the server.

        Args:
            org_id (str): TODO: type description here.
            location (str, optional): Optionally limits the documents returned
                to those with a specific location.
            name (str, optional): Optionally limits the documents returned to
                those with a specific name.

        Returns:
            ComplianceListDocumentsResponse: Response from the API. A
                successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/trust/api/v1.1alpha/{orgId}/compliance/documents')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('orgId')
                            .value(org_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('location')
                         .value(location))
            .query_param(Parameter()
                         .key('name')
                         .value(name))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('APIKeyHeader'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ComplianceListDocumentsResponse.from_dictionary)
            .local_error('default', 'An unexpected error response.', GooglerpcStatusException)
        ).execute()

    def compliance_service_create_document(self,
                                           org_id,
                                           body):
        """Does a POST request to /trust/api/v1.1alpha/{orgId}/compliance/documents.

        Create compliance compliance document on the server

        Args:
            org_id (str): TODO: type description here.
            body (TrustApiV11alphaComplianceDocumentsRequest): TODO: type
                description here.

        Returns:
            ComplianceCreateDocumentResponse: Response from the API. A
                successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/trust/api/v1.1alpha/{orgId}/compliance/documents')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('orgId')
                            .value(org_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('APIKeyHeader'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ComplianceCreateDocumentResponse.from_dictionary)
            .local_error('default', 'An unexpected error response.', GooglerpcStatusException)
        ).execute()

    def compliance_service_read_document(self,
                                         org_id,
                                         id):
        """Does a GET request to /trust/api/v1.1alpha/{orgId}/compliance/documents/{id}.

        Read compliance document from the server.

        Args:
            org_id (str): TODO: type description here.
            id (str): TODO: type description here.

        Returns:
            ComplianceReadDocumentResponse: Response from the API. A
                successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/trust/api/v1.1alpha/{orgId}/compliance/documents/{id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('orgId')
                            .value(org_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('APIKeyHeader'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ComplianceReadDocumentResponse.from_dictionary)
            .local_error('default', 'An unexpected error response.', GooglerpcStatusException)
        ).execute()

    def compliance_service_delete_document(self,
                                           org_id,
                                           id):
        """Does a DELETE request to /trust/api/v1.1alpha/{orgId}/compliance/documents/{id}.

        Delete compliance document on the server.

        Args:
            org_id (str): TODO: type description here.
            id (str): TODO: type description here.

        Returns:
            object: Response from the API. A successful response.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/trust/api/v1.1alpha/{orgId}/compliance/documents/{id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('orgId')
                            .value(org_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('APIKeyHeader'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('default', 'An unexpected error response.', GooglerpcStatusException)
        ).execute()
