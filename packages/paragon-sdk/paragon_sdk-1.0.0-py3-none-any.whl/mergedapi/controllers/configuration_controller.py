# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mergedapi.api_helper import APIHelper
from mergedapi.configuration import Server
from mergedapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mergedapi.http.http_method_enum import HttpMethodEnum
from mergedapi.models.affected_groups import AffectedGroups
from mergedapi.models.device_group_schema import DeviceGroupSchema
from mergedapi.models.trigger_schema import TriggerSchema
from mergedapi.models.device_groups_schema import DeviceGroupsSchema
from mergedapi.models.device_schema import DeviceSchema
from mergedapi.models.devices_schema import DevicesSchema
from mergedapi.models.network_group_schema import NetworkGroupSchema
from mergedapi.models.network_groups_schema import NetworkGroupsSchema
from mergedapi.models.notification_schema import NotificationSchema
from mergedapi.models.notifications_schema import NotificationsSchema
from mergedapi.models.playbook_schema import PlaybookSchema
from mergedapi.models.playbooks_schema import PlaybooksSchema
from mergedapi.models.retention_policies_schema import RetentionPoliciesSchema
from mergedapi.models.retention_policy_schema import RetentionPolicySchema
from mergedapi.models.schedulers_schema import SchedulersSchema
from mergedapi.models.scheduler_schema import SchedulerSchema
from mergedapi.models.destinations_schema import DestinationsSchema
from mergedapi.models.destination_schema import DestinationSchema
from mergedapi.models.reports_schema import ReportsSchema
from mergedapi.models.report_schema import ReportSchema
from mergedapi.models.topic_schema import TopicSchema
from mergedapi.models.rule_schema import RuleSchema
from mergedapi.models.topics_schema import TopicsSchema
from mergedapi.models.organizations_schema import OrganizationsSchema
from mergedapi.exceptions.error_exception import ErrorException
from mergedapi.exceptions.api_exception import APIException


class ConfigurationController(BaseController):

    """A Controller to access Endpoints in the mergedapi API."""
    def __init__(self, config):
        super(ConfigurationController, self).__init__(config)

    def retrieve_orchestrator(self,
                              x_iam_token=None):
        """Does a GET request to /orchestrator/.

        Get orchestrator type. Will be one of kubernetes or compose.

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/orchestrator/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def rollback_unsaved_configuration(self,
                                       x_iam_token=None,
                                       ems_sanity=False):
        """Does a DELETE request to /config/configuration/.

        The API server follows a commit model. Unsaved configuration is called
        a working configuration. This API call deletes the working
        configuration.

        Args:
            x_iam_token (str, optional): authentication header object
            ems_sanity (bool, optional): DEBUG (Use with caution): roll-back a
                faulty transaction in HB-EMS communication

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/configuration/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('ems_sanity')
                         .value(ems_sanity))
        ).execute()

    def retrieve_affected_groups(self,
                                 x_iam_token=None):
        """Does a GET request to /config/configuration/.

        Get all groups that are affected by the un-committed configuration
        changes.

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            AffectedGroups: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/configuration/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AffectedGroups.from_dictionary)
            .local_error('default', 'unexpected error', ErrorException)
        ).execute()

    def commit_unsaved_configuration(self,
                                     x_iam_token=None,
                                     sync=True):
        """Does a POST request to /config/configuration/.

        Commit the configuration in configuration database. Services of all
        the affected groups are started or restarted. If there is an error in
        the configuration, changes would not be saved into the database. If
        there is some system error, changes would be saved into the database.

        Args:
            x_iam_token (str, optional): authentication header object
            sync (bool, optional): Boolean variable is set to false allow the
                commit to go asynchronously, default value is true which means
                commit will go synchronously

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/configuration/')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('sync')
                         .value(sync))
        ).execute()

    def commit_configuration_publish_devices(self,
                                             service,
                                             x_iam_token=None):
        """Does a POST request to /config/configuration/publish/devices/.

        Initiate publish of active devices to the kafka bus

        Args:
            service (str): TODO: type description here.
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/configuration/publish/devices/')
            .http_method(HttpMethodEnum.POST)
            .query_param(Parameter()
                         .key('service')
                         .value(service))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def initialize(self,
                   x_iam_token=None,
                   restart_groups=True,
                   reload_rules=True,
                   reload_playbooks=True,
                   reload_syslog_patterns=True,
                   reload_syslog_pattern_sets=True,
                   reload_flow_templates=True,
                   reload_sflow_schema=True):
        """Does a POST request to /config/initialize/.

        Initialize config-server

        Args:
            x_iam_token (str, optional): authentication header object
            restart_groups (bool, optional): Boolean variable is set to true
                if group services have to be restarted. Defaults to true.
            reload_rules (bool, optional): Boolean variable is set to true if
                default rules have to reloaded. Defaults to true.
            reload_playbooks (bool, optional): Boolean variable is set to true
                if default playbooks have to be reloaded. Defaults to true.
            reload_syslog_patterns (bool, optional): Boolean variable is set
                to true if syslog patterns have to be reloaded. Defaults to
                true.
            reload_syslog_pattern_sets (bool, optional): Boolean variable is
                set to true if syslog pattern sets have to be reloaded.
                Defaults to true.
            reload_flow_templates (bool, optional): Boolean variable is set to
                true if flow templates have to be reloaded. Defaults to true.
            reload_sflow_schema (bool, optional): Boolean variable is set to
                true if sflow schema has to be reloaded. Defaults to true.

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/initialize/')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('restart_groups')
                         .value(restart_groups))
            .query_param(Parameter()
                         .key('reload_rules')
                         .value(reload_rules))
            .query_param(Parameter()
                         .key('reload_playbooks')
                         .value(reload_playbooks))
            .query_param(Parameter()
                         .key('reload_syslog_patterns')
                         .value(reload_syslog_patterns))
            .query_param(Parameter()
                         .key('reload_syslog_pattern_sets')
                         .value(reload_syslog_pattern_sets))
            .query_param(Parameter()
                         .key('reload_flow_templates')
                         .value(reload_flow_templates))
            .query_param(Parameter()
                         .key('reload_sflow_schema')
                         .value(reload_sflow_schema))
        ).execute()

    def delete_healthbot_ingest_byoi_ingest_mappings(self,
                                                     x_iam_token=None):
        """Does a DELETE request to /config/ingest/byoi/ingest-mappings/.

        Delete all ingest-mappings.

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/byoi/ingest-mappings/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def delete_healthbot_ingest_settings_byoi_ingest_mappings(self,
                                                              x_iam_token=None):
        """Does a DELETE request to /config/ingest-settings/byoi/ingest-mappings/.

        Delete all ingest-mappings.

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/byoi/ingest-mappings/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def check_device_group_unsaved_configuration(self,
                                                 device_group_name,
                                                 x_iam_token=None):
        """Does a POST request to /config/configuration/check/device-group/{device_group_name}/.

        Checks if the un-committed configuration of a device-group is correct.
        The un-committed changes are merged with the committed configuration
        and the complete configuration required for the supplied device-group
        is validated.

        Args:
            device_group_name (str): Name of device group
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/configuration/check/device-group/{device_group_name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('device_group_name')
                            .value(device_group_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def check_network_group_unsaved_configuration(self,
                                                  network_group_name,
                                                  x_iam_token=None):
        """Does a POST request to /config/configuration/check/network-group/{network_group_name}/.

        Checks if the un-committed configuration of a network-group is
        correct. The un-committed changes are merged with the committed
        configuration and the complete configuration required for the supplied
        network-group is validated.

        Args:
            network_group_name (str): Name of network group
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/configuration/check/network-group/{network_group_name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('network_group_name')
                            .value(network_group_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_device_group_device_group(self,
                                                   x_iam_token=None,
                                                   working=None):
        """Does a GET request to /config/device-group/.

        Get a list of all the device-group names.

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries un-committed configuration

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/device-group/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def delete_iceberg_device_group_device_group_by_id(self,
                                                       device_group_name,
                                                       x_iam_token=None):
        """Does a DELETE request to /config/device-group/{device_group_name}/.

        Delete a device-group by `device-group-name`. Delete will fail if the
        device-group's services are running.

        Args:
            device_group_name (str): ID of device-group-name
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/device-group/{device_group_name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('device_group_name')
                            .value(device_group_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_device_group_device_group_by_id(self,
                                                         device_group_name,
                                                         x_iam_token=None,
                                                         working=None):
        """Does a GET request to /config/device-group/{device_group_name}/.

        Get configuration details of a device group by the device group name.

        Args:
            device_group_name (str): ID of device-group-name
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries un-committed configuration

        Returns:
            DeviceGroupSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/device-group/{device_group_name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('device_group_name')
                            .value(device_group_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DeviceGroupSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_device_group_device_group_by_id(self,
                                                       device_group_name,
                                                       device_group,
                                                       x_iam_token=None):
        """Does a POST request to /config/device-group/{device_group_name}/.

        Create/Update a device-group by `device-group-name`. The
        `device-group-name` specified in URL and the request body must match.
        If the device-group already exists then, old content will be updated
        with the new content

        Args:
            device_group_name (str): ID of device-group-name
            device_group (DeviceGroupSchema): device_groupbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/device-group/{device_group_name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('device_group_name')
                            .value(device_group_name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(device_group))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_device_group_device_group_by_id(self,
                                                       device_group_name,
                                                       device_group,
                                                       x_iam_token=None):
        """Does a PUT request to /config/device-group/{device_group_name}/.

        Overwrite a device-group by its `device-group-name`. The
        `device-group-name` specified in the URL and the request body must
        match.

        Args:
            device_group_name (str): ID of device-group-name
            device_group (DeviceGroupSchema): device_groupbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/device-group/{device_group_name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('device_group_name')
                            .value(device_group_name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(device_group))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_device_group_status(self,
                                     device_group_name,
                                     x_iam_token=None):
        """Does a GET request to /device-group/{device_group_name}/status/.

        Get information about the status of a device-group's services.

        Args:
            device_group_name (str): Name of device-group
            x_iam_token (str, optional): authentication header object

        Returns:
            Dict[str, str]: Response from the API. Running status of
                device-group services

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/device-group/{device_group_name}/status/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('device_group_name')
                            .value(device_group_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('default', 'unexpected error', ErrorException)
        ).execute()

    def retrieve_device_group_trigger_info(self,
                                           device_group_name,
                                           x_iam_token=None):
        """Does a GET request to /device-group/{device_group_name}/trigger_info/.

        Get information about the triggers in a device-group.

        Args:
            device_group_name (str): Name of device-group
            x_iam_token (str, optional): authentication header object

        Returns:
            TriggerSchema: Response from the API. Trigger info for a device
                group.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/device-group/{device_group_name}/trigger_info/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('device_group_name')
                            .value(device_group_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TriggerSchema.from_dictionary)
            .local_error('default', 'unexpected error', ErrorException)
        ).execute()

    def remove_iceberg_devices_from_group(self,
                                          device_group_name,
                                          devices,
                                          x_iam_token=None):
        """Does a DELETE request to /config/device-group/{device_group_name}/device/.

        Remove the list of devices from the device group

        Args:
            device_group_name (str): ID of group
            devices (Devices): device list
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/device-group/{device_group_name}/device/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('device_group_name')
                            .value(device_group_name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(devices))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/json; charset=utf-8'))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_iceberg_device_groups_device_groups_by_id(self,
                                                         x_iam_token=None):
        """Does a DELETE request to /config/device-groups/.

        Delete all device-groups. Delete fails if services are still running
        for the device groups.

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/device-groups/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_device_groups_device_groups(self,
                                                     x_iam_token=None,
                                                     working=None):
        """Does a GET request to /config/device-groups/.

        Get configuration details of all the device-groups.

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries un-committed configuration

        Returns:
            DeviceGroupsSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/device-groups/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DeviceGroupsSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_device_groups_device_groups_by_id(self,
                                                         device_groups,
                                                         x_iam_token=None):
        """Does a POST request to /config/device-groups/.

        Create/Update multiple device-groups. The new content for the existing
        device-groups updates the existing content and new device-groups are
        created.

        Args:
            device_groups (DeviceGroupsSchema): device-groupsbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/device-groups/')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(device_groups))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_device_groups_device_groups_by_id(self,
                                                         device_groups,
                                                         x_iam_token=None):
        """Does a PUT request to /config/device-groups/.

        Overwrite the existing configuration of device-groups. New
        device-groups are created and the existing device-groups are
        overwritten with new content. If some existing device-groups are not
        present in the payload, such device-groups are deleted. This will fail
        if any of the device-groups that are not present in the payload have
        running services.

        Args:
            device_groups (DeviceGroupsSchema): device-groupsbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/device-groups/')
            .http_method(HttpMethodEnum.PUT)
            .body_param(Parameter()
                        .value(device_groups))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_iceberg_device_device(self,
                                       x_iam_token=None,
                                       working=None):
        """Does a GET request to /config/device/.

        Get a list of all the device IDs.

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries un-committed configuration

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/device/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def delete_iceberg_device_device_by_id(self,
                                           device_id,
                                           x_iam_token=None):
        """Does a DELETE request to /config/device/{device_id}/.

        Delete a device by `device-id`. Delete will fail if the device is
        being referenced by a device-group.

        Args:
            device_id (str): ID of device-id
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/device/{device_id}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_device_device_by_id(self,
                                             device_id,
                                             x_iam_token=None,
                                             working=None):
        """Does a GET request to /config/device/{device_id}/.

        Get the configuration details of a device by its `device-id`.

        Args:
            device_id (str): ID of device-id
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries un-committed configuration

        Returns:
            DeviceSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/device/{device_id}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DeviceSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_device_device_by_id(self,
                                           device_id,
                                           device,
                                           x_iam_token=None):
        """Does a POST request to /config/device/{device_id}/.

        Create/Update a device by `device-id`. The `device-id` specified in
        URL and the request body must match. If the device already exists
        then, old content will be updated with the new content.

        Args:
            device_id (str): ID of device-id
            device (DeviceSchema): devicebody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/device/{device_id}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(device))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_device_device_by_id(self,
                                           device_id,
                                           device,
                                           x_iam_token=None):
        """Does a PUT request to /config/device/{device_id}/.

        Overwrite a device by device ID. The device ID specified in the URL
        and the request body must match.

        Args:
            device_id (str): ID of device-id
            device (DeviceSchema): devicebody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/device/{device_id}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(device))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_iceberg_device_device_association_by_id(self,
                                                         device_id,
                                                         x_iam_token=None,
                                                         working=None):
        """Does a GET request to /config/device/{device_id}/association/.

        Get the device groups that includes the device.

        Args:
            device_id (str): ID of device-id
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries un-committed configuration

        Returns:
            List[DeviceGroupSchema]: Response from the API. Successful
                operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/device/{device_id}/association/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DeviceGroupSchema.from_dictionary)
            .local_error('403', 'If jcloud auto create is enabled, the api is not supported since the device association should be taken from mist services', APIException)
            .local_error('404', 'Provided device not found in database', APIException)
            .local_error('500', 'Internal Server Error', APIException)
        ).execute()

    def delete_iceberg_devices_devices_by_id(self,
                                             x_iam_token=None):
        """Does a DELETE request to /config/devices/.

        Delete all devices. This will fail if any device is referenced in any
        device-group.

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/devices/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_devices_devices(self,
                                         x_iam_token=None,
                                         working=None,
                                         device_group_name=None):
        """Does a GET request to /config/devices/.

        Get the configuration details of all devices.

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries un-committed configuration
            device_group_name (str, optional): Queries devices in a particular
                device group

        Returns:
            DevicesSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/devices/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .query_param(Parameter()
                         .key('device_group_name')
                         .value(device_group_name))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DevicesSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_devices_devices_by_id(self,
                                             devices,
                                             x_iam_token=None):
        """Does a POST request to /config/devices/.

        Create/Update multiple devices. The new content for the existing
        devices updates the existing content and the new devices are created.

        Args:
            devices (DevicesSchema): devicesbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/devices/')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(devices))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_devices_devices_by_id(self,
                                             devices,
                                             x_iam_token=None):
        """Does a PUT request to /config/devices/.

        Overwrite the existing configuration of devices. New devices are
        created and the existing devices are overwritten with new content. If
        some existing devices are not present in the payload, such devices are
        deleted. This will fail if any of the devices that are not present in
        the payload are referenced by a device-group.

        Args:
            devices (DevicesSchema): devicesbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/devices/')
            .http_method(HttpMethodEnum.PUT)
            .body_param(Parameter()
                        .value(devices))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_iceberg_network_group_network_group(self,
                                                     x_iam_token=None,
                                                     working=None):
        """Does a GET request to /config/network-group/.

        Get a list of all the `network-group-name`s.

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries un-committed configuration

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/network-group/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def remove_iceberg_network_group_network_group_by_id(self,
                                                         network_group_name,
                                                         network_variable,
                                                         x_iam_token=None):
        """Does a DELETE request to /config/network-group/{network_group_name}/variable/.

        Overwrite a network-group by the `network-group-name`. The
        `network-group-name` specified in the URL and the request body must
        match.

        Args:
            network_group_name (str): ID of network-group-name
            network_variable (List[NetworkVariableSchema]): network_groupbody
                object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/network-group/{network_group_name}/variable/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('network_group_name')
                            .value(network_group_name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(network_variable))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_iceberg_network_group_network_group_by_id(self,
                                                         network_group_name,
                                                         x_iam_token=None):
        """Does a DELETE request to /config/network-group/{network_group_name}/.

        Delete a network-group by `network-group-name`. Delete will fail if
        the network-group's services are running.

        Args:
            network_group_name (str): ID of network-group-name
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/network-group/{network_group_name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('network_group_name')
                            .value(network_group_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_network_group_network_group_by_id(self,
                                                           network_group_name,
                                                           x_iam_token=None,
                                                           working=None):
        """Does a GET request to /config/network-group/{network_group_name}/.

        Get the configuration details of a network group by its network group
        name.

        Args:
            network_group_name (str): ID of network-group-name
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries un-committed configuration

        Returns:
            NetworkGroupSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/network-group/{network_group_name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('network_group_name')
                            .value(network_group_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(NetworkGroupSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_network_group_network_group_by_id(self,
                                                         network_group_name,
                                                         network_group,
                                                         x_iam_token=None):
        """Does a POST request to /config/network-group/{network_group_name}/.

        Create/Update a network-group by `network-group-name`. The
        `network-group-name` parameter specified in URL and the request body
        must match. If the network-group already exists then, the existing
        network-group's configuration will be updated with the new content.

        Args:
            network_group_name (str): ID of network-group-name
            network_group (NetworkGroupSchema): network_groupbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/network-group/{network_group_name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('network_group_name')
                            .value(network_group_name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(network_group))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_network_group_network_group_by_id(self,
                                                         network_group_name,
                                                         network_group,
                                                         x_iam_token=None):
        """Does a PUT request to /config/network-group/{network_group_name}/.

        Overwrite a network-group by the `network-group-name`. The
        `network-group-name` specified in the URL and the request body must
        match.

        Args:
            network_group_name (str): ID of network-group-name
            network_group (NetworkGroupSchema): network_groupbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/network-group/{network_group_name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('network_group_name')
                            .value(network_group_name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(network_group))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_network_group_status(self,
                                      network_group_name,
                                      x_iam_token=None):
        """Does a GET request to /network-group/{network_group_name}/status/.

        Get information about the status of a network-group's services.

        Args:
            network_group_name (str): Name of network-group
            x_iam_token (str, optional): authentication header object

        Returns:
            Dict[str, str]: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/network-group/{network_group_name}/status/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('network_group_name')
                            .value(network_group_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('default', 'unexpected error', ErrorException)
        ).execute()

    def retrieve_network_group_trigger_info(self,
                                            network_group_name,
                                            x_iam_token=None):
        """Does a GET request to /network-group/{network_group_name}/trigger_info/.

        Get information about the triggers in a device-group.

        Args:
            network_group_name (str): Name of network-group
            x_iam_token (str, optional): authentication header object

        Returns:
            TriggerSchema: Response from the API. Trigger info for a network
                group.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/network-group/{network_group_name}/trigger_info/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('network_group_name')
                            .value(network_group_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TriggerSchema.from_dictionary)
            .local_error('default', 'unexpected error', ErrorException)
        ).execute()

    def delete_iceberg_network_groups_network_groups_by_id(self,
                                                           x_iam_token=None):
        """Does a DELETE request to /config/network-groups/.

        Delete all network-groups. Delete will fail if services are still
        running for the network groups.

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/network-groups/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_network_groups_network_groups(self,
                                                       x_iam_token=None,
                                                       working=None):
        """Does a GET request to /config/network-groups/.

        Get configuration of all network-groups.

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries un-committed configuration

        Returns:
            NetworkGroupsSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/network-groups/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(NetworkGroupsSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_network_groups_network_groups_by_id(self,
                                                           network_groups,
                                                           x_iam_token=None):
        """Does a POST request to /config/network-groups/.

        Create/Update multiple network-groups. The new content for the
        existing network-groups updates the existing content and the new
        network-groups are created.

        Args:
            network_groups (NetworkGroupsSchema): network-groupsbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/network-groups/')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(network_groups))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_network_groups_network_groups_by_id(self,
                                                           network_groups,
                                                           x_iam_token=None):
        """Does a PUT request to /config/network-groups/.

        Overwrite the existing network-group configuration. New network-groups
        are created and the existing network-groups are overwritten with new
        content. If some of the existing network-groups are not present in the
        payload, such network-groups are deleted. This will fail if any of the
        network-groups that are not present in the payload have running
        services.

        Args:
            network_groups (NetworkGroupsSchema): network-groupsbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/network-groups/')
            .http_method(HttpMethodEnum.PUT)
            .body_param(Parameter()
                        .value(network_groups))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_iceberg_notification_notification(self,
                                                   x_iam_token=None,
                                                   working=None):
        """Does a GET request to /config/notification/.

        Get a list of all the `notification-name`s.

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries un-committed configuration

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/notification/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def delete_iceberg_notification_notification_by_id(self,
                                                       notification_name,
                                                       x_iam_token=None):
        """Does a DELETE request to /config/notification/{notification_name}/.

        Delete a notification by `notification-name`. Delete will fail if the
        notification is referenced by a device-group.

        Args:
            notification_name (str): ID of notification-name
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/notification/{notification_name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('notification_name')
                            .value(notification_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_notification_notification_by_id(self,
                                                         notification_name,
                                                         x_iam_token=None,
                                                         working=None):
        """Does a GET request to /config/notification/{notification_name}/.

        Get the configuration details of a notification by
        `notification-name`.

        Args:
            notification_name (str): ID of notification-name
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries un-committed configuration

        Returns:
            NotificationSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/notification/{notification_name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('notification_name')
                            .value(notification_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(NotificationSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_notification_notification_by_id(self,
                                                       notification_name,
                                                       notification,
                                                       x_iam_token=None):
        """Does a POST request to /config/notification/{notification_name}/.

        Create/Update a notification by `notification-name`. The
        `notification-name` specified in URL and the request body must match.
        If the notification already exists then, the existing notification's
        configuration will be updated with the new content.

        Args:
            notification_name (str): ID of notification-name
            notification (NotificationSchema): notificationbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/notification/{notification_name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('notification_name')
                            .value(notification_name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(notification))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_notification_notification_by_id(self,
                                                       notification_name,
                                                       notification,
                                                       x_iam_token=None):
        """Does a PUT request to /config/notification/{notification_name}/.

        Overwrite a notification by the `notification-name`. The
        `notification-name` specified in URL and the request body must match.

        Args:
            notification_name (str): ID of notification-name
            notification (NotificationSchema): notificationbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/notification/{notification_name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('notification_name')
                            .value(notification_name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(notification))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_iceberg_notifications_notifications_by_id(self,
                                                         x_iam_token=None):
        """Does a DELETE request to /config/notifications/.

        Delete all notifications. This will fail if any notification is
        referenced in any device-group.

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/notifications/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_notifications_notifications_by_id(self,
                                                           x_iam_token=None,
                                                           working=None):
        """Does a GET request to /config/notifications/.

        Get the configuration details of all notifications.

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries un-committed configuration

        Returns:
            NotificationsSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/notifications/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(NotificationsSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_notifications_notifications_by_id(self,
                                                         notifications,
                                                         x_iam_token=None):
        """Does a POST request to /config/notifications/.

        Create/Update multiple notifications. The new content for the existing
        notifications updates the existing content and the new notifications
        are created.

        Args:
            notifications (NotificationsSchema): notificationsbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/notifications/')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(notifications))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_notifications_notifications_by_id(self,
                                                         notifications,
                                                         x_iam_token=None):
        """Does a PUT request to /config/notifications/.

        Overwrite the existing notifications configuration. New notifications
        are created and existing notifications are overwritten with new
        content. If some of the existing notifications are not present in the
        payload, such notifications are deleted. This will fail if any of the
        notifications that are not present in the payload are referenced by a
        device-group.

        Args:
            notifications (NotificationsSchema): notificationsbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/notifications/')
            .http_method(HttpMethodEnum.PUT)
            .body_param(Parameter()
                        .value(notifications))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_iceberg_playbook_playbook(self,
                                           x_iam_token=None,
                                           working=None):
        """Does a GET request to /config/playbook/.

        Get a list of all the `playbook-name`s.

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries un-committed configuration

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/playbook/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def delete_iceberg_playbook_playbook_by_id(self,
                                               playbook_name,
                                               x_iam_token=None):
        """Does a DELETE request to /config/playbook/{playbook_name}/.

        Delete a playbook by `playbook-name`. Delete will fail if the playbook
        is referenced by a device-group.

        Args:
            playbook_name (str): ID of playbook-name
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/playbook/{playbook_name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('playbook_name')
                            .value(playbook_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_playbook_playbook_by_id(self,
                                                 playbook_name,
                                                 x_iam_token=None,
                                                 working=None,
                                                 download=None):
        """Does a GET request to /config/playbook/{playbook_name}/.

        Get the configuration details of a playbook by `playbook-name`.

        Args:
            playbook_name (str): ID of playbook-name
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries un-committed configuration
            download (bool, optional): Download as compressed .playbook file

        Returns:
            PlaybookSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/playbook/{playbook_name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('playbook_name')
                            .value(playbook_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .query_param(Parameter()
                         .key('download')
                         .value(download))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PlaybookSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_playbook_playbook_by_id(self,
                                               playbook_name,
                                               playbook,
                                               x_iam_token=None):
        """Does a POST request to /config/playbook/{playbook_name}/.

        Create/Update a playbook by `playbook-name`. The `playbook-name`
        specified in URL and the request body must match. If the playbook
        already exists then, the existing playbook's configuration will be
        updated with the new content.

        Args:
            playbook_name (str): ID of playbook-name
            playbook (PlaybookSchema): playbookbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/playbook/{playbook_name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('playbook_name')
                            .value(playbook_name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(playbook))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_playbook_playbook_by_id(self,
                                               playbook_name,
                                               playbook,
                                               x_iam_token=None):
        """Does a PUT request to /config/playbook/{playbook_name}/.

        Overwrite a playbook by the `playbook-name`. The `playbook-name`
        specified in the URL and the request body must match.

        Args:
            playbook_name (str): ID of playbook-name
            playbook (PlaybookSchema): playbookbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/playbook/{playbook_name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('playbook_name')
                            .value(playbook_name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(playbook))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_iceberg_playbooks_playbooks_by_id(self,
                                                 x_iam_token=None):
        """Does a DELETE request to /config/playbooks/.

        Delete all playbooks. This will fail if any playbook is referenced in
        any device-group.

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/playbooks/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_playbooks_playbooks_by_id(self,
                                                   x_iam_token=None,
                                                   working=None):
        """Does a GET request to /config/playbooks/.

        Get the configuration of all playbooks.

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries un-committed configuration

        Returns:
            PlaybooksSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/playbooks/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PlaybooksSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_playbooks_playbooks_by_id(self,
                                                 playbooks,
                                                 x_iam_token=None):
        """Does a POST request to /config/playbooks/.

        Create/Update multiple playbooks. The new content for the existing
        playbooks updates the existing content and the new playbooks are
        created.

        Args:
            playbooks (PlaybooksSchema): playbooksbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/playbooks/')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(playbooks))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_playbooks_playbooks_by_id(self,
                                                 playbooks,
                                                 x_iam_token=None):
        """Does a PUT request to /config/playbooks/.

        Overwrite the existing playbooks configuration. New playbooks are
        created and existing playbooks are overwritten with new content. If
        some of the existing playbooks are not present in the payload, such
        playbooks are deleted. This will fail if any of the playbooks that are
        not present in the payload are referenced by a device-group.

        Args:
            playbooks (PlaybooksSchema): playbooksbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/playbooks/')
            .http_method(HttpMethodEnum.PUT)
            .body_param(Parameter()
                        .value(playbooks))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_iceberg_retention_policies_retention_policies_by_id(self,
                                                                   x_iam_token=None):
        """Does a DELETE request to /config/retention-policies/.

        Delete all the retention policies. This will fail if any
        retention-policy is referenced in any device-group.

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/retention-policies/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_retention_policies_retention_policies_by_id(self,
                                                                     x_iam_token=None,
                                                                     working=None):
        """Does a GET request to /config/retention-policies/.

        Get the configuration of all the retention-policies.

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries un-committed configuration

        Returns:
            RetentionPoliciesSchema: Response from the API. Successful
                operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/retention-policies/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RetentionPoliciesSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_retention_policies_retention_policies_by_id(self,
                                                                   retention_policies,
                                                                   x_iam_token=None):
        """Does a POST request to /config/retention-policies/.

        Create/Update multiple retention-policies. The new content for the
        existing retention-policies update the existing content and the new
        retention-policies are created.

        Args:
            retention_policies (RetentionPoliciesSchema):
                retention-policiesbody object object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/retention-policies/')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(retention_policies))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_retention_policies_retention_policies_id(self,
                                                                retention_policies,
                                                                x_iam_token=None):
        """Does a PUT request to /config/retention-policies/.

        Overwrite the existing retention-policies configuration. New
        retention-policies are created and existing retention-policies are
        overwritten with new content. If some existing retention-policies are
        not present in the payload, such retention-policies are deleted. This
        will fail if any of the retention-policies that are not present in the
        payload are referenced by a device-group.

        Args:
            retention_policies (RetentionPoliciesSchema): retention-policies
                body object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/retention-policies/')
            .http_method(HttpMethodEnum.PUT)
            .body_param(Parameter()
                        .value(retention_policies))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_iceberg_retention_policy_retention_policy(self,
                                                           x_iam_token=None,
                                                           working=None):
        """Does a GET request to /config/retention-policy/.

        Get a list of all the `retention-policy-name`s.

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries un-committed configuration

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/retention-policy/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def delete_iceberg_retention_policy_retention_policy_by_id(self,
                                                               retention_policy_name,
                                                               x_iam_token=None):
        """Does a DELETE request to /config/retention-policy/{retention_policy_name}/.

        Delete a retention-policy by `retention-policy-name`. Delete will fail
        if the retention-policy is referenced by a device-group.

        Args:
            retention_policy_name (str): ID of retention-policy-name
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/retention-policy/{retention_policy_name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('retention_policy_name')
                            .value(retention_policy_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_retention_policy_retention_policy_by_id(self,
                                                                 retention_policy_name,
                                                                 x_iam_token=None,
                                                                 working=None):
        """Does a GET request to /config/retention-policy/{retention_policy_name}/.

        Get the configuration details of a retention policy by
        `retention-policy-name`.

        Args:
            retention_policy_name (str): ID of retention-policy-name
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries un-committed configuration

        Returns:
            RetentionPolicySchema: Response from the API. Successful
                operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/retention-policy/{retention_policy_name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('retention_policy_name')
                            .value(retention_policy_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RetentionPolicySchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_retention_policy_retention_policy_by_id(self,
                                                               retention_policy_name,
                                                               retention_policy,
                                                               x_iam_token=None):
        """Does a POST request to /config/retention-policy/{retention_policy_name}/.

        Create/Update a retention-policy by `retention-policy-name`. The
        `retention-policy-name` specified in URL and the request body must
        match. If the retention-policy exists then, the existing
        retention-policy's configuration will be updated by the new content.

        Args:
            retention_policy_name (str): ID of retention-policy-name
            retention_policy (RetentionPolicySchema): retention_policybody
                object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/retention-policy/{retention_policy_name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('retention_policy_name')
                            .value(retention_policy_name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(retention_policy))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_retention_policy_retention_policy_by_id(self,
                                                               retention_policy_name,
                                                               retention_policy,
                                                               x_iam_token=None):
        """Does a PUT request to /config/retention-policy/{retention_policy_name}/.

        Overwrite a retention-policy by the `retention-policy-name`. The
        `retention-policy-name` specified in URL and the request body must
        match.

        Args:
            retention_policy_name (str): ID of retention-policy-name
            retention_policy (RetentionPolicySchema): retention_policybody
                object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/retention-policy/{retention_policy_name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('retention_policy_name')
                            .value(retention_policy_name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(retention_policy))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_iceberg_system_system_by_id(self,
                                           x_iam_token=None):
        """Does a DELETE request to /config/system/.

        Delete system. This will delete all the reports, destinations and
        schedulers. The request will fail of any of the reports is being
        referenced by a device-group or network-group.

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_system_system(self,
                                       x_iam_token=None,
                                       working=None):
        """Does a GET request to /config/system/.

        Retrieve system details

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            object: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_system_system_by_id(self,
                                           system_settings,
                                           x_iam_token=None,
                                           force_tsdb=False):
        """Does a POST request to /config/system/.

        Create/Update system to populate persist-raw-data, schedulers,
        destinations and reports.

        Args:
            system_settings (object): system_settings body object
            x_iam_token (str, optional): authentication header object
            force_tsdb (bool, optional): force update tsdb when force is set
                to True

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system/')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(system_settings))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('force_tsdb')
                         .value(force_tsdb))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_system_system_by_id(self,
                                           system_settings,
                                           x_iam_token=None,
                                           force_tsdb=False):
        """Does a PUT request to /config/system/.

        New endpoint to over-write the existing configuration of
        system-settings. New system-settings are created and existing
        system-settings are overwritten with new content. If some existing
        system-settings are not present in the payload, such system settings
        are deleted. This will fail if any of the reports in system-settings
        that are not present in the payload are referenced by a device-group
        or network-group.

        Args:
            system_settings (object): system_settings body object
            x_iam_token (str, optional): authentication header object
            force_tsdb (bool, optional): force update tsdb when force is set
                to True

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system/')
            .http_method(HttpMethodEnum.PUT)
            .body_param(Parameter()
                        .value(system_settings))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('force_tsdb')
                         .value(force_tsdb))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_iceberg_system_schedulers(self,
                                         x_iam_token=None):
        """Does a DELETE request to /config/system/schedulers/.

        Delete all schedulers. This will fail if any scheduler is referenced
        in any report.

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system/schedulers/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_system_schedulers(self,
                                           x_iam_token=None,
                                           working=None):
        """Does a GET request to /config/system/schedulers/.

        Get the configuration details of all schedulers.

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            SchedulersSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system/schedulers/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SchedulersSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_system_schedulers(self,
                                         schedulers,
                                         x_iam_token=None):
        """Does a POST request to /config/system/schedulers/.

        Create/Update multiple schdeulers. The new content for the existing
        schedulers updates the existing content and the new schedulers are
        created.

        Args:
            schedulers (SchedulersSchema): schedulersbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system/schedulers/')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(schedulers))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_system_schedulers(self,
                                         schedulers,
                                         x_iam_token=None):
        """Does a PUT request to /config/system/schedulers/.

        Update operation of resource: schedulers

        Args:
            schedulers (SchedulersSchema): schedulersbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system/schedulers/')
            .http_method(HttpMethodEnum.PUT)
            .body_param(Parameter()
                        .value(schedulers))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_iceberg_system_scheduler_by_id(self,
                                              name,
                                              x_iam_token=None):
        """Does a DELETE request to /config/system/scheduler/{name}/.

        Delete a scheduler by `name`. Delete will fail if the scheduler is
        being referenced by a report.

        Args:
            name (str): Name of Scheduler
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system/scheduler/{name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_system_scheduler_by_id(self,
                                                name,
                                                x_iam_token=None,
                                                working=None):
        """Does a GET request to /config/system/scheduler/{name}/.

        Get the configuration details of a scheduler by its `name`.

        Args:
            name (str): Name of Scheduler
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            SchedulerSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system/scheduler/{name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SchedulerSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_system_scheduler_by_id(self,
                                              name,
                                              scheduler,
                                              x_iam_token=None):
        """Does a POST request to /config/system/scheduler/{name}/.

        Create/Update a scheduler by `name`. The `name` specified in URL and
        the request body must match. If the scheduler exists then, the
        existing scheduler's configuration will be updated by the new
        content.

        Args:
            name (str): Name of Scheduler
            scheduler (SchedulerSchema): schedulerbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system/scheduler/{name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(scheduler))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_system_scheduler_by_id(self,
                                              name,
                                              scheduler,
                                              x_iam_token=None):
        """Does a PUT request to /config/system/scheduler/{name}/.

        Overwrite a scheduler by scheduler name. The scheduler name specified
        in the URL and the request body must match.

        Args:
            name (str): Name of Scheduler
            scheduler (SchedulerSchema): schedulerbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system/scheduler/{name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(scheduler))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_iceberg_system_destinations(self,
                                           x_iam_token=None):
        """Does a DELETE request to /config/system/report-generation/destinations/.

        Delete all destinations. This will fail if any destination is
        referenced in any report.

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system/report-generation/destinations/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_system_destinations(self,
                                             x_iam_token=None,
                                             working=None):
        """Does a GET request to /config/system/report-generation/destinations/.

        Get the configuration details of all destinations.

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            DestinationsSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system/report-generation/destinations/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DestinationsSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_system_destinations(self,
                                           destinations,
                                           x_iam_token=None):
        """Does a POST request to /config/system/report-generation/destinations/.

        Create/Update multiple destinations. The new content for the existing
        destinations updates the existing content and the new destinations are
        created.

        Args:
            destinations (DestinationsSchema): destinationsbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system/report-generation/destinations/')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(destinations))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_system_destinations(self,
                                           destinations,
                                           x_iam_token=None):
        """Does a PUT request to /config/system/report-generation/destinations/.

        Overwrite the existing configuration of destinations. New destinations
        are created and the existing destinations are overwritten with new
        content. If some existing destinations are not present in the payload,
        such destinations are deleted. This will fail if any of the
        destinations that are not present in the payload are referenced by a
        report.

        Args:
            destinations (DestinationsSchema): destinationsbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system/report-generation/destinations/')
            .http_method(HttpMethodEnum.PUT)
            .body_param(Parameter()
                        .value(destinations))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_iceberg_system_destination_by_id(self,
                                                name,
                                                x_iam_token=None):
        """Does a DELETE request to /config/system/report-generation/destination/{name}/.

        Delete a destination by `name`. Delete will fail if the destination is
        being referenced by a report.

        Args:
            name (str): Name of destination
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system/report-generation/destination/{name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_system_destination_by_id(self,
                                                  name,
                                                  x_iam_token=None,
                                                  working=None):
        """Does a GET request to /config/system/report-generation/destination/{name}/.

        Get the configuration details of a destination by its `name`.

        Args:
            name (str): Name of destination
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            DestinationSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system/report-generation/destination/{name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DestinationSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_system_destination_by_id(self,
                                                name,
                                                destination,
                                                x_iam_token=None):
        """Does a POST request to /config/system/report-generation/destination/{name}/.

        Create/Update a destination by `name`. The `name` specified in URL and
        the request body must match. If the destination exists then, the
        existing destination's configuration will be updated by the new
        content.

        Args:
            name (str): Name of destination
            destination (DestinationSchema): destinationsbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system/report-generation/destination/{name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(destination))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_system_destination_by_id(self,
                                                name,
                                                destination,
                                                x_iam_token=None):
        """Does a PUT request to /config/system/report-generation/destination/{name}/.

        Overwrite a destination by destination name. The destination name
        specified in the URL and the request body must match.

        Args:
            name (str): Name of destination
            destination (DestinationSchema): destinationsbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system/report-generation/destination/{name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(destination))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_iceberg_system_reports(self,
                                      x_iam_token=None):
        """Does a DELETE request to /config/system/report-generation/reports/.

        Delete all reports. This will fail if any report is referenced in any
        device-group or network-group.

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system/report-generation/reports/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_system_reports(self,
                                        x_iam_token=None,
                                        working=None):
        """Does a GET request to /config/system/report-generation/reports/.

        Get the configuration details of all reports.

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            ReportsSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system/report-generation/reports/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReportsSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_system_reports(self,
                                      reports,
                                      x_iam_token=None):
        """Does a POST request to /config/system/report-generation/reports/.

        Create/Update multiple reports. The new content for the existing
        reports updates the existing content and the new reports are created.

        Args:
            reports (ReportsSchema): reportsbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system/report-generation/reports/')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(reports))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_system_reports(self,
                                      reports,
                                      x_iam_token=None):
        """Does a PUT request to /config/system/report-generation/reports/.

        Overwrite the existing configuration of reports. New reports are
        created and the existing reports are overwritten with new content. If
        some existing reports are not present in the payload, such reports are
        deleted. This will fail if any of the reports that are not present in
        the payload are referenced by a device-group or network-group.

        Args:
            reports (ReportsSchema): reportsbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system/report-generation/reports/')
            .http_method(HttpMethodEnum.PUT)
            .body_param(Parameter()
                        .value(reports))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_iceberg_system_report_by_id(self,
                                           name,
                                           x_iam_token=None):
        """Does a DELETE request to /config/system/report-generation/report/{name}/.

        Delete a report by `name`. Delete will fail if the report is being
        referenced by a device-group or network-group.

        Args:
            name (str): Name of report
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system/report-generation/report/{name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_system_report_by_id(self,
                                             name,
                                             x_iam_token=None,
                                             working=None):
        """Does a GET request to /config/system/report-generation/report/{name}/.

        Get the configuration details of a report by its `name`.

        Args:
            name (str): Name of report
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            ReportSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system/report-generation/report/{name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReportSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_system_report_by_id(self,
                                           name,
                                           report,
                                           x_iam_token=None):
        """Does a POST request to /config/system/report-generation/report/{name}/.

        Create/Update a report by `name`. The `name` specified in URL and the
        request body must match. If the report exists then, the existing
        report's configuration will be updated by the new content.

        Args:
            name (str): Name of report
            report (ReportSchema): reportsbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system/report-generation/report/{name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(report))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_system_report_by_id(self,
                                           name,
                                           report,
                                           x_iam_token=None):
        """Does a PUT request to /config/system/report-generation/report/{name}/.

        Overwrite a report by report name. The report name specified in the
        URL and the request body must match.

        Args:
            name (str): Name of report
            report (ReportSchema): reportsbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system/report-generation/report/{name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(report))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_iceberg_system_settings_system_settings_by_id(self,
                                                             x_iam_token=None):
        """Does a DELETE request to /config/system-settings/.

        Delete system-settings. This will delete all the reports, destinations
        and schedulers. The request will fail of any of the reports is being
        referenced by a device-group or network-group.

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system-settings/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_system_settings_system_settings(self,
                                                         x_iam_token=None,
                                                         working=None):
        """Does a GET request to /config/system-settings/.

        Retrieve system-settings

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            object: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system-settings/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_system_settings_system_settings_by_id(self,
                                                             system_settings,
                                                             x_iam_token=None,
                                                             force_tsdb=False):
        """Does a POST request to /config/system-settings/.

        Create/Update system-settings to populate persis-raw-data, schedulers,
        destinations and reports.

        Args:
            system_settings (object): system_settings body object
            x_iam_token (str, optional): authentication header object
            force_tsdb (bool, optional): force update tsdb when force is set
                to True

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system-settings/')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(system_settings))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('force_tsdb')
                         .value(force_tsdb))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_system_settings_system_settings_by_id(self,
                                                             system_settings,
                                                             x_iam_token=None,
                                                             force_tsdb=False):
        """Does a PUT request to /config/system-settings/.

        Overwrite the existing configuration of system-settings. New
        system-settings are created and existing system-settings are
        overwritten with new content. If some existing system-settings are not
        present in the payload, such system-settings are deleted. This will
        fail if any of the reports in system-settings that are not present in
        the payload are referenced by a device-group or network-group.

        Args:
            system_settings (object): system_settingsbody object
            x_iam_token (str, optional): authentication header object
            force_tsdb (bool, optional): force update tsdb when force is set
                to True

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system-settings/')
            .http_method(HttpMethodEnum.PUT)
            .body_param(Parameter()
                        .value(system_settings))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('force_tsdb')
                         .value(force_tsdb))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_iceberg_system_settings_schedulers(self,
                                                  x_iam_token=None):
        """Does a DELETE request to /config/system-settings/schedulers/.

        Delete all schedulers. This will fail if any scheduler is referenced
        in any report.

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system-settings/schedulers/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_system_settings_schedulers(self,
                                                    x_iam_token=None,
                                                    working=None):
        """Does a GET request to /config/system-settings/schedulers/.

        Get the configuration details of all schedulers.

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            SchedulersSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system-settings/schedulers/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SchedulersSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_system_settings_schedulers(self,
                                                  schedulers,
                                                  x_iam_token=None):
        """Does a POST request to /config/system-settings/schedulers/.

        Create/Update multiple schdeulers. The new content for the existing
        schedulers updates the existing content and the new schedulers are
        created.

        Args:
            schedulers (SchedulersSchema): schedulersbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system-settings/schedulers/')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(schedulers))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_system_settings_schedulers(self,
                                                  schedulers,
                                                  x_iam_token=None):
        """Does a PUT request to /config/system-settings/schedulers/.

        Update operation of resource: schedulers

        Args:
            schedulers (SchedulersSchema): schedulersbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system-settings/schedulers/')
            .http_method(HttpMethodEnum.PUT)
            .body_param(Parameter()
                        .value(schedulers))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_iceberg_system_settings_scheduler_by_id(self,
                                                       name,
                                                       x_iam_token=None):
        """Does a DELETE request to /config/system-settings/scheduler/{name}/.

        Delete a scheduler by `name`. Delete will fail if the scheduler is
        being referenced by a report.

        Args:
            name (str): Name of Scheduler
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system-settings/scheduler/{name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_system_settings_scheduler_by_id(self,
                                                         name,
                                                         x_iam_token=None,
                                                         working=None):
        """Does a GET request to /config/system-settings/scheduler/{name}/.

        Get the configuration details of a scheduler by its `name`.

        Args:
            name (str): Name of Scheduler
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            SchedulerSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system-settings/scheduler/{name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SchedulerSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_system_settings_scheduler_by_id(self,
                                                       name,
                                                       scheduler,
                                                       x_iam_token=None):
        """Does a POST request to /config/system-settings/scheduler/{name}/.

        Create/Update a scheduler by `name`. The `name` specified in URL and
        the request body must match. If the scheduler exists then, the
        existing scheduler's configuration will be updated by the new
        content.

        Args:
            name (str): Name of Scheduler
            scheduler (SchedulerSchema): schedulerbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system-settings/scheduler/{name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(scheduler))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_system_settings_scheduler_by_id(self,
                                                       name,
                                                       scheduler,
                                                       x_iam_token=None):
        """Does a PUT request to /config/system-settings/scheduler/{name}/.

        Overwrite a scheduler by scheduler name. The scheduler name specified
        in the URL and the request body must match.

        Args:
            name (str): Name of Scheduler
            scheduler (SchedulerSchema): schedulerbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system-settings/scheduler/{name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(scheduler))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_iceberg_system_settings_destinations(self,
                                                    x_iam_token=None):
        """Does a DELETE request to /config/system-settings/report-generation/destinations/.

        Delete all destinations. This will fail if any destination is
        referenced in any report.

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system-settings/report-generation/destinations/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_system_settings_destinations(self,
                                                      x_iam_token=None,
                                                      working=None):
        """Does a GET request to /config/system-settings/report-generation/destinations/.

        Get the configuration details of all destinations.

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            DestinationsSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system-settings/report-generation/destinations/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DestinationsSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_system_settings_destinations(self,
                                                    destinations,
                                                    x_iam_token=None):
        """Does a POST request to /config/system-settings/report-generation/destinations/.

        Create/Update multiple destinations. The new content for the existing
        destinations updates the existing content and the new destinations are
        created.

        Args:
            destinations (DestinationsSchema): destinationsbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system-settings/report-generation/destinations/')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(destinations))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_system_settings_destinations(self,
                                                    destinations,
                                                    x_iam_token=None):
        """Does a PUT request to /config/system-settings/report-generation/destinations/.

        Overwrite the existing configuration of destinations. New destinations
        are created and the existing destinations are overwritten with new
        content. If some existing destinations are not present in the payload,
        such destinations are deleted. This will fail if any of the
        destinations that are not present in the payload are referenced by a
        report.

        Args:
            destinations (DestinationsSchema): destinationsbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system-settings/report-generation/destinations/')
            .http_method(HttpMethodEnum.PUT)
            .body_param(Parameter()
                        .value(destinations))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_iceberg_system_settings_destination_by_id(self,
                                                         name,
                                                         x_iam_token=None):
        """Does a DELETE request to /config/system-settings/report-generation/destination/{name}/.

        Delete a destination by `name`. Delete will fail if the destination is
        being referenced by a report.

        Args:
            name (str): Name of destination
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system-settings/report-generation/destination/{name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_system_settings_destination_by_id(self,
                                                           name,
                                                           x_iam_token=None,
                                                           working=None):
        """Does a GET request to /config/system-settings/report-generation/destination/{name}/.

        Get the configuration details of a destination by its `name`.

        Args:
            name (str): Name of destination
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            DestinationSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system-settings/report-generation/destination/{name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DestinationSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_system_settings_destination_by_id(self,
                                                         name,
                                                         destination,
                                                         x_iam_token=None):
        """Does a POST request to /config/system-settings/report-generation/destination/{name}/.

        Create/Update a destination by `name`. The `name` specified in URL and
        the request body must match. If the destination exists then, the
        existing destination's configuration will be updated by the new
        content.

        Args:
            name (str): Name of destination
            destination (DestinationSchema): destinationsbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system-settings/report-generation/destination/{name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(destination))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_system_settings_destination_by_id(self,
                                                         name,
                                                         destination,
                                                         x_iam_token=None):
        """Does a PUT request to /config/system-settings/report-generation/destination/{name}/.

        Overwrite a destination by destination name. The destination name
        specified in the URL and the request body must match.

        Args:
            name (str): Name of destination
            destination (DestinationSchema): destinationsbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system-settings/report-generation/destination/{name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(destination))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_iceberg_system_settings_reports(self,
                                               x_iam_token=None):
        """Does a DELETE request to /config/system-settings/report-generation/reports/.

        Delete all reports. This will fail if any report is referenced in any
        device-group or network-group.

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system-settings/report-generation/reports/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_system_settings_reports(self,
                                                 x_iam_token=None,
                                                 working=None):
        """Does a GET request to /config/system-settings/report-generation/reports/.

        Get the configuration details of all reports.

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            ReportsSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system-settings/report-generation/reports/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReportsSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_system_settings_reports(self,
                                               reports,
                                               x_iam_token=None):
        """Does a POST request to /config/system-settings/report-generation/reports/.

        Create/Update multiple reports. The new content for the existing
        reports updates the existing content and the new reports are created.

        Args:
            reports (ReportsSchema): reportsbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system-settings/report-generation/reports/')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(reports))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_system_settings_reports(self,
                                               reports,
                                               x_iam_token=None):
        """Does a PUT request to /config/system-settings/report-generation/reports/.

        Overwrite the existing configuration of reports. New reports are
        created and the existing reports are overwritten with new content. If
        some existing reports are not present in the payload, such reports are
        deleted. This will fail if any of the reports that are not present in
        the payload are referenced by a device-group or network-group.

        Args:
            reports (ReportsSchema): reportsbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system-settings/report-generation/reports/')
            .http_method(HttpMethodEnum.PUT)
            .body_param(Parameter()
                        .value(reports))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_iceberg_system_settings_report_by_id(self,
                                                    name,
                                                    x_iam_token=None):
        """Does a DELETE request to /config/system-settings/report-generation/report/{name}/.

        Delete a report by `name`. Delete will fail if the report is being
        referenced by a device-group or network-group.

        Args:
            name (str): Name of report
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system-settings/report-generation/report/{name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_system_settings_report_by_id(self,
                                                      name,
                                                      x_iam_token=None,
                                                      working=None):
        """Does a GET request to /config/system-settings/report-generation/report/{name}/.

        Get the configuration details of a report by its `name`.

        Args:
            name (str): Name of report
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            ReportSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system-settings/report-generation/report/{name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReportSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_system_settings_report_by_id(self,
                                                    name,
                                                    report,
                                                    x_iam_token=None):
        """Does a POST request to /config/system-settings/report-generation/report/{name}/.

        Create/Update a report by `name`. The `name` specified in URL and the
        request body must match. If the report exists then, the existing
        report's configuration will be updated by the new content.

        Args:
            name (str): Name of report
            report (ReportSchema): reportsbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system-settings/report-generation/report/{name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(report))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_system_settings_report_by_id(self,
                                                    name,
                                                    report,
                                                    x_iam_token=None):
        """Does a PUT request to /config/system-settings/report-generation/report/{name}/.

        Overwrite a report by report name. The report name specified in the
        URL and the request body must match.

        Args:
            name (str): Name of report
            report (ReportSchema): reportsbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system-settings/report-generation/report/{name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(report))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_iceberg_topic_topic(self,
                                     x_iam_token=None,
                                     working=None):
        """Does a GET request to /config/topic/.

        Get a list of all the `topic-name`s.

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries un-committed configuration

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/topic/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def delete_iceberg_topic_topic_by_id(self,
                                         topic_name,
                                         x_iam_token=None):
        """Does a DELETE request to /config/topic/{topic_name}/.

        Delete a topic by `topic-name`. Delete will fail if the topic is
        referenced by any other playbook.

        Args:
            topic_name (str): ID of topic-name
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/topic/{topic_name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('topic_name')
                            .value(topic_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_topic_topic_by_id(self,
                                           topic_name,
                                           x_iam_token=None,
                                           working=None):
        """Does a GET request to /config/topic/{topic_name}/.

        Get the configuration details of a topic by the `topic-name`.

        Args:
            topic_name (str): ID of topic-name
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries un-committed configuration

        Returns:
            TopicSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/topic/{topic_name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('topic_name')
                            .value(topic_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TopicSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_topic_topic_by_id(self,
                                         topic_name,
                                         topic,
                                         x_iam_token=None):
        """Does a POST request to /config/topic/{topic_name}/.

        Create/Update a topic by `topic-name`. The `topic-name` specified in
        URL and the request body must match. If the topic already exists then,
        the existing topic's configuration will be updated with the new
        content.

        Args:
            topic_name (str): ID of topic-name
            topic (TopicSchema): topicbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/topic/{topic_name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('topic_name')
                            .value(topic_name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(topic))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_topic_topic_by_id(self,
                                         topic_name,
                                         topic,
                                         x_iam_token=None):
        """Does a PUT request to /config/topic/{topic_name}/.

        Overwrite a topic by the `topic-name`. The `topic-name` specified in
        URL and the request body must match.

        Args:
            topic_name (str): ID of topic-name
            topic (TopicSchema): topicbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/topic/{topic_name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('topic_name')
                            .value(topic_name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(topic))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_iceberg_topic_rule_rule(self,
                                         topic_name,
                                         x_iam_token=None,
                                         working=None):
        """Does a GET request to /config/topic/{topic_name}/rule/.

        Get a list of all the `rule-name`s in a topic.

        Args:
            topic_name (str): ID of topic-name
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries un-committed configuration

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/topic/{topic_name}/rule/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('topic_name')
                            .value(topic_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def delete_iceberg_topic_rule_rule_by_id(self,
                                             topic_name,
                                             rule_name,
                                             x_iam_token=None):
        """Does a DELETE request to /config/topic/{topic_name}/rule/{rule_name}/.

        Delete a rule by `rule-name`. Delete will fail if the rule is
        referenced by any other playbook.

        Args:
            topic_name (str): ID of topic-name
            rule_name (str): ID of rule-name
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/topic/{topic_name}/rule/{rule_name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('topic_name')
                            .value(topic_name)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('rule_name')
                            .value(rule_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_topic_rule_rule_by_id(self,
                                               topic_name,
                                               rule_name,
                                               x_iam_token=None,
                                               working=None,
                                               download=None):
        """Does a GET request to /config/topic/{topic_name}/rule/{rule_name}/.

        Get the configuration details of a rule by `rule-name`.

        Args:
            topic_name (str): ID of topic-name
            rule_name (str): ID of rule-name
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries un-committed configuration
            download (bool, optional): Download a compressed .rule file

        Returns:
            RuleSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/topic/{topic_name}/rule/{rule_name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('topic_name')
                            .value(topic_name)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('rule_name')
                            .value(rule_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .query_param(Parameter()
                         .key('download')
                         .value(download))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RuleSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_topic_rule_rule_by_id(self,
                                             topic_name,
                                             rule_name,
                                             rule,
                                             x_iam_token=None):
        """Does a POST request to /config/topic/{topic_name}/rule/{rule_name}/.

        Create/Update a rule by `rule-name`. The `rule-name` specified in URL
        and the request body must match. If the rule already exists then, the
        existing rule's configuration will be updated with the new content

        Args:
            topic_name (str): ID of topic-name
            rule_name (str): ID of rule-name
            rule (RuleSchema): rulebody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/topic/{topic_name}/rule/{rule_name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('topic_name')
                            .value(topic_name)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('rule_name')
                            .value(rule_name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(rule))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_topic_rule_rule_by_id(self,
                                             topic_name,
                                             rule_name,
                                             rule,
                                             x_iam_token=None):
        """Does a PUT request to /config/topic/{topic_name}/rule/{rule_name}/.

        Overwrite a rule by the `rule-name`. The `rule-name` specified in URL
        and the request body must match.

        Args:
            topic_name (str): ID of topic-name
            rule_name (str): ID of rule-name
            rule (RuleSchema): rulebody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/topic/{topic_name}/rule/{rule_name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('topic_name')
                            .value(topic_name)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('rule_name')
                            .value(rule_name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(rule))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_healthbot_topic_resource_resource_by_id(self,
                                                       topic_name,
                                                       resource_name,
                                                       authorization=None):
        """Does a DELETE request to /config/topic/{topic_name}/resource/{resource_name}/.

        Delete a resource by 'resource-name'

        Args:
            topic_name (str): ID of topic-name
            resource_name (str): ID of resource-name
            authorization (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/topic/{topic_name}/resource/{resource_name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('topic_name')
                            .value(topic_name)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('resource_name')
                            .value(resource_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('Authorization')
                          .value(authorization))
        ).execute()

    def create_healthbot_topic_resource_resource_by_id(self,
                                                       topic_name,
                                                       resource_name,
                                                       resource,
                                                       authorization=None):
        """Does a POST request to /config/topic/{topic_name}/resource/{resource_name}/.

        Create/Update a resource by `resource-name`. The `resource-name`
        specified in URL and the request body must match. If the resource
        already exists then, the existing resource's configuration will be
        updated with the new content

        Args:
            topic_name (str): ID of topic-name
            resource_name (str): ID of resource-name
            resource (ResourceSchema): resourcebody object
            authorization (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/topic/{topic_name}/resource/{resource_name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('topic_name')
                            .value(topic_name)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('resource_name')
                            .value(resource_name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(resource))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('Authorization')
                          .value(authorization))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_healthbot_topic_resource_resource_by_id(self,
                                                       topic_name,
                                                       resource_name,
                                                       resource,
                                                       authorization=None):
        """Does a PUT request to /config/topic/{topic_name}/resource/{resource_name}/.

        Overwrite a rule by the `resource-name`. The `resource-name` specified
        in URL and the request body must match.

        Args:
            topic_name (str): ID of topic-name
            resource_name (str): ID of resource-name
            resource (ResourceSchema): resourcebody object
            authorization (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/topic/{topic_name}/resource/{resource_name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('topic_name')
                            .value(topic_name)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('resource_name')
                            .value(resource_name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(resource))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('Authorization')
                          .value(authorization))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_iceberg_topics_topics_by_id(self,
                                           x_iam_token=None):
        """Does a DELETE request to /config/topics/.

        Delete all topics. This will fail if any topic is referenced in any
        playbook.

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/topics/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_topics_topics(self,
                                       x_iam_token=None,
                                       working=None,
                                       sort=None):
        """Does a GET request to /config/topics/.

        Get the configuration details of all topics.

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries un-committed configuration
            sort (Sort1Enum, optional): asc/desc queries sorted configuration

        Returns:
            TopicsSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/topics/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .query_param(Parameter()
                         .key('sort')
                         .value(sort))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TopicsSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_topics_topics_by_id(self,
                                           topics,
                                           x_iam_token=None):
        """Does a POST request to /config/topics/.

        Create/Update multiple topics. The new content for the existing topics
        updates the existing content and the new topics are created.

        Args:
            topics (TopicsSchema): topicsbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/topics/')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(topics))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_topics_topics_by_id(self,
                                           topics,
                                           x_iam_token=None):
        """Does a PUT request to /config/topics/.

        Overwrite the existing topics configuration. New topics are created
        and existing topics are overwritten with new content. If some existing
        topics are not present in the payload, such topics are deleted. This
        will fail if any of the topics that are not present in the payload are
        referenced by a playbook.

        Args:
            topics (TopicsSchema): topicsbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/topics/')
            .http_method(HttpMethodEnum.PUT)
            .body_param(Parameter()
                        .value(topics))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def first_login(self,
                    credenetial):
        """Does a POST request to /first-login/.

        Change password in first login

        Args:
            credenetial (Credenetial): set new password

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/first-login/')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(credenetial))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_healthbot_organizations_organizations(self,
                                                     x_iam_token=None):
        """Does a DELETE request to /config/organizations/.

        Delete all organizations. This will fail if any organization edge is
        referenced in any device-group.

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/organizations/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_healthbot_organizations_organizations(self,
                                                       x_iam_token=None,
                                                       working=None):
        """Does a GET request to /config/organizations/.

        Get the configuration details of all organizations.

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries un-committed configuration

        Returns:
            OrganizationsSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/organizations/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OrganizationsSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_healthbot_organizations_organizations(self,
                                                     organizations,
                                                     x_iam_token=None):
        """Does a POST request to /config/organizations/.

        Create/Update multiple organizations. The new content for the existing
        organizations updates the existing content and the new organizations
        are created.

        Args:
            organizations (OrganizationsSchema): organizations body object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/organizations/')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(organizations))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_healthbot_organizations_organizations(self,
                                                     organizations,
                                                     x_iam_token=None):
        """Does a PUT request to /config/organizations/.

        Overwrite the existing organizations configuration. New organizations
        are created and existing organizations are overwritten with new
        content. If some of the existing organizations are not present in the
        payload, such organizations are deleted. This will fail if any of the
        organization edges that are not present in the payload are referenced
        by a device-group.

        Args:
            organizations (OrganizationsSchema): organizations body object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/organizations/')
            .http_method(HttpMethodEnum.PUT)
            .body_param(Parameter()
                        .value(organizations))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()
