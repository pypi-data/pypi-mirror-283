# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mergedapi.api_helper import APIHelper
from mergedapi.configuration import Server
from mergedapi.utilities.file_wrapper import FileWrapper
from mergedapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mergedapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.configurations.endpoint_configuration import EndpointConfiguration
from mergedapi.models.retrieve_org_id_network_group_response import RetrieveOrgIdNetworkGroupResponse
from mergedapi.models.tagging_profile_schema import TaggingProfileSchema
from mergedapi.models.flow_schema import FlowSchema
from mergedapi.models.template_schema import TemplateSchema
from mergedapi.models.sflow_schema import SflowSchema
from mergedapi.models.counter_record_schema import CounterRecordSchema
from mergedapi.models.flow_record_schema import FlowRecordSchema
from mergedapi.models.sample_schema import SampleSchema
from mergedapi.models.protocol_schema import ProtocolSchema
from mergedapi.models.frequency_profile_schema import FrequencyProfileSchema
from mergedapi.models.ifa_schema import IfaSchema
from mergedapi.models.ifa_device_schema import IfaDeviceSchema
from mergedapi.models.native_gpb_schema import NativeGpbSchema
from mergedapi.models.outbound_ssh_schema import OutboundSshSchema
from mergedapi.models.snmp_notification_schema import SnmpNotificationSchema
from mergedapi.models.snmpv_3_usm_users_schema import Snmpv3UsmUsersSchema
from mergedapi.models.snmpv_3_usm_user_schema import Snmpv3UsmUserSchema
from mergedapi.models.syslog_schema import SyslogSchema
from mergedapi.models.pattern_set_schema import PatternSetSchema
from mergedapi.models.pattern_schema import PatternSchema
from mergedapi.models.header_pattern_schema import HeaderPatternSchema
from mergedapi.models.custom_plugin_schema import CustomPluginSchema
from mergedapi.models.tlive_kafka_oc_schema import TliveKafkaOcSchema
from mergedapi.models.ingest_mapping_schema import IngestMappingSchema
from mergedapi.models.deployment_schema import DeploymentSchema
from mergedapi.models.retrieve_configuration_jobs_response import RetrieveConfigurationJobsResponse
from mergedapi.models.table_schema import TableSchema
from mergedapi.models.event import Event
from mergedapi.models.device_group_health_tree import DeviceGroupHealthTree
from mergedapi.models.network_health_tree import NetworkHealthTree
from mergedapi.models.device_health_tree import DeviceHealthTree
from mergedapi.models.device_hardware_health import DeviceHardwareHealth
from mergedapi.models.health_schema import HealthSchema
from mergedapi.models.debug_job_response_schema import DebugJobResponseSchema
from mergedapi.models.profiles_schema import ProfilesSchema
from mergedapi.models.ca_profile_schema import CaProfileSchema
from mergedapi.models.local_certificate_schema import LocalCertificateSchema
from mergedapi.models.ssh_key_profile_schema import SshKeyProfileSchema
from mergedapi.models.raw_schema import RawSchema
from mergedapi.models.rollup_summarizations_schema import RollupSummarizationsSchema
from mergedapi.models.rollup_summarization_schema import RollupSummarizationSchema
from mergedapi.models.tsdb_schema import TsdbSchema
from mergedapi.models.trigger_action_schema import TriggerActionSchema
from mergedapi.models.resource_schema import ResourceSchema
from mergedapi.models.organization_schema import OrganizationSchema
from mergedapi.models.trigger_message_enum_schema import TriggerMessageEnumSchema
from mergedapi.exceptions.api_exception import APIException
from mergedapi.exceptions.error_exception import ErrorException


class APIController(BaseController):

    """A Controller to access Endpoints in the mergedapi API."""
    def __init__(self, config):
        super(APIController, self).__init__(config)

    def retrieve_org_id_network_group(self,
                                      network_group_name):
        """Does a GET request to /api/network-group/get-org-id/{network_group_name}.

        Get the Organization ID of this network group. Internal API

        Args:
            network_group_name (str): Name of network group

        Returns:
            RetrieveOrgIdNetworkGroupResponse: Response from the API.
                Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/api/network-group/get-org-id/{network_group_name}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('network_group_name')
                            .value(network_group_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RetrieveOrgIdNetworkGroupResponse.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def delete_iceberg_ingest(self,
                              x_iam_token=None):
        """Does a DELETE request to /config/ingest/.

        Delete operation of resource: ingest

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_ingest(self,
                                x_iam_token=None,
                                working=None):
        """Does a GET request to /config/ingest/.

        Retrieve operation of resource: ingest

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            object: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_ingest(self,
                              ingest_settings,
                              x_iam_token=None):
        """Does a POST request to /config/ingest/.

        Create operation of resource: ingest

        Args:
            ingest_settings (object): ingest_settingsbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(ingest_settings))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_ingest(self,
                              ingest_settings,
                              x_iam_token=None):
        """Does a PUT request to /config/ingest/.

        Update operation of resource: ingest

        Args:
            ingest_settings (object): ingest_settingsbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/')
            .http_method(HttpMethodEnum.PUT)
            .body_param(Parameter()
                        .value(ingest_settings))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_healthbot_ingest_tagging_profiles(self,
                                                   x_iam_token=None,
                                                   working=None):
        """Does a GET request to /config/ingest/data-enrichment/tagging-profiles/.

        Retrieve operation of resource: tagging-profile

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/data-enrichment/tagging-profiles/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def delete_healthbot_ingest_tagging_profiles(self,
                                                 x_iam_token=None):
        """Does a DELETE request to /config/ingest/data-enrichment/tagging-profiles/.

        Delete operation of resource: tagging-profile

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/data-enrichment/tagging-profiles/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def create_healthbot_ingest_tagging_profiles(self,
                                                 tagging_profile,
                                                 x_iam_token=None):
        """Does a POST request to /config/ingest/data-enrichment/tagging-profiles/.

        Create operation of resource: tagging-profile

        Args:
            tagging_profile (TaggingProfilesSchema): tagging_profilebody
                object
            x_iam_token (str, optional): authentication header object

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/data-enrichment/tagging-profiles/')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(tagging_profile))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def update_healthbot_ingest_tagging_profiles(self,
                                                 tagging_profiles,
                                                 x_iam_token=None):
        """Does a PUT request to /config/ingest/data-enrichment/tagging-profiles/.

        Update operation of resource: tagging-profile

        Args:
            tagging_profiles (TaggingProfilesSchema): tagging_profilebody
                object
            x_iam_token (str, optional): authentication header object

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/data-enrichment/tagging-profiles/')
            .http_method(HttpMethodEnum.PUT)
            .body_param(Parameter()
                        .value(tagging_profiles))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def delete_healthbot_ingest_tagging_profile_by_id(self,
                                                      name,
                                                      x_iam_token=None):
        """Does a DELETE request to /config/ingest/data-enrichment/tagging-profile/{name}/.

        Delete operation of resource: tagging-profile

        Args:
            name (str): ID of name
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/data-enrichment/tagging-profile/{name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_healthbot_ingest_tagging_profile_by_id(self,
                                                        name,
                                                        x_iam_token=None,
                                                        working=None):
        """Does a GET request to /config/ingest/data-enrichment/tagging-profile/{name}/.

        Retrieve operation of resource: tagging-profile

        Args:
            name (str): ID of name
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            TaggingProfileSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/data-enrichment/tagging-profile/{name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TaggingProfileSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_healthbot_ingest_tagging_profile_by_id(self,
                                                      name,
                                                      tagging_profile,
                                                      x_iam_token=None):
        """Does a POST request to /config/ingest/data-enrichment/tagging-profile/{name}/.

        Create operation of resource: tagging-profile

        Args:
            name (str): ID of name
            tagging_profile (TaggingProfileSchema): tagging_profilebody
                object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/data-enrichment/tagging-profile/{name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(tagging_profile))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_healthbot_ingest_tagging_profile_by_id(self,
                                                      name,
                                                      tagging_profile,
                                                      x_iam_token=None):
        """Does a PUT request to /config/ingest/data-enrichment/tagging-profile/{name}/.

        Update operation of resource: tagging-profile

        Args:
            name (str): ID of name
            tagging_profile (TaggingProfileSchema): tagging_profilebody
                object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/data-enrichment/tagging-profile/{name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(tagging_profile))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_iceberg_ingest_flow(self,
                                   x_iam_token=None):
        """Does a DELETE request to /config/ingest/flow/.

        Delete operation of resource: flow

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/flow/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_ingest_flow(self,
                                     x_iam_token=None,
                                     working=None):
        """Does a GET request to /config/ingest/flow/.

        Retrieve operation of resource: flow

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            FlowSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/flow/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(FlowSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_ingest_flow(self,
                                   flow,
                                   x_iam_token=None):
        """Does a POST request to /config/ingest/flow/.

        Create operation of resource: flow

        Args:
            flow (FlowSchema): flowbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/flow/')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(flow))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_ingest_flow(self,
                                   flow,
                                   x_iam_token=None):
        """Does a PUT request to /config/ingest/flow/.

        Update operation of resource: flow

        Args:
            flow (FlowSchema): flowbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/flow/')
            .http_method(HttpMethodEnum.PUT)
            .body_param(Parameter()
                        .value(flow))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_iceberg_ingest_flow_template_ids(self,
                                                  x_iam_token=None,
                                                  working=None):
        """Does a GET request to /config/ingest/flow/template/.

        Retrieve operation of resource: template

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/flow/template/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def delete_iceberg_ingest_flow_template_by_id(self,
                                                  name,
                                                  x_iam_token=None):
        """Does a DELETE request to /config/ingest/flow/template/{name}/.

        Delete operation of resource: template

        Args:
            name (str): Name of template
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/flow/template/{name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_ingest_flow_template_by_id(self,
                                                    name,
                                                    x_iam_token=None,
                                                    working=None):
        """Does a GET request to /config/ingest/flow/template/{name}/.

        Retrieve operation of resource: template

        Args:
            name (str): Name of template
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            TemplateSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/flow/template/{name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TemplateSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_ingest_flow_template_by_id(self,
                                                  name,
                                                  template,
                                                  x_iam_token=None):
        """Does a POST request to /config/ingest/flow/template/{name}/.

        Create operation of resource: template

        Args:
            name (str): Name of template
            template (TemplateSchema): templatebody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/flow/template/{name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(template))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_ingest_flow_template_by_id(self,
                                                  name,
                                                  template,
                                                  x_iam_token=None):
        """Does a PUT request to /config/ingest/flow/template/{name}/.

        Update operation of resource: template

        Args:
            name (str): Name of template
            template (TemplateSchema): templatebody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/flow/template/{name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(template))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_healthbot_ingest_sflow(self,
                                      x_iam_token=None):
        """Does a DELETE request to /config/ingest/sflow/.

        Delete operation of resource: sflow

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/sflow/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_healthbot_ingest_sflow(self,
                                        x_iam_token=None,
                                        working=None):
        """Does a GET request to /config/ingest/sflow/.

        Retrieve operation of resource: sflow

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            SflowSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/sflow/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SflowSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_healthbot_ingest_sflow(self,
                                      sflow,
                                      x_iam_token=None):
        """Does a POST request to /config/ingest/sflow/.

        Create operation of resource: sflow

        Args:
            sflow (SflowSchema): sflowbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/sflow/')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(sflow))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_healthbot_ingest_sflow(self,
                                      sflow,
                                      x_iam_token=None):
        """Does a PUT request to /config/ingest/sflow/.

        Update operation of resource: sflow

        Args:
            sflow (SflowSchema): sflowbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/sflow/')
            .http_method(HttpMethodEnum.PUT)
            .body_param(Parameter()
                        .value(sflow))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_healthbot_ingest_sflow_counter_record_by_id(self,
                                                           record_name,
                                                           x_iam_token=None):
        """Does a DELETE request to /config/ingest/sflow/counter-record/{record_name}/.

        Delete operation of resource: counter-record

        Args:
            record_name (str): ID of record-name
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/sflow/counter-record/{record_name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('record_name')
                            .value(record_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_healthbot_ingest_sflow_counter_record_by_id(self,
                                                             record_name,
                                                             x_iam_token=None,
                                                             working=None):
        """Does a GET request to /config/ingest/sflow/counter-record/{record_name}/.

        Retrieve operation of resource: counter-record

        Args:
            record_name (str): ID of record-name
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            CounterRecordSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/sflow/counter-record/{record_name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('record_name')
                            .value(record_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CounterRecordSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_healthbot_ingest_sflow_counter_record_by_id(self,
                                                           record_name,
                                                           counter_record,
                                                           x_iam_token=None):
        """Does a POST request to /config/ingest/sflow/counter-record/{record_name}/.

        Create operation of resource: counter-record

        Args:
            record_name (str): ID of record-name
            counter_record (CounterRecordSchema): counter_recordbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/sflow/counter-record/{record_name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('record_name')
                            .value(record_name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(counter_record))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_healthbot_ingest_sflow_counter_record_by_id(self,
                                                           record_name,
                                                           counter_record,
                                                           x_iam_token=None):
        """Does a PUT request to /config/ingest/sflow/counter-record/{record_name}/.

        Update operation of resource: counter-record

        Args:
            record_name (str): ID of record-name
            counter_record (CounterRecordSchema): counter_recordbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/sflow/counter-record/{record_name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('record_name')
                            .value(record_name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(counter_record))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_healthbot_ingest_sflow_flow_record_by_id(self,
                                                        record_name,
                                                        x_iam_token=None):
        """Does a DELETE request to /config/ingest/sflow/flow-record/{record_name}/.

        Delete operation of resource: flow-record

        Args:
            record_name (str): ID of record-name
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/sflow/flow-record/{record_name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('record_name')
                            .value(record_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_healthbot_ingest_sflow_flow_record_by_id(self,
                                                          record_name,
                                                          x_iam_token=None,
                                                          working=None):
        """Does a GET request to /config/ingest/sflow/flow-record/{record_name}/.

        Retrieve operation of resource: flow-record

        Args:
            record_name (str): ID of record-name
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            FlowRecordSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/sflow/flow-record/{record_name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('record_name')
                            .value(record_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(FlowRecordSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_healthbot_ingest_sflow_flow_record_by_id(self,
                                                        record_name,
                                                        flow_record,
                                                        x_iam_token=None):
        """Does a POST request to /config/ingest/sflow/flow-record/{record_name}/.

        Create operation of resource: flow-record

        Args:
            record_name (str): ID of record-name
            flow_record (FlowRecordSchema): flow_recordbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/sflow/flow-record/{record_name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('record_name')
                            .value(record_name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(flow_record))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_healthbot_ingest_sflow_flow_record_by_id(self,
                                                        record_name,
                                                        flow_record,
                                                        x_iam_token=None):
        """Does a PUT request to /config/ingest/sflow/flow-record/{record_name}/.

        Update operation of resource: flow-record

        Args:
            record_name (str): ID of record-name
            flow_record (FlowRecordSchema): flow_recordbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/sflow/flow-record/{record_name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('record_name')
                            .value(record_name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(flow_record))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_healthbot_ingest_sflow_sample_by_id(self,
                                                   sample_name,
                                                   x_iam_token=None):
        """Does a DELETE request to /config/ingest/sflow/sample/{sample_name}/.

        Delete operation of resource: sample

        Args:
            sample_name (str): ID of sample-name
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/sflow/sample/{sample_name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('sample_name')
                            .value(sample_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_healthbot_ingest_sflow_sample_by_id(self,
                                                     sample_name,
                                                     x_iam_token=None,
                                                     working=None):
        """Does a GET request to /config/ingest/sflow/sample/{sample_name}/.

        Retrieve operation of resource: sample

        Args:
            sample_name (str): ID of sample-name
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            SampleSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/sflow/sample/{sample_name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('sample_name')
                            .value(sample_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SampleSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_healthbot_ingest_sflow_sample_by_id(self,
                                                   sample_name,
                                                   sample,
                                                   x_iam_token=None):
        """Does a POST request to /config/ingest/sflow/sample/{sample_name}/.

        Create operation of resource: sample

        Args:
            sample_name (str): ID of sample-name
            sample (SampleSchema): samplebody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/sflow/sample/{sample_name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('sample_name')
                            .value(sample_name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(sample))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_healthbot_ingest_sflow_sample_by_id(self,
                                                   sample_name,
                                                   sample,
                                                   x_iam_token=None):
        """Does a PUT request to /config/ingest/sflow/sample/{sample_name}/.

        Update operation of resource: sample

        Args:
            sample_name (str): ID of sample-name
            sample (SampleSchema): samplebody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/sflow/sample/{sample_name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('sample_name')
                            .value(sample_name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(sample))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_healthbot_ingest_sflow_protocol_by_id(self,
                                                     protocol_name,
                                                     x_iam_token=None):
        """Does a DELETE request to /config/ingest/sflow/protocol/{protocol_name}/.

        Delete operation of resource: protocol

        Args:
            protocol_name (str): ID of protocol-name
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/sflow/protocol/{protocol_name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('protocol_name')
                            .value(protocol_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_healthbot_ingest_sflow_protocol_by_id(self,
                                                       protocol_name,
                                                       x_iam_token=None,
                                                       working=None):
        """Does a GET request to /config/ingest/sflow/protocol/{protocol_name}/.

        Retrieve operation of resource: protocol

        Args:
            protocol_name (str): ID of protocol-name
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            ProtocolSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/sflow/protocol/{protocol_name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('protocol_name')
                            .value(protocol_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ProtocolSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_healthbot_ingest_sflow_protocol_by_id(self,
                                                     protocol_name,
                                                     protocol,
                                                     x_iam_token=None):
        """Does a POST request to /config/ingest/sflow/protocol/{protocol_name}/.

        Create operation of resource: protocol

        Args:
            protocol_name (str): ID of protocol-name
            protocol (ProtocolSchema): protocolbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/sflow/protocol/{protocol_name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('protocol_name')
                            .value(protocol_name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(protocol))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_healthbot_ingest_sflow_protocol_by_id(self,
                                                     protocol_name,
                                                     protocol,
                                                     x_iam_token=None):
        """Does a PUT request to /config/ingest/sflow/protocol/{protocol_name}/.

        Update operation of resource: protocol

        Args:
            protocol_name (str): ID of protocol-name
            protocol (ProtocolSchema): protocolbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/sflow/protocol/{protocol_name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('protocol_name')
                            .value(protocol_name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(protocol))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_healthbot_ingest_frequency_profile(self,
                                                    x_iam_token=None,
                                                    working=None):
        """Does a GET request to /config/ingest/frequency-profiles/.

        Retrieve operation of resource: frequency-profile

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/frequency-profiles/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def delete_healthbot_ingest_frequency_profile__by_id(self,
                                                         name,
                                                         x_iam_token=None):
        """Does a DELETE request to /config/ingest/frequency-profile/{name}/.

        Delete operation of resource: frequency-profile

        Args:
            name (str): ID of name
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/frequency-profile/{name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_healthbot_ingest_frequency_profile_by_id(self,
                                                          name,
                                                          x_iam_token=None,
                                                          working=None):
        """Does a GET request to /config/ingest/frequency-profile/{name}/.

        Retrieve operation of resource: frequency-profile

        Args:
            name (str): ID of name
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            FrequencyProfileSchema: Response from the API. Successful
                operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/frequency-profile/{name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(FrequencyProfileSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_healthbot_ingest_frequency_profile_by_id(self,
                                                        name,
                                                        frequency_profile,
                                                        x_iam_token=None):
        """Does a POST request to /config/ingest/frequency-profile/{name}/.

        Create operation of resource: frequency-profile

        Args:
            name (str): ID of name
            frequency_profile (FrequencyProfileSchema): frequency_profilebody
                object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/frequency-profile/{name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(frequency_profile))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_healthbot_ingest_frequency_profile_by_id(self,
                                                        name,
                                                        frequency_profile,
                                                        x_iam_token=None):
        """Does a PUT request to /config/ingest/frequency-profile/{name}/.

        Update operation of resource: frequency-profile

        Args:
            name (str): ID of name
            frequency_profile (FrequencyProfileSchema): frequency_profilebody
                object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/frequency-profile/{name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(frequency_profile))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_healthbot_ingest_ifa(self,
                                    x_iam_token=None):
        """Does a DELETE request to /config/ingest/ifa/.

        Delete operation of resource: ifa

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/ifa/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_healthbot_ingest_ifa(self,
                                      x_iam_token=None,
                                      working=None):
        """Does a GET request to /config/ingest/ifa/.

        Retrieve operation of resource: ifa

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            IfaSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/ifa/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(IfaSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_healthbot_ingest_ifa(self,
                                    ifa,
                                    x_iam_token=None):
        """Does a POST request to /config/ingest/ifa/.

        Create operation of resource: ifa

        Args:
            ifa (IfaSchema): ifabody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/ifa/')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(ifa))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_healthbot_ingest_ifa(self,
                                    ifa,
                                    x_iam_token=None):
        """Does a PUT request to /config/ingest/ifa/.

        Update operation of resource: ifa

        Args:
            ifa (IfaSchema): ifabody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/ifa/')
            .http_method(HttpMethodEnum.PUT)
            .body_param(Parameter()
                        .value(ifa))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_healthbot_ingest_ifa_device_ids(self,
                                                 x_iam_token=None,
                                                 working=None):
        """Does a GET request to /config/ingest/ifa/device/.

        Retrieve operation of resource: device

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/ifa/device/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def retrieve_healthbot_ingest_ifa_devices(self,
                                              x_iam_token=None,
                                              working=None):
        """Does a GET request to /config/ingest/ifa/devices/.

        Retrieve operation of resource: device

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            List[IfaDeviceSchema]: Response from the API. Successful
                operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/ifa/devices/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(IfaDeviceSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def delete_healthbot_ingest_ifa_device_by_id(self,
                                                 id,
                                                 x_iam_token=None):
        """Does a DELETE request to /config/ingest/ifa/device/{id}/.

        Delete operation of resource: device

        Args:
            id (int): ID of ifa device
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/ifa/device/{id}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_healthbot_ingest_ifa_device_by_id(self,
                                                   id,
                                                   x_iam_token=None,
                                                   working=None):
        """Does a GET request to /config/ingest/ifa/device/{id}/.

        Retrieve operation of resource: device

        Args:
            id (int): ID of ifa device
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            IfaDeviceSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/ifa/device/{id}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(IfaDeviceSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_healthbot_ingest_ifa_device_by_id(self,
                                                 id,
                                                 device,
                                                 x_iam_token=None):
        """Does a POST request to /config/ingest/ifa/device/{id}/.

        Create operation of resource: device

        Args:
            id (int): ID of ifa device
            device (IfaDeviceSchema): devicebody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/ifa/device/{id}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(device))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_healthbot_ingest_ifa_device_by_id(self,
                                                 id,
                                                 device,
                                                 x_iam_token=None):
        """Does a PUT request to /config/ingest/ifa/device/{id}/.

        Update operation of resource: device

        Args:
            id (str): ID of ifa device
            device (IfaDeviceSchema): devicebody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/ifa/device/{id}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(device))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_iceberg_ingest_native_gpb(self,
                                         x_iam_token=None):
        """Does a DELETE request to /config/ingest/native-gpb/.

        Delete operation of resource: native-gpb

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/native-gpb/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_ingest_native_gpb(self,
                                           x_iam_token=None,
                                           working=None):
        """Does a GET request to /config/ingest/native-gpb/.

        Retrieve operation of resource: native-gpb

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            NativeGpbSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/native-gpb/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(NativeGpbSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_ingest_native_gpb(self,
                                         native_gpb,
                                         x_iam_token=None):
        """Does a POST request to /config/ingest/native-gpb/.

        Create operation of resource: native-gpb

        Args:
            native_gpb (NativeGpbSchema): native_gpbbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/native-gpb/')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(native_gpb))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_ingest_native_gpb(self,
                                         native_gpb,
                                         x_iam_token=None):
        """Does a PUT request to /config/ingest/native-gpb/.

        Update operation of resource: native-gpb

        Args:
            native_gpb (NativeGpbSchema): native_gpbbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/native-gpb/')
            .http_method(HttpMethodEnum.PUT)
            .body_param(Parameter()
                        .value(native_gpb))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_healthbot_ingest_outbound_ssh(self,
                                             x_iam_token=None):
        """Does a DELETE request to /config/ingest/outbound-ssh/.

        Delete operation of resource: outbound-ssh

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/outbound-ssh/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_healthbot_ingest_outbound_ssh(self,
                                               working=None,
                                               x_iam_token=None):
        """Does a GET request to /config/ingest/outbound-ssh/.

        Retrieve operation of resource: outbound-ssh

        Args:
            working (bool, optional): true queries undeployed configuration
            x_iam_token (str, optional): authentication header object

        Returns:
            OutboundSshSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/outbound-ssh/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OutboundSshSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_healthbot_ingest_outbound_ssh(self,
                                             outbound_ssh,
                                             x_iam_token=None):
        """Does a POST request to /config/ingest/outbound-ssh/.

        Create operation of resource: outbound-ssh

        Args:
            outbound_ssh (OutboundSshSchema): outbound_ssh body object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/outbound-ssh/')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(outbound_ssh))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_healthbot_ingest_outbound_ssh(self,
                                             outbound_ssh,
                                             x_iam_token=None):
        """Does a PUT request to /config/ingest/outbound-ssh/.

        Update operation of resource: outbound-ssh

        Args:
            outbound_ssh (OutboundSshSchema): outbound_sshbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/outbound-ssh/')
            .http_method(HttpMethodEnum.PUT)
            .body_param(Parameter()
                        .value(outbound_ssh))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_healthbot_ingest_snmp_notification(self,
                                                  x_iam_token=None):
        """Does a DELETE request to /config/ingest/snmp-notification/.

        Delete operation of resource: snmp-notification

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/snmp-notification/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_healthbot_ingest_snmp_notification(self,
                                                    x_iam_token=None,
                                                    working=None):
        """Does a GET request to /config/ingest/snmp-notification/.

        Retrieve operation of resource: snmp-notification

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            SnmpNotificationSchema: Response from the API. Successful
                operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/snmp-notification/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SnmpNotificationSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_healthbot_ingest_snmp_notification(self,
                                                  snmp_notification,
                                                  x_iam_token=None):
        """Does a POST request to /config/ingest/snmp-notification/.

        Create operation of resource: snmp-notification

        Args:
            snmp_notification (SnmpNotificationSchema): snmp_notification body
                object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/snmp-notification/')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(snmp_notification))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_healthbot_ingest_snmp_notification(self,
                                                  snmp_notification,
                                                  x_iam_token=None):
        """Does a PUT request to /config/ingest/snmp-notification/.

        Update operation of resource: snmp-notification

        Args:
            snmp_notification (SnmpNotificationSchema): snmp_notification body
                object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/snmp-notification/')
            .http_method(HttpMethodEnum.PUT)
            .body_param(Parameter()
                        .value(snmp_notification))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_healthbot_ingest_snmp_notification_v_3_usm_usernames(self,
                                                                      x_iam_token=None,
                                                                      working=None):
        """Does a GET request to /config/ingest/snmp-notification/v3/usm/user/.

        Retrieve operation of resource: snmp v3 usm user names

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/snmp-notification/v3/usm/user/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def retrieve_healthbot_ingest_snmp_notification_v_3_usm_users(self,
                                                                  x_iam_token=None,
                                                                  working=None):
        """Does a GET request to /config/ingest/snmp-notification/v3/usm/users/.

        Retrieve operation of resource: SNMP v3 USM users

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            List[Snmpv3UsmUsersSchema]: Response from the API. Successful
                operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/snmp-notification/v3/usm/users/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Snmpv3UsmUsersSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def delete_healthbot_ingest_snmp_notification_v_3_usm_user_by_id(self,
                                                                     name,
                                                                     x_iam_token=None):
        """Does a DELETE request to /config/ingest/snmp-notification/v3/usm/user/{name}/.

        Delete operation of resource: snmp v3 usm user

        Args:
            name (str): User Name
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/snmp-notification/v3/usm/user/{name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_healthbot_ingest_snmp_notification_v_3_usm_user_by_id(self,
                                                                       name,
                                                                       x_iam_token=None,
                                                                       working=None):
        """Does a GET request to /config/ingest/snmp-notification/v3/usm/user/{name}/.

        Retrieve operation of resource: snmp v3 usm user

        Args:
            name (str): User Name
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            Snmpv3UsmUserSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/snmp-notification/v3/usm/user/{name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Snmpv3UsmUserSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_healthbot_ingest_snmp_notification_v_3_usm_user_by_id(self,
                                                                     name,
                                                                     usm_user,
                                                                     x_iam_token=None):
        """Does a POST request to /config/ingest/snmp-notification/v3/usm/user/{name}/.

        Create operation of resource: snmp v3 usm user

        Args:
            name (str): User Name
            usm_user (Snmpv3UsmUserSchema): snmp_v3_usm user object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/snmp-notification/v3/usm/user/{name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(usm_user))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_healthbot_ingest_snmp_notification_v_3_usm_user_by_id(self,
                                                                     name,
                                                                     usm_user,
                                                                     x_iam_token=None):
        """Does a PUT request to /config/ingest/snmp-notification/v3/usm/user/{name}/.

        Update operation of resource: snmp v3 usm user

        Args:
            name (str): User Name
            usm_user (Snmpv3UsmUserSchema): snmp_v3_usm user object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/snmp-notification/v3/usm/user/{name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(usm_user))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_iceberg_ingest_syslog(self,
                                     x_iam_token=None):
        """Does a DELETE request to /config/ingest/syslog/.

        Delete operation of resource: syslog

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/syslog/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_ingest_syslog(self,
                                       x_iam_token=None,
                                       working=None):
        """Does a GET request to /config/ingest/syslog/.

        Retrieve operation of resource: syslog

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            SyslogSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/syslog/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SyslogSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_ingest_syslog(self,
                                     syslog,
                                     x_iam_token=None):
        """Does a POST request to /config/ingest/syslog/.

        Create operation of resource: syslog

        Args:
            syslog (SyslogSchema): syslogbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/syslog/')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(syslog))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_ingest_syslog(self,
                                     syslog,
                                     x_iam_token=None):
        """Does a PUT request to /config/ingest/syslog/.

        Update operation of resource: syslog

        Args:
            syslog (SyslogSchema): syslogbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/syslog/')
            .http_method(HttpMethodEnum.PUT)
            .body_param(Parameter()
                        .value(syslog))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_iceberg_ingest_syslog_pattern_set_ids(self,
                                                       x_iam_token=None,
                                                       working=None):
        """Does a GET request to /config/ingest/syslog/pattern-set/.

        Retrieve operation of resource: pattern-set

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/syslog/pattern-set/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def retrieve_iceberg_ingest_syslog_pattern_sets(self,
                                                    x_iam_token=None,
                                                    working=None):
        """Does a GET request to /config/ingest/syslog/pattern-sets/.

        Retrieve operation of resource: pattern-set

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            List[PatternSetSchema]: Response from the API. Successful
                operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/syslog/pattern-sets/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PatternSetSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def delete_iceberg_ingest_syslog_pattern_set_by_id(self,
                                                       name,
                                                       x_iam_token=None):
        """Does a DELETE request to /config/ingest/syslog/pattern-set/{name}/.

        Delete operation of resource: pattern-set

        Args:
            name (str): Name of pattern-set
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/syslog/pattern-set/{name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_ingest_syslog_pattern_set_by_id(self,
                                                         name,
                                                         x_iam_token=None,
                                                         working=None):
        """Does a GET request to /config/ingest/syslog/pattern-set/{name}/.

        Retrieve operation of resource: pattern-set

        Args:
            name (str): Name of pattern-set
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            PatternSetSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/syslog/pattern-set/{name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PatternSetSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_ingest_syslog_pattern_set_by_id(self,
                                                       name,
                                                       pattern_set,
                                                       x_iam_token=None):
        """Does a POST request to /config/ingest/syslog/pattern-set/{name}/.

        Create operation of resource: pattern-set

        Args:
            name (str): Name of pattern-set
            pattern_set (PatternSetSchema): pattern_setbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/syslog/pattern-set/{name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(pattern_set))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_ingest_syslog_pattern_set_by_id(self,
                                                       name,
                                                       pattern_set,
                                                       x_iam_token=None):
        """Does a PUT request to /config/ingest/syslog/pattern-set/{name}/.

        Update operation of resource: pattern-set

        Args:
            name (str): Name of pattern-set
            pattern_set (PatternSetSchema): pattern_setbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/syslog/pattern-set/{name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(pattern_set))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_iceberg_ingest_syslog_pattern_ids(self,
                                                   x_iam_token=None,
                                                   working=None):
        """Does a GET request to /config/ingest/syslog/pattern/.

        Retrieve operation of resource: pattern

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/syslog/pattern/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def retrieve_iceberg_ingest_syslog_patterns(self,
                                                x_iam_token=None,
                                                working=None):
        """Does a GET request to /config/ingest/syslog/patterns/.

        Retrieve operation of resource: pattern

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            List[PatternSchema]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/syslog/patterns/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PatternSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def delete_iceberg_ingest_syslog_pattern_by_id(self,
                                                   name,
                                                   x_iam_token=None):
        """Does a DELETE request to /config/ingest/syslog/pattern/{name}/.

        Delete operation of resource: pattern

        Args:
            name (str): Name of pattern
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/syslog/pattern/{name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_ingest_syslog_pattern_by_id(self,
                                                     name,
                                                     x_iam_token=None,
                                                     working=None):
        """Does a GET request to /config/ingest/syslog/pattern/{name}/.

        Retrieve operation of resource: pattern

        Args:
            name (str): Name of pattern
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            PatternSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/syslog/pattern/{name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PatternSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_ingest_syslog_pattern_by_id(self,
                                                   name,
                                                   pattern,
                                                   x_iam_token=None):
        """Does a POST request to /config/ingest/syslog/pattern/{name}/.

        Create operation of resource: pattern

        Args:
            name (str): Name of pattern
            pattern (PatternSchema): patternbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/syslog/pattern/{name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(pattern))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_ingest_syslog_pattern_by_id(self,
                                                   name,
                                                   pattern,
                                                   x_iam_token=None):
        """Does a PUT request to /config/ingest/syslog/pattern/{name}/.

        Update operation of resource: pattern

        Args:
            name (str): Name of pattern
            pattern (PatternSchema): patternbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/syslog/pattern/{name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(pattern))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_healthbot_ingest_syslog_header_pattern_ids(self,
                                                            x_iam_token=None,
                                                            working=None):
        """Does a GET request to /config/ingest/syslog/header-pattern/.

        Retrieve operation of resource: header-pattern

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/syslog/header-pattern/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def retrieve_healthbot_ingest_syslog_header_patterns(self,
                                                         x_iam_token=None,
                                                         working=None):
        """Does a GET request to /config/ingest/syslog/header-patterns/.

        Retrieve operation of resource: pattern

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            List[HeaderPatternSchema]: Response from the API. Successful
                operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/syslog/header-patterns/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(HeaderPatternSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def delete_healthbot_ingest_syslog_header_pattern_by_id(self,
                                                            name,
                                                            x_iam_token=None):
        """Does a DELETE request to /config/ingest/syslog/header-pattern/{name}/.

        Delete operation of resource: header-pattern

        Args:
            name (str): ID of name
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/syslog/header-pattern/{name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_healthbot_ingest_syslog_header_pattern_by_id(self,
                                                              name,
                                                              x_iam_token=None,
                                                              working=None):
        """Does a GET request to /config/ingest/syslog/header-pattern/{name}/.

        Retrieve operation of resource: header-pattern

        Args:
            name (str): ID of name
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            HeaderPatternSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/syslog/header-pattern/{name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(HeaderPatternSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_healthbot_ingest_syslog_header_pattern_by_id(self,
                                                            name,
                                                            pattern,
                                                            x_iam_token=None):
        """Does a POST request to /config/ingest/syslog/header-pattern/{name}/.

        Create operation of resource: header-pattern

        Args:
            name (str): ID of name
            pattern (HeaderPatternSchema): header_patternbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/syslog/header-pattern/{name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(pattern))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_healthbot_ingest_syslog_header_pattern_by_id(self,
                                                            name,
                                                            pattern,
                                                            x_iam_token=None):
        """Does a PUT request to /config/ingest/syslog/header-pattern/{name}/.

        Update operation of resource: header-pattern

        Args:
            name (str): ID of name
            pattern (HeaderPatternSchema): header_patternbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/syslog/header-pattern/{name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(pattern))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_healthbot_ingest_byoi_custom_plugins(self,
                                                      x_iam_token=None,
                                                      working=None):
        """Does a GET request to /config/ingest/byoi/custom-plugins/.

        Retrieve all the custom-plugins configured.

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            CustomPluginSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/byoi/custom-plugins/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CustomPluginSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def delete_healthbot_ingest_byoi_custom_plugin_by_id(self,
                                                         name,
                                                         x_iam_token=None):
        """Does a DELETE request to /config/ingest/byoi/custom-plugin/{name}/.

        Delete operation of resource: custom-plugin

        Args:
            name (str): Name of custom-plugin
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/byoi/custom-plugin/{name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_healthbot_ingest_byoi_custom_plugin_by_id(self,
                                                           name,
                                                           x_iam_token=None,
                                                           working=None):
        """Does a GET request to /config/ingest/byoi/custom-plugin/{name}/.

        Retrieve operation of resource: custom-plugin

        Args:
            name (str): Name of custom-plugin
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            CustomPluginSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/byoi/custom-plugin/{name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CustomPluginSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_healthbot_ingest_byoi_custom_plugin_by_id(self,
                                                         name,
                                                         custom_plugin,
                                                         x_iam_token=None):
        """Does a POST request to /config/ingest/byoi/custom-plugin/{name}/.

        Create operation of resource: custom-plugin

        Args:
            name (str): Name of custom-plugin
            custom_plugin (CustomPluginSchema): custom_pluginbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/byoi/custom-plugin/{name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(custom_plugin))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_healthbot_ingest_byoi_custom_plugin_by_id(self,
                                                         name,
                                                         custom_plugin,
                                                         x_iam_token=None):
        """Does a PUT request to /config/ingest/byoi/custom-plugin/{name}/.

        Update operation of resource: custom-plugin

        Args:
            name (str): Name of custom-plugin
            custom_plugin (CustomPluginSchema): custom_pluginbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/byoi/custom-plugin/{name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(custom_plugin))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_healthbot_ingest_byoi_default_plugin_tlive_kafkas(self,
                                                                   x_iam_token=None,
                                                                   working=None):
        """Does a GET request to /config/ingest/byoi/default-plugin/tlive-kafka-ocs/.

        Retrieve all the tlive-kafka-ocs configured.

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/byoi/default-plugin/tlive-kafka-ocs/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def delete_healthbot_ingest_byoi_default_plugin_tlive_kafka_by_id(self,
                                                                      name,
                                                                      x_iam_token=None):
        """Does a DELETE request to /config/ingest/byoi/default-plugin/tlive-kafka-oc/{name}/.

        Delete operation of resource: tlive-kafka-oc

        Args:
            name (str): Name of tlive-kafka-oc
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/byoi/default-plugin/tlive-kafka-oc/{name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_healthbot_ingest_byoi_default_plugin_tlive_kafka_by_id(self,
                                                                        name,
                                                                        x_iam_token=None,
                                                                        working=None):
        """Does a GET request to /config/ingest/byoi/default-plugin/tlive-kafka-oc/{name}/.

        Retrieve operation of resource: tlive-kafka-oc

        Args:
            name (str): Name of tlive-kafka-oc
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            TliveKafkaOcSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/byoi/default-plugin/tlive-kafka-oc/{name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TliveKafkaOcSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_healthbot_ingest_byoi_default_plugin_tlive_kafka_by_id(self,
                                                                      name,
                                                                      tlive_kafka,
                                                                      x_iam_token=None):
        """Does a POST request to /config/ingest/byoi/default-plugin/tlive-kafka-oc/{name}/.

        Add/Merge a tlive-kafka-oc configuration.

        Args:
            name (str): Name of tlive-kafka-oc
            tlive_kafka (TliveKafkaOcSchema): tlive_kafkabody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/byoi/default-plugin/tlive-kafka-oc/{name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(tlive_kafka))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_healthbot_ingest_byoi_default_plugin_tlive_kafka_by_id(self,
                                                                      name,
                                                                      tlive_kafka,
                                                                      x_iam_token=None):
        """Does a PUT request to /config/ingest/byoi/default-plugin/tlive-kafka-oc/{name}/.

        Update operation of resource: tlive-kafka-oc

        Args:
            name (str): Name of tlive-kafka-oc
            tlive_kafka (TliveKafkaOcSchema): tlive_kafka body object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/byoi/default-plugin/tlive-kafka-oc/{name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(tlive_kafka))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_healthbot_ingest_byoi_ingest_mappings(self,
                                                       x_iam_token=None,
                                                       working=None):
        """Does a GET request to /config/ingest/byoi/ingest-mappings/.

        Retrieve all the ingest mappings configured.

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/byoi/ingest-mappings/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def delete_healthbot_ingest_byoi_ingest_mapping_by_id(self,
                                                          name,
                                                          x_iam_token=None):
        """Does a DELETE request to /config/ingest/byoi/ingest-mapping/{name}/.

        Delete ingest-mapping by name

        Args:
            name (str): Name of ingest-mapping
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/byoi/ingest-mapping/{name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_healthbot_ingest_byoi_ingest_mapping_by_id(self,
                                                            name,
                                                            x_iam_token=None,
                                                            working=None):
        """Does a GET request to /config/ingest/byoi/ingest-mapping/{name}/.

        Retrieve ingest-mapping by name

        Args:
            name (str): Name of ingest-mapping
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            IngestMappingSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/byoi/ingest-mapping/{name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(IngestMappingSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_healthbot_ingest_byoi_ingest_mapping_by_id(self,
                                                          name,
                                                          ingest_mapping,
                                                          x_iam_token=None):
        """Does a POST request to /config/ingest/byoi/ingest-mapping/{name}/.

        Create ingest-mapping by name

        Args:
            name (str): Name of ingest-mapping
            ingest_mapping (IngestMappingSchema): ingest_mappingbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/byoi/ingest-mapping/{name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(ingest_mapping))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_healthbot_ingest_byoi_ingest_mapping_by_id(self,
                                                          name,
                                                          ingest_mapping,
                                                          x_iam_token=None):
        """Does a PUT request to /config/ingest/byoi/ingest-mapping/{name}/.

        Update ingest-mapping by name

        Args:
            name (str): Name of ingest-mapping
            ingest_mapping (IngestMappingSchema): ingest_mappingbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest/byoi/ingest-mapping/{name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(ingest_mapping))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_iceberg_ingest_settings(self,
                                       x_iam_token=None):
        """Does a DELETE request to /config/ingest-settings/.

        Delete operation of resource: ingest-settings

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_ingest_settings(self,
                                         x_iam_token=None,
                                         working=None):
        """Does a GET request to /config/ingest-settings/.

        Retrieve operation of resource: ingest-settings

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            object: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_ingest_settings(self,
                                       ingest_settings,
                                       x_iam_token=None):
        """Does a POST request to /config/ingest-settings/.

        Create operation of resource: ingest-settings

        Args:
            ingest_settings (object): ingest_settingsbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(ingest_settings))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_ingest_settings(self,
                                       ingest_settings,
                                       x_iam_token=None):
        """Does a PUT request to /config/ingest-settings/.

        Update operation of resource: ingest-settings

        Args:
            ingest_settings (object): ingest_settingsbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/')
            .http_method(HttpMethodEnum.PUT)
            .body_param(Parameter()
                        .value(ingest_settings))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_healthbot_ingest_settings_tagging_profiles(self,
                                                            x_iam_token=None,
                                                            working=None):
        """Does a GET request to /config/ingest-settings/data-enrichment/tagging-profiles/.

        Retrieve operation of resource: tagging-profile

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/data-enrichment/tagging-profiles/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def delete_healthbot_ingest_settings_tagging_profiles(self,
                                                          x_iam_token=None):
        """Does a DELETE request to /config/ingest-settings/data-enrichment/tagging-profiles/.

        Delete operation of resource: tagging-profile

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/data-enrichment/tagging-profiles/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def create_healthbot_ingest_settings_tagging_profiles(self,
                                                          tagging_profile,
                                                          x_iam_token=None):
        """Does a POST request to /config/ingest-settings/data-enrichment/tagging-profiles/.

        Create operation of resource: tagging-profile

        Args:
            tagging_profile (TaggingProfilesSchema): tagging_profilebody
                object
            x_iam_token (str, optional): authentication header object

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/data-enrichment/tagging-profiles/')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(tagging_profile))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def update_healthbot_ingest_settings_tagging_profiles(self,
                                                          tagging_profiles,
                                                          x_iam_token=None):
        """Does a PUT request to /config/ingest-settings/data-enrichment/tagging-profiles/.

        Update operation of resource: tagging-profile

        Args:
            tagging_profiles (TaggingProfilesSchema): tagging_profilebody
                object
            x_iam_token (str, optional): authentication header object

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/data-enrichment/tagging-profiles/')
            .http_method(HttpMethodEnum.PUT)
            .body_param(Parameter()
                        .value(tagging_profiles))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def delete_healthbot_ingest_settings_tagging_profile_by_id(self,
                                                               name,
                                                               x_iam_token=None):
        """Does a DELETE request to /config/ingest-settings/data-enrichment/tagging-profile/{name}/.

        Delete operation of resource: tagging-profile

        Args:
            name (str): ID of name
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/data-enrichment/tagging-profile/{name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_healthbot_ingest_settings_tagging_profile_by_id(self,
                                                                 name,
                                                                 x_iam_token=None,
                                                                 working=None):
        """Does a GET request to /config/ingest-settings/data-enrichment/tagging-profile/{name}/.

        Retrieve operation of resource: tagging-profile

        Args:
            name (str): ID of name
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            TaggingProfileSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/data-enrichment/tagging-profile/{name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TaggingProfileSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_healthbot_ingest_settings_tagging_profile_by_id(self,
                                                               name,
                                                               tagging_profile,
                                                               x_iam_token=None):
        """Does a POST request to /config/ingest-settings/data-enrichment/tagging-profile/{name}/.

        Create operation of resource: tagging-profile

        Args:
            name (str): ID of name
            tagging_profile (TaggingProfileSchema): tagging_profilebody
                object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/data-enrichment/tagging-profile/{name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(tagging_profile))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_healthbot_ingest_settings_tagging_profile_by_id(self,
                                                               name,
                                                               tagging_profile,
                                                               x_iam_token=None):
        """Does a PUT request to /config/ingest-settings/data-enrichment/tagging-profile/{name}/.

        Update operation of resource: tagging-profile

        Args:
            name (str): ID of name
            tagging_profile (TaggingProfileSchema): tagging_profilebody
                object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/data-enrichment/tagging-profile/{name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(tagging_profile))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_iceberg_ingest_settings_flow(self,
                                            x_iam_token=None):
        """Does a DELETE request to /config/ingest-settings/flow/.

        Delete operation of resource: flow

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/flow/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_ingest_settings_flow(self,
                                              x_iam_token=None,
                                              working=None):
        """Does a GET request to /config/ingest-settings/flow/.

        Retrieve operation of resource: flow

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            FlowSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/flow/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(FlowSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_ingest_settings_flow(self,
                                            flow,
                                            x_iam_token=None):
        """Does a POST request to /config/ingest-settings/flow/.

        Create operation of resource: flow

        Args:
            flow (FlowSchema): flowbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/flow/')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(flow))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_ingest_settings_flow(self,
                                            flow,
                                            x_iam_token=None):
        """Does a PUT request to /config/ingest-settings/flow/.

        Update operation of resource: flow

        Args:
            flow (FlowSchema): flowbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/flow/')
            .http_method(HttpMethodEnum.PUT)
            .body_param(Parameter()
                        .value(flow))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_iceberg_ingest_settings_flow_template_ids(self,
                                                           x_iam_token=None,
                                                           working=None):
        """Does a GET request to /config/ingest-settings/flow/template/.

        Retrieve operation of resource: template

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/flow/template/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def delete_iceberg_ingest_settings_flow_template_by_id(self,
                                                           name,
                                                           x_iam_token=None):
        """Does a DELETE request to /config/ingest-settings/flow/template/{name}/.

        Delete operation of resource: template

        Args:
            name (str): Name of template
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/flow/template/{name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_ingest_settings_flow_template_by_id(self,
                                                             name,
                                                             x_iam_token=None,
                                                             working=None):
        """Does a GET request to /config/ingest-settings/flow/template/{name}/.

        Retrieve operation of resource: template

        Args:
            name (str): Name of template
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            TemplateSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/flow/template/{name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TemplateSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_ingest_settings_flow_template_by_id(self,
                                                           name,
                                                           template,
                                                           x_iam_token=None):
        """Does a POST request to /config/ingest-settings/flow/template/{name}/.

        Create operation of resource: template

        Args:
            name (str): Name of template
            template (TemplateSchema): templatebody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/flow/template/{name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(template))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_ingest_settings_flow_template_by_id(self,
                                                           name,
                                                           template,
                                                           x_iam_token=None):
        """Does a PUT request to /config/ingest-settings/flow/template/{name}/.

        Update operation of resource: template

        Args:
            name (str): Name of template
            template (TemplateSchema): templatebody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/flow/template/{name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(template))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_healthbot_ingest_settings_frequency_profile(self,
                                                             x_iam_token=None,
                                                             working=None):
        """Does a GET request to /config/ingest-settings/frequency-profiles/.

        Retrieve operation of resource: frequency-profile

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/frequency-profiles/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def delete_healthbot_ingest_settings_frequency_profile__by_id(self,
                                                                  name,
                                                                  x_iam_token=None):
        """Does a DELETE request to /config/ingest-settings/frequency-profile/{name}/.

        Delete operation of resource: frequency-profile

        Args:
            name (str): ID of name
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/frequency-profile/{name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_healthbot_ingest_settings_frequency_profile_by_id(self,
                                                                   name,
                                                                   x_iam_token=None,
                                                                   working=None):
        """Does a GET request to /config/ingest-settings/frequency-profile/{name}/.

        Retrieve operation of resource: frequency-profile

        Args:
            name (str): ID of name
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            FrequencyProfileSchema: Response from the API. Successful
                operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/frequency-profile/{name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(FrequencyProfileSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_healthbot_ingest_settings_frequency_profile_by_id(self,
                                                                 name,
                                                                 frequency_profile,
                                                                 x_iam_token=None):
        """Does a POST request to /config/ingest-settings/frequency-profile/{name}/.

        Create operation of resource: frequency-profile

        Args:
            name (str): ID of name
            frequency_profile (FrequencyProfileSchema): frequency_profilebody
                object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/frequency-profile/{name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(frequency_profile))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_healthbot_ingest_settings_frequency_profile_by_id(self,
                                                                 name,
                                                                 frequency_profile,
                                                                 x_iam_token=None):
        """Does a PUT request to /config/ingest-settings/frequency-profile/{name}/.

        Update operation of resource: frequency-profile

        Args:
            name (str): ID of name
            frequency_profile (FrequencyProfileSchema): frequency_profilebody
                object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/frequency-profile/{name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(frequency_profile))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_iceberg_ingest_settings_syslog(self,
                                              x_iam_token=None):
        """Does a DELETE request to /config/ingest-settings/syslog/.

        Delete operation of resource: syslog

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/syslog/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_ingest_settings_syslog(self,
                                                x_iam_token=None,
                                                working=None):
        """Does a GET request to /config/ingest-settings/syslog/.

        Retrieve operation of resource: syslog

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            SyslogSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/syslog/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SyslogSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_ingest_settings_syslog(self,
                                              syslog,
                                              x_iam_token=None):
        """Does a POST request to /config/ingest-settings/syslog/.

        Create operation of resource: syslog

        Args:
            syslog (SyslogSchema): syslogbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/syslog/')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(syslog))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_ingest_settings_syslog(self,
                                              syslog,
                                              x_iam_token=None):
        """Does a PUT request to /config/ingest-settings/syslog/.

        Update operation of resource: syslog

        Args:
            syslog (SyslogSchema): syslogbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/syslog/')
            .http_method(HttpMethodEnum.PUT)
            .body_param(Parameter()
                        .value(syslog))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_iceberg_ingest_settings_syslog_pattern_set_ids(self,
                                                                x_iam_token=None,
                                                                working=None):
        """Does a GET request to /config/ingest-settings/syslog/pattern-set/.

        Retrieve operation of resource: pattern-set

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/syslog/pattern-set/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def retrieve_iceberg_ingest_settings_syslog_pattern_sets(self,
                                                             x_iam_token=None,
                                                             working=None):
        """Does a GET request to /config/ingest-settings/syslog/pattern-sets/.

        Retrieve operation of resource: pattern-set

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            List[PatternSetSchema]: Response from the API. Successful
                operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/syslog/pattern-sets/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PatternSetSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def delete_iceberg_ingest_settings_syslog_pattern_set_by_id(self,
                                                                name,
                                                                x_iam_token=None):
        """Does a DELETE request to /config/ingest-settings/syslog/pattern-set/{name}/.

        Delete operation of resource: pattern-set

        Args:
            name (str): Name of pattern-set
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/syslog/pattern-set/{name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_ingest_settings_syslog_pattern_set_by_id(self,
                                                                  name,
                                                                  x_iam_token=None,
                                                                  working=None):
        """Does a GET request to /config/ingest-settings/syslog/pattern-set/{name}/.

        Retrieve operation of resource: pattern-set

        Args:
            name (str): Name of patter-set
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            PatternSetSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/syslog/pattern-set/{name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PatternSetSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_ingest_settings_syslog_pattern_set_by_id(self,
                                                                name,
                                                                pattern_set,
                                                                x_iam_token=None):
        """Does a POST request to /config/ingest-settings/syslog/pattern-set/{name}/.

        Create operation of resource: pattern-set

        Args:
            name (str): Name of pattern-set
            pattern_set (PatternSetSchema): pattern_setbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/syslog/pattern-set/{name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(pattern_set))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_ingest_settings_syslog_pattern_set_by_id(self,
                                                                name,
                                                                pattern_set,
                                                                x_iam_token=None):
        """Does a PUT request to /config/ingest-settings/syslog/pattern-set/{name}/.

        Update operation of resource: pattern-set

        Args:
            name (str): Name of pattern-set
            pattern_set (PatternSetSchema): pattern_setbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/syslog/pattern-set/{name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(pattern_set))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_iceberg_ingest_settings_syslog_pattern_ids(self,
                                                            x_iam_token=None,
                                                            working=None):
        """Does a GET request to /config/ingest-settings/syslog/pattern/.

        Retrieve operation of resource: pattern

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/syslog/pattern/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def retrieve_iceberg_ingest_settings_syslog_patterns(self,
                                                         x_iam_token=None,
                                                         working=None):
        """Does a GET request to /config/ingest-settings/syslog/patterns/.

        Retrieve operation of resource: pattern

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            List[PatternSchema]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/syslog/patterns/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PatternSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def delete_iceberg_ingest_settings_syslog_pattern_by_id(self,
                                                            name,
                                                            x_iam_token=None):
        """Does a DELETE request to /config/ingest-settings/syslog/pattern/{name}/.

        Delete operation of resource: pattern

        Args:
            name (str): Name of pattern
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/syslog/pattern/{name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_ingest_settings_syslog_pattern_by_id(self,
                                                              name,
                                                              x_iam_token=None,
                                                              working=None):
        """Does a GET request to /config/ingest-settings/syslog/pattern/{name}/.

        Retrieve operation of resource: pattern

        Args:
            name (str): Name of pattern
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            PatternSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/syslog/pattern/{name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PatternSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_ingest_settings_syslog_pattern_by_id(self,
                                                            name,
                                                            pattern,
                                                            x_iam_token=None):
        """Does a POST request to /config/ingest-settings/syslog/pattern/{name}/.

        Create operation of resource: pattern

        Args:
            name (str): Name of pattern
            pattern (PatternSchema): patternbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/syslog/pattern/{name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(pattern))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_ingest_settings_syslog_pattern_by_id(self,
                                                            name,
                                                            pattern,
                                                            x_iam_token=None):
        """Does a PUT request to /config/ingest-settings/syslog/pattern/{name}/.

        Update operation of resource: pattern

        Args:
            name (str): Name of pattern
            pattern (PatternSchema): patternbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/syslog/pattern/{name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(pattern))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_healthbot_ingest_settings_byoi_custom_plugins(self,
                                                               x_iam_token=None,
                                                               working=None):
        """Does a GET request to /config/ingest-settings/byoi/custom-plugins/.

        Retrieve all the custom-plugins configured.

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            CustomPluginSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/byoi/custom-plugins/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CustomPluginSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def delete_healthbot_ingest_settings_byoi_custom_plugin_by_id(self,
                                                                  name,
                                                                  x_iam_token=None):
        """Does a DELETE request to /config/ingest-settings/byoi/custom-plugin/{name}/.

        Delete operation of resource: custom-plugin

        Args:
            name (str): Name of custom-plugin
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/byoi/custom-plugin/{name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_healthbot_ingest_settings_byoi_custom_plugin_by_id(self,
                                                                    name,
                                                                    x_iam_token=None,
                                                                    working=None):
        """Does a GET request to /config/ingest-settings/byoi/custom-plugin/{name}/.

        Retrieve operation of resource: custom-plugin

        Args:
            name (str): Name of custom-plugin
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            CustomPluginSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/byoi/custom-plugin/{name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CustomPluginSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_healthbot_ingest_settings_byoi_custom_plugin_by_id(self,
                                                                  name,
                                                                  custom_plugin,
                                                                  x_iam_token=None):
        """Does a POST request to /config/ingest-settings/byoi/custom-plugin/{name}/.

        Create operation of resource: custom-plugin

        Args:
            name (str): Name of custom-plugin
            custom_plugin (CustomPluginSchema): custom_pluginbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/byoi/custom-plugin/{name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(custom_plugin))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_healthbot_ingest_settings_byoi_custom_plugin_by_id(self,
                                                                  name,
                                                                  custom_plugin,
                                                                  x_iam_token=None):
        """Does a PUT request to /config/ingest-settings/byoi/custom-plugin/{name}/.

        Update operation of resource: custom-plugin

        Args:
            name (str): Name of custom-plugin
            custom_plugin (CustomPluginSchema): custom_pluginbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/byoi/custom-plugin/{name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(custom_plugin))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_healthbot_ingest_settings_byoi_default_plugin_tlive_kafkas(self,
                                                                            x_iam_token=None,
                                                                            working=None):
        """Does a GET request to /config/ingest-settings/byoi/default-plugin/tlive-kafka-ocs/.

        Retrieve all the tlive-kafka-ocs configured.

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/byoi/default-plugin/tlive-kafka-ocs/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def delete_healthbot_ingest_settings_byoi_default_plugin_tlive_kafka_by_id(self,
                                                                               name,
                                                                               x_iam_token=None):
        """Does a DELETE request to /config/ingest-settings/byoi/default-plugin/tlive-kafka-oc/{name}/.

        Delete operation of resource: tlive-kafka-oc

        Args:
            name (str): Name of tlive-kafka-oc
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/byoi/default-plugin/tlive-kafka-oc/{name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_healthbot_ingest_settings_byoi_default_plugin_tlive_kafka_by_id(self,
                                                                                 name,
                                                                                 x_iam_token=None,
                                                                                 working=None):
        """Does a GET request to /config/ingest-settings/byoi/default-plugin/tlive-kafka-oc/{name}/.

        Retrieve operation of resource: tlive-kafka-oc

        Args:
            name (str): Name of tlive-kafka-oc
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            TliveKafkaOcSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/byoi/default-plugin/tlive-kafka-oc/{name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TliveKafkaOcSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_healthbot_ingest_settings_byoi_default_plugin_tlive_kafka_by_id(self,
                                                                               name,
                                                                               tlive_kafka,
                                                                               x_iam_token=None):
        """Does a POST request to /config/ingest-settings/byoi/default-plugin/tlive-kafka-oc/{name}/.

        Add/Merge a tlive-kafka-oc configuration.

        Args:
            name (str): Name of tlive-kafka-oc
            tlive_kafka (TliveKafkaOcSchema): tlive_kafkabody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/byoi/default-plugin/tlive-kafka-oc/{name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(tlive_kafka))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_healthbot_ingest_settings_byoi_default_plugin_tlive_kafka_by_id(self,
                                                                               name,
                                                                               tlive_kafka,
                                                                               x_iam_token=None):
        """Does a PUT request to /config/ingest-settings/byoi/default-plugin/tlive-kafka-oc/{name}/.

        Update operation of resource: tlive-kafka-oc

        Args:
            name (str): Name of tlive-kafka-oc
            tlive_kafka (TliveKafkaOcSchema): tlive_kafka body object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/byoi/default-plugin/tlive-kafka-oc/{name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(tlive_kafka))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_healthbot_ingest_settings_byoi_ingest_mappings(self,
                                                                x_iam_token=None,
                                                                working=None):
        """Does a GET request to /config/ingest-settings/byoi/ingest-mappings/.

        Retrieve all the ingest mappings configured.

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/byoi/ingest-mappings/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def delete_healthbot_ingest_settings_byoi_ingest_mapping_by_id(self,
                                                                   name,
                                                                   x_iam_token=None):
        """Does a DELETE request to /config/ingest-settings/byoi/ingest-mapping/{name}/.

        Delete ingest-mapping by name

        Args:
            name (str): Name of ingest-mapping
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/byoi/ingest-mapping/{name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_healthbot_ingest_settings_byoi_ingest_mapping_by_id(self,
                                                                     name,
                                                                     x_iam_token=None,
                                                                     working=None):
        """Does a GET request to /config/ingest-settings/byoi/ingest-mapping/{name}/.

        Retrieve ingest-mapping by name

        Args:
            name (str): Name of ingest-mapping
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            IngestMappingSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/byoi/ingest-mapping/{name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(IngestMappingSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_healthbot_ingest_settings_byoi_ingest_mapping_by_id(self,
                                                                   name,
                                                                   ingest_mapping,
                                                                   x_iam_token=None):
        """Does a POST request to /config/ingest-settings/byoi/ingest-mapping/{name}/.

        Create ingest-mapping by name

        Args:
            name (str): Name of ingest-mapping
            ingest_mapping (IngestMappingSchema): ingest_mappingbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/byoi/ingest-mapping/{name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(ingest_mapping))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_healthbot_ingest_settings_byoi_ingest_mapping_by_id(self,
                                                                   name,
                                                                   ingest_mapping,
                                                                   x_iam_token=None):
        """Does a PUT request to /config/ingest-settings/byoi/ingest-mapping/{name}/.

        Update ingest-mapping by name

        Args:
            name (str): Name of ingest-mapping
            ingest_mapping (IngestMappingSchema): ingest_mappingbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/ingest-settings/byoi/ingest-mapping/{name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(ingest_mapping))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_healthbot_deployment_deployment_by_id(self,
                                                     x_iam_token=None):
        """Does a DELETE request to /config/deployment/.

        Delete operation of resource: deployment

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/deployment/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_healthbot_deployment_deployment(self,
                                                 x_iam_token=None,
                                                 working=None):
        """Does a GET request to /config/deployment/.

        Retrieve operation of resource: deployment

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            DeploymentSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/deployment/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DeploymentSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_healthbot_deployment_deployment_by_id(self,
                                                     deployment,
                                                     x_iam_token=None):
        """Does a POST request to /config/deployment/.

        Create operation of resource: deployment

        Args:
            deployment (DeploymentSchema): deployment body object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/deployment/')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(deployment))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_healthbot_deployment_deployment_by_id(self,
                                                     deployment,
                                                     x_iam_token=None):
        """Does a PUT request to /config/deployment/.

        Update operation of resource: deployment

        Args:
            deployment (DeploymentSchema): deploymentbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/deployment/')
            .http_method(HttpMethodEnum.PUT)
            .body_param(Parameter()
                        .value(deployment))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_configuration_jobs(self,
                                    x_iam_token=None,
                                    job_id=None,
                                    job_status=None):
        """Does a GET request to /config/configuration/jobs/.

        Return list of all the Commit Job ID's

        Args:
            x_iam_token (str, optional): authentication header object
            job_id (uuid|str, optional): Id of Job
            job_status (str, optional): Type of job

        Returns:
            List[RetrieveConfigurationJobsResponse]: Response from the API.
                Successful creation of job.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/configuration/jobs/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('job_id')
                         .value(job_id))
            .query_param(Parameter()
                         .key('job_status')
                         .value(job_status))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RetrieveConfigurationJobsResponse.from_dictionary)
            .local_error('default', 'unexpected error', ErrorException)
        ).execute()

    def retrieve_data_database_table(self,
                                     x_iam_token=None,
                                     device_id=None,
                                     device_group_name=None,
                                     network_group_name=None):
        """Does a GET request to /data/database/table/.

        Get information about different types of tables stored for a device of
        a device-group.

        Args:
            x_iam_token (str, optional): authentication header object
            device_id (str, optional): Name of device
            device_group_name (str, optional): Name of device-group
            network_group_name (str, optional): Name of network-group

        Returns:
            List[TableSchema]: Response from the API. Tables in the given
                database

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/data/database/table/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('device_id')
                         .value(device_id))
            .query_param(Parameter()
                         .key('device_group_name')
                         .value(device_group_name))
            .query_param(Parameter()
                         .key('network_group_name')
                         .value(network_group_name))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TableSchema.from_dictionary)
            .local_error('default', 'unexpected error', ErrorException)
        ).execute()

    def retrieve_data_database_table_column_by_table_name(self,
                                                          table_name,
                                                          x_iam_token=None,
                                                          device_id=None,
                                                          device_group_name=None,
                                                          network_group_name=None):
        """Does a GET request to /data/database/table/column/.

        Get information about columns in a table.

        Args:
            table_name (str): Name of table
            x_iam_token (str, optional): authentication header object
            device_id (str, optional): Name of device
            device_group_name (str, optional): Name of device-group
            network_group_name (str, optional): Name of network-group

        Returns:
            List[str]: Response from the API. List of columns in the given
                table

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/data/database/table/column/')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('table_name')
                         .value(table_name))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('device_id')
                         .value(device_id))
            .query_param(Parameter()
                         .key('device_group_name')
                         .value(device_group_name))
            .query_param(Parameter()
                         .key('network_group_name')
                         .value(network_group_name))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('default', 'unexpected error', ErrorException)
        ).execute()

    def retrieve_data_database_tags_by_table_name(self,
                                                  table_name,
                                                  x_iam_token=None,
                                                  device_id=None,
                                                  device_group_name=None,
                                                  network_group_name=None,
                                                  tag=None,
                                                  where_clause=None):
        """Does a GET request to /data/database/table/tags/.

        Get information about tags keys and values in a table.

        Args:
            table_name (str): Name of table
            x_iam_token (str, optional): authentication header object
            device_id (str, optional): Name of device
            device_group_name (str, optional): Name of device-group
            network_group_name (str, optional): Name of network-group
            tag (str, optional): Tag key for which values are requested.
            where_clause (str, optional): Where condition to select values for
                the requested key. This would not be processed if there is no
                `tag` query parameter. eg: `tag_key1=val1 AND tag_key2=val2`

        Returns:
            List[str]: Response from the API. List of tags in the given table

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/data/database/table/tags/')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('table_name')
                         .value(table_name))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('device_id')
                         .value(device_id))
            .query_param(Parameter()
                         .key('device_group_name')
                         .value(device_group_name))
            .query_param(Parameter()
                         .key('network_group_name')
                         .value(network_group_name))
            .query_param(Parameter()
                         .key('tag')
                         .value(tag))
            .query_param(Parameter()
                         .key('where_clause')
                         .value(where_clause))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('default', 'unexpected error', ErrorException)
        ).execute()

    def retrieve_healthbot_device_details_by_uuids(self,
                                                   uuid_object,
                                                   x_iam_token=None):
        """Does a POST request to /deployed-device-details/.

        Get device-identifying details (device-id and TSDB databases if
        playbooks are deployed on it) for all the UUIDs present in the request
        body.

        Args:
            uuid_object (UuidObject): device_uuids object
            x_iam_token (str, optional): authentication header object

        Returns:
            Dict[str, mixed]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/deployed-device-details/')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(uuid_object))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('500', 'Internal Server Error', APIException)
        ).execute()

    def reparse_configs(self,
                        x_iam_token=None):
        """Does a POST request to /config/reparse/.

        Reparse configs from backup database

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/reparse/')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_events(self,
                        from_timestamp,
                        x_iam_token=None,
                        to_timestamp=None,
                        color=None):
        """Does a GET request to /events/.

        Get the list of all events. Filtering is possible with the use of
        various query parameters.

        Args:
            from_timestamp (datetime): Starting timestamp
            x_iam_token (str, optional): authentication header object
            to_timestamp (datetime, optional): Ending timestamp
            color (Color5Enum, optional): Color of events.

        Returns:
            List[Event]: Response from the API. List of events

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/events/')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('from_timestamp')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, from_timestamp)))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('to_timestamp')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, to_timestamp)))
            .query_param(Parameter()
                         .key('color')
                         .value(color))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Event.from_dictionary)
            .local_error('default', 'unexpected error', ErrorException)
        ).execute()

    def retrieve_event(self,
                       from_timestamp,
                       device_id,
                       x_iam_token=None,
                       to_timestamp=None,
                       device_group_name=None,
                       granularity=None,
                       color=None):
        """Does a GET request to /event/.

        Get the list of events for a device. Filtering is possible with the
        use of various query parameters.

        Args:
            from_timestamp (datetime): Starting timestamp
            device_id (str): device-id of the device for which events are
                requested
            x_iam_token (str, optional): authentication header object
            to_timestamp (datetime, optional): Ending timestamp
            device_group_name (str, optional): Device group's
                device-group-name of which the device is part
            granularity (str, optional): Granularity of query
            color (Color5Enum, optional): Color of events.

        Returns:
            List[Event]: Response from the API. List of events

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/event/')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('from_timestamp')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, from_timestamp)))
            .query_param(Parameter()
                         .key('device_id')
                         .value(device_id))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('to_timestamp')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, to_timestamp)))
            .query_param(Parameter()
                         .key('device_group_name')
                         .value(device_group_name))
            .query_param(Parameter()
                         .key('granularity')
                         .value(granularity))
            .query_param(Parameter()
                         .key('color')
                         .value(color))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Event.from_dictionary)
            .local_error('default', 'unexpected error', ErrorException)
        ).execute()

    def retrieve_event_device_group(self,
                                    from_timestamp,
                                    device_group_name,
                                    x_iam_token=None,
                                    to_timestamp=None,
                                    granularity=None,
                                    device_id=None,
                                    color=None):
        """Does a GET request to /event/device-group/.

        Get the list of events for a device-group. Filtering is possible with
        the use of various query parameters.

        Args:
            from_timestamp (datetime): Starting timestamp
            device_group_name (str): device_group_name of the device-group for
                which events are requested
            x_iam_token (str, optional): authentication header object
            to_timestamp (datetime, optional): Ending timestamp
            granularity (str, optional): Granularity of query
            device_id (List[str], optional): list of devices under a
                device-group to be fetched
            color (Color5Enum, optional): Color of events.

        Returns:
            List[Event]: Response from the API. List of events

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/event/device-group/')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('from_timestamp')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, from_timestamp)))
            .query_param(Parameter()
                         .key('device_group_name')
                         .value(device_group_name))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('to_timestamp')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, to_timestamp)))
            .query_param(Parameter()
                         .key('granularity')
                         .value(granularity))
            .query_param(Parameter()
                         .key('device_id')
                         .value(device_id))
            .query_param(Parameter()
                         .key('color')
                         .value(color))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Event.from_dictionary)
            .local_error('default', 'unexpected error', ErrorException)
        ).execute()

    def retrieve_event_by_event_name_device_group(self,
                                                  event_name,
                                                  from_timestamp,
                                                  device_group_name,
                                                  x_iam_token=None,
                                                  to_timestamp=None,
                                                  granularity=None,
                                                  device_id=None,
                                                  color=None):
        """Does a GET request to /event/device-group/{event_name}/.

        Get instances of a specified device-group event. Filtering is possible
        with the use of various query parameters.

        Args:
            event_name (str): Name of event
            from_timestamp (datetime): Starting timestamp
            device_group_name (str): device_group_name of the device-group for
                which events are requested
            x_iam_token (str, optional): authentication header object
            to_timestamp (datetime, optional): Ending timestamp
            granularity (str, optional): Granularity of query
            device_id (List[str], optional): list of devices under a
                device-group to be fetched
            color (Color5Enum, optional): Color of events.

        Returns:
            List[Event]: Response from the API. Instance list of specified
                event

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/event/device-group/{event_name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('event_name')
                            .value(event_name)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('from_timestamp')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, from_timestamp)))
            .query_param(Parameter()
                         .key('device_group_name')
                         .value(device_group_name))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('to_timestamp')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, to_timestamp)))
            .query_param(Parameter()
                         .key('granularity')
                         .value(granularity))
            .query_param(Parameter()
                         .key('device_id')
                         .value(device_id))
            .query_param(Parameter()
                         .key('color')
                         .value(color))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Event.from_dictionary)
            .local_error('default', 'unexpected error', ErrorException)
        ).execute()

    def retrieve_event_network_group(self,
                                     from_timestamp,
                                     network_group_name,
                                     x_iam_token=None,
                                     to_timestamp=None,
                                     granularity=None,
                                     color=None):
        """Does a GET request to /event/network-group/.

        Get the list of events for a network-group. Filtering is possible with
        the use of various query parameters.

        Args:
            from_timestamp (datetime): Starting timestamp
            network_group_name (str): network_group_name of the network-group
                for which events are requested
            x_iam_token (str, optional): authentication header object
            to_timestamp (datetime, optional): Ending timestamp
            granularity (str, optional): Granularity of query
            color (Color5Enum, optional): Color of events.

        Returns:
            List[Event]: Response from the API. List of events

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/event/network-group/')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('from_timestamp')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, from_timestamp)))
            .query_param(Parameter()
                         .key('network_group_name')
                         .value(network_group_name))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('to_timestamp')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, to_timestamp)))
            .query_param(Parameter()
                         .key('granularity')
                         .value(granularity))
            .query_param(Parameter()
                         .key('color')
                         .value(color))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Event.from_dictionary)
            .local_error('default', 'unexpected error', ErrorException)
        ).execute()

    def retrieve_event_by_event_name_network_group(self,
                                                   event_name,
                                                   from_timestamp,
                                                   network_group_name,
                                                   x_iam_token=None,
                                                   to_timestamp=None,
                                                   granularity=None,
                                                   color=None):
        """Does a GET request to /event/network-group/{event_name}/.

        Get instances of a specified network-group event. Filtering is
        possible with the use of various query parameters.

        Args:
            event_name (str): Name of event
            from_timestamp (datetime): Starting timestamp
            network_group_name (str): network_group_name of the network-group
                for which events are requested
            x_iam_token (str, optional): authentication header object
            to_timestamp (datetime, optional): Ending timestamp
            granularity (str, optional): Granularity of query
            color (Color5Enum, optional): Color of events.

        Returns:
            List[Event]: Response from the API. Instance list of specified
                event

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/event/network-group/{event_name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('event_name')
                            .value(event_name)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('from_timestamp')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, from_timestamp)))
            .query_param(Parameter()
                         .key('network_group_name')
                         .value(network_group_name))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('to_timestamp')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, to_timestamp)))
            .query_param(Parameter()
                         .key('granularity')
                         .value(granularity))
            .query_param(Parameter()
                         .key('color')
                         .value(color))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Event.from_dictionary)
            .local_error('default', 'unexpected error', ErrorException)
        ).execute()

    def retrieve_event_by_event_name(self,
                                     event_name,
                                     from_timestamp,
                                     device_id,
                                     x_iam_token=None,
                                     to_timestamp=None,
                                     device_group_name=None,
                                     granularity=None,
                                     color=None):
        """Does a GET request to /event/{event_name}/.

        Get instances of a specified device event. Filtering is possible with
        the use of various query parameters.

        Args:
            event_name (str): Name of event
            from_timestamp (datetime): Starting timestamp
            device_id (str): device-id of the device for which events are
                requested
            x_iam_token (str, optional): authentication header object
            to_timestamp (datetime, optional): Ending timestamp
            device_group_name (str, optional): device-group-name of which the
                device is part
            granularity (str, optional): Granularity of query
            color (Color5Enum, optional): Color of events.

        Returns:
            List[Event]: Response from the API. Instance list of specified
                event

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/event/{event_name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('event_name')
                            .value(event_name)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('from_timestamp')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, from_timestamp)))
            .query_param(Parameter()
                         .key('device_id')
                         .value(device_id))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('to_timestamp')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, to_timestamp)))
            .query_param(Parameter()
                         .key('device_group_name')
                         .value(device_group_name))
            .query_param(Parameter()
                         .key('granularity')
                         .value(granularity))
            .query_param(Parameter()
                         .key('color')
                         .value(color))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Event.from_dictionary)
            .local_error('default', 'unexpected error', ErrorException)
        ).execute()

    def get_fields_from_xpath(self,
                              xpath,
                              timestamp=None):
        """Does a GET request to /field-capture/.

        Get the values of all fields

        Args:
            xpath (str): XPATH
            timestamp (str, optional): Timestamp

        Returns:
            Dict[str, object]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/field-capture/')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('xpath')
                         .value(xpath))
            .query_param(Parameter()
                         .key('timestamp')
                         .value(timestamp))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('default', 'unexpected error', ErrorException)
        ).execute()

    def retrieve_files_helper_files(self,
                                    x_iam_token=None,
                                    input_path=None):
        """Does a GET request to /config/files/helper-files/.

        Get a list of all the helper-file file-names.

        Args:
            x_iam_token (str, optional): authentication header object
            input_path (str, optional): Input path

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/files/helper-files/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('input_path')
                         .value(input_path))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('default', 'unexpected error', ErrorException)
        ).execute()

    def delete_files_helper_files_by_file_name(self,
                                               file_name,
                                               x_iam_token=None,
                                               input_path=None):
        """Does a DELETE request to /config/files/helper-files/{file_name}/.

        Delete the specified helper-file. Delete will not fail if the
        helper-file is being used by some service.

        Args:
            file_name (str): File name
            x_iam_token (str, optional): authentication header object
            input_path (str, optional): Input path

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/files/helper-files/{file_name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('file_name')
                            .value(file_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('input_path')
                         .value(input_path))
        ).execute()

    def retrieve_files_helper_files_by_file_name(self,
                                                 file_name,
                                                 x_iam_token=None,
                                                 input_path=None):
        """Does a GET request to /config/files/helper-files/{file_name}/.

        Download the specified helper-file.

        Args:
            file_name (str): File name
            x_iam_token (str, optional): authentication header object
            input_path (str, optional): Input path

        Returns:
            binary: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/files/helper-files/{file_name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('file_name')
                            .value(file_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('input_path')
                         .value(input_path))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('default', 'unexpected error', ErrorException)
        ).endpoint_configuration(
            EndpointConfiguration()
            .has_binary_response(True)
        ).execute()

    def create_files_helper_files_by_file_name(self,
                                               up_file,
                                               file_name,
                                               x_iam_token=None):
        """Does a POST request to /config/files/helper-files/{file_name}/.

        Upload the specified helper-file.

        Args:
            up_file (typing.BinaryIO): File content
            file_name (str): File name
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/files/helper-files/{file_name}/')
            .http_method(HttpMethodEnum.POST)
            .multipart_param(Parameter()
                             .key('up_file')
                             .value(up_file)
                             .default_content_type('application/octet-stream'))
            .template_param(Parameter()
                            .key('file_name')
                            .value(file_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def restore_grafana(self,
                        restore_file,
                        x_iam_token=None):
        """Does a POST request to /grafana/restore/.

        Restore Grafana configuration

        Args:
            restore_file (typing.BinaryIO): File content
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/grafana/restore/')
            .http_method(HttpMethodEnum.POST)
            .multipart_param(Parameter()
                             .key('restore_file')
                             .value(restore_file)
                             .default_content_type('application/octet-stream'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def backup_grafana(self,
                       x_iam_token=None):
        """Does a GET request to /grafana/backup/.

        Take backup of Grafana configuration

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            binary: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/grafana/backup/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('default', 'unexpected error', ErrorException)
        ).endpoint_configuration(
            EndpointConfiguration()
            .has_binary_response(True)
        ).execute()

    def backup_helper_files(self,
                            x_iam_token=None):
        """Does a GET request to /config/files/helper-files/backup/.

        Download helper files tar file, which will include the config and
        input directory.

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            binary: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/files/helper-files/backup/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('default', 'unexpected error', ErrorException)
        ).endpoint_configuration(
            EndpointConfiguration()
            .has_binary_response(True)
        ).execute()

    def restore_helper_files(self,
                             restore_file,
                             x_iam_token=None):
        """Does a POST request to /config/files/helper-files/backup/.

        Upload tar file of helper-files

        Args:
            restore_file (typing.BinaryIO): File content
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/files/helper-files/backup/')
            .http_method(HttpMethodEnum.POST)
            .multipart_param(Parameter()
                             .key('restore_file')
                             .value(restore_file)
                             .default_content_type('application/octet-stream'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def delete_files_certificates_by_file_name(self,
                                               file_name,
                                               x_iam_token=None,
                                               input_path=None,
                                               certificate_type=None):
        """Does a DELETE request to /config/files/certificates/{file_name}/.

        Delete the specified certificate-file. Delete will not fail if the
        certificate-file is being used by some service.

        Args:
            file_name (str): File name
            x_iam_token (str, optional): authentication header object
            input_path (str, optional): Input path
            certificate_type (str, optional): Certificate type

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/files/certificates/{file_name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('file_name')
                            .value(file_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('input_path')
                         .value(input_path))
            .query_param(Parameter()
                         .key('certificate_type')
                         .value(certificate_type))
        ).execute()

    def retrieve_files_certificates_by_file_name(self,
                                                 file_name,
                                                 x_iam_token=None,
                                                 input_path=None,
                                                 certificate_type=None):
        """Does a GET request to /config/files/certificates/{file_name}/.

        Download the specified certificate-file.

        Args:
            file_name (str): File name
            x_iam_token (str, optional): authentication header object
            input_path (str, optional): Input path
            certificate_type (str, optional): Certificate type

        Returns:
            binary: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/files/certificates/{file_name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('file_name')
                            .value(file_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('input_path')
                         .value(input_path))
            .query_param(Parameter()
                         .key('certificate_type')
                         .value(certificate_type))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('default', 'unexpected error', ErrorException)
        ).endpoint_configuration(
            EndpointConfiguration()
            .has_binary_response(True)
        ).execute()

    def create_files_certificates_by_file_name(self,
                                               up_file,
                                               file_name,
                                               x_iam_token=None,
                                               password=None,
                                               certificate_type=None):
        """Does a POST request to /config/files/certificates/{file_name}/.

        Upload the specified certificate-file.

        Args:
            up_file (typing.BinaryIO): File content
            file_name (str): File name
            x_iam_token (str, optional): authentication header object
            password (str, optional): password
            certificate_type (str, optional): Certificate type

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/files/certificates/{file_name}/')
            .http_method(HttpMethodEnum.POST)
            .multipart_param(Parameter()
                             .key('up_file')
                             .value(up_file)
                             .default_content_type('application/octet-stream'))
            .template_param(Parameter()
                            .key('file_name')
                            .value(file_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('password')
                         .value(password))
            .query_param(Parameter()
                         .key('certificate_type')
                         .value(certificate_type))
        ).execute()

    def retrieve_health_tree_by_device_group(self,
                                             device_group_name,
                                             x_iam_token=None,
                                             timestamp=None,
                                             tolerance=None,
                                             device=None):
        """Does a GET request to /health-tree/device-group/{device_group_name}/.

        Get health-tree of a specified device-group.

        Args:
            device_group_name (str): `device-group-name` of device-group
            x_iam_token (str, optional): authentication header object
            timestamp (datetime, optional): Timestamp at which health tree is
                requested. If not specified, current server timestamp is
                used.
            tolerance (long|int, optional): Timestamp tolerance in seconds.
                With this option, health-tree will contain latest data between
                `timestamp-2*tolerance` and `timestamp`. Default value is
                `2*frequency` where `frequency` is extracted from `trigger`.
            device (List[str], optional): list of devices under a device-group
                to be fetched

        Returns:
            DeviceGroupHealthTree: Response from the API. Health Tree of a
                device-group

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/health-tree/device-group/{device_group_name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('device_group_name')
                            .value(device_group_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('timestamp')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, timestamp)))
            .query_param(Parameter()
                         .key('tolerance')
                         .value(tolerance))
            .query_param(Parameter()
                         .key('device')
                         .value(device))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DeviceGroupHealthTree.from_dictionary)
            .local_error('default', 'unexpected error', ErrorException)
        ).execute()

    def retrieve_health_tree_by_network_group(self,
                                              network_group_name,
                                              x_iam_token=None,
                                              timestamp=None,
                                              tolerance=None):
        """Does a GET request to /health-tree/network-group/{network_group_name}/.

        Get health-tree of a specified network-group.

        Args:
            network_group_name (str): `network-group-name` of network-group
            x_iam_token (str, optional): authentication header object
            timestamp (datetime, optional): Timestamp at which health tree is
                requested. If not specified, current server timestamp is
                used.
            tolerance (long|int, optional): Timestamp tolerance in seconds.
                With this option, health-tree will contain latest data between
                `timestamp-2*tolerance` and `timestamp`. Default value is
                `2*frequency` where `frequency` is extracted from `trigger`.

        Returns:
            NetworkHealthTree: Response from the API. Health Tree of
                network-group

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/health-tree/network-group/{network_group_name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('network_group_name')
                            .value(network_group_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('timestamp')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, timestamp)))
            .query_param(Parameter()
                         .key('tolerance')
                         .value(tolerance))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(NetworkHealthTree.from_dictionary)
            .local_error('default', 'unexpected error', ErrorException)
        ).execute()

    def retrieve_health_tree_by_id(self,
                                   device_id,
                                   x_iam_token=None,
                                   timestamp=None,
                                   tolerance=None):
        """Does a GET request to /health-tree/{device_id}/.

        Return health-tree of a specified device identified by `device-id`.

        Args:
            device_id (str): `device-id` of device
            x_iam_token (str, optional): authentication header object
            timestamp (datetime, optional): Timestamp at which health tree is
                requested. If not specified, current server timestamp is
                used.
            tolerance (long|int, optional): Timestamp tolerance in seconds.
                With this option, health-tree will contain latest data between
                `timestamp-2*tolerance` and `timestamp`. Default value is
                `2*frequency` where `frequency` is extracted from `trigger`.

        Returns:
            DeviceHealthTree: Response from the API. Health Tree of device

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/health-tree/{device_id}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('timestamp')
                         .value(APIHelper.when_defined(APIHelper.RFC3339DateTime, timestamp)))
            .query_param(Parameter()
                         .key('tolerance')
                         .value(tolerance))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DeviceHealthTree.from_dictionary)
            .local_error('default', 'unexpected error', ErrorException)
        ).execute()

    def get_device_health(self,
                          device_id,
                          org_id,
                          mtype,
                          x_iam_token=None,
                          backend=None):
        """Does a GET request to /health/orgs/{org_id}/devices/{device_id}.

        Return health status based on the type (hardware, software or others)

        Args:
            device_id (str): `device-id` of device
            org_id (str): `org-id` of device
            mtype (str): Specifies the tab type (hardware, software or
                others)
            x_iam_token (str, optional): authentication header object
            backend (str, optional): Specifies the backend(influx or vm) db to
                be queried

        Returns:
            DeviceHardwareHealth: Response from the API. Health of device

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/health/orgs/{org_id}/devices/{device_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('org_id')
                            .value(org_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('type')
                         .value(mtype))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('backend')
                         .value(backend))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DeviceHardwareHealth.from_dictionary)
            .local_error('404', 'Data not found', ErrorException)
            .local_error('default', 'unexpected error', ErrorException)
        ).execute()

    def retrieve_health_all(self,
                            x_iam_token=None):
        """Does a GET request to /health/.

        Returns health of network-groups and devices in device-groups

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            HealthSchema: Response from the API. Dict of health of devices in
                device groups and network groups

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/health/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(HealthSchema.from_dictionary)
            .local_error('default', 'unexpected error', ErrorException)
        ).execute()

    def inspect_command_rpc_table_on_device(self,
                                            command_rpc_detail,
                                            x_iam_token=None):
        """Does a POST request to /inspect/command-rpc/table/.

        Inspect the given iAgent table on a device and return the results.

        Args:
            command_rpc_detail (CommandRpc): command-rpc object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/inspect/command-rpc/table/')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(command_rpc_detail))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_healthbot_dynamic_tagging(self,
                                           x_iam_token=None):
        """Does a GET request to /config/dynamic-tagging/keys/.

        Retrieve operation of resource: dynamic-tagging

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/dynamic-tagging/keys/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def delete_healthbot_dynamic_tagging(self,
                                         x_iam_token=None):
        """Does a DELETE request to /config/dynamic-tagging/keys/.

        Delete operation of resource: dynamic-tagging

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/dynamic-tagging/keys/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def create_healthbot_dynamic_tagging(self,
                                         dynamic_tagging,
                                         x_iam_token=None):
        """Does a POST request to /config/dynamic-tagging/keys/.

        Create operation of resource: dynamic-tagging

        Args:
            dynamic_tagging (DynamicTaggingsSchemaObject): dynamic_taggingbody
                object
            x_iam_token (str, optional): authentication header object

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/dynamic-tagging/keys/')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(dynamic_tagging))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def update_healthbot_dynamic_tagging(self,
                                         dynamic_tagging,
                                         x_iam_token=None):
        """Does a PUT request to /config/dynamic-tagging/keys/.

        Update operation of resource: dynamic-tagging

        Args:
            dynamic_tagging (DynamicTaggingsSchemaObject): dynamic_taggingbody
                object
            x_iam_token (str, optional): authentication header object

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/dynamic-tagging/keys/')
            .http_method(HttpMethodEnum.PUT)
            .body_param(Parameter()
                        .value(dynamic_tagging))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def get_dynamic_tagging_by_key(self,
                                   key_name,
                                   x_iam_token=None):
        """Does a GET request to /config/dynamic-tagging/key/.

        Get Value of corresponding key from dynamic-tagging

        Args:
            key_name (str): Dynamic-tagging Key
            x_iam_token (str, optional): authentication header object

        Returns:
            str: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/dynamic-tagging/key/')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('key_name')
                         .value(key_name))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_dynamic_tagging_by_key(self,
                                      key_name,
                                      dynamic_tagging_obj,
                                      x_iam_token=None):
        """Does a POST request to /config/dynamic-tagging/key/.

        Creates a key in Dynamic-tagging

        Args:
            key_name (str): Dynamic-tagging Key
            dynamic_tagging_obj (DynamicTaggingSchemaObject): Dynamic-tagging
                object containing key-value pair
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/dynamic-tagging/key/')
            .http_method(HttpMethodEnum.POST)
            .query_param(Parameter()
                         .key('key_name')
                         .value(key_name))
            .body_param(Parameter()
                        .value(dynamic_tagging_obj))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_dynamic_tagging_by_key(self,
                                      key_name,
                                      x_iam_token=None):
        """Does a DELETE request to /config/dynamic-tagging/key/.

        Update a key in Dynamic-tagging

        Args:
            key_name (str): Dynamic-tagging Key
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/dynamic-tagging/key/')
            .http_method(HttpMethodEnum.DELETE)
            .query_param(Parameter()
                         .key('key_name')
                         .value(key_name))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def update_dynamic_tagging_by_key(self,
                                      key_name,
                                      dynamic_tagging_obj,
                                      x_iam_token=None):
        """Does a PUT request to /config/dynamic-tagging/key/.

        Update operation of Dynamic-tagging key

        Args:
            key_name (str): Dynamic-tagging Key
            dynamic_tagging_obj (DynamicTaggingSchemaObject): Dynamic-tagging
                object containing key-value pair
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/dynamic-tagging/key/')
            .http_method(HttpMethodEnum.PUT)
            .query_param(Parameter()
                         .key('key_name')
                         .value(key_name))
            .body_param(Parameter()
                        .value(dynamic_tagging_obj))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_debug_jobs(self,
                            x_iam_token=None,
                            job_id=None):
        """Does a GET request to /debug/jobs/.

        Return the status of the last "/debug/" job 

        Args:
            x_iam_token (str, optional): authentication header object
            job_id (uuid|str, optional): Id of Job

        Returns:
            List[DebugJobResponseSchema]: Response from the API. Successful
                creation of job.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/debug/jobs/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('job_id')
                         .value(job_id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DebugJobResponseSchema.from_dictionary)
            .local_error('default', 'unexpected error', ErrorException)
        ).execute()

    def delete_iceberg_profiles(self,
                                x_iam_token=None):
        """Does a DELETE request to /config/profiles/.

        Delete entire profile configuration.

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/profiles/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_profiles(self,
                                  x_iam_token=None,
                                  working=None):
        """Does a GET request to /config/profiles/.

        Retrieve entire profile configuration.

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            ProfilesSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/profiles/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ProfilesSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_profiles(self,
                                profile,
                                x_iam_token=None):
        """Does a POST request to /config/profiles/.

        Create entire profile configuration.

        Args:
            profile (ProfilesSchema): profilebody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/profiles/')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(profile))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_profiles(self,
                                profile,
                                x_iam_token=None):
        """Does a PUT request to /config/profiles/.

        Update entire profile configuration.

        Args:
            profile (ProfilesSchema): profilebody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/profiles/')
            .http_method(HttpMethodEnum.PUT)
            .body_param(Parameter()
                        .value(profile))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_iceberg_profile_security_ca_profiles(self,
                                                      x_iam_token=None,
                                                      working=None):
        """Does a GET request to /config/profile/security/ca-profiles/.

        Retrieve entire ca-profiles configuration.

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/profile/security/ca-profiles/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def delete_iceberg_profile_security_ca_profile_by_id(self,
                                                         name,
                                                         x_iam_token=None):
        """Does a DELETE request to /config/profile/security/ca-profile/{name}/.

        Delete operation of resource: ca-profile

        Args:
            name (str): Name of ca-profile
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/profile/security/ca-profile/{name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_profile_security_ca_profile_by_id(self,
                                                           name,
                                                           x_iam_token=None,
                                                           working=None):
        """Does a GET request to /config/profile/security/ca-profile/{name}/.

        Retrieve operation of resource: ca-profile

        Args:
            name (str): Name of ca-profile
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            CaProfileSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/profile/security/ca-profile/{name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CaProfileSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_profile_security_ca_profile_by_id(self,
                                                         name,
                                                         ca_profile,
                                                         x_iam_token=None):
        """Does a POST request to /config/profile/security/ca-profile/{name}/.

        Create operation of resource: ca-profile

        Args:
            name (str): Name of ca-profile
            ca_profile (CaProfileSchema): ca_profilebody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/profile/security/ca-profile/{name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(ca_profile))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_profile_security_ca_profile_by_id(self,
                                                         name,
                                                         ca_profile,
                                                         x_iam_token=None):
        """Does a PUT request to /config/profile/security/ca-profile/{name}/.

        Update operation of resource: ca-profile

        Args:
            name (str): Name of ca-profile
            ca_profile (CaProfileSchema): ca_profilebody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/profile/security/ca-profile/{name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(ca_profile))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_iceberg_profile_security_local_certificates(self,
                                                             x_iam_token=None,
                                                             working=None):
        """Does a GET request to /config/profile/security/local-certificates/.

        Retrieve entire local-certificates configuration.

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/profile/security/local-certificates/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def delete_iceberg_profile_security_local_certificate_by_id(self,
                                                                name,
                                                                x_iam_token=None):
        """Does a DELETE request to /config/profile/security/local-certificate/{name}/.

        Delete operation of resource: local-certificate

        Args:
            name (str): Name of local-certificate
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/profile/security/local-certificate/{name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_profile_security_local_certificate_by_id(self,
                                                                  name,
                                                                  x_iam_token=None,
                                                                  working=None):
        """Does a GET request to /config/profile/security/local-certificate/{name}/.

        Retrieve operation of resource: local-certificate

        Args:
            name (str): Name of local-certificate
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            LocalCertificateSchema: Response from the API. Successful
                operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/profile/security/local-certificate/{name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LocalCertificateSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_profile_security_local_certificate_by_id(self,
                                                                name,
                                                                local_certificate,
                                                                x_iam_token=None):
        """Does a POST request to /config/profile/security/local-certificate/{name}/.

        Create operation of resource: local-certificate

        Args:
            name (str): Name of local-certificate
            local_certificate (LocalCertificateSchema): local_certificatebody
                object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/profile/security/local-certificate/{name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(local_certificate))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_profile_security_local_certificate_by_id(self,
                                                                name,
                                                                local_certificate,
                                                                x_iam_token=None):
        """Does a PUT request to /config/profile/security/local-certificate/{name}/.

        Update operation of resource: local-certificate

        Args:
            name (str): Name of local-certificate
            local_certificate (LocalCertificateSchema): local_certificatebody
                object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/profile/security/local-certificate/{name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(local_certificate))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_iceberg_profile_security_ssh_key_profiles(self,
                                                           authorization=None,
                                                           working=None):
        """Does a GET request to /config/profile/security/ssh-key-profiles/.

        Retrieve entire ssh-key-profiles configuration.

        Args:
            authorization (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/profile/security/ssh-key-profiles/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('Authorization')
                          .value(authorization))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def delete_iceberg_profile_security_ssh_key_profile_by_id(self,
                                                              name,
                                                              authorization=None):
        """Does a DELETE request to /config/profile/security/ssh-key-profile/{name}/.

        Delete operation of resource: ssh-key-profile

        Args:
            name (str): Name of ssh-key-profile
            authorization (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/profile/security/ssh-key-profile/{name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('Authorization')
                          .value(authorization))
        ).execute()

    def retrieve_iceberg_profile_security_ssh_key_profile_by_id(self,
                                                                name,
                                                                authorization=None,
                                                                working=None):
        """Does a GET request to /config/profile/security/ssh-key-profile/{name}/.

        Retrieve operation of resource: ssh-key-profile

        Args:
            name (str): Name of ssh-key-profile
            authorization (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            SshKeyProfileSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/profile/security/ssh-key-profile/{name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('Authorization')
                          .value(authorization))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SshKeyProfileSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_profile_security_ssh_key_profile_by_id(self,
                                                              name,
                                                              ssh_key_profile,
                                                              authorization=None):
        """Does a POST request to /config/profile/security/ssh-key-profile/{name}/.

        Create operation of resource: ssh-key-profile

        Args:
            name (str): Name of ssh-key-profile
            ssh_key_profile (SshKeyProfileSchema): ssh_key_profilebody object
            authorization (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/profile/security/ssh-key-profile/{name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(ssh_key_profile))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('Authorization')
                          .value(authorization))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_profile_security_ssh_key_profile_by_id(self,
                                                              name,
                                                              ssh_key_profile,
                                                              authorization=None):
        """Does a PUT request to /config/profile/security/ssh-key-profile/{name}/.

        Update operation of resource: ssh-key-profile

        Args:
            name (str): Name of ssh-key-profile
            ssh_key_profile (SshKeyProfileSchema): ssh_key_profilebody object
            authorization (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/profile/security/ssh-key-profile/{name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(ssh_key_profile))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('Authorization')
                          .value(authorization))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_iceberg_profile_data_summarizations_raw(self,
                                                         x_iam_token=None,
                                                         working=None):
        """Does a GET request to /config/profile/data-summarizations/raw/.

        Retrieve operation of resource: raw-data-summarization

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            RawSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/profile/data-summarizations/raw/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RawSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def delete_iceberg_profile_data_summarization_raw_by_id(self,
                                                            name,
                                                            x_iam_token=None):
        """Does a DELETE request to /config/profile/data-summarization/raw/{name}/.

        Delete operation of resource: raw data-summarization

        Args:
            name (str): Name of raw-data-summarization
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/profile/data-summarization/raw/{name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_iceberg_profile_data_summarization_raw_by_id(self,
                                                              name,
                                                              x_iam_token=None,
                                                              working=None):
        """Does a GET request to /config/profile/data-summarization/raw/{name}/.

        Retrieve operation of resource: raw-data-summarization

        Args:
            name (str): Name of raw-data-summarization
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            RawSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/profile/data-summarization/raw/{name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RawSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_iceberg_profile_data_summarization_raw_by_id(self,
                                                            name,
                                                            raw_data_summarization,
                                                            x_iam_token=None):
        """Does a POST request to /config/profile/data-summarization/raw/{name}/.

        Create operation of resource: raw-data-summarization

        Args:
            name (str): Name of raw-data-summarization
            raw_data_summarization (RawSchema): raw_data_summarizationbody
                object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/profile/data-summarization/raw/{name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(raw_data_summarization))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_iceberg_profile_data_summarization_raw_by_id(self,
                                                            name,
                                                            raw_data_summarization,
                                                            x_iam_token=None):
        """Does a PUT request to /config/profile/data-summarization/raw/{name}/.

        Update operation of resource: raw-data-summarization

        Args:
            name (str): Name of raw-data-summarization
            raw_data_summarization (RawSchema): raw_data_summarizationbody
                object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/profile/data-summarization/raw/{name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('name')
                            .value(name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(raw_data_summarization))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_healthbot_profile_rollup_summarization_field_profile_profile(self,
                                                                              working=None,
                                                                              x_iam_token=None):
        """Does a GET request to /config/profile/rollup-summarization/field-profile/.

        Retrieve operation of resource: field-profile

        Args:
            working (bool, optional): true queries undeployed configuration
            x_iam_token (str, optional): authentication header object

        Returns:
            RollupSummarizationsSchema: Response from the API. Successful
                operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/profile/rollup-summarization/field-profile/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RollupSummarizationsSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def delete_healthbot_profile_rollup_summarization_field_profile_field_profile_by_id(self,
                                                                                        profile_id,
                                                                                        x_iam_token=None):
        """Does a DELETE request to /config/profile/rollup-summarization/field-profile/{profile_id}/.

        Delete operation of resource: field-profile

        Args:
            profile_id (str): ID of profile-id
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/profile/rollup-summarization/field-profile/{profile_id}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('profile_id')
                            .value(profile_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_healthbot_profile_rollup_summarization_field_profile_field_profile_by_id(self,
                                                                                          profile_id,
                                                                                          working=None,
                                                                                          x_iam_token=None):
        """Does a GET request to /config/profile/rollup-summarization/field-profile/{profile_id}/.

        Retrieve operation of resource: field-profile

        Args:
            profile_id (str): ID of profile-id
            working (bool, optional): true queries undeployed configuration
            x_iam_token (str, optional): authentication header object

        Returns:
            RollupSummarizationSchema: Response from the API. Successful
                operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/profile/rollup-summarization/field-profile/{profile_id}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('profile_id')
                            .value(profile_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RollupSummarizationSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_healthbot_profile_rollup_summarization_field_profile_field_profile_by_id(self,
                                                                                        profile_id,
                                                                                        field_profile,
                                                                                        x_iam_token=None):
        """Does a POST request to /config/profile/rollup-summarization/field-profile/{profile_id}/.

        Create operation of resource: field-profile

        Args:
            profile_id (str): ID of profile-id
            field_profile (RollupSummarizationSchema): field_profilebody
                object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/profile/rollup-summarization/field-profile/{profile_id}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('profile_id')
                            .value(profile_id)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(field_profile))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_healthbot_profile_rollup_summarization_field_profile_field_profile_by_id(self,
                                                                                        profile_id,
                                                                                        field_profile,
                                                                                        x_iam_token=None):
        """Does a PUT request to /config/profile/rollup-summarization/field-profile/{profile_id}/.

        Update operation of resource: field-profile

        Args:
            profile_id (str): ID of profile-id
            field_profile (RollupSummarizationSchema): field_profilebody
                object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/profile/rollup-summarization/field-profile/{profile_id}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('profile_id')
                            .value(profile_id)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(field_profile))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_sensors(self,
                         sensor_type,
                         x_iam_token=None,
                         sensor_name=None,
                         depth=None,
                         append=None,
                         snmp_table=None):
        """Does a GET request to /config/sensors/.

        Get a list of all the sensors for the filters provided. Filtering is
        possible with the use of query parameters.
        If you have a sensor `/1/2/3/4/5/6/` and `sensor_name=/1`and
        `depth=3`, the result would be `/2/3/4`. If you use `append=true`,
        then the result would be `/1/2/3/4`.

        Args:
            sensor_type (SensorTypeEnum): Sensor type
            x_iam_token (str, optional): authentication header object
            sensor_name (str, optional): Sensor name prefix.
            depth (int, optional): Relative depth to the `sensor_name`.
            append (bool, optional): Returns full path of the sensor.
            snmp_table (str, optional): Returns list of all the columns for
                the particular snmp_table

        Returns:
            List[str]: Response from the API. List of sensors available for
                the given depth for a sensor_name

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/sensors/')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('sensor_type')
                         .value(sensor_type))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('sensor_name')
                         .value(sensor_name))
            .query_param(Parameter()
                         .key('depth')
                         .value(depth))
            .query_param(Parameter()
                         .key('append')
                         .value(append))
            .query_param(Parameter()
                         .key('snmp_table')
                         .value(snmp_table))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('default', 'unexpected error', ErrorException)
        ).execute()

    def delete_healthbot_system_time_series_database_time_series_database_by_id(self):
        """Does a DELETE request to /config/system/tsdb/.

        Delete operation of resource: time-series-database

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system/tsdb/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
        ).execute()

    def retrieve_healthbot_system_time_series_database_time_series_database(self,
                                                                            working=None):
        """Does a GET request to /config/system/tsdb/.

        Retrieve operation of resource: time-series-database

        Args:
            working (bool, optional): true queries undeployed configuration

        Returns:
            TsdbSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system/tsdb/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TsdbSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_healthbot_system_time_series_database_time_series_database_by_id(self,
                                                                                time_series_database,
                                                                                force_tsdb=False):
        """Does a POST request to /config/system/tsdb/.

        Create operation of resource: time-series-database

        Args:
            time_series_database (TsdbSchema): time_series_databasebody
                object
            force_tsdb (bool, optional): force update tsdb when force is set
                to True

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system/tsdb/')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(time_series_database))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .query_param(Parameter()
                         .key('force_tsdb')
                         .value(force_tsdb))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_healthbot_system_time_series_database_time_series_database_by_id(self,
                                                                                time_series_database,
                                                                                force_tsdb=False):
        """Does a PUT request to /config/system/tsdb/.

        Update operation of resource: time-series-database

        Args:
            time_series_database (TsdbSchema): time_series_databasebody
                object
            force_tsdb (bool, optional): force update tsdb when force is set
                to True

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system/tsdb/')
            .http_method(HttpMethodEnum.PUT)
            .body_param(Parameter()
                        .value(time_series_database))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .query_param(Parameter()
                         .key('force_tsdb')
                         .value(force_tsdb))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def delete_healthbot_system_trigger_action(self):
        """Does a DELETE request to /config/system/trigger_action/.

        Delete operation of resource: trigger-action

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system/trigger_action/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
        ).execute()

    def retrieve_healthbot_system_trigger_action(self,
                                                 working=None):
        """Does a GET request to /config/system/trigger_action/.

        Retrieve operation of resource: trigger-action

        Args:
            working (bool, optional): true queries undeployed configuration

        Returns:
            TriggerActionSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system/trigger_action/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TriggerActionSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_healthbot_system_trigger_action(self,
                                               trigger_action):
        """Does a POST request to /config/system/trigger_action/.

        Create operation of resource: trigger-action

        Args:
            trigger_action (TriggerActionSchema): trigger_action object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system/trigger_action/')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(trigger_action))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_healthbot_system_trigger_action(self,
                                               trigger_action):
        """Does a PUT request to /config/system/trigger_action/.

        Update operation of resource: trigger-action

        Args:
            trigger_action (TriggerActionSchema): trigger_action object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/system/trigger_action/')
            .http_method(HttpMethodEnum.PUT)
            .body_param(Parameter()
                        .value(trigger_action))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_healthbot_topic_resource_resource(self,
                                                   topic_name,
                                                   authorization=None,
                                                   working=None):
        """Does a GET request to /config/topic/{topic_name}/resource/.

        Get a list of all the resource-name`s in a topic

        Args:
            topic_name (str): ID of topic-name
            authorization (str, optional): authentication header object
            working (bool, optional): true queries un-committed configuration

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/topic/{topic_name}/resource/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('topic_name')
                            .value(topic_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('Authorization')
                          .value(authorization))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def retrieve_healthbot_topic_resource_resource_by_id(self,
                                                         topic_name,
                                                         resource_name,
                                                         authorization=None,
                                                         working=None,
                                                         download=None):
        """Does a GET request to /config/topic/{topic_name}/resource/{resource_name}/.

        Get the configuration details of a resource by `resource-name`

        Args:
            topic_name (str): ID of topic-name
            resource_name (str): ID of resource-name
            authorization (str, optional): authentication header object
            working (bool, optional): true queries un-committed configuration
            download (bool, optional): Download a compressed .resource file

        Returns:
            ResourceSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/topic/{topic_name}/resource/{resource_name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('topic_name')
                            .value(topic_name)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('resource_name')
                            .value(resource_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('Authorization')
                          .value(authorization))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .query_param(Parameter()
                         .key('download')
                         .value(download))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ResourceSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def grafana_login(self,
                      x_iam_token=None):
        """Does a GET request to /grafana/login/.

        Login to Grafana

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/grafana/login/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_healthbot_organization_organization(self,
                                                     working=None):
        """Does a GET request to /config/organization/.

        Retrieve operation of resource: organization

        Args:
            working (bool, optional): true queries undeployed configuration

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/organization/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def delete_healthbot_organization_organization_by_id(self,
                                                         organization_name,
                                                         x_iam_token=None):
        """Does a DELETE request to /config/organization/{organization_name}/.

        Delete operation of resource: organization

        Args:
            organization_name (str): ID of organization-name
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/organization/{organization_name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('organization_name')
                            .value(organization_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_healthbot_organization_organization_by_id(self,
                                                           organization_name,
                                                           x_iam_token=None,
                                                           working=None):
        """Does a GET request to /config/organization/{organization_name}/.

        Retrieve operation of resource: organization

        Args:
            organization_name (str): ID of organization-name
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries undeployed configuration

        Returns:
            OrganizationSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/organization/{organization_name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('organization_name')
                            .value(organization_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OrganizationSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_healthbot_organization_organization_by_id(self,
                                                         organization_name,
                                                         organization,
                                                         x_iam_token=None):
        """Does a POST request to /config/organization/{organization_name}/.

        Create operation of resource: organization

        Args:
            organization_name (str): ID of organization-name
            organization (OrganizationSchema): organizationbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/organization/{organization_name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('organization_name')
                            .value(organization_name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(organization))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_healthbot_organization_organization_by_id(self,
                                                         organization_name,
                                                         organization,
                                                         x_iam_token=None):
        """Does a PUT request to /config/organization/{organization_name}/.

        Update operation of resource: organization

        Args:
            organization_name (str): ID of organization-name
            organization (OrganizationSchema): organizationbody object
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/organization/{organization_name}/')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('organization_name')
                            .value(organization_name)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(organization))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def retrieve_field_enum_by_name(self,
                                    topic_name,
                                    rule_name,
                                    field_name,
                                    x_iam_token=None):
        """Does a GET request to /enums/topic/{topic_name}/rule/{rule_name}/field/{field_name}/.

        Retrieve operation of resource: edge

        Args:
            topic_name (str): Name of the topic
            rule_name (str): Name of the rule
            field_name (str): Name of the field
            x_iam_token (str, optional): authentication header object

        Returns:
            Dict[str, str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/enums/topic/{topic_name}/rule/{rule_name}/field/{field_name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('topic_name')
                            .value(topic_name)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('rule_name')
                            .value(rule_name)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('field_name')
                            .value(field_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('500', 'Internal Error', APIException)
        ).execute()

    def retrieve_trigger_enum_by_name(self,
                                      topic_name,
                                      rule_name,
                                      trigger_name,
                                      x_iam_token=None):
        """Does a GET request to /enums/topic/{topic_name}/rule/{rule_name}/trigger/{trigger_name}/.

        Retrieve enumerations for a trigger

        Args:
            topic_name (str): Name of the topic
            rule_name (str): Name of the rule
            trigger_name (str): Name of the trigger
            x_iam_token (str, optional): authentication header object

        Returns:
            TriggerMessageEnumSchema: Response from the API. Successful
                operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/enums/topic/{topic_name}/rule/{rule_name}/trigger/{trigger_name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('topic_name')
                            .value(topic_name)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('rule_name')
                            .value(rule_name)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('trigger_name')
                            .value(trigger_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TriggerMessageEnumSchema.from_dictionary)
            .local_error('500', 'Internal Error', APIException)
        ).execute()
