# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mergedapi.api_helper import APIHelper
from mergedapi.configuration import Server
from mergedapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mergedapi.http.http_method_enum import HttpMethodEnum
from mergedapi.models.datastore_schema import DatastoreSchema
from mergedapi.exceptions.api_exception import APIException


class DataStoreController(BaseController):

    """A Controller to access Endpoints in the mergedapi API."""
    def __init__(self, config):
        super(DataStoreController, self).__init__(config)

    def delete_data_store(self,
                          group_name,
                          x_iam_token=None,
                          key=None):
        """Does a DELETE request to /config/data-store/{group_name}/.

        Delete data_store details for the given group-name, or as per the keys
        passed in query.

        Args:
            group_name (str): Group name
            x_iam_token (str, optional): authentication header object
            key (List[str], optional): ID of dashboard

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/data-store/{group_name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('group_name')
                            .value(group_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
        ).execute()

    def retrieve_data_store(self,
                            group_name,
                            x_iam_token=None,
                            key=None):
        """Does a GET request to /config/data-store/{group_name}/.

        Retrieve data_store details for the given group-name, or as per the
        keys passed in query.

        Args:
            group_name (str): Group name
            x_iam_token (str, optional): authentication header object
            key (List[str], optional): Key of data_store object

        Returns:
            DatastoreSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/data-store/{group_name}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('group_name')
                            .value(group_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DatastoreSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def create_data_store(self,
                          key,
                          data,
                          group_name,
                          x_iam_token=None):
        """Does a POST request to /config/data-store/{group_name}/.

        Store data-store details in database for the requested group name and
        key.

        Args:
            key (str): Key of data_store object
            data (DatastoreSchema): Value of data_store object
            group_name (str): Group name
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/data-store/{group_name}/')
            .http_method(HttpMethodEnum.POST)
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .body_param(Parameter()
                        .value(data))
            .template_param(Parameter()
                            .key('group_name')
                            .value(group_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()

    def update_data_store(self,
                          key,
                          data,
                          group_name,
                          x_iam_token=None):
        """Does a PUT request to /config/data-store/{group_name}/.

        Update data-store details in database for the requested group name and
        key.

        Args:
            key (str): key of data_store
            data (DatastoreSchema): value of data_store object
            group_name (str): Group name
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/data-store/{group_name}/')
            .http_method(HttpMethodEnum.PUT)
            .query_param(Parameter()
                         .key('key')
                         .value(key))
            .body_param(Parameter()
                        .value(data))
            .template_param(Parameter()
                            .key('group_name')
                            .value(group_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .body_serializer(APIHelper.json_serialize)
        ).execute()
