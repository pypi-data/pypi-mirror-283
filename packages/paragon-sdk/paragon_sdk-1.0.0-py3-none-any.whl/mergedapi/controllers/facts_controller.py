# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mergedapi.api_helper import APIHelper
from mergedapi.configuration import Server
from mergedapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mergedapi.http.http_method_enum import HttpMethodEnum
from mergedapi.models.device_schema import DeviceSchema
from mergedapi.exceptions.api_exception import APIException


class FactsController(BaseController):

    """A Controller to access Endpoints in the mergedapi API."""
    def __init__(self, config):
        super(FactsController, self).__init__(config)

    def retrieve_iceberg_devices_facts_by_group(self,
                                                device_group_name,
                                                x_iam_token=None,
                                                working=None,
                                                update=None,
                                                timeout=None):
        """Does a GET request to /config/device-group/{device_group_name}/facts/.

        Get the fact details of every device under given group

        Args:
            device_group_name (str): ID of group
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries un-committed configuration
            update (bool, optional): true will first update facts from device
                and then return facts
            timeout (int, optional): timeout in seconds to wait for facts from
                every device

        Returns:
            DeviceSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/device-group/{device_group_name}/facts/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('device_group_name')
                            .value(device_group_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .query_param(Parameter()
                         .key('update')
                         .value(update))
            .query_param(Parameter()
                         .key('timeout')
                         .value(timeout))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DeviceSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def retrieve_iceberg_device_device_facts_by_id(self,
                                                   device_id,
                                                   x_iam_token=None,
                                                   working=None,
                                                   update=None,
                                                   timeout=None):
        """Does a GET request to /config/device/{device_id}/facts/.

        Get the fact details of a device by its `device-id`.

        Args:
            device_id (str): ID of device-id
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries un-committed configuration
            update (bool, optional): true will first update facts from device
                and then return facts
            timeout (int, optional): timeout in seconds to wait for facts from
                given device id

        Returns:
            DeviceSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/device/{device_id}/facts/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('device_id')
                            .value(device_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .query_param(Parameter()
                         .key('update')
                         .value(update))
            .query_param(Parameter()
                         .key('timeout')
                         .value(timeout))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DeviceSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def retrieve_iceberg_devices_devices_facts(self,
                                               x_iam_token=None,
                                               working=None,
                                               update=None,
                                               timeout=None):
        """Does a GET request to /config/devices/facts/.

        Get the fact details of every device

        Args:
            x_iam_token (str, optional): authentication header object
            working (bool, optional): true queries un-committed configuration
            update (bool, optional): true will first update facts from device
                and then return facts
            timeout (int, optional): timeout in seconds to wait for facts from
                every device

        Returns:
            DeviceSchema: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/devices/facts/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .query_param(Parameter()
                         .key('working')
                         .value(working))
            .query_param(Parameter()
                         .key('update')
                         .value(update))
            .query_param(Parameter()
                         .key('timeout')
                         .value(timeout))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DeviceSchema.from_dictionary)
            .local_error('400', 'Internal Error', APIException)
        ).execute()
