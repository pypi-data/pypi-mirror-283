# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mergedapi.api_helper import APIHelper
from mergedapi.configuration import Server
from mergedapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mergedapi.http.http_method_enum import HttpMethodEnum
from mergedapi.exceptions.api_exception import APIException
from mergedapi.exceptions.error_exception import ErrorException


class ServicesController(BaseController):

    """A Controller to access Endpoints in the mergedapi API."""
    def __init__(self, config):
        super(ServicesController, self).__init__(config)

    def retrieve_services_device_groups_device_group_device_group(self,
                                                                  x_iam_token=None):
        """Does a GET request to /config/services/device-group/.

        Get the list of `device-group-name`s of device-groups whose services
        are running.

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/services/device-group/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def delete_services_device_groups_device_group_by_device_group_name(self,
                                                                        device_group_name,
                                                                        x_iam_token=None):
        """Does a DELETE request to /config/services/device-group/{device_group_name}/.

        Stop and clean services of a device-group. This will remove all the
        services for a device-group, however, it  will not clean up the
        collected data.

        Args:
            device_group_name (str): Name of device group
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/services/device-group/{device_group_name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('device_group_name')
                            .value(device_group_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def create_services_device_groups_device_group_by_device_group_name(self,
                                                                        device_group_name,
                                                                        x_iam_token=None):
        """Does a POST request to /config/services/device-group/{device_group_name}/.

        Start services of a device group. Use this to start stopped services.

        Args:
            device_group_name (str): Name of device group
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/services/device-group/{device_group_name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('device_group_name')
                            .value(device_group_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def retrieve_services_network_group(self,
                                        x_iam_token=None):
        """Does a GET request to /config/services/network-group/.

        Get the list of `network-group-name`s of network-groups whose services
        are running.

        Args:
            x_iam_token (str, optional): authentication header object

        Returns:
            List[str]: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/services/network-group/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Internal Error', APIException)
        ).execute()

    def delete_services_network_group_by_network_group_name(self,
                                                            network_group_name,
                                                            x_iam_token=None):
        """Does a DELETE request to /config/services/network-group/{network_group_name}/.

        Stop and clean the services of a network group. This will remove all
        the services for a network-group, however, it will not clean up the
        collected data.

        Args:
            network_group_name (str): Name of network group
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/services/network-group/{network_group_name}/')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('network_group_name')
                            .value(network_group_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()

    def create_services_network_group_by_network_group_name(self,
                                                            network_group_name,
                                                            x_iam_token=None):
        """Does a POST request to /config/services/network-group/{network_group_name}/.

        Start services of a network group. Use this to start stopped
        services.

        Args:
            network_group_name (str): Name of network group
            x_iam_token (str, optional): authentication header object

        Returns:
            void: Response from the API. Successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT1)
            .path('/config/services/network-group/{network_group_name}/')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('network_group_name')
                            .value(network_group_name)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('x-iam-token')
                          .value(x_iam_token))
        ).execute()
