# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from apimatic_core.configurations.global_configuration import GlobalConfiguration
from apimatic_core.decorators.lazy_property import LazyProperty
from mergedapi.configuration import Configuration
from mergedapi.controllers.base_controller import BaseController
from mergedapi.configuration import Environment
from mergedapi.http.auth.custom_header_authentication import CustomHeaderAuthentication
from mergedapi.controllers.alert_controller import AlertController
from mergedapi.controllers.attestation_controller import AttestationController
from mergedapi.controllers.bom_controller import BOMController
from mergedapi.controllers.bom_component_controller\
    import BOMComponentController
from mergedapi.controllers.bom_license_controller import BOMLicenseController
from mergedapi.controllers.bom_whitelist_controller\
    import BOMWhitelistController
from mergedapi.controllers.checklist_controller import ChecklistController
from mergedapi.controllers.checklist_template_controller\
    import ChecklistTemplateController
from mergedapi.controllers.compliance_document_controller\
    import ComplianceDocumentController
from mergedapi.controllers.compliance_scan_controller\
    import ComplianceScanController
from mergedapi.controllers.device_controller import DeviceController
from mergedapi.controllers.integrity_sku_controller\
    import IntegritySKUController
from mergedapi.controllers.integrity_software_product_controller\
    import IntegritySoftwareProductController
from mergedapi.controllers.inventory_controller import InventoryController
from mergedapi.controllers.schedule_controller import ScheduleController
from mergedapi.controllers.scoring_factor_controller\
    import ScoringFactorController
from mergedapi.controllers.scoring_plan_controller import ScoringPlanController
from mergedapi.controllers.scoring_score_controller\
    import ScoringScoreController
from mergedapi.controllers.scoring_value_report_controller\
    import ScoringValueReportController
from mergedapi.controllers.snapshot_controller import SnapshotController
from mergedapi.controllers.tenant_controller import TenantController
from mergedapi.controllers.version_controller import VersionController
from mergedapi.controllers.vulnerability_advisory_controller\
    import VulnerabilityAdvisoryController
from mergedapi.controllers.vulnerability_device_controller\
    import VulnerabilityDeviceController
from mergedapi.controllers.vulnerability_pbn_controller\
    import VulnerabilityPBNController
from mergedapi.controllers.configuration_controller\
    import ConfigurationController
from mergedapi.controllers.services_controller import ServicesController
from mergedapi.controllers.documentation_controller\
    import DocumentationController
from mergedapi.controllers.data_store_controller import DataStoreController
from mergedapi.controllers.facts_controller import FactsController
from mergedapi.controllers.license_controller import LicenseController
from mergedapi.controllers.system_controller import SystemController
from mergedapi.controllers.authentication_controller\
    import AuthenticationController
from mergedapi.controllers.administration_controller\
    import AdministrationController
from mergedapi.controllers.organization_controller\
    import OrganizationController
from mergedapi.controllers.workflow_controller import WorkflowController
from mergedapi.controllers.utility_controller import UtilityController
from mergedapi.controllers.instance_schedule_state_controller\
    import InstanceScheduleStateController
from mergedapi.controllers.logs_controller import LogsController
from mergedapi.controllers.debug_controller import DebugController
from mergedapi.controllers.workflow_instance_controller\
    import WorkflowInstanceController
from mergedapi.controllers.workflow_statistics_controller\
    import WorkflowStatisticsController
from mergedapi.controllers.api_controller import APIController


class MergedapiClient(object):
    @LazyProperty
    def alert(self):
        return AlertController(self.global_configuration)

    @LazyProperty
    def attestation(self):
        return AttestationController(self.global_configuration)

    @LazyProperty
    def bom(self):
        return BOMController(self.global_configuration)

    @LazyProperty
    def bom_component(self):
        return BOMComponentController(self.global_configuration)

    @LazyProperty
    def bom_license(self):
        return BOMLicenseController(self.global_configuration)

    @LazyProperty
    def bom_whitelist(self):
        return BOMWhitelistController(self.global_configuration)

    @LazyProperty
    def checklist(self):
        return ChecklistController(self.global_configuration)

    @LazyProperty
    def checklist_template(self):
        return ChecklistTemplateController(self.global_configuration)

    @LazyProperty
    def compliance_document(self):
        return ComplianceDocumentController(self.global_configuration)

    @LazyProperty
    def compliance_scan(self):
        return ComplianceScanController(self.global_configuration)

    @LazyProperty
    def device(self):
        return DeviceController(self.global_configuration)

    @LazyProperty
    def integrity_sku(self):
        return IntegritySKUController(self.global_configuration)

    @LazyProperty
    def integrity_software_product(self):
        return IntegritySoftwareProductController(self.global_configuration)

    @LazyProperty
    def inventory(self):
        return InventoryController(self.global_configuration)

    @LazyProperty
    def schedule(self):
        return ScheduleController(self.global_configuration)

    @LazyProperty
    def scoring_factor(self):
        return ScoringFactorController(self.global_configuration)

    @LazyProperty
    def scoring_plan(self):
        return ScoringPlanController(self.global_configuration)

    @LazyProperty
    def scoring_score(self):
        return ScoringScoreController(self.global_configuration)

    @LazyProperty
    def scoring_value_report(self):
        return ScoringValueReportController(self.global_configuration)

    @LazyProperty
    def snapshot(self):
        return SnapshotController(self.global_configuration)

    @LazyProperty
    def tenant(self):
        return TenantController(self.global_configuration)

    @LazyProperty
    def version(self):
        return VersionController(self.global_configuration)

    @LazyProperty
    def vulnerability_advisory(self):
        return VulnerabilityAdvisoryController(self.global_configuration)

    @LazyProperty
    def vulnerability_device(self):
        return VulnerabilityDeviceController(self.global_configuration)

    @LazyProperty
    def vulnerability_pbn(self):
        return VulnerabilityPBNController(self.global_configuration)

    @LazyProperty
    def configuration(self):
        return ConfigurationController(self.global_configuration)

    @LazyProperty
    def services(self):
        return ServicesController(self.global_configuration)

    @LazyProperty
    def documentation(self):
        return DocumentationController(self.global_configuration)

    @LazyProperty
    def data_store(self):
        return DataStoreController(self.global_configuration)

    @LazyProperty
    def facts(self):
        return FactsController(self.global_configuration)

    @LazyProperty
    def license(self):
        return LicenseController(self.global_configuration)

    @LazyProperty
    def system(self):
        return SystemController(self.global_configuration)

    @LazyProperty
    def authentication(self):
        return AuthenticationController(self.global_configuration)

    @LazyProperty
    def administration(self):
        return AdministrationController(self.global_configuration)

    @LazyProperty
    def organization(self):
        return OrganizationController(self.global_configuration)

    @LazyProperty
    def workflow(self):
        return WorkflowController(self.global_configuration)

    @LazyProperty
    def utility(self):
        return UtilityController(self.global_configuration)

    @LazyProperty
    def instance_schedule_state(self):
        return InstanceScheduleStateController(self.global_configuration)

    @LazyProperty
    def logs(self):
        return LogsController(self.global_configuration)

    @LazyProperty
    def debug(self):
        return DebugController(self.global_configuration)

    @LazyProperty
    def workflow_instance(self):
        return WorkflowInstanceController(self.global_configuration)

    @LazyProperty
    def workflow_statistics(self):
        return WorkflowStatisticsController(self.global_configuration)

    @LazyProperty
    def client(self):
        return APIController(self.global_configuration)

    def __init__(self, http_client_instance=None,
                 override_http_client_configuration=False, http_call_back=None,
                 timeout=60, max_retries=0, backoff_factor=2,
                 retry_statuses=None, retry_methods=None,
                 environment=Environment.PRODUCTION,
                 default_host='www.example.com', authorization=None,
                 custom_header_authentication_credentials=None, config=None):
        self.config = config or Configuration(
            http_client_instance=http_client_instance,
            override_http_client_configuration=override_http_client_configuration,
            http_call_back=http_call_back, timeout=timeout,
            max_retries=max_retries, backoff_factor=backoff_factor,
            retry_statuses=retry_statuses, retry_methods=retry_methods,
            environment=environment, default_host=default_host,
            authorization=authorization,
            custom_header_authentication_credentials=custom_header_authentication_credentials)

        self.global_configuration = GlobalConfiguration(self.config)\
            .global_errors(BaseController.global_errors())\
            .base_uri_executor(self.config.get_base_uri)\
            .user_agent(BaseController.user_agent(), BaseController.user_agent_parameters())

        self.auth_managers = {key: None for key in ['APIKeyHeader']}
        self.auth_managers['APIKeyHeader'] = CustomHeaderAuthentication(
            self.config.custom_header_authentication_credentials)
        self.global_configuration = self.global_configuration.auth_managers(self.auth_managers)

