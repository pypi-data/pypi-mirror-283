# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Field10(object):

    """Implementation of the 'Field10' model.

    TODO: type model description here.

    Attributes:
        aggregate_function (List[AggregateFunctionEnum]): TODO: type
            description here.
        name (str): Name of the field. Should be of pattern
            [a-z][a-zA-Z0-9_-]*

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "aggregate_function": 'aggregate-function',
        "name": 'name'
    }

    def __init__(self,
                 aggregate_function=None,
                 name=None):
        """Constructor for the Field10 class"""

        # Initialize members of the class
        self.aggregate_function = aggregate_function 
        self.name = name 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        aggregate_function = dictionary.get("aggregate-function") if dictionary.get("aggregate-function") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        # Return an object of this model
        return cls(aggregate_function,
                   name)
