# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class ScoreFactorRefContribution(object):

    """Implementation of the 'scoreFactorRefContribution' model.

    FactorRefContribution associates a Factor Reference with the score
    contribution that can be made when a value for the factor is defined.

    Attributes:
        factor_ref (str): References the factor to be included in the plan
            (name[:version]).
        contributions (List[int]): The contribution values associated with the
            factor. The number and sense of these values vary according to the
            type of Factor. Specifically, an EnumerationFactor can have a
            different contribution for each enumeration value. Other types of
            Factor have only a single contribution value.
        description (str): Describes the factor contributions.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "factor_ref": 'factorRef',
        "contributions": 'contributions',
        "description": 'description'
    }

    _optionals = [
        'factor_ref',
        'contributions',
        'description',
    ]

    def __init__(self,
                 factor_ref=APIHelper.SKIP,
                 contributions=APIHelper.SKIP,
                 description=APIHelper.SKIP):
        """Constructor for the ScoreFactorRefContribution class"""

        # Initialize members of the class
        if factor_ref is not APIHelper.SKIP:
            self.factor_ref = factor_ref 
        if contributions is not APIHelper.SKIP:
            self.contributions = contributions 
        if description is not APIHelper.SKIP:
            self.description = description 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        factor_ref = dictionary.get("factorRef") if dictionary.get("factorRef") else APIHelper.SKIP
        contributions = dictionary.get("contributions") if dictionary.get("contributions") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        # Return an object of this model
        return cls(factor_ref,
                   contributions,
                   description)
