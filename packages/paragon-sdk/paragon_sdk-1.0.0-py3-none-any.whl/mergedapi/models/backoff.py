# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class Backoff(object):

    """Implementation of the 'Backoff' model.

    Backoff retry attempts exponentially

    Attributes:
        duration (str): Initial duration to wait before retrying failed step
        factor (int): Wait duration multiplication factor during each retry
            attempt
        max_duration (str): Maximum duration to wait before retrying a failed
            step

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "duration": 'duration',
        "factor": 'factor',
        "max_duration": 'max-duration'
    }

    _optionals = [
        'duration',
        'factor',
        'max_duration',
    ]

    def __init__(self,
                 duration=APIHelper.SKIP,
                 factor=APIHelper.SKIP,
                 max_duration=APIHelper.SKIP):
        """Constructor for the Backoff class"""

        # Initialize members of the class
        if duration is not APIHelper.SKIP:
            self.duration = duration 
        if factor is not APIHelper.SKIP:
            self.factor = factor 
        if max_duration is not APIHelper.SKIP:
            self.max_duration = max_duration 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        duration = dictionary.get("duration") if dictionary.get("duration") else APIHelper.SKIP
        factor = dictionary.get("factor") if dictionary.get("factor") else APIHelper.SKIP
        max_duration = dictionary.get("max-duration") if dictionary.get("max-duration") else APIHelper.SKIP
        # Return an object of this model
        return cls(duration,
                   factor,
                   max_duration)
