# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.paging import Paging
from mergedapi.models.vulnerability_pbn import VulnerabilityPBN


class VulnerabilityListPBNsResponse(object):

    """Implementation of the 'vulnerabilityListPBNsResponse' model.

    TODO: type model description here.

    Attributes:
        pbns (List[VulnerabilityPBN]): TODO: type description here.
        paging (Paging): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "pbns": 'pbns',
        "paging": 'paging'
    }

    _optionals = [
        'pbns',
        'paging',
    ]

    def __init__(self,
                 pbns=APIHelper.SKIP,
                 paging=APIHelper.SKIP):
        """Constructor for the VulnerabilityListPBNsResponse class"""

        # Initialize members of the class
        if pbns is not APIHelper.SKIP:
            self.pbns = pbns 
        if paging is not APIHelper.SKIP:
            self.paging = paging 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        pbns = None
        if dictionary.get('pbns') is not None:
            pbns = [VulnerabilityPBN.from_dictionary(x) for x in dictionary.get('pbns')]
        else:
            pbns = APIHelper.SKIP
        paging = Paging.from_dictionary(dictionary.get('paging')) if 'paging' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(pbns,
                   paging)
