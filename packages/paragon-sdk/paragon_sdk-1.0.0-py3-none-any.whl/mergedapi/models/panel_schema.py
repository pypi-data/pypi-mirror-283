# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.panel_data_schema import PanelDataSchema
from mergedapi.models.panel_query import PanelQuery
from mergedapi.models.panel_type import PanelType
from mergedapi.models.time_range import TimeRange
from mergedapi.models.unit_type import UnitType


class PanelSchema(object):

    """Implementation of the 'panel_schema' model.

    TODO: type model description here.

    Attributes:
        db (str): database name
        decimals (str): decimal value
        panel_data (List[PanelDataSchema]): Panel data
        panel_name (str): Name of the panel
        panel_query (PanelQuery): Queries for the configured panel
        panel_type (PanelType): Type of chart
        panel_uid (str): Unique identifier for panel
        time_range (TimeRange): Time range configured by user
        unit_type (UnitType): Unit configured
        y_label (str): yLabel values
        y_max (str): yMax value
        y_min (str): yMin value

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "db": 'db',
        "decimals": 'decimals',
        "panel_data": 'panelData',
        "panel_name": 'panelName',
        "panel_query": 'panelQuery',
        "panel_type": 'panelType',
        "panel_uid": 'panelUid',
        "time_range": 'timeRange',
        "unit_type": 'unitType',
        "y_label": 'yLabel',
        "y_max": 'yMax',
        "y_min": 'yMin'
    }

    _optionals = [
        'db',
        'decimals',
        'panel_data',
        'panel_name',
        'panel_query',
        'panel_type',
        'panel_uid',
        'time_range',
        'unit_type',
        'y_label',
        'y_max',
        'y_min',
    ]

    def __init__(self,
                 db=APIHelper.SKIP,
                 decimals=APIHelper.SKIP,
                 panel_data=APIHelper.SKIP,
                 panel_name=APIHelper.SKIP,
                 panel_query=APIHelper.SKIP,
                 panel_type=APIHelper.SKIP,
                 panel_uid=APIHelper.SKIP,
                 time_range=APIHelper.SKIP,
                 unit_type=APIHelper.SKIP,
                 y_label=APIHelper.SKIP,
                 y_max=APIHelper.SKIP,
                 y_min=APIHelper.SKIP):
        """Constructor for the PanelSchema class"""

        # Initialize members of the class
        if db is not APIHelper.SKIP:
            self.db = db 
        if decimals is not APIHelper.SKIP:
            self.decimals = decimals 
        if panel_data is not APIHelper.SKIP:
            self.panel_data = panel_data 
        if panel_name is not APIHelper.SKIP:
            self.panel_name = panel_name 
        if panel_query is not APIHelper.SKIP:
            self.panel_query = panel_query 
        if panel_type is not APIHelper.SKIP:
            self.panel_type = panel_type 
        if panel_uid is not APIHelper.SKIP:
            self.panel_uid = panel_uid 
        if time_range is not APIHelper.SKIP:
            self.time_range = time_range 
        if unit_type is not APIHelper.SKIP:
            self.unit_type = unit_type 
        if y_label is not APIHelper.SKIP:
            self.y_label = y_label 
        if y_max is not APIHelper.SKIP:
            self.y_max = y_max 
        if y_min is not APIHelper.SKIP:
            self.y_min = y_min 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        db = dictionary.get("db") if dictionary.get("db") else APIHelper.SKIP
        decimals = dictionary.get("decimals") if dictionary.get("decimals") else APIHelper.SKIP
        panel_data = None
        if dictionary.get('panelData') is not None:
            panel_data = [PanelDataSchema.from_dictionary(x) for x in dictionary.get('panelData')]
        else:
            panel_data = APIHelper.SKIP
        panel_name = dictionary.get("panelName") if dictionary.get("panelName") else APIHelper.SKIP
        panel_query = PanelQuery.from_dictionary(dictionary.get('panelQuery')) if 'panelQuery' in dictionary.keys() else APIHelper.SKIP
        panel_type = PanelType.from_dictionary(dictionary.get('panelType')) if 'panelType' in dictionary.keys() else APIHelper.SKIP
        panel_uid = dictionary.get("panelUid") if dictionary.get("panelUid") else APIHelper.SKIP
        time_range = TimeRange.from_dictionary(dictionary.get('timeRange')) if 'timeRange' in dictionary.keys() else APIHelper.SKIP
        unit_type = UnitType.from_dictionary(dictionary.get('unitType')) if 'unitType' in dictionary.keys() else APIHelper.SKIP
        y_label = dictionary.get("yLabel") if dictionary.get("yLabel") else APIHelper.SKIP
        y_max = dictionary.get("yMax") if dictionary.get("yMax") else APIHelper.SKIP
        y_min = dictionary.get("yMin") if dictionary.get("yMin") else APIHelper.SKIP
        # Return an object of this model
        return cls(db,
                   decimals,
                   panel_data,
                   panel_name,
                   panel_query,
                   panel_type,
                   panel_uid,
                   time_range,
                   unit_type,
                   y_label,
                   y_max,
                   y_min)
