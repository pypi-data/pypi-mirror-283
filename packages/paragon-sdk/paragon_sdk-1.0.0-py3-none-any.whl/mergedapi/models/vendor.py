# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.arista import Arista
from mergedapi.models.cisco import Cisco
from mergedapi.models.juniper import Juniper
from mergedapi.models.linux import Linux
from mergedapi.models.other_vendor import OtherVendor
from mergedapi.models.paloalto import Paloalto


class Vendor(object):

    """Implementation of the 'Vendor' model.

    Vendor specific configuration

    Attributes:
        arista (Arista): Arista device
        cisco (Cisco): Cisco device
        juniper (Juniper): Juniper device
        linux (Linux): Linux device
        other_vendor (OtherVendor): Other vendor device
        paloalto (Paloalto): Palo Alto device

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "arista": 'arista',
        "cisco": 'cisco',
        "juniper": 'juniper',
        "linux": 'linux',
        "other_vendor": 'other-vendor',
        "paloalto": 'paloalto'
    }

    _optionals = [
        'arista',
        'cisco',
        'juniper',
        'linux',
        'other_vendor',
        'paloalto',
    ]

    def __init__(self,
                 arista=APIHelper.SKIP,
                 cisco=APIHelper.SKIP,
                 juniper=APIHelper.SKIP,
                 linux=APIHelper.SKIP,
                 other_vendor=APIHelper.SKIP,
                 paloalto=APIHelper.SKIP):
        """Constructor for the Vendor class"""

        # Initialize members of the class
        if arista is not APIHelper.SKIP:
            self.arista = arista 
        if cisco is not APIHelper.SKIP:
            self.cisco = cisco 
        if juniper is not APIHelper.SKIP:
            self.juniper = juniper 
        if linux is not APIHelper.SKIP:
            self.linux = linux 
        if other_vendor is not APIHelper.SKIP:
            self.other_vendor = other_vendor 
        if paloalto is not APIHelper.SKIP:
            self.paloalto = paloalto 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        arista = Arista.from_dictionary(dictionary.get('arista')) if 'arista' in dictionary.keys() else APIHelper.SKIP
        cisco = Cisco.from_dictionary(dictionary.get('cisco')) if 'cisco' in dictionary.keys() else APIHelper.SKIP
        juniper = Juniper.from_dictionary(dictionary.get('juniper')) if 'juniper' in dictionary.keys() else APIHelper.SKIP
        linux = Linux.from_dictionary(dictionary.get('linux')) if 'linux' in dictionary.keys() else APIHelper.SKIP
        other_vendor = OtherVendor.from_dictionary(dictionary.get('other-vendor')) if 'other-vendor' in dictionary.keys() else APIHelper.SKIP
        paloalto = Paloalto.from_dictionary(dictionary.get('paloalto')) if 'paloalto' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(arista,
                   cisco,
                   juniper,
                   linux,
                   other_vendor,
                   paloalto)
