# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.sasl_1 import Sasl1


class KafkaPublish(object):

    """Implementation of the 'KafkaPublish' model.

    Define kafka notification

    Attributes:
        bootstrap_servers (List[str]): TODO: type description here.
        sasl (Sasl1): Authetication using username and password over SSL
            connection
        topic (str): Kafka topic to which Healthbot should publish. Should be
            of pattern \.*[a-zA-Z0-9_-]+[a-zA-Z0-9\._-]* , Default value is
            derived from
            <device/network-group>.<device-id>.<topic>.<rule>.<trigger>
        use_hash_partitioner (bool): If true, key will be generated which will
            be hashed to provide a consistent partition number for the given
            kafka topic

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "bootstrap_servers": 'bootstrap-servers',
        "sasl": 'sasl',
        "topic": 'topic',
        "use_hash_partitioner": 'use-hash-partitioner'
    }

    _optionals = [
        'sasl',
        'topic',
        'use_hash_partitioner',
    ]

    def __init__(self,
                 bootstrap_servers=None,
                 sasl=APIHelper.SKIP,
                 topic=APIHelper.SKIP,
                 use_hash_partitioner=APIHelper.SKIP):
        """Constructor for the KafkaPublish class"""

        # Initialize members of the class
        self.bootstrap_servers = bootstrap_servers 
        if sasl is not APIHelper.SKIP:
            self.sasl = sasl 
        if topic is not APIHelper.SKIP:
            self.topic = topic 
        if use_hash_partitioner is not APIHelper.SKIP:
            self.use_hash_partitioner = use_hash_partitioner 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        bootstrap_servers = dictionary.get("bootstrap-servers") if dictionary.get("bootstrap-servers") else None
        sasl = Sasl1.from_dictionary(dictionary.get('sasl')) if 'sasl' in dictionary.keys() else APIHelper.SKIP
        topic = dictionary.get("topic") if dictionary.get("topic") else APIHelper.SKIP
        use_hash_partitioner = dictionary.get("use-hash-partitioner") if "use-hash-partitioner" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(bootstrap_servers,
                   sasl,
                   topic,
                   use_hash_partitioner)
