# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.placement import Placement


class InventoryHardwareAsset(object):

    """Implementation of the 'inventoryHardwareAsset' model.

    HardwareAsset defines a hardware asset.

    Attributes:
        device_id (str): TODO: type description here.
        name (str): TODO: type description here.
        model (str): TODO: type description here.
        mclass (str): TODO: type description here.
        placement (Placement): TODO: type description here.
        description (str): TODO: type description here.
        version (str): TODO: type description here.
        part_number (str): TODO: type description here.
        serial_number (str): TODO: type description here.
        clei_code (str): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "device_id": 'deviceId',
        "name": 'name',
        "model": 'model',
        "mclass": 'class',
        "placement": 'placement',
        "description": 'description',
        "version": 'version',
        "part_number": 'partNumber',
        "serial_number": 'serialNumber',
        "clei_code": 'cleiCode'
    }

    _optionals = [
        'device_id',
        'name',
        'model',
        'mclass',
        'placement',
        'description',
        'version',
        'part_number',
        'serial_number',
        'clei_code',
    ]

    def __init__(self,
                 device_id=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 model=APIHelper.SKIP,
                 mclass=APIHelper.SKIP,
                 placement=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 version=APIHelper.SKIP,
                 part_number=APIHelper.SKIP,
                 serial_number=APIHelper.SKIP,
                 clei_code=APIHelper.SKIP):
        """Constructor for the InventoryHardwareAsset class"""

        # Initialize members of the class
        if device_id is not APIHelper.SKIP:
            self.device_id = device_id 
        if name is not APIHelper.SKIP:
            self.name = name 
        if model is not APIHelper.SKIP:
            self.model = model 
        if mclass is not APIHelper.SKIP:
            self.mclass = mclass 
        if placement is not APIHelper.SKIP:
            self.placement = placement 
        if description is not APIHelper.SKIP:
            self.description = description 
        if version is not APIHelper.SKIP:
            self.version = version 
        if part_number is not APIHelper.SKIP:
            self.part_number = part_number 
        if serial_number is not APIHelper.SKIP:
            self.serial_number = serial_number 
        if clei_code is not APIHelper.SKIP:
            self.clei_code = clei_code 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        device_id = dictionary.get("deviceId") if dictionary.get("deviceId") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        model = dictionary.get("model") if dictionary.get("model") else APIHelper.SKIP
        mclass = dictionary.get("class") if dictionary.get("class") else APIHelper.SKIP
        placement = Placement.from_dictionary(dictionary.get('placement')) if 'placement' in dictionary.keys() else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        version = dictionary.get("version") if dictionary.get("version") else APIHelper.SKIP
        part_number = dictionary.get("partNumber") if dictionary.get("partNumber") else APIHelper.SKIP
        serial_number = dictionary.get("serialNumber") if dictionary.get("serialNumber") else APIHelper.SKIP
        clei_code = dictionary.get("cleiCode") if dictionary.get("cleiCode") else APIHelper.SKIP
        # Return an object of this model
        return cls(device_id,
                   name,
                   model,
                   mclass,
                   placement,
                   description,
                   version,
                   part_number,
                   serial_number,
                   clei_code)
