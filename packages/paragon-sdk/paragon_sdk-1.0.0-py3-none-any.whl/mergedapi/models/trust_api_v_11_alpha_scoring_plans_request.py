# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.score_factor_ref_contribution import ScoreFactorRefContribution


class TrustApiV11alphaScoringPlansRequest(object):

    """Implementation of the 'Trust Api V11alpha Scoring Plans Request' model.

    TODO: type model description here.

    Attributes:
        name (str): Defines the name of the plan.
        version (str): Defines the version number of the plan.
        description (str): Describes the plan.
        variable_weighting (int): Defines the relative weighting of Variable
            and Reputational scores when calculating an overall score. It
            defines the percentage of the overall score that is provided by
            the variable score. It follows that the percentage of the overall
            score provided by the reputational score is 100 -
            variable_weighting.
        prerequisite_factors (List[str]): Defines the ids of any prerequisite
            factors included in the plan.
        variable_factors (List[ScoreFactorRefContribution]): Defines any
            variable factors included in the plan.
        reputational_factors (List[ScoreFactorRefContribution]): Defines any
            reputational factors included in the plan.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "version": 'version',
        "description": 'description',
        "variable_weighting": 'variableWeighting',
        "prerequisite_factors": 'prerequisiteFactors',
        "variable_factors": 'variableFactors',
        "reputational_factors": 'reputationalFactors'
    }

    _optionals = [
        'name',
        'version',
        'description',
        'variable_weighting',
        'prerequisite_factors',
        'variable_factors',
        'reputational_factors',
    ]

    def __init__(self,
                 name=APIHelper.SKIP,
                 version=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 variable_weighting=APIHelper.SKIP,
                 prerequisite_factors=APIHelper.SKIP,
                 variable_factors=APIHelper.SKIP,
                 reputational_factors=APIHelper.SKIP):
        """Constructor for the TrustApiV11alphaScoringPlansRequest class"""

        # Initialize members of the class
        if name is not APIHelper.SKIP:
            self.name = name 
        if version is not APIHelper.SKIP:
            self.version = version 
        if description is not APIHelper.SKIP:
            self.description = description 
        if variable_weighting is not APIHelper.SKIP:
            self.variable_weighting = variable_weighting 
        if prerequisite_factors is not APIHelper.SKIP:
            self.prerequisite_factors = prerequisite_factors 
        if variable_factors is not APIHelper.SKIP:
            self.variable_factors = variable_factors 
        if reputational_factors is not APIHelper.SKIP:
            self.reputational_factors = reputational_factors 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        version = dictionary.get("version") if dictionary.get("version") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        variable_weighting = dictionary.get("variableWeighting") if dictionary.get("variableWeighting") else APIHelper.SKIP
        prerequisite_factors = dictionary.get("prerequisiteFactors") if dictionary.get("prerequisiteFactors") else APIHelper.SKIP
        variable_factors = None
        if dictionary.get('variableFactors') is not None:
            variable_factors = [ScoreFactorRefContribution.from_dictionary(x) for x in dictionary.get('variableFactors')]
        else:
            variable_factors = APIHelper.SKIP
        reputational_factors = None
        if dictionary.get('reputationalFactors') is not None:
            reputational_factors = [ScoreFactorRefContribution.from_dictionary(x) for x in dictionary.get('reputationalFactors')]
        else:
            reputational_factors = APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   version,
                   description,
                   variable_weighting,
                   prerequisite_factors,
                   variable_factors,
                   reputational_factors)
