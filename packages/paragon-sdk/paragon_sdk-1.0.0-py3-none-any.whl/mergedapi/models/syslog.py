# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.header_pattern_schema import HeaderPatternSchema
from mergedapi.models.pattern_schema import PatternSchema
from mergedapi.models.pattern_set_schema import PatternSetSchema


class Syslog(object):

    """Implementation of the 'Syslog' model.

    TODO: type model description here.

    Attributes:
        port (int): Port to listen for syslog messages, default is 514
        header_pattern (List[HeaderPatternSchema]): TODO: type description
            here.
        pattern (List[PatternSchema]): TODO: type description here.
        pattern_set (List[PatternSetSchema]): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "port": 'port',
        "header_pattern": 'header-pattern',
        "pattern": 'pattern',
        "pattern_set": 'pattern-set'
    }

    _optionals = [
        'port',
        'header_pattern',
        'pattern',
        'pattern_set',
    ]

    def __init__(self,
                 port=APIHelper.SKIP,
                 header_pattern=APIHelper.SKIP,
                 pattern=APIHelper.SKIP,
                 pattern_set=APIHelper.SKIP):
        """Constructor for the Syslog class"""

        # Initialize members of the class
        if port is not APIHelper.SKIP:
            self.port = port 
        if header_pattern is not APIHelper.SKIP:
            self.header_pattern = header_pattern 
        if pattern is not APIHelper.SKIP:
            self.pattern = pattern 
        if pattern_set is not APIHelper.SKIP:
            self.pattern_set = pattern_set 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        port = dictionary.get("port") if dictionary.get("port") else APIHelper.SKIP
        header_pattern = None
        if dictionary.get('header-pattern') is not None:
            header_pattern = [HeaderPatternSchema.from_dictionary(x) for x in dictionary.get('header-pattern')]
        else:
            header_pattern = APIHelper.SKIP
        pattern = None
        if dictionary.get('pattern') is not None:
            pattern = [PatternSchema.from_dictionary(x) for x in dictionary.get('pattern')]
        else:
            pattern = APIHelper.SKIP
        pattern_set = None
        if dictionary.get('pattern-set') is not None:
            pattern_set = [PatternSetSchema.from_dictionary(x) for x in dictionary.get('pattern-set')]
        else:
            pattern_set = APIHelper.SKIP
        # Return an object of this model
        return cls(port,
                   header_pattern,
                   pattern,
                   pattern_set)
