# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.entity_id import EntityId


class TrustApiV11alphaScoringScoresRequest(object):

    """Implementation of the 'Trust Api V11alpha Scoring Scores Request' model.

    TODO: type model description here.

    Attributes:
        entity_id (EntityId): TODO: type description here.
        plan_id (str): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "entity_id": 'entityId',
        "plan_id": 'planId'
    }

    _optionals = [
        'entity_id',
        'plan_id',
    ]

    def __init__(self,
                 entity_id=APIHelper.SKIP,
                 plan_id=APIHelper.SKIP):
        """Constructor for the TrustApiV11alphaScoringScoresRequest class"""

        # Initialize members of the class
        if entity_id is not APIHelper.SKIP:
            self.entity_id = entity_id 
        if plan_id is not APIHelper.SKIP:
            self.plan_id = plan_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        entity_id = EntityId.from_dictionary(dictionary.get('entityId')) if 'entityId' in dictionary.keys() else APIHelper.SKIP
        plan_id = dictionary.get("planId") if dictionary.get("planId") else APIHelper.SKIP
        # Return an object of this model
        return cls(entity_id,
                   plan_id)
