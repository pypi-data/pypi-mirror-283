# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.arg import Arg


class IAgent3(object):

    """Implementation of the 'IAgent3' model.

    TODO: type model description here.

    Attributes:
        args (List[Arg]): TODO: type description here.
        file (str): File where table and views are defined
        frequency (str): Frequency at which the iagent should execute the
            commands and extract the data. Specify positive integer followed
            by s/m/h/d/w/y representing
            seconds/minutes/hours/days/weeks/years. Eg: 2s
        table (str): Table which needs to be used to extract the data
        target (str): To run command on FPC, specifiy FPC target (optional)

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "file": 'file',
        "frequency": 'frequency',
        "table": 'table',
        "args": 'args',
        "target": 'target'
    }

    _optionals = [
        'args',
        'target',
    ]

    def __init__(self,
                 file=None,
                 frequency=None,
                 table=None,
                 args=APIHelper.SKIP,
                 target=APIHelper.SKIP):
        """Constructor for the IAgent3 class"""

        # Initialize members of the class
        if args is not APIHelper.SKIP:
            self.args = args 
        self.file = file 
        self.frequency = frequency 
        self.table = table 
        if target is not APIHelper.SKIP:
            self.target = target 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        file = dictionary.get("file") if dictionary.get("file") else None
        frequency = dictionary.get("frequency") if dictionary.get("frequency") else None
        table = dictionary.get("table") if dictionary.get("table") else None
        args = None
        if dictionary.get('args') is not None:
            args = [Arg.from_dictionary(x) for x in dictionary.get('args')]
        else:
            args = APIHelper.SKIP
        target = dictionary.get("target") if dictionary.get("target") else APIHelper.SKIP
        # Return an object of this model
        return cls(file,
                   frequency,
                   table,
                   args,
                   target)
