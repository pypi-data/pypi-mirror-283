# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.cpu import Cpu
from mergedapi.models.fans import Fans
from mergedapi.models.linecards import Linecards
from mergedapi.models.memory import Memory
from mergedapi.models.psu import Psu


class Hardware(object):

    """Implementation of the 'Hardware' model.

    TODO: type model description here.

    Attributes:
        fans (Fans): TODO: type description here.
        psu (Psu): TODO: type description here.
        linecards (Linecards): TODO: type description here.
        cpu (Cpu): TODO: type description here.
        memory (Memory): TODO: type description here.
        temperature (object): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "fans": 'fans',
        "psu": 'psu',
        "linecards": 'linecards',
        "cpu": 'cpu',
        "memory": 'memory',
        "temperature": 'temperature'
    }

    _optionals = [
        'fans',
        'psu',
        'linecards',
        'cpu',
        'memory',
        'temperature',
    ]

    def __init__(self,
                 fans=APIHelper.SKIP,
                 psu=APIHelper.SKIP,
                 linecards=APIHelper.SKIP,
                 cpu=APIHelper.SKIP,
                 memory=APIHelper.SKIP,
                 temperature=APIHelper.SKIP):
        """Constructor for the Hardware class"""

        # Initialize members of the class
        if fans is not APIHelper.SKIP:
            self.fans = fans 
        if psu is not APIHelper.SKIP:
            self.psu = psu 
        if linecards is not APIHelper.SKIP:
            self.linecards = linecards 
        if cpu is not APIHelper.SKIP:
            self.cpu = cpu 
        if memory is not APIHelper.SKIP:
            self.memory = memory 
        if temperature is not APIHelper.SKIP:
            self.temperature = temperature 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        fans = Fans.from_dictionary(dictionary.get('fans')) if 'fans' in dictionary.keys() else APIHelper.SKIP
        psu = Psu.from_dictionary(dictionary.get('psu')) if 'psu' in dictionary.keys() else APIHelper.SKIP
        linecards = Linecards.from_dictionary(dictionary.get('linecards')) if 'linecards' in dictionary.keys() else APIHelper.SKIP
        cpu = Cpu.from_dictionary(dictionary.get('cpu')) if 'cpu' in dictionary.keys() else APIHelper.SKIP
        memory = Memory.from_dictionary(dictionary.get('memory')) if 'memory' in dictionary.keys() else APIHelper.SKIP
        temperature = dictionary.get("temperature") if dictionary.get("temperature") else APIHelper.SKIP
        # Return an object of this model
        return cls(fans,
                   psu,
                   linecards,
                   cpu,
                   memory,
                   temperature)
