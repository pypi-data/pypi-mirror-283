# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.data_rollup_order import DataRollupOrder
from mergedapi.models.database import Database
from mergedapi.models.rule import Rule


class RollupSummarizationSchema(object):

    """Implementation of the 'rollup-summarization_schema' model.

    Data rollup summarization

    Attributes:
        profile_id (str): Profile-id of data rollup summarization instance.
            Should be of pattern [a-zA-Z][a-zA-Z0-9_-]*
        rule (List[Rule]): TODO: type description here.
        database (List[Database]): TODO: type description here.
        data_rollup_order (List[DataRollupOrder]): List of data-roll up
            orders

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "profile_id": 'profile-id',
        "rule": 'rule',
        "database": 'database',
        "data_rollup_order": 'data-rollup-order'
    }

    _optionals = [
        'profile_id',
        'rule',
        'database',
        'data_rollup_order',
    ]

    def __init__(self,
                 profile_id=APIHelper.SKIP,
                 rule=APIHelper.SKIP,
                 database=APIHelper.SKIP,
                 data_rollup_order=APIHelper.SKIP):
        """Constructor for the RollupSummarizationSchema class"""

        # Initialize members of the class
        if profile_id is not APIHelper.SKIP:
            self.profile_id = profile_id 
        if rule is not APIHelper.SKIP:
            self.rule = rule 
        if database is not APIHelper.SKIP:
            self.database = database 
        if data_rollup_order is not APIHelper.SKIP:
            self.data_rollup_order = data_rollup_order 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        profile_id = dictionary.get("profile-id") if dictionary.get("profile-id") else APIHelper.SKIP
        rule = None
        if dictionary.get('rule') is not None:
            rule = [Rule.from_dictionary(x) for x in dictionary.get('rule')]
        else:
            rule = APIHelper.SKIP
        database = None
        if dictionary.get('database') is not None:
            database = [Database.from_dictionary(x) for x in dictionary.get('database')]
        else:
            database = APIHelper.SKIP
        data_rollup_order = None
        if dictionary.get('data-rollup-order') is not None:
            data_rollup_order = [DataRollupOrder.from_dictionary(x) for x in dictionary.get('data-rollup-order')]
        else:
            data_rollup_order = APIHelper.SKIP
        # Return an object of this model
        return cls(profile_id,
                   rule,
                   database,
                   data_rollup_order)
