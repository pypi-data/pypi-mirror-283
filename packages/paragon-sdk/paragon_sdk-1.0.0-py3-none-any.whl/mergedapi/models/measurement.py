# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.field_11 import Field11


class Measurement(object):

    """Implementation of the 'Measurement' model.

    TODO: type model description here.

    Attributes:
        apply_on_existing_data (List[str]): If configured, existing data will
            also be considered for roll up summarization, else only the newly
            incoming data will be considered
        field (List[Field11]): TODO: type description here.
        measurement_name (str): Measurement of the database for which the
            roll-up summarization profile will be applied.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "measurement_name": 'measurement-name',
        "apply_on_existing_data": 'apply-on-existing-data',
        "field": 'field'
    }

    _optionals = [
        'apply_on_existing_data',
        'field',
    ]

    _nullables = [
        'apply_on_existing_data',
    ]

    def __init__(self,
                 measurement_name=None,
                 apply_on_existing_data=APIHelper.SKIP,
                 field=APIHelper.SKIP):
        """Constructor for the Measurement class"""

        # Initialize members of the class
        if apply_on_existing_data is not APIHelper.SKIP:
            self.apply_on_existing_data = apply_on_existing_data 
        if field is not APIHelper.SKIP:
            self.field = field 
        self.measurement_name = measurement_name 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        measurement_name = dictionary.get("measurement-name") if dictionary.get("measurement-name") else None
        apply_on_existing_data = dictionary.get("apply-on-existing-data") if "apply-on-existing-data" in dictionary.keys() else APIHelper.SKIP
        field = None
        if dictionary.get('field') is not None:
            field = [Field11.from_dictionary(x) for x in dictionary.get('field')]
        else:
            field = APIHelper.SKIP
        # Return an object of this model
        return cls(measurement_name,
                   apply_on_existing_data,
                   field)
