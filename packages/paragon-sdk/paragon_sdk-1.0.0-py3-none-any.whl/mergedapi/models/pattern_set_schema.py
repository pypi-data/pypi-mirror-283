# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class PatternSetSchema(object):

    """Implementation of the 'pattern-set_schema' model.

    Pattern-set details

    Attributes:
        description (str): Pattern-set description
        name (str): Name of a pattern-set. Should be of pattern
            [a-zA-Z][a-zA-Z0-9_-]*
        pattern_names (List[str]): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "description": 'description',
        "pattern_names": 'pattern-names'
    }

    _optionals = [
        'description',
        'pattern_names',
    ]

    def __init__(self,
                 name=None,
                 description=APIHelper.SKIP,
                 pattern_names=APIHelper.SKIP):
        """Constructor for the PatternSetSchema class"""

        # Initialize members of the class
        if description is not APIHelper.SKIP:
            self.description = description 
        self.name = name 
        if pattern_names is not APIHelper.SKIP:
            self.pattern_names = pattern_names 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else None
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        pattern_names = dictionary.get("pattern-names") if dictionary.get("pattern-names") else APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   description,
                   pattern_names)
