# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.add_group_by_tag import AddGroupByTag
from mergedapi.models.add_where_condition import AddWhereCondition
from mergedapi.models.change_where_key_field import ChangeWhereKeyField
from mergedapi.models.group_by_fill import GroupByFill
from mergedapi.models.group_by_time import GroupByTime
from mergedapi.models.selected_aggregation import SelectedAggregation
from mergedapi.models.selected_device import SelectedDevice
from mergedapi.models.selected_dropdown import SelectedDropdown
from mergedapi.models.selected_field import SelectedField
from mergedapi.models.selected_group import SelectedGroup
from mergedapi.models.selected_logical_operator import SelectedLogicalOperator
from mergedapi.models.selected_topic import SelectedTopic
from mergedapi.models.selected_transformation import SelectedTransformation


class PanelDataSchema(object):

    """Implementation of the 'panel_data_schema' model.

    TODO: type model description here.

    Attributes:
        add_group_by_tag (AddGroupByTag): Group by values
        add_where_condition (AddWhereCondition): Where condition to filter
        change_where_key_field (ChangeWhereKeyField): Change where key field
        group_by_fill (GroupByFill): Group By Fill
        group_by_time (GroupByTime): Group by time
        group_type (str): Group type(device/network)
        selected_aggregation (SelectedAggregation): Aggregation type
        selected_device (SelectedDevice): Device name
        selected_dropdown (SelectedDropdown): Boolean value if selected from
            dropdown or not
        selected_field (SelectedField): Field selected for the panel
        selected_group (SelectedGroup): Device/Network group name
        selected_logical_operator (SelectedLogicalOperator): Logical operator
        selected_topic (SelectedTopic): Topic name
        selected_transformation (SelectedTransformation): Transformation type

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "add_group_by_tag": 'addGroupByTag',
        "add_where_condition": 'addWhereCondition',
        "change_where_key_field": 'changeWhereKeyField',
        "group_by_fill": 'groupByFill',
        "group_by_time": 'groupByTime',
        "group_type": 'groupType',
        "selected_aggregation": 'selectedAggregation',
        "selected_device": 'selectedDevice',
        "selected_dropdown": 'selectedDropdown',
        "selected_field": 'selectedField',
        "selected_group": 'selectedGroup',
        "selected_logical_operator": 'selectedLogicalOperator',
        "selected_topic": 'selectedTopic',
        "selected_transformation": 'selectedTransformation'
    }

    _optionals = [
        'add_group_by_tag',
        'add_where_condition',
        'change_where_key_field',
        'group_by_fill',
        'group_by_time',
        'group_type',
        'selected_aggregation',
        'selected_device',
        'selected_dropdown',
        'selected_field',
        'selected_group',
        'selected_logical_operator',
        'selected_topic',
        'selected_transformation',
    ]

    def __init__(self,
                 add_group_by_tag=APIHelper.SKIP,
                 add_where_condition=APIHelper.SKIP,
                 change_where_key_field=APIHelper.SKIP,
                 group_by_fill=APIHelper.SKIP,
                 group_by_time=APIHelper.SKIP,
                 group_type=APIHelper.SKIP,
                 selected_aggregation=APIHelper.SKIP,
                 selected_device=APIHelper.SKIP,
                 selected_dropdown=APIHelper.SKIP,
                 selected_field=APIHelper.SKIP,
                 selected_group=APIHelper.SKIP,
                 selected_logical_operator=APIHelper.SKIP,
                 selected_topic=APIHelper.SKIP,
                 selected_transformation=APIHelper.SKIP):
        """Constructor for the PanelDataSchema class"""

        # Initialize members of the class
        if add_group_by_tag is not APIHelper.SKIP:
            self.add_group_by_tag = add_group_by_tag 
        if add_where_condition is not APIHelper.SKIP:
            self.add_where_condition = add_where_condition 
        if change_where_key_field is not APIHelper.SKIP:
            self.change_where_key_field = change_where_key_field 
        if group_by_fill is not APIHelper.SKIP:
            self.group_by_fill = group_by_fill 
        if group_by_time is not APIHelper.SKIP:
            self.group_by_time = group_by_time 
        if group_type is not APIHelper.SKIP:
            self.group_type = group_type 
        if selected_aggregation is not APIHelper.SKIP:
            self.selected_aggregation = selected_aggregation 
        if selected_device is not APIHelper.SKIP:
            self.selected_device = selected_device 
        if selected_dropdown is not APIHelper.SKIP:
            self.selected_dropdown = selected_dropdown 
        if selected_field is not APIHelper.SKIP:
            self.selected_field = selected_field 
        if selected_group is not APIHelper.SKIP:
            self.selected_group = selected_group 
        if selected_logical_operator is not APIHelper.SKIP:
            self.selected_logical_operator = selected_logical_operator 
        if selected_topic is not APIHelper.SKIP:
            self.selected_topic = selected_topic 
        if selected_transformation is not APIHelper.SKIP:
            self.selected_transformation = selected_transformation 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        add_group_by_tag = AddGroupByTag.from_dictionary(dictionary.get('addGroupByTag')) if 'addGroupByTag' in dictionary.keys() else APIHelper.SKIP
        add_where_condition = AddWhereCondition.from_dictionary(dictionary.get('addWhereCondition')) if 'addWhereCondition' in dictionary.keys() else APIHelper.SKIP
        change_where_key_field = ChangeWhereKeyField.from_dictionary(dictionary.get('changeWhereKeyField')) if 'changeWhereKeyField' in dictionary.keys() else APIHelper.SKIP
        group_by_fill = GroupByFill.from_dictionary(dictionary.get('groupByFill')) if 'groupByFill' in dictionary.keys() else APIHelper.SKIP
        group_by_time = GroupByTime.from_dictionary(dictionary.get('groupByTime')) if 'groupByTime' in dictionary.keys() else APIHelper.SKIP
        group_type = dictionary.get("groupType") if dictionary.get("groupType") else APIHelper.SKIP
        selected_aggregation = SelectedAggregation.from_dictionary(dictionary.get('selectedAggregation')) if 'selectedAggregation' in dictionary.keys() else APIHelper.SKIP
        selected_device = SelectedDevice.from_dictionary(dictionary.get('selectedDevice')) if 'selectedDevice' in dictionary.keys() else APIHelper.SKIP
        selected_dropdown = SelectedDropdown.from_dictionary(dictionary.get('selectedDropdown')) if 'selectedDropdown' in dictionary.keys() else APIHelper.SKIP
        selected_field = SelectedField.from_dictionary(dictionary.get('selectedField')) if 'selectedField' in dictionary.keys() else APIHelper.SKIP
        selected_group = SelectedGroup.from_dictionary(dictionary.get('selectedGroup')) if 'selectedGroup' in dictionary.keys() else APIHelper.SKIP
        selected_logical_operator = SelectedLogicalOperator.from_dictionary(dictionary.get('selectedLogicalOperator')) if 'selectedLogicalOperator' in dictionary.keys() else APIHelper.SKIP
        selected_topic = SelectedTopic.from_dictionary(dictionary.get('selectedTopic')) if 'selectedTopic' in dictionary.keys() else APIHelper.SKIP
        selected_transformation = SelectedTransformation.from_dictionary(dictionary.get('selectedTransformation')) if 'selectedTransformation' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(add_group_by_tag,
                   add_where_condition,
                   change_where_key_field,
                   group_by_fill,
                   group_by_time,
                   group_type,
                   selected_aggregation,
                   selected_device,
                   selected_dropdown,
                   selected_field,
                   selected_group,
                   selected_logical_operator,
                   selected_topic,
                   selected_transformation)
