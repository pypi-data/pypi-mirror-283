# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.action_scheduler import ActionScheduler
from mergedapi.models.logging_1 import Logging1
from mergedapi.models.notification_1 import Notification1
from mergedapi.models.publish_1 import Publish1
from mergedapi.models.root_cause_analysis import RootCauseAnalysis
from mergedapi.models.scheduler import Scheduler
from mergedapi.models.variable_1 import Variable1


class NetworkGroupSchema(object):

    """Implementation of the 'network-group_schema' model.

    TODO: type model description here.

    Attributes:
        description (str): Description about the network group
        ingest_frequency (List[str]): TODO: type description here.
        network_group_name (str): Name of the network group. Should be of
            pattern [a-zA-Z0-9][a-zA-Z0-9-]*
        org_id (str): Organization id of the network group
        publish (Publish1): TODO: type description here.
        logging (Logging1): Logging configuration
        reports (List[str]): TODO: type description here.
        root_cause_analysis (RootCauseAnalysis): Setting for root cause
            analysis
        notification (Notification1): TODO: type description here.
        playbooks (List[str]): TODO: type description here.
        tagging_profile (List[str]): TODO: type description here.
        scheduler (List[Scheduler]): List of schedulers associated with the
            playbook instances
        variable (List[Variable1]): Playbook variable configuration
        action_scheduler (ActionScheduler): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "network_group_name": 'network-group-name',
        "description": 'description',
        "ingest_frequency": 'ingest-frequency',
        "org_id": 'org-id',
        "publish": 'publish',
        "logging": 'logging',
        "reports": 'reports',
        "root_cause_analysis": 'root-cause-analysis',
        "notification": 'notification',
        "playbooks": 'playbooks',
        "tagging_profile": 'tagging-profile',
        "scheduler": 'scheduler',
        "variable": 'variable',
        "action_scheduler": 'action-scheduler'
    }

    _optionals = [
        'description',
        'ingest_frequency',
        'org_id',
        'publish',
        'logging',
        'reports',
        'root_cause_analysis',
        'notification',
        'playbooks',
        'tagging_profile',
        'scheduler',
        'variable',
        'action_scheduler',
    ]

    def __init__(self,
                 network_group_name=None,
                 description=APIHelper.SKIP,
                 ingest_frequency=APIHelper.SKIP,
                 org_id=APIHelper.SKIP,
                 publish=APIHelper.SKIP,
                 logging=APIHelper.SKIP,
                 reports=APIHelper.SKIP,
                 root_cause_analysis=APIHelper.SKIP,
                 notification=APIHelper.SKIP,
                 playbooks=APIHelper.SKIP,
                 tagging_profile=APIHelper.SKIP,
                 scheduler=APIHelper.SKIP,
                 variable=APIHelper.SKIP,
                 action_scheduler=APIHelper.SKIP):
        """Constructor for the NetworkGroupSchema class"""

        # Initialize members of the class
        if description is not APIHelper.SKIP:
            self.description = description 
        if ingest_frequency is not APIHelper.SKIP:
            self.ingest_frequency = ingest_frequency 
        self.network_group_name = network_group_name 
        if org_id is not APIHelper.SKIP:
            self.org_id = org_id 
        if publish is not APIHelper.SKIP:
            self.publish = publish 
        if logging is not APIHelper.SKIP:
            self.logging = logging 
        if reports is not APIHelper.SKIP:
            self.reports = reports 
        if root_cause_analysis is not APIHelper.SKIP:
            self.root_cause_analysis = root_cause_analysis 
        if notification is not APIHelper.SKIP:
            self.notification = notification 
        if playbooks is not APIHelper.SKIP:
            self.playbooks = playbooks 
        if tagging_profile is not APIHelper.SKIP:
            self.tagging_profile = tagging_profile 
        if scheduler is not APIHelper.SKIP:
            self.scheduler = scheduler 
        if variable is not APIHelper.SKIP:
            self.variable = variable 
        if action_scheduler is not APIHelper.SKIP:
            self.action_scheduler = action_scheduler 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        network_group_name = dictionary.get("network-group-name") if dictionary.get("network-group-name") else None
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        ingest_frequency = dictionary.get("ingest-frequency") if dictionary.get("ingest-frequency") else APIHelper.SKIP
        org_id = dictionary.get("org-id") if dictionary.get("org-id") else APIHelper.SKIP
        publish = Publish1.from_dictionary(dictionary.get('publish')) if 'publish' in dictionary.keys() else APIHelper.SKIP
        logging = Logging1.from_dictionary(dictionary.get('logging')) if 'logging' in dictionary.keys() else APIHelper.SKIP
        reports = dictionary.get("reports") if dictionary.get("reports") else APIHelper.SKIP
        root_cause_analysis = RootCauseAnalysis.from_dictionary(dictionary.get('root-cause-analysis')) if 'root-cause-analysis' in dictionary.keys() else APIHelper.SKIP
        notification = Notification1.from_dictionary(dictionary.get('notification')) if 'notification' in dictionary.keys() else APIHelper.SKIP
        playbooks = dictionary.get("playbooks") if dictionary.get("playbooks") else APIHelper.SKIP
        tagging_profile = dictionary.get("tagging-profile") if dictionary.get("tagging-profile") else APIHelper.SKIP
        scheduler = None
        if dictionary.get('scheduler') is not None:
            scheduler = [Scheduler.from_dictionary(x) for x in dictionary.get('scheduler')]
        else:
            scheduler = APIHelper.SKIP
        variable = None
        if dictionary.get('variable') is not None:
            variable = [Variable1.from_dictionary(x) for x in dictionary.get('variable')]
        else:
            variable = APIHelper.SKIP
        action_scheduler = ActionScheduler.from_dictionary(dictionary.get('action-scheduler')) if 'action-scheduler' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(network_group_name,
                   description,
                   ingest_frequency,
                   org_id,
                   publish,
                   logging,
                   reports,
                   root_cause_analysis,
                   notification,
                   playbooks,
                   tagging_profile,
                   scheduler,
                   variable,
                   action_scheduler)
