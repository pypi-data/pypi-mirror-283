# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.canvas_panel import CanvasPanel


class GraphCanva(object):

    """Implementation of the 'GraphCanva' model.

    TODO: type model description here.

    Attributes:
        canvas_panel (List[CanvasPanel]): Canvas panel
        name (str): Name of the canvas.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "canvas_panel": 'canvas-panel'
    }

    _optionals = [
        'canvas_panel',
    ]

    def __init__(self,
                 name=None,
                 canvas_panel=APIHelper.SKIP):
        """Constructor for the GraphCanva class"""

        # Initialize members of the class
        if canvas_panel is not APIHelper.SKIP:
            self.canvas_panel = canvas_panel 
        self.name = name 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else None
        canvas_panel = None
        if dictionary.get('canvas-panel') is not None:
            canvas_panel = [CanvasPanel.from_dictionary(x) for x in dictionary.get('canvas-panel')]
        else:
            canvas_panel = APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   canvas_panel)
