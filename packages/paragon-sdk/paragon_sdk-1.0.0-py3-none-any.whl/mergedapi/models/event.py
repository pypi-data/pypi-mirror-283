# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class Event(object):

    """Implementation of the 'event' model.

    TODO: type model description here.

    Attributes:
        color (Color3Enum): Event severity
        event_name (str): Event name
        frequency (int): Frequency of the event.
        timestamp (datetime): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "color": 'color',
        "event_name": 'event_name',
        "frequency": 'frequency',
        "timestamp": 'timestamp'
    }

    _optionals = [
        'color',
        'event_name',
        'frequency',
        'timestamp',
    ]

    def __init__(self,
                 color=APIHelper.SKIP,
                 event_name=APIHelper.SKIP,
                 frequency=APIHelper.SKIP,
                 timestamp=APIHelper.SKIP):
        """Constructor for the Event class"""

        # Initialize members of the class
        if color is not APIHelper.SKIP:
            self.color = color 
        if event_name is not APIHelper.SKIP:
            self.event_name = event_name 
        if frequency is not APIHelper.SKIP:
            self.frequency = frequency 
        if timestamp is not APIHelper.SKIP:
            self.timestamp = APIHelper.apply_datetime_converter(timestamp, APIHelper.RFC3339DateTime) if timestamp else None 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        color = dictionary.get("color") if dictionary.get("color") else APIHelper.SKIP
        event_name = dictionary.get("event_name") if dictionary.get("event_name") else APIHelper.SKIP
        frequency = dictionary.get("frequency") if dictionary.get("frequency") else APIHelper.SKIP
        timestamp = APIHelper.RFC3339DateTime.from_value(dictionary.get("timestamp")).datetime if dictionary.get("timestamp") else APIHelper.SKIP
        # Return an object of this model
        return cls(color,
                   event_name,
                   frequency,
                   timestamp)
