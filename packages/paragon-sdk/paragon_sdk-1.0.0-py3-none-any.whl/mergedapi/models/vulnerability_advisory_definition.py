# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class VulnerabilityAdvisoryDefinition(object):

    """Implementation of the 'vulnerabilityAdvisoryDefinition' model.

    AdvisoryDefinition defines an advisory.

    Attributes:
        id (str): Uniquely identifies the advisory; assigned by the server.
        sirt_id (str): The SIRT-supplied ID of the advisory. Derived from SIRT
            document field: sirtSecurityAdvisory.
        title (str): Title of the advisory. Derived from SIRT document field:
            headline.
        conditions (str): Describes the conditions in which the incident
            applies. Derived from SIRT document field: trigger.
        description (str): Full description of the incident described by the
            advisory. Derived from SIRT document field: description.
        workaround (str): Describes any workaround for the incident described
            by the advisory. Derived from SIRT document field: workaround.
        product_categories (List[str]): Identifies the products that are
            affected by the incident, for example MX240, PTX5000. Derived from
            the SIRT document field: productCategory.
        affected_versions (List[str]): Lists the OS versions that are affected
            by the advisory, for example 19.4X52, 20.1R2-S2. Derived from the
            SIRT document field: affectedVersion.
        cvss_score (str): The CVSS score assigned to the incident, for example
            7.5, 5.3. Derived from the SIRT document field: cvssScore.
        cvss_score_metrics (str): Identfies the metrics used to calculate the
            CVSS score, for example
            CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H. Derived from the
            SIRT document field: cvssScoreMetrics.
        last_modified (datetime): Time at which the advisory was last
            modified. Derived from the SIRT document field: lastModified.
        severity_level (VulnerabilityCVSSLevelEnum): TODO: type description
            here.
        cve_ids (List[str]): TODO: type description here.
        acked (bool): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "sirt_id": 'sirtId',
        "title": 'title',
        "conditions": 'conditions',
        "description": 'description',
        "workaround": 'workaround',
        "product_categories": 'productCategories',
        "affected_versions": 'affectedVersions',
        "cvss_score": 'cvssScore',
        "cvss_score_metrics": 'cvssScoreMetrics',
        "last_modified": 'lastModified',
        "severity_level": 'severityLevel',
        "cve_ids": 'cveIds',
        "acked": 'acked'
    }

    _optionals = [
        'id',
        'sirt_id',
        'title',
        'conditions',
        'description',
        'workaround',
        'product_categories',
        'affected_versions',
        'cvss_score',
        'cvss_score_metrics',
        'last_modified',
        'severity_level',
        'cve_ids',
        'acked',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 sirt_id=APIHelper.SKIP,
                 title=APIHelper.SKIP,
                 conditions=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 workaround=APIHelper.SKIP,
                 product_categories=APIHelper.SKIP,
                 affected_versions=APIHelper.SKIP,
                 cvss_score=APIHelper.SKIP,
                 cvss_score_metrics=APIHelper.SKIP,
                 last_modified=APIHelper.SKIP,
                 severity_level=APIHelper.SKIP,
                 cve_ids=APIHelper.SKIP,
                 acked=APIHelper.SKIP):
        """Constructor for the VulnerabilityAdvisoryDefinition class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if sirt_id is not APIHelper.SKIP:
            self.sirt_id = sirt_id 
        if title is not APIHelper.SKIP:
            self.title = title 
        if conditions is not APIHelper.SKIP:
            self.conditions = conditions 
        if description is not APIHelper.SKIP:
            self.description = description 
        if workaround is not APIHelper.SKIP:
            self.workaround = workaround 
        if product_categories is not APIHelper.SKIP:
            self.product_categories = product_categories 
        if affected_versions is not APIHelper.SKIP:
            self.affected_versions = affected_versions 
        if cvss_score is not APIHelper.SKIP:
            self.cvss_score = cvss_score 
        if cvss_score_metrics is not APIHelper.SKIP:
            self.cvss_score_metrics = cvss_score_metrics 
        if last_modified is not APIHelper.SKIP:
            self.last_modified = APIHelper.apply_datetime_converter(last_modified, APIHelper.RFC3339DateTime) if last_modified else None 
        if severity_level is not APIHelper.SKIP:
            self.severity_level = severity_level 
        if cve_ids is not APIHelper.SKIP:
            self.cve_ids = cve_ids 
        if acked is not APIHelper.SKIP:
            self.acked = acked 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        sirt_id = dictionary.get("sirtId") if dictionary.get("sirtId") else APIHelper.SKIP
        title = dictionary.get("title") if dictionary.get("title") else APIHelper.SKIP
        conditions = dictionary.get("conditions") if dictionary.get("conditions") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        workaround = dictionary.get("workaround") if dictionary.get("workaround") else APIHelper.SKIP
        product_categories = dictionary.get("productCategories") if dictionary.get("productCategories") else APIHelper.SKIP
        affected_versions = dictionary.get("affectedVersions") if dictionary.get("affectedVersions") else APIHelper.SKIP
        cvss_score = dictionary.get("cvssScore") if dictionary.get("cvssScore") else APIHelper.SKIP
        cvss_score_metrics = dictionary.get("cvssScoreMetrics") if dictionary.get("cvssScoreMetrics") else APIHelper.SKIP
        last_modified = APIHelper.RFC3339DateTime.from_value(dictionary.get("lastModified")).datetime if dictionary.get("lastModified") else APIHelper.SKIP
        severity_level = dictionary.get("severityLevel") if dictionary.get("severityLevel") else APIHelper.SKIP
        cve_ids = dictionary.get("cveIds") if dictionary.get("cveIds") else APIHelper.SKIP
        acked = dictionary.get("acked") if "acked" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   sirt_id,
                   title,
                   conditions,
                   description,
                   workaround,
                   product_categories,
                   affected_versions,
                   cvss_score,
                   cvss_score_metrics,
                   last_modified,
                   severity_level,
                   cve_ids,
                   acked)
