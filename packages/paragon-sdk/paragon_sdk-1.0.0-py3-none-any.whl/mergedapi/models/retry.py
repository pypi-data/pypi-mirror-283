# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.backoff import Backoff


class Retry(object):

    """Implementation of the 'Retry' model.

    Retry failed steps

    Attributes:
        backoff (Backoff): Backoff retry attempts exponentially
        limit (int): Maximum number of retry attempts

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "backoff": 'backoff',
        "limit": 'limit'
    }

    _optionals = [
        'backoff',
        'limit',
    ]

    def __init__(self,
                 backoff=APIHelper.SKIP,
                 limit=APIHelper.SKIP):
        """Constructor for the Retry class"""

        # Initialize members of the class
        if backoff is not APIHelper.SKIP:
            self.backoff = backoff 
        if limit is not APIHelper.SKIP:
            self.limit = limit 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        backoff = Backoff.from_dictionary(dictionary.get('backoff')) if 'backoff' in dictionary.keys() else APIHelper.SKIP
        limit = dictionary.get("limit") if dictionary.get("limit") else APIHelper.SKIP
        # Return an object of this model
        return cls(backoff,
                   limit)
