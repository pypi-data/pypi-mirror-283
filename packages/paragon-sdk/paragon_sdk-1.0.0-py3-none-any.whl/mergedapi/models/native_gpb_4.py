# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class NativeGpb4(object):

    """Implementation of the 'NativeGpb4' model.

    TODO: type model description here.

    Attributes:
        frequency (str): Sensor subscription duration. Specify integer >= 0
            followed by s/m/h/d/w/y representing
            seconds/minutes/hours/days/weeks/years. Eg: 2s. A frequency of
            zero should be used only in case of events subscription
        port (int): Port on which the native sensors will be received
        sensor_name (str): Sensor to subscribe

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "port": 'port',
        "sensor_name": 'sensor-name',
        "frequency": 'frequency'
    }

    _optionals = [
        'frequency',
    ]

    def __init__(self,
                 port=None,
                 sensor_name=None,
                 frequency=APIHelper.SKIP):
        """Constructor for the NativeGpb4 class"""

        # Initialize members of the class
        if frequency is not APIHelper.SKIP:
            self.frequency = frequency 
        self.port = port 
        self.sensor_name = sensor_name 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        port = dictionary.get("port") if dictionary.get("port") else None
        sensor_name = dictionary.get("sensor-name") if dictionary.get("sensor-name") else None
        frequency = dictionary.get("frequency") if dictionary.get("frequency") else APIHelper.SKIP
        # Return an object of this model
        return cls(port,
                   sensor_name,
                   frequency)
