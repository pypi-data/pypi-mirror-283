# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.status import Status
from mergedapi.models.user_defined_action import UserDefinedAction
from mergedapi.models.workflow import Workflow


class Then16(object):

    """Implementation of the 'Then16' model.

    TODO: type model description here.

    Attributes:
        next (List[object]): Continue evaluating next term in a trigger
        status (Status): TODO: type description here.
        user_defined_action (List[UserDefinedAction]): TODO: type description
            here.
        workflow (List[Workflow]): Trigger workflow execution

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "next": 'next',
        "status": 'status',
        "user_defined_action": 'user-defined-action',
        "workflow": 'workflow'
    }

    _optionals = [
        'next',
        'status',
        'user_defined_action',
        'workflow',
    ]

    def __init__(self,
                 next=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 user_defined_action=APIHelper.SKIP,
                 workflow=APIHelper.SKIP):
        """Constructor for the Then16 class"""

        # Initialize members of the class
        if next is not APIHelper.SKIP:
            self.next = next 
        if status is not APIHelper.SKIP:
            self.status = status 
        if user_defined_action is not APIHelper.SKIP:
            self.user_defined_action = user_defined_action 
        if workflow is not APIHelper.SKIP:
            self.workflow = workflow 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        next = dictionary.get("next") if dictionary.get("next") else APIHelper.SKIP
        status = Status.from_dictionary(dictionary.get('status')) if 'status' in dictionary.keys() else APIHelper.SKIP
        user_defined_action = None
        if dictionary.get('user-defined-action') is not None:
            user_defined_action = [UserDefinedAction.from_dictionary(x) for x in dictionary.get('user-defined-action')]
        else:
            user_defined_action = APIHelper.SKIP
        workflow = None
        if dictionary.get('workflow') is not None:
            workflow = [Workflow.from_dictionary(x) for x in dictionary.get('workflow')]
        else:
            workflow = APIHelper.SKIP
        # Return an object of this model
        return cls(next,
                   status,
                   user_defined_action,
                   workflow)
