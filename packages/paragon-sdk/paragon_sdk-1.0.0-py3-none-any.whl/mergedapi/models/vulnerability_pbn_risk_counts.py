# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.acked import Acked
from mergedapi.models.unacked import Unacked


class VulnerabilityPBNRiskCounts(object):

    """Implementation of the 'vulnerabilityPBNRiskCounts' model.

    Defines the PBN/device counts for PBNs at a risk level.

    Attributes:
        level (VulnerabilityCustomerRiskEnum): TODO: type description here.
        unacked (Unacked): TODO: type description here.
        acked (Acked): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "level": 'level',
        "unacked": 'unacked',
        "acked": 'acked'
    }

    _optionals = [
        'level',
        'unacked',
        'acked',
    ]

    def __init__(self,
                 level=APIHelper.SKIP,
                 unacked=APIHelper.SKIP,
                 acked=APIHelper.SKIP):
        """Constructor for the VulnerabilityPBNRiskCounts class"""

        # Initialize members of the class
        if level is not APIHelper.SKIP:
            self.level = level 
        if unacked is not APIHelper.SKIP:
            self.unacked = unacked 
        if acked is not APIHelper.SKIP:
            self.acked = acked 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        level = dictionary.get("level") if dictionary.get("level") else APIHelper.SKIP
        unacked = Unacked.from_dictionary(dictionary.get('unacked')) if 'unacked' in dictionary.keys() else APIHelper.SKIP
        acked = Acked.from_dictionary(dictionary.get('acked')) if 'acked' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(level,
                   unacked,
                   acked)
