# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.data_type import DataType
from mergedapi.models.path_1 import Path1


class Raw(object):

    """Implementation of the 'Raw' model.

    TODO: type model description here.

    Attributes:
        data_type (List[DataType]): TODO: type description here.
        name (str): Name of raw-data summarization profile
        path (List[Path1]): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "data_type": 'data-type',
        "path": 'path'
    }

    _optionals = [
        'data_type',
        'path',
    ]

    def __init__(self,
                 name=None,
                 data_type=APIHelper.SKIP,
                 path=APIHelper.SKIP):
        """Constructor for the Raw class"""

        # Initialize members of the class
        if data_type is not APIHelper.SKIP:
            self.data_type = data_type 
        self.name = name 
        if path is not APIHelper.SKIP:
            self.path = path 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else None
        data_type = None
        if dictionary.get('data-type') is not None:
            data_type = [DataType.from_dictionary(x) for x in dictionary.get('data-type')]
        else:
            data_type = APIHelper.SKIP
        path = None
        if dictionary.get('path') is not None:
            path = [Path1.from_dictionary(x) for x in dictionary.get('path')]
        else:
            path = APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   data_type,
                   path)
