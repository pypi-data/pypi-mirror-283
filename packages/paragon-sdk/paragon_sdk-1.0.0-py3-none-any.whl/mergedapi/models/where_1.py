# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.does_not_match_with_1 import DoesNotMatchWith1
from mergedapi.models.equal_to_1 import EqualTo1
from mergedapi.models.eval_1 import Eval1
from mergedapi.models.greater_than_1 import GreaterThan1
from mergedapi.models.greater_than_or_equal_to_1 import GreaterThanOrEqualTo1
from mergedapi.models.less_than_1 import LessThan1
from mergedapi.models.less_than_or_equal_to_1 import LessThanOrEqualTo1
from mergedapi.models.matches_with_1 import MatchesWith1
from mergedapi.models.not_equal_to_1 import NotEqualTo1
from mergedapi.models.user_defined_function_2 import UserDefinedFunction2


class Where1(object):

    """Implementation of the 'Where1' model.

    TODO: type model description here.

    Attributes:
        does_not_match_with (List[DoesNotMatchWith1]): TODO: type description
            here.
        equal_to (List[EqualTo1]): TODO: type description here.
        eval (List[Eval1]): TODO: type description here.
        greater_than (List[GreaterThan1]): TODO: type description here.
        greater_than_or_equal_to (List[GreaterThanOrEqualTo1]): TODO: type
            description here.
        less_than (List[LessThan1]): TODO: type description here.
        less_than_or_equal_to (List[LessThanOrEqualTo1]): TODO: type
            description here.
        matches_with (List[MatchesWith1]): TODO: type description here.
        not_equal_to (List[NotEqualTo1]): TODO: type description here.
        user_defined_function (List[UserDefinedFunction2]): User defined
            function to populate field value

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "does_not_match_with": 'does-not-match-with',
        "equal_to": 'equal-to',
        "eval": 'eval',
        "greater_than": 'greater-than',
        "greater_than_or_equal_to": 'greater-than-or-equal-to',
        "less_than": 'less-than',
        "less_than_or_equal_to": 'less-than-or-equal-to',
        "matches_with": 'matches-with',
        "not_equal_to": 'not-equal-to',
        "user_defined_function": 'user-defined-function'
    }

    _optionals = [
        'does_not_match_with',
        'equal_to',
        'eval',
        'greater_than',
        'greater_than_or_equal_to',
        'less_than',
        'less_than_or_equal_to',
        'matches_with',
        'not_equal_to',
        'user_defined_function',
    ]

    def __init__(self,
                 does_not_match_with=APIHelper.SKIP,
                 equal_to=APIHelper.SKIP,
                 eval=APIHelper.SKIP,
                 greater_than=APIHelper.SKIP,
                 greater_than_or_equal_to=APIHelper.SKIP,
                 less_than=APIHelper.SKIP,
                 less_than_or_equal_to=APIHelper.SKIP,
                 matches_with=APIHelper.SKIP,
                 not_equal_to=APIHelper.SKIP,
                 user_defined_function=APIHelper.SKIP):
        """Constructor for the Where1 class"""

        # Initialize members of the class
        if does_not_match_with is not APIHelper.SKIP:
            self.does_not_match_with = does_not_match_with 
        if equal_to is not APIHelper.SKIP:
            self.equal_to = equal_to 
        if eval is not APIHelper.SKIP:
            self.eval = eval 
        if greater_than is not APIHelper.SKIP:
            self.greater_than = greater_than 
        if greater_than_or_equal_to is not APIHelper.SKIP:
            self.greater_than_or_equal_to = greater_than_or_equal_to 
        if less_than is not APIHelper.SKIP:
            self.less_than = less_than 
        if less_than_or_equal_to is not APIHelper.SKIP:
            self.less_than_or_equal_to = less_than_or_equal_to 
        if matches_with is not APIHelper.SKIP:
            self.matches_with = matches_with 
        if not_equal_to is not APIHelper.SKIP:
            self.not_equal_to = not_equal_to 
        if user_defined_function is not APIHelper.SKIP:
            self.user_defined_function = user_defined_function 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        does_not_match_with = None
        if dictionary.get('does-not-match-with') is not None:
            does_not_match_with = [DoesNotMatchWith1.from_dictionary(x) for x in dictionary.get('does-not-match-with')]
        else:
            does_not_match_with = APIHelper.SKIP
        equal_to = None
        if dictionary.get('equal-to') is not None:
            equal_to = [EqualTo1.from_dictionary(x) for x in dictionary.get('equal-to')]
        else:
            equal_to = APIHelper.SKIP
        eval = None
        if dictionary.get('eval') is not None:
            eval = [Eval1.from_dictionary(x) for x in dictionary.get('eval')]
        else:
            eval = APIHelper.SKIP
        greater_than = None
        if dictionary.get('greater-than') is not None:
            greater_than = [GreaterThan1.from_dictionary(x) for x in dictionary.get('greater-than')]
        else:
            greater_than = APIHelper.SKIP
        greater_than_or_equal_to = None
        if dictionary.get('greater-than-or-equal-to') is not None:
            greater_than_or_equal_to = [GreaterThanOrEqualTo1.from_dictionary(x) for x in dictionary.get('greater-than-or-equal-to')]
        else:
            greater_than_or_equal_to = APIHelper.SKIP
        less_than = None
        if dictionary.get('less-than') is not None:
            less_than = [LessThan1.from_dictionary(x) for x in dictionary.get('less-than')]
        else:
            less_than = APIHelper.SKIP
        less_than_or_equal_to = None
        if dictionary.get('less-than-or-equal-to') is not None:
            less_than_or_equal_to = [LessThanOrEqualTo1.from_dictionary(x) for x in dictionary.get('less-than-or-equal-to')]
        else:
            less_than_or_equal_to = APIHelper.SKIP
        matches_with = None
        if dictionary.get('matches-with') is not None:
            matches_with = [MatchesWith1.from_dictionary(x) for x in dictionary.get('matches-with')]
        else:
            matches_with = APIHelper.SKIP
        not_equal_to = None
        if dictionary.get('not-equal-to') is not None:
            not_equal_to = [NotEqualTo1.from_dictionary(x) for x in dictionary.get('not-equal-to')]
        else:
            not_equal_to = APIHelper.SKIP
        user_defined_function = None
        if dictionary.get('user-defined-function') is not None:
            user_defined_function = [UserDefinedFunction2.from_dictionary(x) for x in dictionary.get('user-defined-function')]
        else:
            user_defined_function = APIHelper.SKIP
        # Return an object of this model
        return cls(does_not_match_with,
                   equal_to,
                   eval,
                   greater_than,
                   greater_than_or_equal_to,
                   less_than,
                   less_than_or_equal_to,
                   matches_with,
                   not_equal_to,
                   user_defined_function)
