# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class Pagination(object):

    """Implementation of the 'Pagination' model.

    TODO: type model description here.

    Attributes:
        page_size (int): Defines the number of entities to be returned. If
            this is 0, the other fields are ignored and all qualifying
            entities will be returned. If non-0, the corresponding
            PaginationResponse will be populated with the total number of
            entities (subject to any filtering).
        page_offset (int): Holds the zero-based index of the page of results
            to be returned.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "page_size": 'pageSize',
        "page_offset": 'pageOffset'
    }

    _optionals = [
        'page_size',
        'page_offset',
    ]

    def __init__(self,
                 page_size=APIHelper.SKIP,
                 page_offset=APIHelper.SKIP):
        """Constructor for the Pagination class"""

        # Initialize members of the class
        if page_size is not APIHelper.SKIP:
            self.page_size = page_size 
        if page_offset is not APIHelper.SKIP:
            self.page_offset = page_offset 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        page_size = dictionary.get("pageSize") if dictionary.get("pageSize") else APIHelper.SKIP
        page_offset = dictionary.get("pageOffset") if dictionary.get("pageOffset") else APIHelper.SKIP
        # Return an object of this model
        return cls(page_size,
                   page_offset)
