# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.ml_model_builder import MLModelBuilder
from mergedapi.models.non_sensor_rules import NonSensorRules
from mergedapi.models.reports_generation import ReportsGeneration
from mergedapi.models.resource_discovery import ResourceDiscovery
from mergedapi.models.trigger_evaluation import TriggerEvaluation


class Logging1(object):

    """Implementation of the 'Logging1' model.

    Logging configuration

    Attributes:
        log_level (LogLevel1Enum): Global log level
        non_sensor_rules (NonSensorRules): Service responsible for non-sensor
            and network-rules
        reports_generation (ReportsGeneration): Service responsible for
            generating reports
        trigger_evaluation (TriggerEvaluation): Service responsible for
            trigger-evaluation
        ml_model_builder (MLModelBuilder): Service responsible for building
            the model for Machine Learning
        resource_discovery (ResourceDiscovery): Service responsible for
            discovering resources

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "log_level": 'log-level',
        "non_sensor_rules": 'non-sensor-rules',
        "reports_generation": 'reports-generation',
        "trigger_evaluation": 'trigger-evaluation',
        "ml_model_builder": 'ML-model-builder',
        "resource_discovery": 'resource-discovery'
    }

    _optionals = [
        'log_level',
        'non_sensor_rules',
        'reports_generation',
        'trigger_evaluation',
        'ml_model_builder',
        'resource_discovery',
    ]

    def __init__(self,
                 log_level=APIHelper.SKIP,
                 non_sensor_rules=APIHelper.SKIP,
                 reports_generation=APIHelper.SKIP,
                 trigger_evaluation=APIHelper.SKIP,
                 ml_model_builder=APIHelper.SKIP,
                 resource_discovery=APIHelper.SKIP):
        """Constructor for the Logging1 class"""

        # Initialize members of the class
        if log_level is not APIHelper.SKIP:
            self.log_level = log_level 
        if non_sensor_rules is not APIHelper.SKIP:
            self.non_sensor_rules = non_sensor_rules 
        if reports_generation is not APIHelper.SKIP:
            self.reports_generation = reports_generation 
        if trigger_evaluation is not APIHelper.SKIP:
            self.trigger_evaluation = trigger_evaluation 
        if ml_model_builder is not APIHelper.SKIP:
            self.ml_model_builder = ml_model_builder 
        if resource_discovery is not APIHelper.SKIP:
            self.resource_discovery = resource_discovery 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        log_level = dictionary.get("log-level") if dictionary.get("log-level") else APIHelper.SKIP
        non_sensor_rules = NonSensorRules.from_dictionary(dictionary.get('non-sensor-rules')) if 'non-sensor-rules' in dictionary.keys() else APIHelper.SKIP
        reports_generation = ReportsGeneration.from_dictionary(dictionary.get('reports-generation')) if 'reports-generation' in dictionary.keys() else APIHelper.SKIP
        trigger_evaluation = TriggerEvaluation.from_dictionary(dictionary.get('trigger-evaluation')) if 'trigger-evaluation' in dictionary.keys() else APIHelper.SKIP
        ml_model_builder = MLModelBuilder.from_dictionary(dictionary.get('ML-model-builder')) if 'ML-model-builder' in dictionary.keys() else APIHelper.SKIP
        resource_discovery = ResourceDiscovery.from_dictionary(dictionary.get('resource-discovery')) if 'resource-discovery' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(log_level,
                   non_sensor_rules,
                   reports_generation,
                   trigger_evaluation,
                   ml_model_builder,
                   resource_discovery)
