# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class GreaterThanOrEqualTo2(object):

    """Implementation of the 'GreaterThanOrEqualTo2' model.

    TODO: type model description here.

    Attributes:
        left_operand (str): Left operand
        right_operand (str): right operand
        in_memory (bool): Look for right-operand in internal cache

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "left_operand": 'left-operand',
        "right_operand": 'right-operand',
        "in_memory": 'in-memory'
    }

    _optionals = [
        'in_memory',
    ]

    def __init__(self,
                 left_operand=None,
                 right_operand=None,
                 in_memory=APIHelper.SKIP):
        """Constructor for the GreaterThanOrEqualTo2 class"""

        # Initialize members of the class
        self.left_operand = left_operand 
        self.right_operand = right_operand 
        if in_memory is not APIHelper.SKIP:
            self.in_memory = in_memory 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        left_operand = dictionary.get("left-operand") if dictionary.get("left-operand") else None
        right_operand = dictionary.get("right-operand") if dictionary.get("right-operand") else None
        in_memory = dictionary.get("in-memory") if "in-memory" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(left_operand,
                   right_operand,
                   in_memory)
