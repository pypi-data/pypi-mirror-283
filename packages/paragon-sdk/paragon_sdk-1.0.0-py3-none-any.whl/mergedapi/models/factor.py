# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class Factor(object):

    """Implementation of the 'Factor' model.

    TODO: type model description here.

    Attributes:
        id (str): The id of the factor.
        name (str): TODO: type description here.
        version (int): Defines the version number of the factor.
        title (str): Short explanatory title for the factor (for presentation
            on GUI etc).
        description (str): Describes the factor.
        mtype (ScoreFactorTypeEnum): TODO: type description here.
        enumerations (List[str]): When type is FACTOR_TYPE_ENUMERATION,
            defines the valid enumeration constants.
        interval (ScoreIntervalEnum): TODO: type description here.
        max_periods (int): When type is FACTOR_TYPE_REPUTATIONAL, defines the
            maximum number of periods.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "name": 'name',
        "version": 'version',
        "title": 'title',
        "description": 'description',
        "mtype": 'type',
        "enumerations": 'enumerations',
        "interval": 'interval',
        "max_periods": 'maxPeriods'
    }

    _optionals = [
        'id',
        'name',
        'version',
        'title',
        'description',
        'mtype',
        'enumerations',
        'interval',
        'max_periods',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 version=APIHelper.SKIP,
                 title=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 enumerations=APIHelper.SKIP,
                 interval=APIHelper.SKIP,
                 max_periods=APIHelper.SKIP):
        """Constructor for the Factor class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if name is not APIHelper.SKIP:
            self.name = name 
        if version is not APIHelper.SKIP:
            self.version = version 
        if title is not APIHelper.SKIP:
            self.title = title 
        if description is not APIHelper.SKIP:
            self.description = description 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if enumerations is not APIHelper.SKIP:
            self.enumerations = enumerations 
        if interval is not APIHelper.SKIP:
            self.interval = interval 
        if max_periods is not APIHelper.SKIP:
            self.max_periods = max_periods 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        version = dictionary.get("version") if dictionary.get("version") else APIHelper.SKIP
        title = dictionary.get("title") if dictionary.get("title") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        enumerations = dictionary.get("enumerations") if dictionary.get("enumerations") else APIHelper.SKIP
        interval = dictionary.get("interval") if dictionary.get("interval") else APIHelper.SKIP
        max_periods = dictionary.get("maxPeriods") if dictionary.get("maxPeriods") else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   name,
                   version,
                   title,
                   description,
                   mtype,
                   enumerations,
                   interval,
                   max_periods)
