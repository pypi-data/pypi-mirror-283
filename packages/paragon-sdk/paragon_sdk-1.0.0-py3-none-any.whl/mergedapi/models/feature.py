# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Feature(object):

    """Implementation of the 'Feature' model.

    TODO: type model description here.

    Attributes:
        feature_id (int): Unique ID of the licensed feature
        feature_name (str): Name of the licensed feature
        feature_description (str): Brief description of the licensed feature
        capacity_value (int): Total capacity of the licensed feature
        capacity_flag (bool): Flag indicating if the feature is capacity or
            non-capacity type

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "feature_id": 'feature-id',
        "feature_name": 'feature-name',
        "feature_description": 'feature-description',
        "capacity_value": 'capacity-value',
        "capacity_flag": 'capacity-flag'
    }

    def __init__(self,
                 feature_id=None,
                 feature_name=None,
                 feature_description=None,
                 capacity_value=None,
                 capacity_flag=None):
        """Constructor for the Feature class"""

        # Initialize members of the class
        self.feature_id = feature_id 
        self.feature_name = feature_name 
        self.feature_description = feature_description 
        self.capacity_value = capacity_value 
        self.capacity_flag = capacity_flag 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        feature_id = dictionary.get("feature-id") if dictionary.get("feature-id") else None
        feature_name = dictionary.get("feature-name") if dictionary.get("feature-name") else None
        feature_description = dictionary.get("feature-description") if dictionary.get("feature-description") else None
        capacity_value = dictionary.get("capacity-value") if dictionary.get("capacity-value") else None
        capacity_flag = dictionary.get("capacity-flag") if "capacity-flag" in dictionary.keys() else None
        # Return an object of this model
        return cls(feature_id,
                   feature_name,
                   feature_description,
                   capacity_value,
                   capacity_flag)
