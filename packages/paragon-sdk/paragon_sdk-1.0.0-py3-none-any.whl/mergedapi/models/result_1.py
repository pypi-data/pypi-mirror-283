# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.series import Series


class Result1(object):

    """Implementation of the 'Result1' model.

    TODO: type model description here.

    Attributes:
        statement_id (int): TODO: type description here.
        database (str): TODO: type description here.
        series (List[Series]): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "statement_id": 'statement_id',
        "database": 'database',
        "series": 'series'
    }

    _optionals = [
        'statement_id',
        'database',
        'series',
    ]

    def __init__(self,
                 statement_id=APIHelper.SKIP,
                 database=APIHelper.SKIP,
                 series=APIHelper.SKIP):
        """Constructor for the Result1 class"""

        # Initialize members of the class
        if statement_id is not APIHelper.SKIP:
            self.statement_id = statement_id 
        if database is not APIHelper.SKIP:
            self.database = database 
        if series is not APIHelper.SKIP:
            self.series = series 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        statement_id = dictionary.get("statement_id") if dictionary.get("statement_id") else APIHelper.SKIP
        database = dictionary.get("database") if dictionary.get("database") else APIHelper.SKIP
        series = None
        if dictionary.get('series') is not None:
            series = [Series.from_dictionary(x) for x in dictionary.get('series')]
        else:
            series = APIHelper.SKIP
        # Return an object of this model
        return cls(statement_id,
                   database,
                   series)
