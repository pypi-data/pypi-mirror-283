# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.feature import Feature


class LicenseKeySchema(object):

    """Implementation of the 'license-key_schema' model.

    TODO: type model description here.

    Attributes:
        license_id (str): Unique ID of the license
        start_date (datetime): License start date and time
        end_date (datetime): License end date and time
        validity_type (ValidityTypeEnum): License validity type
        version (int): License key version, an integer value indicating
            version of license vendor info
        sku_name (str): License stock keeping unit name, indicates category of
            purchased license
        customer_id (str): Identification of customer who has purchased this
            license
        order_type (OrderTypeEnum): License purchase order type
        sw_serial_id (str): Software serial number used for license
            activation
        mode (ModeEnum): License mode of operation
        features (List[Feature]): Features which are part of the license

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "license_id": 'license-id',
        "start_date": 'start-date',
        "end_date": 'end-date',
        "validity_type": 'validity-type',
        "version": 'version',
        "sku_name": 'sku-name',
        "customer_id": 'customer-id',
        "order_type": 'order-type',
        "features": 'features',
        "sw_serial_id": 'sw-serial-id',
        "mode": 'mode'
    }

    _optionals = [
        'sw_serial_id',
        'mode',
    ]

    def __init__(self,
                 license_id=None,
                 start_date=None,
                 end_date=None,
                 validity_type=None,
                 version=None,
                 sku_name=None,
                 customer_id=None,
                 order_type=None,
                 features=None,
                 sw_serial_id=APIHelper.SKIP,
                 mode=APIHelper.SKIP):
        """Constructor for the LicenseKeySchema class"""

        # Initialize members of the class
        self.license_id = license_id 
        self.start_date = APIHelper.apply_datetime_converter(start_date, APIHelper.RFC3339DateTime) if start_date else None 
        self.end_date = APIHelper.apply_datetime_converter(end_date, APIHelper.RFC3339DateTime) if end_date else None 
        self.validity_type = validity_type 
        self.version = version 
        self.sku_name = sku_name 
        self.customer_id = customer_id 
        self.order_type = order_type 
        if sw_serial_id is not APIHelper.SKIP:
            self.sw_serial_id = sw_serial_id 
        if mode is not APIHelper.SKIP:
            self.mode = mode 
        self.features = features 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        license_id = dictionary.get("license-id") if dictionary.get("license-id") else None
        start_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("start-date")).datetime if dictionary.get("start-date") else None
        end_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("end-date")).datetime if dictionary.get("end-date") else None
        validity_type = dictionary.get("validity-type") if dictionary.get("validity-type") else None
        version = dictionary.get("version") if dictionary.get("version") else None
        sku_name = dictionary.get("sku-name") if dictionary.get("sku-name") else None
        customer_id = dictionary.get("customer-id") if dictionary.get("customer-id") else None
        order_type = dictionary.get("order-type") if dictionary.get("order-type") else None
        features = None
        if dictionary.get('features') is not None:
            features = [Feature.from_dictionary(x) for x in dictionary.get('features')]
        sw_serial_id = dictionary.get("sw-serial-id") if dictionary.get("sw-serial-id") else APIHelper.SKIP
        mode = dictionary.get("mode") if dictionary.get("mode") else APIHelper.SKIP
        # Return an object of this model
        return cls(license_id,
                   start_date,
                   end_date,
                   validity_type,
                   version,
                   sku_name,
                   customer_id,
                   order_type,
                   features,
                   sw_serial_id,
                   mode)
