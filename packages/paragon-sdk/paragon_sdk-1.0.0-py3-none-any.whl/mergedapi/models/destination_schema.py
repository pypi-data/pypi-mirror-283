# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.disk import Disk
from mergedapi.models.email import Email


class DestinationSchema(object):

    """Implementation of the 'destination_schema' model.

    TODO: type model description here.

    Attributes:
        disk (Disk): Store report on disk
        email (Email): Send report over email
        name (str): Name of the destination. Should be of pattern
            [a-zA-Z][a-zA-Z0-9_-]*

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "disk": 'disk',
        "email": 'email'
    }

    _optionals = [
        'disk',
        'email',
    ]

    def __init__(self,
                 name=None,
                 disk=APIHelper.SKIP,
                 email=APIHelper.SKIP):
        """Constructor for the DestinationSchema class"""

        # Initialize members of the class
        if disk is not APIHelper.SKIP:
            self.disk = disk 
        if email is not APIHelper.SKIP:
            self.email = email 
        self.name = name 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else None
        disk = Disk.from_dictionary(dictionary.get('disk')) if 'disk' in dictionary.keys() else APIHelper.SKIP
        email = Email.from_dictionary(dictionary.get('email')) if 'email' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   disk,
                   email)
