# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class AlertAlert(object):

    """Implementation of the 'alertAlert' model.

    Alert represents an alert.

    Attributes:
        id (str): System-defined unique identifier of the alert.
        subject (str): Identifies the entity that is the subject of the alert.
            Content will vary depending on the alert type. For alerts that
            relate to a device, this will be the id of the device.
        mtype (str): TODO: type description here.
        description (str): TODO: type description here.
        severity (AlertAlertSeverityEnum): TODO: type description here.
        time_raised (datetime): The time at which the alert was raised.
        time_cleared (datetime): The time at which the alert was cleared, if
            it has been.
        time_acknowledged (datetime): The time at which the alert was
            acknowledged, if it has been.
        probable_cause (str): Describes the probable cause of the problem.
        specific_problem (str): Fine-grained definition of the condition that
            generated the alert.
        additional_text (str): Additional information relevant to the alert.
        parent_id (str): Holds the id of another alert which is the parent of
            this alarm.
        properties (Dict[str, str]): A collection of key-value pairs,
            containing properties specific to the alert type.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "subject": 'subject',
        "mtype": 'type',
        "description": 'description',
        "severity": 'severity',
        "time_raised": 'timeRaised',
        "time_cleared": 'timeCleared',
        "time_acknowledged": 'timeAcknowledged',
        "probable_cause": 'probableCause',
        "specific_problem": 'specificProblem',
        "additional_text": 'additionalText',
        "parent_id": 'parentId',
        "properties": 'properties'
    }

    _optionals = [
        'id',
        'subject',
        'mtype',
        'description',
        'severity',
        'time_raised',
        'time_cleared',
        'time_acknowledged',
        'probable_cause',
        'specific_problem',
        'additional_text',
        'parent_id',
        'properties',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 subject=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 severity=APIHelper.SKIP,
                 time_raised=APIHelper.SKIP,
                 time_cleared=APIHelper.SKIP,
                 time_acknowledged=APIHelper.SKIP,
                 probable_cause=APIHelper.SKIP,
                 specific_problem=APIHelper.SKIP,
                 additional_text=APIHelper.SKIP,
                 parent_id=APIHelper.SKIP,
                 properties=APIHelper.SKIP):
        """Constructor for the AlertAlert class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if subject is not APIHelper.SKIP:
            self.subject = subject 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if description is not APIHelper.SKIP:
            self.description = description 
        if severity is not APIHelper.SKIP:
            self.severity = severity 
        if time_raised is not APIHelper.SKIP:
            self.time_raised = APIHelper.apply_datetime_converter(time_raised, APIHelper.RFC3339DateTime) if time_raised else None 
        if time_cleared is not APIHelper.SKIP:
            self.time_cleared = APIHelper.apply_datetime_converter(time_cleared, APIHelper.RFC3339DateTime) if time_cleared else None 
        if time_acknowledged is not APIHelper.SKIP:
            self.time_acknowledged = APIHelper.apply_datetime_converter(time_acknowledged, APIHelper.RFC3339DateTime) if time_acknowledged else None 
        if probable_cause is not APIHelper.SKIP:
            self.probable_cause = probable_cause 
        if specific_problem is not APIHelper.SKIP:
            self.specific_problem = specific_problem 
        if additional_text is not APIHelper.SKIP:
            self.additional_text = additional_text 
        if parent_id is not APIHelper.SKIP:
            self.parent_id = parent_id 
        if properties is not APIHelper.SKIP:
            self.properties = properties 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        subject = dictionary.get("subject") if dictionary.get("subject") else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        severity = dictionary.get("severity") if dictionary.get("severity") else APIHelper.SKIP
        time_raised = APIHelper.RFC3339DateTime.from_value(dictionary.get("timeRaised")).datetime if dictionary.get("timeRaised") else APIHelper.SKIP
        time_cleared = APIHelper.RFC3339DateTime.from_value(dictionary.get("timeCleared")).datetime if dictionary.get("timeCleared") else APIHelper.SKIP
        time_acknowledged = APIHelper.RFC3339DateTime.from_value(dictionary.get("timeAcknowledged")).datetime if dictionary.get("timeAcknowledged") else APIHelper.SKIP
        probable_cause = dictionary.get("probableCause") if dictionary.get("probableCause") else APIHelper.SKIP
        specific_problem = dictionary.get("specificProblem") if dictionary.get("specificProblem") else APIHelper.SKIP
        additional_text = dictionary.get("additionalText") if dictionary.get("additionalText") else APIHelper.SKIP
        parent_id = dictionary.get("parentId") if dictionary.get("parentId") else APIHelper.SKIP
        properties = dictionary.get("properties") if dictionary.get("properties") else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   subject,
                   mtype,
                   description,
                   severity,
                   time_raised,
                   time_cleared,
                   time_acknowledged,
                   probable_cause,
                   specific_problem,
                   additional_text,
                   parent_id,
                   properties)
