# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.field_8 import Field8


class HeaderPatternSchema(object):

    """Implementation of the 'header-pattern_schema' model.

    TODO: type model description here.

    Attributes:
        description (str): Pattern description
        field (List[Field8]): Field details
        filter (str): Regex filter to parse syslog header
        filter_type (FilterTypeEnum): Filter type, default is regex
        key_fields (List[str]): TODO: type description here.
        name (str): Name of a pattern. Should be of pattern
            [a-zA-Z][a-zA-Z0-9_-]*

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "filter": 'filter',
        "name": 'name',
        "description": 'description',
        "field": 'field',
        "filter_type": 'filter-type',
        "key_fields": 'key-fields'
    }

    _optionals = [
        'description',
        'field',
        'filter_type',
        'key_fields',
    ]

    def __init__(self,
                 filter=None,
                 name=None,
                 description=APIHelper.SKIP,
                 field=APIHelper.SKIP,
                 filter_type=APIHelper.SKIP,
                 key_fields=APIHelper.SKIP):
        """Constructor for the HeaderPatternSchema class"""

        # Initialize members of the class
        if description is not APIHelper.SKIP:
            self.description = description 
        if field is not APIHelper.SKIP:
            self.field = field 
        self.filter = filter 
        if filter_type is not APIHelper.SKIP:
            self.filter_type = filter_type 
        if key_fields is not APIHelper.SKIP:
            self.key_fields = key_fields 
        self.name = name 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        filter = dictionary.get("filter") if dictionary.get("filter") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        field = None
        if dictionary.get('field') is not None:
            field = [Field8.from_dictionary(x) for x in dictionary.get('field')]
        else:
            field = APIHelper.SKIP
        filter_type = dictionary.get("filter-type") if dictionary.get("filter-type") else APIHelper.SKIP
        key_fields = dictionary.get("key-fields") if dictionary.get("key-fields") else APIHelper.SKIP
        # Return an object of this model
        return cls(filter,
                   name,
                   description,
                   field,
                   filter_type,
                   key_fields)
