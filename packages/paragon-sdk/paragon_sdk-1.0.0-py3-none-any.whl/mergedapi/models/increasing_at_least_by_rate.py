# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class IncreasingAtLeastByRate(object):

    """Implementation of the 'IncreasingAtLeastByRate' model.

    TODO: type model description here.

    Attributes:
        all (List[object]): With this flag, result is set to True only if all
            the data matches the given condition
        any (List[object]): With this flag, result is set to True if any one
            of the data matches the condition
        latest (List[object]): With this flag, result is set to True if the
            latest data matches the condition
        field_name (str): Field name. Should match the pattern
            $[a-z][a-zA-Z0-9_-]*
        per (PerEnum): Time unit part of rate
        time_range (str): How much back in time should we look for data.
            Specify positive integer followed by s/m/h/d/w/y/o representing
            seconds/minutes/hours/days/weeks/years/offset. Eg: 2s
        value (str): Value part of rate. This can be a float or field name
            from this rule and should match the pattern
            (\d+(\.\d{0,2})?)|($[a-z][a-zA-Z0-9_-]*)
        percentage (str): Percentage of change from previous value. This can
            be a float or field name from this rule and should match the
            pattern (\d+(\.\d{0,2})?)|($[a-z][a-zA-Z0-9_-]*)

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "field_name": 'field-name',
        "per": 'per',
        "all": 'all',
        "any": 'any',
        "latest": 'latest',
        "time_range": 'time-range',
        "value": 'value',
        "percentage": 'percentage'
    }

    _optionals = [
        'all',
        'any',
        'latest',
        'time_range',
        'value',
        'percentage',
    ]

    def __init__(self,
                 field_name=None,
                 per=None,
                 all=APIHelper.SKIP,
                 any=APIHelper.SKIP,
                 latest=APIHelper.SKIP,
                 time_range=APIHelper.SKIP,
                 value=APIHelper.SKIP,
                 percentage=APIHelper.SKIP):
        """Constructor for the IncreasingAtLeastByRate class"""

        # Initialize members of the class
        if all is not APIHelper.SKIP:
            self.all = all 
        if any is not APIHelper.SKIP:
            self.any = any 
        if latest is not APIHelper.SKIP:
            self.latest = latest 
        self.field_name = field_name 
        self.per = per 
        if time_range is not APIHelper.SKIP:
            self.time_range = time_range 
        if value is not APIHelper.SKIP:
            self.value = value 
        if percentage is not APIHelper.SKIP:
            self.percentage = percentage 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        field_name = dictionary.get("field-name") if dictionary.get("field-name") else None
        per = dictionary.get("per") if dictionary.get("per") else None
        all = dictionary.get("all") if dictionary.get("all") else APIHelper.SKIP
        any = dictionary.get("any") if dictionary.get("any") else APIHelper.SKIP
        latest = dictionary.get("latest") if dictionary.get("latest") else APIHelper.SKIP
        time_range = dictionary.get("time-range") if dictionary.get("time-range") else APIHelper.SKIP
        value = dictionary.get("value") if dictionary.get("value") else APIHelper.SKIP
        percentage = dictionary.get("percentage") if dictionary.get("percentage") else APIHelper.SKIP
        # Return an object of this model
        return cls(field_name,
                   per,
                   all,
                   any,
                   latest,
                   time_range,
                   value,
                   percentage)
