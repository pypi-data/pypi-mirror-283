# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class DebugJobResponseSchema(object):

    """Implementation of the 'debug-job-response_schema' model.

    TODO: type model description here.

    Attributes:
        job_id (uuid|str): TODO: type description here.
        job_status (JobStatusEnum): TODO: type description here.
        job_details (str): TODO: type description here.
        debug_data (str): TODO: type description here.
        debug_type (DebugTypeEnum): TODO: type description here.
        debug_name (str): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "job_id": 'job-id',
        "job_status": 'job-status',
        "job_details": 'job-details',
        "debug_data": 'debug-data',
        "debug_type": 'debug-type',
        "debug_name": 'debug-name'
    }

    _optionals = [
        'job_id',
        'job_status',
        'job_details',
        'debug_data',
        'debug_type',
        'debug_name',
    ]

    def __init__(self,
                 job_id=APIHelper.SKIP,
                 job_status=APIHelper.SKIP,
                 job_details=APIHelper.SKIP,
                 debug_data=APIHelper.SKIP,
                 debug_type=APIHelper.SKIP,
                 debug_name=APIHelper.SKIP):
        """Constructor for the DebugJobResponseSchema class"""

        # Initialize members of the class
        if job_id is not APIHelper.SKIP:
            self.job_id = job_id 
        if job_status is not APIHelper.SKIP:
            self.job_status = job_status 
        if job_details is not APIHelper.SKIP:
            self.job_details = job_details 
        if debug_data is not APIHelper.SKIP:
            self.debug_data = debug_data 
        if debug_type is not APIHelper.SKIP:
            self.debug_type = debug_type 
        if debug_name is not APIHelper.SKIP:
            self.debug_name = debug_name 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        job_id = dictionary.get("job-id") if dictionary.get("job-id") else APIHelper.SKIP
        job_status = dictionary.get("job-status") if dictionary.get("job-status") else APIHelper.SKIP
        job_details = dictionary.get("job-details") if dictionary.get("job-details") else APIHelper.SKIP
        debug_data = dictionary.get("debug-data") if dictionary.get("debug-data") else APIHelper.SKIP
        debug_type = dictionary.get("debug-type") if dictionary.get("debug-type") else APIHelper.SKIP
        debug_name = dictionary.get("debug-name") if dictionary.get("debug-name") else APIHelper.SKIP
        # Return an object of this model
        return cls(job_id,
                   job_status,
                   job_details,
                   debug_data,
                   debug_type,
                   debug_name)
