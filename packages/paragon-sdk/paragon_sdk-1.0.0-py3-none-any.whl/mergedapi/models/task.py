# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.step import Step


class Task(object):

    """Implementation of the 'Task' model.

    TODO: type model description here.

    Attributes:
        parallel (List[object]): Run all steps in this task in parallel to one
            another
        step (List[Step]): Workflow step configuration
        task_name (str): Name of the task being called. Should be of pattern
            [a-zA-Z][a-zA-Z0-9_-]*

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "task_name": 'task-name',
        "parallel": 'parallel',
        "step": 'step'
    }

    _optionals = [
        'parallel',
        'step',
    ]

    def __init__(self,
                 task_name=None,
                 parallel=APIHelper.SKIP,
                 step=APIHelper.SKIP):
        """Constructor for the Task class"""

        # Initialize members of the class
        if parallel is not APIHelper.SKIP:
            self.parallel = parallel 
        if step is not APIHelper.SKIP:
            self.step = step 
        self.task_name = task_name 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        task_name = dictionary.get("task-name") if dictionary.get("task-name") else None
        parallel = dictionary.get("parallel") if dictionary.get("parallel") else APIHelper.SKIP
        step = None
        if dictionary.get('step') is not None:
            step = [Step.from_dictionary(x) for x in dictionary.get('step')]
        else:
            step = APIHelper.SKIP
        # Return an object of this model
        return cls(task_name,
                   parallel,
                   step)
