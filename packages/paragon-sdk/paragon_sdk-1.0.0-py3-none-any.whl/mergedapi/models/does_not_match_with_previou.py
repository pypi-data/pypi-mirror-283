# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class DoesNotMatchWithPreviou(object):

    """Implementation of the 'DoesNotMatchWithPreviou' model.

    TODO: type model description here.

    Attributes:
        all (List[object]): With this flag, result is set to True only if all
            the data matches the given condition
        any (List[object]): With this flag, result is set to True if any one
            of the data matches the condition
        latest (List[object]): With this flag, result is set to True if the
            latest data matches the condition
        field_name (str): Field name which previous and current value needs to
            be matched
        ignore_case (List[object]): Flag to ignore case while matching the
            string
        time_range (str): How much back in time should we look for data.
            Specify positive integer followed by s/m/h/d/w/y/o representing
            seconds/minutes/hours/days/weeks/years/offset. Eg: 2s

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "field_name": 'field-name',
        "all": 'all',
        "any": 'any',
        "latest": 'latest',
        "ignore_case": 'ignore-case',
        "time_range": 'time-range'
    }

    _optionals = [
        'all',
        'any',
        'latest',
        'ignore_case',
        'time_range',
    ]

    def __init__(self,
                 field_name=None,
                 all=APIHelper.SKIP,
                 any=APIHelper.SKIP,
                 latest=APIHelper.SKIP,
                 ignore_case=APIHelper.SKIP,
                 time_range=APIHelper.SKIP):
        """Constructor for the DoesNotMatchWithPreviou class"""

        # Initialize members of the class
        if all is not APIHelper.SKIP:
            self.all = all 
        if any is not APIHelper.SKIP:
            self.any = any 
        if latest is not APIHelper.SKIP:
            self.latest = latest 
        self.field_name = field_name 
        if ignore_case is not APIHelper.SKIP:
            self.ignore_case = ignore_case 
        if time_range is not APIHelper.SKIP:
            self.time_range = time_range 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        field_name = dictionary.get("field-name") if dictionary.get("field-name") else None
        all = dictionary.get("all") if dictionary.get("all") else APIHelper.SKIP
        any = dictionary.get("any") if dictionary.get("any") else APIHelper.SKIP
        latest = dictionary.get("latest") if dictionary.get("latest") else APIHelper.SKIP
        ignore_case = dictionary.get("ignore-case") if dictionary.get("ignore-case") else APIHelper.SKIP
        time_range = dictionary.get("time-range") if dictionary.get("time-range") else APIHelper.SKIP
        # Return an object of this model
        return cls(field_name,
                   all,
                   any,
                   latest,
                   ignore_case,
                   time_range)
