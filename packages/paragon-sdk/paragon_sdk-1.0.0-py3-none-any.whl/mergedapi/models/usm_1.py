# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.authentication import Authentication
from mergedapi.models.privacy import Privacy
from mergedapi.models.snmp_proxy_forwarder import SnmpProxyForwarder


class Usm1(object):

    """Implementation of the 'Usm1' model.

    SNMP User Security Model configuration

    Attributes:
        authentication (Authentication): Configure authentication for the
            SNMPv3 user
        authentication_none (List[str]): Configure no authentication for the
            SNMPv3 user
        privacy (Privacy): Configure privacy for the SNMPv3 user
        privacy_none (List[str]): Configure no privacy for the SNMPv3 user
        snmp_proxy_forwarder (SnmpProxyForwarder): SNMP Proxy forwarder
            configuration
        username (str): SNMPv3 username

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "username": 'username',
        "authentication": 'authentication',
        "authentication_none": 'authentication-none',
        "privacy": 'privacy',
        "privacy_none": 'privacy-none',
        "snmp_proxy_forwarder": 'snmp-proxy-forwarder'
    }

    _optionals = [
        'authentication',
        'authentication_none',
        'privacy',
        'privacy_none',
        'snmp_proxy_forwarder',
    ]

    _nullables = [
        'authentication_none',
        'privacy_none',
    ]

    def __init__(self,
                 username=None,
                 authentication=APIHelper.SKIP,
                 authentication_none=APIHelper.SKIP,
                 privacy=APIHelper.SKIP,
                 privacy_none=APIHelper.SKIP,
                 snmp_proxy_forwarder=APIHelper.SKIP):
        """Constructor for the Usm1 class"""

        # Initialize members of the class
        if authentication is not APIHelper.SKIP:
            self.authentication = authentication 
        if authentication_none is not APIHelper.SKIP:
            self.authentication_none = authentication_none 
        if privacy is not APIHelper.SKIP:
            self.privacy = privacy 
        if privacy_none is not APIHelper.SKIP:
            self.privacy_none = privacy_none 
        if snmp_proxy_forwarder is not APIHelper.SKIP:
            self.snmp_proxy_forwarder = snmp_proxy_forwarder 
        self.username = username 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        username = dictionary.get("username") if dictionary.get("username") else None
        authentication = Authentication.from_dictionary(dictionary.get('authentication')) if 'authentication' in dictionary.keys() else APIHelper.SKIP
        authentication_none = dictionary.get("authentication-none") if "authentication-none" in dictionary.keys() else APIHelper.SKIP
        privacy = Privacy.from_dictionary(dictionary.get('privacy')) if 'privacy' in dictionary.keys() else APIHelper.SKIP
        privacy_none = dictionary.get("privacy-none") if "privacy-none" in dictionary.keys() else APIHelper.SKIP
        snmp_proxy_forwarder = SnmpProxyForwarder.from_dictionary(dictionary.get('snmp-proxy-forwarder')) if 'snmp-proxy-forwarder' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(username,
                   authentication,
                   authentication_none,
                   privacy,
                   privacy_none,
                   snmp_proxy_forwarder)
