# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class InstanceScheduleStateSchema(object):

    """Implementation of the 'instance_schedule_state_schema' model.

    Instance associated with active schedule and its corresponding scheduled
    state

    Attributes:
        group_name (str): Name of the group
        group_type (GroupTypeEnum): Type of the group. Can be one of
            device-group or network-group
        name (str): Name of the instance
        rule (str): Name of the rule associated with the instance
        playbook (str): Name of the playbook associated with the instance
        state (StateEnum): Scheduled state of the instance. Can be one of
            active or inactive
        update_time (object): Time the current status is updated for this
            instance in elapsed seconds since epoch

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "group_name": 'group-name',
        "group_type": 'group-type',
        "name": 'name',
        "rule": 'rule',
        "playbook": 'playbook',
        "state": 'state',
        "update_time": 'update-time'
    }

    _optionals = [
        'update_time',
    ]

    def __init__(self,
                 group_name=None,
                 group_type=None,
                 name=None,
                 rule=None,
                 playbook=None,
                 state=None,
                 update_time=APIHelper.SKIP):
        """Constructor for the InstanceScheduleStateSchema class"""

        # Initialize members of the class
        self.group_name = group_name 
        self.group_type = group_type 
        self.name = name 
        self.rule = rule 
        self.playbook = playbook 
        self.state = state 
        if update_time is not APIHelper.SKIP:
            self.update_time = update_time 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        group_name = dictionary.get("group-name") if dictionary.get("group-name") else None
        group_type = dictionary.get("group-type") if dictionary.get("group-type") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        rule = dictionary.get("rule") if dictionary.get("rule") else None
        playbook = dictionary.get("playbook") if dictionary.get("playbook") else None
        state = dictionary.get("state") if dictionary.get("state") else None
        update_time = dictionary.get("update-time") if dictionary.get("update-time") else APIHelper.SKIP
        # Return an object of this model
        return cls(group_name,
                   group_type,
                   name,
                   rule,
                   playbook,
                   state,
                   update_time)
