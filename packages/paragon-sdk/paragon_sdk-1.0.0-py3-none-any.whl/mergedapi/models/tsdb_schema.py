# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class TsdbSchema(object):

    """Implementation of the 'tsdb_schema' model.

    TODO: type model description here.

    Attributes:
        dedicate (bool): Dedicate given nodes only for tsdb instances. No
            other services will be spawned on tsdb nodes when set to true
        nodes (List[str]): TODO: type description here.
        replication_factor (int): High availability. Number of copies of data
            to be stored

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "dedicate": 'dedicate',
        "nodes": 'nodes',
        "replication_factor": 'replication-factor'
    }

    _optionals = [
        'dedicate',
        'nodes',
        'replication_factor',
    ]

    def __init__(self,
                 dedicate=APIHelper.SKIP,
                 nodes=APIHelper.SKIP,
                 replication_factor=APIHelper.SKIP):
        """Constructor for the TsdbSchema class"""

        # Initialize members of the class
        if dedicate is not APIHelper.SKIP:
            self.dedicate = dedicate 
        if nodes is not APIHelper.SKIP:
            self.nodes = nodes 
        if replication_factor is not APIHelper.SKIP:
            self.replication_factor = replication_factor 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        dedicate = dictionary.get("dedicate") if "dedicate" in dictionary.keys() else APIHelper.SKIP
        nodes = dictionary.get("nodes") if dictionary.get("nodes") else APIHelper.SKIP
        replication_factor = dictionary.get("replication-factor") if dictionary.get("replication-factor") else APIHelper.SKIP
        # Return an object of this model
        return cls(dedicate,
                   nodes,
                   replication_factor)
