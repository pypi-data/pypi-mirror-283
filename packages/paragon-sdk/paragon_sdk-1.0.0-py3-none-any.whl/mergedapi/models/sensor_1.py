# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.data_if_missing_1 import DataIfMissing1
from mergedapi.models.where import Where


class Sensor1(object):

    """Implementation of the 'Sensor1' model.

    TODO: type model description here.

    Attributes:
        data_if_missing (DataIfMissing1): Assign value for field in case of
            data missing. Zero-suppression takes priority over
            data-if-missing
        path (str): Sensor path
        sensor_name (str): Name of the sensor
        where (List[Where]): List of where clauses to filter ingest data
        zero_suppression (List[object]): Assign zero as default value for
            field in case of zero-suppression

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "path": 'path',
        "sensor_name": 'sensor-name',
        "data_if_missing": 'data-if-missing',
        "where": 'where',
        "zero_suppression": 'zero-suppression'
    }

    _optionals = [
        'data_if_missing',
        'where',
        'zero_suppression',
    ]

    def __init__(self,
                 path=None,
                 sensor_name=None,
                 data_if_missing=APIHelper.SKIP,
                 where=APIHelper.SKIP,
                 zero_suppression=APIHelper.SKIP):
        """Constructor for the Sensor1 class"""

        # Initialize members of the class
        if data_if_missing is not APIHelper.SKIP:
            self.data_if_missing = data_if_missing 
        self.path = path 
        self.sensor_name = sensor_name 
        if where is not APIHelper.SKIP:
            self.where = where 
        if zero_suppression is not APIHelper.SKIP:
            self.zero_suppression = zero_suppression 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        path = dictionary.get("path") if dictionary.get("path") else None
        sensor_name = dictionary.get("sensor-name") if dictionary.get("sensor-name") else None
        data_if_missing = DataIfMissing1.from_dictionary(dictionary.get('data-if-missing')) if 'data-if-missing' in dictionary.keys() else APIHelper.SKIP
        where = None
        if dictionary.get('where') is not None:
            where = [Where.from_dictionary(x) for x in dictionary.get('where')]
        else:
            where = APIHelper.SKIP
        zero_suppression = dictionary.get("zero-suppression") if dictionary.get("zero-suppression") else APIHelper.SKIP
        # Return an object of this model
        return cls(path,
                   sensor_name,
                   data_if_missing,
                   where,
                   zero_suppression)
