# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.action_scheduler import ActionScheduler
from mergedapi.models.authentication_1 import Authentication1
from mergedapi.models.device_rule_filter import DeviceRuleFilter
from mergedapi.models.field_data import FieldData
from mergedapi.models.flow_2 import Flow2
from mergedapi.models.logging import Logging
from mergedapi.models.native_gpb_3 import NativeGpb3
from mergedapi.models.notification import Notification
from mergedapi.models.open_config_2 import OpenConfig2
from mergedapi.models.outbound_ssh_1 import OutboundSsh1
from mergedapi.models.publish import Publish
from mergedapi.models.raw_data import RawData
from mergedapi.models.root_cause_analysis import RootCauseAnalysis
from mergedapi.models.scheduler import Scheduler
from mergedapi.models.snmp_2 import Snmp2
from mergedapi.models.syslog_3 import Syslog3
from mergedapi.models.variable_1 import Variable1


class DeviceGroupSchema(object):

    """Implementation of the 'device-group_schema' model.

    TODO: type model description here.

    Attributes:
        authentication (Authentication1): Common authentication parameters
        edge (str): JFM: edge this device group belongs to. This should be of
            the format <organization-name>.<site-name>.<edge-name>
        action_scheduler (ActionScheduler): TODO: type description here.
        description (str): Description about the device group
        device_group_name (str): Name of the group. Should be of pattern
            [a-zA-Z][a-zA-Z0-9-]*
        display_name (str): Display name of the device group.
        site_id (str): Site id of the device group.
        org_id (str): Organization id of the device group.
        devices (List[str]): TODO: type description here.
        logging (Logging): Logging configuration
        native_gpb (NativeGpb3): TODO: type description here.
        flow (Flow2): Flow ingest related parameters
        ingest_frequency (List[str]): TODO: type description here.
        raw_data (RawData): TODO: type description here.
        field_data (FieldData): TODO: type description here.
        notification (Notification): TODO: type description here.
        open_config (OpenConfig2): TODO: type description here.
        outbound_ssh (OutboundSsh1): Configure the ports to enable
            Outbound-SSH service initiated by the devices to connect to the
            healthbot
        playbooks (List[str]): TODO: type description here.
        publish (Publish): TODO: type description here.
        reports (List[str]): TODO: type description here.
        retention_policy (str): Name of the retention policy to be applied
        root_cause_analysis (RootCauseAnalysis): Setting for root cause
            analysis
        scheduler (List[Scheduler]): List of schedulers associated with the
            playbook instances
        variable (List[Variable1]): Playbook variable configuration
        snmp (Snmp2): SNMP ingest related configuration for a device-group
        syslog (Syslog3): TODO: type description here.
        tagging_profile (List[str]): TODO: type description here.
        timezone (str): Timezone in the format +/-hh:mm, Example: -08:00
        use_ingest_receive_time (List[object]): Enable using ingest receive
            time in formulas like elapsed-time and rate-of-change
        device_rule_filter (List[DeviceRuleFilter]): Device Rule Filter for
            mentioning white listed rules

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "device_group_name": 'device-group-name',
        "authentication": 'authentication',
        "edge": 'edge',
        "action_scheduler": 'action-scheduler',
        "description": 'description',
        "display_name": 'display-name',
        "site_id": 'site-id',
        "org_id": 'org-id',
        "devices": 'devices',
        "logging": 'logging',
        "native_gpb": 'native-gpb',
        "flow": 'flow',
        "ingest_frequency": 'ingest-frequency',
        "raw_data": 'raw-data',
        "field_data": 'field-data',
        "notification": 'notification',
        "open_config": 'open-config',
        "outbound_ssh": 'outbound-ssh',
        "playbooks": 'playbooks',
        "publish": 'publish',
        "reports": 'reports',
        "retention_policy": 'retention-policy',
        "root_cause_analysis": 'root-cause-analysis',
        "scheduler": 'scheduler',
        "variable": 'variable',
        "snmp": 'snmp',
        "syslog": 'syslog',
        "tagging_profile": 'tagging-profile',
        "timezone": 'timezone',
        "use_ingest_receive_time": 'use-ingest-receive-time',
        "device_rule_filter": 'device-rule-filter'
    }

    _optionals = [
        'authentication',
        'edge',
        'action_scheduler',
        'description',
        'display_name',
        'site_id',
        'org_id',
        'devices',
        'logging',
        'native_gpb',
        'flow',
        'ingest_frequency',
        'raw_data',
        'field_data',
        'notification',
        'open_config',
        'outbound_ssh',
        'playbooks',
        'publish',
        'reports',
        'retention_policy',
        'root_cause_analysis',
        'scheduler',
        'variable',
        'snmp',
        'syslog',
        'tagging_profile',
        'timezone',
        'use_ingest_receive_time',
        'device_rule_filter',
    ]

    def __init__(self,
                 device_group_name=None,
                 authentication=APIHelper.SKIP,
                 edge=APIHelper.SKIP,
                 action_scheduler=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 display_name=APIHelper.SKIP,
                 site_id=APIHelper.SKIP,
                 org_id=APIHelper.SKIP,
                 devices=APIHelper.SKIP,
                 logging=APIHelper.SKIP,
                 native_gpb=APIHelper.SKIP,
                 flow=APIHelper.SKIP,
                 ingest_frequency=APIHelper.SKIP,
                 raw_data=APIHelper.SKIP,
                 field_data=APIHelper.SKIP,
                 notification=APIHelper.SKIP,
                 open_config=APIHelper.SKIP,
                 outbound_ssh=APIHelper.SKIP,
                 playbooks=APIHelper.SKIP,
                 publish=APIHelper.SKIP,
                 reports=APIHelper.SKIP,
                 retention_policy=APIHelper.SKIP,
                 root_cause_analysis=APIHelper.SKIP,
                 scheduler=APIHelper.SKIP,
                 variable=APIHelper.SKIP,
                 snmp=APIHelper.SKIP,
                 syslog=APIHelper.SKIP,
                 tagging_profile=APIHelper.SKIP,
                 timezone=APIHelper.SKIP,
                 use_ingest_receive_time=APIHelper.SKIP,
                 device_rule_filter=APIHelper.SKIP):
        """Constructor for the DeviceGroupSchema class"""

        # Initialize members of the class
        if authentication is not APIHelper.SKIP:
            self.authentication = authentication 
        if edge is not APIHelper.SKIP:
            self.edge = edge 
        if action_scheduler is not APIHelper.SKIP:
            self.action_scheduler = action_scheduler 
        if description is not APIHelper.SKIP:
            self.description = description 
        self.device_group_name = device_group_name 
        if display_name is not APIHelper.SKIP:
            self.display_name = display_name 
        if site_id is not APIHelper.SKIP:
            self.site_id = site_id 
        if org_id is not APIHelper.SKIP:
            self.org_id = org_id 
        if devices is not APIHelper.SKIP:
            self.devices = devices 
        if logging is not APIHelper.SKIP:
            self.logging = logging 
        if native_gpb is not APIHelper.SKIP:
            self.native_gpb = native_gpb 
        if flow is not APIHelper.SKIP:
            self.flow = flow 
        if ingest_frequency is not APIHelper.SKIP:
            self.ingest_frequency = ingest_frequency 
        if raw_data is not APIHelper.SKIP:
            self.raw_data = raw_data 
        if field_data is not APIHelper.SKIP:
            self.field_data = field_data 
        if notification is not APIHelper.SKIP:
            self.notification = notification 
        if open_config is not APIHelper.SKIP:
            self.open_config = open_config 
        if outbound_ssh is not APIHelper.SKIP:
            self.outbound_ssh = outbound_ssh 
        if playbooks is not APIHelper.SKIP:
            self.playbooks = playbooks 
        if publish is not APIHelper.SKIP:
            self.publish = publish 
        if reports is not APIHelper.SKIP:
            self.reports = reports 
        if retention_policy is not APIHelper.SKIP:
            self.retention_policy = retention_policy 
        if root_cause_analysis is not APIHelper.SKIP:
            self.root_cause_analysis = root_cause_analysis 
        if scheduler is not APIHelper.SKIP:
            self.scheduler = scheduler 
        if variable is not APIHelper.SKIP:
            self.variable = variable 
        if snmp is not APIHelper.SKIP:
            self.snmp = snmp 
        if syslog is not APIHelper.SKIP:
            self.syslog = syslog 
        if tagging_profile is not APIHelper.SKIP:
            self.tagging_profile = tagging_profile 
        if timezone is not APIHelper.SKIP:
            self.timezone = timezone 
        if use_ingest_receive_time is not APIHelper.SKIP:
            self.use_ingest_receive_time = use_ingest_receive_time 
        if device_rule_filter is not APIHelper.SKIP:
            self.device_rule_filter = device_rule_filter 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        device_group_name = dictionary.get("device-group-name") if dictionary.get("device-group-name") else None
        authentication = Authentication1.from_dictionary(dictionary.get('authentication')) if 'authentication' in dictionary.keys() else APIHelper.SKIP
        edge = dictionary.get("edge") if dictionary.get("edge") else APIHelper.SKIP
        action_scheduler = ActionScheduler.from_dictionary(dictionary.get('action-scheduler')) if 'action-scheduler' in dictionary.keys() else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        display_name = dictionary.get("display-name") if dictionary.get("display-name") else APIHelper.SKIP
        site_id = dictionary.get("site-id") if dictionary.get("site-id") else APIHelper.SKIP
        org_id = dictionary.get("org-id") if dictionary.get("org-id") else APIHelper.SKIP
        devices = dictionary.get("devices") if dictionary.get("devices") else APIHelper.SKIP
        logging = Logging.from_dictionary(dictionary.get('logging')) if 'logging' in dictionary.keys() else APIHelper.SKIP
        native_gpb = NativeGpb3.from_dictionary(dictionary.get('native-gpb')) if 'native-gpb' in dictionary.keys() else APIHelper.SKIP
        flow = Flow2.from_dictionary(dictionary.get('flow')) if 'flow' in dictionary.keys() else APIHelper.SKIP
        ingest_frequency = dictionary.get("ingest-frequency") if dictionary.get("ingest-frequency") else APIHelper.SKIP
        raw_data = RawData.from_dictionary(dictionary.get('raw-data')) if 'raw-data' in dictionary.keys() else APIHelper.SKIP
        field_data = FieldData.from_dictionary(dictionary.get('field-data')) if 'field-data' in dictionary.keys() else APIHelper.SKIP
        notification = Notification.from_dictionary(dictionary.get('notification')) if 'notification' in dictionary.keys() else APIHelper.SKIP
        open_config = OpenConfig2.from_dictionary(dictionary.get('open-config')) if 'open-config' in dictionary.keys() else APIHelper.SKIP
        outbound_ssh = OutboundSsh1.from_dictionary(dictionary.get('outbound-ssh')) if 'outbound-ssh' in dictionary.keys() else APIHelper.SKIP
        playbooks = dictionary.get("playbooks") if dictionary.get("playbooks") else APIHelper.SKIP
        publish = Publish.from_dictionary(dictionary.get('publish')) if 'publish' in dictionary.keys() else APIHelper.SKIP
        reports = dictionary.get("reports") if dictionary.get("reports") else APIHelper.SKIP
        retention_policy = dictionary.get("retention-policy") if dictionary.get("retention-policy") else APIHelper.SKIP
        root_cause_analysis = RootCauseAnalysis.from_dictionary(dictionary.get('root-cause-analysis')) if 'root-cause-analysis' in dictionary.keys() else APIHelper.SKIP
        scheduler = None
        if dictionary.get('scheduler') is not None:
            scheduler = [Scheduler.from_dictionary(x) for x in dictionary.get('scheduler')]
        else:
            scheduler = APIHelper.SKIP
        variable = None
        if dictionary.get('variable') is not None:
            variable = [Variable1.from_dictionary(x) for x in dictionary.get('variable')]
        else:
            variable = APIHelper.SKIP
        snmp = Snmp2.from_dictionary(dictionary.get('snmp')) if 'snmp' in dictionary.keys() else APIHelper.SKIP
        syslog = Syslog3.from_dictionary(dictionary.get('syslog')) if 'syslog' in dictionary.keys() else APIHelper.SKIP
        tagging_profile = dictionary.get("tagging-profile") if dictionary.get("tagging-profile") else APIHelper.SKIP
        timezone = dictionary.get("timezone") if dictionary.get("timezone") else APIHelper.SKIP
        use_ingest_receive_time = dictionary.get("use-ingest-receive-time") if dictionary.get("use-ingest-receive-time") else APIHelper.SKIP
        device_rule_filter = None
        if dictionary.get('device-rule-filter') is not None:
            device_rule_filter = [DeviceRuleFilter.from_dictionary(x) for x in dictionary.get('device-rule-filter')]
        else:
            device_rule_filter = APIHelper.SKIP
        # Return an object of this model
        return cls(device_group_name,
                   authentication,
                   edge,
                   action_scheduler,
                   description,
                   display_name,
                   site_id,
                   org_id,
                   devices,
                   logging,
                   native_gpb,
                   flow,
                   ingest_frequency,
                   raw_data,
                   field_data,
                   notification,
                   open_config,
                   outbound_ssh,
                   playbooks,
                   publish,
                   reports,
                   retention_policy,
                   root_cause_analysis,
                   scheduler,
                   variable,
                   snmp,
                   syslog,
                   tagging_profile,
                   timezone,
                   use_ingest_receive_time,
                   device_rule_filter)
