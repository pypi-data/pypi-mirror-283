# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class ChecklistRuleResult(object):

    """Implementation of the 'checklistRuleResult' model.

    RuleResult represents the result of a evaluating a single XCCDF rule.

    Attributes:
        status (ChecklistRuleStatusEnum): TODO: type description here.
        last_updated (datetime): Time at which the rule result was last
            changed. When the RuleResult is returned by the ImportScanResults
            RPC and the scan defined a result for the rule, this will reflect
            the current time. Otherwise, it will reflect the time of the most
            recent UpdateChecklist RPC that changed any of the RuleResult
            properties (status, result_id, comments). Output only.
        result_id (str): If defined, holds the id of the compliance Scan from
            which the result was imported. If undefined, it indicates that the
            status property has been defined manually.
        comments (List[str]): User-defined comments on the result.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "status": 'status',
        "last_updated": 'lastUpdated',
        "result_id": 'resultId',
        "comments": 'comments'
    }

    _optionals = [
        'status',
        'last_updated',
        'result_id',
        'comments',
    ]

    def __init__(self,
                 status=APIHelper.SKIP,
                 last_updated=APIHelper.SKIP,
                 result_id=APIHelper.SKIP,
                 comments=APIHelper.SKIP):
        """Constructor for the ChecklistRuleResult class"""

        # Initialize members of the class
        if status is not APIHelper.SKIP:
            self.status = status 
        if last_updated is not APIHelper.SKIP:
            self.last_updated = APIHelper.apply_datetime_converter(last_updated, APIHelper.RFC3339DateTime) if last_updated else None 
        if result_id is not APIHelper.SKIP:
            self.result_id = result_id 
        if comments is not APIHelper.SKIP:
            self.comments = comments 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        last_updated = APIHelper.RFC3339DateTime.from_value(dictionary.get("lastUpdated")).datetime if dictionary.get("lastUpdated") else APIHelper.SKIP
        result_id = dictionary.get("resultId") if dictionary.get("resultId") else APIHelper.SKIP
        comments = dictionary.get("comments") if dictionary.get("comments") else APIHelper.SKIP
        # Return an object of this model
        return cls(status,
                   last_updated,
                   result_id,
                   comments)
