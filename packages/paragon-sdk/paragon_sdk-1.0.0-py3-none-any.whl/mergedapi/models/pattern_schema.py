# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.constant import Constant
from mergedapi.models.field_9 import Field9


class PatternSchema(object):

    """Implementation of the 'pattern_schema' model.

    Pattern details

    Attributes:
        constant (List[Constant]): Constant details
        description (str): Pattern description
        event_id (str): Event id that identifies a log uniquely. Field names
            also can be part of event-id. Example my-event+$field1
        field (List[Field9]): Field details
        filter (str): Filter to match a log line
        filter_type (FilterType1Enum): Filter type, default is grok
        key_fields (List[str]): TODO: type description here.
        name (str): Name of a pattern. Should be of pattern
            [a-zA-Z][a-zA-Z0-9_-]*

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "event_id": 'event-id',
        "name": 'name',
        "constant": 'constant',
        "description": 'description',
        "field": 'field',
        "filter": 'filter',
        "filter_type": 'filter-type',
        "key_fields": 'key-fields'
    }

    _optionals = [
        'constant',
        'description',
        'field',
        'filter',
        'filter_type',
        'key_fields',
    ]

    def __init__(self,
                 event_id=None,
                 name=None,
                 constant=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 field=APIHelper.SKIP,
                 filter=APIHelper.SKIP,
                 filter_type=APIHelper.SKIP,
                 key_fields=APIHelper.SKIP):
        """Constructor for the PatternSchema class"""

        # Initialize members of the class
        if constant is not APIHelper.SKIP:
            self.constant = constant 
        if description is not APIHelper.SKIP:
            self.description = description 
        self.event_id = event_id 
        if field is not APIHelper.SKIP:
            self.field = field 
        if filter is not APIHelper.SKIP:
            self.filter = filter 
        if filter_type is not APIHelper.SKIP:
            self.filter_type = filter_type 
        if key_fields is not APIHelper.SKIP:
            self.key_fields = key_fields 
        self.name = name 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        event_id = dictionary.get("event-id") if dictionary.get("event-id") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        constant = None
        if dictionary.get('constant') is not None:
            constant = [Constant.from_dictionary(x) for x in dictionary.get('constant')]
        else:
            constant = APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        field = None
        if dictionary.get('field') is not None:
            field = [Field9.from_dictionary(x) for x in dictionary.get('field')]
        else:
            field = APIHelper.SKIP
        filter = dictionary.get("filter") if dictionary.get("filter") else APIHelper.SKIP
        filter_type = dictionary.get("filter-type") if dictionary.get("filter-type") else APIHelper.SKIP
        key_fields = dictionary.get("key-fields") if dictionary.get("key-fields") else APIHelper.SKIP
        # Return an object of this model
        return cls(event_id,
                   name,
                   constant,
                   description,
                   field,
                   filter,
                   filter_type,
                   key_fields)
