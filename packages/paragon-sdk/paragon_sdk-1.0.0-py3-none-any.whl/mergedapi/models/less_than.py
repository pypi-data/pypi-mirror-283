# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class LessThan(object):

    """Implementation of the 'LessThan' model.

    TODO: type model description here.

    Attributes:
        all (List[object]): With this flag, result is set to True only if all
            the data matches the given condition
        any (List[object]): With this flag, result is set to True if any one
            of the data matches the condition
        latest (List[object]): With this flag, result is set to True if the
            latest data matches the condition
        left_operand (str): Left operand
        right_operand (str): right operand
        time_range (str): How much back in time should we look for data.
            Specify positive integer followed by s/m/h/d/w/y/o representing
            seconds/minutes/hours/days/weeks/years/offset. Eg: 2s

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "left_operand": 'left-operand',
        "right_operand": 'right-operand',
        "all": 'all',
        "any": 'any',
        "latest": 'latest',
        "time_range": 'time-range'
    }

    _optionals = [
        'all',
        'any',
        'latest',
        'time_range',
    ]

    def __init__(self,
                 left_operand=None,
                 right_operand=None,
                 all=APIHelper.SKIP,
                 any=APIHelper.SKIP,
                 latest=APIHelper.SKIP,
                 time_range=APIHelper.SKIP):
        """Constructor for the LessThan class"""

        # Initialize members of the class
        if all is not APIHelper.SKIP:
            self.all = all 
        if any is not APIHelper.SKIP:
            self.any = any 
        if latest is not APIHelper.SKIP:
            self.latest = latest 
        self.left_operand = left_operand 
        self.right_operand = right_operand 
        if time_range is not APIHelper.SKIP:
            self.time_range = time_range 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        left_operand = dictionary.get("left-operand") if dictionary.get("left-operand") else None
        right_operand = dictionary.get("right-operand") if dictionary.get("right-operand") else None
        all = dictionary.get("all") if dictionary.get("all") else APIHelper.SKIP
        any = dictionary.get("any") if dictionary.get("any") else APIHelper.SKIP
        latest = dictionary.get("latest") if dictionary.get("latest") else APIHelper.SKIP
        time_range = dictionary.get("time-range") if dictionary.get("time-range") else APIHelper.SKIP
        # Return an object of this model
        return cls(left_operand,
                   right_operand,
                   all,
                   any,
                   latest,
                   time_range)
