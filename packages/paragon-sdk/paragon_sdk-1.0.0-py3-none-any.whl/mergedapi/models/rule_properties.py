# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.apply_macro_schema import ApplyMacroSchema
from mergedapi.models.catalogue import Catalogue
from mergedapi.models.helper_file import HelperFile
from mergedapi.models.is_scaling_rule import IsScalingRule
from mergedapi.models.supported_devices import SupportedDevices


class RuleProperties(object):

    """Implementation of the 'RuleProperties' model.

    TODO: type model description here.

    Attributes:
        author (str): E-mail address of the rule writer
        catalogue (Catalogue): Metadata to classify the rules
        contributor (ContributorEnum): TODO: type description here.
        category (CategoryEnum): TODO: type description here.
        is_scaling_rule (IsScalingRule): Scaling rule
        date (str): TODO: type description here.
        helper_files (List[HelperFile]): TODO: type description here.
        supported_devices (SupportedDevices): Devices in which the sensors
            used by the rule are supported
        supported_healthbot_version (str): Healthbot version in which is rule
            is supported
        version (int): Rule version, an integer value needs to be incremented
            for any major change
        apply_macro (List[ApplyMacroSchema]): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "author": 'author',
        "catalogue": 'catalogue',
        "contributor": 'contributor',
        "category": 'category',
        "is_scaling_rule": 'is-scaling-rule',
        "date": 'date',
        "helper_files": 'helper-files',
        "supported_devices": 'supported-devices',
        "supported_healthbot_version": 'supported-healthbot-version',
        "version": 'version',
        "apply_macro": 'apply-macro'
    }

    _optionals = [
        'author',
        'catalogue',
        'contributor',
        'category',
        'is_scaling_rule',
        'date',
        'helper_files',
        'supported_devices',
        'supported_healthbot_version',
        'version',
        'apply_macro',
    ]

    def __init__(self,
                 author=APIHelper.SKIP,
                 catalogue=APIHelper.SKIP,
                 contributor=APIHelper.SKIP,
                 category=APIHelper.SKIP,
                 is_scaling_rule=APIHelper.SKIP,
                 date=APIHelper.SKIP,
                 helper_files=APIHelper.SKIP,
                 supported_devices=APIHelper.SKIP,
                 supported_healthbot_version=APIHelper.SKIP,
                 version=APIHelper.SKIP,
                 apply_macro=APIHelper.SKIP):
        """Constructor for the RuleProperties class"""

        # Initialize members of the class
        if author is not APIHelper.SKIP:
            self.author = author 
        if catalogue is not APIHelper.SKIP:
            self.catalogue = catalogue 
        if contributor is not APIHelper.SKIP:
            self.contributor = contributor 
        if category is not APIHelper.SKIP:
            self.category = category 
        if is_scaling_rule is not APIHelper.SKIP:
            self.is_scaling_rule = is_scaling_rule 
        if date is not APIHelper.SKIP:
            self.date = date 
        if helper_files is not APIHelper.SKIP:
            self.helper_files = helper_files 
        if supported_devices is not APIHelper.SKIP:
            self.supported_devices = supported_devices 
        if supported_healthbot_version is not APIHelper.SKIP:
            self.supported_healthbot_version = supported_healthbot_version 
        if version is not APIHelper.SKIP:
            self.version = version 
        if apply_macro is not APIHelper.SKIP:
            self.apply_macro = apply_macro 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        author = dictionary.get("author") if dictionary.get("author") else APIHelper.SKIP
        catalogue = Catalogue.from_dictionary(dictionary.get('catalogue')) if 'catalogue' in dictionary.keys() else APIHelper.SKIP
        contributor = dictionary.get("contributor") if dictionary.get("contributor") else APIHelper.SKIP
        category = dictionary.get("category") if dictionary.get("category") else APIHelper.SKIP
        is_scaling_rule = IsScalingRule.from_dictionary(dictionary.get('is-scaling-rule')) if 'is-scaling-rule' in dictionary.keys() else APIHelper.SKIP
        date = dictionary.get("date") if dictionary.get("date") else APIHelper.SKIP
        helper_files = None
        if dictionary.get('helper-files') is not None:
            helper_files = [HelperFile.from_dictionary(x) for x in dictionary.get('helper-files')]
        else:
            helper_files = APIHelper.SKIP
        supported_devices = SupportedDevices.from_dictionary(dictionary.get('supported-devices')) if 'supported-devices' in dictionary.keys() else APIHelper.SKIP
        supported_healthbot_version = dictionary.get("supported-healthbot-version") if dictionary.get("supported-healthbot-version") else APIHelper.SKIP
        version = dictionary.get("version") if dictionary.get("version") else APIHelper.SKIP
        apply_macro = None
        if dictionary.get('apply-macro') is not None:
            apply_macro = [ApplyMacroSchema.from_dictionary(x) for x in dictionary.get('apply-macro')]
        else:
            apply_macro = APIHelper.SKIP
        # Return an object of this model
        return cls(author,
                   catalogue,
                   contributor,
                   category,
                   is_scaling_rule,
                   date,
                   helper_files,
                   supported_devices,
                   supported_healthbot_version,
                   version,
                   apply_macro)
