# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.password import Password
from mergedapi.models.ssh import Ssh
from mergedapi.models.ssl import Ssl


class Authentication1(object):

    """Implementation of the 'Authentication1' model.

    Common authentication parameters

    Attributes:
        password (Password): TODO: type description here.
        ssh (Ssh): SSH Authentication parameters
        ssl (Ssl): SSL Authentication parameters

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "password": 'password',
        "ssh": 'ssh',
        "ssl": 'ssl'
    }

    _optionals = [
        'password',
        'ssh',
        'ssl',
    ]

    def __init__(self,
                 password=APIHelper.SKIP,
                 ssh=APIHelper.SKIP,
                 ssl=APIHelper.SKIP):
        """Constructor for the Authentication1 class"""

        # Initialize members of the class
        if password is not APIHelper.SKIP:
            self.password = password 
        if ssh is not APIHelper.SKIP:
            self.ssh = ssh 
        if ssl is not APIHelper.SKIP:
            self.ssl = ssl 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        password = Password.from_dictionary(dictionary.get('password')) if 'password' in dictionary.keys() else APIHelper.SKIP
        ssh = Ssh.from_dictionary(dictionary.get('ssh')) if 'ssh' in dictionary.keys() else APIHelper.SKIP
        ssl = Ssl.from_dictionary(dictionary.get('ssl')) if 'ssl' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(password,
                   ssh,
                   ssl)
