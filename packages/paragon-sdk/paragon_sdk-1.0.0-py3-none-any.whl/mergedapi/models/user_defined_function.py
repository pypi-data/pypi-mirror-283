# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.argument import Argument


class UserDefinedFunction(object):

    """Implementation of the 'UserDefinedFunction' model.

    User defined function to populate field value

    Attributes:
        argument (List[Argument]): TODO: type description here.
        function_name (str): Function name

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "function_name": 'function-name',
        "argument": 'argument'
    }

    _optionals = [
        'argument',
    ]

    def __init__(self,
                 function_name=None,
                 argument=APIHelper.SKIP):
        """Constructor for the UserDefinedFunction class"""

        # Initialize members of the class
        if argument is not APIHelper.SKIP:
            self.argument = argument 
        self.function_name = function_name 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        function_name = dictionary.get("function-name") if dictionary.get("function-name") else None
        argument = None
        if dictionary.get('argument') is not None:
            argument = [Argument.from_dictionary(x) for x in dictionary.get('argument')]
        else:
            argument = APIHelper.SKIP
        # Return an object of this model
        return cls(function_name,
                   argument)
