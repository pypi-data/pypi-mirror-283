# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.apply_macro_schema import ApplyMacroSchema
from mergedapi.models.operating_system_3 import OperatingSystem3


class OtherVendor1(object):

    """Implementation of the 'OtherVendor1' model.

    TODO: type model description here.

    Attributes:
        apply_macro (List[ApplyMacroSchema]): TODO: type description here.
        operating_system (str): [Deprecated] Vendor operating system, Should
            be of pattern [a-zA-Z][a-zA-Z0-9_-]*
        operating_systems (List[OperatingSystem3]): Operating system of the
            device
        sensors (List[str]): TODO: type description here.
        vendor_identifier (str): Unique key to identify the other vendor
            specific products
        vendor_name (str): Vendor name

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "vendor_identifier": 'vendor-identifier',
        "vendor_name": 'vendor-name',
        "apply_macro": 'apply-macro',
        "operating_system": 'operating-system',
        "operating_systems": 'operating-systems',
        "sensors": 'sensors'
    }

    _optionals = [
        'apply_macro',
        'operating_system',
        'operating_systems',
        'sensors',
    ]

    def __init__(self,
                 vendor_identifier=None,
                 vendor_name=None,
                 apply_macro=APIHelper.SKIP,
                 operating_system=APIHelper.SKIP,
                 operating_systems=APIHelper.SKIP,
                 sensors=APIHelper.SKIP):
        """Constructor for the OtherVendor1 class"""

        # Initialize members of the class
        if apply_macro is not APIHelper.SKIP:
            self.apply_macro = apply_macro 
        if operating_system is not APIHelper.SKIP:
            self.operating_system = operating_system 
        if operating_systems is not APIHelper.SKIP:
            self.operating_systems = operating_systems 
        if sensors is not APIHelper.SKIP:
            self.sensors = sensors 
        self.vendor_identifier = vendor_identifier 
        self.vendor_name = vendor_name 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        vendor_identifier = dictionary.get("vendor-identifier") if dictionary.get("vendor-identifier") else None
        vendor_name = dictionary.get("vendor-name") if dictionary.get("vendor-name") else None
        apply_macro = None
        if dictionary.get('apply-macro') is not None:
            apply_macro = [ApplyMacroSchema.from_dictionary(x) for x in dictionary.get('apply-macro')]
        else:
            apply_macro = APIHelper.SKIP
        operating_system = dictionary.get("operating-system") if dictionary.get("operating-system") else APIHelper.SKIP
        operating_systems = None
        if dictionary.get('operating-systems') is not None:
            operating_systems = [OperatingSystem3.from_dictionary(x) for x in dictionary.get('operating-systems')]
        else:
            operating_systems = APIHelper.SKIP
        sensors = dictionary.get("sensors") if dictionary.get("sensors") else APIHelper.SKIP
        # Return an object of this model
        return cls(vendor_identifier,
                   vendor_name,
                   apply_macro,
                   operating_system,
                   operating_systems,
                   sensors)
