# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.data_if_missing import DataIfMissing


class Reference(object):

    """Implementation of the 'Reference' model.

    TODO: type model description here.

    Attributes:
        data_if_missing (DataIfMissing): Assign value for field in case of
            data missing
        path (str): Reference to a field or trigger in different rule. Format
            is
            /topic[topic-name=<topic-name>]/rule[rule-name=<rule-name>]/field[<
            condition>]/<field-name> for field reference and
            /topic[topic-name=<topic-name>]/rule[rule-name=<rule-name>]/trigger
            [trigger-name=<trigger-name>]/key[condition]/trigger_field for
            trigger reference. Filtering part where field and key are
            mentioned is optional
        time_range (str): How much back in time should we look for data.
            Specify positive integer followed by s/m/h/d/w/y/o representing
            seconds/minutes/hours/days/weeks/years/offset. Eg: 2s

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "path": 'path',
        "data_if_missing": 'data-if-missing',
        "time_range": 'time-range'
    }

    _optionals = [
        'data_if_missing',
        'time_range',
    ]

    def __init__(self,
                 path=None,
                 data_if_missing=APIHelper.SKIP,
                 time_range=APIHelper.SKIP):
        """Constructor for the Reference class"""

        # Initialize members of the class
        if data_if_missing is not APIHelper.SKIP:
            self.data_if_missing = data_if_missing 
        self.path = path 
        if time_range is not APIHelper.SKIP:
            self.time_range = time_range 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        path = dictionary.get("path") if dictionary.get("path") else None
        data_if_missing = DataIfMissing.from_dictionary(dictionary.get('data-if-missing')) if 'data-if-missing' in dictionary.keys() else APIHelper.SKIP
        time_range = dictionary.get("time-range") if dictionary.get("time-range") else APIHelper.SKIP
        # Return an object of this model
        return cls(path,
                   data_if_missing,
                   time_range)
