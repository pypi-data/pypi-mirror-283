# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.ifa_1 import Ifa1
from mergedapi.models.netflow_1 import Netflow1
from mergedapi.models.sflow_2 import Sflow2


class Flow2(object):

    """Implementation of the 'Flow2' model.

    Flow ingest related parameters

    Attributes:
        deploy_nodes (List[str]): TODO: type description here.
        ifa (Ifa1): Inband Flow Analyzer specific parameters in Flow ingest
        netflow (Netflow1): NetFlow specific parameters in Flow ingest
        sflow (Sflow2): sFlow specific parameters in Flow ingest

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "deploy_nodes": 'deploy-nodes',
        "ifa": 'ifa',
        "netflow": 'netflow',
        "sflow": 'sflow'
    }

    _optionals = [
        'deploy_nodes',
        'ifa',
        'netflow',
        'sflow',
    ]

    def __init__(self,
                 deploy_nodes=APIHelper.SKIP,
                 ifa=APIHelper.SKIP,
                 netflow=APIHelper.SKIP,
                 sflow=APIHelper.SKIP):
        """Constructor for the Flow2 class"""

        # Initialize members of the class
        if deploy_nodes is not APIHelper.SKIP:
            self.deploy_nodes = deploy_nodes 
        if ifa is not APIHelper.SKIP:
            self.ifa = ifa 
        if netflow is not APIHelper.SKIP:
            self.netflow = netflow 
        if sflow is not APIHelper.SKIP:
            self.sflow = sflow 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        deploy_nodes = dictionary.get("deploy-nodes") if dictionary.get("deploy-nodes") else APIHelper.SKIP
        ifa = Ifa1.from_dictionary(dictionary.get('ifa')) if 'ifa' in dictionary.keys() else APIHelper.SKIP
        netflow = Netflow1.from_dictionary(dictionary.get('netflow')) if 'netflow' in dictionary.keys() else APIHelper.SKIP
        sflow = Sflow2.from_dictionary(dictionary.get('sflow')) if 'sflow' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(deploy_nodes,
                   ifa,
                   netflow,
                   sflow)
