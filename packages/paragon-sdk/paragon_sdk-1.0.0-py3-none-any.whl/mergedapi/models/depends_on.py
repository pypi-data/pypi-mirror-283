# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.term_1 import Term1
from mergedapi.models.with_capture_group import WithCaptureGroup


class DependsOn(object):

    """Implementation of the 'DependsOn' model.

    TODO: type model description here.

    Attributes:
        depends_on_multiple_instances (bool): Depends on multiple instances of
            the depends-on resource. One to many relationship. Eg: ae
            interface can be dependent on multiple interfaces
        description (str): Description about the dependency
        resource_name (str): Name of dependent resource
            <topic-name>/<resource-name>. Should be of pattern
            [a-z][a-z-]*(\.{1}[a-z0-9-]+)*/[a-z][a-z0-9-]*
        term (List[Term1]): TODO: type description here.
        triggered_by (List[str]): TODO: type description here.
        with_capture_group (List[WithCaptureGroup]): TODO: type description
            here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "resource_name": 'resource-name',
        "term": 'term',
        "depends_on_multiple_instances": 'depends-on-multiple-instances',
        "description": 'description',
        "triggered_by": 'triggered-by',
        "with_capture_group": 'with-capture-group'
    }

    _optionals = [
        'depends_on_multiple_instances',
        'description',
        'triggered_by',
        'with_capture_group',
    ]

    def __init__(self,
                 resource_name=None,
                 term=None,
                 depends_on_multiple_instances=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 triggered_by=APIHelper.SKIP,
                 with_capture_group=APIHelper.SKIP):
        """Constructor for the DependsOn class"""

        # Initialize members of the class
        if depends_on_multiple_instances is not APIHelper.SKIP:
            self.depends_on_multiple_instances = depends_on_multiple_instances 
        if description is not APIHelper.SKIP:
            self.description = description 
        self.resource_name = resource_name 
        self.term = term 
        if triggered_by is not APIHelper.SKIP:
            self.triggered_by = triggered_by 
        if with_capture_group is not APIHelper.SKIP:
            self.with_capture_group = with_capture_group 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        resource_name = dictionary.get("resource-name") if dictionary.get("resource-name") else None
        term = None
        if dictionary.get('term') is not None:
            term = [Term1.from_dictionary(x) for x in dictionary.get('term')]
        depends_on_multiple_instances = dictionary.get("depends-on-multiple-instances") if "depends-on-multiple-instances" in dictionary.keys() else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        triggered_by = dictionary.get("triggered-by") if dictionary.get("triggered-by") else APIHelper.SKIP
        with_capture_group = None
        if dictionary.get('with-capture-group') is not None:
            with_capture_group = [WithCaptureGroup.from_dictionary(x) for x in dictionary.get('with-capture-group')]
        else:
            with_capture_group = APIHelper.SKIP
        # Return an object of this model
        return cls(resource_name,
                   term,
                   depends_on_multiple_instances,
                   description,
                   triggered_by,
                   with_capture_group)
