# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class ComplianceTargetResultSummary(object):

    """Implementation of the 'complianceTargetResultSummary' model.

    TargetResultSummary summarises the result of a compliance scan for a
    single target device.

    Attributes:
        target_id (str): The id of the target device associated with the
            result.
        started_at (datetime): The time at which the scan for the device
            started. This might be undefined, depending on the state of the
            scan.
        ended_at (datetime): The time at which the scan for the device ended.
            This will be undefined until the scan is complete.
        status (ComplianceScanStatusEnum): TODO: type description here.
        error (str): If the status is SCAN_STATUS_NONCOMPLIANT, optionally
            holds a failure explanation.
        score (float): Defines the XCCDF-computed score for the device.
        result_doc_id (str): When the scan for the target device is complete,
            holds the id of the benchmark result document.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "target_id": 'targetId',
        "started_at": 'startedAt',
        "ended_at": 'endedAt',
        "status": 'status',
        "error": 'error',
        "score": 'score',
        "result_doc_id": 'resultDocId'
    }

    _optionals = [
        'target_id',
        'started_at',
        'ended_at',
        'status',
        'error',
        'score',
        'result_doc_id',
    ]

    def __init__(self,
                 target_id=APIHelper.SKIP,
                 started_at=APIHelper.SKIP,
                 ended_at=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 error=APIHelper.SKIP,
                 score=APIHelper.SKIP,
                 result_doc_id=APIHelper.SKIP):
        """Constructor for the ComplianceTargetResultSummary class"""

        # Initialize members of the class
        if target_id is not APIHelper.SKIP:
            self.target_id = target_id 
        if started_at is not APIHelper.SKIP:
            self.started_at = APIHelper.apply_datetime_converter(started_at, APIHelper.RFC3339DateTime) if started_at else None 
        if ended_at is not APIHelper.SKIP:
            self.ended_at = APIHelper.apply_datetime_converter(ended_at, APIHelper.RFC3339DateTime) if ended_at else None 
        if status is not APIHelper.SKIP:
            self.status = status 
        if error is not APIHelper.SKIP:
            self.error = error 
        if score is not APIHelper.SKIP:
            self.score = score 
        if result_doc_id is not APIHelper.SKIP:
            self.result_doc_id = result_doc_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        target_id = dictionary.get("targetId") if dictionary.get("targetId") else APIHelper.SKIP
        started_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("startedAt")).datetime if dictionary.get("startedAt") else APIHelper.SKIP
        ended_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("endedAt")).datetime if dictionary.get("endedAt") else APIHelper.SKIP
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        error = dictionary.get("error") if dictionary.get("error") else APIHelper.SKIP
        score = dictionary.get("score") if dictionary.get("score") else APIHelper.SKIP
        result_doc_id = dictionary.get("resultDocId") if dictionary.get("resultDocId") else APIHelper.SKIP
        # Return an object of this model
        return cls(target_id,
                   started_at,
                   ended_at,
                   status,
                   error,
                   score,
                   result_doc_id)
