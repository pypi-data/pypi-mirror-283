# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.then_16 import Then16
from mergedapi.models.when import When


class Term(object):

    """Implementation of the 'Term' model.

    TODO: type model description here.

    Attributes:
        term_name (str): Term name. Should be of pattern
            [a-zA-Z][a-zA-Z0-9_-]*
        then (Then16): TODO: type description here.
        when (When): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "term_name": 'term-name',
        "then": 'then',
        "when": 'when'
    }

    _optionals = [
        'then',
        'when',
    ]

    def __init__(self,
                 term_name=None,
                 then=APIHelper.SKIP,
                 when=APIHelper.SKIP):
        """Constructor for the Term class"""

        # Initialize members of the class
        self.term_name = term_name 
        if then is not APIHelper.SKIP:
            self.then = then 
        if when is not APIHelper.SKIP:
            self.when = when 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        term_name = dictionary.get("term-name") if dictionary.get("term-name") else None
        then = Then16.from_dictionary(dictionary.get('then')) if 'then' in dictionary.keys() else APIHelper.SKIP
        when = When.from_dictionary(dictionary.get('when')) if 'when' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(term_name,
                   then,
                   when)
