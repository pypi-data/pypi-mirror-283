# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.argument_1 import Argument1
from mergedapi.models.mreturn import Return


class Function(object):

    """Implementation of the 'Function' model.

    TODO: type model description here.

    Attributes:
        argument (List[Argument1]): TODO: type description here.
        mreturn (List[Return]): TODO: type description here.
        description (str): Description of the function
        function_name (str): Name of the function. Should be of pattern
            [a-zA-Z][a-zA-Z0-9_-]*
        method (str): Function to be called
        path (str): File in which function is defined. This is relative path
            to the data directory

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "function_name": 'function-name',
        "method": 'method',
        "path": 'path',
        "argument": 'argument',
        "mreturn": 'return',
        "description": 'description'
    }

    _optionals = [
        'argument',
        'mreturn',
        'description',
    ]

    def __init__(self,
                 function_name=None,
                 method=None,
                 path=None,
                 argument=APIHelper.SKIP,
                 mreturn=APIHelper.SKIP,
                 description=APIHelper.SKIP):
        """Constructor for the Function class"""

        # Initialize members of the class
        if argument is not APIHelper.SKIP:
            self.argument = argument 
        if mreturn is not APIHelper.SKIP:
            self.mreturn = mreturn 
        if description is not APIHelper.SKIP:
            self.description = description 
        self.function_name = function_name 
        self.method = method 
        self.path = path 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        function_name = dictionary.get("function-name") if dictionary.get("function-name") else None
        method = dictionary.get("method") if dictionary.get("method") else None
        path = dictionary.get("path") if dictionary.get("path") else None
        argument = None
        if dictionary.get('argument') is not None:
            argument = [Argument1.from_dictionary(x) for x in dictionary.get('argument')]
        else:
            argument = APIHelper.SKIP
        mreturn = None
        if dictionary.get('return') is not None:
            mreturn = [Return.from_dictionary(x) for x in dictionary.get('return')]
        else:
            mreturn = APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        # Return an object of this model
        return cls(function_name,
                   method,
                   path,
                   argument,
                   mreturn,
                   description)
