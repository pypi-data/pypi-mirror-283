# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class Filtering(object):

    """Implementation of the 'Filtering' model.

    TODO: type model description here.

    Attributes:
        filter (str): Field names must appear on the left-hand side of a
            comparison operator; the right-hand side accepts only literals and
            logical operators.  A filter can only reference fields which are
            listed in the table definition in the relevant persistence
            repository.  When a filter compares the value of an enumeration,
            it can specify the value either as an integer or as a string
            containing the corresponding enumeration string, as in `severity =
            "major"` above.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "filter": 'filter'
    }

    _optionals = [
        'filter',
    ]

    def __init__(self,
                 filter=APIHelper.SKIP):
        """Constructor for the Filtering class"""

        # Initialize members of the class
        if filter is not APIHelper.SKIP:
            self.filter = filter 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        filter = dictionary.get("filter") if dictionary.get("filter") else APIHelper.SKIP
        # Return an object of this model
        return cls(filter)
