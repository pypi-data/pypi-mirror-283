# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.integrity_software_version import IntegritySoftwareVersion


class Product(object):

    """Implementation of the 'Product' model.

    TODO: type model description here.

    Attributes:
        id (str): Uniquely identifies the product; assigned by the server.
        name (str): The product name; for example "Junos OS", "Cisco IOS".
        description (str): TODO: type description here.
        versions (List[IntegritySoftwareVersion]): The versions of the
            software product.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "name": 'name',
        "description": 'description',
        "versions": 'versions'
    }

    _optionals = [
        'id',
        'name',
        'description',
        'versions',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 versions=APIHelper.SKIP):
        """Constructor for the Product class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if name is not APIHelper.SKIP:
            self.name = name 
        if description is not APIHelper.SKIP:
            self.description = description 
        if versions is not APIHelper.SKIP:
            self.versions = versions 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        versions = None
        if dictionary.get('versions') is not None:
            versions = [IntegritySoftwareVersion.from_dictionary(x) for x in dictionary.get('versions')]
        else:
            versions = APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   name,
                   description,
                   versions)
