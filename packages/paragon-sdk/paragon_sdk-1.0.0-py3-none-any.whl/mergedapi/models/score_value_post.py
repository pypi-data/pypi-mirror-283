# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class ScoreValuePost(object):

    """Implementation of the 'scoreValuePost' model.

    Represents a reported value and factor.

    Attributes:
        factor_ref (str): References the factor to which the value applies.
        string_val (str): TODO: type description here.
        bool_val (bool): TODO: type description here.
        double_val (float): TODO: type description here.
        int_val (int): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "factor_ref": 'factorRef',
        "string_val": 'stringVal',
        "bool_val": 'boolVal',
        "double_val": 'doubleVal',
        "int_val": 'intVal'
    }

    _optionals = [
        'factor_ref',
        'string_val',
        'bool_val',
        'double_val',
        'int_val',
    ]

    def __init__(self,
                 factor_ref=APIHelper.SKIP,
                 string_val=APIHelper.SKIP,
                 bool_val=APIHelper.SKIP,
                 double_val=APIHelper.SKIP,
                 int_val=APIHelper.SKIP):
        """Constructor for the ScoreValuePost class"""

        # Initialize members of the class
        if factor_ref is not APIHelper.SKIP:
            self.factor_ref = factor_ref 
        if string_val is not APIHelper.SKIP:
            self.string_val = string_val 
        if bool_val is not APIHelper.SKIP:
            self.bool_val = bool_val 
        if double_val is not APIHelper.SKIP:
            self.double_val = double_val 
        if int_val is not APIHelper.SKIP:
            self.int_val = int_val 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        factor_ref = dictionary.get("factorRef") if dictionary.get("factorRef") else APIHelper.SKIP
        string_val = dictionary.get("stringVal") if dictionary.get("stringVal") else APIHelper.SKIP
        bool_val = dictionary.get("boolVal") if "boolVal" in dictionary.keys() else APIHelper.SKIP
        double_val = dictionary.get("doubleVal") if dictionary.get("doubleVal") else APIHelper.SKIP
        int_val = dictionary.get("intVal") if dictionary.get("intVal") else APIHelper.SKIP
        # Return an object of this model
        return cls(factor_ref,
                   string_val,
                   bool_val,
                   double_val,
                   int_val)
