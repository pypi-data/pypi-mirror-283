# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.pbn_status import PbnStatus
from mergedapi.models.snapshot_advisory import SnapshotAdvisory


class SnapshotDeviceVulnerability(object):

    """Implementation of the 'snapshotDeviceVulnerability' model.

    DeviceVulnerability holds details of known device vulnerabilities.

    Attributes:
        advisories (List[SnapshotAdvisory]): TODO: type description here.
        pbn_status (PbnStatus): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "advisories": 'advisories',
        "pbn_status": 'pbnStatus'
    }

    _optionals = [
        'advisories',
        'pbn_status',
    ]

    def __init__(self,
                 advisories=APIHelper.SKIP,
                 pbn_status=APIHelper.SKIP):
        """Constructor for the SnapshotDeviceVulnerability class"""

        # Initialize members of the class
        if advisories is not APIHelper.SKIP:
            self.advisories = advisories 
        if pbn_status is not APIHelper.SKIP:
            self.pbn_status = pbn_status 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        advisories = None
        if dictionary.get('advisories') is not None:
            advisories = [SnapshotAdvisory.from_dictionary(x) for x in dictionary.get('advisories')]
        else:
            advisories = APIHelper.SKIP
        pbn_status = PbnStatus.from_dictionary(dictionary.get('pbnStatus')) if 'pbnStatus' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(advisories,
                   pbn_status)
