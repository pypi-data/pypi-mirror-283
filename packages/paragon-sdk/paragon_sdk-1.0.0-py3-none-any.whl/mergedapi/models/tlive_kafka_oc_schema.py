# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.security import Security


class TliveKafkaOcSchema(object):

    """Implementation of the 'tlive-kafka-oc_schema' model.

    TODO: type model description here.

    Attributes:
        brokers (List[str]): TODO: type description here.
        collector_settings (object): TODO: type description here.
        name (str): Name of this instance
        security (Security): Security settings
        topics (List[str]): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "brokers": 'brokers',
        "name": 'name',
        "collector_settings": 'collector-settings',
        "security": 'security',
        "topics": 'topics'
    }

    _optionals = [
        'collector_settings',
        'security',
        'topics',
    ]

    def __init__(self,
                 brokers=None,
                 name=None,
                 collector_settings=APIHelper.SKIP,
                 security=APIHelper.SKIP,
                 topics=APIHelper.SKIP):
        """Constructor for the TliveKafkaOcSchema class"""

        # Initialize members of the class
        self.brokers = brokers 
        if collector_settings is not APIHelper.SKIP:
            self.collector_settings = collector_settings 
        self.name = name 
        if security is not APIHelper.SKIP:
            self.security = security 
        if topics is not APIHelper.SKIP:
            self.topics = topics 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        brokers = dictionary.get("brokers") if dictionary.get("brokers") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        collector_settings = dictionary.get("collector-settings") if dictionary.get("collector-settings") else APIHelper.SKIP
        security = Security.from_dictionary(dictionary.get('security')) if 'security' in dictionary.keys() else APIHelper.SKIP
        topics = dictionary.get("topics") if dictionary.get("topics") else APIHelper.SKIP
        # Return an object of this model
        return cls(brokers,
                   name,
                   collector_settings,
                   security,
                   topics)
