# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper


class DeviceHealthTree(object):

    """Implementation of the 'deviceHealthTree' model.

    TODO: type model description here.

    Attributes:
        children (List[DeviceHealthTree]): TODO: type description here.
        color (ColorEnum): TODO: type description here.
        data (str): TODO: type description here.
        id (str): TODO: type description here.
        name (str): TODO: type description here.
        timestamp (datetime): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "children": 'children',
        "name": 'name',
        "color": 'color',
        "data": 'data',
        "id": 'id',
        "timestamp": 'timestamp'
    }

    _optionals = [
        'color',
        'data',
        'id',
        'timestamp',
    ]

    def __init__(self,
                 children=None,
                 name=None,
                 color=APIHelper.SKIP,
                 data=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 timestamp=APIHelper.SKIP):
        """Constructor for the DeviceHealthTree class"""

        # Initialize members of the class
        self.children = children 
        if color is not APIHelper.SKIP:
            self.color = color 
        if data is not APIHelper.SKIP:
            self.data = data 
        if id is not APIHelper.SKIP:
            self.id = id 
        self.name = name 
        if timestamp is not APIHelper.SKIP:
            self.timestamp = APIHelper.apply_datetime_converter(timestamp, APIHelper.RFC3339DateTime) if timestamp else None 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        children = None
        if dictionary.get('children') is not None:
            children = [DeviceHealthTree.from_dictionary(x) for x in dictionary.get('children')]
        name = dictionary.get("name") if dictionary.get("name") else None
        color = dictionary.get("color") if dictionary.get("color") else APIHelper.SKIP
        data = dictionary.get("data") if dictionary.get("data") else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        timestamp = APIHelper.RFC3339DateTime.from_value(dictionary.get("timestamp")).datetime if dictionary.get("timestamp") else APIHelper.SKIP
        # Return an object of this model
        return cls(children,
                   name,
                   color,
                   data,
                   id,
                   timestamp)
