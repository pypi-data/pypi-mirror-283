# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.artifact import Artifact
from mergedapi.models.data_xml import DataXml
from mergedapi.models.grok import Grok
from mergedapi.models.json import Json
from mergedapi.models.regex import Regex


class Output(object):

    """Implementation of the 'Output' model.

    TODO: type model description here.

    Attributes:
        artifact (Artifact): TODO: type description here.
        command_tag (str): Command tag whose output is used for pattern match
        data_xml (DataXml): Glean output and export using xpath
        description (str): Exported output field desciption
        grok (Grok): Glean output and export using grok pattern
        json (Json): Glean output and export using json path
        name (str): Output parameter name exported from the workflow. Should
            be of pattern [a-zA-Z][a-zA-Z0-9_-]*
        result (List[object]): Export stdout output (stdout) of the step
        regex (Regex): Glean output using regular expressions

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "artifact": 'artifact',
        "command_tag": 'command-tag',
        "data_xml": 'data-xml',
        "description": 'description',
        "grok": 'grok',
        "json": 'json',
        "result": 'result',
        "regex": 'regex'
    }

    _optionals = [
        'artifact',
        'command_tag',
        'data_xml',
        'description',
        'grok',
        'json',
        'result',
        'regex',
    ]

    def __init__(self,
                 name=None,
                 artifact=APIHelper.SKIP,
                 command_tag=APIHelper.SKIP,
                 data_xml=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 grok=APIHelper.SKIP,
                 json=APIHelper.SKIP,
                 result=APIHelper.SKIP,
                 regex=APIHelper.SKIP):
        """Constructor for the Output class"""

        # Initialize members of the class
        if artifact is not APIHelper.SKIP:
            self.artifact = artifact 
        if command_tag is not APIHelper.SKIP:
            self.command_tag = command_tag 
        if data_xml is not APIHelper.SKIP:
            self.data_xml = data_xml 
        if description is not APIHelper.SKIP:
            self.description = description 
        if grok is not APIHelper.SKIP:
            self.grok = grok 
        if json is not APIHelper.SKIP:
            self.json = json 
        self.name = name 
        if result is not APIHelper.SKIP:
            self.result = result 
        if regex is not APIHelper.SKIP:
            self.regex = regex 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else None
        artifact = Artifact.from_dictionary(dictionary.get('artifact')) if 'artifact' in dictionary.keys() else APIHelper.SKIP
        command_tag = dictionary.get("command-tag") if dictionary.get("command-tag") else APIHelper.SKIP
        data_xml = DataXml.from_dictionary(dictionary.get('data-xml')) if 'data-xml' in dictionary.keys() else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        grok = Grok.from_dictionary(dictionary.get('grok')) if 'grok' in dictionary.keys() else APIHelper.SKIP
        json = Json.from_dictionary(dictionary.get('json')) if 'json' in dictionary.keys() else APIHelper.SKIP
        result = dictionary.get("result") if dictionary.get("result") else APIHelper.SKIP
        regex = Regex.from_dictionary(dictionary.get('regex')) if 'regex' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   artifact,
                   command_tag,
                   data_xml,
                   description,
                   grok,
                   json,
                   result,
                   regex)
