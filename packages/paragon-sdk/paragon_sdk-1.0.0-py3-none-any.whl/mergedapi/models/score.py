# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.entity_id import EntityId
from mergedapi.models.prerequisite import Prerequisite
from mergedapi.models.reputational import Reputational
from mergedapi.models.variable import Variable


class Score(object):

    """Implementation of the 'Score' model.

    TODO: type model description here.

    Attributes:
        id (str): The unique ID of the score.
        entity_id (EntityId): TODO: type description here.
        plan_id (str): The id of the plan that was used to calculate the
            score.
        timestamp (datetime): TODO: type description here.
        score (float): The overall score.
        prerequisite (Prerequisite): TODO: type description here.
        variable (Variable): TODO: type description here.
        reputational (Reputational): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "entity_id": 'entityId',
        "plan_id": 'planId',
        "timestamp": 'timestamp',
        "score": 'score',
        "prerequisite": 'prerequisite',
        "variable": 'variable',
        "reputational": 'reputational'
    }

    _optionals = [
        'id',
        'entity_id',
        'plan_id',
        'timestamp',
        'score',
        'prerequisite',
        'variable',
        'reputational',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 entity_id=APIHelper.SKIP,
                 plan_id=APIHelper.SKIP,
                 timestamp=APIHelper.SKIP,
                 score=APIHelper.SKIP,
                 prerequisite=APIHelper.SKIP,
                 variable=APIHelper.SKIP,
                 reputational=APIHelper.SKIP):
        """Constructor for the Score class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if entity_id is not APIHelper.SKIP:
            self.entity_id = entity_id 
        if plan_id is not APIHelper.SKIP:
            self.plan_id = plan_id 
        if timestamp is not APIHelper.SKIP:
            self.timestamp = APIHelper.apply_datetime_converter(timestamp, APIHelper.RFC3339DateTime) if timestamp else None 
        if score is not APIHelper.SKIP:
            self.score = score 
        if prerequisite is not APIHelper.SKIP:
            self.prerequisite = prerequisite 
        if variable is not APIHelper.SKIP:
            self.variable = variable 
        if reputational is not APIHelper.SKIP:
            self.reputational = reputational 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        entity_id = EntityId.from_dictionary(dictionary.get('entityId')) if 'entityId' in dictionary.keys() else APIHelper.SKIP
        plan_id = dictionary.get("planId") if dictionary.get("planId") else APIHelper.SKIP
        timestamp = APIHelper.RFC3339DateTime.from_value(dictionary.get("timestamp")).datetime if dictionary.get("timestamp") else APIHelper.SKIP
        score = dictionary.get("score") if dictionary.get("score") else APIHelper.SKIP
        prerequisite = Prerequisite.from_dictionary(dictionary.get('prerequisite')) if 'prerequisite' in dictionary.keys() else APIHelper.SKIP
        variable = Variable.from_dictionary(dictionary.get('variable')) if 'variable' in dictionary.keys() else APIHelper.SKIP
        reputational = Reputational.from_dictionary(dictionary.get('reputational')) if 'reputational' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   entity_id,
                   plan_id,
                   timestamp,
                   score,
                   prerequisite,
                   variable,
                   reputational)
