# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _StrainPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkTransformToStrainFilterPython
else:
    import _itkTransformToStrainFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkGenerateImageSourcePython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkTransformBasePython
import itk.itkDiffusionTensor3DPython
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.itkArray2DPython

def itkTransformToStrainFilterTD22DD_New():
    return itkTransformToStrainFilterTD22DD.New()

class itkTransformToStrainFilterTD22DD(itk.itkGenerateImageSourcePython.itkGenerateImageSourceISSRTD22):
    r"""Proxy of C++ itkTransformToStrainFilterTD22DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTransformToStrainFilterTD22DD_Pointer"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD22DD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTransformToStrainFilterTD22DD_Pointer"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD22DD_Clone(self)

    def SetTransformInput(self, _arg):
        r"""
        SetTransformInput(self, _arg)

        Parameters
        ----------
        _arg: itkDataObjectDecoratorTD22 const *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD22DD_SetTransformInput(self, _arg)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD22 const *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD22DD_SetTransform(self, _arg)

    def GetTransformInput(self):
        r"""GetTransformInput(self) -> itkDataObjectDecoratorTD22"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD22DD_GetTransformInput(self)

    def GetTransform(self):
        r"""GetTransform(self) -> itkTransformD22"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD22DD_GetTransform(self)
    StrainFormType_INFINITESIMAL = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD22DD_StrainFormType_INFINITESIMAL
    
    StrainFormType_GREENLAGRANGIAN = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD22DD_StrainFormType_GREENLAGRANGIAN
    
    StrainFormType_EULERIANALMANSI = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD22DD_StrainFormType_EULERIANALMANSI
    

    def SetStrainForm(self, _arg):
        r"""
        SetStrainForm(self, _arg)

        Parameters
        ----------
        _arg: enum itkTransformToStrainFilterTD22DD::StrainFormType

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD22DD_SetStrainForm(self, _arg)

    def GetStrainForm(self):
        r"""GetStrainForm(self) -> itkTransformToStrainFilterTD22DD::StrainFormType"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD22DD_GetStrainForm(self)
    __swig_destroy__ = _itkTransformToStrainFilterPython.delete_itkTransformToStrainFilterTD22DD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformToStrainFilterTD22DD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD22DD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTransformToStrainFilterTD22DD

        Create a new object of the class itkTransformToStrainFilterTD22DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformToStrainFilterTD22DD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformToStrainFilterTD22DD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformToStrainFilterTD22DD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformToStrainFilterTD22DD in _itkTransformToStrainFilterPython:
_itkTransformToStrainFilterPython.itkTransformToStrainFilterTD22DD_swigregister(itkTransformToStrainFilterTD22DD)

def itkTransformToStrainFilterTD23DD_New():
    return itkTransformToStrainFilterTD23DD.New()

class itkTransformToStrainFilterTD23DD(itk.itkGenerateImageSourcePython.itkGenerateImageSourceISSRTD22):
    r"""Proxy of C++ itkTransformToStrainFilterTD23DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTransformToStrainFilterTD23DD_Pointer"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD23DD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTransformToStrainFilterTD23DD_Pointer"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD23DD_Clone(self)

    def SetTransformInput(self, _arg):
        r"""
        SetTransformInput(self, _arg)

        Parameters
        ----------
        _arg: itkDataObjectDecoratorTD23 const *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD23DD_SetTransformInput(self, _arg)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD23 const *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD23DD_SetTransform(self, _arg)

    def GetTransformInput(self):
        r"""GetTransformInput(self) -> itkDataObjectDecoratorTD23"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD23DD_GetTransformInput(self)

    def GetTransform(self):
        r"""GetTransform(self) -> itkTransformD23"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD23DD_GetTransform(self)
    StrainFormType_INFINITESIMAL = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD23DD_StrainFormType_INFINITESIMAL
    
    StrainFormType_GREENLAGRANGIAN = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD23DD_StrainFormType_GREENLAGRANGIAN
    
    StrainFormType_EULERIANALMANSI = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD23DD_StrainFormType_EULERIANALMANSI
    

    def SetStrainForm(self, _arg):
        r"""
        SetStrainForm(self, _arg)

        Parameters
        ----------
        _arg: enum itkTransformToStrainFilterTD23DD::StrainFormType

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD23DD_SetStrainForm(self, _arg)

    def GetStrainForm(self):
        r"""GetStrainForm(self) -> itkTransformToStrainFilterTD23DD::StrainFormType"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD23DD_GetStrainForm(self)
    __swig_destroy__ = _itkTransformToStrainFilterPython.delete_itkTransformToStrainFilterTD23DD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformToStrainFilterTD23DD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD23DD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTransformToStrainFilterTD23DD

        Create a new object of the class itkTransformToStrainFilterTD23DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformToStrainFilterTD23DD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformToStrainFilterTD23DD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformToStrainFilterTD23DD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformToStrainFilterTD23DD in _itkTransformToStrainFilterPython:
_itkTransformToStrainFilterPython.itkTransformToStrainFilterTD23DD_swigregister(itkTransformToStrainFilterTD23DD)

def itkTransformToStrainFilterTD24DD_New():
    return itkTransformToStrainFilterTD24DD.New()

class itkTransformToStrainFilterTD24DD(itk.itkGenerateImageSourcePython.itkGenerateImageSourceISSRTD22):
    r"""Proxy of C++ itkTransformToStrainFilterTD24DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTransformToStrainFilterTD24DD_Pointer"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD24DD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTransformToStrainFilterTD24DD_Pointer"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD24DD_Clone(self)

    def SetTransformInput(self, _arg):
        r"""
        SetTransformInput(self, _arg)

        Parameters
        ----------
        _arg: itkDataObjectDecoratorTD24 const *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD24DD_SetTransformInput(self, _arg)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD24 const *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD24DD_SetTransform(self, _arg)

    def GetTransformInput(self):
        r"""GetTransformInput(self) -> itkDataObjectDecoratorTD24"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD24DD_GetTransformInput(self)

    def GetTransform(self):
        r"""GetTransform(self) -> itkTransformD24"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD24DD_GetTransform(self)
    StrainFormType_INFINITESIMAL = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD24DD_StrainFormType_INFINITESIMAL
    
    StrainFormType_GREENLAGRANGIAN = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD24DD_StrainFormType_GREENLAGRANGIAN
    
    StrainFormType_EULERIANALMANSI = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD24DD_StrainFormType_EULERIANALMANSI
    

    def SetStrainForm(self, _arg):
        r"""
        SetStrainForm(self, _arg)

        Parameters
        ----------
        _arg: enum itkTransformToStrainFilterTD24DD::StrainFormType

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD24DD_SetStrainForm(self, _arg)

    def GetStrainForm(self):
        r"""GetStrainForm(self) -> itkTransformToStrainFilterTD24DD::StrainFormType"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD24DD_GetStrainForm(self)
    __swig_destroy__ = _itkTransformToStrainFilterPython.delete_itkTransformToStrainFilterTD24DD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformToStrainFilterTD24DD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD24DD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTransformToStrainFilterTD24DD

        Create a new object of the class itkTransformToStrainFilterTD24DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformToStrainFilterTD24DD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformToStrainFilterTD24DD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformToStrainFilterTD24DD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformToStrainFilterTD24DD in _itkTransformToStrainFilterPython:
_itkTransformToStrainFilterPython.itkTransformToStrainFilterTD24DD_swigregister(itkTransformToStrainFilterTD24DD)

def itkTransformToStrainFilterTD32DD_New():
    return itkTransformToStrainFilterTD32DD.New()

class itkTransformToStrainFilterTD32DD(itk.itkGenerateImageSourcePython.itkGenerateImageSourceISSRTD33):
    r"""Proxy of C++ itkTransformToStrainFilterTD32DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTransformToStrainFilterTD32DD_Pointer"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD32DD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTransformToStrainFilterTD32DD_Pointer"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD32DD_Clone(self)

    def SetTransformInput(self, _arg):
        r"""
        SetTransformInput(self, _arg)

        Parameters
        ----------
        _arg: itkDataObjectDecoratorTD32 const *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD32DD_SetTransformInput(self, _arg)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD32 const *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD32DD_SetTransform(self, _arg)

    def GetTransformInput(self):
        r"""GetTransformInput(self) -> itkDataObjectDecoratorTD32"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD32DD_GetTransformInput(self)

    def GetTransform(self):
        r"""GetTransform(self) -> itkTransformD32"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD32DD_GetTransform(self)
    StrainFormType_INFINITESIMAL = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD32DD_StrainFormType_INFINITESIMAL
    
    StrainFormType_GREENLAGRANGIAN = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD32DD_StrainFormType_GREENLAGRANGIAN
    
    StrainFormType_EULERIANALMANSI = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD32DD_StrainFormType_EULERIANALMANSI
    

    def SetStrainForm(self, _arg):
        r"""
        SetStrainForm(self, _arg)

        Parameters
        ----------
        _arg: enum itkTransformToStrainFilterTD32DD::StrainFormType

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD32DD_SetStrainForm(self, _arg)

    def GetStrainForm(self):
        r"""GetStrainForm(self) -> itkTransformToStrainFilterTD32DD::StrainFormType"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD32DD_GetStrainForm(self)
    __swig_destroy__ = _itkTransformToStrainFilterPython.delete_itkTransformToStrainFilterTD32DD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformToStrainFilterTD32DD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD32DD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTransformToStrainFilterTD32DD

        Create a new object of the class itkTransformToStrainFilterTD32DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformToStrainFilterTD32DD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformToStrainFilterTD32DD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformToStrainFilterTD32DD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformToStrainFilterTD32DD in _itkTransformToStrainFilterPython:
_itkTransformToStrainFilterPython.itkTransformToStrainFilterTD32DD_swigregister(itkTransformToStrainFilterTD32DD)

def itkTransformToStrainFilterTD33DD_New():
    return itkTransformToStrainFilterTD33DD.New()

class itkTransformToStrainFilterTD33DD(itk.itkGenerateImageSourcePython.itkGenerateImageSourceISSRTD33):
    r"""Proxy of C++ itkTransformToStrainFilterTD33DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTransformToStrainFilterTD33DD_Pointer"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD33DD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTransformToStrainFilterTD33DD_Pointer"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD33DD_Clone(self)

    def SetTransformInput(self, _arg):
        r"""
        SetTransformInput(self, _arg)

        Parameters
        ----------
        _arg: itkDataObjectDecoratorTD33 const *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD33DD_SetTransformInput(self, _arg)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD33 const *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD33DD_SetTransform(self, _arg)

    def GetTransformInput(self):
        r"""GetTransformInput(self) -> itkDataObjectDecoratorTD33"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD33DD_GetTransformInput(self)

    def GetTransform(self):
        r"""GetTransform(self) -> itkTransformD33"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD33DD_GetTransform(self)
    StrainFormType_INFINITESIMAL = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD33DD_StrainFormType_INFINITESIMAL
    
    StrainFormType_GREENLAGRANGIAN = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD33DD_StrainFormType_GREENLAGRANGIAN
    
    StrainFormType_EULERIANALMANSI = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD33DD_StrainFormType_EULERIANALMANSI
    

    def SetStrainForm(self, _arg):
        r"""
        SetStrainForm(self, _arg)

        Parameters
        ----------
        _arg: enum itkTransformToStrainFilterTD33DD::StrainFormType

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD33DD_SetStrainForm(self, _arg)

    def GetStrainForm(self):
        r"""GetStrainForm(self) -> itkTransformToStrainFilterTD33DD::StrainFormType"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD33DD_GetStrainForm(self)
    __swig_destroy__ = _itkTransformToStrainFilterPython.delete_itkTransformToStrainFilterTD33DD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformToStrainFilterTD33DD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD33DD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTransformToStrainFilterTD33DD

        Create a new object of the class itkTransformToStrainFilterTD33DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformToStrainFilterTD33DD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformToStrainFilterTD33DD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformToStrainFilterTD33DD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformToStrainFilterTD33DD in _itkTransformToStrainFilterPython:
_itkTransformToStrainFilterPython.itkTransformToStrainFilterTD33DD_swigregister(itkTransformToStrainFilterTD33DD)

def itkTransformToStrainFilterTD34DD_New():
    return itkTransformToStrainFilterTD34DD.New()

class itkTransformToStrainFilterTD34DD(itk.itkGenerateImageSourcePython.itkGenerateImageSourceISSRTD33):
    r"""Proxy of C++ itkTransformToStrainFilterTD34DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTransformToStrainFilterTD34DD_Pointer"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD34DD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTransformToStrainFilterTD34DD_Pointer"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD34DD_Clone(self)

    def SetTransformInput(self, _arg):
        r"""
        SetTransformInput(self, _arg)

        Parameters
        ----------
        _arg: itkDataObjectDecoratorTD34 const *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD34DD_SetTransformInput(self, _arg)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD34 const *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD34DD_SetTransform(self, _arg)

    def GetTransformInput(self):
        r"""GetTransformInput(self) -> itkDataObjectDecoratorTD34"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD34DD_GetTransformInput(self)

    def GetTransform(self):
        r"""GetTransform(self) -> itkTransformD34"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD34DD_GetTransform(self)
    StrainFormType_INFINITESIMAL = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD34DD_StrainFormType_INFINITESIMAL
    
    StrainFormType_GREENLAGRANGIAN = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD34DD_StrainFormType_GREENLAGRANGIAN
    
    StrainFormType_EULERIANALMANSI = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD34DD_StrainFormType_EULERIANALMANSI
    

    def SetStrainForm(self, _arg):
        r"""
        SetStrainForm(self, _arg)

        Parameters
        ----------
        _arg: enum itkTransformToStrainFilterTD34DD::StrainFormType

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD34DD_SetStrainForm(self, _arg)

    def GetStrainForm(self):
        r"""GetStrainForm(self) -> itkTransformToStrainFilterTD34DD::StrainFormType"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD34DD_GetStrainForm(self)
    __swig_destroy__ = _itkTransformToStrainFilterPython.delete_itkTransformToStrainFilterTD34DD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformToStrainFilterTD34DD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD34DD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTransformToStrainFilterTD34DD

        Create a new object of the class itkTransformToStrainFilterTD34DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformToStrainFilterTD34DD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformToStrainFilterTD34DD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformToStrainFilterTD34DD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformToStrainFilterTD34DD in _itkTransformToStrainFilterPython:
_itkTransformToStrainFilterPython.itkTransformToStrainFilterTD34DD_swigregister(itkTransformToStrainFilterTD34DD)

def itkTransformToStrainFilterTD42DD_New():
    return itkTransformToStrainFilterTD42DD.New()

class itkTransformToStrainFilterTD42DD(itk.itkGenerateImageSourcePython.itkGenerateImageSourceISSRTD44):
    r"""Proxy of C++ itkTransformToStrainFilterTD42DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTransformToStrainFilterTD42DD_Pointer"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD42DD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTransformToStrainFilterTD42DD_Pointer"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD42DD_Clone(self)

    def SetTransformInput(self, _arg):
        r"""
        SetTransformInput(self, _arg)

        Parameters
        ----------
        _arg: itkDataObjectDecoratorTD42 const *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD42DD_SetTransformInput(self, _arg)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD42 const *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD42DD_SetTransform(self, _arg)

    def GetTransformInput(self):
        r"""GetTransformInput(self) -> itkDataObjectDecoratorTD42"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD42DD_GetTransformInput(self)

    def GetTransform(self):
        r"""GetTransform(self) -> itkTransformD42"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD42DD_GetTransform(self)
    StrainFormType_INFINITESIMAL = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD42DD_StrainFormType_INFINITESIMAL
    
    StrainFormType_GREENLAGRANGIAN = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD42DD_StrainFormType_GREENLAGRANGIAN
    
    StrainFormType_EULERIANALMANSI = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD42DD_StrainFormType_EULERIANALMANSI
    

    def SetStrainForm(self, _arg):
        r"""
        SetStrainForm(self, _arg)

        Parameters
        ----------
        _arg: enum itkTransformToStrainFilterTD42DD::StrainFormType

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD42DD_SetStrainForm(self, _arg)

    def GetStrainForm(self):
        r"""GetStrainForm(self) -> itkTransformToStrainFilterTD42DD::StrainFormType"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD42DD_GetStrainForm(self)
    __swig_destroy__ = _itkTransformToStrainFilterPython.delete_itkTransformToStrainFilterTD42DD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformToStrainFilterTD42DD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD42DD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTransformToStrainFilterTD42DD

        Create a new object of the class itkTransformToStrainFilterTD42DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformToStrainFilterTD42DD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformToStrainFilterTD42DD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformToStrainFilterTD42DD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformToStrainFilterTD42DD in _itkTransformToStrainFilterPython:
_itkTransformToStrainFilterPython.itkTransformToStrainFilterTD42DD_swigregister(itkTransformToStrainFilterTD42DD)

def itkTransformToStrainFilterTD43DD_New():
    return itkTransformToStrainFilterTD43DD.New()

class itkTransformToStrainFilterTD43DD(itk.itkGenerateImageSourcePython.itkGenerateImageSourceISSRTD44):
    r"""Proxy of C++ itkTransformToStrainFilterTD43DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTransformToStrainFilterTD43DD_Pointer"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD43DD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTransformToStrainFilterTD43DD_Pointer"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD43DD_Clone(self)

    def SetTransformInput(self, _arg):
        r"""
        SetTransformInput(self, _arg)

        Parameters
        ----------
        _arg: itkDataObjectDecoratorTD43 const *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD43DD_SetTransformInput(self, _arg)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD43 const *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD43DD_SetTransform(self, _arg)

    def GetTransformInput(self):
        r"""GetTransformInput(self) -> itkDataObjectDecoratorTD43"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD43DD_GetTransformInput(self)

    def GetTransform(self):
        r"""GetTransform(self) -> itkTransformD43"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD43DD_GetTransform(self)
    StrainFormType_INFINITESIMAL = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD43DD_StrainFormType_INFINITESIMAL
    
    StrainFormType_GREENLAGRANGIAN = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD43DD_StrainFormType_GREENLAGRANGIAN
    
    StrainFormType_EULERIANALMANSI = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD43DD_StrainFormType_EULERIANALMANSI
    

    def SetStrainForm(self, _arg):
        r"""
        SetStrainForm(self, _arg)

        Parameters
        ----------
        _arg: enum itkTransformToStrainFilterTD43DD::StrainFormType

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD43DD_SetStrainForm(self, _arg)

    def GetStrainForm(self):
        r"""GetStrainForm(self) -> itkTransformToStrainFilterTD43DD::StrainFormType"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD43DD_GetStrainForm(self)
    __swig_destroy__ = _itkTransformToStrainFilterPython.delete_itkTransformToStrainFilterTD43DD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformToStrainFilterTD43DD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD43DD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTransformToStrainFilterTD43DD

        Create a new object of the class itkTransformToStrainFilterTD43DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformToStrainFilterTD43DD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformToStrainFilterTD43DD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformToStrainFilterTD43DD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformToStrainFilterTD43DD in _itkTransformToStrainFilterPython:
_itkTransformToStrainFilterPython.itkTransformToStrainFilterTD43DD_swigregister(itkTransformToStrainFilterTD43DD)

def itkTransformToStrainFilterTD44DD_New():
    return itkTransformToStrainFilterTD44DD.New()

class itkTransformToStrainFilterTD44DD(itk.itkGenerateImageSourcePython.itkGenerateImageSourceISSRTD44):
    r"""Proxy of C++ itkTransformToStrainFilterTD44DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTransformToStrainFilterTD44DD_Pointer"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD44DD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTransformToStrainFilterTD44DD_Pointer"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD44DD_Clone(self)

    def SetTransformInput(self, _arg):
        r"""
        SetTransformInput(self, _arg)

        Parameters
        ----------
        _arg: itkDataObjectDecoratorTD44 const *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD44DD_SetTransformInput(self, _arg)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD44 const *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD44DD_SetTransform(self, _arg)

    def GetTransformInput(self):
        r"""GetTransformInput(self) -> itkDataObjectDecoratorTD44"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD44DD_GetTransformInput(self)

    def GetTransform(self):
        r"""GetTransform(self) -> itkTransformD44"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD44DD_GetTransform(self)
    StrainFormType_INFINITESIMAL = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD44DD_StrainFormType_INFINITESIMAL
    
    StrainFormType_GREENLAGRANGIAN = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD44DD_StrainFormType_GREENLAGRANGIAN
    
    StrainFormType_EULERIANALMANSI = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD44DD_StrainFormType_EULERIANALMANSI
    

    def SetStrainForm(self, _arg):
        r"""
        SetStrainForm(self, _arg)

        Parameters
        ----------
        _arg: enum itkTransformToStrainFilterTD44DD::StrainFormType

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD44DD_SetStrainForm(self, _arg)

    def GetStrainForm(self):
        r"""GetStrainForm(self) -> itkTransformToStrainFilterTD44DD::StrainFormType"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD44DD_GetStrainForm(self)
    __swig_destroy__ = _itkTransformToStrainFilterPython.delete_itkTransformToStrainFilterTD44DD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformToStrainFilterTD44DD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTD44DD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTransformToStrainFilterTD44DD

        Create a new object of the class itkTransformToStrainFilterTD44DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformToStrainFilterTD44DD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformToStrainFilterTD44DD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformToStrainFilterTD44DD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformToStrainFilterTD44DD in _itkTransformToStrainFilterPython:
_itkTransformToStrainFilterPython.itkTransformToStrainFilterTD44DD_swigregister(itkTransformToStrainFilterTD44DD)

def itkTransformToStrainFilterTF22FF_New():
    return itkTransformToStrainFilterTF22FF.New()

class itkTransformToStrainFilterTF22FF(itk.itkGenerateImageSourcePython.itkGenerateImageSourceISSRTF22):
    r"""Proxy of C++ itkTransformToStrainFilterTF22FF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTransformToStrainFilterTF22FF_Pointer"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF22FF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTransformToStrainFilterTF22FF_Pointer"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF22FF_Clone(self)

    def SetTransformInput(self, _arg):
        r"""
        SetTransformInput(self, _arg)

        Parameters
        ----------
        _arg: itkDataObjectDecoratorTF22 const *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF22FF_SetTransformInput(self, _arg)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformF22 const *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF22FF_SetTransform(self, _arg)

    def GetTransformInput(self):
        r"""GetTransformInput(self) -> itkDataObjectDecoratorTF22"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF22FF_GetTransformInput(self)

    def GetTransform(self):
        r"""GetTransform(self) -> itkTransformF22"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF22FF_GetTransform(self)
    StrainFormType_INFINITESIMAL = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF22FF_StrainFormType_INFINITESIMAL
    
    StrainFormType_GREENLAGRANGIAN = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF22FF_StrainFormType_GREENLAGRANGIAN
    
    StrainFormType_EULERIANALMANSI = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF22FF_StrainFormType_EULERIANALMANSI
    

    def SetStrainForm(self, _arg):
        r"""
        SetStrainForm(self, _arg)

        Parameters
        ----------
        _arg: enum itkTransformToStrainFilterTF22FF::StrainFormType

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF22FF_SetStrainForm(self, _arg)

    def GetStrainForm(self):
        r"""GetStrainForm(self) -> itkTransformToStrainFilterTF22FF::StrainFormType"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF22FF_GetStrainForm(self)
    __swig_destroy__ = _itkTransformToStrainFilterPython.delete_itkTransformToStrainFilterTF22FF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformToStrainFilterTF22FF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF22FF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTransformToStrainFilterTF22FF

        Create a new object of the class itkTransformToStrainFilterTF22FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformToStrainFilterTF22FF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformToStrainFilterTF22FF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformToStrainFilterTF22FF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformToStrainFilterTF22FF in _itkTransformToStrainFilterPython:
_itkTransformToStrainFilterPython.itkTransformToStrainFilterTF22FF_swigregister(itkTransformToStrainFilterTF22FF)

def itkTransformToStrainFilterTF23FF_New():
    return itkTransformToStrainFilterTF23FF.New()

class itkTransformToStrainFilterTF23FF(itk.itkGenerateImageSourcePython.itkGenerateImageSourceISSRTF22):
    r"""Proxy of C++ itkTransformToStrainFilterTF23FF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTransformToStrainFilterTF23FF_Pointer"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF23FF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTransformToStrainFilterTF23FF_Pointer"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF23FF_Clone(self)

    def SetTransformInput(self, _arg):
        r"""
        SetTransformInput(self, _arg)

        Parameters
        ----------
        _arg: itkDataObjectDecoratorTF23 const *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF23FF_SetTransformInput(self, _arg)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformF23 const *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF23FF_SetTransform(self, _arg)

    def GetTransformInput(self):
        r"""GetTransformInput(self) -> itkDataObjectDecoratorTF23"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF23FF_GetTransformInput(self)

    def GetTransform(self):
        r"""GetTransform(self) -> itkTransformF23"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF23FF_GetTransform(self)
    StrainFormType_INFINITESIMAL = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF23FF_StrainFormType_INFINITESIMAL
    
    StrainFormType_GREENLAGRANGIAN = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF23FF_StrainFormType_GREENLAGRANGIAN
    
    StrainFormType_EULERIANALMANSI = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF23FF_StrainFormType_EULERIANALMANSI
    

    def SetStrainForm(self, _arg):
        r"""
        SetStrainForm(self, _arg)

        Parameters
        ----------
        _arg: enum itkTransformToStrainFilterTF23FF::StrainFormType

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF23FF_SetStrainForm(self, _arg)

    def GetStrainForm(self):
        r"""GetStrainForm(self) -> itkTransformToStrainFilterTF23FF::StrainFormType"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF23FF_GetStrainForm(self)
    __swig_destroy__ = _itkTransformToStrainFilterPython.delete_itkTransformToStrainFilterTF23FF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformToStrainFilterTF23FF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF23FF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTransformToStrainFilterTF23FF

        Create a new object of the class itkTransformToStrainFilterTF23FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformToStrainFilterTF23FF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformToStrainFilterTF23FF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformToStrainFilterTF23FF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformToStrainFilterTF23FF in _itkTransformToStrainFilterPython:
_itkTransformToStrainFilterPython.itkTransformToStrainFilterTF23FF_swigregister(itkTransformToStrainFilterTF23FF)

def itkTransformToStrainFilterTF24FF_New():
    return itkTransformToStrainFilterTF24FF.New()

class itkTransformToStrainFilterTF24FF(itk.itkGenerateImageSourcePython.itkGenerateImageSourceISSRTF22):
    r"""Proxy of C++ itkTransformToStrainFilterTF24FF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTransformToStrainFilterTF24FF_Pointer"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF24FF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTransformToStrainFilterTF24FF_Pointer"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF24FF_Clone(self)

    def SetTransformInput(self, _arg):
        r"""
        SetTransformInput(self, _arg)

        Parameters
        ----------
        _arg: itkDataObjectDecoratorTF24 const *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF24FF_SetTransformInput(self, _arg)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformF24 const *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF24FF_SetTransform(self, _arg)

    def GetTransformInput(self):
        r"""GetTransformInput(self) -> itkDataObjectDecoratorTF24"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF24FF_GetTransformInput(self)

    def GetTransform(self):
        r"""GetTransform(self) -> itkTransformF24"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF24FF_GetTransform(self)
    StrainFormType_INFINITESIMAL = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF24FF_StrainFormType_INFINITESIMAL
    
    StrainFormType_GREENLAGRANGIAN = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF24FF_StrainFormType_GREENLAGRANGIAN
    
    StrainFormType_EULERIANALMANSI = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF24FF_StrainFormType_EULERIANALMANSI
    

    def SetStrainForm(self, _arg):
        r"""
        SetStrainForm(self, _arg)

        Parameters
        ----------
        _arg: enum itkTransformToStrainFilterTF24FF::StrainFormType

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF24FF_SetStrainForm(self, _arg)

    def GetStrainForm(self):
        r"""GetStrainForm(self) -> itkTransformToStrainFilterTF24FF::StrainFormType"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF24FF_GetStrainForm(self)
    __swig_destroy__ = _itkTransformToStrainFilterPython.delete_itkTransformToStrainFilterTF24FF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformToStrainFilterTF24FF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF24FF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTransformToStrainFilterTF24FF

        Create a new object of the class itkTransformToStrainFilterTF24FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformToStrainFilterTF24FF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformToStrainFilterTF24FF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformToStrainFilterTF24FF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformToStrainFilterTF24FF in _itkTransformToStrainFilterPython:
_itkTransformToStrainFilterPython.itkTransformToStrainFilterTF24FF_swigregister(itkTransformToStrainFilterTF24FF)

def itkTransformToStrainFilterTF32FF_New():
    return itkTransformToStrainFilterTF32FF.New()

class itkTransformToStrainFilterTF32FF(itk.itkGenerateImageSourcePython.itkGenerateImageSourceISSRTF33):
    r"""Proxy of C++ itkTransformToStrainFilterTF32FF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTransformToStrainFilterTF32FF_Pointer"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF32FF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTransformToStrainFilterTF32FF_Pointer"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF32FF_Clone(self)

    def SetTransformInput(self, _arg):
        r"""
        SetTransformInput(self, _arg)

        Parameters
        ----------
        _arg: itkDataObjectDecoratorTF32 const *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF32FF_SetTransformInput(self, _arg)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformF32 const *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF32FF_SetTransform(self, _arg)

    def GetTransformInput(self):
        r"""GetTransformInput(self) -> itkDataObjectDecoratorTF32"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF32FF_GetTransformInput(self)

    def GetTransform(self):
        r"""GetTransform(self) -> itkTransformF32"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF32FF_GetTransform(self)
    StrainFormType_INFINITESIMAL = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF32FF_StrainFormType_INFINITESIMAL
    
    StrainFormType_GREENLAGRANGIAN = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF32FF_StrainFormType_GREENLAGRANGIAN
    
    StrainFormType_EULERIANALMANSI = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF32FF_StrainFormType_EULERIANALMANSI
    

    def SetStrainForm(self, _arg):
        r"""
        SetStrainForm(self, _arg)

        Parameters
        ----------
        _arg: enum itkTransformToStrainFilterTF32FF::StrainFormType

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF32FF_SetStrainForm(self, _arg)

    def GetStrainForm(self):
        r"""GetStrainForm(self) -> itkTransformToStrainFilterTF32FF::StrainFormType"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF32FF_GetStrainForm(self)
    __swig_destroy__ = _itkTransformToStrainFilterPython.delete_itkTransformToStrainFilterTF32FF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformToStrainFilterTF32FF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF32FF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTransformToStrainFilterTF32FF

        Create a new object of the class itkTransformToStrainFilterTF32FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformToStrainFilterTF32FF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformToStrainFilterTF32FF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformToStrainFilterTF32FF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformToStrainFilterTF32FF in _itkTransformToStrainFilterPython:
_itkTransformToStrainFilterPython.itkTransformToStrainFilterTF32FF_swigregister(itkTransformToStrainFilterTF32FF)

def itkTransformToStrainFilterTF33FF_New():
    return itkTransformToStrainFilterTF33FF.New()

class itkTransformToStrainFilterTF33FF(itk.itkGenerateImageSourcePython.itkGenerateImageSourceISSRTF33):
    r"""Proxy of C++ itkTransformToStrainFilterTF33FF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTransformToStrainFilterTF33FF_Pointer"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF33FF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTransformToStrainFilterTF33FF_Pointer"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF33FF_Clone(self)

    def SetTransformInput(self, _arg):
        r"""
        SetTransformInput(self, _arg)

        Parameters
        ----------
        _arg: itkDataObjectDecoratorTF33 const *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF33FF_SetTransformInput(self, _arg)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformF33 const *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF33FF_SetTransform(self, _arg)

    def GetTransformInput(self):
        r"""GetTransformInput(self) -> itkDataObjectDecoratorTF33"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF33FF_GetTransformInput(self)

    def GetTransform(self):
        r"""GetTransform(self) -> itkTransformF33"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF33FF_GetTransform(self)
    StrainFormType_INFINITESIMAL = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF33FF_StrainFormType_INFINITESIMAL
    
    StrainFormType_GREENLAGRANGIAN = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF33FF_StrainFormType_GREENLAGRANGIAN
    
    StrainFormType_EULERIANALMANSI = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF33FF_StrainFormType_EULERIANALMANSI
    

    def SetStrainForm(self, _arg):
        r"""
        SetStrainForm(self, _arg)

        Parameters
        ----------
        _arg: enum itkTransformToStrainFilterTF33FF::StrainFormType

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF33FF_SetStrainForm(self, _arg)

    def GetStrainForm(self):
        r"""GetStrainForm(self) -> itkTransformToStrainFilterTF33FF::StrainFormType"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF33FF_GetStrainForm(self)
    __swig_destroy__ = _itkTransformToStrainFilterPython.delete_itkTransformToStrainFilterTF33FF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformToStrainFilterTF33FF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF33FF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTransformToStrainFilterTF33FF

        Create a new object of the class itkTransformToStrainFilterTF33FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformToStrainFilterTF33FF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformToStrainFilterTF33FF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformToStrainFilterTF33FF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformToStrainFilterTF33FF in _itkTransformToStrainFilterPython:
_itkTransformToStrainFilterPython.itkTransformToStrainFilterTF33FF_swigregister(itkTransformToStrainFilterTF33FF)

def itkTransformToStrainFilterTF34FF_New():
    return itkTransformToStrainFilterTF34FF.New()

class itkTransformToStrainFilterTF34FF(itk.itkGenerateImageSourcePython.itkGenerateImageSourceISSRTF33):
    r"""Proxy of C++ itkTransformToStrainFilterTF34FF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTransformToStrainFilterTF34FF_Pointer"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF34FF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTransformToStrainFilterTF34FF_Pointer"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF34FF_Clone(self)

    def SetTransformInput(self, _arg):
        r"""
        SetTransformInput(self, _arg)

        Parameters
        ----------
        _arg: itkDataObjectDecoratorTF34 const *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF34FF_SetTransformInput(self, _arg)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformF34 const *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF34FF_SetTransform(self, _arg)

    def GetTransformInput(self):
        r"""GetTransformInput(self) -> itkDataObjectDecoratorTF34"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF34FF_GetTransformInput(self)

    def GetTransform(self):
        r"""GetTransform(self) -> itkTransformF34"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF34FF_GetTransform(self)
    StrainFormType_INFINITESIMAL = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF34FF_StrainFormType_INFINITESIMAL
    
    StrainFormType_GREENLAGRANGIAN = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF34FF_StrainFormType_GREENLAGRANGIAN
    
    StrainFormType_EULERIANALMANSI = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF34FF_StrainFormType_EULERIANALMANSI
    

    def SetStrainForm(self, _arg):
        r"""
        SetStrainForm(self, _arg)

        Parameters
        ----------
        _arg: enum itkTransformToStrainFilterTF34FF::StrainFormType

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF34FF_SetStrainForm(self, _arg)

    def GetStrainForm(self):
        r"""GetStrainForm(self) -> itkTransformToStrainFilterTF34FF::StrainFormType"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF34FF_GetStrainForm(self)
    __swig_destroy__ = _itkTransformToStrainFilterPython.delete_itkTransformToStrainFilterTF34FF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformToStrainFilterTF34FF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF34FF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTransformToStrainFilterTF34FF

        Create a new object of the class itkTransformToStrainFilterTF34FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformToStrainFilterTF34FF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformToStrainFilterTF34FF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformToStrainFilterTF34FF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformToStrainFilterTF34FF in _itkTransformToStrainFilterPython:
_itkTransformToStrainFilterPython.itkTransformToStrainFilterTF34FF_swigregister(itkTransformToStrainFilterTF34FF)

def itkTransformToStrainFilterTF42FF_New():
    return itkTransformToStrainFilterTF42FF.New()

class itkTransformToStrainFilterTF42FF(itk.itkGenerateImageSourcePython.itkGenerateImageSourceISSRTF44):
    r"""Proxy of C++ itkTransformToStrainFilterTF42FF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTransformToStrainFilterTF42FF_Pointer"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF42FF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTransformToStrainFilterTF42FF_Pointer"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF42FF_Clone(self)

    def SetTransformInput(self, _arg):
        r"""
        SetTransformInput(self, _arg)

        Parameters
        ----------
        _arg: itkDataObjectDecoratorTF42 const *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF42FF_SetTransformInput(self, _arg)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformF42 const *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF42FF_SetTransform(self, _arg)

    def GetTransformInput(self):
        r"""GetTransformInput(self) -> itkDataObjectDecoratorTF42"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF42FF_GetTransformInput(self)

    def GetTransform(self):
        r"""GetTransform(self) -> itkTransformF42"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF42FF_GetTransform(self)
    StrainFormType_INFINITESIMAL = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF42FF_StrainFormType_INFINITESIMAL
    
    StrainFormType_GREENLAGRANGIAN = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF42FF_StrainFormType_GREENLAGRANGIAN
    
    StrainFormType_EULERIANALMANSI = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF42FF_StrainFormType_EULERIANALMANSI
    

    def SetStrainForm(self, _arg):
        r"""
        SetStrainForm(self, _arg)

        Parameters
        ----------
        _arg: enum itkTransformToStrainFilterTF42FF::StrainFormType

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF42FF_SetStrainForm(self, _arg)

    def GetStrainForm(self):
        r"""GetStrainForm(self) -> itkTransformToStrainFilterTF42FF::StrainFormType"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF42FF_GetStrainForm(self)
    __swig_destroy__ = _itkTransformToStrainFilterPython.delete_itkTransformToStrainFilterTF42FF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformToStrainFilterTF42FF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF42FF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTransformToStrainFilterTF42FF

        Create a new object of the class itkTransformToStrainFilterTF42FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformToStrainFilterTF42FF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformToStrainFilterTF42FF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformToStrainFilterTF42FF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformToStrainFilterTF42FF in _itkTransformToStrainFilterPython:
_itkTransformToStrainFilterPython.itkTransformToStrainFilterTF42FF_swigregister(itkTransformToStrainFilterTF42FF)

def itkTransformToStrainFilterTF43FF_New():
    return itkTransformToStrainFilterTF43FF.New()

class itkTransformToStrainFilterTF43FF(itk.itkGenerateImageSourcePython.itkGenerateImageSourceISSRTF44):
    r"""Proxy of C++ itkTransformToStrainFilterTF43FF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTransformToStrainFilterTF43FF_Pointer"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF43FF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTransformToStrainFilterTF43FF_Pointer"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF43FF_Clone(self)

    def SetTransformInput(self, _arg):
        r"""
        SetTransformInput(self, _arg)

        Parameters
        ----------
        _arg: itkDataObjectDecoratorTF43 const *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF43FF_SetTransformInput(self, _arg)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformF43 const *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF43FF_SetTransform(self, _arg)

    def GetTransformInput(self):
        r"""GetTransformInput(self) -> itkDataObjectDecoratorTF43"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF43FF_GetTransformInput(self)

    def GetTransform(self):
        r"""GetTransform(self) -> itkTransformF43"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF43FF_GetTransform(self)
    StrainFormType_INFINITESIMAL = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF43FF_StrainFormType_INFINITESIMAL
    
    StrainFormType_GREENLAGRANGIAN = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF43FF_StrainFormType_GREENLAGRANGIAN
    
    StrainFormType_EULERIANALMANSI = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF43FF_StrainFormType_EULERIANALMANSI
    

    def SetStrainForm(self, _arg):
        r"""
        SetStrainForm(self, _arg)

        Parameters
        ----------
        _arg: enum itkTransformToStrainFilterTF43FF::StrainFormType

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF43FF_SetStrainForm(self, _arg)

    def GetStrainForm(self):
        r"""GetStrainForm(self) -> itkTransformToStrainFilterTF43FF::StrainFormType"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF43FF_GetStrainForm(self)
    __swig_destroy__ = _itkTransformToStrainFilterPython.delete_itkTransformToStrainFilterTF43FF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformToStrainFilterTF43FF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF43FF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTransformToStrainFilterTF43FF

        Create a new object of the class itkTransformToStrainFilterTF43FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformToStrainFilterTF43FF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformToStrainFilterTF43FF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformToStrainFilterTF43FF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformToStrainFilterTF43FF in _itkTransformToStrainFilterPython:
_itkTransformToStrainFilterPython.itkTransformToStrainFilterTF43FF_swigregister(itkTransformToStrainFilterTF43FF)

def itkTransformToStrainFilterTF44FF_New():
    return itkTransformToStrainFilterTF44FF.New()

class itkTransformToStrainFilterTF44FF(itk.itkGenerateImageSourcePython.itkGenerateImageSourceISSRTF44):
    r"""Proxy of C++ itkTransformToStrainFilterTF44FF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTransformToStrainFilterTF44FF_Pointer"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF44FF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTransformToStrainFilterTF44FF_Pointer"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF44FF_Clone(self)

    def SetTransformInput(self, _arg):
        r"""
        SetTransformInput(self, _arg)

        Parameters
        ----------
        _arg: itkDataObjectDecoratorTF44 const *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF44FF_SetTransformInput(self, _arg)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformF44 const *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF44FF_SetTransform(self, _arg)

    def GetTransformInput(self):
        r"""GetTransformInput(self) -> itkDataObjectDecoratorTF44"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF44FF_GetTransformInput(self)

    def GetTransform(self):
        r"""GetTransform(self) -> itkTransformF44"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF44FF_GetTransform(self)
    StrainFormType_INFINITESIMAL = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF44FF_StrainFormType_INFINITESIMAL
    
    StrainFormType_GREENLAGRANGIAN = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF44FF_StrainFormType_GREENLAGRANGIAN
    
    StrainFormType_EULERIANALMANSI = _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF44FF_StrainFormType_EULERIANALMANSI
    

    def SetStrainForm(self, _arg):
        r"""
        SetStrainForm(self, _arg)

        Parameters
        ----------
        _arg: enum itkTransformToStrainFilterTF44FF::StrainFormType

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF44FF_SetStrainForm(self, _arg)

    def GetStrainForm(self):
        r"""GetStrainForm(self) -> itkTransformToStrainFilterTF44FF::StrainFormType"""
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF44FF_GetStrainForm(self)
    __swig_destroy__ = _itkTransformToStrainFilterPython.delete_itkTransformToStrainFilterTF44FF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformToStrainFilterTF44FF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformToStrainFilterPython.itkTransformToStrainFilterTF44FF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTransformToStrainFilterTF44FF

        Create a new object of the class itkTransformToStrainFilterTF44FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformToStrainFilterTF44FF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformToStrainFilterTF44FF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformToStrainFilterTF44FF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformToStrainFilterTF44FF in _itkTransformToStrainFilterPython:
_itkTransformToStrainFilterPython.itkTransformToStrainFilterTF44FF_swigregister(itkTransformToStrainFilterTF44FF)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def transform_to_strain_filter(*args,  transform_input=..., transform: itkt.Transform=..., strain_form=..., use_reference_image: bool=..., size: Sequence[int]=..., spacing: Sequence[float]=..., origin: Sequence[float]=..., direction=..., start_index: Sequence[int]=..., output_parameters_from_image: itkt.ImageBase=..., reference_image: itkt.ImageBase=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for TransformToStrainFilter"""
    import itk

    kwarg_typehints = { 'transform_input':transform_input,'transform':transform,'strain_form':strain_form,'use_reference_image':use_reference_image,'size':size,'spacing':spacing,'origin':origin,'direction':direction,'start_index':start_index,'output_parameters_from_image':output_parameters_from_image,'reference_image':reference_image }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.TransformToStrainFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def transform_to_strain_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.Strain.TransformToStrainFilter
    transform_to_strain_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    transform_to_strain_filter.__doc__ = filter_object.__doc__



