# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _StrainPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkStrainImageFilterPython
else:
    import _itkStrainImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageRegionPython
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterBPython
import itk.itkImageToImageFilterAPython
class itkImageToImageFilterIVD22ISSRTD22(itk.itkImageSourcePython.itkImageSourceISSRTD22):
    r"""Proxy of C++ itkImageToImageFilterIVD22ISSRTD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVD22 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVD22 const *

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVD22ISSRTD22_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVD22
        GetInput(self, idx) -> itkImageVD22

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVD22ISSRTD22_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVD22 const *

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVD22ISSRTD22_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkStrainImageFilterPython.itkImageToImageFilterIVD22ISSRTD22_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVD22 const *

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVD22ISSRTD22_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkStrainImageFilterPython.itkImageToImageFilterIVD22ISSRTD22_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVD22ISSRTD22_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkStrainImageFilterPython.itkImageToImageFilterIVD22ISSRTD22_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVD22ISSRTD22_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkStrainImageFilterPython.itkImageToImageFilterIVD22ISSRTD22_GetDirectionTolerance(self)
    __swig_destroy__ = _itkStrainImageFilterPython.delete_itkImageToImageFilterIVD22ISSRTD22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVD22ISSRTD22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVD22ISSRTD22_cast(obj)

# Register itkImageToImageFilterIVD22ISSRTD22 in _itkStrainImageFilterPython:
_itkStrainImageFilterPython.itkImageToImageFilterIVD22ISSRTD22_swigregister(itkImageToImageFilterIVD22ISSRTD22)
class itkImageToImageFilterIVD33ISSRTD33(itk.itkImageSourcePython.itkImageSourceISSRTD33):
    r"""Proxy of C++ itkImageToImageFilterIVD33ISSRTD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVD33 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVD33 const *

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVD33ISSRTD33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVD33
        GetInput(self, idx) -> itkImageVD33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVD33ISSRTD33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVD33 const *

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVD33ISSRTD33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkStrainImageFilterPython.itkImageToImageFilterIVD33ISSRTD33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVD33 const *

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVD33ISSRTD33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkStrainImageFilterPython.itkImageToImageFilterIVD33ISSRTD33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVD33ISSRTD33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkStrainImageFilterPython.itkImageToImageFilterIVD33ISSRTD33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVD33ISSRTD33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkStrainImageFilterPython.itkImageToImageFilterIVD33ISSRTD33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkStrainImageFilterPython.delete_itkImageToImageFilterIVD33ISSRTD33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVD33ISSRTD33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVD33ISSRTD33_cast(obj)

# Register itkImageToImageFilterIVD33ISSRTD33 in _itkStrainImageFilterPython:
_itkStrainImageFilterPython.itkImageToImageFilterIVD33ISSRTD33_swigregister(itkImageToImageFilterIVD33ISSRTD33)
class itkImageToImageFilterIVD44ISSRTD44(itk.itkImageSourcePython.itkImageSourceISSRTD44):
    r"""Proxy of C++ itkImageToImageFilterIVD44ISSRTD44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVD44 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVD44 const *

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVD44ISSRTD44_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVD44
        GetInput(self, idx) -> itkImageVD44

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVD44ISSRTD44_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVD44 const *

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVD44ISSRTD44_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkStrainImageFilterPython.itkImageToImageFilterIVD44ISSRTD44_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVD44 const *

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVD44ISSRTD44_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkStrainImageFilterPython.itkImageToImageFilterIVD44ISSRTD44_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVD44ISSRTD44_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkStrainImageFilterPython.itkImageToImageFilterIVD44ISSRTD44_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVD44ISSRTD44_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkStrainImageFilterPython.itkImageToImageFilterIVD44ISSRTD44_GetDirectionTolerance(self)
    __swig_destroy__ = _itkStrainImageFilterPython.delete_itkImageToImageFilterIVD44ISSRTD44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVD44ISSRTD44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVD44ISSRTD44_cast(obj)

# Register itkImageToImageFilterIVD44ISSRTD44 in _itkStrainImageFilterPython:
_itkStrainImageFilterPython.itkImageToImageFilterIVD44ISSRTD44_swigregister(itkImageToImageFilterIVD44ISSRTD44)
class itkImageToImageFilterIVF22ISSRTF22(itk.itkImageSourcePython.itkImageSourceISSRTF22):
    r"""Proxy of C++ itkImageToImageFilterIVF22ISSRTF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF22 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF22 const *

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVF22ISSRTF22_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF22
        GetInput(self, idx) -> itkImageVF22

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVF22ISSRTF22_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF22 const *

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVF22ISSRTF22_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkStrainImageFilterPython.itkImageToImageFilterIVF22ISSRTF22_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF22 const *

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVF22ISSRTF22_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkStrainImageFilterPython.itkImageToImageFilterIVF22ISSRTF22_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVF22ISSRTF22_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkStrainImageFilterPython.itkImageToImageFilterIVF22ISSRTF22_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVF22ISSRTF22_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkStrainImageFilterPython.itkImageToImageFilterIVF22ISSRTF22_GetDirectionTolerance(self)
    __swig_destroy__ = _itkStrainImageFilterPython.delete_itkImageToImageFilterIVF22ISSRTF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF22ISSRTF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVF22ISSRTF22_cast(obj)

# Register itkImageToImageFilterIVF22ISSRTF22 in _itkStrainImageFilterPython:
_itkStrainImageFilterPython.itkImageToImageFilterIVF22ISSRTF22_swigregister(itkImageToImageFilterIVF22ISSRTF22)
class itkImageToImageFilterIVF33ISSRTF33(itk.itkImageSourcePython.itkImageSourceISSRTF33):
    r"""Proxy of C++ itkImageToImageFilterIVF33ISSRTF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF33 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF33 const *

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVF33ISSRTF33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF33
        GetInput(self, idx) -> itkImageVF33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVF33ISSRTF33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF33 const *

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVF33ISSRTF33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkStrainImageFilterPython.itkImageToImageFilterIVF33ISSRTF33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF33 const *

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVF33ISSRTF33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkStrainImageFilterPython.itkImageToImageFilterIVF33ISSRTF33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVF33ISSRTF33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkStrainImageFilterPython.itkImageToImageFilterIVF33ISSRTF33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVF33ISSRTF33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkStrainImageFilterPython.itkImageToImageFilterIVF33ISSRTF33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkStrainImageFilterPython.delete_itkImageToImageFilterIVF33ISSRTF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF33ISSRTF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVF33ISSRTF33_cast(obj)

# Register itkImageToImageFilterIVF33ISSRTF33 in _itkStrainImageFilterPython:
_itkStrainImageFilterPython.itkImageToImageFilterIVF33ISSRTF33_swigregister(itkImageToImageFilterIVF33ISSRTF33)
class itkImageToImageFilterIVF44ISSRTF44(itk.itkImageSourcePython.itkImageSourceISSRTF44):
    r"""Proxy of C++ itkImageToImageFilterIVF44ISSRTF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF44 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF44 const *

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVF44ISSRTF44_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF44
        GetInput(self, idx) -> itkImageVF44

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVF44ISSRTF44_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF44 const *

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVF44ISSRTF44_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkStrainImageFilterPython.itkImageToImageFilterIVF44ISSRTF44_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF44 const *

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVF44ISSRTF44_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkStrainImageFilterPython.itkImageToImageFilterIVF44ISSRTF44_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVF44ISSRTF44_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkStrainImageFilterPython.itkImageToImageFilterIVF44ISSRTF44_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVF44ISSRTF44_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkStrainImageFilterPython.itkImageToImageFilterIVF44ISSRTF44_GetDirectionTolerance(self)
    __swig_destroy__ = _itkStrainImageFilterPython.delete_itkImageToImageFilterIVF44ISSRTF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF44ISSRTF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkStrainImageFilterPython.itkImageToImageFilterIVF44ISSRTF44_cast(obj)

# Register itkImageToImageFilterIVF44ISSRTF44 in _itkStrainImageFilterPython:
_itkStrainImageFilterPython.itkImageToImageFilterIVF44ISSRTF44_swigregister(itkImageToImageFilterIVF44ISSRTF44)

def itkStrainImageFilterIVD22DD_New():
    return itkStrainImageFilterIVD22DD.New()

class itkStrainImageFilterIVD22DD(itkImageToImageFilterIVD22ISSRTD22):
    r"""Proxy of C++ itkStrainImageFilterIVD22DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkStrainImageFilterIVD22DD_Pointer"""
        return _itkStrainImageFilterPython.itkStrainImageFilterIVD22DD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkStrainImageFilterIVD22DD_Pointer"""
        return _itkStrainImageFilterPython.itkStrainImageFilterIVD22DD_Clone(self)

    def SetGradientFilter(self, _arg):
        r"""
        SetGradientFilter(self, _arg)

        Parameters
        ----------
        _arg: itkImageToImageFilterID2ICVD22 *

        """
        return _itkStrainImageFilterPython.itkStrainImageFilterIVD22DD_SetGradientFilter(self, _arg)

    def GetGradientFilter(self):
        r"""GetGradientFilter(self) -> itkImageToImageFilterID2ICVD22"""
        return _itkStrainImageFilterPython.itkStrainImageFilterIVD22DD_GetGradientFilter(self)

    def SetVectorGradientFilter(self, _arg):
        r"""
        SetVectorGradientFilter(self, _arg)

        Parameters
        ----------
        _arg: itk::ImageToImageFilter< itk::Image< itk::Vector< double,2 > >,itk::Image< itk::CovariantVector< double,2 > > > *

        """
        return _itkStrainImageFilterPython.itkStrainImageFilterIVD22DD_SetVectorGradientFilter(self, _arg)

    def GetVectorGradientFilter(self):
        r"""GetVectorGradientFilter(self) -> itk::ImageToImageFilter< itk::Image< itk::Vector< double,2 > >,itk::Image< itk::CovariantVector< double,2 > > > const *"""
        return _itkStrainImageFilterPython.itkStrainImageFilterIVD22DD_GetVectorGradientFilter(self)
    StrainFormType_INFINITESIMAL = _itkStrainImageFilterPython.itkStrainImageFilterIVD22DD_StrainFormType_INFINITESIMAL
    
    StrainFormType_GREENLAGRANGIAN = _itkStrainImageFilterPython.itkStrainImageFilterIVD22DD_StrainFormType_GREENLAGRANGIAN
    
    StrainFormType_EULERIANALMANSI = _itkStrainImageFilterPython.itkStrainImageFilterIVD22DD_StrainFormType_EULERIANALMANSI
    

    def SetStrainForm(self, _arg):
        r"""
        SetStrainForm(self, _arg)

        Parameters
        ----------
        _arg: enum itkStrainImageFilterIVD22DD::StrainFormType

        """
        return _itkStrainImageFilterPython.itkStrainImageFilterIVD22DD_SetStrainForm(self, _arg)

    def GetStrainForm(self):
        r"""GetStrainForm(self) -> itkStrainImageFilterIVD22DD::StrainFormType"""
        return _itkStrainImageFilterPython.itkStrainImageFilterIVD22DD_GetStrainForm(self)
    __swig_destroy__ = _itkStrainImageFilterPython.delete_itkStrainImageFilterIVD22DD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkStrainImageFilterIVD22DD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkStrainImageFilterPython.itkStrainImageFilterIVD22DD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkStrainImageFilterIVD22DD

        Create a new object of the class itkStrainImageFilterIVD22DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStrainImageFilterIVD22DD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStrainImageFilterIVD22DD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStrainImageFilterIVD22DD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStrainImageFilterIVD22DD in _itkStrainImageFilterPython:
_itkStrainImageFilterPython.itkStrainImageFilterIVD22DD_swigregister(itkStrainImageFilterIVD22DD)

def itkStrainImageFilterIVD33DD_New():
    return itkStrainImageFilterIVD33DD.New()

class itkStrainImageFilterIVD33DD(itkImageToImageFilterIVD33ISSRTD33):
    r"""Proxy of C++ itkStrainImageFilterIVD33DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkStrainImageFilterIVD33DD_Pointer"""
        return _itkStrainImageFilterPython.itkStrainImageFilterIVD33DD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkStrainImageFilterIVD33DD_Pointer"""
        return _itkStrainImageFilterPython.itkStrainImageFilterIVD33DD_Clone(self)

    def SetGradientFilter(self, _arg):
        r"""
        SetGradientFilter(self, _arg)

        Parameters
        ----------
        _arg: itkImageToImageFilterID3ICVD33 *

        """
        return _itkStrainImageFilterPython.itkStrainImageFilterIVD33DD_SetGradientFilter(self, _arg)

    def GetGradientFilter(self):
        r"""GetGradientFilter(self) -> itkImageToImageFilterID3ICVD33"""
        return _itkStrainImageFilterPython.itkStrainImageFilterIVD33DD_GetGradientFilter(self)

    def SetVectorGradientFilter(self, _arg):
        r"""
        SetVectorGradientFilter(self, _arg)

        Parameters
        ----------
        _arg: itk::ImageToImageFilter< itk::Image< itk::Vector< double >,3 >,itk::Image< itk::CovariantVector< double >,3 > > *

        """
        return _itkStrainImageFilterPython.itkStrainImageFilterIVD33DD_SetVectorGradientFilter(self, _arg)

    def GetVectorGradientFilter(self):
        r"""GetVectorGradientFilter(self) -> itk::ImageToImageFilter< itk::Image< itk::Vector< double >,3 >,itk::Image< itk::CovariantVector< double >,3 > > const *"""
        return _itkStrainImageFilterPython.itkStrainImageFilterIVD33DD_GetVectorGradientFilter(self)
    StrainFormType_INFINITESIMAL = _itkStrainImageFilterPython.itkStrainImageFilterIVD33DD_StrainFormType_INFINITESIMAL
    
    StrainFormType_GREENLAGRANGIAN = _itkStrainImageFilterPython.itkStrainImageFilterIVD33DD_StrainFormType_GREENLAGRANGIAN
    
    StrainFormType_EULERIANALMANSI = _itkStrainImageFilterPython.itkStrainImageFilterIVD33DD_StrainFormType_EULERIANALMANSI
    

    def SetStrainForm(self, _arg):
        r"""
        SetStrainForm(self, _arg)

        Parameters
        ----------
        _arg: enum itkStrainImageFilterIVD33DD::StrainFormType

        """
        return _itkStrainImageFilterPython.itkStrainImageFilterIVD33DD_SetStrainForm(self, _arg)

    def GetStrainForm(self):
        r"""GetStrainForm(self) -> itkStrainImageFilterIVD33DD::StrainFormType"""
        return _itkStrainImageFilterPython.itkStrainImageFilterIVD33DD_GetStrainForm(self)
    __swig_destroy__ = _itkStrainImageFilterPython.delete_itkStrainImageFilterIVD33DD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkStrainImageFilterIVD33DD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkStrainImageFilterPython.itkStrainImageFilterIVD33DD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkStrainImageFilterIVD33DD

        Create a new object of the class itkStrainImageFilterIVD33DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStrainImageFilterIVD33DD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStrainImageFilterIVD33DD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStrainImageFilterIVD33DD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStrainImageFilterIVD33DD in _itkStrainImageFilterPython:
_itkStrainImageFilterPython.itkStrainImageFilterIVD33DD_swigregister(itkStrainImageFilterIVD33DD)

def itkStrainImageFilterIVD44DD_New():
    return itkStrainImageFilterIVD44DD.New()

class itkStrainImageFilterIVD44DD(itkImageToImageFilterIVD44ISSRTD44):
    r"""Proxy of C++ itkStrainImageFilterIVD44DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkStrainImageFilterIVD44DD_Pointer"""
        return _itkStrainImageFilterPython.itkStrainImageFilterIVD44DD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkStrainImageFilterIVD44DD_Pointer"""
        return _itkStrainImageFilterPython.itkStrainImageFilterIVD44DD_Clone(self)

    def SetGradientFilter(self, _arg):
        r"""
        SetGradientFilter(self, _arg)

        Parameters
        ----------
        _arg: itkImageToImageFilterID4ICVD44 *

        """
        return _itkStrainImageFilterPython.itkStrainImageFilterIVD44DD_SetGradientFilter(self, _arg)

    def GetGradientFilter(self):
        r"""GetGradientFilter(self) -> itkImageToImageFilterID4ICVD44"""
        return _itkStrainImageFilterPython.itkStrainImageFilterIVD44DD_GetGradientFilter(self)

    def SetVectorGradientFilter(self, _arg):
        r"""
        SetVectorGradientFilter(self, _arg)

        Parameters
        ----------
        _arg: itk::ImageToImageFilter< itk::Image< itk::Vector< double,4 >,4 >,itk::Image< itk::CovariantVector< double,4 >,4 > > *

        """
        return _itkStrainImageFilterPython.itkStrainImageFilterIVD44DD_SetVectorGradientFilter(self, _arg)

    def GetVectorGradientFilter(self):
        r"""GetVectorGradientFilter(self) -> itk::ImageToImageFilter< itk::Image< itk::Vector< double,4 >,4 >,itk::Image< itk::CovariantVector< double,4 >,4 > > const *"""
        return _itkStrainImageFilterPython.itkStrainImageFilterIVD44DD_GetVectorGradientFilter(self)
    StrainFormType_INFINITESIMAL = _itkStrainImageFilterPython.itkStrainImageFilterIVD44DD_StrainFormType_INFINITESIMAL
    
    StrainFormType_GREENLAGRANGIAN = _itkStrainImageFilterPython.itkStrainImageFilterIVD44DD_StrainFormType_GREENLAGRANGIAN
    
    StrainFormType_EULERIANALMANSI = _itkStrainImageFilterPython.itkStrainImageFilterIVD44DD_StrainFormType_EULERIANALMANSI
    

    def SetStrainForm(self, _arg):
        r"""
        SetStrainForm(self, _arg)

        Parameters
        ----------
        _arg: enum itkStrainImageFilterIVD44DD::StrainFormType

        """
        return _itkStrainImageFilterPython.itkStrainImageFilterIVD44DD_SetStrainForm(self, _arg)

    def GetStrainForm(self):
        r"""GetStrainForm(self) -> itkStrainImageFilterIVD44DD::StrainFormType"""
        return _itkStrainImageFilterPython.itkStrainImageFilterIVD44DD_GetStrainForm(self)
    __swig_destroy__ = _itkStrainImageFilterPython.delete_itkStrainImageFilterIVD44DD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkStrainImageFilterIVD44DD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkStrainImageFilterPython.itkStrainImageFilterIVD44DD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkStrainImageFilterIVD44DD

        Create a new object of the class itkStrainImageFilterIVD44DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStrainImageFilterIVD44DD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStrainImageFilterIVD44DD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStrainImageFilterIVD44DD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStrainImageFilterIVD44DD in _itkStrainImageFilterPython:
_itkStrainImageFilterPython.itkStrainImageFilterIVD44DD_swigregister(itkStrainImageFilterIVD44DD)

def itkStrainImageFilterIVF22FF_New():
    return itkStrainImageFilterIVF22FF.New()

class itkStrainImageFilterIVF22FF(itkImageToImageFilterIVF22ISSRTF22):
    r"""Proxy of C++ itkStrainImageFilterIVF22FF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkStrainImageFilterIVF22FF_Pointer"""
        return _itkStrainImageFilterPython.itkStrainImageFilterIVF22FF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkStrainImageFilterIVF22FF_Pointer"""
        return _itkStrainImageFilterPython.itkStrainImageFilterIVF22FF_Clone(self)

    def SetGradientFilter(self, _arg):
        r"""
        SetGradientFilter(self, _arg)

        Parameters
        ----------
        _arg: itkImageToImageFilterIF2ICVF22 *

        """
        return _itkStrainImageFilterPython.itkStrainImageFilterIVF22FF_SetGradientFilter(self, _arg)

    def GetGradientFilter(self):
        r"""GetGradientFilter(self) -> itkImageToImageFilterIF2ICVF22"""
        return _itkStrainImageFilterPython.itkStrainImageFilterIVF22FF_GetGradientFilter(self)

    def SetVectorGradientFilter(self, _arg):
        r"""
        SetVectorGradientFilter(self, _arg)

        Parameters
        ----------
        _arg: itkImageToImageFilterIVF22ICVF22 *

        """
        return _itkStrainImageFilterPython.itkStrainImageFilterIVF22FF_SetVectorGradientFilter(self, _arg)

    def GetVectorGradientFilter(self):
        r"""GetVectorGradientFilter(self) -> itkImageToImageFilterIVF22ICVF22"""
        return _itkStrainImageFilterPython.itkStrainImageFilterIVF22FF_GetVectorGradientFilter(self)
    StrainFormType_INFINITESIMAL = _itkStrainImageFilterPython.itkStrainImageFilterIVF22FF_StrainFormType_INFINITESIMAL
    
    StrainFormType_GREENLAGRANGIAN = _itkStrainImageFilterPython.itkStrainImageFilterIVF22FF_StrainFormType_GREENLAGRANGIAN
    
    StrainFormType_EULERIANALMANSI = _itkStrainImageFilterPython.itkStrainImageFilterIVF22FF_StrainFormType_EULERIANALMANSI
    

    def SetStrainForm(self, _arg):
        r"""
        SetStrainForm(self, _arg)

        Parameters
        ----------
        _arg: enum itkStrainImageFilterIVF22FF::StrainFormType

        """
        return _itkStrainImageFilterPython.itkStrainImageFilterIVF22FF_SetStrainForm(self, _arg)

    def GetStrainForm(self):
        r"""GetStrainForm(self) -> itkStrainImageFilterIVF22FF::StrainFormType"""
        return _itkStrainImageFilterPython.itkStrainImageFilterIVF22FF_GetStrainForm(self)
    __swig_destroy__ = _itkStrainImageFilterPython.delete_itkStrainImageFilterIVF22FF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkStrainImageFilterIVF22FF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkStrainImageFilterPython.itkStrainImageFilterIVF22FF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkStrainImageFilterIVF22FF

        Create a new object of the class itkStrainImageFilterIVF22FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStrainImageFilterIVF22FF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStrainImageFilterIVF22FF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStrainImageFilterIVF22FF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStrainImageFilterIVF22FF in _itkStrainImageFilterPython:
_itkStrainImageFilterPython.itkStrainImageFilterIVF22FF_swigregister(itkStrainImageFilterIVF22FF)

def itkStrainImageFilterIVF33FF_New():
    return itkStrainImageFilterIVF33FF.New()

class itkStrainImageFilterIVF33FF(itkImageToImageFilterIVF33ISSRTF33):
    r"""Proxy of C++ itkStrainImageFilterIVF33FF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkStrainImageFilterIVF33FF_Pointer"""
        return _itkStrainImageFilterPython.itkStrainImageFilterIVF33FF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkStrainImageFilterIVF33FF_Pointer"""
        return _itkStrainImageFilterPython.itkStrainImageFilterIVF33FF_Clone(self)

    def SetGradientFilter(self, _arg):
        r"""
        SetGradientFilter(self, _arg)

        Parameters
        ----------
        _arg: itkImageToImageFilterIF3ICVF33 *

        """
        return _itkStrainImageFilterPython.itkStrainImageFilterIVF33FF_SetGradientFilter(self, _arg)

    def GetGradientFilter(self):
        r"""GetGradientFilter(self) -> itkImageToImageFilterIF3ICVF33"""
        return _itkStrainImageFilterPython.itkStrainImageFilterIVF33FF_GetGradientFilter(self)

    def SetVectorGradientFilter(self, _arg):
        r"""
        SetVectorGradientFilter(self, _arg)

        Parameters
        ----------
        _arg: itkImageToImageFilterIVF33ICVF33 *

        """
        return _itkStrainImageFilterPython.itkStrainImageFilterIVF33FF_SetVectorGradientFilter(self, _arg)

    def GetVectorGradientFilter(self):
        r"""GetVectorGradientFilter(self) -> itkImageToImageFilterIVF33ICVF33"""
        return _itkStrainImageFilterPython.itkStrainImageFilterIVF33FF_GetVectorGradientFilter(self)
    StrainFormType_INFINITESIMAL = _itkStrainImageFilterPython.itkStrainImageFilterIVF33FF_StrainFormType_INFINITESIMAL
    
    StrainFormType_GREENLAGRANGIAN = _itkStrainImageFilterPython.itkStrainImageFilterIVF33FF_StrainFormType_GREENLAGRANGIAN
    
    StrainFormType_EULERIANALMANSI = _itkStrainImageFilterPython.itkStrainImageFilterIVF33FF_StrainFormType_EULERIANALMANSI
    

    def SetStrainForm(self, _arg):
        r"""
        SetStrainForm(self, _arg)

        Parameters
        ----------
        _arg: enum itkStrainImageFilterIVF33FF::StrainFormType

        """
        return _itkStrainImageFilterPython.itkStrainImageFilterIVF33FF_SetStrainForm(self, _arg)

    def GetStrainForm(self):
        r"""GetStrainForm(self) -> itkStrainImageFilterIVF33FF::StrainFormType"""
        return _itkStrainImageFilterPython.itkStrainImageFilterIVF33FF_GetStrainForm(self)
    __swig_destroy__ = _itkStrainImageFilterPython.delete_itkStrainImageFilterIVF33FF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkStrainImageFilterIVF33FF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkStrainImageFilterPython.itkStrainImageFilterIVF33FF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkStrainImageFilterIVF33FF

        Create a new object of the class itkStrainImageFilterIVF33FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStrainImageFilterIVF33FF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStrainImageFilterIVF33FF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStrainImageFilterIVF33FF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStrainImageFilterIVF33FF in _itkStrainImageFilterPython:
_itkStrainImageFilterPython.itkStrainImageFilterIVF33FF_swigregister(itkStrainImageFilterIVF33FF)

def itkStrainImageFilterIVF44FF_New():
    return itkStrainImageFilterIVF44FF.New()

class itkStrainImageFilterIVF44FF(itkImageToImageFilterIVF44ISSRTF44):
    r"""Proxy of C++ itkStrainImageFilterIVF44FF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkStrainImageFilterIVF44FF_Pointer"""
        return _itkStrainImageFilterPython.itkStrainImageFilterIVF44FF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkStrainImageFilterIVF44FF_Pointer"""
        return _itkStrainImageFilterPython.itkStrainImageFilterIVF44FF_Clone(self)

    def SetGradientFilter(self, _arg):
        r"""
        SetGradientFilter(self, _arg)

        Parameters
        ----------
        _arg: itkImageToImageFilterIF4ICVF44 *

        """
        return _itkStrainImageFilterPython.itkStrainImageFilterIVF44FF_SetGradientFilter(self, _arg)

    def GetGradientFilter(self):
        r"""GetGradientFilter(self) -> itkImageToImageFilterIF4ICVF44"""
        return _itkStrainImageFilterPython.itkStrainImageFilterIVF44FF_GetGradientFilter(self)

    def SetVectorGradientFilter(self, _arg):
        r"""
        SetVectorGradientFilter(self, _arg)

        Parameters
        ----------
        _arg: itkImageToImageFilterIVF44ICVF44 *

        """
        return _itkStrainImageFilterPython.itkStrainImageFilterIVF44FF_SetVectorGradientFilter(self, _arg)

    def GetVectorGradientFilter(self):
        r"""GetVectorGradientFilter(self) -> itkImageToImageFilterIVF44ICVF44"""
        return _itkStrainImageFilterPython.itkStrainImageFilterIVF44FF_GetVectorGradientFilter(self)
    StrainFormType_INFINITESIMAL = _itkStrainImageFilterPython.itkStrainImageFilterIVF44FF_StrainFormType_INFINITESIMAL
    
    StrainFormType_GREENLAGRANGIAN = _itkStrainImageFilterPython.itkStrainImageFilterIVF44FF_StrainFormType_GREENLAGRANGIAN
    
    StrainFormType_EULERIANALMANSI = _itkStrainImageFilterPython.itkStrainImageFilterIVF44FF_StrainFormType_EULERIANALMANSI
    

    def SetStrainForm(self, _arg):
        r"""
        SetStrainForm(self, _arg)

        Parameters
        ----------
        _arg: enum itkStrainImageFilterIVF44FF::StrainFormType

        """
        return _itkStrainImageFilterPython.itkStrainImageFilterIVF44FF_SetStrainForm(self, _arg)

    def GetStrainForm(self):
        r"""GetStrainForm(self) -> itkStrainImageFilterIVF44FF::StrainFormType"""
        return _itkStrainImageFilterPython.itkStrainImageFilterIVF44FF_GetStrainForm(self)
    __swig_destroy__ = _itkStrainImageFilterPython.delete_itkStrainImageFilterIVF44FF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkStrainImageFilterIVF44FF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkStrainImageFilterPython.itkStrainImageFilterIVF44FF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkStrainImageFilterIVF44FF

        Create a new object of the class itkStrainImageFilterIVF44FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStrainImageFilterIVF44FF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStrainImageFilterIVF44FF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStrainImageFilterIVF44FF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStrainImageFilterIVF44FF in _itkStrainImageFilterPython:
_itkStrainImageFilterPython.itkStrainImageFilterIVF44FF_swigregister(itkStrainImageFilterIVF44FF)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def image_to_image_filter(*args: itkt.ImageLike, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ImageToImageFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ImageToImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def image_to_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.Strain.ImageToImageFilter
    image_to_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    image_to_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def strain_image_filter(*args: itkt.ImageLike,  gradient_filter=..., vector_gradient_filter=..., strain_form=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for StrainImageFilter"""
    import itk

    kwarg_typehints = { 'gradient_filter':gradient_filter,'vector_gradient_filter':vector_gradient_filter,'strain_form':strain_form }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.StrainImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def strain_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.Strain.StrainImageFilter
    strain_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    strain_image_filter.__doc__ = filter_object.__doc__



