def infolist(my_list=[1, 2, 3, 'Элемент']):
    start_list = [7, 8, 9] or list()
    x = 'Элемент'
    i = 0
    L = [4, 5, 6]

    my_list.append(x)	#Добавляет элемент в конец списка
    my_list.extend(L)	#Расширяет список my_list, добавляя в конец все элементы списка L
    my_list.insert(i, x)	#Вставляет на i-ый элемент значение x
    my_list.remove(x)	#Удаляет первый элемент в списке, имеющий значение x. ValueError, если такого элемента не существует
    my_list.pop(i)	#Удаляет i-ый элемент и возвращает его. Если индекс не указан, удаляется последний элемент
    my_list.index(x,)	#Возвращает положение первого элемента со значением x (при этом поиск ведется от start до end)
    my_list.count(x)	#Возвращает количество элементов со значением x
    my_list.sort()	#Сортирует список на основе функции
    my_list.reverse()	#Разворачивает список
    my_list.copy()	#Поверхностная копия списка
    my_list.clear()	#Очищает список

def infotuple():
    start_list = (1, 2, 3) or tuple()
    start_list[0] #1
    #Все то же что и у списка, но меньше, так как не изменяем
    start_list.count()
    start_list.index()


def infodict(my_dict={'Ключь':'Значение', 'Ключь 2':'Значение 2',}):
    start_dict = {'Ключь':'Значение', 'Ключь 2':'Значение 2',} or my_dict()
    print(start_dict['Ключь']) #'Значение'
    my_dict['Ключь 3'] = 'Значение 3' #Так то же можно наполнять, что бы не париться с скобочками



    #Методы
    my_dict.clear() #- очищает словарь.

    my_dict.copy() #- возвращает копию словаря.

    my_dict.get('Ключь') #- возвращает значение ключа, но если его нет, не бросает исключение, а возвращает default (по умолчанию None).

    my_dict.items() #- возвращает пары (ключ, значение).

    my_dict.keys() #- возвращает ключи в словаре.

    my_dict.pop('Ключь') #- удаляет ключ и возвращает значение. Если ключа нет, возвращает default (по умолчанию бросает исключение).

    my_dict.popitem() #- удаляет и возвращает пару (ключ, значение). Если словарь пуст, бросает исключение KeyError. Помните, что словари неупорядочены.

    my_dict.setdefault('Ключь') #- возвращает значение ключа, но если его нет, не бросает исключение, а создает ключ со значением default (по умолчанию None).

    my_dict.update('Ключь') #- обновляет словарь, добавляя пары (ключ, значение) из other. Существующие ключи перезаписываются. Возвращает None (не новый словарь!).

    my_dict.values() # - возвращает значения в словаре.

