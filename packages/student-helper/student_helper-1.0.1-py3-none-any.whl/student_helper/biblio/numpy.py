# атрибуты для массивов darray:

# ndarray.ndim - число измерений (чаще их называют "оси") массива.
#
# ndarray.shape - размеры массива, его форма. Это кортеж натуральных чисел,
# показывающий длину массива по каждой оси. Для матрицы из n строк и m столбов, shape будет (n,m).
# Число элементов кортежа shape равно ndim.
#
# ndarray.size - количество элементов массива.
# Очевидно, равно произведению всех элементов атрибута shape.
#
# ndarray.dtype - объект, описывающий тип элементов массива.
# Можно определить dtype, используя стандартные типы данных Python.
# NumPy здесь предоставляет целый букет возможностей, как встроенных,
# например: bool_, character, int8, int16, int32, int64, float8, float16, float32, float64,
# complex64, object_, так и возможность определить собственные типы данных, в том числе и составные.
#
# ndarray.itemsize - размер каждого элемента массива в байтах.
#
# ndarray.data - буфер, содержащий фактические элементы массива.
# Обычно не нужно использовать этот атрибут,
# так как обращаться к элементам массива проще всего с помощью индексов.

# создание массива:
# import numpy as np
# a = np.array([1, 2, 3])
# arr5 = np.linspace(0, 2, 50) #Массив 50 числе от 0 до 2




# Создание специальных матриц
# np.zeros((2,3))
# array([[0., 0., 0.],
#        [0., 0., 0.]])


# np.ones((3,3))
# array([[1., 1., 1.],
#        [1., 1., 1.],
#        [1., 1., 1.]])


# np.eye(5)
# array([[1., 0., 0., 0., 0.],
#        [0., 1., 0., 0., 0.],
#        [0., 0., 1., 0., 0.],
#        [0., 0., 0., 1., 0.],
#        [0., 0., 0., 0., 1.]])


# np.full((3,3), 9)
# array([[9, 9, 9],
#        [9, 9, 9],
#        [9, 9, 9]])


# np.empty((3,2))
# array([[0., 0.],
#        [0., 0.],
#        [0., 0.]])






# функция linspace()
# np.linspace(0, 2, 9)  # 9 чисел от 0 до 2 включительно
# array([ 0, 0.25, 0.5 , 0.75, 1, 1.25, 1.5 , 1.75, 2. ])

# a = np.array([ 1,  2,  3, 10, 20, 30])
# Вычислим сумму, среднее значение и найдем максимальное и минимальное значения:
#
# a.sum()    # 66
# a.mean()  # 11.0
# a.max()    # 30
# a.min()    # 1

# базовые математические функции

# np.abs(x) - Вычисление модуля от аргумента(ов)x; xможет быть числом, списком или массивом.
# np.amax(x) - Нахождение максимального значения от аргумента(ов)x
# np.amin(x) - Нахождение минимального значения от аргумента(ов)x
# np.argmax(x) - Нахождение индекса максимального значения дляx.
# np.argmin(x) - Нахождение индекса минимального значения дляx.
# np.around(x) - Округление до ближайшего целого.
# np.mean(x) - Вычисление среднего значения.
# np.log(x) - Вычисление натурального логарифма.
# np.log2(x) - Вычисление логарифма по основанию 2.
# np.log10(x) - Вычисление логарифма по основанию 10.

# тригонометрические функции

# np.sin(x) - Вычисление синуса угла x (в радианах); xможет быть числом, списком, массивом
# (это правило распространяется на все функции этой таблицы).
# np.cos(x) - Вычисление косинуса угла(ов) x.
# np.tan(x) - Вычисление тангенса угла(ов) x.
# np.arccos(x) - Арккосинус угла(ов) x.
# np.arcsin(x) - Арксинус угла(ов) x.
# np.arctan(x) - Арктангенс угла(ов) x.

# Функции генерации псевдослучайных чисел
#
# random.rand() - Генерация чисел с равномерным законом распределения
# np.random.randint() - Генерация целых чисел с равномерным законом распределения
# np.random.randn() - Генерация нормальных случайных значений
# np.random.seed() - Установка начального состояния генератора


#ДОП Jоперации над массивами
#ВСе те же самые что и с целыми числами




