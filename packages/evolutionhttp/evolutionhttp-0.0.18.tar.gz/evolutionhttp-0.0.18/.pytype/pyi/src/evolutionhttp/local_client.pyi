# (generated with --quick)

import asyncio
import builtins
import logging
from typing import Any, Coroutine, List, Optional

_LOGGER: logging.Logger
tuple: Any

class BryantEvolutionLocalClient:
    class DevIO:
        def read_next(self) -> Coroutine[Any, Any, str]: ...
        def write(self, s: str) -> None: ...
    __doc__: str
    _device: BryantEvolutionLocalClient.DevIO
    _is_cmd_active: bool
    _pending_reads: List[builtins.tuple[str, asyncio.futures.Future]]
    _pending_writes: List[builtins.tuple[str, asyncio.futures.Future]]
    def __init__(self, device: BryantEvolutionLocalClient.DevIO) -> None: ...
    def _check_rep(self) -> None: ...
    def _maybe_pop_work(self) -> Any: ...
    def _maybe_process_commands(self) -> Coroutine[Any, Any, None]: ...
    def _send_command(self, cmd: str) -> Coroutine[Any, Any, str]: ...

def _is_write(cmd: str) -> bool: ...
def _parse_temperature(response: str) -> Optional[int]: ...
