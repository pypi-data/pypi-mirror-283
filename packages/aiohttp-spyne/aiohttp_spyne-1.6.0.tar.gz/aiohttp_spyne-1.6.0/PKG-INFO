Metadata-Version: 2.1
Name: aiohttp-spyne
Version: 1.6.0
Summary: Aiohttp transport for Spyne RPC library
Home-page: https://github.com/katajakasa/aiohttp-spyne
License: LGPL-2.1-only
Keywords: asyncio,aiohttp,spyne,soap
Author: Tuomas Virtanen
Author-email: katajakasa@gmail.com
Requires-Python: >=3.8,<4.0
Classifier: Development Status :: 5 - Production/Stable
Classifier: Framework :: AsyncIO
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Internet :: WWW/HTTP
Classifier: Topic :: Internet :: WWW/HTTP :: HTTP Servers
Requires-Dist: aiohttp (>=3.9.0,<4.0.0)
Requires-Dist: spyne (>=2.14.0,<3.0.0)
Project-URL: Repository, https://github.com/katajakasa/aiohttp-spyne
Description-Content-Type: text/markdown

![CI](https://github.com/katajakasa/aiohttp-spyne/actions/workflows/python-package.yml/badge.svg)


# About

Aiohttp transport for Spyne RPC library.

Requirements:

* Python 3.8, 3.9, 3.10, 3.11
* Aiohttp >= 3.9.0
* Spyne >= 2.14.0

Spyne alpha versions should also work.

## Installation

Just run `pip install aiohttp-spyne` :)

## Examples

* Test server: `python -m examples.hello_world`
* Threaded test server: `python -m examples.hello_world_threads`
* Test client: `python -m examples.test_client`

## Usage

First, initialize your spyne application as normal. Here's an example
for a simple SOAP service (See spyne examples and documentation for 
a more complete service setup).

```
spyne_app = spyne.Application(
    [HelloWorldService],
    tns='aiohttp_spyne.examples.hello',
    in_protocol=Soap11(validator='lxml'),
    out_protocol=Soap11())
```

Next, wrap your Spyne application with AIOSpyne. Note that you can run
your application entrypoints in a thread by setting the "threads" parameter.
If you want to keep your entrypoints running in the same thread as the
main application, just leave this None. If you DO run your entrypoints
in threads, be aware that some signals sent by spyne will also be run
in threads, and be extra careful of using your main loop!

```
handler = AIOSpyne(spyne_app, threads=25)
```

Lastly, make an aiohttp application as usual, and just bind GET and POST
entrypoints from AIOSpyne to wherever. Note that both paths need to be
the same.

With GET, if the request address ends ?wsdl or .wsdl, a WSDL schema is
returned in a response. Otherwise, requests are redirected to spynes
RPC handler.

```
app = web.Application()
app.router.add_get('/{tail:.*}', handler.get)
app.router.add_post('/{tail:.*}', handler.post)
web.run_app(app, port=8080)
```

## Chunked encoding

If you offer large result sets in your soap entrypoints, and yield
the results properly, you may want to enable chunked encoding. This
way the aiohttp server can stream your results and reduce memory
usage.

```
handler = AIOSpyne(spyne_app, chunked=True)
```

## WSDL caching

By default, aiohttp-spyne will cache WSDL documents generated by spyne.
This makes it cheap to offer the WSDL documents to any clients. If for some
reason you want to disable this caching, you can do so by setting the
cache_wsdl argument as False.

```
handler = AIOSpyne(spyne_app, cache_wsdl=False)
```

## Testing and formatting

1. `pytest`
2. `mypy -p aiohttp_spyne`
3. `black aiohttp_spyne/`

## License

LGPL-2.1 -- Please see LICENSE for details.

