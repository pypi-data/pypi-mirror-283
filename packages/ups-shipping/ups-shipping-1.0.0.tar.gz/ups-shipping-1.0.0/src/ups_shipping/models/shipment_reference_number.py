# This file was generated by liblab | https://liblab.com/

from .utils.json_map import JsonMap
from .base import BaseModel


@JsonMap({"bar_code_indicator": "BarCodeIndicator", "code": "Code", "value": "Value"})
class ShipmentReferenceNumber(BaseModel):
    """Reference Number information container.

    :param bar_code_indicator: If the indicator is present then the reference number's value will be bar coded on the label.  This is an empty tag, any value inside is ignored. Only one shipment-level or package-level reference number can be bar coded per shipment. In order to barcode a reference number, its value must be no longer than 14 alphanumeric characters or 24 numeric characters and cannot contain spaces., defaults to None
    :type bar_code_indicator: str, optional
    :param code: Shipment Reference number type code. The code specifies the Reference name. Refer to the Reference Number Code table.  Valid if the origin/destination pair is not US/US or PR/PR and character should be alpha-numeric., defaults to None
    :type code: str, optional
    :param value: Customer supplied reference number.  Valid if the origin/destination pair is not US/US or PR/PR
    :type value: str
    """

    def __init__(self, value: str, bar_code_indicator: str = None, code: str = None):
        if bar_code_indicator is not None:
            self.bar_code_indicator = bar_code_indicator
        if code is not None:
            self.code = code
        self.value = value
