# This file was generated by liblab | https://liblab.com/

from .utils.json_map import JsonMap
from .base import BaseModel


@JsonMap(
    {
        "name": "Name",
        "title": "Title",
        "place": "Place",
        "date_": "Date",
        "shipper_declaration": "ShipperDeclaration",
        "upload_only_indicator": "UploadOnlyIndicator",
    }
)
class ShipmentDgSignatoryInfo(BaseModel):
    """DGSignatoryInfo Container  DGPaperImage will be returned if DGSignatoryInfo container present

    :param name: Name of the person signing the declaration.  Note: The name of person or department he/she is employed with, are both acceptable., defaults to None
    :type name: str, optional
    :param title: Title of the person signing the declaration. Note: The title of the person or department he/she is employed with, are both acceptable., defaults to None
    :type title: str, optional
    :param place: The city of the Signatory., defaults to None
    :type place: str, optional
    :param date_: Date of signing the declaration form.  Valid format is YYYYMMDD., defaults to None
    :type date_: str, optional
    :param shipper_declaration: Valid values: 01 = Shipment level 02 = Package level                                              Valid only for the Shipper Declaration paper. If missing or invalid DGPaperImage will be returned at package level., defaults to None
    :type shipper_declaration: str, optional
    :param upload_only_indicator: Dangerous Goods Paper Upload Only Indicator. DG Paper will not be returned in response if UploadOnlyIndicator present., defaults to None
    :type upload_only_indicator: str, optional
    """

    def __init__(
        self,
        name: str = None,
        title: str = None,
        place: str = None,
        date_: str = None,
        shipper_declaration: str = None,
        upload_only_indicator: str = None,
    ):
        if name is not None:
            self.name = name
        if title is not None:
            self.title = title
        if place is not None:
            self.place = place
        if date_ is not None:
            self.date_ = date_
        if shipper_declaration is not None:
            self.shipper_declaration = shipper_declaration
        if upload_only_indicator is not None:
            self.upload_only_indicator = upload_only_indicator
