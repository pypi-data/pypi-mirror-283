# This file was generated by liblab | https://liblab.com/

from .utils.json_map import JsonMap
from .base import BaseModel


@JsonMap(
    {
        "vendor_collect_id_type_code": "VendorCollectIDTypeCode",
        "vendor_collect_id_number": "VendorCollectIDNumber",
        "consignee_type": "ConsigneeType",
    }
)
class ShipFromVendorInfo(BaseModel):
    """Vendor Information Container

    :param vendor_collect_id_type_code: Code that identifies the type of Vendor Collect ID Number. Valid Values - 0356 = IOSS - 0357 = VOEC - 0358 = HMRC Vendor Collect ID Number type code will be printed on commercial invoice if present.
    :type vendor_collect_id_type_code: str
    :param vendor_collect_id_number: Shipper's VAT Tax collection registration number to be entered by Shipper at time of shipment creation. Presence of this number as part of the shipment information implies the shipper has collected/paid the required VAT tax (outside of UPS/UPS systems). Vendor Colect ID Number will be printed on commercial invoice if present. Sample Values:   'IMDEU1234567' (IOSS #),  'VOEC1234567' (VOEC #),  'GB1234567' (HMRC #) Required if the shipment is subject to Vendor Collect ID collection
    :type vendor_collect_id_number: str
    :param consignee_type: Consignee Type. 01 = Business  02 = Consumer NA = Not Applicable, defaults to None
    :type consignee_type: str, optional
    """

    def __init__(
        self,
        vendor_collect_id_type_code: str,
        vendor_collect_id_number: str,
        consignee_type: str = None,
    ):
        self.vendor_collect_id_type_code = vendor_collect_id_type_code
        self.vendor_collect_id_number = vendor_collect_id_number
        if consignee_type is not None:
            self.consignee_type = consignee_type
