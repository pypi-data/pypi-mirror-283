# This file was generated by liblab | https://liblab.com/

from .utils.json_map import JsonMap
from .base import BaseModel


@JsonMap(
    {
        "diagnostic_specimens_indicator": "DiagnosticSpecimensIndicator",
        "alcoholic_beverages_indicator": "AlcoholicBeveragesIndicator",
        "perishables_indicator": "PerishablesIndicator",
        "plants_indicator": "PlantsIndicator",
        "seeds_indicator": "SeedsIndicator",
        "special_exceptions_indicator": "SpecialExceptionsIndicator",
        "tobacco_indicator": "TobaccoIndicator",
    }
)
class ShipmentServiceOptionsRestrictedArticles(BaseModel):
    """Restricted Articles container.

    :param diagnostic_specimens_indicator: This field is a flag to indicate if the package has Biological substances. True if present; false otherwise.  Shippers account needs to have a valid contract for Biological Substances. Lane check will happen based on postal code/ city., defaults to None
    :type diagnostic_specimens_indicator: str, optional
    :param alcoholic_beverages_indicator: Presence/Absence Indicator. True if present; false otherwise. Any value is ignored. If present, indicates that the package contains Alcoholic Beverages  Shippers account needs to have a valid contract for Alcohol., defaults to None
    :type alcoholic_beverages_indicator: str, optional
    :param perishables_indicator: Presence/Absence Indicator. True if present; false otherwise. Any value is ignored. If present, indicates that the package contains Perishable items.  Shippers account needs to have a valid contract for Perishables., defaults to None
    :type perishables_indicator: str, optional
    :param plants_indicator: Presence/Absence Indicator. True if present; false otherwise. Any value is ignored. If present, indicates that the package contains Plants  Shippers account needs to have a valid contract for Plants., defaults to None
    :type plants_indicator: str, optional
    :param seeds_indicator: Presence/Absence Indicator. True if present; false otherwise. Any value is ignored. If present, indicates that the package contains Seeds.  Shippers account needs to have a valid contract for Seeds., defaults to None
    :type seeds_indicator: str, optional
    :param special_exceptions_indicator: Presence/Absence Indicator. True if present; false otherwise. Any value is ignored. If present, indicates that the package contains Special Exception items.  Shippers account needs to have a valid contract for Special Exceptions., defaults to None
    :type special_exceptions_indicator: str, optional
    :param tobacco_indicator: Presence/Absence Indicator. True if present; false otherwise. Any value is ignored. If present, indicates that the package contains Tobacco  Shippers account needs to have a valid contract for Tobacco., defaults to None
    :type tobacco_indicator: str, optional
    """

    def __init__(
        self,
        diagnostic_specimens_indicator: str = None,
        alcoholic_beverages_indicator: str = None,
        perishables_indicator: str = None,
        plants_indicator: str = None,
        seeds_indicator: str = None,
        special_exceptions_indicator: str = None,
        tobacco_indicator: str = None,
    ):
        if diagnostic_specimens_indicator is not None:
            self.diagnostic_specimens_indicator = diagnostic_specimens_indicator
        if alcoholic_beverages_indicator is not None:
            self.alcoholic_beverages_indicator = alcoholic_beverages_indicator
        if perishables_indicator is not None:
            self.perishables_indicator = perishables_indicator
        if plants_indicator is not None:
            self.plants_indicator = plants_indicator
        if seeds_indicator is not None:
            self.seeds_indicator = seeds_indicator
        if special_exceptions_indicator is not None:
            self.special_exceptions_indicator = special_exceptions_indicator
        if tobacco_indicator is not None:
            self.tobacco_indicator = tobacco_indicator
