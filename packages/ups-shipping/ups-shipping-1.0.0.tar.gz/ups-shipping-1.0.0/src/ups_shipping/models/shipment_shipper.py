# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .shipper_phone import ShipperPhone
from .shipper_address import ShipperAddress


@JsonMap(
    {
        "name": "Name",
        "attention_name": "AttentionName",
        "company_displayable_name": "CompanyDisplayableName",
        "tax_identification_number": "TaxIdentificationNumber",
        "phone": "Phone",
        "shipper_number": "ShipperNumber",
        "fax_number": "FaxNumber",
        "e_mail_address": "EMailAddress",
        "address": "Address",
    }
)
class ShipmentShipper(BaseModel):
    """Container for the Shipper's information.

    :param name: Shippers company name.  For forward Shipment 35 characters are accepted, but only 30 characters will be printed on the label.
    :type name: str
    :param attention_name: Shippers Attention Name.  For forward Shipment 35 characters are accepted, but only 30 characters will be printed on the label.  Required if destination is international. Required if Invoice and CO International forms are requested and the ShipFrom address is not present., defaults to None
    :type attention_name: str, optional
    :param company_displayable_name: Shipper's CompanyDisplayableName. The CompanyDisplayableName will be displayed in tracking results and notification messages in place of the name associated with the shipper account.  The original shipper account name will be displayed for all Return Services and Import Control Shipments.  This is available for Shipper accounts enabled by UPS and applies to Forward Shipments., defaults to None
    :type company_displayable_name: str, optional
    :param tax_identification_number: Shipper's Tax Identification Number.  Conditionally required if EEI form (International forms) is requested and ship From is not mentioned., defaults to None
    :type tax_identification_number: str, optional
    :param phone: Container tag for Phone Number., defaults to None
    :type phone: ShipperPhone, optional
    :param shipper_number: Shipper's six digit alphanumeric account number. Must be associated with the UserId specified in the AccessRequest XML.  The account must be a valid UPS account number that is active.  For US, PR and CA accounts, the account must be either a daily pickup account, an occasional account, or a customer B.I.N account.  Drop Shipper accounts are valid for return service shipments only if the account is Trade Direct (TD) enabled.  All other accounts must be either a daily pickup account or an occasional account.
    :type shipper_number: str
    :param fax_number: Shipper's Fax Number., defaults to None
    :type fax_number: str, optional
    :param e_mail_address: Shipper's email address.  Must be associated with the UserId specified in the AccessRequest XML., defaults to None
    :type e_mail_address: str, optional
    :param address: Address tag Container.  The package should be returned to this address if the package is undeliverable. This address appears on the upper left hand corner of the label. Note: If the ShipFrom container is not present then this address will be used as the ShipFrom address. If this address is used as the ShipFrom the shipment will be rated from this origin address.
    :type address: ShipperAddress
    """

    def __init__(
        self,
        name: str,
        shipper_number: str,
        address: ShipperAddress,
        attention_name: str = None,
        company_displayable_name: str = None,
        tax_identification_number: str = None,
        phone: ShipperPhone = None,
        fax_number: str = None,
        e_mail_address: str = None,
    ):
        self.name = name
        if attention_name is not None:
            self.attention_name = attention_name
        if company_displayable_name is not None:
            self.company_displayable_name = company_displayable_name
        if tax_identification_number is not None:
            self.tax_identification_number = tax_identification_number
        if phone is not None:
            self.phone = self._define_object(phone, ShipperPhone)
        self.shipper_number = shipper_number
        if fax_number is not None:
            self.fax_number = fax_number
        if e_mail_address is not None:
            self.e_mail_address = e_mail_address
        self.address = self._define_object(address, ShipperAddress)
