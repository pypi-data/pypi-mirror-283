# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.labelrecovery_response_wrapper import LabelrecoveryResponseWrapper
from ..models.labelrecovery_request_wrapper import LabelrecoveryRequestWrapper


class LabelsService(BaseService):

    @cast_models
    def label_recovery(
        self,
        request_body: LabelrecoveryRequestWrapper,
        version: str,
        trans_id: str = None,
        transaction_src: str = None,
    ) -> LabelrecoveryResponseWrapper:
        """The Label Shipping API allows us to retrieve forward and return labels.

        :param request_body: The request body.
        :type request_body: LabelrecoveryRequestWrapper
        :param version: When UPS introduces new elements in the
        response that are not associated with new
        request elements, Subversion is used. This
        ensures backward compatibility.
        v1  original features of the application. No
        support for CODTurn-inPage, HighValueReport
        or InternationalForms features returned in the
        response
        v1701  includes support for CODTurn-inPage
        features returned in the response.
        V1903
         Length 5
        :type version: str
        :param trans_id: An identifier unique to the request. Length 32, defaults to None
        :type trans_id: str, optional
        :param transaction_src: An identifier of the client/source application that is making the request.Length 512, defaults to None
        :type transaction_src: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: successful operation
        :rtype: LabelrecoveryResponseWrapper
        """

        Validator(LabelrecoveryRequestWrapper).validate(request_body)
        Validator(str).validate(version)
        Validator(str).is_optional().validate(trans_id)
        Validator(str).is_optional().validate(transaction_src)

        serialized_request = (
            Serializer(
                f"{self.base_url}/labels/{{version}}/recovery",
                self.get_default_headers(),
            )
            .add_header("transId", trans_id)
            .add_header("transactionSrc", transaction_src)
            .add_path("version", version)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return LabelrecoveryResponseWrapper._unmap(response)
