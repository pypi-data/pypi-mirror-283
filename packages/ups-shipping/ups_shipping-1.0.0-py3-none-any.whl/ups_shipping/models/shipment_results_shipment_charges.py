# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .shipment_charges_base_service_charge import ShipmentChargesBaseServiceCharge
from .shipment_charges_transportation_charges import (
    ShipmentChargesTransportationCharges,
)
from .shipment_charges_itemized_charges import ShipmentChargesItemizedCharges
from .shipment_charges_service_options_charges import (
    ShipmentChargesServiceOptionsCharges,
)
from .shipment_charges_tax_charges import ShipmentChargesTaxCharges
from .shipment_charges_total_charges import ShipmentChargesTotalCharges
from .shipment_charges_total_charges_with_taxes import (
    ShipmentChargesTotalChargesWithTaxes,
)


@JsonMap(
    {
        "rate_chart": "RateChart",
        "base_service_charge": "BaseServiceCharge",
        "transportation_charges": "TransportationCharges",
        "itemized_charges": "ItemizedCharges",
        "service_options_charges": "ServiceOptionsCharges",
        "tax_charges": "TaxCharges",
        "total_charges": "TotalCharges",
        "total_charges_with_taxes": "TotalChargesWithTaxes",
    }
)
class ShipmentResultsShipmentCharges(BaseModel):
    """Shipment charges Container. Shipment charges info.

    :param rate_chart: Rate Type with which Shipment is rated. Possible RateChart values for different regions will be: US 48 origin: - 1 – Daily Rates - 3 – Standard List Rates - 4 – Retail Rates. Alaska/Hawaii origin: - 1 – Daily Rates - 3 – Standard List Rates - 4 – Retail Rates. All Other origins: - 1 – Rates - 5 - Regional Rates - 6 - General List Rates. 3 and 4 do not apply. , defaults to None
    :type rate_chart: str, optional
    :param base_service_charge: Base Service Charge container. Transportation charge = BaseServiceCharge + Fuel charge  Returned only if Subversion >=1701., defaults to None
    :type base_service_charge: ShipmentChargesBaseServiceCharge, optional
    :param transportation_charges: Transportation Charges container.
    :type transportation_charges: ShipmentChargesTransportationCharges
    :param itemized_charges: Itemized Charges are returned only when the Subversion element is present and greater than or equal to 1601. **NOTE:** For versions >= v2403, this element will always be returned as an array. For requests using versions < v2403, this element will be returned as an array if there is more than one object and a single object if there is only 1. , defaults to None
    :type itemized_charges: List[ShipmentChargesItemizedCharges], optional
    :param service_options_charges: Service Option Charges container.
    :type service_options_charges: ShipmentChargesServiceOptionsCharges
    :param tax_charges: TaxCharges container are returned only when TaxInformationIndicator is present in request and when Negotiated Rates are not applicable. TaxCharges container contains Tax information for a given shipment. **NOTE:** For versions >= v2403, this element will always be returned as an array. For requests using versions < v2403, this element will be returned as an array if there is more than one object and a single object if there is only 1. , defaults to None
    :type tax_charges: List[ShipmentChargesTaxCharges], optional
    :param total_charges: Total charges container.
    :type total_charges: ShipmentChargesTotalCharges
    :param total_charges_with_taxes: TotalChargesWithTaxes container would be returned only if TaxInformationIndicator is present in request and when Negotiated Rates are not applicable. TotalChargesWithTaxes contains total charges including total taxes applied to a shipment., defaults to None
    :type total_charges_with_taxes: ShipmentChargesTotalChargesWithTaxes, optional
    """

    def __init__(
        self,
        transportation_charges: ShipmentChargesTransportationCharges,
        service_options_charges: ShipmentChargesServiceOptionsCharges,
        total_charges: ShipmentChargesTotalCharges,
        rate_chart: str = None,
        base_service_charge: ShipmentChargesBaseServiceCharge = None,
        itemized_charges: List[ShipmentChargesItemizedCharges] = None,
        tax_charges: List[ShipmentChargesTaxCharges] = None,
        total_charges_with_taxes: ShipmentChargesTotalChargesWithTaxes = None,
    ):
        if rate_chart is not None:
            self.rate_chart = rate_chart
        if base_service_charge is not None:
            self.base_service_charge = self._define_object(
                base_service_charge, ShipmentChargesBaseServiceCharge
            )
        self.transportation_charges = self._define_object(
            transportation_charges, ShipmentChargesTransportationCharges
        )
        if itemized_charges is not None:
            self.itemized_charges = self._define_list(
                itemized_charges, ShipmentChargesItemizedCharges
            )
        self.service_options_charges = self._define_object(
            service_options_charges, ShipmentChargesServiceOptionsCharges
        )
        if tax_charges is not None:
            self.tax_charges = self._define_list(tax_charges, ShipmentChargesTaxCharges)
        self.total_charges = self._define_object(
            total_charges, ShipmentChargesTotalCharges
        )
        if total_charges_with_taxes is not None:
            self.total_charges_with_taxes = self._define_object(
                total_charges_with_taxes, ShipmentChargesTotalChargesWithTaxes
            )
