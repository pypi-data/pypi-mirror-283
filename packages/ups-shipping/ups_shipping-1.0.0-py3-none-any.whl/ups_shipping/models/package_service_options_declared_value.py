# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .declared_value_type import DeclaredValueType


@JsonMap(
    {
        "type_": "Type",
        "currency_code": "CurrencyCode",
        "monetary_value": "MonetaryValue",
    }
)
class PackageServiceOptionsDeclaredValue(BaseModel):
    """Container for Declared Value.

    :param type_: Container for Declared Value Type., defaults to None
    :type type_: DeclaredValueType, optional
    :param currency_code: Declared value amount currency type. Defaults to the non-Euro currency used in the shippers country or territory.  Code must represent a currency that is a valid for Shipper country or territory.
    :type currency_code: str
    :param monetary_value: Declared value amount.
    :type monetary_value: str
    """

    def __init__(
        self, currency_code: str, monetary_value: str, type_: DeclaredValueType = None
    ):
        if type_ is not None:
            self.type_ = self._define_object(type_, DeclaredValueType)
        self.currency_code = currency_code
        self.monetary_value = monetary_value
