# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .shipment_results_disclaimer import ShipmentResultsDisclaimer
from .shipment_results_shipment_charges import ShipmentResultsShipmentCharges
from .shipment_results_negotiated_rate_charges import (
    ShipmentResultsNegotiatedRateCharges,
)
from .shipment_results_frs_shipment_data import ShipmentResultsFrsShipmentData
from .shipment_results_billing_weight import ShipmentResultsBillingWeight
from .shipment_results_package_results import ShipmentResultsPackageResults
from .shipment_results_control_log_receipt import ShipmentResultsControlLogReceipt
from .shipment_results_form import ShipmentResultsForm
from .shipment_results_cod_turn_in_page import ShipmentResultsCodTurnInPage
from .shipment_results_high_value_report import ShipmentResultsHighValueReport


@JsonMap(
    {
        "disclaimer": "Disclaimer",
        "shipment_charges": "ShipmentCharges",
        "negotiated_rate_charges": "NegotiatedRateCharges",
        "frs_shipment_data": "FRSShipmentData",
        "rating_method": "RatingMethod",
        "billable_weight_calculation_method": "BillableWeightCalculationMethod",
        "billing_weight": "BillingWeight",
        "shipment_identification_number": "ShipmentIdentificationNumber",
        "mi_dual_return_shipment_key": "MIDualReturnShipmentKey",
        "bar_code_image": "BarCodeImage",
        "package_results": "PackageResults",
        "control_log_receipt": "ControlLogReceipt",
        "form": "Form",
        "cod_turn_in_page": "CODTurnInPage",
        "high_value_report": "HighValueReport",
        "label_url": "LabelURL",
        "local_language_label_url": "LocalLanguageLabelURL",
        "receipt_url": "ReceiptURL",
        "local_language_receipt_url": "LocalLanguageReceiptURL",
        "dg_paper_image": "DGPaperImage",
        "master_carton_id": "MasterCartonID",
        "roar_rated_indicator": "RoarRatedIndicator",
    }
)
class ShipmentResponseShipmentResults(BaseModel):
    """Shipment Results container.

    :param disclaimer: Disclaimer would be used to provide more information to shipper regarding the processed shipment. This would be used to notify shipper about possible taxes and duties that might have been added or might apply to the shipment. This field would be returned only if TaxInformationIndicator is present in a request. **NOTE:** For versions >= v2403, this element will always be returned as an array. For requests using versions < v2403, this element will be returned as an array if there is more than one object and a single object if there is only 1. , defaults to None
    :type disclaimer: List[ShipmentResultsDisclaimer], optional
    :param shipment_charges: Shipment charges Container. Shipment charges info., defaults to None
    :type shipment_charges: ShipmentResultsShipmentCharges, optional
    :param negotiated_rate_charges: Negotiated Rates Charge Container.  For tiered rates and promotional discounts, if a particular shipment based on zone, origin, destination or even shipment size doesn't qualify for the existing discount then no negotiated rates container will be returned. Published rates will be the applicable rate., defaults to None
    :type negotiated_rate_charges: ShipmentResultsNegotiatedRateCharges, optional
    :param frs_shipment_data: Ground Freight Pricing Shipment data container. Ground Freight Pricing shipment data is only guaranteed to be returned for Ground Freight Pricing shipments only., defaults to None
    :type frs_shipment_data: ShipmentResultsFrsShipmentData, optional
    :param rating_method: RatingMethod is to indicate whether the Shipment was rated as shipment level or package level. This information will be returned only if RatingMethodRequestedIndicator is present in the request.  Valid values: 01 = Shipment level 02 = Package level, defaults to None
    :type rating_method: str, optional
    :param billable_weight_calculation_method: BillableWeightCalculationMethod is to indicate whether the billable weight calculation method utilized was - the package level or shipment level. This information will be returned only if RatingMethodRequestedIndicator is present in the request.  Valid values: 01 = Shipment Billable Weight 02 = Package Billable Weight, defaults to None
    :type billable_weight_calculation_method: str, optional
    :param billing_weight: Billing Weight container.
    :type billing_weight: ShipmentResultsBillingWeight
    :param shipment_identification_number: Returned UPS shipment ID number.1Z Number of the first package in the shipment., defaults to None
    :type shipment_identification_number: str, optional
    :param mi_dual_return_shipment_key: MIDualReturnShipmentKey is unique key required to process Mail Innovations Dual Return Shipment.  The unique identifier (key) would be returned in response of first phase of Mail Innovations Dual Return Shipments.  This unique identifier (key) would be part of request for second phase of Mail Innovations Dual Return Shipments and would be played back in response for second phase of Mail Innovations Dual Return Shipment.  If the shipment is a Package return shipment, the package tracking number will be concatenated with the system time (in the format YYYY-MM-DDHH.MM.SS.NNN) and followed by service code.  If the shipment is an MI Returns shipment, the Mail Manifest ID (MMI) will be concatenated with the system time., defaults to None
    :type mi_dual_return_shipment_key: str, optional
    :param bar_code_image: Bar Code Image will be returned as Base 64 encoded graphic image. Bar Code Image will be returned if BarCodeImageIndicator or BarCodeAndLabelIndicator is present., defaults to None
    :type bar_code_image: str, optional
    :param package_results: Returned Package Information. **NOTE:** For versions >= v2403, this element will always be returned as an array. For requests using versions < v2403, this element will be returned as an array if there is more than one object and a single object if there is only 1. , defaults to None
    :type package_results: List[ShipmentResultsPackageResults], optional
    :param control_log_receipt: Container for the High Value reports when forward shipments have declared value between $999 and $50,000 USD. \nTwo copies of high value report needs to be pointed out. **NOTE:** For versions >= v2403, this element will always be returned as an array. For requests using versions < v2403, this element will be returned as an array if there is more than one object and a single object if there is only 1. , defaults to None
    :type control_log_receipt: List[ShipmentResultsControlLogReceipt], optional
    :param form: Container tag for the International forms image.   Form is returned for following shipments - Forward shipments, Shipments with PRL ReturnService, Electronic Return Label or Electronic Import Control Label shipments with SubVersion greater than or equal to 1707., defaults to None
    :type form: ShipmentResultsForm, optional
    :param cod_turn_in_page: The container of the COD Turn In Page., defaults to None
    :type cod_turn_in_page: ShipmentResultsCodTurnInPage, optional
    :param high_value_report: Container for the High Value Report generated for ImportControl or Return shipments with high package declared value., defaults to None
    :type high_value_report: ShipmentResultsHighValueReport, optional
    :param label_url: URL will point to a page wherein label, receipt and other documents, if applicable, such as HighValueReport, CustomsInvoice and ImportControl instructions can be requested. LabelURL is returned only if the LabelLinksIndicator is requested for following shipments: Print/Electronic ImportControl shipment Print/Electronic Return shipment.  Forward shipment except for Mail Innovations Forward., defaults to None
    :type label_url: str, optional
    :param local_language_label_url: URL will point to a page wherein label, receipt and other documents, if applicable, such as HighValueReport, CustomsInvoice and ImportControl instructions can be requested. LocalLanguageLabelURL is returned only if the LabelLinksIndicator is requested for following shipments: Print/Electronic ImportControl shipment Print/Electronic Return shipment.  Forward shipment except for Mail Innovations Forward.  Not returned if LabelLinksIndicator is requested with Locale element., defaults to None
    :type local_language_label_url: str, optional
    :param receipt_url: URL will point to a page wherein label, receipt and other documents, if applicable, such as HighValueReport, CustomsInvoice and ImportControl instructions can be requested. ReceiptURL is returned only if the LabelLinksIndicator is requested for following shipments: Print/Electronic ImportControl shipment Print/Electronic Return shipment., defaults to None
    :type receipt_url: str, optional
    :param local_language_receipt_url: URL will point to a page wherein label, receipt and other documents, if applicable, such as HighValueReport, CustomsInvoice and ImportControl instructions can be requested. LocalLanguageReceiptURL is returned only if the LabelLinksIndicator is requested for following shipments: Print/Electronic ImportControl shipment Print/Electronic Return shipment.   Not returned if LabelLinksIndicator is requested with Locale element., defaults to None
    :type local_language_receipt_url: str, optional
    :param dg_paper_image: Dangerous Good Paper Image in pdf format. One multipage PDF document will be returned that will contain all required Dangrous Goods shipping paper copies for all Dangerous Goods packages. Only returned when DGSignatoryInfo is present. **NOTE:** For versions >= v2403, this element will always be returned as an array. For requests using versions < v2403, this element will be returned as an array if there is more than one object and a single object if there is only 1. , defaults to None
    :type dg_paper_image: List[str], optional
    :param master_carton_id: Master Carton ID. MasterCartonID will be return if MasterCartonIndicator is present in request., defaults to None
    :type master_carton_id: str, optional
    :param roar_rated_indicator: Informational only, defaults to None
    :type roar_rated_indicator: str, optional
    """

    def __init__(
        self,
        billing_weight: ShipmentResultsBillingWeight,
        disclaimer: List[ShipmentResultsDisclaimer] = None,
        shipment_charges: ShipmentResultsShipmentCharges = None,
        negotiated_rate_charges: ShipmentResultsNegotiatedRateCharges = None,
        frs_shipment_data: ShipmentResultsFrsShipmentData = None,
        rating_method: str = None,
        billable_weight_calculation_method: str = None,
        shipment_identification_number: str = None,
        mi_dual_return_shipment_key: str = None,
        bar_code_image: str = None,
        package_results: List[ShipmentResultsPackageResults] = None,
        control_log_receipt: List[ShipmentResultsControlLogReceipt] = None,
        form: ShipmentResultsForm = None,
        cod_turn_in_page: ShipmentResultsCodTurnInPage = None,
        high_value_report: ShipmentResultsHighValueReport = None,
        label_url: str = None,
        local_language_label_url: str = None,
        receipt_url: str = None,
        local_language_receipt_url: str = None,
        dg_paper_image: List[str] = None,
        master_carton_id: str = None,
        roar_rated_indicator: str = None,
    ):
        if disclaimer is not None:
            self.disclaimer = self._define_list(disclaimer, ShipmentResultsDisclaimer)
        if shipment_charges is not None:
            self.shipment_charges = self._define_object(
                shipment_charges, ShipmentResultsShipmentCharges
            )
        if negotiated_rate_charges is not None:
            self.negotiated_rate_charges = self._define_object(
                negotiated_rate_charges, ShipmentResultsNegotiatedRateCharges
            )
        if frs_shipment_data is not None:
            self.frs_shipment_data = self._define_object(
                frs_shipment_data, ShipmentResultsFrsShipmentData
            )
        if rating_method is not None:
            self.rating_method = rating_method
        if billable_weight_calculation_method is not None:
            self.billable_weight_calculation_method = billable_weight_calculation_method
        self.billing_weight = self._define_object(
            billing_weight, ShipmentResultsBillingWeight
        )
        if shipment_identification_number is not None:
            self.shipment_identification_number = shipment_identification_number
        if mi_dual_return_shipment_key is not None:
            self.mi_dual_return_shipment_key = mi_dual_return_shipment_key
        if bar_code_image is not None:
            self.bar_code_image = bar_code_image
        if package_results is not None:
            self.package_results = self._define_list(
                package_results, ShipmentResultsPackageResults
            )
        if control_log_receipt is not None:
            self.control_log_receipt = self._define_list(
                control_log_receipt, ShipmentResultsControlLogReceipt
            )
        if form is not None:
            self.form = self._define_object(form, ShipmentResultsForm)
        if cod_turn_in_page is not None:
            self.cod_turn_in_page = self._define_object(
                cod_turn_in_page, ShipmentResultsCodTurnInPage
            )
        if high_value_report is not None:
            self.high_value_report = self._define_object(
                high_value_report, ShipmentResultsHighValueReport
            )
        if label_url is not None:
            self.label_url = label_url
        if local_language_label_url is not None:
            self.local_language_label_url = local_language_label_url
        if receipt_url is not None:
            self.receipt_url = receipt_url
        if local_language_receipt_url is not None:
            self.local_language_receipt_url = local_language_receipt_url
        if dg_paper_image is not None:
            self.dg_paper_image = dg_paper_image
        if master_carton_id is not None:
            self.master_carton_id = master_carton_id
        if roar_rated_indicator is not None:
            self.roar_rated_indicator = roar_rated_indicator
