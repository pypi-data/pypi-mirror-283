# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .request_transaction_reference import RequestTransactionReference


@JsonMap(
    {
        "request_option": "RequestOption",
        "sub_version": "SubVersion",
        "transaction_reference": "TransactionReference",
    }
)
class ShipmentRequestRequest(BaseModel):
    """Request Container

    :param request_option: Optional Processing.   Note: Full address validation is not performed. Therefore, it is the responsibility of the Shipping Tool User to ensure the address entered is correct to avoid an address correction fee.  Valid values: nonvalidate = No street level address validation would be performed, but Postal Code/State combination validation would still be performed. validate = No street level address validation would be performed, but City/State/Postal Code/ combination validation would still be performed.
    :type request_option: str
    :param sub_version: When UPS introduces new elements in the response that are not associated with new request elements, Subversion is used. This ensures backward compatibility. To get such elements you need to have the right Subversion. The value of the subversion is explained in the Response element Description. Example: Itemized Charges are returned only when the Subversion element is present and greater than or equal to 1601.  Format: YYMM = Year and month of the release. Example: 1607 = 2016 July  Supported values: 1601, 1607, 1701, 1707, 1801, 1807, 2108, 2205, defaults to None
    :type sub_version: str, optional
    :param transaction_reference: TransactionReference identifies transactions between client and server., defaults to None
    :type transaction_reference: RequestTransactionReference, optional
    """

    def __init__(
        self,
        request_option: str,
        sub_version: str = None,
        transaction_reference: RequestTransactionReference = None,
    ):
        self.request_option = request_option
        if sub_version is not None:
            self.sub_version = sub_version
        if transaction_reference is not None:
            self.transaction_reference = self._define_object(
                transaction_reference, RequestTransactionReference
            )
