# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .schedule_b_unit_of_measurement import ScheduleBUnitOfMeasurement


@JsonMap(
    {
        "number": "Number",
        "quantity": "Quantity",
        "unit_of_measurement": "UnitOfMeasurement",
    }
)
class ProductScheduleB(BaseModel):
    """Container tag for the schedule B information of a commodity.  Applies to EEI forms only. Required for EEI form

    :param number: A unique 10-digit commodity classification code for the item being exported. (To classify a commodity access the following Web page: http://www.census.gov/foreign-trade/schedules/b/#search).  Applies to EEI forms only. Has to be 10 characters.
    :type number: str
    :param quantity: The count of how many Schedule B units of the current good are in the shipment (EEI only). For example, if the Schedule B unit of measure is dozens and eight dozen, is being shipped, indicate 8 in this field.  Applies to EEI forms only. Conditionally required for EEI forms if ScheduleB UnitOfMeasurement is not X. Should be Numeric. Valid characters are 0 -9., defaults to None
    :type quantity: List[str], optional
    :param unit_of_measurement: unit_of_measurement
    :type unit_of_measurement: List[ScheduleBUnitOfMeasurement]
    """

    def __init__(
        self,
        number: str,
        unit_of_measurement: List[ScheduleBUnitOfMeasurement],
        quantity: List[str] = None,
    ):
        self.number = number
        if quantity is not None:
            self.quantity = quantity
        self.unit_of_measurement = self._define_list(
            unit_of_measurement, ScheduleBUnitOfMeasurement
        )
