# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .shipping_label_image_format import ShippingLabelImageFormat


@JsonMap(
    {
        "image_format": "ImageFormat",
        "graphic_image": "GraphicImage",
        "graphic_image_part": "GraphicImagePart",
        "international_signature_graphic_image": "InternationalSignatureGraphicImage",
        "html_image": "HTMLImage",
        "pdf417": "PDF417",
    }
)
class PackageResultsShippingLabel(BaseModel):
    """The container for UPS shipping label. Returned for following shipments -
    Forward shipments,
    Shipments with PRL returns service,
    Electronic Return Label or Electronic Import Control Label shipments with SubVersion greater than or equal to 1707. Shipping label wont be returned if BarCodeImageIndicator is present.

    :param image_format: The container image format.
    :type image_format: ShippingLabelImageFormat
    :param graphic_image: Base 64 encoded graphic image.
    :type graphic_image: str
    :param graphic_image_part: Base 64 encoded graphic image. Applicable only for Mail Innovations CN22 Combination Forward Label with more than 3 commodities. **NOTE:** For versions >= v2403, this element will always be returned as an array. For requests using versions < v2403, this element will be returned as an array if there is more than one object and a single object if there is only 1. , defaults to None
    :type graphic_image_part: List[str], optional
    :param international_signature_graphic_image: Base 64 encoded graphic image of the Warsaw text and signature box. EPL2, ZPL and SPL labels. The image will be returned for non-US based shipments. One image will be given per shipment and it will be in the first PackageResults container., defaults to None
    :type international_signature_graphic_image: str, optional
    :param html_image: Base 64 encoded html browser image rendering software. This is only returned for gif and png image formats., defaults to None
    :type html_image: str, optional
    :param pdf417: PDF-417 is a two-dimensional barcode, which can store up to about 1,800 printable ASCII characters or 1,100 binary characters per symbol. The symbol is rectangular. The image is Base 64 encoded and returned if the LabelImageFormat code is GIF. Shipment with PRL return service only., defaults to None
    :type pdf417: str, optional
    """

    def __init__(
        self,
        image_format: ShippingLabelImageFormat,
        graphic_image: str,
        graphic_image_part: List[str] = None,
        international_signature_graphic_image: str = None,
        html_image: str = None,
        pdf417: str = None,
    ):
        self.image_format = self._define_object(image_format, ShippingLabelImageFormat)
        self.graphic_image = graphic_image
        if graphic_image_part is not None:
            self.graphic_image_part = graphic_image_part
        if international_signature_graphic_image is not None:
            self.international_signature_graphic_image = (
                international_signature_graphic_image
            )
        if html_image is not None:
            self.html_image = html_image
        if pdf417 is not None:
            self.pdf417 = pdf417
