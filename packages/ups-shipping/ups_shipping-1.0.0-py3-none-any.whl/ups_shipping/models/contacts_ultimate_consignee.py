# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .ultimate_consignee_address import UltimateConsigneeAddress
from .ultimate_consignee_ultimate_consignee_type import (
    UltimateConsigneeUltimateConsigneeType,
)


@JsonMap(
    {
        "company_name": "CompanyName",
        "address": "Address",
        "ultimate_consignee_type": "UltimateConsigneeType",
    }
)
class ContactsUltimateConsignee(BaseModel):
    """The ultimate consignee is the person or company who receives the goods for end-use or the person or company listed on the export license. This is the end-user of the goods.  Applicable for EEI form only.

    :param company_name: Company Name or the Individual name of the Ultimate consignee.  Applicable for EEI form only.
    :type company_name: str
    :param address: Address information of the Ultimate consignee.  Applicable for EEI form only.
    :type address: UltimateConsigneeAddress
    :param ultimate_consignee_type: Container for providing UltimateConsignee Type.  Applicable for EEI form only., defaults to None
    :type ultimate_consignee_type: UltimateConsigneeUltimateConsigneeType, optional
    """

    def __init__(
        self,
        company_name: str,
        address: UltimateConsigneeAddress,
        ultimate_consignee_type: UltimateConsigneeUltimateConsigneeType = None,
    ):
        self.company_name = company_name
        self.address = self._define_object(address, UltimateConsigneeAddress)
        if ultimate_consignee_type is not None:
            self.ultimate_consignee_type = self._define_object(
                ultimate_consignee_type, UltimateConsigneeUltimateConsigneeType
            )
