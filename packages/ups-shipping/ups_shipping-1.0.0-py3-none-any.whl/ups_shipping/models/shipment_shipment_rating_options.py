# This file was generated by liblab | https://liblab.com/

from .utils.json_map import JsonMap
from .base import BaseModel


@JsonMap(
    {
        "negotiated_rates_indicator": "NegotiatedRatesIndicator",
        "frs_shipment_indicator": "FRSShipmentIndicator",
        "rate_chart_indicator": "RateChartIndicator",
        "tpfc_negotiated_rates_indicator": "TPFCNegotiatedRatesIndicator",
        "user_level_discount_indicator": "UserLevelDiscountIndicator",
    }
)
class ShipmentShipmentRatingOptions(BaseModel):
    """ShipmentRatingOptions container.

    :param negotiated_rates_indicator: Negotiated Rates option indicator. If the indicator is present and the Shipper is authorized then Negotiated Rates should be returned in the response.  Negotiated Rates are of two types Account Based Rates (ABR) and Web Discount Rates. Negotiated Rates are only returned for qualified Shipper Account Numbers.  Eligibility is determined using the combination of UserId and the Shipper's Shipper Account Number. If the user is qualified, both Published rates and Negotiated rates are returned to the user. If the UserId and Shipper Account  Number are not qualified for Negotiated rates, a warning message is returned that indicates ineligibility and only the Published rates are returned in the response. As per discount eligibility of user, negotiated rates in the response may contain ABR or Web discount rates., defaults to None
    :type negotiated_rates_indicator: str, optional
    :param frs_shipment_indicator: Ground Freight Pricing Rates option indicator. If the Ground Freight Pricing Shipment indicator is enabled and Shipper number is authorized then Ground Freight Pricing rates should be returned in the response.  The Shipper account number must be qualified to receive Ground Freight Pricing Density Based Shipment rates. Only the Shipper account number taken from /ShipmentRequest/Shipment/FRSPaymentInformation/AccountNumber is used when checking qualification for Ground Freight Pricing Density Based rates., defaults to None
    :type frs_shipment_indicator: str, optional
    :param rate_chart_indicator: RateChartIndicator, if present in request, response will contain RateChart element., defaults to None
    :type rate_chart_indicator: str, optional
    :param tpfc_negotiated_rates_indicator: This indicator applies for a third party (3P) / Freight collect (FC) shipment only.  For 3P/FC shipment if the shipper wishes to request for the negotiated rates of the third party then this indicator should be included in the request.  If authorized the 3P/FC negotiated rates will be applied to the shipment and rates will be returned in response., defaults to None
    :type tpfc_negotiated_rates_indicator: str, optional
    :param user_level_discount_indicator: If this indicator is present user level discount will be applied to rates if applicable  Conditions checked: This indicator should be present Shipper number should not be present User should be eligible for user level discount, defaults to None
    :type user_level_discount_indicator: str, optional
    """

    def __init__(
        self,
        negotiated_rates_indicator: str = None,
        frs_shipment_indicator: str = None,
        rate_chart_indicator: str = None,
        tpfc_negotiated_rates_indicator: str = None,
        user_level_discount_indicator: str = None,
    ):
        if negotiated_rates_indicator is not None:
            self.negotiated_rates_indicator = negotiated_rates_indicator
        if frs_shipment_indicator is not None:
            self.frs_shipment_indicator = frs_shipment_indicator
        if rate_chart_indicator is not None:
            self.rate_chart_indicator = rate_chart_indicator
        if tpfc_negotiated_rates_indicator is not None:
            self.tpfc_negotiated_rates_indicator = tpfc_negotiated_rates_indicator
        if user_level_discount_indicator is not None:
            self.user_level_discount_indicator = user_level_discount_indicator
