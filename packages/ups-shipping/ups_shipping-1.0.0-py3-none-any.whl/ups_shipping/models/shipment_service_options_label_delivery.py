# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .label_delivery_e_mail import LabelDeliveryEMail


@JsonMap({"e_mail": "EMail", "label_links_indicator": "LabelLinksIndicator"})
class ShipmentServiceOptionsLabelDelivery(BaseModel):
    """Container for the Label Delivery accessorial. Note - LabelDelivery is not applicable for GFP and Mail Innovations Forward shipment.  Required for shipments with either Electronic Return Label Return Service or ImportControl Electronic LabelMethod type. Optional for shipments with Print Return Label Return Service or ImportControl Print LabelMethod type or Forward movement.  If this container is present for shipments with either Electronic Return Label Return Service or ImportControl Electronic LabelMethod type, either of the LabelLinksIndicator or EMail container should be provided. For shipments with Print Return Label Return Service or ImportControl Print LabelMethod type or Forward movement, only LabelLinksIndicator is valid option for LabelDelivery container.

    :param e_mail: Container for the email message., defaults to None
    :type e_mail: LabelDeliveryEMail, optional
    :param label_links_indicator: Indicates the Label and Receipt URLs are to be returned in the XML response., defaults to None
    :type label_links_indicator: str, optional
    """

    def __init__(
        self, e_mail: LabelDeliveryEMail = None, label_links_indicator: str = None
    ):
        if e_mail is not None:
            self.e_mail = self._define_object(e_mail, LabelDeliveryEMail)
        if label_links_indicator is not None:
            self.label_links_indicator = label_links_indicator
