# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .iac_status_enum import IacStatusEnum


@JsonMap({})
class Incidents(BaseModel):
    """Incidents

    :param policy: Policy involved with the vulnerability, defaults to None
    :type policy: str, optional
    :param policy_id: Policy id, defaults to None
    :type policy_id: str, optional
    :param severity: Severity of the vulnerability, defaults to None
    :type severity: str, optional
    :param component: Component in which the vulnerability has been found, defaults to None
    :type component: str, optional
    :param line_start: Starting line of the vulnerability block, defaults to None
    :type line_start: int, optional
    :param line_end: Ending line of the vulnerability block, defaults to None
    :type line_end: int, optional
    :param description: Vulnerability description, defaults to None
    :type description: str, optional
    :param documentation_url: Vulnerability documentation, defaults to None
    :type documentation_url: str, optional
    :param gitguardian_url: The URL of the incident on your GitGuardian dashboard, if it is a known vulnerability., defaults to None
    :type gitguardian_url: str, optional
    :param url: The url linking to the incident on your GitGuardian dashboard., defaults to None
    :type url: str, optional
    :param status: status, defaults to None
    :type status: IacStatusEnum, optional
    :param ignored_until: The date when the incident will no longer be ignored on your GitGuardian Dashboard, if it is a known vulnerability (null if the incident is ignored permanently or not ignored)., defaults to None
    :type ignored_until: str, optional
    :param ignore_reason: The reason selected for ignoring the incident on your GitGuardian dashboard, if it is a known vulnerability (null if the incident is not ignored)., defaults to None
    :type ignore_reason: str, optional
    :param ignore_comment: The comment provided for ignoring the incident on your GitGuardian dashboard, if it is a known vulnerability (null if no comment has been provided or if the incident is not ignored)., defaults to None
    :type ignore_comment: str, optional
    """

    def __init__(
        self,
        policy: str = None,
        policy_id: str = None,
        severity: str = None,
        component: str = None,
        line_start: int = None,
        line_end: int = None,
        description: str = None,
        documentation_url: str = None,
        gitguardian_url: str = None,
        url: str = None,
        status: IacStatusEnum = None,
        ignored_until: str = None,
        ignore_reason: str = None,
        ignore_comment: str = None,
    ):
        if policy is not None:
            self.policy = policy
        if policy_id is not None:
            self.policy_id = policy_id
        if severity is not None:
            self.severity = severity
        if component is not None:
            self.component = component
        if line_start is not None:
            self.line_start = line_start
        if line_end is not None:
            self.line_end = line_end
        if description is not None:
            self.description = description
        if documentation_url is not None:
            self.documentation_url = documentation_url
        if gitguardian_url is not None:
            self.gitguardian_url = gitguardian_url
        if url is not None:
            self.url = url
        if status is not None:
            self.status = self._enum_matching(status, IacStatusEnum.list(), "status")
        if ignored_until is not None:
            self.ignored_until = ignored_until
        if ignore_reason is not None:
            self.ignore_reason = ignore_reason
        if ignore_comment is not None:
            self.ignore_comment = ignore_comment


@JsonMap({})
class EntitiesWithIncidents(BaseModel):
    """EntitiesWithIncidents

    :param filename: File name
    :type filename: str
    :param incidents: Incidents detected in the file
    :type incidents: List[Incidents]
    """

    def __init__(self, filename: str, incidents: List[Incidents]):
        self.filename = filename
        self.incidents = self._define_list(incidents, Incidents)
