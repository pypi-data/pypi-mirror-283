# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .honey_token_event_tag import HoneyTokenEventTag
from .honey_token_label import HoneyTokenLabel


class HoneytokenStatus(Enum):
    """An enumeration representing different categories.

    :cvar ACTIVE: "active"
    :vartype ACTIVE: str
    :cvar TRIGGERED: "triggered"
    :vartype TRIGGERED: str
    :cvar REVOKED: "revoked"
    :vartype REVOKED: str
    """

    ACTIVE = "active"
    TRIGGERED = "triggered"
    REVOKED = "revoked"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, HoneytokenStatus._member_map_.values()))


class HoneytokenType(Enum):
    """An enumeration representing different categories.

    :cvar AWS: "AWS"
    :vartype AWS: str
    """

    AWS = "AWS"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, HoneytokenType._member_map_.values()))


@JsonMap({"id_": "id", "type_": "type"})
class Honeytoken(BaseModel):
    """Honeytoken

    :param id_: id_, defaults to None
    :type id_: str, optional
    :param name: name, defaults to None
    :type name: str, optional
    :param description: description, defaults to None
    :type description: str, optional
    :param created_at: Creation date of the honeytoken, defaults to None
    :type created_at: str, optional
    :param gitguardian_url: gitguardian_url, defaults to None
    :type gitguardian_url: str, optional
    :param status: Status of the honeytoken., defaults to None
    :type status: HoneytokenStatus, optional
    :param triggered_at: Date when the honeytoken was switched from active to triggered the last time, defaults to None
    :type triggered_at: str, optional
    :param revoked_at: Date when the honeytoken was revoked, defaults to None
    :type revoked_at: str, optional
    :param open_events_count: open_events_count, defaults to None
    :type open_events_count: int, optional
    :param type_: Type of the honeytoken., defaults to None
    :type type_: HoneytokenType, optional
    :param creator_id: Id of the member who created this honeytoken., defaults to None
    :type creator_id: int, optional
    :param revoker_id: Id of the member who revoked this honeytoken., defaults to None
    :type revoker_id: int, optional
    :param creator_api_token_id: ID of the API key which created this honeytoken. Can be null if the honeytoken<br>was not created via the API.<br>, defaults to None
    :type creator_api_token_id: str, optional
    :param revoker_api_token_id: ID of the API key which created honeytoken note. Can be null if the honeytoken<br>was not created via the API.<br>, defaults to None
    :type revoker_api_token_id: str, optional
    :param token: Secret to be placed as a honeytoken., defaults to None
    :type token: dict, optional
    :param tags: tags, defaults to None
    :type tags: List[HoneyTokenEventTag], optional
    :param labels: Labels set on the honeytoken., defaults to None
    :type labels: List[HoneyTokenLabel], optional
    """

    def __init__(
        self,
        id_: str = None,
        name: str = None,
        description: str = None,
        created_at: str = None,
        gitguardian_url: str = None,
        status: HoneytokenStatus = None,
        triggered_at: str = None,
        revoked_at: str = None,
        open_events_count: int = None,
        type_: HoneytokenType = None,
        creator_id: int = None,
        revoker_id: int = None,
        creator_api_token_id: str = None,
        revoker_api_token_id: str = None,
        token: dict = None,
        tags: List[HoneyTokenEventTag] = None,
        labels: List[HoneyTokenLabel] = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if created_at is not None:
            self.created_at = created_at
        if gitguardian_url is not None:
            self.gitguardian_url = gitguardian_url
        if status is not None:
            self.status = self._enum_matching(status, HoneytokenStatus.list(), "status")
        if triggered_at is not None:
            self.triggered_at = triggered_at
        if revoked_at is not None:
            self.revoked_at = revoked_at
        if open_events_count is not None:
            self.open_events_count = open_events_count
        if type_ is not None:
            self.type_ = self._enum_matching(type_, HoneytokenType.list(), "type_")
        if creator_id is not None:
            self.creator_id = creator_id
        if revoker_id is not None:
            self.revoker_id = revoker_id
        if creator_api_token_id is not None:
            self.creator_api_token_id = creator_api_token_id
        if revoker_api_token_id is not None:
            self.revoker_api_token_id = revoker_api_token_id
        if token is not None:
            self.token = token
        if tags is not None:
            self.tags = self._define_list(tags, HoneyTokenEventTag)
        if labels is not None:
            self.labels = self._define_list(labels, HoneyTokenLabel)
