# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .honey_token_event_tag import HoneyTokenEventTag


class HoneyTokenEventStatus(Enum):
    """An enumeration representing different categories.

    :cvar OPEN: "open"
    :vartype OPEN: str
    :cvar CLOSED: "closed"
    :vartype CLOSED: str
    """

    OPEN = "open"
    CLOSED = "closed"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, HoneyTokenEventStatus._member_map_.values()))


@JsonMap({"id_": "id"})
class HoneyTokenEvent(BaseModel):
    """HoneyTokenEvent

    :param id_: id_, defaults to None
    :type id_: str, optional
    :param honeytoken_id: Id of the related Honeytoken., defaults to None
    :type honeytoken_id: str, optional
    :param triggered_at: The time on which the honeytoken was triggered. Null if the<br>honeytoken was never triggered.<br>, defaults to None
    :type triggered_at: str, optional
    :param gitguardian_url: gitguardian_url, defaults to None
    :type gitguardian_url: str, optional
    :param status: Status of the honeytoken event., defaults to None
    :type status: HoneyTokenEventStatus, optional
    :param ip_address: IP address from which the event originates., defaults to None
    :type ip_address: str, optional
    :param action: The action made through the honeytoken., defaults to None
    :type action: str, optional
    :param data: An object with additional data related to the event, defaults to None
    :type data: dict, optional
    :param tags: tags, defaults to None
    :type tags: List[HoneyTokenEventTag], optional
    """

    def __init__(
        self,
        id_: str = None,
        honeytoken_id: str = None,
        triggered_at: str = None,
        gitguardian_url: str = None,
        status: HoneyTokenEventStatus = None,
        ip_address: str = None,
        action: str = None,
        data: dict = None,
        tags: List[HoneyTokenEventTag] = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if honeytoken_id is not None:
            self.honeytoken_id = honeytoken_id
        if triggered_at is not None:
            self.triggered_at = triggered_at
        if gitguardian_url is not None:
            self.gitguardian_url = gitguardian_url
        if status is not None:
            self.status = self._enum_matching(
                status, HoneyTokenEventStatus.list(), "status"
            )
        if ip_address is not None:
            self.ip_address = ip_address
        if action is not None:
            self.action = action
        if data is not None:
            self.data = data
        if tags is not None:
            self.tags = self._define_list(tags, HoneyTokenEventTag)
