# This file was generated by liblab | https://liblab.com/

from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel


class HoneyTokenSourceType(Enum):
    """An enumeration representing different categories.

    :cvar GITHUB: "github"
    :vartype GITHUB: str
    :cvar GITLAB: "gitlab"
    :vartype GITLAB: str
    :cvar BITBUCKET: "bitbucket"
    :vartype BITBUCKET: str
    :cvar AZURE_DEVOPS: "azure_devops"
    :vartype AZURE_DEVOPS: str
    """

    GITHUB = "github"
    GITLAB = "gitlab"
    BITBUCKET = "bitbucket"
    AZURE_DEVOPS = "azure_devops"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, HoneyTokenSourceType._member_map_.values()))


@JsonMap({"type_": "type"})
class HoneyTokenSource(BaseModel):
    """HoneyTokenSource

    :param type_: type_, defaults to None
    :type type_: HoneyTokenSourceType, optional
    :param name: name, defaults to None
    :type name: str, optional
    :param url: url, defaults to None
    :type url: str, optional
    :param open_issues_count: Number of open secret issues with at least one occurrence on this source.<br>, defaults to None
    :type open_issues_count: float, optional
    :param total_files_count: Number of files where the honeytoken appears.<br>, defaults to None
    :type total_files_count: float, optional
    :param files: Files where the honeytoken appears., defaults to None
    :type files: List[str], optional
    :param source_id: source_id, defaults to None
    :type source_id: float, optional
    """

    def __init__(
        self,
        type_: HoneyTokenSourceType = None,
        name: str = None,
        url: str = None,
        open_issues_count: float = None,
        total_files_count: float = None,
        files: List[str] = None,
        source_id: float = None,
    ):
        if type_ is not None:
            self.type_ = self._enum_matching(
                type_, HoneyTokenSourceType.list(), "type_"
            )
        if name is not None:
            self.name = name
        if url is not None:
            self.url = url
        if open_issues_count is not None:
            self.open_issues_count = open_issues_count
        if total_files_count is not None:
            self.total_files_count = total_files_count
        if files is not None:
            self.files = files
        if source_id is not None:
            self.source_id = source_id
