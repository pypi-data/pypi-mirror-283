# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .source_health_enum import SourceHealthEnum
from .scan import Scan
from .source_severity_breakdown import SourceSeverityBreakdown


@JsonMap({})
class SecretIncidentsBreakdown(BaseModel):
    """Detailed count of secret incidents linked to this source.

    :param open_secret_incidents: open_secret_incidents, defaults to None
    :type open_secret_incidents: SourceSeverityBreakdown, optional
    :param closed_secret_incidents: closed_secret_incidents, defaults to None
    :type closed_secret_incidents: SourceSeverityBreakdown, optional
    """

    def __init__(
        self,
        open_secret_incidents: SourceSeverityBreakdown = None,
        closed_secret_incidents: SourceSeverityBreakdown = None,
    ):
        if open_secret_incidents is not None:
            self.open_secret_incidents = self._define_object(
                open_secret_incidents, SourceSeverityBreakdown
            )
        if closed_secret_incidents is not None:
            self.closed_secret_incidents = self._define_object(
                closed_secret_incidents, SourceSeverityBreakdown
            )


@JsonMap({"id_": "id", "type_": "type"})
class Source(BaseModel):
    """Source

    :param id_: id_, defaults to None
    :type id_: int, optional
    :param url: url, defaults to None
    :type url: str, optional
    :param type_: type_, defaults to None
    :type type_: str, optional
    :param full_name: full_name, defaults to None
    :type full_name: str, optional
    :param health: health, defaults to None
    :type health: SourceHealthEnum, optional
    :param default_branch: Default branch of the source repository., defaults to None
    :type default_branch: str, optional
    :param default_branch_head: Reference of the HEAD of the default branch., defaults to None
    :type default_branch_head: str, optional
    :param open_incidents_count: Number of open secret incidents with at least one occurrence on this source.<br>, defaults to None
    :type open_incidents_count: int, optional
    :param closed_incidents_count: Number of closed secret incidents with at least one occurrence on this source.<br>, defaults to None
    :type closed_incidents_count: int, optional
    :param secret_incidents_breakdown: Detailed count of secret incidents linked to this source., defaults to None
    :type secret_incidents_breakdown: SecretIncidentsBreakdown, optional
    :param visibility: visibility, defaults to None
    :type visibility: str, optional
    :param external_id: VCS identifier of the source (e.g.: the GitHub id for a GitHub repository). Warning: external_id is a string because some VCS ids can be UUIDs.<br>, defaults to None
    :type external_id: str, optional
    :param source_criticality: Criticality of the source.<br>, defaults to None
    :type source_criticality: str, optional
    :param last_scan: last_scan, defaults to None
    :type last_scan: Scan, optional
    :param monitored: Whether the source is currently monitored by GitGuardian.<br>, defaults to None
    :type monitored: bool, optional
    """

    def __init__(
        self,
        id_: int = None,
        url: str = None,
        type_: str = None,
        full_name: str = None,
        health: SourceHealthEnum = None,
        default_branch: str = None,
        default_branch_head: str = None,
        open_incidents_count: int = None,
        closed_incidents_count: int = None,
        secret_incidents_breakdown: SecretIncidentsBreakdown = None,
        visibility: str = None,
        external_id: str = None,
        source_criticality: str = None,
        last_scan: Scan = None,
        monitored: bool = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if url is not None:
            self.url = url
        if type_ is not None:
            self.type_ = type_
        if full_name is not None:
            self.full_name = full_name
        if health is not None:
            self.health = self._enum_matching(health, SourceHealthEnum.list(), "health")
        if default_branch is not None:
            self.default_branch = default_branch
        if default_branch_head is not None:
            self.default_branch_head = default_branch_head
        if open_incidents_count is not None:
            self.open_incidents_count = open_incidents_count
        if closed_incidents_count is not None:
            self.closed_incidents_count = closed_incidents_count
        if secret_incidents_breakdown is not None:
            self.secret_incidents_breakdown = self._define_object(
                secret_incidents_breakdown, SecretIncidentsBreakdown
            )
        if visibility is not None:
            self.visibility = visibility
        if external_id is not None:
            self.external_id = external_id
        if source_criticality is not None:
            self.source_criticality = source_criticality
        if last_scan is not None:
            self.last_scan = self._define_object(last_scan, Scan)
        if monitored is not None:
            self.monitored = monitored
