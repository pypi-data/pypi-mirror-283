# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .occurrence_kind_enum import OccurrenceKindEnum
from .source import Source
from .match import Match
from .tag_enum import TagEnum
from .presence_enum import PresenceEnum


@JsonMap({"id_": "id", "date_": "date"})
class VcsOccurrence(BaseModel):
    """VcsOccurrence

    :param id_: id_, defaults to None
    :type id_: int, optional
    :param incident_id: incident_id, defaults to None
    :type incident_id: int, optional
    :param kind: kind, defaults to None
    :type kind: OccurrenceKindEnum, optional
    :param source: source, defaults to None
    :type source: Source, optional
    :param author_name: author_name, defaults to None
    :type author_name: str, optional
    :param author_info: author_info, defaults to None
    :type author_info: str, optional
    :param date_: date_, defaults to None
    :type date_: str, optional
    :param url: url, defaults to None
    :type url: str, optional
    :param matches: matches, defaults to None
    :type matches: List[Match], optional
    :param tags: tags, defaults to None
    :type tags: List[TagEnum], optional
    :param sha: sha, defaults to None
    :type sha: str, optional
    :param presence: presence, defaults to None
    :type presence: PresenceEnum, optional
    :param filepath: This is filename for old models with incomplete data, defaults to None
    :type filepath: str, optional
    """

    def __init__(
        self,
        id_: int = None,
        incident_id: int = None,
        kind: OccurrenceKindEnum = None,
        source: Source = None,
        author_name: str = None,
        author_info: str = None,
        date_: str = None,
        url: str = None,
        matches: List[Match] = None,
        tags: List[TagEnum] = None,
        sha: str = None,
        presence: PresenceEnum = None,
        filepath: str = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if incident_id is not None:
            self.incident_id = incident_id
        if kind is not None:
            self.kind = self._enum_matching(kind, OccurrenceKindEnum.list(), "kind")
        if source is not None:
            self.source = self._define_object(source, Source)
        if author_name is not None:
            self.author_name = author_name
        if author_info is not None:
            self.author_info = author_info
        if date_ is not None:
            self.date_ = date_
        if url is not None:
            self.url = url
        if matches is not None:
            self.matches = self._define_list(matches, Match)
        if tags is not None:
            self.tags = self._define_list(tags, TagEnum)
        if sha is not None:
            self.sha = sha
        if presence is not None:
            self.presence = self._enum_matching(
                presence, PresenceEnum.list(), "presence"
            )
        if filepath is not None:
            self.filepath = filepath
