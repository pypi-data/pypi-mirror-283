# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .audit_log_action_type_enum import AuditLogActionTypeEnum


@JsonMap({"id_": "id", "date_": "date"})
class AuditLog(BaseModel):
    """AuditLog

    :param id_: id_, defaults to None
    :type id_: int, optional
    :param date_: date_, defaults to None
    :type date_: str, optional
    :param member_email: member_email, defaults to None
    :type member_email: str, optional
    :param member_name: Name of the member at the time he/she did the event. It may differ from the current name<br>of the member if it has been updated since.<br>, defaults to None
    :type member_name: str, optional
    :param member_id: ID of the member that did the event. Can be null if the member has been deleted since then:<br>in that case use `member_name` and `member_email` to identify the author of the action.<br>, defaults to None
    :type member_id: int, optional
    :param api_token_id: ID of the API token associated to the event if it was done via the API.<br>Can be null if the action was not performed via the API.<br>, defaults to None
    :type api_token_id: str, optional
    :param ip_address: ip_address, defaults to None
    :type ip_address: str, optional
    :param target_ids: target_ids, defaults to None
    :type target_ids: List[str], optional
    :param action_type: action_type, defaults to None
    :type action_type: AuditLogActionTypeEnum, optional
    :param event_name: event_name, defaults to None
    :type event_name: str, optional
    :param data: Additional data associated to the event., defaults to None
    :type data: dict, optional
    """

    def __init__(
        self,
        id_: int = None,
        date_: str = None,
        member_email: str = None,
        member_name: str = None,
        member_id: int = None,
        api_token_id: str = None,
        ip_address: str = None,
        target_ids: List[str] = None,
        action_type: AuditLogActionTypeEnum = None,
        event_name: str = None,
        data: dict = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if date_ is not None:
            self.date_ = date_
        if member_email is not None:
            self.member_email = member_email
        if member_name is not None:
            self.member_name = member_name
        if member_id is not None:
            self.member_id = member_id
        if api_token_id is not None:
            self.api_token_id = api_token_id
        if ip_address is not None:
            self.ip_address = ip_address
        if target_ids is not None:
            self.target_ids = target_ids
        if action_type is not None:
            self.action_type = self._enum_matching(
                action_type, AuditLogActionTypeEnum.list(), "action_type"
            )
        if event_name is not None:
            self.event_name = event_name
        if data is not None:
            self.data = data
