# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .honey_token_label import HoneyTokenLabel


class CreateHoneytokenRequestType(Enum):
    """An enumeration representing different categories.

    :cvar AWS: "AWS"
    :vartype AWS: str
    """

    AWS = "AWS"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, CreateHoneytokenRequestType._member_map_.values())
        )


@JsonMap({"type_": "type"})
class CreateHoneytokenRequest(BaseModel):
    """CreateHoneytokenRequest

    :param name: honeytoken name.<br>
    :type name: str
    :param description: honeytoken description.<br>, defaults to None
    :type description: str, optional
    :param type_: honeytoken type<br>
    :type type_: CreateHoneytokenRequestType
    :param labels: Labels to set on the honeytoken. If the label doesn't exist, it will be created., defaults to None
    :type labels: List[HoneyTokenLabel], optional
    """

    def __init__(
        self,
        name: str,
        type_: CreateHoneytokenRequestType,
        description: str = None,
        labels: List[HoneyTokenLabel] = None,
    ):
        self.name = name
        if description is not None:
            self.description = description
        self.type_ = self._enum_matching(
            type_, CreateHoneytokenRequestType.list(), "type_"
        )
        if labels is not None:
            self.labels = self._define_list(labels, HoneyTokenLabel)
