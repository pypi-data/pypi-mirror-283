# This file was generated by liblab | https://liblab.com/

from .services.api_tokens import ApiTokensService
from .services.secret_incidents import SecretIncidentsService
from .services.secret_incident_notes import SecretIncidentNotesService
from .services.secret_occurrences import SecretOccurrencesService
from .services.invitations import InvitationsService
from .services.members import MembersService
from .services.scan_methods import ScanMethodsService
from .services.secret_detectors import SecretDetectorsService
from .services.quota import QuotaService
from .services.ia_c_scan_methods import IaCScanMethodsService
from .services.sources import SourcesService
from .services.audit_logs import AuditLogsService
from .services.status import StatusService
from .services.teams import TeamsService
from .services.team_invitations import TeamInvitationsService
from .services.team_memberships import TeamMembershipsService
from .services.team_requests import TeamRequestsService
from .services.team_sources import TeamSourcesService
from .services.honeytokens import HoneytokensService
from .services.honeytoken_notes import HoneytokenNotesService
from .services.honeytoken_sources import HoneytokenSourcesService
from .services.honeytokens_events import HoneytokensEventsService
from .services.labels import LabelsService
from .services.sca import ScaService
from .net.environment import Environment


class Gitguardian:
    def __init__(
        self, access_token: str = None, base_url: str = Environment.DEFAULT.value
    ):
        """
        Initializes Gitguardian the SDK class.
        """
        self.api_tokens = ApiTokensService(base_url=base_url)
        self.secret_incidents = SecretIncidentsService(base_url=base_url)
        self.secret_incident_notes = SecretIncidentNotesService(base_url=base_url)
        self.secret_occurrences = SecretOccurrencesService(base_url=base_url)
        self.invitations = InvitationsService(base_url=base_url)
        self.members = MembersService(base_url=base_url)
        self.scan_methods = ScanMethodsService(base_url=base_url)
        self.secret_detectors = SecretDetectorsService(base_url=base_url)
        self.quota = QuotaService(base_url=base_url)
        self.ia_c_scan_methods = IaCScanMethodsService(base_url=base_url)
        self.sources = SourcesService(base_url=base_url)
        self.audit_logs = AuditLogsService(base_url=base_url)
        self.status = StatusService(base_url=base_url)
        self.teams = TeamsService(base_url=base_url)
        self.team_invitations = TeamInvitationsService(base_url=base_url)
        self.team_memberships = TeamMembershipsService(base_url=base_url)
        self.team_requests = TeamRequestsService(base_url=base_url)
        self.team_sources = TeamSourcesService(base_url=base_url)
        self.honeytokens = HoneytokensService(base_url=base_url)
        self.honeytoken_notes = HoneytokenNotesService(base_url=base_url)
        self.honeytoken_sources = HoneytokenSourcesService(base_url=base_url)
        self.honeytokens_events = HoneytokensEventsService(base_url=base_url)
        self.labels = LabelsService(base_url=base_url)
        self.sca = ScaService(base_url=base_url)
        self.set_access_token(access_token)

    def set_base_url(self, base_url):
        """
        Sets the base URL for the entire SDK.
        """
        self.api_tokens.set_base_url(base_url)
        self.secret_incidents.set_base_url(base_url)
        self.secret_incident_notes.set_base_url(base_url)
        self.secret_occurrences.set_base_url(base_url)
        self.invitations.set_base_url(base_url)
        self.members.set_base_url(base_url)
        self.scan_methods.set_base_url(base_url)
        self.secret_detectors.set_base_url(base_url)
        self.quota.set_base_url(base_url)
        self.ia_c_scan_methods.set_base_url(base_url)
        self.sources.set_base_url(base_url)
        self.audit_logs.set_base_url(base_url)
        self.status.set_base_url(base_url)
        self.teams.set_base_url(base_url)
        self.team_invitations.set_base_url(base_url)
        self.team_memberships.set_base_url(base_url)
        self.team_requests.set_base_url(base_url)
        self.team_sources.set_base_url(base_url)
        self.honeytokens.set_base_url(base_url)
        self.honeytoken_notes.set_base_url(base_url)
        self.honeytoken_sources.set_base_url(base_url)
        self.honeytokens_events.set_base_url(base_url)
        self.labels.set_base_url(base_url)
        self.sca.set_base_url(base_url)

        return self

    def set_access_token(self, access_token: str):
        """
        Sets the access token for the entire SDK.
        """
        self.api_tokens.set_access_token(access_token)
        self.secret_incidents.set_access_token(access_token)
        self.secret_incident_notes.set_access_token(access_token)
        self.secret_occurrences.set_access_token(access_token)
        self.invitations.set_access_token(access_token)
        self.members.set_access_token(access_token)
        self.scan_methods.set_access_token(access_token)
        self.secret_detectors.set_access_token(access_token)
        self.quota.set_access_token(access_token)
        self.ia_c_scan_methods.set_access_token(access_token)
        self.sources.set_access_token(access_token)
        self.audit_logs.set_access_token(access_token)
        self.status.set_access_token(access_token)
        self.teams.set_access_token(access_token)
        self.team_invitations.set_access_token(access_token)
        self.team_memberships.set_access_token(access_token)
        self.team_requests.set_access_token(access_token)
        self.team_sources.set_access_token(access_token)
        self.honeytokens.set_access_token(access_token)
        self.honeytoken_notes.set_access_token(access_token)
        self.honeytoken_sources.set_access_token(access_token)
        self.honeytokens_events.set_access_token(access_token)
        self.labels.set_access_token(access_token)
        self.sca.set_access_token(access_token)

        return self


# c029837e0e474b76bc487506e8799df5e3335891efe4fb02bda7a1441840310c
