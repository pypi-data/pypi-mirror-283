# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.team_request import TeamRequest
from ..models.team_membership import TeamMembership
from ..models.accept_team_request_request import AcceptTeamRequestRequest


class TeamRequestsService(BaseService):

    @cast_models
    def list_team_requests(
        self,
        team_id: int,
        cursor: str = None,
        per_page: int = None,
        member_id: float = None,
    ) -> List[TeamRequest]:
        """List pending requests of a team.

        If you are using a personal access token, you must have "can manage" permission on the team or be a workspace manager.

        :param team_id: The id of the team
        :type team_id: int
        :param cursor: Pagination cursor., defaults to None
        :type cursor: str, optional
        :param per_page: Number of items to list per page., defaults to None
        :type per_page: int, optional
        :param member_id: member_id, defaults to None
        :type member_id: float, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Team request list
        :rtype: List[TeamRequest]
        """

        Validator(int).validate(team_id)
        Validator(str).is_optional().validate(cursor)
        Validator(int).is_optional().min(1).max(100).validate(per_page)
        Validator(float).is_optional().validate(member_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/teams/{{team_id}}/team_requests",
                self.get_default_headers(),
            )
            .add_path("team_id", team_id)
            .add_query("cursor", cursor)
            .add_query("per_page", per_page)
            .add_query("member_id", member_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return [TeamRequest._unmap(item) for item in response]

    @cast_models
    def create_team_request(self, team_id: int) -> TeamRequest:
        """Create an access request to a team.

        You must be authenticated via a Personal Access Token. You must not already have a pending
        request on the team, be a member of the team, be a workspace manager or have the
        restricted access level.

        :param team_id: The id of the team
        :type team_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Team request created
        :rtype: TeamRequest
        """

        Validator(int).validate(team_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/teams/{{team_id}}/team_requests",
                self.get_default_headers(),
            )
            .add_path("team_id", team_id)
            .serialize()
            .set_method("POST")
        )

        response = self.send_request(serialized_request)

        return TeamRequest._unmap(response)

    @cast_models
    def delete_team_request(self, team_id: int, team_request_id: int):
        """Cancel or decline a team request.

        If you are using a personal access token, you must have "can manage" permission on the team or be a workspace manager, or
        be the member who created the request being cancelled.

        :param team_id: The id of the team
        :type team_id: int
        :param team_request_id: The id of the team request
        :type team_request_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(int).validate(team_id)
        Validator(int).validate(team_request_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/teams/{{team_id}}/team_requests/{{team_request_id}}",
                self.get_default_headers(),
            )
            .add_path("team_id", team_id)
            .add_path("team_request_id", team_request_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def accept_team_request(
        self,
        team_id: int,
        team_request_id: int,
        request_body: AcceptTeamRequestRequest = None,
    ) -> TeamMembership:
        """Accept a team request by adding the member to the team.

        If you are using a personal access token, you must have "can manage" permission on the team or be a workspace manager.

        :param request_body: The request body., defaults to None
        :type request_body: AcceptTeamRequestRequest, optional
        :param team_id: The id of the team
        :type team_id: int
        :param team_request_id: The id of the team request
        :type team_request_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Team request accepted
        :rtype: TeamMembership
        """

        Validator(AcceptTeamRequestRequest).is_optional().validate(request_body)
        Validator(int).validate(team_id)
        Validator(int).validate(team_request_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/teams/{{team_id}}/team_requests/{{team_request_id}}/accept",
                self.get_default_headers(),
            )
            .add_path("team_id", team_id)
            .add_path("team_request_id", team_request_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return TeamMembership._unmap(response)

    @cast_models
    def list_member_team_requests(
        self,
        member_id: int,
        cursor: str = None,
        per_page: int = None,
        team_id: float = None,
    ) -> List[TeamRequest]:
        """List pending team requests of a member.

        If you are using a personal access token, you need to be either a workspace manager or the member being queried.

        :param member_id: The id of the workspace member
        :type member_id: int
        :param cursor: Pagination cursor., defaults to None
        :type cursor: str, optional
        :param per_page: Number of items to list per page., defaults to None
        :type per_page: int, optional
        :param team_id: team_id, defaults to None
        :type team_id: float, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Team request list
        :rtype: List[TeamRequest]
        """

        Validator(int).validate(member_id)
        Validator(str).is_optional().validate(cursor)
        Validator(int).is_optional().min(1).max(100).validate(per_page)
        Validator(float).is_optional().validate(team_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/members/{{member_id}}/team_requests",
                self.get_default_headers(),
            )
            .add_path("member_id", member_id)
            .add_query("cursor", cursor)
            .add_query("per_page", per_page)
            .add_query("team_id", team_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return [TeamRequest._unmap(item) for item in response]
