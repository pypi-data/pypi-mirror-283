# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.sca_scan_diff_request import ScaScanDiffRequest
from ..models.sca_scan_diff_ok_response import ScaScanDiffOkResponse
from ..models.sca_scan_all_request import ScaScanAllRequest
from ..models.sca_scan_all_ok_response import ScaScanAllOkResponse
from ..models.compute_sca_files_ok_response import ComputeScaFilesOkResponse


class ScaService(BaseService):

    @cast_models
    def compute_sca_files(self, files: str = None) -> ComputeScaFilesOkResponse:
        """Compute SCA files amongst a list of files.

        :param files: List of input files, comma separated., defaults to None
        :type files: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return:
        :rtype: ComputeScaFilesOkResponse
        """

        Validator(str).is_optional().validate(files)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/sca/compute_sca_files", self.get_default_headers()
            )
            .add_query("files", files)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return ComputeScaFilesOkResponse._unmap(response)

    @cast_models
    def sca_scan_all(self, request_body: dict = None) -> ScaScanAllOkResponse:
        """Scan a directory using GitGuardian SCA engine

        :param request_body: The request body., defaults to None
        :type request_body: dict, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return:
        :rtype: ScaScanAllOkResponse
        """

        Validator(dict).is_optional().validate(request_body)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/sca/sca_scan_all", self.get_default_headers()
            )
            .serialize()
            .set_method("POST")
            .set_body(request_body, "multipart/form-data")
        )

        response = self.send_request(serialized_request)

        return ScaScanAllOkResponse._unmap(response)

    @cast_models
    def sca_scan_diff(self, request_body: dict = None) -> ScaScanDiffOkResponse:
        """Scan a diff using GitGuardian SCA engine

        :param request_body: The request body., defaults to None
        :type request_body: dict, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return:
        :rtype: ScaScanDiffOkResponse
        """

        Validator(dict).is_optional().validate(request_body)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/sca/sca_scan_diff", self.get_default_headers()
            )
            .serialize()
            .set_method("POST")
            .set_body(request_body, "multipart/form-data")
        )

        response = self.send_request(serialized_request)

        return ScaScanDiffOkResponse._unmap(response)
