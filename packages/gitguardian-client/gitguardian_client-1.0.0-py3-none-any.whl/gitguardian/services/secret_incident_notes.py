# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.update_incident_note_request import UpdateIncidentNoteRequest
from ..models.list_incident_notes_ordering import ListIncidentNotesOrdering
from ..models.incident_note import IncidentNote
from ..models.create_incident_note_request import CreateIncidentNoteRequest


class SecretIncidentNotesService(BaseService):

    @cast_models
    def list_incident_notes(
        self,
        incident_id: int,
        cursor: str = None,
        page: int = None,
        per_page: int = None,
        ordering: ListIncidentNotesOrdering = None,
        member_id: int = None,
        search: str = None,
    ) -> List[IncidentNote]:
        """List notes left on a secret incident in chronological order.

        :param incident_id: The id of the incident to retrieve
        :type incident_id: int
        :param cursor: Pagination cursor., defaults to None
        :type cursor: str, optional
        :param page: Page number., defaults to None
        :type page: int, optional
        :param per_page: Number of items to list per page., defaults to None
        :type per_page: int, optional
        :param ordering: Sort the results by their field value. The default sort is ASC, DESC if the
        field is preceded by a '-'., defaults to None
        :type ordering: ListIncidentNotesOrdering, optional
        :param member_id: Filter by member id., defaults to None
        :type member_id: int, optional
        :param search: search, defaults to None
        :type search: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Incident Note List
        :rtype: List[IncidentNote]
        """

        Validator(int).validate(incident_id)
        Validator(str).is_optional().validate(cursor)
        Validator(int).is_optional().min(0).validate(page)
        Validator(int).is_optional().min(1).max(100).validate(per_page)
        Validator(ListIncidentNotesOrdering).is_optional().validate(ordering)
        Validator(int).is_optional().validate(member_id)
        Validator(str).is_optional().validate(search)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/incidents/secrets/{{incident_id}}/notes",
                self.get_default_headers(),
            )
            .add_path("incident_id", incident_id)
            .add_query("cursor", cursor)
            .add_query("page", page)
            .add_query("per_page", per_page)
            .add_query("ordering", ordering)
            .add_query("member_id", member_id)
            .add_query("search", search)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return [IncidentNote._unmap(item) for item in response]

    @cast_models
    def create_incident_note(
        self, incident_id: int, request_body: CreateIncidentNoteRequest = None
    ) -> IncidentNote:
        """Add a note on a secret incident.

        :param request_body: The request body., defaults to None
        :type request_body: CreateIncidentNoteRequest, optional
        :param incident_id: The id of the incident to retrieve
        :type incident_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The note was created successfully.
        :rtype: IncidentNote
        """

        Validator(CreateIncidentNoteRequest).is_optional().validate(request_body)
        Validator(int).validate(incident_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/incidents/secrets/{{incident_id}}/notes",
                self.get_default_headers(),
            )
            .add_path("incident_id", incident_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return IncidentNote._unmap(response)

    @cast_models
    def update_incident_note(
        self,
        incident_id: int,
        note_id: int,
        request_body: UpdateIncidentNoteRequest = None,
    ) -> IncidentNote:
        """Update an existing comment on a secret incident. Only incident notes
        created by the current API key can be updated.

        :param request_body: The request body., defaults to None
        :type request_body: UpdateIncidentNoteRequest, optional
        :param incident_id: The id of the incident to retrieve
        :type incident_id: int
        :param note_id: The id of the incident note to update
        :type note_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The note was updated successfully.
        :rtype: IncidentNote
        """

        Validator(UpdateIncidentNoteRequest).is_optional().validate(request_body)
        Validator(int).validate(incident_id)
        Validator(int).validate(note_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/incidents/secrets/{{incident_id}}/notes/{{note_id}}",
                self.get_default_headers(),
            )
            .add_path("incident_id", incident_id)
            .add_path("note_id", note_id)
            .serialize()
            .set_method("PATCH")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return IncidentNote._unmap(response)

    @cast_models
    def delete_incident_note(self, incident_id: int, note_id: int):
        """Delete an existing comment on a secret incident. Only incident notes
        created by the current API key can be deleted.

        :param incident_id: The id of the incident to retrieve
        :type incident_id: int
        :param note_id: The id of the incident note to delete
        :type note_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(int).validate(incident_id)
        Validator(int).validate(note_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/incidents/secrets/{{incident_id}}/notes/{{note_id}}",
                self.get_default_headers(),
            )
            .add_path("incident_id", incident_id)
            .add_path("note_id", note_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)

        return response
