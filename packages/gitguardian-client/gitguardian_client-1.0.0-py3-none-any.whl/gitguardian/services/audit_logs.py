# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.audit_log import AuditLog


class AuditLogsService(BaseService):

    @cast_models
    def list_audit_logs(
        self,
        cursor: str = None,
        per_page: int = None,
        date_before: str = None,
        date_after: str = None,
        event_name: str = None,
        member_id: int = None,
        member_name: str = None,
        member_email: str = None,
        api_token_id: str = None,
        ip_address: str = None,
    ) -> List[AuditLog]:
        """List audit logs.

        :param cursor: Pagination cursor., defaults to None
        :type cursor: str, optional
        :param per_page: Number of items to list per page., defaults to None
        :type per_page: int, optional
        :param date_before: date_before, defaults to None
        :type date_before: str, optional
        :param date_after: date_after, defaults to None
        :type date_after: str, optional
        :param event_name: Entries matching this event name., defaults to None
        :type event_name: str, optional
        :param member_id: The id of the member to retrieve., defaults to None
        :type member_id: int, optional
        :param member_name: Entries matching this member name., defaults to None
        :type member_name: str, optional
        :param member_email: Entries matching this member email., defaults to None
        :type member_email: str, optional
        :param api_token_id: Entries matching this API token id., defaults to None
        :type api_token_id: str, optional
        :param ip_address: Entries matching this IP address., defaults to None
        :type ip_address: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Audit logs List
        :rtype: List[AuditLog]
        """

        Validator(str).is_optional().validate(cursor)
        Validator(int).is_optional().min(1).max(100).validate(per_page)
        Validator(str).is_optional().validate(date_before)
        Validator(str).is_optional().validate(date_after)
        Validator(str).is_optional().validate(event_name)
        Validator(int).is_optional().validate(member_id)
        Validator(str).is_optional().validate(member_name)
        Validator(str).is_optional().validate(member_email)
        Validator(str).is_optional().validate(api_token_id)
        Validator(str).is_optional().validate(ip_address)

        serialized_request = (
            Serializer(f"{self.base_url}/v1/audit_logs", self.get_default_headers())
            .add_query("cursor", cursor)
            .add_query("per_page", per_page)
            .add_query("date_before", date_before)
            .add_query("date_after", date_after)
            .add_query("event_name", event_name)
            .add_query("member_id", member_id)
            .add_query("member_name", member_name)
            .add_query("member_email", member_email)
            .add_query("api_token_id", api_token_id)
            .add_query("ip_address", ip_address)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return [AuditLog._unmap(item) for item in response]
