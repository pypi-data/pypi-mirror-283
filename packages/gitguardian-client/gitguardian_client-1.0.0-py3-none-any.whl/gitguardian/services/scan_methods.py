# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.scan_result import ScanResult
from ..models.document import Document


class ScanMethodsService(BaseService):

    @cast_models
    def content_scan(self, request_body: Document = None) -> ScanResult:
        """Scan provided document content for policy breaks.

        Request body shouldn't exceed 1MB.

        This endpoint is stateless and as such will not store in our servers neither the documents nor the secrets found.

        :param request_body: The request body., defaults to None
        :type request_body: Document, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful Scan
        :rtype: ScanResult
        """

        Validator(Document).is_optional().validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/v1/scan", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return ScanResult._unmap(response)

    @cast_models
    def multiple_scan(self, request_body: List[Document] = None) -> List[ScanResult]:
        """Scan provided document contents for policy breaks.
        Multiple documents are returned by the same index order.

        There should not be more than 20 documents in the payload. Individual documents should not exceed 1MB.

        Quota usage is based on requests and not on the content size. One request to this endpoint will consume 1 API call.
        Also note that the quota is set on a rolling month and not on a calendar month.
        See [this documentation](https://docs.gitguardian.com/api-docs/usage-and-quotas) for more details.

        This endpoint is stateless and as such will not store in our servers neither the documents nor the secrets found.

        :param request_body: The request body., defaults to None
        :type request_body: List[Document], optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful Scan
        :rtype: List[ScanResult]
        """

        Validator(Document).is_array().is_optional().validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/v1/multiscan", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return [ScanResult._unmap(item) for item in response]
