# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.update_team_invitation_request import UpdateTeamInvitationRequest
from ..models.team_permission_enum import TeamPermissionEnum
from ..models.team_invitation import TeamInvitation
from ..models.incident_permission_enum import IncidentPermissionEnum
from ..models.create_team_invitations_request import CreateTeamInvitationsRequest


class TeamInvitationsService(BaseService):

    @cast_models
    def list_team_invitation(
        self,
        team_id: int,
        cursor: str = None,
        per_page: int = None,
        invitation_id: int = None,
        team_permission: TeamPermissionEnum = None,
        incident_permission: IncidentPermissionEnum = None,
    ) -> List[TeamInvitation]:
        """List all existing team invitations.

        If you are using a personal access token, you must have "can manage" permission on the team or be a workspace manager.

        :param team_id: The id of the team
        :type team_id: int
        :param cursor: Pagination cursor., defaults to None
        :type cursor: str, optional
        :param per_page: Number of items to list per page., defaults to None
        :type per_page: int, optional
        :param invitation_id: The id of an invitation to filter on, defaults to None
        :type invitation_id: int, optional
        :param team_permission: team_permission, defaults to None
        :type team_permission: TeamPermissionEnum, optional
        :param incident_permission: incident_permission, defaults to None
        :type incident_permission: IncidentPermissionEnum, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Team invitation list
        :rtype: List[TeamInvitation]
        """

        Validator(int).validate(team_id)
        Validator(str).is_optional().validate(cursor)
        Validator(int).is_optional().min(1).max(100).validate(per_page)
        Validator(int).is_optional().validate(invitation_id)
        Validator(TeamPermissionEnum).is_optional().validate(team_permission)
        Validator(IncidentPermissionEnum).is_optional().validate(incident_permission)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/teams/{{team_id}}/team_invitations",
                self.get_default_headers(),
            )
            .add_path("team_id", team_id)
            .add_query("cursor", cursor)
            .add_query("per_page", per_page)
            .add_query("invitation_id", invitation_id)
            .add_query("team_permission", team_permission)
            .add_query("incident_permission", incident_permission)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return [TeamInvitation._unmap(item) for item in response]

    @cast_models
    def create_team_invitations(
        self, team_id: int, request_body: CreateTeamInvitationsRequest = None
    ) -> TeamInvitation:
        """This endpoint allows you to create a team invitation from an existing team and invitation.

        If you are using a personal access token, you must have "can manage" permission on the team or be a workspace manager.

        :param request_body: The request body., defaults to None
        :type request_body: CreateTeamInvitationsRequest, optional
        :param team_id: The id of the team
        :type team_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Team invitation created
        :rtype: TeamInvitation
        """

        Validator(CreateTeamInvitationsRequest).is_optional().validate(request_body)
        Validator(int).validate(team_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/teams/{{team_id}}/team_invitations",
                self.get_default_headers(),
            )
            .add_path("team_id", team_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return TeamInvitation._unmap(response)

    @cast_models
    def update_team_invitation(
        self,
        team_id: int,
        team_invitation_id: int,
        request_body: UpdateTeamInvitationRequest = None,
    ) -> TeamInvitation:
        """Update permissions of a team invitation.

        If you are using a personal access token, you must have "can manage" permission on the team or be a workspace manager.

        :param request_body: The request body., defaults to None
        :type request_body: UpdateTeamInvitationRequest, optional
        :param team_id: The id of the team
        :type team_id: int
        :param team_invitation_id: The id of the team invitation
        :type team_invitation_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Team invitation was updated successfully.
        :rtype: TeamInvitation
        """

        Validator(UpdateTeamInvitationRequest).is_optional().validate(request_body)
        Validator(int).validate(team_id)
        Validator(int).validate(team_invitation_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/teams/{{team_id}}/team_invitations/{{team_invitation_id}}",
                self.get_default_headers(),
            )
            .add_path("team_id", team_id)
            .add_path("team_invitation_id", team_invitation_id)
            .serialize()
            .set_method("PATCH")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return TeamInvitation._unmap(response)

    @cast_models
    def delete_team_invitation(self, team_id: int, team_invitation_id: int):
        """Delete an existing team invitation.

        If you are using a personal access token, you must have "can manage" permission on the team or be a workspace manager.

        :param team_id: The id of the team
        :type team_id: int
        :param team_invitation_id: The id of the team invitation
        :type team_invitation_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(int).validate(team_id)
        Validator(int).validate(team_invitation_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/teams/{{team_id}}/team_invitations/{{team_invitation_id}}",
                self.get_default_headers(),
            )
            .add_path("team_id", team_id)
            .add_path("team_invitation_id", team_invitation_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)

        return response
