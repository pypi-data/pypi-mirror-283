# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.public_jwt_create_request import PublicJwtCreateRequest
from ..models.public_jwt_create_ok_response import PublicJwtCreateOkResponse
from ..models.list_api_tokens_ordering import ListApiTokensOrdering
from ..models.api_token_status_enum import ApiTokenStatusEnum
from ..models.api_token_scope_enum import ApiTokenScopeEnum
from ..models.api_token_details import ApiTokenDetails


class ApiTokensService(BaseService):

    @cast_models
    def self_retrieve_api_token(self) -> ApiTokenDetails:
        """self_retrieve_api_token

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Current token details
        :rtype: ApiTokenDetails
        """

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/api_tokens/self", self.get_default_headers()
            )
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return ApiTokenDetails._unmap(response)

    @cast_models
    def self_delete_api_token(self):
        """self_delete_api_token

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/api_tokens/self", self.get_default_headers()
            )
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def list_api_tokens(
        self,
        cursor: str = None,
        per_page: int = None,
        status: ApiTokenStatusEnum = None,
        member_id: int = None,
        creator_id: int = None,
        scopes: ApiTokenScopeEnum = None,
        search: str = None,
        ordering: ListApiTokensOrdering = None,
    ) -> List[ApiTokenDetails]:
        """List all the tokens in the workspace, some filters are available and described
        below.

        :param cursor: Pagination cursor., defaults to None
        :type cursor: str, optional
        :param per_page: Number of items to list per page., defaults to None
        :type per_page: int, optional
        :param status: status, defaults to None
        :type status: ApiTokenStatusEnum, optional
        :param member_id: Filter by member id., defaults to None
        :type member_id: int, optional
        :param creator_id: Filter by creator id., defaults to None
        :type creator_id: int, optional
        :param scopes: scopes, defaults to None
        :type scopes: ApiTokenScopeEnum, optional
        :param search: search, defaults to None
        :type search: str, optional
        :param ordering: Sort the results by their field value. The default sort is ASC, DESC if the
        field is preceded by a '-'., defaults to None
        :type ordering: ListApiTokensOrdering, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: API tokens list
        :rtype: List[ApiTokenDetails]
        """

        Validator(str).is_optional().validate(cursor)
        Validator(int).is_optional().min(1).max(100).validate(per_page)
        Validator(ApiTokenStatusEnum).is_optional().validate(status)
        Validator(int).is_optional().validate(member_id)
        Validator(int).is_optional().validate(creator_id)
        Validator(ApiTokenScopeEnum).is_optional().validate(scopes)
        Validator(str).is_optional().validate(search)
        Validator(ListApiTokensOrdering).is_optional().validate(ordering)

        serialized_request = (
            Serializer(f"{self.base_url}/v1/api_tokens", self.get_default_headers())
            .add_query("cursor", cursor)
            .add_query("per_page", per_page)
            .add_query("status", status)
            .add_query("member_id", member_id)
            .add_query("creator_id", creator_id)
            .add_query("scopes", scopes)
            .add_query("search", search)
            .add_query("ordering", ordering)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return [ApiTokenDetails._unmap(item) for item in response]

    @cast_models
    def retrieve_api_token(self, token_id: str) -> ApiTokenDetails:
        """retrieve_api_token

        :param token_id: Id of the token.
        :type token_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Current token details
        :rtype: ApiTokenDetails
        """

        Validator(str).validate(token_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/api_tokens/{{token_id}}",
                self.get_default_headers(),
            )
            .add_path("token_id", token_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return ApiTokenDetails._unmap(response)

    @cast_models
    def delete_api_token(self, token_id: str):
        """delete_api_token

        :param token_id: Id of the token.
        :type token_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(token_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/api_tokens/{{token_id}}",
                self.get_default_headers(),
            )
            .add_path("token_id", token_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def public_jwt_create(
        self, request_body: PublicJwtCreateRequest = None
    ) -> PublicJwtCreateOkResponse:
        """Create a short lived JWT for authentication to specific GitGuardian services,
        including HasMySecretLeaked.

        :param request_body: The request body., defaults to None
        :type request_body: PublicJwtCreateRequest, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Created JWT
        :rtype: PublicJwtCreateOkResponse
        """

        Validator(PublicJwtCreateRequest).is_optional().validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/v1/auth/jwt", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return PublicJwtCreateOkResponse._unmap(response)
