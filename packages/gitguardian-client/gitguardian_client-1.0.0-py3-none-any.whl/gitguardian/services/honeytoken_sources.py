# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.list_honeytoken_sources_ordering import ListHoneytokenSourcesOrdering
from ..models.honey_token_source import HoneyTokenSource


class HoneytokenSourcesService(BaseService):

    @cast_models
    def list_honeytoken_sources(
        self,
        honeytoken_id: str,
        cursor: str = None,
        per_page: int = None,
        ordering: ListHoneytokenSourcesOrdering = None,
    ) -> List[HoneyTokenSource]:
        """List sources where a honeytoken appears.

        :param honeytoken_id: The id of the honeytoken to retrieve
        :type honeytoken_id: str
        :param cursor: Pagination cursor., defaults to None
        :type cursor: str, optional
        :param per_page: Number of items to list per page., defaults to None
        :type per_page: int, optional
        :param ordering: Sort the results by their field value. The default sort is ASC, DESC if the
        field is preceded by a '-'., defaults to None
        :type ordering: ListHoneytokenSourcesOrdering, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Honeytoken Sources List
        :rtype: List[HoneyTokenSource]
        """

        Validator(str).validate(honeytoken_id)
        Validator(str).is_optional().validate(cursor)
        Validator(int).is_optional().min(1).max(100).validate(per_page)
        Validator(ListHoneytokenSourcesOrdering).is_optional().validate(ordering)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/honeytokens/{{honeytoken_id}}/sources",
                self.get_default_headers(),
            )
            .add_path("honeytoken_id", honeytoken_id)
            .add_query("cursor", cursor)
            .add_query("per_page", per_page)
            .add_query("ordering", ordering)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return [HoneyTokenSource._unmap(item) for item in response]
