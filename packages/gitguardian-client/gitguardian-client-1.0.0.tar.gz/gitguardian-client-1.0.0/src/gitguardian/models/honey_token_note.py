# This file was generated by liblab | https://liblab.com/

from .utils.json_map import JsonMap
from .base import BaseModel


@JsonMap({"id_": "id"})
class HoneyTokenNote(BaseModel):
    """HoneyTokenNote

    :param id_: id_, defaults to None
    :type id_: str, optional
    :param honeytoken_id: Id of the related Honeytoken, defaults to None
    :type honeytoken_id: str, optional
    :param member_id: Id of the member who created this note. Can be null if the note was<br>not created by a member or if the member was deleted.<br>, defaults to None
    :type member_id: int, optional
    :param api_token_id: ID of the API key which created this note. Can be null if the note<br>was not created via the API.<br>, defaults to None
    :type api_token_id: str, optional
    :param created_at: Creation date of the note, defaults to None
    :type created_at: str, optional
    :param updated_at: Last time the content of the note was updated. Null if the<br>comment was never modified.<br>, defaults to None
    :type updated_at: str, optional
    :param comment: comment, defaults to None
    :type comment: str, optional
    """

    def __init__(
        self,
        id_: str = None,
        honeytoken_id: str = None,
        member_id: int = None,
        api_token_id: str = None,
        created_at: str = None,
        updated_at: str = None,
        comment: str = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if honeytoken_id is not None:
            self.honeytoken_id = honeytoken_id
        if member_id is not None:
            self.member_id = member_id
        if api_token_id is not None:
            self.api_token_id = api_token_id
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if comment is not None:
            self.comment = comment
