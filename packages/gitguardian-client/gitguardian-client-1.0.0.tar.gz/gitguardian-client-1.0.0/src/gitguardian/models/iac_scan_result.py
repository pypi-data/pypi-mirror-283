# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .entities_with_incidents import EntitiesWithIncidents


@JsonMap({"id_": "id", "type_": "type"})
class IacScanResult(BaseModel):
    """IacScanResult

    :param id_: id_, defaults to None
    :type id_: str, optional
    :param iac_engine_version: iac_engine_version, defaults to None
    :type iac_engine_version: str, optional
    :param type_: type_, defaults to None
    :type type_: str, optional
    :param source_found: source_found, defaults to None
    :type source_found: bool, optional
    :param entities_with_incidents: Files and their incidents, defaults to None
    :type entities_with_incidents: List[EntitiesWithIncidents], optional
    """

    def __init__(
        self,
        id_: str = None,
        iac_engine_version: str = None,
        type_: str = None,
        source_found: bool = None,
        entities_with_incidents: List[EntitiesWithIncidents] = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if iac_engine_version is not None:
            self.iac_engine_version = iac_engine_version
        if type_ is not None:
            self.type_ = type_
        if source_found is not None:
            self.source_found = source_found
        if entities_with_incidents is not None:
            self.entities_with_incidents = self._define_list(
                entities_with_incidents, EntitiesWithIncidents
            )
