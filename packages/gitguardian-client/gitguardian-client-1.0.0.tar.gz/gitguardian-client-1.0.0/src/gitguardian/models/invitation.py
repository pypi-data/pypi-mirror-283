# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .non_owner_member_access_level_enum import NonOwnerMemberAccessLevelEnum


@JsonMap({"id_": "id", "date_": "date"})
class Invitation(BaseModel):
    """Invitation

    :param id_: id_, defaults to None
    :type id_: int, optional
    :param email: email, defaults to None
    :type email: str, optional
    :param role: role, defaults to None
    :type role: NonOwnerMemberAccessLevelEnum, optional
    :param access_level: access_level, defaults to None
    :type access_level: NonOwnerMemberAccessLevelEnum, optional
    :param date_: Creation date of the invitation, defaults to None
    :type date_: str, optional
    """

    def __init__(
        self,
        id_: int = None,
        email: str = None,
        role: NonOwnerMemberAccessLevelEnum = None,
        access_level: NonOwnerMemberAccessLevelEnum = None,
        date_: str = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if email is not None:
            self.email = email
        if role is not None:
            self.role = self._enum_matching(
                role, NonOwnerMemberAccessLevelEnum.list(), "role"
            )
        if access_level is not None:
            self.access_level = self._enum_matching(
                access_level, NonOwnerMemberAccessLevelEnum.list(), "access_level"
            )
        if date_ is not None:
            self.date_ = date_
