# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .member_access_level_enum import MemberAccessLevelEnum


@JsonMap({"id_": "id"})
class Member(BaseModel):
    """Member

    :param id_: id_, defaults to None
    :type id_: int, optional
    :param name: name, defaults to None
    :type name: str, optional
    :param email: email, defaults to None
    :type email: str, optional
    :param role: role, defaults to None
    :type role: MemberAccessLevelEnum, optional
    :param access_level: access_level, defaults to None
    :type access_level: MemberAccessLevelEnum, optional
    :param created_at: created_at, defaults to None
    :type created_at: str, optional
    :param last_login: last_login, defaults to None
    :type last_login: str, optional
    """

    def __init__(
        self,
        id_: int = None,
        name: str = None,
        email: str = None,
        role: MemberAccessLevelEnum = None,
        access_level: MemberAccessLevelEnum = None,
        created_at: str = None,
        last_login: str = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if name is not None:
            self.name = name
        if email is not None:
            self.email = email
        if role is not None:
            self.role = self._enum_matching(role, MemberAccessLevelEnum.list(), "role")
        if access_level is not None:
            self.access_level = self._enum_matching(
                access_level, MemberAccessLevelEnum.list(), "access_level"
            )
        if created_at is not None:
            self.created_at = created_at
        if last_login is not None:
            self.last_login = last_login
