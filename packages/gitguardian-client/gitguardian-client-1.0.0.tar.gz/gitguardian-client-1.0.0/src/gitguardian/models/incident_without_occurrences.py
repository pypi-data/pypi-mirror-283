# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .detector import Detector
from .status_enum import StatusEnum
from .secret_status_enum import SecretStatusEnum
from .severity_enum import SeverityEnum
from .validity_enum import ValidityEnum
from .tag_enum import TagEnum
from .vcs_occurrence import VcsOccurrence


@JsonMap({"id_": "id", "date_": "date"})
class IncidentWithoutOccurrences(BaseModel):
    """IncidentWithoutOccurrences

    :param id_: id_, defaults to None
    :type id_: int, optional
    :param date_: date_, defaults to None
    :type date_: str, optional
    :param detector: detector, defaults to None
    :type detector: Detector, optional
    :param secret_hash: secret_hash, defaults to None
    :type secret_hash: str, optional
    :param hmsl_hash: hmsl_hash, defaults to None
    :type hmsl_hash: str, optional
    :param gitguardian_url: gitguardian_url, defaults to None
    :type gitguardian_url: str, optional
    :param regression: regression, defaults to None
    :type regression: bool, optional
    :param status: status, defaults to None
    :type status: StatusEnum, optional
    :param assignee_id: assignee_id, defaults to None
    :type assignee_id: int, optional
    :param assignee_email: assignee_email, defaults to None
    :type assignee_email: str, optional
    :param occurrences_count: occurrences_count, defaults to None
    :type occurrences_count: int, optional
    :param ignore_reason: ignore_reason, defaults to None
    :type ignore_reason: SecretStatusEnum, optional
    :param triggered_at: triggered_at, defaults to None
    :type triggered_at: str, optional
    :param ignored_at: ignored_at, defaults to None
    :type ignored_at: str, optional
    :param ignorer_id: ignorer_id, defaults to None
    :type ignorer_id: int, optional
    :param ignorer_api_token_id: ignorer_api_token_id, defaults to None
    :type ignorer_api_token_id: str, optional
    :param resolver_id: resolver_id, defaults to None
    :type resolver_id: int, optional
    :param resolver_api_token_id: resolver_api_token_id, defaults to None
    :type resolver_api_token_id: str, optional
    :param secret_revoked: secret_revoked, defaults to None
    :type secret_revoked: bool, optional
    :param severity: severity, defaults to None
    :type severity: SeverityEnum, optional
    :param validity: validity, defaults to None
    :type validity: ValidityEnum, optional
    :param resolved_at: resolved_at, defaults to None
    :type resolved_at: str, optional
    :param share_url: share_url, defaults to None
    :type share_url: str, optional
    :param tags: tags, defaults to None
    :type tags: List[TagEnum], optional
    :param occurrences: occurrences, defaults to None
    :type occurrences: List[VcsOccurrence], optional
    """

    def __init__(
        self,
        id_: int = None,
        date_: str = None,
        detector: Detector = None,
        secret_hash: str = None,
        hmsl_hash: str = None,
        gitguardian_url: str = None,
        regression: bool = None,
        status: StatusEnum = None,
        assignee_id: int = None,
        assignee_email: str = None,
        occurrences_count: int = None,
        ignore_reason: SecretStatusEnum = None,
        triggered_at: str = None,
        ignored_at: str = None,
        ignorer_id: int = None,
        ignorer_api_token_id: str = None,
        resolver_id: int = None,
        resolver_api_token_id: str = None,
        secret_revoked: bool = None,
        severity: SeverityEnum = None,
        validity: ValidityEnum = None,
        resolved_at: str = None,
        share_url: str = None,
        tags: List[TagEnum] = None,
        occurrences: List[VcsOccurrence] = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if date_ is not None:
            self.date_ = date_
        if detector is not None:
            self.detector = self._define_object(detector, Detector)
        if secret_hash is not None:
            self.secret_hash = secret_hash
        if hmsl_hash is not None:
            self.hmsl_hash = hmsl_hash
        if gitguardian_url is not None:
            self.gitguardian_url = gitguardian_url
        if regression is not None:
            self.regression = regression
        if status is not None:
            self.status = self._enum_matching(status, StatusEnum.list(), "status")
        if assignee_id is not None:
            self.assignee_id = assignee_id
        if assignee_email is not None:
            self.assignee_email = assignee_email
        if occurrences_count is not None:
            self.occurrences_count = occurrences_count
        if ignore_reason is not None:
            self.ignore_reason = self._enum_matching(
                ignore_reason, SecretStatusEnum.list(), "ignore_reason"
            )
        if triggered_at is not None:
            self.triggered_at = triggered_at
        if ignored_at is not None:
            self.ignored_at = ignored_at
        if ignorer_id is not None:
            self.ignorer_id = ignorer_id
        if ignorer_api_token_id is not None:
            self.ignorer_api_token_id = ignorer_api_token_id
        if resolver_id is not None:
            self.resolver_id = resolver_id
        if resolver_api_token_id is not None:
            self.resolver_api_token_id = resolver_api_token_id
        if secret_revoked is not None:
            self.secret_revoked = secret_revoked
        if severity is not None:
            self.severity = self._enum_matching(
                severity, SeverityEnum.list(), "severity"
            )
        if validity is not None:
            self.validity = self._enum_matching(
                validity, ValidityEnum.list(), "validity"
            )
        if resolved_at is not None:
            self.resolved_at = resolved_at
        if share_url is not None:
            self.share_url = share_url
        if tags is not None:
            self.tags = self._define_list(tags, TagEnum)
        if occurrences is not None:
            self.occurrences = self._define_list(occurrences, VcsOccurrence)
