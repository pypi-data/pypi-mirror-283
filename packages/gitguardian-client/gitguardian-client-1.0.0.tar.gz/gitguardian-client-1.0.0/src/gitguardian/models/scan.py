# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .scan_status_enum import ScanStatusEnum


@JsonMap({"date_": "date"})
class Scan(BaseModel):
    """Scan

    :param date_: Creation date of this historical scan, defaults to None
    :type date_: str, optional
    :param status: status, defaults to None
    :type status: ScanStatusEnum, optional
    :param failing_reason: Failure reason of the historical scan, if status is failed, defaults to None
    :type failing_reason: str, optional
    :param commits_scanned: Number of commits scanned, defaults to None
    :type commits_scanned: int, optional
    :param branches_scanned: Number of branches scanned, defaults to None
    :type branches_scanned: int, optional
    :param duration: Historical scan duration, defaults to None
    :type duration: str, optional
    """

    def __init__(
        self,
        date_: str = None,
        status: ScanStatusEnum = None,
        failing_reason: str = None,
        commits_scanned: int = None,
        branches_scanned: int = None,
        duration: str = None,
    ):
        if date_ is not None:
            self.date_ = date_
        if status is not None:
            self.status = self._enum_matching(status, ScanStatusEnum.list(), "status")
        if failing_reason is not None:
            self.failing_reason = failing_reason
        if commits_scanned is not None:
            self.commits_scanned = commits_scanned
        if branches_scanned is not None:
            self.branches_scanned = branches_scanned
        if duration is not None:
            self.duration = duration
