# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.vcs_occurrence import VcsOccurrence
from ..models.utils.cast_models import cast_models
from ..models.source_type_query_params_enum import SourceTypeQueryParamsEnum
from ..models.presence_enum import PresenceEnum
from ..models.list_occs_ordering import ListOccsOrdering


class SecretOccurrencesService(BaseService):

    @cast_models
    def list_occs(
        self,
        cursor: str = None,
        page: int = None,
        per_page: int = None,
        date_before: str = None,
        date_after: str = None,
        source_id: int = None,
        source_name: str = None,
        source_type: SourceTypeQueryParamsEnum = None,
        incident_id: int = None,
        presence: PresenceEnum = None,
        author_name: str = None,
        author_info: str = None,
        sha: str = None,
        filepath: str = None,
        tags: any = None,
        ordering: ListOccsOrdering = None,
    ) -> List[VcsOccurrence]:
        """List occurrences of secrets in the monitored perimeter.

        :param cursor: Pagination cursor., defaults to None
        :type cursor: str, optional
        :param page: Page number., defaults to None
        :type page: int, optional
        :param per_page: Number of items to list per page., defaults to None
        :type per_page: int, optional
        :param date_before: date_before, defaults to None
        :type date_before: str, optional
        :param date_after: date_after, defaults to None
        :type date_after: str, optional
        :param source_id: Filter on the source ID., defaults to None
        :type source_id: int, optional
        :param source_name: source_name, defaults to None
        :type source_name: str, optional
        :param source_type: source_type, defaults to None
        :type source_type: SourceTypeQueryParamsEnum, optional
        :param incident_id: Filter by incident ID., defaults to None
        :type incident_id: int, optional
        :param presence: presence, defaults to None
        :type presence: PresenceEnum, optional
        :param author_name: author_name, defaults to None
        :type author_name: str, optional
        :param author_info: author_info, defaults to None
        :type author_info: str, optional
        :param sha: sha, defaults to None
        :type sha: str, optional
        :param filepath: filepath, defaults to None
        :type filepath: str, optional
        :param tags: tags, defaults to None
        :type tags: any, optional
        :param ordering: Sort the results by their field value. The default sort is ASC, DESC if the
        field is preceded by a '-'., defaults to None
        :type ordering: ListOccsOrdering, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: List occurrences
        :rtype: List[VcsOccurrence]
        """

        Validator(str).is_optional().validate(cursor)
        Validator(int).is_optional().min(0).validate(page)
        Validator(int).is_optional().min(1).max(100).validate(per_page)
        Validator(str).is_optional().validate(date_before)
        Validator(str).is_optional().validate(date_after)
        Validator(int).is_optional().validate(source_id)
        Validator(str).is_optional().validate(source_name)
        Validator(SourceTypeQueryParamsEnum).is_optional().validate(source_type)
        Validator(int).is_optional().validate(incident_id)
        Validator(PresenceEnum).is_optional().validate(presence)
        Validator(str).is_optional().min_length(3).validate(author_name)
        Validator(str).is_optional().min_length(3).validate(author_info)
        Validator(str).is_optional().min_length(3).validate(sha)
        Validator(str).is_optional().min_length(3).validate(filepath)
        Validator(any).is_optional().validate(tags)
        Validator(ListOccsOrdering).is_optional().validate(ordering)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/occurrences/secrets", self.get_default_headers()
            )
            .add_query("cursor", cursor)
            .add_query("page", page)
            .add_query("per_page", per_page)
            .add_query("date_before", date_before)
            .add_query("date_after", date_after)
            .add_query("source_id", source_id)
            .add_query("source_name", source_name)
            .add_query("source_type", source_type)
            .add_query("incident_id", incident_id)
            .add_query("presence", presence)
            .add_query("author_name", author_name)
            .add_query("author_info", author_info)
            .add_query("sha", sha)
            .add_query("filepath", filepath)
            .add_query("tags", tags)
            .add_query("ordering", ordering)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return [VcsOccurrence._unmap(item) for item in response]
