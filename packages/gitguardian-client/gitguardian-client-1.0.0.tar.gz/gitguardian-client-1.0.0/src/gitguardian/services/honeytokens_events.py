# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.list_honeytokens_events_status import ListHoneytokensEventsStatus
from ..models.list_honeytokens_events_ordering import ListHoneytokensEventsOrdering
from ..models.honey_token_event import HoneyTokenEvent


class HoneytokensEventsService(BaseService):

    @cast_models
    def list_honeytokens_events(
        self,
        cursor: str = None,
        per_page: int = None,
        ordering: ListHoneytokensEventsOrdering = None,
        honeytoken_id: str = None,
        status: ListHoneytokensEventsStatus = None,
        ip_address: str = None,
        tags: str = None,
        search: str = None,
    ) -> List[HoneyTokenEvent]:
        """List events related to all honeytokens of the workspace.

        :param cursor: Pagination cursor., defaults to None
        :type cursor: str, optional
        :param per_page: Number of items to list per page., defaults to None
        :type per_page: int, optional
        :param ordering: Sort the results by their field value. The default sort is ASC, DESC if the
        field is preceded by a '-', defaults to None
        :type ordering: ListHoneytokensEventsOrdering, optional
        :param honeytoken_id: Filter by honeytoken id, defaults to None
        :type honeytoken_id: str, optional
        :param status: Filter by status, defaults to None
        :type status: ListHoneytokensEventsStatus, optional
        :param ip_address: Filter by ip address, defaults to None
        :type ip_address: str, optional
        :param tags: tags, defaults to None
        :type tags: str, optional
        :param search: Search events based on the `data` field content, defaults to None
        :type search: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Honeytokens Events List
        :rtype: List[HoneyTokenEvent]
        """

        Validator(str).is_optional().validate(cursor)
        Validator(int).is_optional().min(1).max(100).validate(per_page)
        Validator(ListHoneytokensEventsOrdering).is_optional().validate(ordering)
        Validator(str).is_optional().validate(honeytoken_id)
        Validator(ListHoneytokensEventsStatus).is_optional().validate(status)
        Validator(str).is_optional().validate(ip_address)
        Validator(str).is_optional().validate(tags)
        Validator(str).is_optional().validate(search)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/honeytokens_events", self.get_default_headers()
            )
            .add_query("cursor", cursor)
            .add_query("per_page", per_page)
            .add_query("ordering", ordering)
            .add_query("honeytoken_id", honeytoken_id)
            .add_query("status", status)
            .add_query("ip_address", ip_address)
            .add_query("tags", tags)
            .add_query("search", search)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return [HoneyTokenEvent._unmap(item) for item in response]
