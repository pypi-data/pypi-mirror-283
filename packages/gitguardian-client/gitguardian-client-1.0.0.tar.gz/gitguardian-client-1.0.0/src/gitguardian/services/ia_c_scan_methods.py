# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.scan_iac_request import ScanIacRequest
from ..models.iac_scan_result import IacScanResult
from ..models.iac_diff_scan_result import IacDiffScanResult
from ..models.diff_scan_iac_request import DiffScanIacRequest


class IaCScanMethodsService(BaseService):

    @cast_models
    def scan_iac(self, request_body: ScanIacRequest = None) -> IacScanResult:
        """This feature is experimental.

        Scan a tar file directory seeking potential IaC (Infrastructure as Code)
        vulnerabilities. Return a list of vulnerabilities found in the files
        of the scanned directory.

        :param request_body: The request body., defaults to None
        :type request_body: ScanIacRequest, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Scan success
        :rtype: IacScanResult
        """

        Validator(ScanIacRequest).is_optional().validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/v1/iac_scan", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return IacScanResult._unmap(response)

    @cast_models
    def diff_scan_iac(
        self, request_body: DiffScanIacRequest = None
    ) -> IacDiffScanResult:
        """This feature is experimental.

        Infrastructure as Code (IaC) differential scanning compares two states of the
        same project and reports any change in the vulnerabilities of your configuration.

        Scan tar files containing two states of the same directory
        (under the names `reference` and `current`) seeking changes in potential
        IaC (Infrastructure as Code) vulnerabilities. Return the status of vulnerabilities
        found in the files of the compared scanned directories.

        :param request_body: The request body., defaults to None
        :type request_body: DiffScanIacRequest, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Scan success
        :rtype: IacDiffScanResult
        """

        Validator(DiffScanIacRequest).is_optional().validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/v1/iac_diff_scan", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return IacDiffScanResult._unmap(response)
