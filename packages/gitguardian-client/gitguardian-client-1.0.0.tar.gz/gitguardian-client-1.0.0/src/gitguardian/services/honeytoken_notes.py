# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.update_honeytoken_note_request import UpdateHoneytokenNoteRequest
from ..models.list_honeytoken_notes_ordering import ListHoneytokenNotesOrdering
from ..models.honey_token_note import HoneyTokenNote
from ..models.create_honeytoken_note_request import CreateHoneytokenNoteRequest


class HoneytokenNotesService(BaseService):

    @cast_models
    def list_honeytoken_notes(
        self,
        honeytoken_id: str,
        cursor: str = None,
        per_page: int = None,
        ordering: ListHoneytokenNotesOrdering = None,
        member_id: int = None,
        api_token_id: str = None,
        search: str = None,
    ) -> List[HoneyTokenNote]:
        """List notes left on a honeytoken in chronological order.

        :param honeytoken_id: The id of the honeytoken to retrieve
        :type honeytoken_id: str
        :param cursor: Pagination cursor., defaults to None
        :type cursor: str, optional
        :param per_page: Number of items to list per page., defaults to None
        :type per_page: int, optional
        :param ordering: Sort the results by their field value. The default sort is ASC, DESC if the
        field is preceded by a '-'., defaults to None
        :type ordering: ListHoneytokenNotesOrdering, optional
        :param member_id: Filter by member id., defaults to None
        :type member_id: int, optional
        :param api_token_id: Entries matching this API token id., defaults to None
        :type api_token_id: str, optional
        :param search: search, defaults to None
        :type search: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Honeytoken Note List
        :rtype: List[HoneyTokenNote]
        """

        Validator(str).validate(honeytoken_id)
        Validator(str).is_optional().validate(cursor)
        Validator(int).is_optional().min(1).max(100).validate(per_page)
        Validator(ListHoneytokenNotesOrdering).is_optional().validate(ordering)
        Validator(int).is_optional().validate(member_id)
        Validator(str).is_optional().validate(api_token_id)
        Validator(str).is_optional().validate(search)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/honeytokens/{{honeytoken_id}}/notes",
                self.get_default_headers(),
            )
            .add_path("honeytoken_id", honeytoken_id)
            .add_query("cursor", cursor)
            .add_query("per_page", per_page)
            .add_query("ordering", ordering)
            .add_query("member_id", member_id)
            .add_query("api_token_id", api_token_id)
            .add_query("search", search)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return [HoneyTokenNote._unmap(item) for item in response]

    @cast_models
    def create_honeytoken_note(
        self, honeytoken_id: str, request_body: CreateHoneytokenNoteRequest = None
    ) -> HoneyTokenNote:
        """Add a note on a honeytoken.

        :param request_body: The request body., defaults to None
        :type request_body: CreateHoneytokenNoteRequest, optional
        :param honeytoken_id: The id of the honeytoken to retrieve
        :type honeytoken_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The note was created successfully.
        :rtype: HoneyTokenNote
        """

        Validator(CreateHoneytokenNoteRequest).is_optional().validate(request_body)
        Validator(str).validate(honeytoken_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/honeytokens/{{honeytoken_id}}/notes",
                self.get_default_headers(),
            )
            .add_path("honeytoken_id", honeytoken_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return HoneyTokenNote._unmap(response)

    @cast_models
    def update_honeytoken_note(
        self,
        honeytoken_id: str,
        note_id: str,
        request_body: UpdateHoneytokenNoteRequest = None,
    ) -> HoneyTokenNote:
        """Update an existing comment on a honeytoken. Only honeytoken notes
        created by the current API key can be updated.

        :param request_body: The request body., defaults to None
        :type request_body: UpdateHoneytokenNoteRequest, optional
        :param honeytoken_id: The id of the honeytoken to retrieve
        :type honeytoken_id: str
        :param note_id: The id of the honeytoken note to update
        :type note_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The note was updated successfully.
        :rtype: HoneyTokenNote
        """

        Validator(UpdateHoneytokenNoteRequest).is_optional().validate(request_body)
        Validator(str).validate(honeytoken_id)
        Validator(str).validate(note_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/honeytokens/{{honeytoken_id}}/notes/{{note_id}}",
                self.get_default_headers(),
            )
            .add_path("honeytoken_id", honeytoken_id)
            .add_path("note_id", note_id)
            .serialize()
            .set_method("PATCH")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return HoneyTokenNote._unmap(response)

    @cast_models
    def delete_honeytoken_note(self, honeytoken_id: str, note_id: str):
        """Delete an existing comment on a honeytoken. Only honeytoken notes
        created by the current API key can be deleted.

        :param honeytoken_id: The id of the honeytoken to retrieve
        :type honeytoken_id: str
        :param note_id: The id of the honeytoken note to update
        :type note_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(honeytoken_id)
        Validator(str).validate(note_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/honeytokens/{{honeytoken_id}}/notes/{{note_id}}",
                self.get_default_headers(),
            )
            .add_path("honeytoken_id", honeytoken_id)
            .add_path("note_id", note_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)

        return response
