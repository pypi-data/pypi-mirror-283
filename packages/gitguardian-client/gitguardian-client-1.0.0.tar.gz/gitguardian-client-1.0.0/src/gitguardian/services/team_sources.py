# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.update_team_sources_request import UpdateTeamSourcesRequest
from ..models.source_health_enum import SourceHealthEnum
from ..models.source import Source
from ..models.scan_status_enum import ScanStatusEnum
from ..models.list_team_sources_visibility import ListTeamSourcesVisibility
from ..models.list_team_sources_type import ListTeamSourcesType
from ..models.list_team_sources_ordering import ListTeamSourcesOrdering


class TeamSourcesService(BaseService):

    @cast_models
    def list_team_sources(
        self,
        team_id: int,
        cursor: str = None,
        per_page: int = None,
        search: str = None,
        last_scan_status: ScanStatusEnum = None,
        health: SourceHealthEnum = None,
        type_: ListTeamSourcesType = None,
        ordering: ListTeamSourcesOrdering = None,
        visibility: ListTeamSourcesVisibility = None,
        external_id: str = None,
    ) -> List[Source]:
        """List sources belonging to a team's perimeter.

        :param team_id: The id of the team
        :type team_id: int
        :param cursor: Pagination cursor., defaults to None
        :type cursor: str, optional
        :param per_page: Number of items to list per page., defaults to None
        :type per_page: int, optional
        :param search: search, defaults to None
        :type search: str, optional
        :param last_scan_status: last_scan_status, defaults to None
        :type last_scan_status: ScanStatusEnum, optional
        :param health: health, defaults to None
        :type health: SourceHealthEnum, optional
        :param type_: type_, defaults to None
        :type type_: ListTeamSourcesType, optional
        :param ordering: Sort the results by their field value. The default sort is ASC, DESC if the
        field is preceded by a '-'., defaults to None
        :type ordering: ListTeamSourcesOrdering, optional
        :param visibility: visibility, defaults to None
        :type visibility: ListTeamSourcesVisibility, optional
        :param external_id: external_id, defaults to None
        :type external_id: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Source list
        :rtype: List[Source]
        """

        Validator(int).validate(team_id)
        Validator(str).is_optional().validate(cursor)
        Validator(int).is_optional().min(1).max(100).validate(per_page)
        Validator(str).is_optional().validate(search)
        Validator(ScanStatusEnum).is_optional().validate(last_scan_status)
        Validator(SourceHealthEnum).is_optional().validate(health)
        Validator(ListTeamSourcesType).is_optional().validate(type_)
        Validator(ListTeamSourcesOrdering).is_optional().validate(ordering)
        Validator(ListTeamSourcesVisibility).is_optional().validate(visibility)
        Validator(str).is_optional().validate(external_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/teams/{{team_id}}/sources",
                self.get_default_headers(),
            )
            .add_path("team_id", team_id)
            .add_query("cursor", cursor)
            .add_query("per_page", per_page)
            .add_query("search", search)
            .add_query("last_scan_status", last_scan_status)
            .add_query("health", health)
            .add_query("type", type_)
            .add_query("ordering", ordering)
            .add_query("visibility", visibility)
            .add_query("external_id", external_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return [Source._unmap(item) for item in response]

    @cast_models
    def update_team_sources(
        self, team_id: int, request_body: UpdateTeamSourcesRequest = None
    ):
        """This endpoint allows you to add and remove sources from the perimeter of a team.

        If you are using a personal access token, you need to be a workspace manager.

        :param request_body: The request body., defaults to None
        :type request_body: UpdateTeamSourcesRequest, optional
        :param team_id: The id of the team
        :type team_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(UpdateTeamSourcesRequest).is_optional().validate(request_body)
        Validator(int).validate(team_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/teams/{{team_id}}/sources",
                self.get_default_headers(),
            )
            .add_path("team_id", team_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response
