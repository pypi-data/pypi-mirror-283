# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.update_team_membership_request import UpdateTeamMembershipRequest
from ..models.team_permission_enum import TeamPermissionEnum
from ..models.team_membership import TeamMembership
from ..models.incident_permission_enum import IncidentPermissionEnum


class TeamMembershipsService(BaseService):

    @cast_models
    def list_team_memberships(
        self,
        team_id: int,
        cursor: str = None,
        per_page: int = None,
        team_permission: TeamPermissionEnum = None,
        incident_permission: IncidentPermissionEnum = None,
        member_id: float = None,
    ) -> List[TeamMembership]:
        """List all the memberships of a team.

        If you are using a personal access token, you need to be a workspace manager or be part of the team.

        :param team_id: The id of the team
        :type team_id: int
        :param cursor: Pagination cursor., defaults to None
        :type cursor: str, optional
        :param per_page: Number of items to list per page., defaults to None
        :type per_page: int, optional
        :param team_permission: team_permission, defaults to None
        :type team_permission: TeamPermissionEnum, optional
        :param incident_permission: incident_permission, defaults to None
        :type incident_permission: IncidentPermissionEnum, optional
        :param member_id: member_id, defaults to None
        :type member_id: float, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Team membership list
        :rtype: List[TeamMembership]
        """

        Validator(int).validate(team_id)
        Validator(str).is_optional().validate(cursor)
        Validator(int).is_optional().min(1).max(100).validate(per_page)
        Validator(TeamPermissionEnum).is_optional().validate(team_permission)
        Validator(IncidentPermissionEnum).is_optional().validate(incident_permission)
        Validator(float).is_optional().validate(member_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/teams/{{team_id}}/team_memberships",
                self.get_default_headers(),
            )
            .add_path("team_id", team_id)
            .add_query("cursor", cursor)
            .add_query("per_page", per_page)
            .add_query("team_permission", team_permission)
            .add_query("incident_permission", incident_permission)
            .add_query("member_id", member_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return [TeamMembership._unmap(item) for item in response]

    @cast_models
    def create_team_membership(
        self, team_id: int, request_body: TeamMembership = None
    ) -> TeamMembership:
        """Add a member to a team.

        If you are using a personal access token, you must have "can manage" permission on the team or be a workspace manager.

        :param request_body: The request body., defaults to None
        :type request_body: TeamMembership, optional
        :param team_id: The id of the team
        :type team_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Team membership created
        :rtype: TeamMembership
        """

        Validator(TeamMembership).is_optional().validate(request_body)
        Validator(int).validate(team_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/teams/{{team_id}}/team_memberships",
                self.get_default_headers(),
            )
            .add_path("team_id", team_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return TeamMembership._unmap(response)

    @cast_models
    def update_team_membership(
        self,
        team_id: int,
        team_membership_id: int,
        request_body: UpdateTeamMembershipRequest = None,
    ) -> TeamMembership:
        """Update permissions of a team membership.

        If you are using a personal access token, you must have "can manage" permission on the team or be a workspace manager.

        :param request_body: The request body., defaults to None
        :type request_body: UpdateTeamMembershipRequest, optional
        :param team_id: The id of the team
        :type team_id: int
        :param team_membership_id: The id of the team membership
        :type team_membership_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Team membership was updated successfully.
        :rtype: TeamMembership
        """

        Validator(UpdateTeamMembershipRequest).is_optional().validate(request_body)
        Validator(int).validate(team_id)
        Validator(int).validate(team_membership_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/teams/{{team_id}}/team_memberships/{{team_membership_id}}",
                self.get_default_headers(),
            )
            .add_path("team_id", team_id)
            .add_path("team_membership_id", team_membership_id)
            .serialize()
            .set_method("PATCH")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return TeamMembership._unmap(response)

    @cast_models
    def delete_team_membership(self, team_id: int, team_membership_id: int):
        """Remove a member from a team.

        If you are using a personal access token, you must have "can manage" permission on the team or be a workspace manager,
        or be the member being removed.

        :param team_id: The id of the team
        :type team_id: int
        :param team_membership_id: The id of the team membership
        :type team_membership_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(int).validate(team_id)
        Validator(int).validate(team_membership_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/teams/{{team_id}}/team_memberships/{{team_membership_id}}",
                self.get_default_headers(),
            )
            .add_path("team_id", team_id)
            .add_path("team_membership_id", team_membership_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)

        return response
