# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.list_secret_detectors_ordering import ListSecretDetectorsOrdering
from ..models.detector_group_type_enum import DetectorGroupTypeEnum
from ..models.detector_group import DetectorGroup


class SecretDetectorsService(BaseService):

    @cast_models
    def list_secret_detectors(
        self,
        cursor: str = None,
        per_page: int = None,
        is_active: bool = None,
        type_: DetectorGroupTypeEnum = None,
        search: str = None,
        ordering: ListSecretDetectorsOrdering = None,
    ) -> List[DetectorGroup]:
        """List secret detectors.

        :param cursor: Pagination cursor., defaults to None
        :type cursor: str, optional
        :param per_page: Number of items to list per page., defaults to None
        :type per_page: int, optional
        :param is_active: is_active, defaults to None
        :type is_active: bool, optional
        :param type_: type_, defaults to None
        :type type_: DetectorGroupTypeEnum, optional
        :param search: search, defaults to None
        :type search: str, optional
        :param ordering: Sort the results by their field value. The default sort is ASC, DESC if the
        field is preceded by a '-'., defaults to None
        :type ordering: ListSecretDetectorsOrdering, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: List of Secret Detectors
        :rtype: List[DetectorGroup]
        """

        Validator(str).is_optional().validate(cursor)
        Validator(int).is_optional().min(1).max(100).validate(per_page)
        Validator(bool).is_optional().validate(is_active)
        Validator(DetectorGroupTypeEnum).is_optional().validate(type_)
        Validator(str).is_optional().validate(search)
        Validator(ListSecretDetectorsOrdering).is_optional().validate(ordering)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/secret_detectors", self.get_default_headers()
            )
            .add_query("cursor", cursor)
            .add_query("per_page", per_page)
            .add_query("is_active", is_active)
            .add_query("type", type_)
            .add_query("search", search)
            .add_query("ordering", ordering)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return [DetectorGroup._unmap(item) for item in response]

    @cast_models
    def get_secret_detector(self, detector_name: str) -> DetectorGroup:
        """Get a secret detector.

        :param detector_name: Name of the detector to retrieve
        :type detector_name: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Secret Detector
        :rtype: DetectorGroup
        """

        Validator(str).validate(detector_name)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/secret_detectors/{{detector_name}}",
                self.get_default_headers(),
            )
            .add_path("detector_name", detector_name)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return DetectorGroup._unmap(response)
