# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.patch_honeytoken_label_request import PatchHoneytokenLabelRequest
from ..models.honey_token_label import HoneyTokenLabel
from ..models.create_honeytoken_label_request import CreateHoneytokenLabelRequest


class LabelsService(BaseService):

    @cast_models
    def list_honeytoken_labels(
        self,
        cursor: str = None,
        per_page: int = None,
        search: str = None,
        key: str = None,
    ) -> List[HoneyTokenLabel]:
        """List labels created for honeytokens in chronological order.

        :param cursor: Pagination cursor., defaults to None
        :type cursor: str, optional
        :param per_page: Number of items to list per page., defaults to None
        :type per_page: int, optional
        :param search: search, defaults to None
        :type search: str, optional
        :param key: key, defaults to None
        :type key: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Honeytoken Labels List
        :rtype: List[HoneyTokenLabel]
        """

        Validator(str).is_optional().validate(cursor)
        Validator(int).is_optional().min(1).max(100).validate(per_page)
        Validator(str).is_optional().validate(search)
        Validator(str).is_optional().validate(key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/honeytokens/labels", self.get_default_headers()
            )
            .add_query("cursor", cursor)
            .add_query("per_page", per_page)
            .add_query("search", search)
            .add_query("key", key)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return [HoneyTokenLabel._unmap(item) for item in response]

    @cast_models
    def create_honeytoken_label(
        self, request_body: CreateHoneytokenLabelRequest = None
    ) -> HoneyTokenLabel:
        """Create a label for honeytokens.

        :param request_body: The request body., defaults to None
        :type request_body: CreateHoneytokenLabelRequest, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The label was created successfully.
        :rtype: HoneyTokenLabel
        """

        Validator(CreateHoneytokenLabelRequest).is_optional().validate(request_body)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/honeytokens/labels", self.get_default_headers()
            )
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return HoneyTokenLabel._unmap(response)

    @cast_models
    def patch_honeytoken_label_key(self, old_key: str, new_key: str):
        """Rename a label key. It will be renamed in all the labels using this key.

        :param old_key: an existing key that we want to rename
        :type old_key: str
        :param new_key: a new name of the key
        :type new_key: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(old_key)
        Validator(str).validate(new_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/honeytokens/labels", self.get_default_headers()
            )
            .add_query("old_key", old_key)
            .add_query("new_key", new_key)
            .serialize()
            .set_method("PATCH")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def delete_honeytoken_label_key(self, key: str = None):
        """Delete a key. All the labels using this key will be deleted.

        :param key: key, defaults to None
        :type key: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).is_optional().validate(key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/honeytokens/labels", self.get_default_headers()
            )
            .add_query("key", key)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def patch_honeytoken_label(
        self, label_id: str, request_body: PatchHoneytokenLabelRequest = None
    ):
        """Rename the value of a label.

        :param request_body: The request body., defaults to None
        :type request_body: PatchHoneytokenLabelRequest, optional
        :param label_id: Id of the label.
        :type label_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(PatchHoneytokenLabelRequest).is_optional().validate(request_body)
        Validator(str).validate(label_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/honeytokens/labels/{{label_id}}",
                self.get_default_headers(),
            )
            .add_path("label_id", label_id)
            .serialize()
            .set_method("PATCH")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def delete_honeytoken_label(self, label_id: str):
        """Delete a label for honeytokens.

        :param label_id: Id of the label.
        :type label_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(label_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/v1/honeytokens/labels/{{label_id}}",
                self.get_default_headers(),
            )
            .add_path("label_id", label_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)

        return response
