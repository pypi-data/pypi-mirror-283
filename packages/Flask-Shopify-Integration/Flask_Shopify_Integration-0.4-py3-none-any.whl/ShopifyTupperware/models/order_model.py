from marshmallow import Schema, fields

from ShopifyTupperware.models import (address_model, 
                                      customer_model, 
                                      lineitem_model, 
                                      refund_model, 
                                      fullfilment_model, 
                                      payment_model, 
                                      option_model, 
                                      shipping_model, 
                                      price_model,
                                      transaction_model)



class OrderSchema(Schema):
    id = fields.Integer()
    email = fields.String()
    closed_at = fields.String()
    created_at = fields.String()
    updated_at = fields.String()
    number = fields.Integer()
    note  =  fields.String()
    token = fields.String()
    gateway = fields.String()
    test = fields.Boolean()
    total_price = fields.Float()
    subtotal_price = fields.Float()
    total_weight = fields.Float()
    total_tax = fields.Float()
    taxes_included = fields.Boolean()
    currency = fields.String()
    financial_status = fields.String()
    confirmed= fields.Boolean()
    total_discounts = fields.Float()
    total_line_items_price = fields.Float()
    cart_token = fields.String()
    buyer_accepts_marketing = fields.Boolean()
    name = fields.String()
    referring_site = fields.String()
    landing_site = fields.String()
    cancelled_at = fields.String()
    cancel_reason = fields.String()
    checkout_token = fields.String()
    reference = fields.String()
    user_id = fields.String()
    location_id = fields.String()
    source_identifier = fields.String()
    source_url = fields.String()
    processed_at = fields.String()
    device_id = fields.String()
    phone = fields.String()
    customer_locale = fields.String()
    app_id = fields.String()
    browser_ip = fields.String()
    landing_site_ref = fields.String()
    order_number = fields.String()
    processing_method = fields.String()
    checkout_id = fields.Integer()
    source_name = fields.String()
    fulfillment_status = fields.String()
    tags = fields.String()
    contact_email = fields.String()
    order_status_url = fields.String()
    presentment_currency = fields.String()
    discount_applications = fields.List(fields.Nested(price_model.DiscountApplicationPriceSchema))
    discount_codes = fields.List(fields.Nested(price_model.DiscountPriceSchema))
    note_attributes = fields.List(fields.Nested(option_model.PropertySchema))
    payment_gateway_names = fields.List(fields.String)
    tax_lines = fields.List(fields.Nested(lineitem_model.TaxLineSchema))
    total_line_items_price_set = fields.Nested(price_model.PriceSetSchema)
    total_discounts_set = fields.Nested(price_model.PriceSetSchema)
    total_shipping_price_set = fields.Nested(price_model.PriceSetSchema)
    subtotal_price_set = fields.Nested(price_model.PriceSetSchema)
    total_price_set = fields.Nested(price_model.PriceSetSchema)
    total_tax_set = fields.Nested(price_model.PriceSetSchema)
    shipping_lines = fields.List(fields.Nested(shipping_model.ShippingSchema))
    billing_address = fields.Nested(address_model.AddressSchema)
    shipping_address = fields.Nested(address_model.AddressSchema)
    client_details = fields.Nested(option_model.ClientDetailSchema)
    payment_details = fields.Nested(payment_model.PaymentDetailSchema)
    customer = fields.Nested(customer_model.CustomerSchema)
    line_items = fields.List(fields.Nested(lineitem_model.LineItemSchema))
    fulfillments = fields.List(fields.Nested(fullfilment_model.FullfilmentSchema))
    refunds = fields.List(fields.Nested(refund_model.RefundSchema))
    #transactions = fields.List(fields.Nested(transaction_model.TransactionSchema))