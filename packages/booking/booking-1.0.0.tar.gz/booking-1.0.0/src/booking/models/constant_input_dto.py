# This file was generated by liblab | https://liblab.com/

from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel


class Constants(Enum):
    """An enumeration representing different categories.

    :cvar ACCOMMODATION_TYPES: "ACCOMMODATION_TYPES"
    :vartype ACCOMMODATION_TYPES: str
    :cvar ACCOMMODATION_FACILITIES: "ACCOMMODATION_FACILITIES"
    :vartype ACCOMMODATION_FACILITIES: str
    :cvar ACCOMMODATION_THEMES: "ACCOMMODATION_THEMES"
    :vartype ACCOMMODATION_THEMES: str
    :cvar BED_TYPES: "BED_TYPES"
    :vartype BED_TYPES: str
    :cvar FACILITY_TYPES: "FACILITY_TYPES"
    :vartype FACILITY_TYPES: str
    :cvar CHARGE_TYPES: "CHARGE_TYPES"
    :vartype CHARGE_TYPES: str
    :cvar ROOM_TYPES: "ROOM_TYPES"
    :vartype ROOM_TYPES: str
    :cvar ROOM_FACILITIES: "ROOM_FACILITIES"
    :vartype ROOM_FACILITIES: str
    :cvar REVIEW_SCORES: "REVIEW_SCORES"
    :vartype REVIEW_SCORES: str
    """

    ACCOMMODATION_TYPES = "ACCOMMODATION_TYPES"
    ACCOMMODATION_FACILITIES = "ACCOMMODATION_FACILITIES"
    ACCOMMODATION_THEMES = "ACCOMMODATION_THEMES"
    BED_TYPES = "BED_TYPES"
    FACILITY_TYPES = "FACILITY_TYPES"
    CHARGE_TYPES = "CHARGE_TYPES"
    ROOM_TYPES = "ROOM_TYPES"
    ROOM_FACILITIES = "ROOM_FACILITIES"
    REVIEW_SCORES = "REVIEW_SCORES"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, Constants._member_map_.values()))


class ConstantInputDtoLanguages(Enum):
    """An enumeration representing different categories.

    :cvar AR: "AR"
    :vartype AR: str
    :cvar BG: "BG"
    :vartype BG: str
    :cvar CA: "CA"
    :vartype CA: str
    :cvar CS: "CS"
    :vartype CS: str
    :cvar DA: "DA"
    :vartype DA: str
    :cvar DE: "DE"
    :vartype DE: str
    :cvar EL: "EL"
    :vartype EL: str
    :cvar EN: "EN"
    :vartype EN: str
    :cvar EN_GB: "EN_GB"
    :vartype EN_GB: str
    :cvar EN_US: "EN_US"
    :vartype EN_US: str
    :cvar ES: "ES"
    :vartype ES: str
    :cvar ES_AR: "ES_AR"
    :vartype ES_AR: str
    :cvar ES_MX: "ES_MX"
    :vartype ES_MX: str
    :cvar ET: "ET"
    :vartype ET: str
    :cvar FI: "FI"
    :vartype FI: str
    :cvar FR: "FR"
    :vartype FR: str
    :cvar HE: "HE"
    :vartype HE: str
    :cvar HI: "HI"
    :vartype HI: str
    :cvar HR: "HR"
    :vartype HR: str
    :cvar HU: "HU"
    :vartype HU: str
    :cvar ID: "ID"
    :vartype ID: str
    :cvar IS: "IS"
    :vartype IS: str
    :cvar IT: "IT"
    :vartype IT: str
    :cvar JA: "JA"
    :vartype JA: str
    :cvar KA: "KA"
    :vartype KA: str
    :cvar KO: "KO"
    :vartype KO: str
    :cvar LT: "LT"
    :vartype LT: str
    :cvar LV: "LV"
    :vartype LV: str
    :cvar MS: "MS"
    :vartype MS: str
    :cvar NL: "NL"
    :vartype NL: str
    :cvar NO: "NO"
    :vartype NO: str
    :cvar PL: "PL"
    :vartype PL: str
    :cvar PT_BR: "PT_BR"
    :vartype PT_BR: str
    :cvar PT_PT: "PT_PT"
    :vartype PT_PT: str
    :cvar RO: "RO"
    :vartype RO: str
    :cvar RU: "RU"
    :vartype RU: str
    :cvar SK: "SK"
    :vartype SK: str
    :cvar SL: "SL"
    :vartype SL: str
    :cvar SR: "SR"
    :vartype SR: str
    :cvar SV: "SV"
    :vartype SV: str
    :cvar TH: "TH"
    :vartype TH: str
    :cvar TL: "TL"
    :vartype TL: str
    :cvar TR: "TR"
    :vartype TR: str
    :cvar UK: "UK"
    :vartype UK: str
    :cvar VI: "VI"
    :vartype VI: str
    :cvar ZH_CN: "ZH_CN"
    :vartype ZH_CN: str
    :cvar ZH_TW: "ZH_TW"
    :vartype ZH_TW: str
    """

    AR = "AR"
    BG = "BG"
    CA = "CA"
    CS = "CS"
    DA = "DA"
    DE = "DE"
    EL = "EL"
    EN = "EN"
    EN_GB = "EN_GB"
    EN_US = "EN_US"
    ES = "ES"
    ES_AR = "ES_AR"
    ES_MX = "ES_MX"
    ET = "ET"
    FI = "FI"
    FR = "FR"
    HE = "HE"
    HI = "HI"
    HR = "HR"
    HU = "HU"
    ID = "ID"
    IS = "IS"
    IT = "IT"
    JA = "JA"
    KA = "KA"
    KO = "KO"
    LT = "LT"
    LV = "LV"
    MS = "MS"
    NL = "NL"
    NO = "NO"
    PL = "PL"
    PT_BR = "PT_BR"
    PT_PT = "PT_PT"
    RO = "RO"
    RU = "RU"
    SK = "SK"
    SL = "SL"
    SR = "SR"
    SV = "SV"
    TH = "TH"
    TL = "TL"
    TR = "TR"
    UK = "UK"
    VI = "VI"
    ZH_CN = "ZH_CN"
    ZH_TW = "ZH_TW"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, ConstantInputDtoLanguages._member_map_.values())
        )


@JsonMap({})
class ConstantInputDto(BaseModel):
    """ConstantInputDto

    :param constants: Allows to filter the results only for specific sections., defaults to None
    :type constants: List[Constants], optional
    :param languages: languages, defaults to None
    :type languages: List[ConstantInputDtoLanguages], optional
    """

    def __init__(
        self,
        constants: List[Constants] = None,
        languages: List[ConstantInputDtoLanguages] = None,
    ):
        if constants is not None:
            self.constants = self._define_list(constants, Constants)
        if languages is not None:
            self.languages = self._define_list(languages, ConstantInputDtoLanguages)
