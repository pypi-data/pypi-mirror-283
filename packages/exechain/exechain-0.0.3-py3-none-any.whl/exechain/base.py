"""
Copyright (c) 2024 Leonov Artur (depish.eskry@yandex.ru)

Permission is hereby granted to use, copy, modify, and distribute this code in any form, provided that the above copyright notice and this permission notice appear in all copies.

DISCLAIMER:
This source code is provided "as is", without any warranty of any kind, express or implied, including but not limited to the implied warranties of merchantability and fitness for a particular purpose. The entire risk as to the quality and performance of the code is with you.



Copyright (c) 2024 –õ–µ–æ–Ω–æ–≤ –ê—Ä—Ç—É—Ä (depish.eskry@yandex.ru)

–†–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å, –∏–∑–º–µ–Ω—è—Ç—å –∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å —ç—Ç–æ—Ç –∫–æ–¥ –≤ –ª—é–±–æ–º –≤–∏–¥–µ, –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.

–û–¢–ö–ê–ó –û–¢ –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–ò:
–≠—Ç–æ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è "–∫–∞–∫ –µ—Å—Ç—å" –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –≥–∞—Ä–∞–Ω—Ç–∏–π, —è–≤–Ω—ã—Ö –∏–ª–∏ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ–º—ã—Ö, –≤–∫–ª—é—á–∞—è, –Ω–æ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—è—Å—å, –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ–º—ã–º–∏ –≥–∞—Ä–∞–Ω—Ç–∏—è–º–∏ —Ç–æ–≤–∞—Ä–Ω–æ–π –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ü–µ–ª–∏. –í—Å—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –ª–µ–∂–∏—Ç –Ω–∞ –≤–∞—Å.
"""


import os
from pathlib import Path
import json
import shutil
import platform
import subprocess
import glob
import os

from exechain.internal import file1_newer_file2


def which(name):
    search_dirs = os.environ["PATH"].split(os.pathsep)
    
    for path in search_dirs:
        test = Path(path) / name
        if test.is_file() and os.access(test, os.X_OK):
            return test

    return None


def exit_with_message(message, code):
    print(message)
    exit(code)


def _get_path(path) -> Path:
    if isinstance(path, str):
        return Path(path)
    else:
        return path


_TARGET_POOL: dict = {}
_VARIBLE_POOL: dict = {}


def get_target_by_name(name: str ):
    return _TARGET_POOL[name]


def get_target_names() -> list[str]:
    return list(_TARGET_POOL.keys())


def exec_target(name: str):
    if name not in _TARGET_POOL:
        raise Exception(f"error target '{name}': not found")
    return _TARGET_POOL[name]._invoke(None)


def target_pool() -> dict:
    return _TARGET_POOL


class BaseTool:
    """–î–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å —Å–ª—É–∂–∏—Ç –º–µ—Ç–∫–æ–π –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–¥–∫–ª–∞—Å—Å–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.
    
    –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç - —ç—Ç–æ callable –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π —É –∫–ª–∞—Å—Å–∞ Target –∏ –µ–≥–æ –ø–æ–¥–∫–ª–∞—Å—Å–æ–≤.
    """
    def __init__(self) -> None:
        pass


class Target:
    """
    Target class –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ü–µ–ø–æ—á–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è target. (–ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ç–æ–º—É –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç —Ü–µ–ª–∏ –≤ Makefile).
    
    –ö–∞–∫ –∏ —É make - —É –∫–ª–∞—Å—Å–∞ Target —Ü–µ–ª—å—é —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫–∞. –ò –¥–∞–ª—å—à–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç—Ç–æ–π —Ü–µ–ª–∏.
    –ï—Å–ª–∏ —Ñ–∞–π–ª/–ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –¥–∞–Ω–Ω–∞—è —Ü–µ–ª—å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.
    –ï—Å–ª–∏ —Ñ–∞–π–ª/–ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —ç—Ç–∞–ø —Å–±–æ—Ä–∫–∏ —ç—Ç–æ–π —Ü–µ–ª–∏ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω.
    
    –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –ø—É–ª–ª —Ü–µ–ª–µ–π.
    
    Attributes
    ----------
    target : Path
        –§–∞–π–ª/–ø–∞–ø–∫–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º–∞—è —Ü–µ–ª—å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ø–æ—á–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π.
        –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å –¥–ª—è —ç—Ç–æ–π —Ü–µ–ª–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —Ü–µ–ø–æ—á–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ –ø–æ—Ä—è–¥–∫—É,
        —Å–ø–µ—Ä–≤–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ dependecies –∑–∞—Ç–µ–º recept.
        
    dependencies : list[&quot;callable&quot;]
        –°–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ø–µ—Ä–µ–¥ —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ (recept) –¥–ª—è —Å–±–æ—Ä–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ target.
        –î–∞–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —á—Ç–æ–±—ã –¥–∞–ª–µ–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–±–æ—Ä–∫—É –¥–∞–Ω–Ω–æ–π —Ü–µ–ª–∏ (recept).
        
    recept : list[&quot;callable&quot;]
        –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã. –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —á—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ target.
        
    target_name : str
        –ò–º—è —Ü–µ–ª–∏ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
        
    target_run_lock : bool
        –§–ª–∞–≥ —É–∫–∞–∑—ã–≤–∞—é—â–∏–π —á—Ç–æ –¥–∞–Ω–Ω–∞—è —Ü–µ–ª—å —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        
    vars : dict
        –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ü–µ–ø–æ—á–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π. 
        –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ —É —Å—Ç—Ä–æ–∫.
    """
    def __init__(self, target: Path, dependencies: list["Target"] = [], recept: list["callable"] = []) -> None:
        """
        Args:
            target (Path): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –ø–∞–ø–∫–µ –∞ —Ç–∞–∫ –∂–µ —Ü–µ–ª—å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ø–æ—á–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π (—Å–±–æ—Ä–∫–∏).
            dependencies (list[&quot;Target&quot;], optional): –°–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ø–µ—Ä–µ–¥ —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ (recept) –¥–ª—è —Å–±–æ—Ä–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ target.. Defaults to [].
            recept (list[&quot;callable&quot;], optional): –°–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ø–æ—Å–ª–µ dependencies –∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é—Ç —Å–æ–¥–∞–Ω–∏–µ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ target.. Defaults to [].

        Raises:
            Exception: _description_
            Exception: _description_
        """
        self.target: Path = _get_path(target)
        self.recept: list["callable"] = recept
        self.dependencies: list["Target"]  = dependencies
        self.target_name = str(target)

        if not dependencies and not recept:
            raise Exception(f"error [target {str(self.target)}: nothing to do]")
        
        if self.target_name in _TARGET_POOL:
            raise Exception(f"error [target {str(self.target)}: already exists]")
        
        _TARGET_POOL[self.target_name] = self
        self.target_run_lock = False
        self.exec_cond_cache = None
                
        self.vars = {
            "target-name": self.target_name
        }


    def __str__(self) -> str:
        return f"target '{self.target_name}'"
    
    
    def _is_file(self) -> bool:
        return True
    
    
    def _invoke(self, parent, vars = {}):
        # TODO: –í–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç —Å—Ç–∞–≤–∏—Ç—å —Ñ–ª–∞–≥ —á—Ç–æ —Ü–µ–ª—å –±—ã–ª–∞ —Å–æ–±—Ä–∞–Ω–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ 
        
        if self.target_run_lock:
            print(f"‚ùï –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ {parent.target_name if parent else '_'} -> {self.target_name}")
            return

        self.target_run_lock = True
        # try:
        def _run_recept():
            print(f"üîπ target [{self.target_name}]")
            for cmd in self.recept:
                if not cmd(self.vars):
                    exit_with_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: {str(cmd)}", -1)
        
        def _run_dependencies(dependency_list):
            for dependency in dependency_list:
                dependency._invoke(self, self.vars)
        
        need_exec, dep_list = self.need_exec_target()
        if need_exec:
            _run_dependencies(dep_list)
            _run_recept()
            
        # except Exception as e:
        #     exit_with_message(f"‚ÄºÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: {str(e)}",  -2)
        self.target_run_lock = False

    
    def need_exec_target(self, restore_cache: bool = False):
        if self.exec_cond_cache and not restore_cache:
            return self.exec_cond_cache
        
        # –ï—Å–ª–∏ —Ü–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –¥–ª—è –µ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è
        if not self.target.exists():
            return (True, self.dependencies)
        
        # TODO: –í–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å –∫–µ—à –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è)
        # –¢–∞–∫ –∫–∞–∫ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–∞–∑ –ø—Ä–∏ –±–æ–ª—å—à–æ–π –≥–ª—É–±–∏–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
        
        if self.target.exists():
            dependencies_to_run = []
            for dep in self.dependencies:
                if dep.need_exec_target():
                    dependencies_to_run.append(dep)
                elif dep._is_file():
                    if file1_newer_file2(dep.target_name, self.target_name):
                        dependencies_to_run.append(dep)
                        
            self.exec_cond_cache = (True, dependencies_to_run)
        else:
            self.exec_cond_cache = (False, [])
        
        return self.exec_cond_cache
    

class TargetRef:
    """–ö–ª–∞—Å—Å TargetRef —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Ü–µ–ª–µ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –ø—É–ª–µ —Ü–µ–ª–µ–π (_TARGET_POOL).
    
    –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä:
    -------------
    __init__(self, target) -> None
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ TargetRef. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ü–µ–ª–µ–≤—É—é –∑–∞–¥–∞—á—É –≤ —Å—Ç—Ä–æ–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ—ë.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        target : –ª—é–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É;
            –ò–º—è –∏–ª–∏ —Ñ–∞–π–ª/–ø–∞–ø–∫–∞.

    –ú–µ—Ç–æ–¥—ã:
    -------
    __call__(self, vars = None)
        –í—ã–∑—ã–≤–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø—É–ª–∞ —Ü–µ–ª–µ–π (_TARGET_POOL) –ø–æ –∏–º–µ–Ω–∏, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        vars : dict, optional
            –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö. 

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        –û–±—ä–µ–∫—Ç –∏–∑ –ø—É–ª–∞ —Ü–µ–ª–µ–π (_TARGET_POOL) –ø–æ –∏–º–µ–Ω–∏.

        –ò—Å–∫–ª—é—á–µ–Ω–∏—è:
        KeyError
            –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø—É–ª–µ —Ü–µ–ª–µ–π (_TARGET_POOL), –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
    """
    def __init__(self, target) -> None:
        self.target = str(target)


    def _invoke(self, parent, vars = {}):
        """
        –í—ã–∑—ã–≤–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø—É–ª–∞ —Ü–µ–ª–µ–π (_TARGET_POOL) –ø–æ –∏–º–µ–Ω–∏, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        vars : dict, optional
            –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        –û–±—ä–µ–∫—Ç –∏–∑ –ø—É–ª–∞ —Ü–µ–ª–µ–π (_TARGET_POOL) –ø–æ –∏–º–µ–Ω–∏.

        –ò—Å–∫–ª—é—á–µ–Ω–∏—è:
        KeyError
            –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø—É–ª–µ —Ü–µ–ª–µ–π (_TARGET_POOL), –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
        """
        if self.target not in _TARGET_POOL:
            raise KeyError(f"not found target {self.target} for TargetRef class")
        return _TARGET_POOL[self.target]._invoke(parent, vars)


class ConditionalTarget:
    def __init__(self, condition, if_true: callable = None, if_false: callable = None):
        self.if_true = if_true
        self.if_false = if_false
        self.condition = condition

    def _invoke(self, parent, vars = {}):
        res = None
        if isinstance(self.condition, callable):
            res = self.condition()
        else:
            res = self.condition
        
        if res:
            if self.if_true is not None:
                self.if_true()
        else:
            if self.if_false is not None:
                self.if_false()
        
        return True


class TargetShellContains(Target):
    def __init__(self, target: Path, check_command: str, dependencies: list = [], recept: list = []) -> None:
        super().__init__(target, dependencies, recept)
        self.check_command = check_command
    
    def need_exec_target(self) -> bool:
        result = subprocess.run(
            self.check_command, 
            shell=True, 
            check=True, 
            text=True, 
            stdout=subprocess.PIPE, 
            stderr=subprocess.PIPE
        )
        
        return self.target_name not in result.stdout


class TargetFileWithLine(Target):
    def __init__(self, target: Path, search_line: str, dependencies: list = [], recept: list = []) -> None:
        super().__init__(target, dependencies, recept)
        self.search_line = search_line
        
    def need_exec_target(self) -> bool:
        with open(self.target, 'r', encoding='utf-8') as file:
            for line in file:
                if self.search_line in line:
                    return True
        return False


class ForEachFileTarget:
    def __init__(self, 
                 target, 
                 dependency: list["callable"] =[], 
                 recept: list["callable"] = [],  
                 glob_pattern = "*",
                 target_suffix = None) -> None:
        
        self.target = _get_path(target)
        self.pattern = glob_pattern
        self.dependency = dependency
        self.recept = recept
        self.suffix = target_suffix

        self._invoke(None)
        
    
    def _invoke(self, parent, vars = {}):
        fpath = str(self.target / self.pattern)
        files = glob.glob(fpath)
        if not files:
            raise Exception(f"error target '{str(self.target)}' pattern '{fpath}' ({self.pattern}): not found files")

        if self.suffix:
            suffixed = []
            for file in files:
                suffixed.append(
                    Target(f"{file}{self.suffix}", dependencies=[
                        Target(file, dependencies=self.dependency, recept=self.recept)
                    ])
                )
                
            Target(self.target, dependencies=suffixed)
        else:
            Target(self.target, dependencies=[Target(file if not self.suffix else f"{file}{self.suffix}", dependencies=self.dependency, recept=self.recept) for file in files])
     

# def make_targets_for_files(directory, file_pattern = "*", dependencies=[], recept_appender: callable = None):
#     target = _get_path(directory)
#     files = glob.glob(str(target / file_pattern))
    
#     refs = []
#     for file in files:
#         Target(file, dependencies=dependencies, recept=recept_appender(file))
#         refs.append(TargetRef(file))
    
#     return refs



_IMPORT_STRINGS = """
from exechain.exechain import *

"""


def include(file) -> None:
    """–í–∫–ª—é—á–∞—Ç —Ñ–∞–π–ª —Å–±–æ—Ä–∫–∏ –≤ —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª

    Args:
        file (Path | str): –ü—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞ *.exechain

    Raises:
        FileNotFoundError: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    path = _get_path(file)
    
    if not path.exists():
        raise FileNotFoundError(f"error include file '{str(path)}': not found file")
    
    script = _IMPORT_STRINGS
    
    with open(path, "r") as f:
        script += f.read()

    exec(script)


def add_folder_to_path(folder):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—É—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è PATH. 
    
    –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–π –ø—É—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π PATH –æ–Ω –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω.

    –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π folder. –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏–º–µ–µ—Ç –ª–∏—à—å —Ç–∏–ø dict:
    –ü—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–∏–ø–∞ dict –æ–∂–∏–¥–∞–µ—Ç—Å—è —á—Ç–æ –æ–Ω –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–∞–º–µ—Ç—Ä —Å –∫–ª—é—á–µ–º 'target-name',
    –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω –ø—É—Ç—å.
    
    Args:
        folder (Path | str | dict | list): –ü—É—Ç—å –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å
    
    Raises:
        Exception: –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
    """
    folders_list = []
    if isinstance(folder, str) or isinstance(folder, Path):
        folders_list = [str(folder)]
    elif isinstance(folder, dict):
        folders_list = [folder["target-name"]]
    elif isinstance(folder, list):
        folders_list = [str(f) for f in folder]
    else:
        raise Exception(f"Unsupported type on variable 'folder': {folder}")
    
    tmp_path = os.environ.get("PATH")
    for folder in folders_list:
        if folder in tmp_path:
            continue
        tmp_path = f"{folder}{os.pathsep}{tmp_path}"

    os.environ["PATH"] = tmp_path
