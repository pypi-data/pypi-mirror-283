# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.user_business_hours_update_response import UserBusinessHoursUpdateResponse
from ..models.user_business_hours_update_request import UserBusinessHoursUpdateRequest
from ..models.get_user_business_hours_response import GetUserBusinessHoursResponse
from ..models.company_business_hours_update_request import (
    CompanyBusinessHoursUpdateRequest,
)
from ..models.company_business_hours import CompanyBusinessHours


class BusinessHoursService(BaseService):

    @cast_models
    def read_company_business_hours(self, account_id: str) -> CompanyBusinessHours:
        """Returns the company business hours schedule. Business hours (and After hours - all the remaining time) schedules are commonly used for setting call handling rules - `business-hours-rule` and `after-hours-rule` correspondingly.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: CompanyBusinessHours
        """

        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/business-hours",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return CompanyBusinessHours._unmap(response)

    @cast_models
    def update_company_business_hours(
        self, request_body: CompanyBusinessHoursUpdateRequest, account_id: str
    ) -> CompanyBusinessHours:
        """Updates the company business hours schedule.

        :param request_body: The request body.
        :type request_body: CompanyBusinessHoursUpdateRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: CompanyBusinessHours
        """

        Validator(CompanyBusinessHoursUpdateRequest).validate(request_body)
        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/business-hours",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return CompanyBusinessHours._unmap(response)

    @cast_models
    def read_user_business_hours(
        self, account_id: str, extension_id: str
    ) -> GetUserBusinessHoursResponse:
        """Returns the user business hours schedule. Business hours (and After hours - all the remaining time) schedules are commonly used for setting call handling rules - `business-hours-rule` and `after-hours-rule` correspondingly. **Please note:** If the user business hours are set to 'Custom hours' then a particular schedule is returned; however if set to '24 hours/7 days a week' the schedule will be empty.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: GetUserBusinessHoursResponse
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/business-hours",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return GetUserBusinessHoursResponse._unmap(response)

    @cast_models
    def update_user_business_hours(
        self,
        request_body: UserBusinessHoursUpdateRequest,
        account_id: str,
        extension_id: str,
    ) -> UserBusinessHoursUpdateResponse:
        """Updates the user business hours schedule.

        :param request_body: The request body.
        :type request_body: UserBusinessHoursUpdateRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: UserBusinessHoursUpdateResponse
        """

        Validator(UserBusinessHoursUpdateRequest).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/business-hours",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return UserBusinessHoursUpdateResponse._unmap(response)
