# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.cloud_recordings import CloudRecordings


class MeetingRecordingsService(BaseService):

    @cast_models
    def get_account_recordings(
        self, account_id: str, page_token: str = None, per_page: int = None
    ) -> CloudRecordings:
        """Returns all account recordings.
        This endpoint is used in Admin recording service, not regular web

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param page_token: Token to get the next page, defaults to None
        :type page_token: str, optional
        :param per_page: Number of records returned, defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Ok
        :rtype: CloudRecordings
        """

        Validator(str).validate(account_id)
        Validator(str).is_optional().validate(page_token)
        Validator(int).is_optional().validate(per_page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/rcvideo/v1/account/{{accountId}}/recordings",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_query("pageToken", page_token)
            .add_query("perPage", per_page)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return CloudRecordings._unmap(response)

    @cast_models
    def get_extension_recordings(
        self,
        account_id: str,
        extension_id: str,
        page_token: str = None,
        per_page: int = None,
    ) -> CloudRecordings:
        """Returns all recordings available for specific extension.
        This endpoint is used in admin recording service, not regular web

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param page_token: Token to get the next page, defaults to None
        :type page_token: str, optional
        :param per_page: Number of records returned, defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Ok
        :rtype: CloudRecordings
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(str).is_optional().validate(page_token)
        Validator(int).is_optional().validate(per_page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/rcvideo/v1/account/{{accountId}}/extension/{{extensionId}}/recordings",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_query("pageToken", page_token)
            .add_query("perPage", per_page)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return CloudRecordings._unmap(response)
