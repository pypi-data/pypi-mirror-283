# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.list_standard_greetings_usage_type import ListStandardGreetingsUsageType
from ..models.list_standard_greetings_type import ListStandardGreetingsType
from ..models.greetings_create_custom_user_greeting_request_1 import (
    GreetingsCreateCustomUserGreetingRequest1,
)
from ..models.greetings_create_company_greeting_request_1 import (
    GreetingsCreateCompanyGreetingRequest1,
)
from ..models.dictionary_greeting_list import DictionaryGreetingList
from ..models.dictionary_greeting_info import DictionaryGreetingInfo
from ..models.custom_user_greeting_info import CustomUserGreetingInfo
from ..models.custom_company_greeting_info import CustomCompanyGreetingInfo
from ..models.content_disposition import ContentDisposition


class GreetingsService(BaseService):

    @cast_models
    def read_account_greeting_content(
        self,
        account_id: str,
        greeting_id: str,
        content_disposition: ContentDisposition = None,
        content_disposition_filename: str = None,
    ) -> any:
        """Returns account-level greeting media contents.

        **This API must be called via media API entry point, e.g. https://media.ringcentral.com**

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param greeting_id: Internal identifier of a greeting
        :type greeting_id: str
        :param content_disposition: Whether the content is expected to be displayed in the browser, or downloaded and saved locally, defaults to None
        :type content_disposition: ContentDisposition, optional
        :param content_disposition_filename: The default filename of the file to be downloaded, defaults to None
        :type content_disposition_filename: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response
        :rtype: any
        """

        Validator(str).validate(account_id)
        Validator(str).validate(greeting_id)
        Validator(ContentDisposition).is_optional().validate(content_disposition)
        Validator(str).is_optional().validate(content_disposition_filename)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/greeting/{{greetingId}}/content",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("greetingId", greeting_id)
            .add_query("contentDisposition", content_disposition)
            .add_query("contentDispositionFilename", content_disposition_filename)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def read_greeting_content(
        self,
        account_id: str,
        extension_id: str,
        greeting_id: str,
        content_disposition: ContentDisposition = None,
        content_disposition_filename: str = None,
    ) -> any:
        """Returns extension-level greeting media contents.

        **This API must be called via media API entry point, e.g. https://media.ringcentral.com**

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param greeting_id: Internal identifier of a greeting
        :type greeting_id: str
        :param content_disposition: Whether the content is expected to be displayed in the browser, or downloaded and saved locally, defaults to None
        :type content_disposition: ContentDisposition, optional
        :param content_disposition_filename: The default filename of the file to be downloaded, defaults to None
        :type content_disposition_filename: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response
        :rtype: any
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(str).validate(greeting_id)
        Validator(ContentDisposition).is_optional().validate(content_disposition)
        Validator(str).is_optional().validate(content_disposition_filename)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/greeting/{{greetingId}}/content",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_path("greetingId", greeting_id)
            .add_query("contentDisposition", content_disposition)
            .add_query("contentDispositionFilename", content_disposition_filename)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def create_company_greeting(
        self, request_body: any, account_id: str
    ) -> CustomCompanyGreetingInfo:
        """Creates a custom company greeting.

        :param request_body: The request body.
        :type request_body: any
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: CustomCompanyGreetingInfo
        """

        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/greeting",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body, "multipart/mixed")
        )

        response = self.send_request(serialized_request)

        return CustomCompanyGreetingInfo._unmap(response)

    @cast_models
    def create_custom_user_greeting(
        self, request_body: any, account_id: str, extension_id: str, apply: bool = None
    ) -> CustomUserGreetingInfo:
        """Creates custom greeting for an extension user.

        :param request_body: The request body.
        :type request_body: any
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param apply: Specifies whether to apply an answering rule or not. If set to
        true then `answeringRule` parameter is mandatory. If set to false, then
        the answering rule is not applied even if specified, defaults to None
        :type apply: bool, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: CustomUserGreetingInfo
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(bool).is_optional().validate(apply)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/greeting",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_query("apply", apply)
            .serialize()
            .set_method("POST")
            .set_body(request_body, "multipart/mixed")
        )

        response = self.send_request(serialized_request)

        return CustomUserGreetingInfo._unmap(response)

    @cast_models
    def read_custom_greeting(
        self, account_id: str, extension_id: str, greeting_id: str
    ) -> CustomUserGreetingInfo:
        """Returns a custom user greeting by ID.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param greeting_id: Internal identifier of a greeting
        :type greeting_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: CustomUserGreetingInfo
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(str).validate(greeting_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/greeting/{{greetingId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_path("greetingId", greeting_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return CustomUserGreetingInfo._unmap(response)

    @cast_models
    def list_standard_greetings(
        self,
        page: int = None,
        per_page: int = None,
        type_: ListStandardGreetingsType = None,
        usage_type: ListStandardGreetingsUsageType = None,
    ) -> DictionaryGreetingList:
        """Returns the list of predefined standard greetings. Custom greetings
        recorded by user are not returned in response to this request. See Get Extension
        Custom Greetings.

        :param page: The result set page number (1-indexed) to return, defaults to None
        :type page: int, optional
        :param per_page: The number of items per page. If provided value in the request
        is greater than a maximum, the maximum value is applied, defaults to None
        :type per_page: int, optional
        :param type_: Type of greeting, specifying the case when the greeting is played, defaults to None
        :type type_: ListStandardGreetingsType, optional
        :param usage_type: Usage type of greeting, specifying if the greeting is applied for user extension or department (call queue) extension, defaults to None
        :type usage_type: ListStandardGreetingsUsageType, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: DictionaryGreetingList
        """

        Validator(int).is_optional().min(1).max(1000).validate(page)
        Validator(int).is_optional().min(1).max(1000).validate(per_page)
        Validator(ListStandardGreetingsType).is_optional().validate(type_)
        Validator(ListStandardGreetingsUsageType).is_optional().validate(usage_type)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/dictionary/greeting",
                self.get_default_headers(),
            )
            .add_query("page", page, explode=False)
            .add_query("perPage", per_page, explode=False)
            .add_query("type", type_)
            .add_query("usageType", usage_type)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return DictionaryGreetingList._unmap(response)

    @cast_models
    def read_standard_greeting(self, greeting_id: str) -> DictionaryGreetingInfo:
        """Returns a standard greeting by ID.

        :param greeting_id: Internal identifier of a greeting
        :type greeting_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: DictionaryGreetingInfo
        """

        Validator(str).validate(greeting_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/dictionary/greeting/{{greetingId}}",
                self.get_default_headers(),
            )
            .add_path("greetingId", greeting_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return DictionaryGreetingInfo._unmap(response)
