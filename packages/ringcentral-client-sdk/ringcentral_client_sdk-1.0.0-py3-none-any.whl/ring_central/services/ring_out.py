# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.make_ring_out_request import MakeRingOutRequest
from ..models.get_ring_out_status_response import GetRingOutStatusResponse


class RingOutService(BaseService):

    @cast_models
    def create_ring_out_call(
        self, request_body: MakeRingOutRequest, account_id: str, extension_id: str
    ) -> GetRingOutStatusResponse:
        """Makes a 2-legged RingOut call.

        :param request_body: The request body.
        :type request_body: MakeRingOutRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Ring out call information
        :rtype: GetRingOutStatusResponse
        """

        Validator(MakeRingOutRequest).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/ring-out",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return GetRingOutStatusResponse._unmap(response)

    @cast_models
    def read_ring_out_call_status(
        self, account_id: str, extension_id: str, ringout_id: str
    ) -> GetRingOutStatusResponse:
        """Returns a status of a 2-legged RingOut call.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param ringout_id: Internal identifier of a RingOut call
        :type ringout_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: RingOut call status information
        :rtype: GetRingOutStatusResponse
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(str).validate(ringout_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/ring-out/{{ringoutId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_path("ringoutId", ringout_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return GetRingOutStatusResponse._unmap(response)

    @cast_models
    def delete_ring_out_call(self, account_id: str, extension_id: str, ringout_id: str):
        """Cancels a 2-legged RingOut call.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param ringout_id: Internal identifier of a RingOut call
        :type ringout_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(str).validate(ringout_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/ring-out/{{ringoutId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_path("ringoutId", ringout_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)

        return response
