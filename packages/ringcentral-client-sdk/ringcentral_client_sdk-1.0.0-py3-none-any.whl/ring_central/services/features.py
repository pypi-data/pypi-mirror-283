# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.feature_list import FeatureList


class FeaturesService(BaseService):

    @cast_models
    def read_extension_features(
        self,
        account_id: str,
        extension_id: str,
        available_only: bool = None,
        feature_id: List[str] = None,
    ) -> FeatureList:
        """Returns a list of supported features and the information on their
        availability for the current extension. Particular feature(s) can
        be checked by providing `featureId` query parameter. Multiple values
        are supported in the format: `?featureId=Feature1&featureId=Feature2`.
        To get only available features in order to decrease response size,
        `availableOnly=true` query param can be specified. If a feature
        is available for the current user, `"available": true` is returned in
        response for the record with the corresponding feature ID. Otherwise,
        the additional attribute `reason` is returned with the appropriate code:
        - `ServicePlanLimitation` -  a feature is not included in account service plan;
        - `AccountLimitation` - a feature is turned off for account;
        - `ExtensionTypeLimitation` - a feature is not applicable for extension type;
        - `ExtensionLimitation` - a feature is not available for extension, e.g., additional license required;
        - `InsufficientPermissions` - required permission is not granted to the current user (not the one, who is specified in the URL, but the one who is calling this API);
        - `ConfigurationLimitation` - a feature is turned off for extension, e.g., by account administrator.

        Also, some features may have additional parameters, e.g. limits, which are returned in `params` attribute as a name-value collection:

            {
              "id": "HUD",
              "available": true,
              "params": [
                {
                  "name": "limitMax",
                  "value": "100"
                }
              ]
            }

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param available_only: Allows to filter features by availability for an extension, defaults to None
        :type available_only: bool, optional
        :param feature_id: Internal identifier(s) of the feature(s), defaults to None
        :type feature_id: List[str], optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Feature list
        :rtype: FeatureList
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(bool).is_optional().validate(available_only)
        Validator(str).is_array().is_optional().validate(feature_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/features",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_query("availableOnly", available_only)
            .add_query("featureId", feature_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return FeatureList._unmap(response)
