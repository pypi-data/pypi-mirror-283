# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.replace_phone_number_request import ReplacePhoneNumberRequest
from ..models.platform_payment_type import PlatformPaymentType
from ..models.phone_number_usage_type import PhoneNumberUsageType
from ..models.phone_number_type import PhoneNumberType
from ..models.phone_number_toll_type import PhoneNumberTollType
from ..models.phone_number_status import PhoneNumberStatus
from ..models.parse_phone_number_response import ParsePhoneNumberResponse
from ..models.parse_phone_number_request import ParsePhoneNumberRequest
from ..models.list_extension_phone_numbers_usage_type import (
    ListExtensionPhoneNumbersUsageType,
)
from ..models.list_extension_phone_numbers_status import ListExtensionPhoneNumbersStatus
from ..models.list_account_phone_numbers_usage_type import (
    ListAccountPhoneNumbersUsageType,
)
from ..models.list_account_phone_numbers_status import ListAccountPhoneNumbersStatus
from ..models.get_extension_phone_numbers_response import (
    GetExtensionPhoneNumbersResponse,
)
from ..models.get_bulk_add_task_results_v2_ok_response import (
    GetBulkAddTaskResultsV2OkResponse,
    GetBulkAddTaskResultsV2OkResponseGuard,
)
from ..models.extension_status import ExtensionStatus
from ..models.delete_phone_numbers_response import DeletePhoneNumbersResponse
from ..models.delete_phone_numbers_request import DeletePhoneNumbersRequest
from ..models.company_phone_number_info import CompanyPhoneNumberInfo
from ..models.assign_phone_number_request import AssignPhoneNumberRequest
from ..models.add_phone_numbers_response import AddPhoneNumbersResponse
from ..models.add_phone_numbers_request import AddPhoneNumbersRequest
from ..models.account_phone_numbers import AccountPhoneNumbers
from ..models.account_phone_number_list import AccountPhoneNumberList
from ..models.account_phone_number_info import AccountPhoneNumberInfo


class PhoneNumbersService(BaseService):

    @cast_models
    def list_account_phone_numbers_v2(
        self,
        account_id: str,
        page: int = None,
        per_page: int = None,
        type_: List[PhoneNumberType] = None,
        usage_type: List[PhoneNumberUsageType] = None,
        status: PhoneNumberStatus = None,
        toll_type: PhoneNumberTollType = None,
        extension_status: ExtensionStatus = None,
        byoc_number: bool = None,
        phone_number: str = None,
    ) -> AccountPhoneNumberList:
        """Returns the list of phone numbers assigned to RingCentral customer
        account. Both company-level and extension-level numbers are returned.
        Conferencing numbers, hot desk and ELIN numbers are not returned.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param page: The result set page number (1-indexed) to return, defaults to None
        :type page: int, optional
        :param per_page: The number of items per page. If provided value in the request
        is greater than a maximum, the maximum value is applied, defaults to None
        :type per_page: int, optional
        :param type_: Types of phone numbers to be returned, defaults to None
        :type type_: List[PhoneNumberType], optional
        :param usage_type: Usage type(s) of phone numbers to be returned, defaults to None
        :type usage_type: List[PhoneNumberUsageType], optional
        :param status: Status of the phone number(s) to be returned, defaults to None
        :type status: PhoneNumberStatus, optional
        :param toll_type: Toll type of phone numbers to return, defaults to None
        :type toll_type: PhoneNumberTollType, optional
        :param extension_status: Statuses of extensions to return phone numbers for, defaults to None
        :type extension_status: ExtensionStatus, optional
        :param byoc_number: The parameter reflects whether this number is BYOC or not, defaults to None
        :type byoc_number: bool, optional
        :param phone_number: Phone number in e.164 format to be searched for.
        Parameter value can include wildcards (e.g. "+165012345**")
        or be an exact number "+16501234500" - single number is searched in that case.
        Make sure you escape the "+" in the URL as "%2B", defaults to None
        :type phone_number: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response
        :rtype: AccountPhoneNumberList
        """

        Validator(str).validate(account_id)
        Validator(int).is_optional().min(1).max(1000).validate(page)
        Validator(int).is_optional().min(1).max(1000).validate(per_page)
        Validator(PhoneNumberType).is_array().is_optional().validate(type_)
        Validator(PhoneNumberUsageType).is_array().is_optional().validate(usage_type)
        Validator(PhoneNumberStatus).is_optional().validate(status)
        Validator(PhoneNumberTollType).is_optional().validate(toll_type)
        Validator(ExtensionStatus).is_optional().validate(extension_status)
        Validator(bool).is_optional().validate(byoc_number)
        Validator(str).is_optional().max_length(18).validate(phone_number)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v2/accounts/{{accountId}}/phone-numbers",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_query("page", page, explode=False)
            .add_query("perPage", per_page, explode=False)
            .add_query("type", type_)
            .add_query("usageType", usage_type)
            .add_query("status", status)
            .add_query("tollType", toll_type)
            .add_query("extensionStatus", extension_status)
            .add_query("byocNumber", byoc_number)
            .add_query("phoneNumber", phone_number)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return AccountPhoneNumberList._unmap(response)

    @cast_models
    def delete_numbers_from_inventory_v2(
        self, request_body: DeletePhoneNumbersRequest, account_id: str
    ) -> DeletePhoneNumbersResponse:
        """This method can only delete numbers that meet one of the following requirements:
          - numbers that have `"usageType": "Inventory"`
          - `"Forwarded"` numbers
          - `"Forwarded Company"` numbers

        In other words, this method will not delete numbers which are in use on the account - extension direct numbers,
        main number, etc. It is possible to indicate phone numbers to be deleted using their IDs or exact string values
        in e.164 format. However, the same lookup method (by ID or by value) must be used for all numbers within the same API call.

        :param request_body: The request body.
        :type request_body: DeletePhoneNumbersRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response
        :rtype: DeletePhoneNumbersResponse
        """

        Validator(DeletePhoneNumbersRequest).validate(request_body)
        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v2/accounts/{{accountId}}/phone-numbers",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("DELETE")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return DeletePhoneNumbersResponse._unmap(response)

    @cast_models
    def assign_phone_number_v2(
        self,
        request_body: AssignPhoneNumberRequest,
        account_id: str,
        phone_number_id: str,
    ) -> AccountPhoneNumberInfo:
        """Assigns or reassigns a phone number as a company or extension number.

        Assign scenarios supported:
        - from Inventory to a company number;
        - from Inventory to an extension number.

        Reassign scenarios supported:
        - from an extension to another extension;
        - from an extension to a company number;
        - from a company number to an extension.

        :param request_body: The request body.
        :type request_body: AssignPhoneNumberRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param phone_number_id: Internal identifier of a phone number
        :type phone_number_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response
        :rtype: AccountPhoneNumberInfo
        """

        Validator(AssignPhoneNumberRequest).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).max_length(18).pattern("^[1-9]\d{1,14}$").validate(
            phone_number_id
        )

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v2/accounts/{{accountId}}/phone-numbers/{{phoneNumberId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("phoneNumberId", phone_number_id)
            .serialize()
            .set_method("PATCH")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return AccountPhoneNumberInfo._unmap(response)

    @cast_models
    def replace_phone_number_v2(
        self,
        request_body: ReplacePhoneNumberRequest,
        account_id: str,
        phone_number_id: str,
    ) -> AccountPhoneNumberInfo:
        """Replaces (swaps) phone numbers from Inventory with the main, company, direct or company fax numbers.
        This method is used to replace temporary numbers when the porting process is complete.

        :param request_body: The request body.
        :type request_body: ReplacePhoneNumberRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param phone_number_id: Internal identifier of a phone number
        :type phone_number_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Success
        :rtype: AccountPhoneNumberInfo
        """

        Validator(ReplacePhoneNumberRequest).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).max_length(18).pattern("^[1-9]\d{1,14}$").validate(
            phone_number_id
        )

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v2/accounts/{{accountId}}/phone-numbers/{{phoneNumberId}}/replace",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("phoneNumberId", phone_number_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return AccountPhoneNumberInfo._unmap(response)

    @cast_models
    def add_numbers_to_inventory_v2(
        self, request_body: AddPhoneNumbersRequest, account_id: str
    ) -> AddPhoneNumbersResponse:
        """Adds phone numbers to the account Inventory as unassigned. Currently, we support the following values: `Inventory`,
        `InventoryPartnerBusinessMobileNumber` and `PartnerBusinessMobileNumber`. Later we may support some other values like `ForwardedNumber`, etc.

        :param request_body: The request body.
        :type request_body: AddPhoneNumbersRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response (synchronous operation)
        :rtype: AddPhoneNumbersResponse
        """

        Validator(AddPhoneNumbersRequest).validate(request_body)
        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v2/accounts/{{accountId}}/phone-numbers/bulk-add",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return AddPhoneNumbersResponse._unmap(response)

    @cast_models
    def get_bulk_add_task_results_v2(
        self, account_id: str, task_id: str
    ) -> GetBulkAddTaskResultsV2OkResponse:
        """Returns the result of asynchronous operation which adds phone numbers to the account Inventory.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param task_id: Identifier of a task returned by asynchronous bulk add operation
        :type task_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response
        :rtype: GetBulkAddTaskResultsV2OkResponse
        """

        Validator(str).validate(account_id)
        Validator(str).validate(task_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v2/accounts/{{accountId}}/phone-numbers/bulk-add/{{taskId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("taskId", task_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return GetBulkAddTaskResultsV2OkResponseGuard.return_one_of(response)

    @cast_models
    def list_extension_phone_numbers(
        self,
        account_id: str,
        extension_id: str,
        status: ListExtensionPhoneNumbersStatus = None,
        usage_type: List[ListExtensionPhoneNumbersUsageType] = None,
        page: int = None,
        per_page: int = None,
    ) -> GetExtensionPhoneNumbersResponse:
        """Returns the list of phone numbers that are used by a particular extension,
        can be filtered by the phone number type. The returned list contains all
        numbers which are directly mapped to the given extension. Plus the features
        and company-level numbers that may be used when performing different operations
        on behalf of this extension.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param status: Status of a phone number, defaults to None
        :type status: ListExtensionPhoneNumbersStatus, optional
        :param usage_type: Usage type of phone number, defaults to None
        :type usage_type: List[ListExtensionPhoneNumbersUsageType], optional
        :param page: Indicates a page number to retrieve. Only positive number values
        are allowed. Default value is '1', defaults to None
        :type page: int, optional
        :param per_page: Indicates a page size (number of items). If not specified, the value is '100' by default, defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK: User Phone Number List
        :rtype: GetExtensionPhoneNumbersResponse
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(ListExtensionPhoneNumbersStatus).is_optional().validate(status)
        Validator(ListExtensionPhoneNumbersUsageType).is_array().is_optional().validate(
            usage_type
        )
        Validator(int).is_optional().validate(page)
        Validator(int).is_optional().validate(per_page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/phone-number",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_query("status", status)
            .add_query("usageType", usage_type)
            .add_query("page", page)
            .add_query("perPage", per_page)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return GetExtensionPhoneNumbersResponse._unmap(response)

    @cast_models
    def list_account_phone_numbers(
        self,
        account_id: str,
        page: int = None,
        per_page: int = None,
        usage_type: List[ListAccountPhoneNumbersUsageType] = None,
        payment_type: PlatformPaymentType = None,
        status: ListAccountPhoneNumbersStatus = None,
    ) -> AccountPhoneNumbers:
        """Returns the list of phone numbers assigned to RingCentral customer
        account. Both company-level and extension-level numbers are returned.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param page: Indicates a page number to retrieve. Only positive number values
        are accepted, defaults to None
        :type page: int, optional
        :param per_page: Indicates a page size (number of items), defaults to None
        :type per_page: int, optional
        :param usage_type: Usage type of phone number, defaults to None
        :type usage_type: List[ListAccountPhoneNumbersUsageType], optional
        :param payment_type: Payment Type of the number, defaults to None
        :type payment_type: PlatformPaymentType, optional
        :param status: Status of a phone number, defaults to None
        :type status: ListAccountPhoneNumbersStatus, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Success
        :rtype: AccountPhoneNumbers
        """

        Validator(str).validate(account_id)
        Validator(int).is_optional().validate(page)
        Validator(int).is_optional().validate(per_page)
        Validator(ListAccountPhoneNumbersUsageType).is_array().is_optional().validate(
            usage_type
        )
        Validator(PlatformPaymentType).is_optional().validate(payment_type)
        Validator(ListAccountPhoneNumbersStatus).is_optional().validate(status)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/phone-number",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_query("page", page)
            .add_query("perPage", per_page)
            .add_query("usageType", usage_type)
            .add_query("paymentType", payment_type)
            .add_query("status", status)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return AccountPhoneNumbers._unmap(response)

    @cast_models
    def read_account_phone_number(
        self, account_id: str, phone_number_id: int
    ) -> CompanyPhoneNumberInfo:
        """Returns phone number(s) belonging to a certain account or extension by phoneNumberId(s).
        [Batch request syntax](https://developers.ringcentral.com/api-reference/Batch-Requests) is supported.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param phone_number_id: Internal identifier of a phone number
        :type phone_number_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Phone number information
        :rtype: CompanyPhoneNumberInfo
        """

        Validator(str).validate(account_id)
        Validator(int).validate(phone_number_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/phone-number/{{phoneNumberId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("phoneNumberId", phone_number_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return CompanyPhoneNumberInfo._unmap(response)

    @cast_models
    def parse_phone_number(
        self,
        request_body: ParsePhoneNumberRequest,
        home_country: str = None,
        national_as_priority: bool = None,
    ) -> ParsePhoneNumberResponse:
        """Returns one or more parsed and/or formatted phone numbers that are passed as strings.

        :param request_body: The request body.
        :type request_body: ParsePhoneNumberRequest
        :param home_country: ISO 3166 alpha2 code of the home country to be used if it is impossible to determine country from the number itself.
        By default, this parameter is preset to the current user's home country or brand country if the user is undefined, defaults to None
        :type home_country: str, optional
        :param national_as_priority: The default value is `false`. If `true`, the numbers that are
        closer to the home country are given higher priority, defaults to None
        :type national_as_priority: bool, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response
        :rtype: ParsePhoneNumberResponse
        """

        Validator(ParsePhoneNumberRequest).validate(request_body)
        Validator(str).is_optional().validate(home_country)
        Validator(bool).is_optional().validate(national_as_priority)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/number-parser/parse",
                self.get_default_headers(),
            )
            .add_query("homeCountry", home_country)
            .add_query("nationalAsPriority", national_as_priority)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return ParsePhoneNumberResponse._unmap(response)
