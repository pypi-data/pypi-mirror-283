# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.update_everyone_team_request import UpdateEveryoneTeamRequest
from ..models.tm_update_team_request import TmUpdateTeamRequest
from ..models.tm_team_list import TmTeamList
from ..models.tm_team_info import TmTeamInfo
from ..models.tm_remove_team_members_request import TmRemoveTeamMembersRequest
from ..models.tm_create_team_request import TmCreateTeamRequest
from ..models.tm_add_team_members_request import TmAddTeamMembersRequest
from ..models.everyone_team_info import EveryoneTeamInfo


class TeamsService(BaseService):

    @cast_models
    def read_glip_everyone_new(self) -> EveryoneTeamInfo:
        """Returns information about "Everyone" chat (a company level chat which includes all employees).

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Success
        :rtype: EveryoneTeamInfo
        """

        serialized_request = (
            Serializer(
                f"{self.base_url}/team-messaging/v1/everyone",
                self.get_default_headers(),
            )
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return EveryoneTeamInfo._unmap(response)

    @cast_models
    def patch_glip_everyone_new(
        self, request_body: UpdateEveryoneTeamRequest = None
    ) -> EveryoneTeamInfo:
        """Updates "Everyone" chat information.

        :param request_body: The request body., defaults to None
        :type request_body: UpdateEveryoneTeamRequest, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Success
        :rtype: EveryoneTeamInfo
        """

        Validator(UpdateEveryoneTeamRequest).is_optional().validate(request_body)

        serialized_request = (
            Serializer(
                f"{self.base_url}/team-messaging/v1/everyone",
                self.get_default_headers(),
            )
            .serialize()
            .set_method("PATCH")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return EveryoneTeamInfo._unmap(response)

    @cast_models
    def list_glip_teams_new(
        self, record_count: int = None, page_token: str = None
    ) -> TmTeamList:
        """Returns the list of teams where the user is a member (both archived and active) combined with a list of public teams that can be joined by the current user. All records in response are sorted by creation time of a chat in ascending order. A team is a chat between 2 and more (unlimited number) participants assigned with specific name.

        :param record_count: Number of teams to be fetched by one request. The maximum value is 250, by default - 30, defaults to None
        :type record_count: int, optional
        :param page_token: Pagination token., defaults to None
        :type page_token: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: TmTeamList
        """

        Validator(int).is_optional().max(250).validate(record_count)
        Validator(str).is_optional().validate(page_token)

        serialized_request = (
            Serializer(
                f"{self.base_url}/team-messaging/v1/teams", self.get_default_headers()
            )
            .add_query("recordCount", record_count)
            .add_query("pageToken", page_token)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return TmTeamList._unmap(response)

    @cast_models
    def create_glip_team_new(self, request_body: TmCreateTeamRequest) -> TmTeamInfo:
        """Creates a team, and adds a list of people to the team.

        :param request_body: The request body.
        :type request_body: TmCreateTeamRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Created
        :rtype: TmTeamInfo
        """

        Validator(TmCreateTeamRequest).validate(request_body)

        serialized_request = (
            Serializer(
                f"{self.base_url}/team-messaging/v1/teams", self.get_default_headers()
            )
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return TmTeamInfo._unmap(response)

    @cast_models
    def read_glip_team_new(self, chat_id: str) -> TmTeamInfo:
        """Returns information about the specified team.

        :param chat_id: Internal identifier of a team to be returned.
        :type chat_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Success
        :rtype: TmTeamInfo
        """

        Validator(str).validate(chat_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/team-messaging/v1/teams/{{chatId}}",
                self.get_default_headers(),
            )
            .add_path("chatId", chat_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return TmTeamInfo._unmap(response)

    @cast_models
    def patch_glip_team_new(
        self, request_body: TmUpdateTeamRequest, chat_id: str
    ) -> TmTeamInfo:
        """Updates the name and description of the specified team.

        :param request_body: The request body.
        :type request_body: TmUpdateTeamRequest
        :param chat_id: Internal identifier of a team to be updated.
        :type chat_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Success
        :rtype: TmTeamInfo
        """

        Validator(TmUpdateTeamRequest).validate(request_body)
        Validator(str).validate(chat_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/team-messaging/v1/teams/{{chatId}}",
                self.get_default_headers(),
            )
            .add_path("chatId", chat_id)
            .serialize()
            .set_method("PATCH")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return TmTeamInfo._unmap(response)

    @cast_models
    def delete_glip_team_new(self, chat_id: str):
        """Deletes the specified team.

        :param chat_id: Internal identifier of a team.
        :type chat_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(chat_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/team-messaging/v1/teams/{{chatId}}",
                self.get_default_headers(),
            )
            .add_path("chatId", chat_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def remove_glip_team_members_new(
        self, request_body: TmRemoveTeamMembersRequest, chat_id: str
    ):
        """Removes members from the specified team.

        :param request_body: The request body.
        :type request_body: TmRemoveTeamMembersRequest
        :param chat_id: Internal identifier of a team to remove members from.
        :type chat_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(TmRemoveTeamMembersRequest).validate(request_body)
        Validator(str).validate(chat_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/team-messaging/v1/teams/{{chatId}}/remove",
                self.get_default_headers(),
            )
            .add_path("chatId", chat_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def join_glip_team_new(self, chat_id: str):
        """Adds the current user to the specified team.

        :param chat_id: Internal identifier of a team to be joined.
        :type chat_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(chat_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/team-messaging/v1/teams/{{chatId}}/join",
                self.get_default_headers(),
            )
            .add_path("chatId", chat_id)
            .serialize()
            .set_method("POST")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def archive_glip_team_new(self, chat_id: str):
        """Changes the status of the specified team to 'Archived'.

        :param chat_id: Internal identifier of a team to be archived.
        :type chat_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(chat_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/team-messaging/v1/teams/{{chatId}}/archive",
                self.get_default_headers(),
            )
            .add_path("chatId", chat_id)
            .serialize()
            .set_method("POST")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def unarchive_glip_team_new(self, chat_id: str):
        """Changes the status of the specified team to 'Active'.

        :param chat_id: Internal identifier of a team to be made active.
        :type chat_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(chat_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/team-messaging/v1/teams/{{chatId}}/unarchive",
                self.get_default_headers(),
            )
            .add_path("chatId", chat_id)
            .serialize()
            .set_method("POST")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def leave_glip_team_new(self, chat_id: str):
        """Removes the current user from the specified team.

        :param chat_id: Internal identifier of a team to be left.
        :type chat_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(chat_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/team-messaging/v1/teams/{{chatId}}/leave",
                self.get_default_headers(),
            )
            .add_path("chatId", chat_id)
            .serialize()
            .set_method("POST")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def add_glip_team_members_new(
        self, request_body: TmAddTeamMembersRequest, chat_id: str
    ):
        """Adds members to the specified team.

        :param request_body: The request body.
        :type request_body: TmAddTeamMembersRequest
        :param chat_id: Internal identifier of a team to add members to.
        :type chat_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(TmAddTeamMembersRequest).validate(request_body)
        Validator(str).validate(chat_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/team-messaging/v1/teams/{{chatId}}/add",
                self.get_default_headers(),
            )
            .add_path("chatId", chat_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response
