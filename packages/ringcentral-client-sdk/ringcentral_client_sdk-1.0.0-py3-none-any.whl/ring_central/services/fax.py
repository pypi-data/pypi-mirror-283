# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.list_fax_cover_pages_response import ListFaxCoverPagesResponse
from ..models.fax_response import FaxResponse
from ..models.create_fax_message_request import CreateFaxMessageRequest


class FaxService(BaseService):

    @cast_models
    def create_fax_message(
        self, request_body: dict, account_id: str, extension_id: str
    ) -> FaxResponse:
        """Creates and sends/re-sends a fax message. Re-send can be implemented
        if sending has failed. Fax attachment size (both single and total) is
        limited to 50Mb.

        :param request_body: The request body.
        :type request_body: dict
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Fax message
        :rtype: FaxResponse
        """

        Validator(dict).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/fax",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body, "multipart/form-data")
        )

        response = self.send_request(serialized_request)

        return FaxResponse._unmap(response)

    @cast_models
    def list_fax_cover_pages(
        self, page: int = None, per_page: int = None
    ) -> ListFaxCoverPagesResponse:
        """Returns fax cover pages available for the current extension.

        :param page: Indicates a page number to retrieve. Only positive number values
        are accepted, defaults to None
        :type page: int, optional
        :param per_page: Indicates a page size (number of items), defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: List of fax cover pages
        :rtype: ListFaxCoverPagesResponse
        """

        Validator(int).is_optional().validate(page)
        Validator(int).is_optional().validate(per_page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/dictionary/fax-cover-page",
                self.get_default_headers(),
            )
            .add_query("page", page)
            .add_query("perPage", per_page)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return ListFaxCoverPagesResponse._unmap(response)
