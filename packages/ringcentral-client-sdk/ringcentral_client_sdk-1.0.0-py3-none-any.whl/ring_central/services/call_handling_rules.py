# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.user_answering_rule_list import UserAnsweringRuleList
from ..models.update_answering_rule_request import UpdateAnsweringRuleRequest
from ..models.list_answering_rules_view import ListAnsweringRulesView
from ..models.list_answering_rules_type import ListAnsweringRulesType
from ..models.forward_all_company_calls_request import ForwardAllCompanyCallsRequest
from ..models.forward_all_company_calls_info import ForwardAllCompanyCallsInfo
from ..models.custom_answering_rule_info import CustomAnsweringRuleInfo
from ..models.create_answering_rule_request import CreateAnsweringRuleRequest
from ..models.company_answering_rule_update import CompanyAnsweringRuleUpdate
from ..models.company_answering_rule_request import CompanyAnsweringRuleRequest
from ..models.company_answering_rule_list import CompanyAnsweringRuleList
from ..models.company_answering_rule_info import CompanyAnsweringRuleInfo
from ..models.answering_rule_info import AnsweringRuleInfo


class CallHandlingRulesService(BaseService):

    @cast_models
    def list_company_answering_rules(
        self, account_id: str, page: int = None, per_page: int = None
    ) -> CompanyAnsweringRuleList:
        """Returns a list of company call handling rules.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param page: The result set page number (1-indexed) to return, defaults to None
        :type page: int, optional
        :param per_page: The number of items per page. If provided value in the request
        is greater than a maximum, the maximum value is applied, defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: CompanyAnsweringRuleList
        """

        Validator(str).validate(account_id)
        Validator(int).is_optional().min(1).max(1000).validate(page)
        Validator(int).is_optional().min(1).max(1000).validate(per_page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/answering-rule",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_query("page", page, explode=False)
            .add_query("perPage", per_page, explode=False)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return CompanyAnsweringRuleList._unmap(response)

    @cast_models
    def create_company_answering_rule(
        self, request_body: CompanyAnsweringRuleRequest, account_id: str
    ) -> CompanyAnsweringRuleInfo:
        """Creates call handling rule on account level.

        :param request_body: The request body.
        :type request_body: CompanyAnsweringRuleRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: CompanyAnsweringRuleInfo
        """

        Validator(CompanyAnsweringRuleRequest).validate(request_body)
        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/answering-rule",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return CompanyAnsweringRuleInfo._unmap(response)

    @cast_models
    def read_company_answering_rule(
        self, account_id: str, rule_id: str
    ) -> CompanyAnsweringRuleInfo:
        """Returns a company call handling rule by ID.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param rule_id: Internal identifier of a call handling rule
        :type rule_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: CompanyAnsweringRuleInfo
        """

        Validator(str).validate(account_id)
        Validator(str).validate(rule_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/answering-rule/{{ruleId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("ruleId", rule_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return CompanyAnsweringRuleInfo._unmap(response)

    @cast_models
    def update_company_answering_rule(
        self, request_body: CompanyAnsweringRuleUpdate, account_id: str, rule_id: str
    ) -> CompanyAnsweringRuleInfo:
        """Updates a company call handling rule.

        :param request_body: The request body.
        :type request_body: CompanyAnsweringRuleUpdate
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param rule_id: Internal identifier of a call handling rule
        :type rule_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: CompanyAnsweringRuleInfo
        """

        Validator(CompanyAnsweringRuleUpdate).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(rule_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/answering-rule/{{ruleId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("ruleId", rule_id)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return CompanyAnsweringRuleInfo._unmap(response)

    @cast_models
    def delete_company_answering_rule(self, account_id: str, rule_id: str):
        """Deletes a company custom call handling rule by a particular ID.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param rule_id: Internal identifier of a call handling rule
        :type rule_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(account_id)
        Validator(str).validate(rule_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/answering-rule/{{ruleId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("ruleId", rule_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def get_forward_all_company_calls(
        self, account_id: str
    ) -> ForwardAllCompanyCallsInfo:
        """Returns information about *Forward All Company Calls* feature setting.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Success
        :rtype: ForwardAllCompanyCallsInfo
        """

        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/forward-all-calls",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return ForwardAllCompanyCallsInfo._unmap(response)

    @cast_models
    def update_forward_all_company_calls(
        self, request_body: ForwardAllCompanyCallsRequest, account_id: str
    ) -> ForwardAllCompanyCallsInfo:
        """Updates *Forward All Company Calls* feature setting.

        :param request_body: The request body.
        :type request_body: ForwardAllCompanyCallsRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Success
        :rtype: ForwardAllCompanyCallsInfo
        """

        Validator(ForwardAllCompanyCallsRequest).validate(request_body)
        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/forward-all-calls",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("PATCH")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return ForwardAllCompanyCallsInfo._unmap(response)

    @cast_models
    def list_answering_rules(
        self,
        account_id: str,
        extension_id: str,
        type_: ListAnsweringRulesType = None,
        view: ListAnsweringRulesView = None,
        enabled_only: bool = None,
        page: int = None,
        per_page: int = None,
    ) -> UserAnsweringRuleList:
        """Returns call handling rules of an extension.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param type_: Filters custom call handling rules of the extension, defaults to None
        :type type_: ListAnsweringRulesType, optional
        :param view: view, defaults to None
        :type view: ListAnsweringRulesView, optional
        :param enabled_only: If true, then only active call handling rules are returned, defaults to None
        :type enabled_only: bool, optional
        :param page: The result set page number (1-indexed) to return, defaults to None
        :type page: int, optional
        :param per_page: The number of items per page. If provided value in the request
        is greater than a maximum, the maximum value is applied, defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: UserAnsweringRuleList
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(ListAnsweringRulesType).is_optional().validate(type_)
        Validator(ListAnsweringRulesView).is_optional().validate(view)
        Validator(bool).is_optional().validate(enabled_only)
        Validator(int).is_optional().min(1).max(1000).validate(page)
        Validator(int).is_optional().min(1).max(1000).validate(per_page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/answering-rule",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_query("type", type_)
            .add_query("view", view)
            .add_query("enabledOnly", enabled_only)
            .add_query("page", page, explode=False)
            .add_query("perPage", per_page, explode=False)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return UserAnsweringRuleList._unmap(response)

    @cast_models
    def create_answering_rule(
        self,
        request_body: CreateAnsweringRuleRequest,
        account_id: str,
        extension_id: str,
    ) -> CustomAnsweringRuleInfo:
        """Creates a custom call handling rule for a particular caller ID.

        :param request_body: The request body.
        :type request_body: CreateAnsweringRuleRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: CustomAnsweringRuleInfo
        """

        Validator(CreateAnsweringRuleRequest).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/answering-rule",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return CustomAnsweringRuleInfo._unmap(response)

    @cast_models
    def read_answering_rule(
        self,
        account_id: str,
        extension_id: str,
        rule_id: str,
        show_inactive_numbers: bool = None,
    ) -> AnsweringRuleInfo:
        """Returns a call handling rule by ID.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param rule_id: Internal identifier of a call handling rule
        :type rule_id: str
        :param show_inactive_numbers: Indicates whether inactive numbers should be returned or not, defaults to None
        :type show_inactive_numbers: bool, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: AnsweringRuleInfo
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(str).validate(rule_id)
        Validator(bool).is_optional().validate(show_inactive_numbers)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/answering-rule/{{ruleId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_path("ruleId", rule_id)
            .add_query("showInactiveNumbers", show_inactive_numbers)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return AnsweringRuleInfo._unmap(response)

    @cast_models
    def update_answering_rule(
        self,
        request_body: UpdateAnsweringRuleRequest,
        account_id: str,
        extension_id: str,
        rule_id: str,
    ) -> AnsweringRuleInfo:
        """Updates a custom call handling rule for a particular caller ID.

        :param request_body: The request body.
        :type request_body: UpdateAnsweringRuleRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param rule_id: Internal identifier of a call handling rule
        :type rule_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: AnsweringRuleInfo
        """

        Validator(UpdateAnsweringRuleRequest).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(str).validate(rule_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/answering-rule/{{ruleId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_path("ruleId", rule_id)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return AnsweringRuleInfo._unmap(response)

    @cast_models
    def delete_answering_rule(self, account_id: str, extension_id: str, rule_id: str):
        """Deletes a custom call handling rule by a particular ID.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param rule_id: Internal identifier of a call handling rule
        :type rule_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(str).validate(rule_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/answering-rule/{{ruleId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_path("ruleId", rule_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)

        return response
