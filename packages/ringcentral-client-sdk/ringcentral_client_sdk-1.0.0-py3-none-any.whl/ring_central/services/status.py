# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.job_status_response import JobStatusResponse, JobStatusResponseGuard


class StatusService(BaseService):

    @cast_models
    def cai_job_status_get(self, job_id: str) -> JobStatusResponse:
        """Returns async task status by Job ID

        :param job_id: The job id to which status will be fetched
        :type job_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response
        :rtype: JobStatusResponse
        """

        Validator(str).validate(job_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/ai/status/v1/jobs/{{jobId}}",
                self.get_default_headers(),
            )
            .add_path("jobId", job_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return JobStatusResponseGuard.return_one_of(response)
