# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.paging_only_group_users import PagingOnlyGroupUsers
from ..models.paging_only_group_devices import PagingOnlyGroupDevices
from ..models.edit_paging_group_request import EditPagingGroupRequest


class PagingOnlyGroupsService(BaseService):

    @cast_models
    def list_paging_group_users(
        self,
        account_id: str,
        paging_only_group_id: str,
        page: int = None,
        per_page: int = None,
    ) -> PagingOnlyGroupUsers:
        """Returns a list of users allowed to page this group.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param paging_only_group_id: Internal identifier of a paging group
        :type paging_only_group_id: str
        :param page: Indicates a page number to retrieve. Only positive number values
        are accepted, defaults to None
        :type page: int, optional
        :param per_page: Indicates a page size (number of items), defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Paging only group users information
        :rtype: PagingOnlyGroupUsers
        """

        Validator(str).validate(account_id)
        Validator(str).validate(paging_only_group_id)
        Validator(int).is_optional().validate(page)
        Validator(int).is_optional().validate(per_page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/paging-only-groups/{{pagingOnlyGroupId}}/users",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("pagingOnlyGroupId", paging_only_group_id)
            .add_query("page", page)
            .add_query("perPage", per_page)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return PagingOnlyGroupUsers._unmap(response)

    @cast_models
    def assign_multiple_paging_group_users_devices(
        self,
        account_id: str,
        paging_only_group_id: str,
        request_body: EditPagingGroupRequest = None,
    ):
        """Adds and/or removes paging group users and devices.

        :param request_body: The request body., defaults to None
        :type request_body: EditPagingGroupRequest, optional
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param paging_only_group_id: Internal identifier of a paging group
        :type paging_only_group_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(EditPagingGroupRequest).is_optional().validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(paging_only_group_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/paging-only-groups/{{pagingOnlyGroupId}}/bulk-assign",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("pagingOnlyGroupId", paging_only_group_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def list_paging_group_devices(
        self,
        account_id: str,
        paging_only_group_id: str,
        page: int = None,
        per_page: int = None,
    ) -> PagingOnlyGroupDevices:
        """Returns a list of paging devices assigned to this group.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param paging_only_group_id: Internal identifier of a paging group
        :type paging_only_group_id: str
        :param page: Indicates a page number to retrieve. Only positive number values
        are accepted, defaults to None
        :type page: int, optional
        :param per_page: Indicates a page size (number of items), defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Paging devices information
        :rtype: PagingOnlyGroupDevices
        """

        Validator(str).validate(account_id)
        Validator(str).validate(paging_only_group_id)
        Validator(int).is_optional().validate(page)
        Validator(int).is_optional().validate(per_page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/paging-only-groups/{{pagingOnlyGroupId}}/devices",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("pagingOnlyGroupId", paging_only_group_id)
            .add_query("page", page)
            .add_query("perPage", per_page)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return PagingOnlyGroupDevices._unmap(response)
