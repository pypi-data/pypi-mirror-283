# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.tm_conversation_list import TmConversationList
from ..models.tm_conversation_info import TmConversationInfo
from ..models.create_conversation_request import CreateConversationRequest


class ConversationsService(BaseService):

    @cast_models
    def list_glip_conversations_new(
        self, record_count: int = None, page_token: str = None
    ) -> TmConversationList:
        """Returns the list of conversations where the user is a member. All records in response are sorted by creation time of a conversation in ascending order. Conversation is a chat of the *Group* type.

        :param record_count: Number of conversations to be fetched by one request. The maximum value is 250, by default - 30, defaults to None
        :type record_count: int, optional
        :param page_token: Pagination token., defaults to None
        :type page_token: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: TmConversationList
        """

        Validator(int).is_optional().max(250).validate(record_count)
        Validator(str).is_optional().validate(page_token)

        serialized_request = (
            Serializer(
                f"{self.base_url}/team-messaging/v1/conversations",
                self.get_default_headers(),
            )
            .add_query("recordCount", record_count)
            .add_query("pageToken", page_token)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return TmConversationList._unmap(response)

    @cast_models
    def create_glip_conversation_new(
        self, request_body: CreateConversationRequest
    ) -> TmConversationInfo:
        """Creates a new conversation or opens the existing one. If the conversation already exists, then its ID will be returned in response. A conversation is an adhoc discussion between a particular set of users, not featuring any specific name or description; it is a chat of 'Group' type. If you add a person to the existing conversation (group), it creates a whole new conversation.

        :param request_body: The request body.
        :type request_body: CreateConversationRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Conversation is opened
        :rtype: TmConversationInfo
        """

        Validator(CreateConversationRequest).validate(request_body)

        serialized_request = (
            Serializer(
                f"{self.base_url}/team-messaging/v1/conversations",
                self.get_default_headers(),
            )
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return TmConversationInfo._unmap(response)

    @cast_models
    def read_glip_conversation_new(self, chat_id: str) -> TmConversationInfo:
        """Returns information about the specified conversation, including the list of conversation participants. A conversation is an adhoc discussion between a particular set of users, not featuring any specific name or description; it is a chat of 'Group' type. If you add a person to the existing conversation, it creates a whole new conversation.

        :param chat_id: Internal identifier of a conversation to be returned.
        :type chat_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Success
        :rtype: TmConversationInfo
        """

        Validator(str).validate(chat_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/team-messaging/v1/conversations/{{chatId}}",
                self.get_default_headers(),
            )
            .add_path("chatId", chat_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return TmConversationInfo._unmap(response)
