# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.list_locations_order_by import ListLocationsOrderBy
from ..models.language_list import LanguageList
from ..models.language_info import LanguageInfo
from ..models.get_timezone_list_response import GetTimezoneListResponse
from ..models.get_timezone_info_response import GetTimezoneInfoResponse
from ..models.get_state_list_response import GetStateListResponse
from ..models.get_state_info_response import GetStateInfoResponse
from ..models.get_location_list_response import GetLocationListResponse
from ..models.country_list_dictionary_model import CountryListDictionaryModel
from ..models.country_info_dictionary_model import CountryInfoDictionaryModel


class RegionalSettingsService(BaseService):

    @cast_models
    def list_states(
        self,
        all_countries: bool = None,
        country_id: int = None,
        page: int = None,
        per_page: int = None,
        with_phone_numbers: bool = None,
    ) -> GetStateListResponse:
        """Returns all states of a certain country.

        :param all_countries: If set to `true` then states of all countries are returned and
        `countryId` is ignored, even if specified. If the value is empty
        then the parameter is ignored, defaults to None
        :type all_countries: bool, optional
        :param country_id: Internal identifier of a country, defaults to None
        :type country_id: int, optional
        :param page: Indicates a page number to retrieve. Only positive number values
        are accepted, defaults to None
        :type page: int, optional
        :param per_page: Indicates a page size (number of items), defaults to None
        :type per_page: int, optional
        :param with_phone_numbers: If `true` the list of states with phone numbers available for
        buying is returned, defaults to None
        :type with_phone_numbers: bool, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: States list
        :rtype: GetStateListResponse
        """

        Validator(bool).is_optional().validate(all_countries)
        Validator(int).is_optional().validate(country_id)
        Validator(int).is_optional().validate(page)
        Validator(int).is_optional().validate(per_page)
        Validator(bool).is_optional().validate(with_phone_numbers)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/dictionary/state",
                self.get_default_headers(),
            )
            .add_query("allCountries", all_countries)
            .add_query("countryId", country_id)
            .add_query("page", page)
            .add_query("perPage", per_page)
            .add_query("withPhoneNumbers", with_phone_numbers)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return GetStateListResponse._unmap(response)

    @cast_models
    def read_state(self, state_id: int) -> GetStateInfoResponse:
        """Returns information on a specific state by ID.

        :param state_id: Internal identifier of a state
        :type state_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: State information
        :rtype: GetStateInfoResponse
        """

        Validator(int).validate(state_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/dictionary/state/{{stateId}}",
                self.get_default_headers(),
            )
            .add_path("stateId", state_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return GetStateInfoResponse._unmap(response)

    @cast_models
    def list_locations(
        self,
        order_by: ListLocationsOrderBy = None,
        page: int = None,
        per_page: int = None,
        state_id: str = None,
        with_nxx: bool = None,
    ) -> GetLocationListResponse:
        """Returns all available locations for a certain state.

        :param order_by: Sorts results by the property specified, defaults to None
        :type order_by: ListLocationsOrderBy, optional
        :param page: Indicates a page number to retrieve. Only positive number values
        are accepted, defaults to None
        :type page: int, optional
        :param per_page: Indicates a page size (number of items), defaults to None
        :type per_page: int, optional
        :param state_id: Internal identifier of a state, defaults to None
        :type state_id: str, optional
        :param with_nxx: Specifies if `nxx` codes are returned, defaults to None
        :type with_nxx: bool, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Location list
        :rtype: GetLocationListResponse
        """

        Validator(ListLocationsOrderBy).is_optional().validate(order_by)
        Validator(int).is_optional().validate(page)
        Validator(int).is_optional().validate(per_page)
        Validator(str).is_optional().validate(state_id)
        Validator(bool).is_optional().validate(with_nxx)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/dictionary/location",
                self.get_default_headers(),
            )
            .add_query("orderBy", order_by)
            .add_query("page", page)
            .add_query("perPage", per_page)
            .add_query("stateId", state_id)
            .add_query("withNxx", with_nxx)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return GetLocationListResponse._unmap(response)

    @cast_models
    def list_languages(self) -> LanguageList:
        """Returns information about the supported languages.

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Language list
        :rtype: LanguageList
        """

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/dictionary/language",
                self.get_default_headers(),
            )
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return LanguageList._unmap(response)

    @cast_models
    def read_language(self, language_id: int) -> LanguageInfo:
        """Returns a language by ID.

        :param language_id: Internal identifier of a language
        :type language_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Language information
        :rtype: LanguageInfo
        """

        Validator(int).validate(language_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/dictionary/language/{{languageId}}",
                self.get_default_headers(),
            )
            .add_path("languageId", language_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return LanguageInfo._unmap(response)

    @cast_models
    def list_timezones(
        self, page: int = None, per_page: int = None
    ) -> GetTimezoneListResponse:
        """Returns all available timezones.

        :param page: Indicates a page number to retrieve. Only positive number values
        are allowed. Default value is '1', defaults to None
        :type page: int, optional
        :param per_page: Indicates a page size (number of items). If not specified, the value is '100' by default, defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Timezones list
        :rtype: GetTimezoneListResponse
        """

        Validator(int).is_optional().validate(page)
        Validator(int).is_optional().validate(per_page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/dictionary/timezone",
                self.get_default_headers(),
            )
            .add_query("page", page)
            .add_query("perPage", per_page)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return GetTimezoneListResponse._unmap(response)

    @cast_models
    def read_timezone(self, timezone_id: int) -> GetTimezoneInfoResponse:
        """Returns information on a certain timezone.

        :param timezone_id: Internal identifier of a timezone
        :type timezone_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Timezone information
        :rtype: GetTimezoneInfoResponse
        """

        Validator(int).validate(timezone_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/dictionary/timezone/{{timezoneId}}",
                self.get_default_headers(),
            )
            .add_path("timezoneId", timezone_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return GetTimezoneInfoResponse._unmap(response)

    @cast_models
    def list_countries(
        self,
        login_allowed: bool = None,
        signup_allowed: bool = None,
        number_selling: bool = None,
        page: int = None,
        per_page: int = None,
        free_softphone_line: bool = None,
    ) -> CountryListDictionaryModel:
        """Returns all countries available for calling.

        :param login_allowed: Specifies whether the logging-in with the phone numbers of this country
        is enabled or not, defaults to None
        :type login_allowed: bool, optional
        :param signup_allowed: Indicates whether a signup/billing is allowed for a country. If
        not specified all countries are returned (according to other
        specified filters if any), defaults to None
        :type signup_allowed: bool, optional
        :param number_selling: Specifies if RingCentral sells phone numbers of this country, defaults to None
        :type number_selling: bool, optional
        :param page: Indicates a page number to retrieve. Only positive number values
        are accepted, defaults to None
        :type page: int, optional
        :param per_page: Indicates a page size (number of items), defaults to None
        :type per_page: int, optional
        :param free_softphone_line: Specifies if free phone line for softphone is available for a
        country or not, defaults to None
        :type free_softphone_line: bool, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Country list
        :rtype: CountryListDictionaryModel
        """

        Validator(bool).is_optional().validate(login_allowed)
        Validator(bool).is_optional().validate(signup_allowed)
        Validator(bool).is_optional().validate(number_selling)
        Validator(int).is_optional().validate(page)
        Validator(int).is_optional().validate(per_page)
        Validator(bool).is_optional().validate(free_softphone_line)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/dictionary/country",
                self.get_default_headers(),
            )
            .add_query("loginAllowed", login_allowed)
            .add_query("signupAllowed", signup_allowed)
            .add_query("numberSelling", number_selling)
            .add_query("page", page)
            .add_query("perPage", per_page)
            .add_query("freeSoftphoneLine", free_softphone_line)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return CountryListDictionaryModel._unmap(response)

    @cast_models
    def read_country(self, country_id: int) -> CountryInfoDictionaryModel:
        """Returns information on a specific country.

        :param country_id: Internal identifier of a country
        :type country_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Country information
        :rtype: CountryInfoDictionaryModel
        """

        Validator(int).validate(country_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/dictionary/country/{{countryId}}",
                self.get_default_headers(),
            )
            .add_path("countryId", country_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return CountryInfoDictionaryModel._unmap(response)
