# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.caller_blocking_settings_update import CallerBlockingSettingsUpdate
from ..models.caller_blocking_settings import CallerBlockingSettings
from ..models.blocked_number_status_enum import BlockedNumberStatusEnum
from ..models.blocked_allowed_phone_numbers_list import BlockedAllowedPhoneNumbersList
from ..models.blocked_allowed_phone_number_info import BlockedAllowedPhoneNumberInfo
from ..models.add_blocked_allowed_phone_number import AddBlockedAllowedPhoneNumber


class CallBlockingService(BaseService):

    @cast_models
    def read_caller_blocking_settings(
        self, account_id: str, extension_id: str
    ) -> CallerBlockingSettings:
        """Returns the current caller blocking settings of a user.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: CallerBlockingSettings
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/caller-blocking",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return CallerBlockingSettings._unmap(response)

    @cast_models
    def update_caller_blocking_settings(
        self,
        account_id: str,
        extension_id: str,
        request_body: CallerBlockingSettingsUpdate = None,
    ) -> CallerBlockingSettings:
        """Updates the current caller blocking settings of a user.

        :param request_body: The request body., defaults to None
        :type request_body: CallerBlockingSettingsUpdate, optional
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: CallerBlockingSettings
        """

        Validator(CallerBlockingSettingsUpdate).is_optional().validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/caller-blocking",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return CallerBlockingSettings._unmap(response)

    @cast_models
    def list_blocked_allowed_numbers(
        self,
        account_id: str,
        extension_id: str,
        page: int = None,
        per_page: int = None,
        status: BlockedNumberStatusEnum = None,
    ) -> BlockedAllowedPhoneNumbersList:
        """Returns the lists of blocked and allowed phone numbers.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param page: The result set page number (1-indexed) to return, defaults to None
        :type page: int, optional
        :param per_page: The number of items per page. If provided value in the request
        is greater than a maximum, the maximum value is applied, defaults to None
        :type per_page: int, optional
        :param status: status, defaults to None
        :type status: BlockedNumberStatusEnum, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: BlockedAllowedPhoneNumbersList
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(int).is_optional().min(1).max(1000).validate(page)
        Validator(int).is_optional().min(1).max(1000).validate(per_page)
        Validator(BlockedNumberStatusEnum).is_optional().validate(status)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/caller-blocking/phone-numbers",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_query("page", page, explode=False)
            .add_query("perPage", per_page, explode=False)
            .add_query("status", status)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return BlockedAllowedPhoneNumbersList._unmap(response)

    @cast_models
    def create_blocked_allowed_number(
        self,
        request_body: AddBlockedAllowedPhoneNumber,
        account_id: str,
        extension_id: str,
    ) -> BlockedAllowedPhoneNumberInfo:
        """Updates either blocked or allowed phone number list with a new phone number.

        :param request_body: The request body.
        :type request_body: AddBlockedAllowedPhoneNumber
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: BlockedAllowedPhoneNumberInfo
        """

        Validator(AddBlockedAllowedPhoneNumber).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/caller-blocking/phone-numbers",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return BlockedAllowedPhoneNumberInfo._unmap(response)

    @cast_models
    def read_blocked_allowed_number(
        self, account_id: str, extension_id: str, blocked_number_id: str
    ) -> BlockedAllowedPhoneNumberInfo:
        """Returns blocked or allowed phone number(s) by their ID(s).
        [Batch request syntax](https://developers.ringcentral.com/api-reference/Batch-Requests) is supported.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param blocked_number_id: Internal identifier of a blocked number entry
        :type blocked_number_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: BlockedAllowedPhoneNumberInfo
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(str).validate(blocked_number_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/caller-blocking/phone-numbers/{{blockedNumberId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_path("blockedNumberId", blocked_number_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return BlockedAllowedPhoneNumberInfo._unmap(response)

    @cast_models
    def update_blocked_allowed_number(
        self,
        account_id: str,
        extension_id: str,
        blocked_number_id: str,
        request_body: AddBlockedAllowedPhoneNumber = None,
    ) -> BlockedAllowedPhoneNumberInfo:
        """Updates blocked or allowed phone number(s) by their ID(s).
        [Batch request syntax](https://developers.ringcentral.com/api-reference/Batch-Requests) is supported.

        :param request_body: The request body., defaults to None
        :type request_body: AddBlockedAllowedPhoneNumber, optional
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param blocked_number_id: Internal identifier of a blocked number entry
        :type blocked_number_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: BlockedAllowedPhoneNumberInfo
        """

        Validator(AddBlockedAllowedPhoneNumber).is_optional().validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(str).validate(blocked_number_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/caller-blocking/phone-numbers/{{blockedNumberId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_path("blockedNumberId", blocked_number_id)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return BlockedAllowedPhoneNumberInfo._unmap(response)

    @cast_models
    def delete_blocked_allowed_number(
        self, account_id: str, extension_id: str, blocked_number_id: str
    ):
        """Deletes blocked or allowed phone number(s) by their ID(s). Batch request is supported.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param blocked_number_id: Internal identifier of a blocked number entry
        :type blocked_number_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(str).validate(blocked_number_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/caller-blocking/phone-numbers/{{blockedNumberId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_path("blockedNumberId", blocked_number_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)

        return response
