# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.wcs_invitee_list_resource import WcsInviteeListResource
from ..models.utils.cast_models import cast_models
from ..models.update_invitee_request import UpdateInviteeRequest
from ..models.invitee_resource import InviteeResource
from ..models.bulk_update_invitees_response import BulkUpdateInviteesResponse
from ..models.bulk_update_invitees_request import BulkUpdateInviteesRequest


class InviteesService(BaseService):

    @cast_models
    def rcw_config_list_invitees(
        self,
        webinar_id: str,
        session_id: str,
        per_page: int = None,
        page_token: str = None,
    ) -> WcsInviteeListResource:
        """Returns the list of Invitees (co-hosts and panelists in phase 1
        and also invited attendees in subsequent phases) of a given Webinar Session.
        An implicit record created for a Webinar 'Host' is always returned.

        :param webinar_id: Identifier of the Webinar.
        :type webinar_id: str
        :param session_id: Identifier of the Session.
        :type session_id: str
        :param per_page: The number of items per page. If provided value in the request
        is greater than a maximum, the maximum value is applied, defaults to None
        :type per_page: int, optional
        :param page_token: The token indicating the particular page of the result set to be retrieved.
        If omitted the first page will be returned., defaults to None
        :type page_token: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response
        :rtype: WcsInviteeListResource
        """

        Validator(str).min_length(1).max_length(20).validate(webinar_id)
        Validator(str).min_length(1).max_length(20).validate(session_id)
        Validator(int).is_optional().min(1).max(1000).validate(per_page)
        Validator(str).is_optional().validate(page_token)

        serialized_request = (
            Serializer(
                f"{self.base_url}/webinar/configuration/v1/webinars/{{webinarId}}/sessions/{{sessionId}}/invitees",
                self.get_default_headers(),
            )
            .add_path("webinarId", webinar_id)
            .add_path("sessionId", session_id)
            .add_query("perPage", per_page, explode=False)
            .add_query("pageToken", page_token, explode=False)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return WcsInviteeListResource._unmap(response)

    @cast_models
    def rcw_config_update_invitees(
        self, request_body: BulkUpdateInviteesRequest, webinar_id: str, session_id: str
    ) -> BulkUpdateInviteesResponse:
        """Adds, updates and deletes Webinar Session invitees in bulk (co-hosts and panelists in phase 1
        and also invited attendees in subsequent phases).
        The payload may contain multiple added, updated or deleted invitees.
        For each added record 'role' and either 'firstName'/'lastName'/'email' (for non-authenticated users)
        or 'linkedUser.*' (for authenticated users) must be specified, but not both.
        For updated invitees 'id'  and 'role' must be specified, 'linkedUser' change is not supported.
        For deleted invitees only there ids should be specified.
        The response contains added/updated records (full) and deleted records (ids only).

        Deleting an invitee for a Session in 'Active' or 'Finished' status is prohibited.

        :param request_body: The request body.
        :type request_body: BulkUpdateInviteesRequest
        :param webinar_id: Identifier of the Webinar.
        :type webinar_id: str
        :param session_id: Identifier of the Session.
        :type session_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response
        :rtype: BulkUpdateInviteesResponse
        """

        Validator(BulkUpdateInviteesRequest).validate(request_body)
        Validator(str).min_length(1).max_length(20).validate(webinar_id)
        Validator(str).min_length(1).max_length(20).validate(session_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/webinar/configuration/v1/webinars/{{webinarId}}/sessions/{{sessionId}}/invitees",
                self.get_default_headers(),
            )
            .add_path("webinarId", webinar_id)
            .add_path("sessionId", session_id)
            .serialize()
            .set_method("PATCH")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return BulkUpdateInviteesResponse._unmap(response)

    @cast_models
    def rcw_config_get_invitee(
        self, webinar_id: str, session_id: str, invitee_id: str
    ) -> InviteeResource:
        """Returns a Session Invitee information by ID

        :param webinar_id: Identifier of the Webinar.
        :type webinar_id: str
        :param session_id: Identifier of the Session.
        :type session_id: str
        :param invitee_id: Identifier of the Session Invitee.
        :type invitee_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response
        :rtype: InviteeResource
        """

        Validator(str).min_length(1).max_length(20).validate(webinar_id)
        Validator(str).min_length(1).max_length(20).validate(session_id)
        Validator(str).min_length(1).max_length(20).validate(invitee_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/webinar/configuration/v1/webinars/{{webinarId}}/sessions/{{sessionId}}/invitees/{{inviteeId}}",
                self.get_default_headers(),
            )
            .add_path("webinarId", webinar_id)
            .add_path("sessionId", session_id)
            .add_path("inviteeId", invitee_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return InviteeResource._unmap(response)

    @cast_models
    def rcw_config_update_invitee(
        self,
        request_body: UpdateInviteeRequest,
        webinar_id: str,
        session_id: str,
        invitee_id: str,
    ) -> InviteeResource:
        """Updates a Session Invitee. 'role' is required (it can be changed from 'Panelist' to 'CoHost' or vise versa).
        It is disallowed to update 'linkedUser': it should be done by deleting then adding an invitee.
        For non-authenticated users 'firstName'/'lastName'/'email' can be specified, but not both.
        Implicit record created for a Webinar 'Host' cannot be modified.
        Also it is disallowed to change any other role to 'Host'.

        :param request_body: The request body.
        :type request_body: UpdateInviteeRequest
        :param webinar_id: Identifier of the Webinar.
        :type webinar_id: str
        :param session_id: Identifier of the Session.
        :type session_id: str
        :param invitee_id: Identifier of the Session Invitee.
        :type invitee_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response
        :rtype: InviteeResource
        """

        Validator(UpdateInviteeRequest).validate(request_body)
        Validator(str).min_length(1).max_length(20).validate(webinar_id)
        Validator(str).min_length(1).max_length(20).validate(session_id)
        Validator(str).min_length(1).max_length(20).validate(invitee_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/webinar/configuration/v1/webinars/{{webinarId}}/sessions/{{sessionId}}/invitees/{{inviteeId}}",
                self.get_default_headers(),
            )
            .add_path("webinarId", webinar_id)
            .add_path("sessionId", session_id)
            .add_path("inviteeId", invitee_id)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return InviteeResource._unmap(response)

    @cast_models
    def rcw_config_delete_invitee(
        self, webinar_id: str, session_id: str, invitee_id: str
    ):
        """Deletes a Session Invitee. Implicit record created for a Webinar 'Host' cannot be deleted.
        Deleting an invitee for a Session in 'Active' or 'Finished' status is prohibited (HTTP 403).

        :param webinar_id: Identifier of the Webinar.
        :type webinar_id: str
        :param session_id: Identifier of the Session.
        :type session_id: str
        :param invitee_id: Identifier of the Session Invitee.
        :type invitee_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).min_length(1).max_length(20).validate(webinar_id)
        Validator(str).min_length(1).max_length(20).validate(session_id)
        Validator(str).min_length(1).max_length(20).validate(invitee_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/webinar/configuration/v1/webinars/{{webinarId}}/sessions/{{sessionId}}/invitees/{{inviteeId}}",
                self.get_default_headers(),
            )
            .add_path("webinarId", webinar_id)
            .add_path("sessionId", session_id)
            .add_path("inviteeId", invitee_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)

        return response
