# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.create_sip_registration_response import CreateSipRegistrationResponse
from ..models.create_sip_registration_request import CreateSipRegistrationRequest


class DeviceSipRegistrationService(BaseService):

    @cast_models
    def create_sip_registration(
        self, request_body: CreateSipRegistrationRequest
    ) -> CreateSipRegistrationResponse:
        """Creates SIP registration of a device/application (WebPhone, Mobile, Softphone).

        :param request_body: The request body.
        :type request_body: CreateSipRegistrationRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Success
        :rtype: CreateSipRegistrationResponse
        """

        Validator(CreateSipRegistrationRequest).validate(request_body)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/client-info/sip-provision",
                self.get_default_headers(),
            )
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return CreateSipRegistrationResponse._unmap(response)
