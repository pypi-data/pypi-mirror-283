# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.token_info import TokenInfo
from ..models.revoke_token_request import RevokeTokenRequest
from ..models.get_token_request import GetTokenRequest
from ..models.display_modes_enum import DisplayModesEnum
from ..models.code_challenge_method_enum import CodeChallengeMethodEnum
from ..models.authorize_response_type import AuthorizeResponseType
from ..models.authorize_request import AuthorizeRequest


class OAuth2_0OpenIdConnectService(BaseService):

    @cast_models
    def get_token(self, request_body: GetTokenRequest) -> TokenInfo:
        """Returns access (and potentially refresh) tokens for making API requests.

        For confidential client application types
        this endpoint requires client authentication using one of the supported
        methods (`client_secret_basic`, `client_secret_jwt` or `private_key_jwt`)

        For non-confidential client application types
        the client identifier must be provided via `client_id` request attribute.

        :param request_body: The request body.
        :type request_body: GetTokenRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Access/Refresh Tokens
        :rtype: TokenInfo
        """

        Validator(GetTokenRequest).validate(request_body)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/oauth/token", self.get_default_headers()
            )
            .serialize()
            .set_method("POST")
            .set_body(request_body, "application/x-www-form-urlencoded")
        )

        response = self.send_request(serialized_request)

        return TokenInfo._unmap(response)

    @cast_models
    def authorize(
        self,
        client_id: str,
        response_type: AuthorizeResponseType,
        redirect_uri: str = None,
        state: str = None,
        scope: str = None,
        display: DisplayModesEnum = None,
        prompt: str = None,
        ui_locales: str = None,
        locale_id: str = None,
        code_challenge: str = None,
        code_challenge_method: CodeChallengeMethodEnum = None,
        nonce: str = None,
        ui_options: str = None,
        login_hint: str = None,
        brand_id: str = None,
    ):
        """Performs Authentication of the End-User by sending the User Agent to the Authorization Server's
        Authorization Endpoint for Authentication and Authorization,
        using request parameters defined by OAuth 2.0 [RFC-6749](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1)
        and additional parameters and parameter values defined by
        [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html#AuthorizationEndpoint).

        This is the version that uses HTTP `GET` method.

        :param client_id: The registered identifier of a client application
        :type client_id: str
        :param response_type: Determines authorization flow type. The only supported value is `code` which corresponds to OAuth 2.0 "Authorization Code Flow"
        :type response_type: AuthorizeResponseType
        :param redirect_uri: This is the URI where the Authorization Server redirects the User Agent to at the end of the authorization flow.
        The value of this parameter must exactly match one of the URIs registered for this client application.
        This parameter is required if there are more than one redirect URIs registered for the app., defaults to None
        :type redirect_uri: str, optional
        :param state: An opaque value used by the client to maintain state between the request and callback.
        The authorization server includes this value when redirecting the User Agent back
        to the client. The parameter SHOULD be used for preventing cross-site request forgery attacks., defaults to None
        :type state: str, optional
        :param scope: The list of space separated application permissions (OAuth scopes), defaults to None
        :type scope: str, optional
        :param display: Specifies how the Authorization Server displays the authentication and consent user interface pages to the End-User., defaults to None
        :type display: DisplayModesEnum, optional
        :param prompt: Space-delimited, case-sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for
        re-authentication and consent. The defined values are:

        - `login` - RingCentral native login form,
        - `sso` - Single Sign-On login form,
        - `consent` - form to show the requested scope and prompt user for consent.

        Either `login` or `sso` (or both) must be specified. The default
        value is `login sso`, defaults to None
        :type prompt: str, optional
        :param ui_locales: End-User's preferred languages and scripts for the user interface, represented as a space-separated list of
        [RFC-5646](https://datatracker.ietf.org/doc/html/rfc5646) language tag values, ordered by preference.

        If this parameter is provided, its value overrides 'Accept-Language' header value and 'localeId' parameter value (if any), defaults to None
        :type ui_locales: str, optional
        :param locale_id: DEPRECATED: `ui_locales` parameter should be used instead, defaults to None
        :type locale_id: str, optional
        :param code_challenge: The code challenge value as defined by the PKCE specification -
        [RFC-7636 "Proof Key for Code Exchange by OAuth Public Clients"](https://datatracker.ietf.org/doc/html/rfc7636), defaults to None
        :type code_challenge: str, optional
        :param code_challenge_method: The code challenge method as defined by by the PKCE specification -
        [RFC-7636 "Proof Key for Code Exchange by OAuth Public Clients"](https://datatracker.ietf.org/doc/html/rfc7636), defaults to None
        :type code_challenge_method: CodeChallengeMethodEnum, optional
        :param nonce: String value used to associate a Client session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authentication Request to the ID Token., defaults to None
        :type nonce: str, optional
        :param ui_options: Login form user interface options (space-separated). By default, the UI options that are registered for this client application will be used, defaults to None
        :type ui_options: str, optional
        :param login_hint: Hint to the Authorization Server about the login identifier the End-User might use to log in., defaults to None
        :type login_hint: str, optional
        :param brand_id: RingCentral Brand identifier. If it is not provided in the request,
        server will try to determine brand from the client application profile., defaults to None
        :type brand_id: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(client_id)
        Validator(AuthorizeResponseType).validate(response_type)
        Validator(str).is_optional().validate(redirect_uri)
        Validator(str).is_optional().validate(state)
        Validator(str).is_optional().validate(scope)
        Validator(DisplayModesEnum).is_optional().validate(display)
        Validator(str).is_optional().validate(prompt)
        Validator(str).is_optional().validate(ui_locales)
        Validator(str).is_optional().validate(locale_id)
        Validator(str).is_optional().validate(code_challenge)
        Validator(CodeChallengeMethodEnum).is_optional().validate(code_challenge_method)
        Validator(str).is_optional().validate(nonce)
        Validator(str).is_optional().validate(ui_options)
        Validator(str).is_optional().validate(login_hint)
        Validator(str).is_optional().validate(brand_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/oauth/authorize", self.get_default_headers()
            )
            .add_query("client_id", client_id)
            .add_query("response_type", response_type)
            .add_query("redirect_uri", redirect_uri)
            .add_query("state", state)
            .add_query("scope", scope)
            .add_query("display", display)
            .add_query("prompt", prompt)
            .add_query("ui_locales", ui_locales)
            .add_query("localeId", locale_id)
            .add_query("code_challenge", code_challenge)
            .add_query("code_challenge_method", code_challenge_method)
            .add_query("nonce", nonce)
            .add_query("ui_options", ui_options)
            .add_query("login_hint", login_hint)
            .add_query("brand_id", brand_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def authorize2(self, request_body: AuthorizeRequest):
        """Performs Authentication of the End-User by sending the User Agent to the Authorization Server's
        Authorization Endpoint for Authentication and Authorization,
        using request parameters defined by OAuth 2.0 [RFC-6749](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1)
        and additional parameters and parameter values defined by
        [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html#AuthorizationEndpoint).

        This is the version that uses HTTP `POST` method.

        :param request_body: The request body.
        :type request_body: AuthorizeRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(AuthorizeRequest).validate(request_body)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/oauth/authorize", self.get_default_headers()
            )
            .serialize()
            .set_method("POST")
            .set_body(request_body, "application/x-www-form-urlencoded")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def revoke_token(self, request_body: RevokeTokenRequest = None, token: str = None):
        """Revokes all active access/refresh tokens and invalidates the OAuth session basing on token provided.
        The `token` parameter may be passed in query string or body and may represent access or refresh token.

        This endpoint is defined by [RFC-7009 "OAuth 2.0 Token Revocation"](https://datatracker.ietf.org/doc/html/rfc7009)

        For confidential client application types
        this endpoint requires client authentication using one of the supported
        methods (`client_secret_basic`, `client_secret_jwt` or `private_key_jwt`)

        :param request_body: The request body., defaults to None
        :type request_body: RevokeTokenRequest, optional
        :param token: Access or refresh token to be revoked (along with the entire OAuth session), defaults to None
        :type token: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(RevokeTokenRequest).is_optional().validate(request_body)
        Validator(str).is_optional().validate(token)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/oauth/revoke", self.get_default_headers()
            )
            .add_query("token", token)
            .serialize()
            .set_method("POST")
            .set_body(request_body, "application/x-www-form-urlencoded")
        )

        response = self.send_request(serialized_request)

        return response
