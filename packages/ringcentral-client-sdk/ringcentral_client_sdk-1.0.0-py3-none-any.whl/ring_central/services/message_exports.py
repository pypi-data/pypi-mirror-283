# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.message_store_report_archive import MessageStoreReportArchive
from ..models.message_store_report import MessageStoreReport
from ..models.create_message_store_report_request import CreateMessageStoreReportRequest


class MessageExportsService(BaseService):

    @cast_models
    def create_message_store_report(
        self, request_body: CreateMessageStoreReportRequest, account_id: str
    ) -> MessageStoreReport:
        """Creates a task to collect all account messages within the specified
        time interval. Maximum number of simultaneous tasks per account is 2.

        :param request_body: The request body.
        :type request_body: CreateMessageStoreReportRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Success
        :rtype: MessageStoreReport
        """

        Validator(CreateMessageStoreReportRequest).validate(request_body)
        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/message-store-report",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return MessageStoreReport._unmap(response)

    @cast_models
    def read_message_store_report_task(
        self, account_id: str, task_id: str
    ) -> MessageStoreReport:
        """Returns the current status of a task on report creation.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param task_id: Internal identifier of a task
        :type task_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Success
        :rtype: MessageStoreReport
        """

        Validator(str).validate(account_id)
        Validator(str).validate(task_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/message-store-report/{{taskId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("taskId", task_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return MessageStoreReport._unmap(response)

    @cast_models
    def read_message_store_report_archive(
        self, account_id: str, task_id: str
    ) -> MessageStoreReportArchive:
        """Returns the created report with message data not including attachments.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param task_id: Internal identifier of a task
        :type task_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Success
        :rtype: MessageStoreReportArchive
        """

        Validator(str).validate(account_id)
        Validator(str).validate(task_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/message-store-report/{{taskId}}/archive",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("taskId", task_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return MessageStoreReportArchive._unmap(response)
