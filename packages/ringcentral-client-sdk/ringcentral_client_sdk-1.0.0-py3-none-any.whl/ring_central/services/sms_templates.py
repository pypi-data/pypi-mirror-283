# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.visibility_type import VisibilityType
from ..models.utils.cast_models import cast_models
from ..models.message_templates_list_response import MessageTemplatesListResponse
from ..models.message_template_response import MessageTemplateResponse
from ..models.message_template_request import MessageTemplateRequest


class SmsTemplatesService(BaseService):

    @cast_models
    def list_company_message_templates(
        self, account_id: str, site_ids: List[str] = None
    ) -> MessageTemplatesListResponse:
        """Returns a list of company text message templates.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param site_ids: Site ID(s) to filter company message templates, associated with particular sites
        By default the value is all - templates with all sites will be returned, defaults to None
        :type site_ids: List[str], optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: List of company text message templates
        :rtype: MessageTemplatesListResponse
        """

        Validator(str).validate(account_id)
        Validator(str).is_array().is_optional().validate(site_ids)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/message-store-templates",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_query("siteIds", site_ids)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return MessageTemplatesListResponse._unmap(response)

    @cast_models
    def create_company_message_template(
        self, request_body: MessageTemplateRequest, account_id: str
    ) -> MessageTemplateResponse:
        """Creates a new text message template on a company level. Maximum number of company templates is 50.

        :param request_body: The request body.
        :type request_body: MessageTemplateRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Created company text message template
        :rtype: MessageTemplateResponse
        """

        Validator(MessageTemplateRequest).validate(request_body)
        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/message-store-templates",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return MessageTemplateResponse._unmap(response)

    @cast_models
    def read_company_message_template(
        self, account_id: str, template_id: str
    ) -> MessageTemplateResponse:
        """Returns a company text message template by ID.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param template_id: Internal identifier of a text message template
        :type template_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Company text message template
        :rtype: MessageTemplateResponse
        """

        Validator(str).validate(account_id)
        Validator(str).validate(template_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/message-store-templates/{{templateId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("templateId", template_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return MessageTemplateResponse._unmap(response)

    @cast_models
    def update_company_message_template(
        self, request_body: MessageTemplateRequest, account_id: str, template_id: str
    ) -> MessageTemplateResponse:
        """Updates a company text message template.

        :param request_body: The request body.
        :type request_body: MessageTemplateRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param template_id: Internal identifier of a text message template
        :type template_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Updated company text message template
        :rtype: MessageTemplateResponse
        """

        Validator(MessageTemplateRequest).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(template_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/message-store-templates/{{templateId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("templateId", template_id)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return MessageTemplateResponse._unmap(response)

    @cast_models
    def delete_company_message_template(self, account_id: str, template_id: str):
        """Deletes a company text message template.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param template_id: Internal identifier of a text message template
        :type template_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(account_id)
        Validator(str).validate(template_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/message-store-templates/{{templateId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("templateId", template_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def list_user_message_templates(
        self,
        account_id: str,
        extension_id: str,
        site_ids: List[str] = None,
        scope: VisibilityType = None,
    ) -> MessageTemplatesListResponse:
        """Returns a list of user's personal text message templates.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param site_ids: Site ID(s) to filter user message templates, associated with particular sites.
        By default the value is all - templates with all sites will be returned, defaults to None
        :type site_ids: List[str], optional
        :param scope: Message templates scope. By default the value is all - both Personal and Company templates will be returned, defaults to None
        :type scope: VisibilityType, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: List of user text message templates
        :rtype: MessageTemplatesListResponse
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(str).is_array().is_optional().validate(site_ids)
        Validator(VisibilityType).is_optional().validate(scope)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/message-store-templates",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_query("siteIds", site_ids)
            .add_query("scope", scope)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return MessageTemplatesListResponse._unmap(response)

    @cast_models
    def create_user_message_template(
        self, request_body: MessageTemplateRequest, account_id: str, extension_id: str
    ) -> MessageTemplateResponse:
        """Creates a user personal text message template.
        Maximum number of personal templates is 25 per user.
        Max length of the `body` property is 1000 symbols (2-byte UTF-16 encoded).

        :param request_body: The request body.
        :type request_body: MessageTemplateRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Created personal text message template
        :rtype: MessageTemplateResponse
        """

        Validator(MessageTemplateRequest).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/message-store-templates",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return MessageTemplateResponse._unmap(response)

    @cast_models
    def read_user_message_template(
        self, account_id: str, extension_id: str, template_id: str
    ) -> MessageTemplateResponse:
        """Returns a user personal text message template by ID.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param template_id: Internal identifier of a text message template
        :type template_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: User personal text message template
        :rtype: MessageTemplateResponse
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(str).validate(template_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/message-store-templates/{{templateId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_path("templateId", template_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return MessageTemplateResponse._unmap(response)

    @cast_models
    def update_user_message_template(
        self,
        request_body: MessageTemplateRequest,
        account_id: str,
        extension_id: str,
        template_id: str,
    ) -> MessageTemplateResponse:
        """Updates a user personal text message template.

        :param request_body: The request body.
        :type request_body: MessageTemplateRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param template_id: Internal identifier of a text message template
        :type template_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Updated user personal text message template
        :rtype: MessageTemplateResponse
        """

        Validator(MessageTemplateRequest).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(str).validate(template_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/message-store-templates/{{templateId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_path("templateId", template_id)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return MessageTemplateResponse._unmap(response)

    @cast_models
    def delete_user_message_template(
        self, account_id: str, extension_id: str, template_id: str
    ):
        """Deletes a user personal text message template.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param template_id: Internal identifier of a text message template
        :type template_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(str).validate(template_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/message-store-templates/{{templateId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_path("templateId", template_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)

        return response
