# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.sync_user_call_log_sync_type import SyncUserCallLogSyncType
from ..models.sync_account_call_log_sync_type import SyncAccountCallLogSyncType
from ..models.status_group import StatusGroup
from ..models.recording_type import RecordingType
from ..models.read_company_call_log_view import ReadCompanyCallLogView
from ..models.conference_type import ConferenceType
from ..models.call_type_enum import CallTypeEnum
from ..models.call_transport_enum import CallTransportEnum
from ..models.call_log_sync_response import CallLogSyncResponse
from ..models.call_log_response import CallLogResponse
from ..models.call_log_record import CallLogRecord
from ..models.call_direction_enum import CallDirectionEnum


class CallLogService(BaseService):

    @cast_models
    def read_company_call_log(
        self,
        account_id: str,
        extension_number: str = None,
        phone_number: str = None,
        direction: List[CallDirectionEnum] = None,
        type_: List[CallTypeEnum] = None,
        view: ReadCompanyCallLogView = None,
        with_recording: bool = None,
        recording_type: RecordingType = None,
        date_from: str = None,
        date_to: str = None,
        session_id: str = None,
        telephony_session_id: str = None,
        page: int = None,
        per_page: int = None,
    ) -> CallLogResponse:
        """Returns call log records filtered by parameters specified.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_number: Short extension number of a user. If specified, returns call log for this particular extension only.
        Cannot be combined with `phoneNumber` filter, defaults to None
        :type extension_number: str, optional
        :param phone_number: Phone number of a caller/callee in e.164 format without a '+' sign. If specified, all incoming/outgoing calls
        from/to this phone number are returned., defaults to None
        :type phone_number: str, optional
        :param direction: The direction of call records to be included in the result. If omitted, both
        inbound and outbound calls are returned. Multiple values are supported, defaults to None
        :type direction: List[CallDirectionEnum], optional
        :param type_: The type of call records to be included in the result.
        If omitted, all call types are returned. Multiple values are supported, defaults to None
        :type type_: List[CallTypeEnum], optional
        :param view: Defines the level of details for returned call records, defaults to None
        :type view: ReadCompanyCallLogView, optional
        :param with_recording: Deprecated, replaced with `recordingType` filter, still supported for compatibility reasons.
        Indicates if only recorded calls should be returned.

        If both `withRecording` and `recordingType` parameters are specified, then `withRecording` is ignored, defaults to None
        :type with_recording: bool, optional
        :param recording_type: Indicates that call records with recordings of particular type should be returned.
        If omitted, then calls with and without recordings are returned, defaults to None
        :type recording_type: RecordingType, optional
        :param date_from: The beginning of the time range to return call records in ISO 8601 format including timezone,
        for example 2016-03-10T18:07:52.534Z. The default value is `dateTo` minus 24 hours, defaults to None
        :type date_from: str, optional
        :param date_to: The end of the time range to return call records in ISO 8601 format including timezone,
        for example 2016-03-10T18:07:52.534Z. The default value is current time, defaults to None
        :type date_to: str, optional
        :param session_id: Internal identifier of a call session, defaults to None
        :type session_id: str, optional
        :param telephony_session_id: Internal identifier of a telephony session, defaults to None
        :type telephony_session_id: str, optional
        :param page: Indicates the page number to retrieve. Only positive number values are accepted, defaults to None
        :type page: int, optional
        :param per_page: Indicates the page size (number of items), defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Success
        :rtype: CallLogResponse
        """

        Validator(str).validate(account_id)
        Validator(str).is_optional().validate(extension_number)
        Validator(str).is_optional().validate(phone_number)
        Validator(CallDirectionEnum).is_array().is_optional().validate(direction)
        Validator(CallTypeEnum).is_array().is_optional().validate(type_)
        Validator(ReadCompanyCallLogView).is_optional().validate(view)
        Validator(bool).is_optional().validate(with_recording)
        Validator(RecordingType).is_optional().validate(recording_type)
        Validator(str).is_optional().validate(date_from)
        Validator(str).is_optional().validate(date_to)
        Validator(str).is_optional().validate(session_id)
        Validator(str).is_optional().validate(telephony_session_id)
        Validator(int).is_optional().min(1).validate(page)
        Validator(int).is_optional().min(1).validate(per_page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/call-log",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_query("extensionNumber", extension_number)
            .add_query("phoneNumber", phone_number)
            .add_query("direction", direction)
            .add_query("type", type_)
            .add_query("view", view)
            .add_query("withRecording", with_recording)
            .add_query("recordingType", recording_type)
            .add_query("dateFrom", date_from)
            .add_query("dateTo", date_to)
            .add_query("sessionId", session_id)
            .add_query("telephonySessionId", telephony_session_id)
            .add_query("page", page)
            .add_query("perPage", per_page)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return CallLogResponse._unmap(response)

    @cast_models
    def read_company_call_record(
        self,
        account_id: str,
        call_record_id: List[str],
        view: ReadCompanyCallLogView = None,
    ) -> CallLogRecord:
        """Returns individual call log record(s) by ID. Batch syntax is supported.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param call_record_id: Internal identifier of a call log record. Multiple values are supported
        :type call_record_id: List[str]
        :param view: Defines the level of details for returned call records, defaults to None
        :type view: ReadCompanyCallLogView, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response
        :rtype: CallLogRecord
        """

        Validator(str).validate(account_id)
        Validator(str).is_array().validate(call_record_id)
        Validator(ReadCompanyCallLogView).is_optional().validate(view)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/call-log/{{callRecordId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("callRecordId", call_record_id)
            .add_query("view", view)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return CallLogRecord._unmap(response)

    @cast_models
    def sync_account_call_log(
        self,
        account_id: str,
        sync_type: SyncAccountCallLogSyncType = None,
        sync_token: str = None,
        date_from: str = None,
        record_count: int = None,
        status_group: List[StatusGroup] = None,
        view: ReadCompanyCallLogView = None,
        show_deleted: bool = None,
        with_recording: bool = None,
        recording_type: RecordingType = None,
    ) -> CallLogSyncResponse:
        """Synchronizes company call log records.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param sync_type: Type of call log synchronization request, defaults to None
        :type sync_type: SyncAccountCallLogSyncType, optional
        :param sync_token: Value of syncToken property of last sync request response. Mandatory parameter for 'ISync' sync type, defaults to None
        :type sync_token: str, optional
        :param date_from: The start datetime for resulting records in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z. The default value is the current moment, defaults to None
        :type date_from: str, optional
        :param record_count: For `FSync` mode this parameter is mandatory, it limits the number of records to be returned in response.

        For `ISync` mode this parameter specifies the number of records to extend the sync frame with to the past
        (the maximum number of records is 250), defaults to None
        :type record_count: int, optional
        :param status_group: Type of calls to be returned, defaults to None
        :type status_group: List[StatusGroup], optional
        :param view: Defines the level of details for returned call records, defaults to None
        :type view: ReadCompanyCallLogView, optional
        :param show_deleted: Supported for `ISync` mode. Indicates that deleted call records should be returned, defaults to None
        :type show_deleted: bool, optional
        :param with_recording: Deprecated, replaced with `recordingType` filter, still supported for compatibility reasons.
        Indicates if only recorded calls should be returned.

        If both `withRecording` and `recordingType` parameters are specified, then `withRecording` is ignored, defaults to None
        :type with_recording: bool, optional
        :param recording_type: Indicates that call records with recordings of particular type should be returned.
        If omitted, then calls with and without recordings are returned, defaults to None
        :type recording_type: RecordingType, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Success
        :rtype: CallLogSyncResponse
        """

        Validator(str).validate(account_id)
        Validator(SyncAccountCallLogSyncType).is_optional().validate(sync_type)
        Validator(str).is_optional().validate(sync_token)
        Validator(str).is_optional().validate(date_from)
        Validator(int).is_optional().min(1).validate(record_count)
        Validator(StatusGroup).is_array().is_optional().validate(status_group)
        Validator(ReadCompanyCallLogView).is_optional().validate(view)
        Validator(bool).is_optional().validate(show_deleted)
        Validator(bool).is_optional().validate(with_recording)
        Validator(RecordingType).is_optional().validate(recording_type)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/call-log-sync",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_query("syncType", sync_type)
            .add_query("syncToken", sync_token)
            .add_query("dateFrom", date_from)
            .add_query("recordCount", record_count)
            .add_query("statusGroup", status_group)
            .add_query("view", view)
            .add_query("showDeleted", show_deleted)
            .add_query("withRecording", with_recording)
            .add_query("recordingType", recording_type)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return CallLogSyncResponse._unmap(response)

    @cast_models
    def list_company_active_calls(
        self,
        account_id: str,
        direction: List[CallDirectionEnum] = None,
        view: ReadCompanyCallLogView = None,
        type_: List[CallTypeEnum] = None,
        transport: List[CallTransportEnum] = None,
        conference_type: List[ConferenceType] = None,
        page: int = None,
        per_page: int = None,
    ) -> CallLogResponse:
        """Returns records of all calls that are in progress, ordered by start time in descending order.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param direction: The direction of call records to be included in the result. If omitted, both
        inbound and outbound calls are returned. Multiple values are supported, defaults to None
        :type direction: List[CallDirectionEnum], optional
        :param view: Defines the level of details for returned call records, defaults to None
        :type view: ReadCompanyCallLogView, optional
        :param type_: The type of call records to be included in the result.
        If omitted, all call types are returned. Multiple values are supported, defaults to None
        :type type_: List[CallTypeEnum], optional
        :param transport: The type of call transport. Multiple values are supported. By default, this filter is disabled, defaults to None
        :type transport: List[CallTransportEnum], optional
        :param conference_type: Conference call type: RCC or RC Meetings. If not specified, no conference call filter applied, defaults to None
        :type conference_type: List[ConferenceType], optional
        :param page: Indicates the page number to retrieve. Only positive number values are accepted, defaults to None
        :type page: int, optional
        :param per_page: Indicates the page size (number of items), defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response
        :rtype: CallLogResponse
        """

        Validator(str).validate(account_id)
        Validator(CallDirectionEnum).is_array().is_optional().validate(direction)
        Validator(ReadCompanyCallLogView).is_optional().validate(view)
        Validator(CallTypeEnum).is_array().is_optional().validate(type_)
        Validator(CallTransportEnum).is_array().is_optional().validate(transport)
        Validator(ConferenceType).is_array().is_optional().validate(conference_type)
        Validator(int).is_optional().min(1).validate(page)
        Validator(int).is_optional().min(1).validate(per_page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/active-calls",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_query("direction", direction)
            .add_query("view", view)
            .add_query("type", type_)
            .add_query("transport", transport)
            .add_query("conferenceType", conference_type)
            .add_query("page", page)
            .add_query("perPage", per_page)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return CallLogResponse._unmap(response)

    @cast_models
    def read_user_call_log(
        self,
        account_id: str,
        extension_id: str,
        extension_number: str = None,
        phone_number: str = None,
        show_blocked: bool = None,
        direction: List[CallDirectionEnum] = None,
        session_id: str = None,
        type_: List[CallTypeEnum] = None,
        transport: List[CallTransportEnum] = None,
        view: ReadCompanyCallLogView = None,
        with_recording: bool = None,
        recording_type: RecordingType = None,
        date_to: str = None,
        date_from: str = None,
        telephony_session_id: str = None,
        page: int = None,
        per_page: int = None,
        show_deleted: bool = None,
    ) -> CallLogResponse:
        """Returns call log records filtered by parameters specified.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param extension_number: Short extension number of a user. If specified, returns call log for this particular extension only.
        Cannot be combined with `phoneNumber` filter, defaults to None
        :type extension_number: str, optional
        :param phone_number: Phone number of a caller/callee in e.164 format without a '+' sign. If specified, all incoming/outgoing calls
        from/to this phone number are returned., defaults to None
        :type phone_number: str, optional
        :param show_blocked: Indicates then calls from/to blocked numbers are returned, defaults to None
        :type show_blocked: bool, optional
        :param direction: The direction of call records to be included in the result. If omitted, both
        inbound and outbound calls are returned. Multiple values are supported, defaults to None
        :type direction: List[CallDirectionEnum], optional
        :param session_id: Internal identifier of a call session, defaults to None
        :type session_id: str, optional
        :param type_: The type of call records to be included in the result.
        If omitted, all call types are returned. Multiple values are supported, defaults to None
        :type type_: List[CallTypeEnum], optional
        :param transport: The type of call transport. Multiple values are supported. By default, this filter is disabled, defaults to None
        :type transport: List[CallTransportEnum], optional
        :param view: Defines the level of details for returned call records, defaults to None
        :type view: ReadCompanyCallLogView, optional
        :param with_recording: Deprecated, replaced with `recordingType` filter, still supported for compatibility reasons.
        Indicates if only recorded calls should be returned.

        If both `withRecording` and `recordingType` parameters are specified, then `withRecording` is ignored, defaults to None
        :type with_recording: bool, optional
        :param recording_type: Indicates that call records with recordings of particular type should be returned.
        If omitted, then calls with and without recordings are returned, defaults to None
        :type recording_type: RecordingType, optional
        :param date_to: The end of the time range to return call records in ISO 8601 format including timezone,
        for example 2016-03-10T18:07:52.534Z. The default value is current time, defaults to None
        :type date_to: str, optional
        :param date_from: The beginning of the time range to return call records in ISO 8601 format including timezone,
        for example 2016-03-10T18:07:52.534Z. The default value is `dateTo` minus 24 hours, defaults to None
        :type date_from: str, optional
        :param telephony_session_id: Internal identifier of a telephony session, defaults to None
        :type telephony_session_id: str, optional
        :param page: Indicates the page number to retrieve. Only positive number values are allowed, defaults to None
        :type page: int, optional
        :param per_page: Indicates the page size (number of items). The default value is 100.
        The maximum value for `Simple` view is 1000, for `Detailed` view - 250, defaults to None
        :type per_page: int, optional
        :param show_deleted: Indicates that deleted calls records should be returned, defaults to None
        :type show_deleted: bool, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Success
        :rtype: CallLogResponse
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(str).is_optional().validate(extension_number)
        Validator(str).is_optional().validate(phone_number)
        Validator(bool).is_optional().validate(show_blocked)
        Validator(CallDirectionEnum).is_array().is_optional().validate(direction)
        Validator(str).is_optional().validate(session_id)
        Validator(CallTypeEnum).is_array().is_optional().validate(type_)
        Validator(CallTransportEnum).is_array().is_optional().validate(transport)
        Validator(ReadCompanyCallLogView).is_optional().validate(view)
        Validator(bool).is_optional().validate(with_recording)
        Validator(RecordingType).is_optional().validate(recording_type)
        Validator(str).is_optional().validate(date_to)
        Validator(str).is_optional().validate(date_from)
        Validator(str).is_optional().validate(telephony_session_id)
        Validator(int).is_optional().min(1).validate(page)
        Validator(int).is_optional().min(1).validate(per_page)
        Validator(bool).is_optional().validate(show_deleted)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/call-log",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_query("extensionNumber", extension_number)
            .add_query("phoneNumber", phone_number)
            .add_query("showBlocked", show_blocked)
            .add_query("direction", direction)
            .add_query("sessionId", session_id)
            .add_query("type", type_)
            .add_query("transport", transport)
            .add_query("view", view)
            .add_query("withRecording", with_recording)
            .add_query("recordingType", recording_type)
            .add_query("dateTo", date_to)
            .add_query("dateFrom", date_from)
            .add_query("telephonySessionId", telephony_session_id)
            .add_query("page", page)
            .add_query("perPage", per_page)
            .add_query("showDeleted", show_deleted)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return CallLogResponse._unmap(response)

    @cast_models
    def delete_user_call_log(
        self, account_id: str, extension_id: str, date_to: str = None
    ):
        """Deletes filtered call log records.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param date_to: The time boundary to delete all older records in ISO 8601 format including
        timezone, for example *2016-03-10T18:07:52.534Z*. The default value is current time, defaults to None
        :type date_to: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(str).is_optional().validate(date_to)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/call-log",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_query("dateTo", date_to)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def read_user_call_record(
        self,
        account_id: str,
        extension_id: str,
        call_record_id: List[str],
        view: ReadCompanyCallLogView = None,
    ) -> CallLogRecord:
        """Returns call log records by ID.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param call_record_id: Internal identifier of a call log record. Multiple values are supported
        :type call_record_id: List[str]
        :param view: Defines the level of details for returned call records, defaults to None
        :type view: ReadCompanyCallLogView, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Call Log Record
        :rtype: CallLogRecord
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(str).is_array().validate(call_record_id)
        Validator(ReadCompanyCallLogView).is_optional().validate(view)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/call-log/{{callRecordId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_path("callRecordId", call_record_id)
            .add_query("view", view)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return CallLogRecord._unmap(response)

    @cast_models
    def sync_user_call_log(
        self,
        account_id: str,
        extension_id: str,
        sync_type: SyncUserCallLogSyncType = None,
        sync_token: str = None,
        date_from: str = None,
        record_count: int = None,
        status_group: List[StatusGroup] = None,
        view: ReadCompanyCallLogView = None,
        show_deleted: bool = None,
        with_recording: bool = None,
        recording_type: RecordingType = None,
    ) -> CallLogSyncResponse:
        """Synchronizes the user call log records.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param sync_type: Type of call log synchronization request, defaults to None
        :type sync_type: SyncUserCallLogSyncType, optional
        :param sync_token: A `syncToken` value from the previous sync response (for `ISync` mode only, mandatory), defaults to None
        :type sync_token: str, optional
        :param date_from: The start datetime for resulting records in ISO 8601 format including
        timezone, for example 2016-03-10T18:07:52.534Z. The default value is the
        current moment, defaults to None
        :type date_from: str, optional
        :param record_count: For `FSync` mode this parameter is mandatory, it limits the number of records to be returned in response.

        For `ISync` mode this parameter specifies the number of records to extend the sync frame with to the past
        (the maximum number of records is 250), defaults to None
        :type record_count: int, optional
        :param status_group: Type of calls to be returned, defaults to None
        :type status_group: List[StatusGroup], optional
        :param view: Defines the level of details for returned call records, defaults to None
        :type view: ReadCompanyCallLogView, optional
        :param show_deleted: Supported for `ISync` mode. Indicates that deleted call records should be returned, defaults to None
        :type show_deleted: bool, optional
        :param with_recording: Deprecated, replaced with `recordingType` filter, still supported for compatibility reasons.
        Indicates if only recorded calls should be returned.

        If both `withRecording` and `recordingType` parameters are specified, then `withRecording` is ignored, defaults to None
        :type with_recording: bool, optional
        :param recording_type: Indicates that call records with recordings of particular type should be returned.
        If omitted, then calls with and without recordings are returned, defaults to None
        :type recording_type: RecordingType, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response
        :rtype: CallLogSyncResponse
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(SyncUserCallLogSyncType).is_optional().validate(sync_type)
        Validator(str).is_optional().validate(sync_token)
        Validator(str).is_optional().validate(date_from)
        Validator(int).is_optional().validate(record_count)
        Validator(StatusGroup).is_array().is_optional().validate(status_group)
        Validator(ReadCompanyCallLogView).is_optional().validate(view)
        Validator(bool).is_optional().validate(show_deleted)
        Validator(bool).is_optional().validate(with_recording)
        Validator(RecordingType).is_optional().validate(recording_type)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/call-log-sync",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_query("syncType", sync_type)
            .add_query("syncToken", sync_token)
            .add_query("dateFrom", date_from)
            .add_query("recordCount", record_count)
            .add_query("statusGroup", status_group)
            .add_query("view", view)
            .add_query("showDeleted", show_deleted)
            .add_query("withRecording", with_recording)
            .add_query("recordingType", recording_type)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return CallLogSyncResponse._unmap(response)

    @cast_models
    def list_extension_active_calls(
        self,
        account_id: str,
        extension_id: str,
        direction: List[CallDirectionEnum] = None,
        view: ReadCompanyCallLogView = None,
        type_: List[CallTypeEnum] = None,
        transport: List[CallTransportEnum] = None,
        conference_type: List[ConferenceType] = None,
        page: int = None,
        per_page: int = None,
    ) -> CallLogResponse:
        """Returns records of all extension calls that are in progress, ordered
        by start time in descending order.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param direction: The direction of call records to be included in the result. If omitted, both
        inbound and outbound calls are returned. Multiple values are supported, defaults to None
        :type direction: List[CallDirectionEnum], optional
        :param view: Defines the level of details for returned call records, defaults to None
        :type view: ReadCompanyCallLogView, optional
        :param type_: The type of call records to be included in the result.
        If omitted, all call types are returned. Multiple values are supported, defaults to None
        :type type_: List[CallTypeEnum], optional
        :param transport: The type of call transport. Multiple values are supported. By default, this filter is disabled, defaults to None
        :type transport: List[CallTransportEnum], optional
        :param conference_type: Conference call type: RCC or RC Meetings. If not specified, no conference call filter applied, defaults to None
        :type conference_type: List[ConferenceType], optional
        :param page: Indicates the page number to retrieve. Only positive number values are allowed, defaults to None
        :type page: int, optional
        :param per_page: Indicates the page size (number of items), defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response
        :rtype: CallLogResponse
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(CallDirectionEnum).is_array().is_optional().validate(direction)
        Validator(ReadCompanyCallLogView).is_optional().validate(view)
        Validator(CallTypeEnum).is_array().is_optional().validate(type_)
        Validator(CallTransportEnum).is_array().is_optional().validate(transport)
        Validator(ConferenceType).is_array().is_optional().validate(conference_type)
        Validator(int).is_optional().validate(page)
        Validator(int).is_optional().validate(per_page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/active-calls",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_query("direction", direction)
            .add_query("view", view)
            .add_query("type", type_)
            .add_query("transport", transport)
            .add_query("conferenceType", conference_type)
            .add_query("page", page)
            .add_query("perPage", per_page)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return CallLogResponse._unmap(response)
