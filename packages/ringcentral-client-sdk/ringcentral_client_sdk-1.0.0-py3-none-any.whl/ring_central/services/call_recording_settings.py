# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.list_call_recording_custom_greetings_type import (
    ListCallRecordingCustomGreetingsType,
)
from ..models.call_recording_settings_resource import CallRecordingSettingsResource
from ..models.call_recording_extensions import CallRecordingExtensions
from ..models.call_recording_custom_greetings import CallRecordingCustomGreetings
from ..models.bulk_account_call_recordings_resource import (
    BulkAccountCallRecordingsResource,
)


class CallRecordingSettingsService(BaseService):

    @cast_models
    def read_call_recording_settings(
        self, account_id: str
    ) -> CallRecordingSettingsResource:
        """Returns call recording settings.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: CallRecordingSettingsResource
        """

        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/call-recording",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return CallRecordingSettingsResource._unmap(response)

    @cast_models
    def update_call_recording_settings(
        self, account_id: str, request_body: CallRecordingSettingsResource = None
    ) -> CallRecordingSettingsResource:
        """Updates current call recording settings.

        :param request_body: The request body., defaults to None
        :type request_body: CallRecordingSettingsResource, optional
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK: Updated Call Recording Settings
        :rtype: CallRecordingSettingsResource
        """

        Validator(CallRecordingSettingsResource).is_optional().validate(request_body)
        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/call-recording",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return CallRecordingSettingsResource._unmap(response)

    @cast_models
    def list_call_recording_custom_greetings(
        self, account_id: str, type_: ListCallRecordingCustomGreetingsType = None
    ) -> CallRecordingCustomGreetings:
        """Returns call recording custom greetings.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param type_: type_, defaults to None
        :type type_: ListCallRecordingCustomGreetingsType, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Success
        :rtype: CallRecordingCustomGreetings
        """

        Validator(str).validate(account_id)
        Validator(ListCallRecordingCustomGreetingsType).is_optional().validate(type_)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/call-recording/custom-greetings",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_query("type", type_)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return CallRecordingCustomGreetings._unmap(response)

    @cast_models
    def delete_call_recording_custom_greeting_list(self, account_id: str):
        """Deletes call recording custom greetings.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/call-recording/custom-greetings",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def delete_call_recording_custom_greeting(self, account_id: str, greeting_id: str):
        """Deletes call recording custom greeting(s).

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param greeting_id: Internal identifier of a greeting
        :type greeting_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(account_id)
        Validator(str).validate(greeting_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/call-recording/custom-greetings/{{greetingId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("greetingId", greeting_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def update_call_recording_extension_list(
        self, request_body: BulkAccountCallRecordingsResource, account_id: str
    ):
        """Creates or updates the list of extensions to be recorded.

        :param request_body: The request body.
        :type request_body: BulkAccountCallRecordingsResource
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(BulkAccountCallRecordingsResource).validate(request_body)
        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/call-recording/bulk-assign",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def list_call_recording_extensions(
        self, account_id: str
    ) -> CallRecordingExtensions:
        """Returns the list of extensions to be recorded.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Extension List
        :rtype: CallRecordingExtensions
        """

        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/call-recording/extensions",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return CallRecordingExtensions._unmap(response)
