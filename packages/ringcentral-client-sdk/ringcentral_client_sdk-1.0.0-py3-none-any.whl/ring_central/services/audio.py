# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.list_enrolled_speakers import ListEnrolledSpeakers
from ..models.identify_input import IdentifyInput
from ..models.enrollment_status import EnrollmentStatus
from ..models.enrollment_patch_input import EnrollmentPatchInput
from ..models.enrollment_input import EnrollmentInput
from ..models.diarize_input import DiarizeInput
from ..models.cai_async_api_response import CaiAsyncApiResponse
from ..models.asr_input import AsrInput


class AudioService(BaseService):

    @cast_models
    def cai_enrollments_list(
        self, partial: bool, per_page: int, page: int
    ) -> ListEnrolledSpeakers:
        """Returns the List of Enrolled Speakers

        :param partial: Indicates if partially enrolled speakers should be returned
        :type partial: bool
        :param per_page: Number of enrollments to be returned per page
        :type per_page: int
        :param page: Page number to be returned
        :type page: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: List of enrolled speakers
        :rtype: ListEnrolledSpeakers
        """

        Validator(bool).validate(partial)
        Validator(int).validate(per_page)
        Validator(int).validate(page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/ai/audio/v1/enrollments", self.get_default_headers()
            )
            .add_query("partial", partial)
            .add_query("perPage", per_page)
            .add_query("page", page)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return ListEnrolledSpeakers._unmap(response)

    @cast_models
    def cai_enrollments_create(self, request_body: EnrollmentInput) -> EnrollmentStatus:
        """Creates Enrollment for the provided Speaker.

        :param request_body: The request body.
        :type request_body: EnrollmentInput
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Enrollments Request Created
        :rtype: EnrollmentStatus
        """

        Validator(EnrollmentInput).validate(request_body)

        serialized_request = (
            Serializer(
                f"{self.base_url}/ai/audio/v1/enrollments", self.get_default_headers()
            )
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return EnrollmentStatus._unmap(response)

    @cast_models
    def cai_enrollments_get(self, speaker_id: str) -> EnrollmentStatus:
        """Get The Status of Enrollment for the provided Speaker.

        :param speaker_id: Speaker identifier of enrolled speaker
        :type speaker_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Fetch enrollment status for speaker {speakerId}
        :rtype: EnrollmentStatus
        """

        Validator(str).validate(speaker_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/ai/audio/v1/enrollments/{{speakerId}}",
                self.get_default_headers(),
            )
            .add_path("speakerId", speaker_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return EnrollmentStatus._unmap(response)

    @cast_models
    def cai_enrollments_update(
        self, request_body: EnrollmentPatchInput, speaker_id: str
    ) -> EnrollmentStatus:
        """Add newer audio data to improve an existing speaker enrollment

        :param request_body: The request body.
        :type request_body: EnrollmentPatchInput
        :param speaker_id: Speaker identifier of enrolled speaker
        :type speaker_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Enrollments Request Created
        :rtype: EnrollmentStatus
        """

        Validator(EnrollmentPatchInput).validate(request_body)
        Validator(str).validate(speaker_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/ai/audio/v1/enrollments/{{speakerId}}",
                self.get_default_headers(),
            )
            .add_path("speakerId", speaker_id)
            .serialize()
            .set_method("PATCH")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return EnrollmentStatus._unmap(response)

    @cast_models
    def cai_enrollments_delete(self, speaker_id: str):
        """Delete The Enrollment for the provided Speaker.

        :param speaker_id: Speaker identifier of enrolled speaker
        :type speaker_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(speaker_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/ai/audio/v1/enrollments/{{speakerId}}",
                self.get_default_headers(),
            )
            .add_path("speakerId", speaker_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def cai_speech_to_text(
        self, request_body: AsrInput, webhook: str
    ) -> CaiAsyncApiResponse:
        """Returns Speech to Text Conversion to the provided webhook URI.

        :param request_body: The request body.
        :type request_body: AsrInput
        :param webhook: The webhook URI to which the job response will be returned
        :type webhook: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Task accepted for processing.
        :rtype: CaiAsyncApiResponse
        """

        Validator(AsrInput).validate(request_body)
        Validator(str).validate(webhook)

        serialized_request = (
            Serializer(
                f"{self.base_url}/ai/audio/v1/async/speech-to-text",
                self.get_default_headers(),
            )
            .add_query("webhook", webhook)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return CaiAsyncApiResponse._unmap(response)

    @cast_models
    def cai_speaker_diarize(
        self, request_body: DiarizeInput, webhook: str
    ) -> CaiAsyncApiResponse:
        """Identifies who said what. Speaker diarization will identify the speaker for each segment
        so you can tell who spoke the sentence, paragraph, or phrase.

        :param request_body: The request body.
        :type request_body: DiarizeInput
        :param webhook: The webhook URI to which the job response will be returned
        :type webhook: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Task accepted for processing.
        :rtype: CaiAsyncApiResponse
        """

        Validator(DiarizeInput).validate(request_body)
        Validator(str).validate(webhook)

        serialized_request = (
            Serializer(
                f"{self.base_url}/ai/audio/v1/async/speaker-diarize",
                self.get_default_headers(),
            )
            .add_query("webhook", webhook)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return CaiAsyncApiResponse._unmap(response)

    @cast_models
    def cai_speaker_identify(
        self, request_body: IdentifyInput, webhook: str
    ) -> CaiAsyncApiResponse:
        """Returns Speaker Identification to the provided webhook URI.

        :param request_body: The request body.
        :type request_body: IdentifyInput
        :param webhook: The webhook URI to which the job response will be returned
        :type webhook: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Task accepted for processing.
        :rtype: CaiAsyncApiResponse
        """

        Validator(IdentifyInput).validate(request_body)
        Validator(str).validate(webhook)

        serialized_request = (
            Serializer(
                f"{self.base_url}/ai/audio/v1/async/speaker-identify",
                self.get_default_headers(),
            )
            .add_query("webhook", webhook)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return CaiAsyncApiResponse._unmap(response)
