# This file was generated by liblab | https://liblab.com/

from .utils.json_map import JsonMap
from .base import BaseModel


@JsonMap({"id_": "id", "calling_code": "callingCode", "iso_code": "isoCode"})
class GetCountryInfoNumberParser(BaseModel):
    """GetCountryInfoNumberParser

    :param id_: Internal identifier of a country, defaults to None
    :type id_: str, optional
    :param uri: Canonical URI of a country resource, defaults to None
    :type uri: str, optional
    :param calling_code: Country calling code defined by ITU-T recommendations `E.123`<br>and `E.164`, see Calling Codes<br>, defaults to None
    :type calling_code: str, optional
    :param iso_code: Country code in `ISO 3166` alpha-2 format, defaults to None
    :type iso_code: str, optional
    :param name: The official name of the country., defaults to None
    :type name: str, optional
    """

    def __init__(
        self,
        id_: str = None,
        uri: str = None,
        calling_code: str = None,
        iso_code: str = None,
        name: str = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if uri is not None:
            self.uri = uri
        if calling_code is not None:
            self.calling_code = calling_code
        if iso_code is not None:
            self.iso_code = self._pattern_matching(
                iso_code, "^[A-Za-z]{2}$", "iso_code"
            )
        if name is not None:
            self.name = name
