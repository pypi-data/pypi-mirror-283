# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .greeting_type_enum import GreetingTypeEnum
from .preset_info import PresetInfo
from .custom_greeting_info_request import CustomGreetingInfoRequest


@JsonMap({"type_": "type"})
class GreetingInfo(BaseModel):
    """GreetingInfo

    :param type_: Type of greeting, specifying the case when the greeting is played., defaults to None
    :type type_: GreetingTypeEnum, optional
    :param preset: preset, defaults to None
    :type preset: PresetInfo, optional
    :param custom: custom, defaults to None
    :type custom: CustomGreetingInfoRequest, optional
    """

    def __init__(
        self,
        type_: GreetingTypeEnum = None,
        preset: PresetInfo = None,
        custom: CustomGreetingInfoRequest = None,
    ):
        if type_ is not None:
            self.type_ = self._enum_matching(type_, GreetingTypeEnum.list(), "type_")
        if preset is not None:
            self.preset = self._define_object(preset, PresetInfo)
        if custom is not None:
            self.custom = self._define_object(custom, CustomGreetingInfoRequest)
