# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class ReasonInfoCode(Enum):
    """An enumeration representing different categories.

    :cvar SERVICEPLANLIMITATION: "ServicePlanLimitation"
    :vartype SERVICEPLANLIMITATION: str
    :cvar ACCOUNTLIMITATION: "AccountLimitation"
    :vartype ACCOUNTLIMITATION: str
    :cvar EXTENSIONTYPELIMITATION: "ExtensionTypeLimitation"
    :vartype EXTENSIONTYPELIMITATION: str
    :cvar EXTENSIONLIMITATION: "ExtensionLimitation"
    :vartype EXTENSIONLIMITATION: str
    :cvar INSUFFICIENTPERMISSIONS: "InsufficientPermissions"
    :vartype INSUFFICIENTPERMISSIONS: str
    :cvar CONFIGURATIONLIMITATION: "ConfigurationLimitation"
    :vartype CONFIGURATIONLIMITATION: str
    """

    SERVICEPLANLIMITATION = "ServicePlanLimitation"
    ACCOUNTLIMITATION = "AccountLimitation"
    EXTENSIONTYPELIMITATION = "ExtensionTypeLimitation"
    EXTENSIONLIMITATION = "ExtensionLimitation"
    INSUFFICIENTPERMISSIONS = "InsufficientPermissions"
    CONFIGURATIONLIMITATION = "ConfigurationLimitation"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, ReasonInfoCode._member_map_.values()))


@JsonMap({})
class ReasonInfo(BaseModel):
    """Reason for the feature unavailability. Returned only if `available`
    is set to `false`


    :param code: Reason code, defaults to None
    :type code: ReasonInfoCode, optional
    :param message: Reason description, defaults to None
    :type message: str, optional
    :param permission: permission, defaults to None
    :type permission: str, optional
    """

    def __init__(
        self, code: ReasonInfoCode = None, message: str = None, permission: str = None
    ):
        if code is not None:
            self.code = self._enum_matching(code, ReasonInfoCode.list(), "code")
        if message is not None:
            self.message = message
        if permission is not None:
            self.permission = permission
