# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .rejected_recipient_response_resource import RejectedRecipientResponseResource


class MessageBatchResponseStatus(Enum):
    """An enumeration representing different categories.

    :cvar PROCESSING: "Processing"
    :vartype PROCESSING: str
    :cvar COMPLETED: "Completed"
    :vartype COMPLETED: str
    """

    PROCESSING = "Processing"
    COMPLETED = "Completed"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, MessageBatchResponseStatus._member_map_.values())
        )


@JsonMap(
    {
        "id_": "id",
        "from_": "from",
        "batch_size": "batchSize",
        "processed_count": "processedCount",
        "last_modified_time": "lastModifiedTime",
        "creation_time": "creationTime",
    }
)
class MessageBatchResponse(BaseModel):
    """Batch of A2P SMS messages. This object provides a specification
    to send message(s) to many recipients. It contains top-level attributes which apply to all messages. In addition
    to that, it is possible to override this attribute for each message. This
    way a single API call may be used to send individual messages to many recipients


    :param id_: Unique identifier of the message batch, defaults to None
    :type id_: str, optional
    :param from_: Phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format from which the messages are going to be sent, defaults to None
    :type from_: str, optional
    :param batch_size: Total number of messages in the accepted batch, defaults to None
    :type batch_size: int, optional
    :param processed_count: Total number of messages currently processed in the batch, defaults to None
    :type processed_count: int, optional
    :param last_modified_time: The last time the batch was processed.<br>, defaults to None
    :type last_modified_time: str, optional
    :param status: Current status of a message batch, defaults to None
    :type status: MessageBatchResponseStatus, optional
    :param creation_time: The time at which the batch was created<br>, defaults to None
    :type creation_time: str, optional
    :param rejected: The list of rejected/invalid recipients, defaults to None
    :type rejected: List[RejectedRecipientResponseResource], optional
    :param cost: The estimated batch cost for completed batch. Calculated after batch processing is completed.<br>, defaults to None
    :type cost: float, optional
    """

    def __init__(
        self,
        id_: str = None,
        from_: str = None,
        batch_size: int = None,
        processed_count: int = None,
        last_modified_time: str = None,
        status: MessageBatchResponseStatus = None,
        creation_time: str = None,
        rejected: List[RejectedRecipientResponseResource] = None,
        cost: float = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if from_ is not None:
            self.from_ = from_
        if batch_size is not None:
            self.batch_size = batch_size
        if processed_count is not None:
            self.processed_count = processed_count
        if last_modified_time is not None:
            self.last_modified_time = last_modified_time
        if status is not None:
            self.status = self._enum_matching(
                status, MessageBatchResponseStatus.list(), "status"
            )
        if creation_time is not None:
            self.creation_time = creation_time
        if rejected is not None:
            self.rejected = self._define_list(
                rejected, RejectedRecipientResponseResource
            )
        if cost is not None:
            self.cost = cost
