# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class GreetingResourceType(Enum):
    """An enumeration representing different categories.

    :cvar STARTRECORDING: "StartRecording"
    :vartype STARTRECORDING: str
    :cvar STOPRECORDING: "StopRecording"
    :vartype STOPRECORDING: str
    :cvar AUTOMATICRECORDING: "AutomaticRecording"
    :vartype AUTOMATICRECORDING: str
    """

    STARTRECORDING = "StartRecording"
    STOPRECORDING = "StopRecording"
    AUTOMATICRECORDING = "AutomaticRecording"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, GreetingResourceType._member_map_.values()))


class GreetingResourceMode(Enum):
    """An enumeration representing different categories.

    :cvar DEFAULT: "Default"
    :vartype DEFAULT: str
    :cvar CUSTOM: "Custom"
    :vartype CUSTOM: str
    """

    DEFAULT = "Default"
    CUSTOM = "Custom"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, GreetingResourceMode._member_map_.values()))


@JsonMap({"type_": "type"})
class GreetingResource(BaseModel):
    """GreetingResource

    :param type_: type_, defaults to None
    :type type_: GreetingResourceType, optional
    :param mode: Here `Default` indicates that all greetings of that type<br>(in all languages) are default. If at least one greeting (in any language)<br>of the specified type is custom, then `Custom` is returned.<br>, defaults to None
    :type mode: GreetingResourceMode, optional
    """

    def __init__(
        self, type_: GreetingResourceType = None, mode: GreetingResourceMode = None
    ):
        if type_ is not None:
            self.type_ = self._enum_matching(
                type_, GreetingResourceType.list(), "type_"
            )
        if mode is not None:
            self.mode = self._enum_matching(mode, GreetingResourceMode.list(), "mode")
