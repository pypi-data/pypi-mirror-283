# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .location_updates_emergency_address_info_request import (
    LocationUpdatesEmergencyAddressInfoRequest,
)
from .erl_location_info import ErlLocationInfo


@JsonMap(
    {
        "id_": "id",
        "start_ip": "startIp",
        "end_ip": "endIp",
        "emergency_address": "emergencyAddress",
        "emergency_location_id": "emergencyLocationId",
        "emergency_location": "emergencyLocation",
    }
)
class PrivateIpRangeInfoRequest(BaseModel):
    """PrivateIpRangeInfoRequest

    :param id_: id_, defaults to None
    :type id_: str, optional
    :param start_ip: start_ip, defaults to None
    :type start_ip: str, optional
    :param end_ip: end_ip, defaults to None
    :type end_ip: str, optional
    :param name: Network name, defaults to None
    :type name: str, optional
    :param emergency_address: Emergency address assigned to the switch. Only one of a pair `emergencyAddress`<br>or `emergencyLocationId` should be specified, otherwise the error is returned<br>, defaults to None
    :type emergency_address: LocationUpdatesEmergencyAddressInfoRequest, optional
    :param emergency_location_id: Emergency response location (address) internal identifier.<br>Only one of a pair `emergencyAddress` or `emergencyLocationId` should<br>be specified, otherwise the error is returned<br>, defaults to None
    :type emergency_location_id: str, optional
    :param emergency_location: Emergency response location information, defaults to None
    :type emergency_location: ErlLocationInfo, optional
    """

    def __init__(
        self,
        id_: str = None,
        start_ip: str = None,
        end_ip: str = None,
        name: str = None,
        emergency_address: LocationUpdatesEmergencyAddressInfoRequest = None,
        emergency_location_id: str = None,
        emergency_location: ErlLocationInfo = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if start_ip is not None:
            self.start_ip = start_ip
        if end_ip is not None:
            self.end_ip = end_ip
        if name is not None:
            self.name = name
        if emergency_address is not None:
            self.emergency_address = self._define_object(
                emergency_address, LocationUpdatesEmergencyAddressInfoRequest
            )
        if emergency_location_id is not None:
            self.emergency_location_id = emergency_location_id
        if emergency_location is not None:
            self.emergency_location = self._define_object(
                emergency_location, ErlLocationInfo
            )
