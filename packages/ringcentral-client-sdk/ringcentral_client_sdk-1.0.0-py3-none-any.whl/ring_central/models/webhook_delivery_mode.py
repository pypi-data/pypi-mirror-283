# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class WebhookDeliveryModeTransportType(Enum):
    """An enumeration representing different categories.

    :cvar WEBHOOK: "WebHook"
    :vartype WEBHOOK: str
    """

    WEBHOOK = "WebHook"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                WebhookDeliveryModeTransportType._member_map_.values(),
            )
        )


class WebhookDeliveryModeEncryption(Enum):
    """An enumeration representing different categories.

    :cvar FALSE: "false"
    :vartype FALSE: str
    """

    FALSE = "false"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, WebhookDeliveryModeEncryption._member_map_.values())
        )


@JsonMap({"transport_type": "transportType"})
class WebhookDeliveryMode(BaseModel):
    """WebhookDeliveryMode

    :param transport_type: The transport type for this subscription, or the channel by which an app should be notified of an event
    :type transport_type: WebhookDeliveryModeTransportType
    :param address: The URL to which notifications should be delivered. This is only applicable for the `WebHook` transport type, for which it is a required field.<br>
    :type address: str
    :param encryption: Specifies if notification messages will be encrypted or not.
    :type encryption: WebhookDeliveryModeEncryption
    """

    def __init__(
        self,
        transport_type: WebhookDeliveryModeTransportType,
        address: str,
        encryption: WebhookDeliveryModeEncryption,
    ):
        self.transport_type = self._enum_matching(
            transport_type, WebhookDeliveryModeTransportType.list(), "transport_type"
        )
        self.address = address
        self.encryption = self._enum_matching(
            encryption, WebhookDeliveryModeEncryption.list(), "encryption"
        )
