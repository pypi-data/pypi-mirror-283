# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .sync_type_enum import SyncTypeEnum


@JsonMap(
    {
        "sync_type": "syncType",
        "sync_token": "syncToken",
        "sync_time": "syncTime",
        "older_records_exist": "olderRecordsExist",
    }
)
class SyncInfoMessages(BaseModel):
    """Sync type, token and time

    :param sync_type: Type of message synchronization request:<br>  - FSync -- full sync<br>  - ISync -- incremental sync<br>, defaults to None
    :type sync_type: SyncTypeEnum, optional
    :param sync_token: Synchronization token, defaults to None
    :type sync_token: str, optional
    :param sync_time: Last synchronization date/time in ISO 8601 format including<br>timezone, for example 2016-03-10T18:07:52.534Z<br>, defaults to None
    :type sync_time: str, optional
    :param older_records_exist: older_records_exist, defaults to None
    :type older_records_exist: bool, optional
    """

    def __init__(
        self,
        sync_type: SyncTypeEnum = None,
        sync_token: str = None,
        sync_time: str = None,
        older_records_exist: bool = None,
    ):
        if sync_type is not None:
            self.sync_type = self._enum_matching(
                sync_type, SyncTypeEnum.list(), "sync_type"
            )
        if sync_token is not None:
            self.sync_token = sync_token
        if sync_time is not None:
            self.sync_time = sync_time
        if older_records_exist is not None:
            self.older_records_exist = older_records_exist
