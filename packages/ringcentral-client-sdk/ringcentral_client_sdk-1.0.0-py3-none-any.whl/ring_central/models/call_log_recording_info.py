# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class CallLogRecordingInfoType(Enum):
    """An enumeration representing different categories.

    :cvar AUTOMATIC: "Automatic"
    :vartype AUTOMATIC: str
    :cvar ONDEMAND: "OnDemand"
    :vartype ONDEMAND: str
    """

    AUTOMATIC = "Automatic"
    ONDEMAND = "OnDemand"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, CallLogRecordingInfoType._member_map_.values())
        )


@JsonMap({"id_": "id", "type_": "type", "content_uri": "contentUri"})
class CallLogRecordingInfo(BaseModel):
    """Call recording data. Returned if the call was recorded

    :param id_: Internal identifier of the call recording
    :type id_: str
    :param uri: Link to the call recording metadata resource
    :type uri: str
    :param type_: Indicates recording mode used
    :type type_: CallLogRecordingInfoType
    :param content_uri: Link to a call recording binary content. Has to be retrieved with proper authorization<br>(access token must be passed via `Authorization` header or query parameter)<br>
    :type content_uri: str
    """

    def __init__(
        self, id_: str, uri: str, type_: CallLogRecordingInfoType, content_uri: str
    ):
        self.id_ = id_
        self.uri = uri
        self.type_ = self._enum_matching(
            type_, CallLogRecordingInfoType.list(), "type_"
        )
        self.content_uri = content_uri
