# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .weekly_schedule_info import WeeklyScheduleInfo
from .ranges_info import RangesInfo


class ScheduleInfoRef(Enum):
    """An enumeration representing different categories.

    :cvar BUSINESSHOURS: "BusinessHours"
    :vartype BUSINESSHOURS: str
    :cvar AFTERHOURS: "AfterHours"
    :vartype AFTERHOURS: str
    """

    BUSINESSHOURS = "BusinessHours"
    AFTERHOURS = "AfterHours"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, ScheduleInfoRef._member_map_.values()))


@JsonMap({"weekly_ranges": "weeklyRanges"})
class ScheduleInfo(BaseModel):
    """Schedule when an answering rule should be applied

    :param weekly_ranges: Weekly schedule, defaults to None
    :type weekly_ranges: WeeklyScheduleInfo, optional
    :param ranges: Specific data ranges, defaults to None
    :type ranges: List[RangesInfo], optional
    :param ref: The user's schedule specified for business hours or after hours; it can also be set/retrieved calling the corresponding method, defaults to None
    :type ref: ScheduleInfoRef, optional
    """

    def __init__(
        self,
        weekly_ranges: WeeklyScheduleInfo = None,
        ranges: List[RangesInfo] = None,
        ref: ScheduleInfoRef = None,
    ):
        if weekly_ranges is not None:
            self.weekly_ranges = self._define_object(weekly_ranges, WeeklyScheduleInfo)
        if ranges is not None:
            self.ranges = self._define_list(ranges, RangesInfo)
        if ref is not None:
            self.ref = self._enum_matching(ref, ScheduleInfoRef.list(), "ref")
