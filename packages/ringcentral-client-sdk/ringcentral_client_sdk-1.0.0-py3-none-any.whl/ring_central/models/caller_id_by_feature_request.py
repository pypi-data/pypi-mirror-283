# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel
from .caller_id_by_feature_info_request import CallerIdByFeatureInfoRequest


class CallerIdByFeatureRequestFeature(Enum):
    """An enumeration representing different categories.

    :cvar RINGOUT: "RingOut"
    :vartype RINGOUT: str
    :cvar RINGME: "RingMe"
    :vartype RINGME: str
    :cvar CALLFLIP: "CallFlip"
    :vartype CALLFLIP: str
    :cvar FAXNUMBER: "FaxNumber"
    :vartype FAXNUMBER: str
    :cvar ADDITIONALSOFTPHONE: "AdditionalSoftphone"
    :vartype ADDITIONALSOFTPHONE: str
    :cvar ALTERNATE: "Alternate"
    :vartype ALTERNATE: str
    :cvar COMMONPHONE: "CommonPhone"
    :vartype COMMONPHONE: str
    :cvar MOBILEAPP: "MobileApp"
    :vartype MOBILEAPP: str
    :cvar DELEGATED: "Delegated"
    :vartype DELEGATED: str
    """

    RINGOUT = "RingOut"
    RINGME = "RingMe"
    CALLFLIP = "CallFlip"
    FAXNUMBER = "FaxNumber"
    ADDITIONALSOFTPHONE = "AdditionalSoftphone"
    ALTERNATE = "Alternate"
    COMMONPHONE = "CommonPhone"
    MOBILEAPP = "MobileApp"
    DELEGATED = "Delegated"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value, CallerIdByFeatureRequestFeature._member_map_.values()
            )
        )


@JsonMap({"caller_id": "callerId"})
class CallerIdByFeatureRequest(BaseModel):
    """Caller ID settings by feature

    :param feature: feature, defaults to None
    :type feature: CallerIdByFeatureRequestFeature, optional
    :param caller_id: caller_id, defaults to None
    :type caller_id: CallerIdByFeatureInfoRequest, optional
    """

    def __init__(
        self,
        feature: CallerIdByFeatureRequestFeature = None,
        caller_id: CallerIdByFeatureInfoRequest = None,
    ):
        if feature is not None:
            self.feature = self._enum_matching(
                feature, CallerIdByFeatureRequestFeature.list(), "feature"
            )
        if caller_id is not None:
            self.caller_id = self._define_object(
                caller_id, CallerIdByFeatureInfoRequest
            )
