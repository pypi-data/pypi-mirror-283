# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .tm_message_attachment_info import TmMessageAttachmentInfo
from .tm_mentions_info import TmMentionsInfo


class TmPostInfoType(Enum):
    """An enumeration representing different categories.

    :cvar TEXTMESSAGE: "TextMessage"
    :vartype TEXTMESSAGE: str
    :cvar PERSONJOINED: "PersonJoined"
    :vartype PERSONJOINED: str
    :cvar PERSONSADDED: "PersonsAdded"
    :vartype PERSONSADDED: str
    """

    TEXTMESSAGE = "TextMessage"
    PERSONJOINED = "PersonJoined"
    PERSONSADDED = "PersonsAdded"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, TmPostInfoType._member_map_.values()))


@JsonMap(
    {
        "id_": "id",
        "group_id": "groupId",
        "type_": "type",
        "creator_id": "creatorId",
        "added_person_ids": "addedPersonIds",
        "creation_time": "creationTime",
        "last_modified_time": "lastModifiedTime",
        "icon_uri": "iconUri",
        "icon_emoji": "iconEmoji",
    }
)
class TmPostInfo(BaseModel):
    """TmPostInfo

    :param id_: Internal identifier of a post, defaults to None
    :type id_: str, optional
    :param group_id: Internal identifier of a group a post belongs to, defaults to None
    :type group_id: str, optional
    :param type_: Type of post, defaults to None
    :type type_: TmPostInfoType, optional
    :param text: For 'TextMessage' post type only. Text of a message, defaults to None
    :type text: str, optional
    :param creator_id: Internal identifier of a user - author of a post, defaults to None
    :type creator_id: str, optional
    :param added_person_ids: For 'PersonsAdded' post type only. Identifiers of persons added to a group, defaults to None
    :type added_person_ids: List[str], optional
    :param creation_time: Post creation datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, defaults to None
    :type creation_time: str, optional
    :param last_modified_time: Post last modification datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, defaults to None
    :type last_modified_time: str, optional
    :param attachments: List of posted attachments, defaults to None
    :type attachments: List[TmMessageAttachmentInfo], optional
    :param mentions: mentions, defaults to None
    :type mentions: List[TmMentionsInfo], optional
    :param activity: Label of activity type, defaults to None
    :type activity: str, optional
    :param title: Title of a message. (Can be set for bot's messages only), defaults to None
    :type title: str, optional
    :param icon_uri: Link to an image used as an icon for this message, defaults to None
    :type icon_uri: str, optional
    :param icon_emoji: Emoji used as an icon for this message, defaults to None
    :type icon_emoji: str, optional
    """

    def __init__(
        self,
        id_: str = None,
        group_id: str = None,
        type_: TmPostInfoType = None,
        text: str = None,
        creator_id: str = None,
        added_person_ids: List[str] = None,
        creation_time: str = None,
        last_modified_time: str = None,
        attachments: List[TmMessageAttachmentInfo] = None,
        mentions: List[TmMentionsInfo] = None,
        activity: str = None,
        title: str = None,
        icon_uri: str = None,
        icon_emoji: str = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if group_id is not None:
            self.group_id = group_id
        if type_ is not None:
            self.type_ = self._enum_matching(type_, TmPostInfoType.list(), "type_")
        if text is not None:
            self.text = text
        if creator_id is not None:
            self.creator_id = creator_id
        if added_person_ids is not None:
            self.added_person_ids = added_person_ids
        if creation_time is not None:
            self.creation_time = creation_time
        if last_modified_time is not None:
            self.last_modified_time = last_modified_time
        if attachments is not None:
            self.attachments = self._define_list(attachments, TmMessageAttachmentInfo)
        if mentions is not None:
            self.mentions = self._define_list(mentions, TmMentionsInfo)
        if activity is not None:
            self.activity = activity
        if title is not None:
            self.title = title
        if icon_uri is not None:
            self.icon_uri = icon_uri
        if icon_emoji is not None:
            self.icon_emoji = icon_emoji
