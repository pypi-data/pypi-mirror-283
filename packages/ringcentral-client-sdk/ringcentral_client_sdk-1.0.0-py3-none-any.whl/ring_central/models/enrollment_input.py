# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class EnrollmentInputEncoding(Enum):
    """An enumeration representing different categories.

    :cvar MPEG: "Mpeg"
    :vartype MPEG: str
    :cvar MP4: "Mp4"
    :vartype MP4: str
    :cvar WAV: "Wav"
    :vartype WAV: str
    :cvar WEBM: "Webm"
    :vartype WEBM: str
    :cvar WEBP: "Webp"
    :vartype WEBP: str
    :cvar AAC: "Aac"
    :vartype AAC: str
    :cvar AVI: "Avi"
    :vartype AVI: str
    :cvar OGG: "Ogg"
    :vartype OGG: str
    """

    MPEG = "Mpeg"
    MP4 = "Mp4"
    WAV = "Wav"
    WEBM = "Webm"
    WEBP = "Webp"
    AAC = "Aac"
    AVI = "Avi"
    OGG = "Ogg"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, EnrollmentInputEncoding._member_map_.values())
        )


@JsonMap({"language_code": "languageCode", "speaker_id": "speakerId"})
class EnrollmentInput(BaseModel):
    """EnrollmentInput

    :param encoding: The encoding of the original audio
    :type encoding: EnrollmentInputEncoding
    :param language_code: Language spoken in the audio file., defaults to None
    :type language_code: str, optional
    :param content: Base64-encoded audio file data.
    :type content: str
    :param speaker_id: The enrollment ID to be registered. Acceptable format [a-zA-Z0-9_]+, defaults to None
    :type speaker_id: str, optional
    """

    def __init__(
        self,
        encoding: EnrollmentInputEncoding,
        content: str,
        language_code: str = None,
        speaker_id: str = None,
    ):
        self.encoding = self._enum_matching(
            encoding, EnrollmentInputEncoding.list(), "encoding"
        )
        if language_code is not None:
            self.language_code = language_code
        self.content = content
        if speaker_id is not None:
            self.speaker_id = speaker_id
