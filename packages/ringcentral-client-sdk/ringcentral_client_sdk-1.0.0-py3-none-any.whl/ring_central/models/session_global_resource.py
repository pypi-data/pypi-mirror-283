# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .webinar_ref_model import WebinarRefModel
from .rcw_session_status_model import RcwSessionStatusModel
from .session_runtime_status_model import SessionRuntimeStatusModel
from .recording_model import RecordingModel
from .session_livestream_minimal_model import SessionLivestreamMinimalModel


@JsonMap(
    {
        "id_": "id",
        "creation_time": "creationTime",
        "last_modified_time": "lastModifiedTime",
        "start_time": "startTime",
        "end_time": "endTime",
        "scheduled_start_time": "scheduledStartTime",
        "scheduled_duration": "scheduledDuration",
        "time_zone": "timeZone",
        "locale_code": "localeCode",
        "panel_join_time_offset": "panelJoinTimeOffset",
        "broadcasting_start_time": "broadcastingStartTime",
        "broadcasting_end_time": "broadcastingEndTime",
        "runtime_status": "runtimeStatus",
        "participant_count": "participantCount",
        "attendee_count": "attendeeCount",
        "unique_participant_count": "uniqueParticipantCount",
        "unique_attendee_count": "uniqueAttendeeCount",
        "video_bridge_id": "videoBridgeId",
    }
)
class SessionGlobalResource(BaseModel):
    """SessionGlobalResource

    :param id_: Internal object ID, defaults to None
    :type id_: str, optional
    :param creation_time: Object creation time
    :type creation_time: str
    :param last_modified_time: Object last modification time
    :type last_modified_time: str
    :param webinar: webinar
    :type webinar: WebinarRefModel
    :param start_time: Session start time. If a session hasn't been started this fields should be set to "scheduledStartTime"<br>, defaults to None
    :type start_time: str, optional
    :param end_time: Session end time. If a session hasn't been finished this fields should be set to ("startTime"+"scheduledDuration")<br>, defaults to None
    :type end_time: str, optional
    :param duration: Session duration in seconds rounded up (returned if 'startTime' and 'endTime' are not empty), defaults to None
    :type duration: int, optional
    :param title: Session title. If blank - derived from webinar title., defaults to None
    :type title: str, optional
    :param description: User-friendly description of the Session. If blank - derived from webinar title., defaults to None
    :type description: str, optional
    :param scheduled_start_time: Session scheduled start time., defaults to None
    :type scheduled_start_time: str, optional
    :param scheduled_duration: The scheduled duration of the Session in seconds., defaults to None
    :type scheduled_duration: int, optional
    :param time_zone: IANA-compatible time zone name (see https://www.iana.org/time-zones)., defaults to None
    :type time_zone: str, optional
    :param locale_code: Session locale code. Can't be blank or null., defaults to None
    :type locale_code: str, optional
    :param panel_join_time_offset: The time offset (positive, in seconds) indicating how much in advance<br>(comparing to "scheduledStartTime") panel members should join for the pre-webinar team sync<br>, defaults to None
    :type panel_join_time_offset: int, optional
    :param broadcasting_start_time: The time when broadcasting started., defaults to None
    :type broadcasting_start_time: str, optional
    :param broadcasting_end_time: The time when broadcasting ended., defaults to None
    :type broadcasting_end_time: str, optional
    :param status: Webinar session status, defaults to None
    :type status: RcwSessionStatusModel, optional
    :param runtime_status: Session runtime status (for 'Active' Sessions only).<br>It is omitted (or null) if the status is not Active<br>, defaults to None
    :type runtime_status: SessionRuntimeStatusModel, optional
    :param participant_count: The number of participants (of all roles) who joined the webinar, defaults to None
    :type participant_count: int, optional
    :param attendee_count: The number of attendees who joined the webinar, defaults to None
    :type attendee_count: int, optional
    :param unique_participant_count: Unique number of participants (of all roles) who joined the webinar, defaults to None
    :type unique_participant_count: int, optional
    :param unique_attendee_count: Unique number of attendees who joined the webinar, defaults to None
    :type unique_attendee_count: int, optional
    :param video_bridge_id: The RCV bridge id, defaults to None
    :type video_bridge_id: str, optional
    :param recording: recording, defaults to None
    :type recording: RecordingModel, optional
    :param livestreams: The list of livestreams configured for the session, defaults to None
    :type livestreams: List[SessionLivestreamMinimalModel], optional
    """

    def __init__(
        self,
        creation_time: str,
        last_modified_time: str,
        webinar: WebinarRefModel,
        id_: str = None,
        start_time: str = None,
        end_time: str = None,
        duration: int = None,
        title: str = None,
        description: str = None,
        scheduled_start_time: str = None,
        scheduled_duration: int = None,
        time_zone: str = None,
        locale_code: str = None,
        panel_join_time_offset: int = None,
        broadcasting_start_time: str = None,
        broadcasting_end_time: str = None,
        status: RcwSessionStatusModel = None,
        runtime_status: SessionRuntimeStatusModel = None,
        participant_count: int = None,
        attendee_count: int = None,
        unique_participant_count: int = None,
        unique_attendee_count: int = None,
        video_bridge_id: str = None,
        recording: RecordingModel = None,
        livestreams: List[SessionLivestreamMinimalModel] = None,
    ):
        if id_ is not None:
            self.id_ = id_
        self.creation_time = creation_time
        self.last_modified_time = last_modified_time
        self.webinar = self._define_object(webinar, WebinarRefModel)
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if duration is not None:
            self.duration = duration
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if scheduled_start_time is not None:
            self.scheduled_start_time = scheduled_start_time
        if scheduled_duration is not None:
            self.scheduled_duration = scheduled_duration
        if time_zone is not None:
            self.time_zone = time_zone
        if locale_code is not None:
            self.locale_code = locale_code
        if panel_join_time_offset is not None:
            self.panel_join_time_offset = panel_join_time_offset
        if broadcasting_start_time is not None:
            self.broadcasting_start_time = broadcasting_start_time
        if broadcasting_end_time is not None:
            self.broadcasting_end_time = broadcasting_end_time
        if status is not None:
            self.status = self._enum_matching(
                status, RcwSessionStatusModel.list(), "status"
            )
        if runtime_status is not None:
            self.runtime_status = self._enum_matching(
                runtime_status, SessionRuntimeStatusModel.list(), "runtime_status"
            )
        if participant_count is not None:
            self.participant_count = participant_count
        if attendee_count is not None:
            self.attendee_count = attendee_count
        if unique_participant_count is not None:
            self.unique_participant_count = unique_participant_count
        if unique_attendee_count is not None:
            self.unique_attendee_count = unique_attendee_count
        if video_bridge_id is not None:
            self.video_bridge_id = video_bridge_id
        if recording is not None:
            self.recording = self._define_object(recording, RecordingModel)
        if livestreams is not None:
            self.livestreams = self._define_list(
                livestreams, SessionLivestreamMinimalModel
            )
