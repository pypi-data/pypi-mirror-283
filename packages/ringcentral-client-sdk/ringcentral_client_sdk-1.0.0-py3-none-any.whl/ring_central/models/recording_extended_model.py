# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .recording_status_model import RecordingStatusModel


@JsonMap(
    {
        "id_": "id",
        "creation_time": "creationTime",
        "last_modified_time": "lastModifiedTime",
        "failure_reason": "failureReason",
        "shared_uri_expiration_time": "sharedUriExpirationTime",
        "recording_shared_uri": "recordingSharedUri",
    }
)
class RecordingExtendedModel(BaseModel):
    """RecordingExtendedModel

    :param id_: Internal object ID, defaults to None
    :type id_: str, optional
    :param creation_time: Object creation time
    :type creation_time: str
    :param last_modified_time: Object last modification time
    :type last_modified_time: str
    :param status: Recording status
    :type status: RecordingStatusModel
    :param failure_reason: Generalized API error structure suitable for any error type, defaults to None
    :type failure_reason: dict, optional
    :param duration: Recording duration in seconds, defaults to None
    :type duration: int, optional
    :param shared: Indicates if Host or Admin has shared a recording.<br>Can be set to true only then recording status is 'Available'.<br>, defaults to None
    :type shared: bool, optional
    :param shared_uri_expiration_time: Time after which recording shared link cannot be accessed by recipients., defaults to None
    :type shared_uri_expiration_time: str, optional
    :param recording_shared_uri: Shared URI of the recording. If a password was required to join a webinar, the URI should contain the password encoded
    :type recording_shared_uri: str
    """

    def __init__(
        self,
        creation_time: str,
        last_modified_time: str,
        status: RecordingStatusModel,
        recording_shared_uri: str,
        id_: str = None,
        failure_reason: dict = None,
        duration: int = None,
        shared: bool = None,
        shared_uri_expiration_time: str = None,
    ):
        if id_ is not None:
            self.id_ = id_
        self.creation_time = creation_time
        self.last_modified_time = last_modified_time
        self.status = self._enum_matching(status, RecordingStatusModel.list(), "status")
        if failure_reason is not None:
            self.failure_reason = failure_reason
        if duration is not None:
            self.duration = duration
        if shared is not None:
            self.shared = shared
        if shared_uri_expiration_time is not None:
            self.shared_uri_expiration_time = shared_uri_expiration_time
        self.recording_shared_uri = recording_shared_uri
