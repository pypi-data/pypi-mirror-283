# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class TokenType(Enum):
    """An enumeration representing different categories.

    :cvar BEARER: "bearer"
    :vartype BEARER: str
    """

    BEARER = "bearer"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, TokenType._member_map_.values()))


@JsonMap({})
class TokenInfo(BaseModel):
    """TokenInfo

    :param access_token: OAuth access token to pass to subsequent API requests
    :type access_token: str
    :param expires_in: Access token TTL (time-to-live) in seconds
    :type expires_in: int
    :param refresh_token: OAuth refresh token (if issued)<br>, defaults to None
    :type refresh_token: str, optional
    :param refresh_token_expires_in: Refresh token TTL (time-to-live) in seconds, defaults to None
    :type refresh_token_expires_in: int, optional
    :param scope: The list of space separated application permissions (OAuth scopes)<br>
    :type scope: str
    :param token_type: Type of the token. The only supported value is `bearer`. This value should be used when specifying access token in `Authorization` header of subsequent API requests
    :type token_type: TokenType
    :param owner_id: Token owner's identifier. Contains RingCentral user (extension) ID, defaults to None
    :type owner_id: str, optional
    :param endpoint_id: Client application instance identifier that matches the value provided by the client,<br>or generated by the server if a client has not provided this value<br>, defaults to None
    :type endpoint_id: str, optional
    :param id_token: OpenID Connect ID token (if OpenID Connect flow was activated during authorization), defaults to None
    :type id_token: str, optional
    :param session_expires_in: Remaining time in seconds until session expiration due to absolute timeout.<br>Returned only if absolute session timeout is enforced<br>, defaults to None
    :type session_expires_in: int, optional
    :param session_expiration_time: Absolute value of session expiration time in ISO date formatted string.<br>Returned only if absolute session timeout is enforced<br>, defaults to None
    :type session_expiration_time: str, optional
    :param session_id: OAuth session ID, defaults to None
    :type session_id: str, optional
    :param session_idle_timeout: Nominal value of session idle timeout in seconds.<br>Returned only if idle session timeout is enforced<br>, defaults to None
    :type session_idle_timeout: int, optional
    """

    def __init__(
        self,
        access_token: str,
        expires_in: int,
        scope: str,
        token_type: TokenType,
        refresh_token: str = None,
        refresh_token_expires_in: int = None,
        owner_id: str = None,
        endpoint_id: str = None,
        id_token: str = None,
        session_expires_in: int = None,
        session_expiration_time: str = None,
        session_id: str = None,
        session_idle_timeout: int = None,
    ):
        self.access_token = access_token
        self.expires_in = expires_in
        if refresh_token is not None:
            self.refresh_token = refresh_token
        if refresh_token_expires_in is not None:
            self.refresh_token_expires_in = refresh_token_expires_in
        self.scope = scope
        self.token_type = self._enum_matching(
            token_type, TokenType.list(), "token_type"
        )
        if owner_id is not None:
            self.owner_id = owner_id
        if endpoint_id is not None:
            self.endpoint_id = endpoint_id
        if id_token is not None:
            self.id_token = id_token
        if session_expires_in is not None:
            self.session_expires_in = session_expires_in
        if session_expiration_time is not None:
            self.session_expiration_time = session_expiration_time
        if session_id is not None:
            self.session_id = session_id
        if session_idle_timeout is not None:
            self.session_idle_timeout = session_idle_timeout
