# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel
from .user import User
from .bridge_pins_with_aliases import BridgePinsWithAliases
from .bridge_response_security import BridgeResponseSecurity
from .bridge_preferences import BridgePreferences
from .bridge_discovery import BridgeDiscovery


class BridgeResponseType(Enum):
    """An enumeration representing different categories.

    :cvar INSTANT: "Instant"
    :vartype INSTANT: str
    :cvar SCHEDULED: "Scheduled"
    :vartype SCHEDULED: str
    :cvar PMI: "PMI"
    :vartype PMI: str
    """

    INSTANT = "Instant"
    SCHEDULED = "Scheduled"
    PMI = "PMI"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, BridgeResponseType._member_map_.values()))


@JsonMap({"id_": "id", "type_": "type"})
class BridgeResponse(BaseModel):
    """BridgeResponse

    :param id_: Unique bridge identifier, defaults to None
    :type id_: str, optional
    :param name: Custom name of a bridge, defaults to None
    :type name: str, optional
    :param type_: Type of bridge. It specifies bridge life cycle.<br>1) Instant - The bridge will be used for a meeting only once immediately after creation. Then it will be deleted.<br>2) Scheduled - The bridge will be used for scheduled one or more meetings. If the bridge is not used for a long<br>time after the last meeting, then it will be deleted.<br>3) PMI - The bridge will contain Personal Meeting Identifier owned by a user. It is the default user bridge.<br>Each user may have only one default (PMI) bridge. Such bridge will be deleted only in case the user is deleted<br>from the system.<br>, defaults to None
    :type type_: BridgeResponseType, optional
    :param host: host, defaults to None
    :type host: User, optional
    :param pins: pins, defaults to None
    :type pins: BridgePinsWithAliases, optional
    :param security: security, defaults to None
    :type security: BridgeResponseSecurity, optional
    :param preferences: preferences, defaults to None
    :type preferences: BridgePreferences, optional
    :param discovery: discovery, defaults to None
    :type discovery: BridgeDiscovery, optional
    """

    def __init__(
        self,
        id_: str = None,
        name: str = None,
        type_: BridgeResponseType = None,
        host: User = None,
        pins: BridgePinsWithAliases = None,
        security: BridgeResponseSecurity = None,
        preferences: BridgePreferences = None,
        discovery: BridgeDiscovery = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if name is not None:
            self.name = name
        if type_ is not None:
            self.type_ = self._enum_matching(type_, BridgeResponseType.list(), "type_")
        if host is not None:
            self.host = self._define_object(host, User)
        if pins is not None:
            self.pins = self._define_object(pins, BridgePinsWithAliases)
        if security is not None:
            self.security = self._define_object(security, BridgeResponseSecurity)
        if preferences is not None:
            self.preferences = self._define_object(preferences, BridgePreferences)
        if discovery is not None:
            self.discovery = self._define_object(discovery, BridgeDiscovery)
