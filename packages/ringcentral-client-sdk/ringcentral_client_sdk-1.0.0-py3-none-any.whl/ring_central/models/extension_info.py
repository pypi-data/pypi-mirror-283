# This file was generated by liblab | https://liblab.com/

from .utils.json_map import JsonMap
from .base import BaseModel


@JsonMap(
    {"id_": "id", "extension_number": "extensionNumber", "partner_id": "partnerId"}
)
class ExtensionInfo(BaseModel):
    """Information on the extension, to which the phone number is assigned.
    Returned only for the request of Account phone number list


    :param id_: Internal identifier of an extension, defaults to None
    :type id_: int, optional
    :param uri: Canonical URI of an extension, defaults to None
    :type uri: str, optional
    :param name: Extension name, defaults to None
    :type name: str, optional
    :param extension_number: Extension short number, defaults to None
    :type extension_number: str, optional
    :param partner_id: For partner applications. Internal identifier of an extension<br>created by partner. The RingCentral supports the mapping of accounts and<br>stores the corresponding account ID/extension ID for each partner ID of<br>a client application. In request URIs partner IDs are accepted instead<br>of regular RingCentral native IDs as path parameters using `pid=XXX` clause.<br>Though in response URIs contain the corresponding account IDs and extension<br>IDs. In all request and response bodies these values are reflected via<br>partnerId attributes of account and extension<br>, defaults to None
    :type partner_id: str, optional
    """

    def __init__(
        self,
        id_: int = None,
        uri: str = None,
        name: str = None,
        extension_number: str = None,
        partner_id: str = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if uri is not None:
            self.uri = uri
        if name is not None:
            self.name = name
        if extension_number is not None:
            self.extension_number = extension_number
        if partner_id is not None:
            self.partner_id = partner_id
