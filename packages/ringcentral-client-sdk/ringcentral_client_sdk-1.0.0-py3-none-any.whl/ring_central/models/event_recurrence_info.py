# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class EventRecurrenceInfoSchedule(Enum):
    """An enumeration representing different categories.

    :cvar NONE: "None"
    :vartype NONE: str
    :cvar DAY: "Day"
    :vartype DAY: str
    :cvar WEEKDAY: "Weekday"
    :vartype WEEKDAY: str
    :cvar WEEK: "Week"
    :vartype WEEK: str
    :cvar MONTH: "Month"
    :vartype MONTH: str
    :cvar YEAR: "Year"
    :vartype YEAR: str
    """

    NONE = "None"
    DAY = "Day"
    WEEKDAY = "Weekday"
    WEEK = "Week"
    MONTH = "Month"
    YEAR = "Year"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, EventRecurrenceInfoSchedule._member_map_.values())
        )


class EventRecurrenceInfoEndingCondition(Enum):
    """An enumeration representing different categories.

    :cvar NONE: "None"
    :vartype NONE: str
    :cvar COUNT: "Count"
    :vartype COUNT: str
    :cvar DATE: "Date"
    :vartype DATE: str
    """

    NONE = "None"
    COUNT = "Count"
    DATE = "Date"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                EventRecurrenceInfoEndingCondition._member_map_.values(),
            )
        )


@JsonMap(
    {
        "ending_condition": "endingCondition",
        "ending_after": "endingAfter",
        "ending_on": "endingOn",
    }
)
class EventRecurrenceInfo(BaseModel):
    """EventRecurrenceInfo

    :param schedule: Event recurrence settings. For non-periodic events the value <br>is `None`. Must be greater or equal to event duration: 1- Day/Weekday; <br>7 - Week; 28 - Month; 365 - Year<br>, defaults to None
    :type schedule: EventRecurrenceInfoSchedule, optional
    :param ending_condition: Condition of ending an event, defaults to None
    :type ending_condition: EventRecurrenceInfoEndingCondition, optional
    :param ending_after: Count of event iterations. For periodic events only. Value range is 1 - 10. <br>Must be specified if `endingCondition` is `Count`<br>, defaults to None
    :type ending_after: int, optional
    :param ending_on: Iterations ending datetime for periodic events in <br>[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format<br>, defaults to None
    :type ending_on: str, optional
    """

    def __init__(
        self,
        schedule: EventRecurrenceInfoSchedule = None,
        ending_condition: EventRecurrenceInfoEndingCondition = None,
        ending_after: int = None,
        ending_on: str = None,
    ):
        if schedule is not None:
            self.schedule = self._enum_matching(
                schedule, EventRecurrenceInfoSchedule.list(), "schedule"
            )
        if ending_condition is not None:
            self.ending_condition = self._enum_matching(
                ending_condition,
                EventRecurrenceInfoEndingCondition.list(),
                "ending_condition",
            )
        if ending_after is not None:
            self.ending_after = ending_after
        if ending_on is not None:
            self.ending_on = ending_on
