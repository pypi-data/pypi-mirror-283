# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel
from .device_phone_lines_emergency_address_info import (
    DevicePhoneLinesEmergencyAddressInfo,
)
from .device_phone_number_info import DevicePhoneNumberInfo


class LineType(Enum):
    """An enumeration representing different categories.

    :cvar STANDALONE: "Standalone"
    :vartype STANDALONE: str
    :cvar STANDALONEFREE: "StandaloneFree"
    :vartype STANDALONEFREE: str
    :cvar BLAPRIMARY: "BlaPrimary"
    :vartype BLAPRIMARY: str
    :cvar BLASECONDARY: "BlaSecondary"
    :vartype BLASECONDARY: str
    """

    STANDALONE = "Standalone"
    STANDALONEFREE = "StandaloneFree"
    BLAPRIMARY = "BlaPrimary"
    BLASECONDARY = "BlaSecondary"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, LineType._member_map_.values()))


@JsonMap(
    {
        "id_": "id",
        "line_type": "lineType",
        "emergency_address": "emergencyAddress",
        "phone_info": "phoneInfo",
    }
)
class DevicePhoneLinesInfo(BaseModel):
    """DevicePhoneLinesInfo

    :param id_: Internal identifier of a phone line, defaults to None
    :type id_: str, optional
    :param line_type: Type of phone line, defaults to None
    :type line_type: LineType, optional
    :param emergency_address: emergency_address, defaults to None
    :type emergency_address: DevicePhoneLinesEmergencyAddressInfo, optional
    :param phone_info: Phone number information, defaults to None
    :type phone_info: DevicePhoneNumberInfo, optional
    """

    def __init__(
        self,
        id_: str = None,
        line_type: LineType = None,
        emergency_address: DevicePhoneLinesEmergencyAddressInfo = None,
        phone_info: DevicePhoneNumberInfo = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if line_type is not None:
            self.line_type = self._enum_matching(
                line_type, LineType.list(), "line_type"
            )
        if emergency_address is not None:
            self.emergency_address = self._define_object(
                emergency_address, DevicePhoneLinesEmergencyAddressInfo
            )
        if phone_info is not None:
            self.phone_info = self._define_object(phone_info, DevicePhoneNumberInfo)
