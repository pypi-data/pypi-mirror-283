# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .addon_info import AddonInfo
from .device_feature_enum import DeviceFeatureEnum


@JsonMap({"id_": "id", "device_class": "deviceClass", "line_count": "lineCount"})
class ModelInfo(BaseModel):
    """HardPhone model information

    :param id_: Internal identifier of a HardPhone device model, defaults to None
    :type id_: str, optional
    :param name: Device name, defaults to None
    :type name: str, optional
    :param addons: Add-ons description, defaults to None
    :type addons: List[AddonInfo], optional
    :param device_class: device_class, defaults to None
    :type device_class: str, optional
    :param features: Device feature or multiple features supported, defaults to None
    :type features: List[DeviceFeatureEnum], optional
    :param line_count: Max supported count of phone lines, defaults to None
    :type line_count: int, optional
    """

    def __init__(
        self,
        id_: str = None,
        name: str = None,
        addons: List[AddonInfo] = None,
        device_class: str = None,
        features: List[DeviceFeatureEnum] = None,
        line_count: int = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if name is not None:
            self.name = name
        if addons is not None:
            self.addons = self._define_list(addons, AddonInfo)
        if device_class is not None:
            self.device_class = device_class
        if features is not None:
            self.features = self._define_list(features, DeviceFeatureEnum)
        if line_count is not None:
            self.line_count = line_count
