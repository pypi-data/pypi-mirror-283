# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class EmergencyServiceAddressResourceSyncStatus(Enum):
    """An enumeration representing different categories.

    :cvar VERIFIED: "Verified"
    :vartype VERIFIED: str
    :cvar UPDATED: "Updated"
    :vartype UPDATED: str
    :cvar DELETED: "Deleted"
    :vartype DELETED: str
    :cvar NOTREQUIRED: "NotRequired"
    :vartype NOTREQUIRED: str
    :cvar UNSUPPORTED: "Unsupported"
    :vartype UNSUPPORTED: str
    :cvar FAILED: "Failed"
    :vartype FAILED: str
    """

    VERIFIED = "Verified"
    UPDATED = "Updated"
    DELETED = "Deleted"
    NOTREQUIRED = "NotRequired"
    UNSUPPORTED = "Unsupported"
    FAILED = "Failed"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                EmergencyServiceAddressResourceSyncStatus._member_map_.values(),
            )
        )


class EmergencyServiceAddressResourceLineProvisioningStatus(Enum):
    """An enumeration representing different categories.

    :cvar PROVISIONING: "Provisioning"
    :vartype PROVISIONING: str
    :cvar VALID: "Valid"
    :vartype VALID: str
    :cvar INVALID: "Invalid"
    :vartype INVALID: str
    """

    PROVISIONING = "Provisioning"
    VALID = "Valid"
    INVALID = "Invalid"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                EmergencyServiceAddressResourceLineProvisioningStatus._member_map_.values(),
            )
        )


@JsonMap(
    {
        "customer_name": "customerName",
        "state_id": "stateId",
        "state_iso_code": "stateIsoCode",
        "state_name": "stateName",
        "country_id": "countryId",
        "country_iso_code": "countryIsoCode",
        "country_name": "countryName",
        "out_of_country": "outOfCountry",
        "sync_status": "syncStatus",
        "additional_customer_name": "additionalCustomerName",
        "customer_email": "customerEmail",
        "additional_customer_email": "additionalCustomerEmail",
        "customer_phone": "customerPhone",
        "additional_customer_phone": "additionalCustomerPhone",
        "line_provisioning_status": "lineProvisioningStatus",
        "tax_id": "taxId",
    }
)
class EmergencyServiceAddressResource(BaseModel):
    """Address for emergency cases. The same emergency address is assigned
    to all the numbers of one device


    :param street: street, defaults to None
    :type street: str, optional
    :param street2: street2, defaults to None
    :type street2: str, optional
    :param city: city, defaults to None
    :type city: str, optional
    :param zip: zip, defaults to None
    :type zip: str, optional
    :param customer_name: customer_name, defaults to None
    :type customer_name: str, optional
    :param state: State/province name, defaults to None
    :type state: str, optional
    :param state_id: Internal identifier of a state, defaults to None
    :type state_id: str, optional
    :param state_iso_code: ISO code of a state, defaults to None
    :type state_iso_code: str, optional
    :param state_name: Full name of a state, defaults to None
    :type state_name: str, optional
    :param country_id: Internal identifier of a country, defaults to None
    :type country_id: str, optional
    :param country_iso_code: ISO code of a country, defaults to None
    :type country_iso_code: str, optional
    :param country: Country name, defaults to None
    :type country: str, optional
    :param country_name: Full name of a country, defaults to None
    :type country_name: str, optional
    :param out_of_country: Specifies if emergency address is out of country, defaults to None
    :type out_of_country: bool, optional
    :param sync_status: Resulting status of emergency address synchronization. Returned<br>if `syncEmergencyAddress` parameter is set to `true`<br>, defaults to None
    :type sync_status: EmergencyServiceAddressResourceSyncStatus, optional
    :param additional_customer_name: Name of an additional contact person. Should be specified for<br>countries except the US, Canada, the UK and Australia.<br>, defaults to None
    :type additional_customer_name: str, optional
    :param customer_email: Email of a primary contact person (receiver). Should be specified<br>for countries except the US, Canada, the UK and Australia.<br>, defaults to None
    :type customer_email: str, optional
    :param additional_customer_email: Email of an additional contact person. Should be specified<br>for countries except the US, Canada, the UK and Australia.<br>, defaults to None
    :type additional_customer_email: str, optional
    :param customer_phone: Phone number of a primary contact person (receiver). Should<br>be specified for countries except the US, Canada, the UK and Australia<br>, defaults to None
    :type customer_phone: str, optional
    :param additional_customer_phone: Phone number of an additional contact person. Should be specified<br>for countries except the US, Canada, the UK & Australia.<br>, defaults to None
    :type additional_customer_phone: str, optional
    :param line_provisioning_status: Status of digital line provisioning, defaults to None
    :type line_provisioning_status: EmergencyServiceAddressResourceLineProvisioningStatus, optional
    :param tax_id: Internal identifier of a tax, defaults to None
    :type tax_id: str, optional
    """

    def __init__(
        self,
        street: str = None,
        street2: str = None,
        city: str = None,
        zip: str = None,
        customer_name: str = None,
        state: str = None,
        state_id: str = None,
        state_iso_code: str = None,
        state_name: str = None,
        country_id: str = None,
        country_iso_code: str = None,
        country: str = None,
        country_name: str = None,
        out_of_country: bool = None,
        sync_status: EmergencyServiceAddressResourceSyncStatus = None,
        additional_customer_name: str = None,
        customer_email: str = None,
        additional_customer_email: str = None,
        customer_phone: str = None,
        additional_customer_phone: str = None,
        line_provisioning_status: EmergencyServiceAddressResourceLineProvisioningStatus = None,
        tax_id: str = None,
    ):
        if street is not None:
            self.street = street
        if street2 is not None:
            self.street2 = street2
        if city is not None:
            self.city = city
        if zip is not None:
            self.zip = zip
        if customer_name is not None:
            self.customer_name = customer_name
        if state is not None:
            self.state = state
        if state_id is not None:
            self.state_id = state_id
        if state_iso_code is not None:
            self.state_iso_code = state_iso_code
        if state_name is not None:
            self.state_name = state_name
        if country_id is not None:
            self.country_id = country_id
        if country_iso_code is not None:
            self.country_iso_code = country_iso_code
        if country is not None:
            self.country = country
        if country_name is not None:
            self.country_name = country_name
        if out_of_country is not None:
            self.out_of_country = out_of_country
        if sync_status is not None:
            self.sync_status = self._enum_matching(
                sync_status,
                EmergencyServiceAddressResourceSyncStatus.list(),
                "sync_status",
            )
        if additional_customer_name is not None:
            self.additional_customer_name = additional_customer_name
        if customer_email is not None:
            self.customer_email = customer_email
        if additional_customer_email is not None:
            self.additional_customer_email = additional_customer_email
        if customer_phone is not None:
            self.customer_phone = customer_phone
        if additional_customer_phone is not None:
            self.additional_customer_phone = additional_customer_phone
        if line_provisioning_status is not None:
            self.line_provisioning_status = self._enum_matching(
                line_provisioning_status,
                EmergencyServiceAddressResourceLineProvisioningStatus.list(),
                "line_provisioning_status",
            )
        if tax_id is not None:
            self.tax_id = tax_id
