# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class TmTeamInfoType(Enum):
    """An enumeration representing different categories.

    :cvar TEAM: "Team"
    :vartype TEAM: str
    """

    TEAM = "Team"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, TmTeamInfoType._member_map_.values()))


class TmTeamInfoStatus(Enum):
    """An enumeration representing different categories.

    :cvar ACTIVE: "Active"
    :vartype ACTIVE: str
    :cvar ARCHIVED: "Archived"
    :vartype ARCHIVED: str
    """

    ACTIVE = "Active"
    ARCHIVED = "Archived"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, TmTeamInfoStatus._member_map_.values()))


@JsonMap(
    {
        "id_": "id",
        "type_": "type",
        "creation_time": "creationTime",
        "last_modified_time": "lastModifiedTime",
    }
)
class TmTeamInfo(BaseModel):
    """TmTeamInfo

    :param id_: Internal identifier of a team, defaults to None
    :type id_: str, optional
    :param type_: Type of chat, defaults to None
    :type type_: TmTeamInfoType, optional
    :param public: Team access level, defaults to None
    :type public: bool, optional
    :param name: Team name, defaults to None
    :type name: str, optional
    :param description: Team description, defaults to None
    :type description: str, optional
    :param status: Team status, defaults to None
    :type status: TmTeamInfoStatus, optional
    :param creation_time: Team creation datetime in ISO 8601 format, defaults to None
    :type creation_time: str, optional
    :param last_modified_time: Team last change datetime in ISO 8601 format, defaults to None
    :type last_modified_time: str, optional
    """

    def __init__(
        self,
        id_: str = None,
        type_: TmTeamInfoType = None,
        public: bool = None,
        name: str = None,
        description: str = None,
        status: TmTeamInfoStatus = None,
        creation_time: str = None,
        last_modified_time: str = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if type_ is not None:
            self.type_ = self._enum_matching(type_, TmTeamInfoType.list(), "type_")
        if public is not None:
            self.public = public
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if status is not None:
            self.status = self._enum_matching(status, TmTeamInfoStatus.list(), "status")
        if creation_time is not None:
            self.creation_time = creation_time
        if last_modified_time is not None:
            self.last_modified_time = last_modified_time
