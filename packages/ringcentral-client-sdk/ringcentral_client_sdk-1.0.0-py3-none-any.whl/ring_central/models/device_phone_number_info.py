# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel
from .device_phone_number_country_info import DevicePhoneNumberCountryInfo


class DevicePhoneNumberInfoPaymentType(Enum):
    """An enumeration representing different categories.

    :cvar EXTERNAL: "External"
    :vartype EXTERNAL: str
    :cvar TOLLFREE: "TollFree"
    :vartype TOLLFREE: str
    :cvar LOCAL: "Local"
    :vartype LOCAL: str
    """

    EXTERNAL = "External"
    TOLLFREE = "TollFree"
    LOCAL = "Local"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                DevicePhoneNumberInfoPaymentType._member_map_.values(),
            )
        )


class DevicePhoneNumberInfoUsageType(Enum):
    """An enumeration representing different categories.

    :cvar COMPANYNUMBER: "CompanyNumber"
    :vartype COMPANYNUMBER: str
    :cvar MAINCOMPANYNUMBER: "MainCompanyNumber"
    :vartype MAINCOMPANYNUMBER: str
    :cvar ADDITIONALCOMPANYNUMBER: "AdditionalCompanyNumber"
    :vartype ADDITIONALCOMPANYNUMBER: str
    :cvar DIRECTNUMBER: "DirectNumber"
    :vartype DIRECTNUMBER: str
    :cvar COMPANYFAXNUMBER: "CompanyFaxNumber"
    :vartype COMPANYFAXNUMBER: str
    :cvar FORWARDEDNUMBER: "ForwardedNumber"
    :vartype FORWARDEDNUMBER: str
    :cvar FORWARDEDCOMPANYNUMBER: "ForwardedCompanyNumber"
    :vartype FORWARDEDCOMPANYNUMBER: str
    :cvar CONTACTCENTERNUMBER: "ContactCenterNumber"
    :vartype CONTACTCENTERNUMBER: str
    """

    COMPANYNUMBER = "CompanyNumber"
    MAINCOMPANYNUMBER = "MainCompanyNumber"
    ADDITIONALCOMPANYNUMBER = "AdditionalCompanyNumber"
    DIRECTNUMBER = "DirectNumber"
    COMPANYFAXNUMBER = "CompanyFaxNumber"
    FORWARDEDNUMBER = "ForwardedNumber"
    FORWARDEDCOMPANYNUMBER = "ForwardedCompanyNumber"
    CONTACTCENTERNUMBER = "ContactCenterNumber"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, DevicePhoneNumberInfoUsageType._member_map_.values())
        )


class DevicePhoneNumberInfoType(Enum):
    """An enumeration representing different categories.

    :cvar VOICEFAX: "VoiceFax"
    :vartype VOICEFAX: str
    :cvar FAXONLY: "FaxOnly"
    :vartype FAXONLY: str
    :cvar VOICEONLY: "VoiceOnly"
    :vartype VOICEONLY: str
    """

    VOICEFAX = "VoiceFax"
    FAXONLY = "FaxOnly"
    VOICEONLY = "VoiceOnly"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, DevicePhoneNumberInfoType._member_map_.values())
        )


@JsonMap(
    {
        "id_": "id",
        "payment_type": "paymentType",
        "phone_number": "phoneNumber",
        "usage_type": "usageType",
        "type_": "type",
    }
)
class DevicePhoneNumberInfo(BaseModel):
    """Phone number information

    :param id_: Internal identifier of a phone number, defaults to None
    :type id_: int, optional
    :param country: Brief information on a phone number country, defaults to None
    :type country: DevicePhoneNumberCountryInfo, optional
    :param payment_type: Payment type. 'External' is returned for forwarded numbers which are not terminated in the RingCentral phone system = ['External', 'TollFree', 'Local'], defaults to None
    :type payment_type: DevicePhoneNumberInfoPaymentType, optional
    :param phone_number: Phone number, defaults to None
    :type phone_number: str, optional
    :param usage_type: usage_type, defaults to None
    :type usage_type: DevicePhoneNumberInfoUsageType, optional
    :param type_: Type of phone number, defaults to None
    :type type_: DevicePhoneNumberInfoType, optional
    """

    def __init__(
        self,
        id_: int = None,
        country: DevicePhoneNumberCountryInfo = None,
        payment_type: DevicePhoneNumberInfoPaymentType = None,
        phone_number: str = None,
        usage_type: DevicePhoneNumberInfoUsageType = None,
        type_: DevicePhoneNumberInfoType = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if country is not None:
            self.country = self._define_object(country, DevicePhoneNumberCountryInfo)
        if payment_type is not None:
            self.payment_type = self._enum_matching(
                payment_type, DevicePhoneNumberInfoPaymentType.list(), "payment_type"
            )
        if phone_number is not None:
            self.phone_number = phone_number
        if usage_type is not None:
            self.usage_type = self._enum_matching(
                usage_type, DevicePhoneNumberInfoUsageType.list(), "usage_type"
            )
        if type_ is not None:
            self.type_ = self._enum_matching(
                type_, DevicePhoneNumberInfoType.list(), "type_"
            )
