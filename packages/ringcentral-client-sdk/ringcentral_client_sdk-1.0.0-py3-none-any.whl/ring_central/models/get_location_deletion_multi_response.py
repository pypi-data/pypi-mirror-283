# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .location_deletion_info import LocationDeletionInfo


class GetLocationDeletionMultiResponseDeletion(Enum):
    """An enumeration representing different categories.

    :cvar FORBIDDEN: "Forbidden"
    :vartype FORBIDDEN: str
    :cvar RESTRICTED: "Restricted"
    :vartype RESTRICTED: str
    :cvar ALLOWED: "Allowed"
    :vartype ALLOWED: str
    """

    FORBIDDEN = "Forbidden"
    RESTRICTED = "Restricted"
    ALLOWED = "Allowed"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                GetLocationDeletionMultiResponseDeletion._member_map_.values(),
            )
        )


class Reassignment(Enum):
    """An enumeration representing different categories.

    :cvar FORBIDDEN: "Forbidden"
    :vartype FORBIDDEN: str
    :cvar ALLOWED: "Allowed"
    :vartype ALLOWED: str
    """

    FORBIDDEN = "Forbidden"
    ALLOWED = "Allowed"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, Reassignment._member_map_.values()))


@JsonMap({"emergency_locations": "emergencyLocations"})
class GetLocationDeletionMultiResponse(BaseModel):
    """GetLocationDeletionMultiResponse

    :param deletion: deletion, defaults to None
    :type deletion: GetLocationDeletionMultiResponseDeletion, optional
    :param reassignment: reassignment, defaults to None
    :type reassignment: Reassignment, optional
    :param emergency_locations: emergency_locations, defaults to None
    :type emergency_locations: List[LocationDeletionInfo], optional
    """

    def __init__(
        self,
        deletion: GetLocationDeletionMultiResponseDeletion = None,
        reassignment: Reassignment = None,
        emergency_locations: List[LocationDeletionInfo] = None,
    ):
        if deletion is not None:
            self.deletion = self._enum_matching(
                deletion, GetLocationDeletionMultiResponseDeletion.list(), "deletion"
            )
        if reassignment is not None:
            self.reassignment = self._enum_matching(
                reassignment, Reassignment.list(), "reassignment"
            )
        if emergency_locations is not None:
            self.emergency_locations = self._define_list(
                emergency_locations, LocationDeletionInfo
            )
