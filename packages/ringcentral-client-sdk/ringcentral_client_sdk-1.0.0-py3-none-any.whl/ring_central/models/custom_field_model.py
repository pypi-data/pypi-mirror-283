# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class CustomFieldModelCategory(Enum):
    """An enumeration representing different categories.

    :cvar USER: "User"
    :vartype USER: str
    """

    USER = "User"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, CustomFieldModelCategory._member_map_.values())
        )


@JsonMap({"id_": "id", "display_name": "displayName"})
class CustomFieldModel(BaseModel):
    """CustomFieldModel

    :param id_: Custom field identifier, defaults to None
    :type id_: str, optional
    :param category: Object category to attach custom fields, defaults to None
    :type category: CustomFieldModelCategory, optional
    :param display_name: Custom field display name, defaults to None
    :type display_name: str, optional
    """

    def __init__(
        self,
        id_: str = None,
        category: CustomFieldModelCategory = None,
        display_name: str = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if category is not None:
            self.category = self._enum_matching(
                category, CustomFieldModelCategory.list(), "category"
            )
        if display_name is not None:
            self.display_name = display_name
