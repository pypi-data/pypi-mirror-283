# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .email_recipient_info import EmailRecipientInfo
from .voicemails_info import VoicemailsInfo
from .inbound_faxes_info import InboundFaxesInfo
from .outbound_faxes_info import OutboundFaxesInfo
from .inbound_texts_info import InboundTextsInfo
from .missed_calls_info import MissedCallsInfo


@JsonMap(
    {
        "email_recipients": "emailRecipients",
        "email_addresses": "emailAddresses",
        "include_managers": "includeManagers",
        "sms_email_addresses": "smsEmailAddresses",
        "advanced_mode": "advancedMode",
        "inbound_faxes": "inboundFaxes",
        "outbound_faxes": "outboundFaxes",
        "inbound_texts": "inboundTexts",
        "missed_calls": "missedCalls",
    }
)
class NotificationSettings(BaseModel):
    """NotificationSettings

    :param uri: Canonical URI of notifications settings resource, defaults to None
    :type uri: str, optional
    :param email_recipients: List of extensions specified as email notification recipients.<br>Returned only for call queues where queue managers are assigned as user<br>extensions.<br>, defaults to None
    :type email_recipients: List[EmailRecipientInfo], optional
    :param email_addresses: List of notification recipient email addresses<br>, defaults to None
    :type email_addresses: List[str], optional
    :param include_managers: Specifies if managers' emails are included in the list of emails to which<br>notifications are sent<br>, defaults to None
    :type include_managers: bool, optional
    :param sms_email_addresses: List of notification recipient email addresses, defaults to None
    :type sms_email_addresses: List[str], optional
    :param advanced_mode: Specifies notifications settings mode. If `true` then advanced<br>mode is on, it allows using different emails and/or phone numbers for<br>each notification type. If `false` then basic mode is on. Advanced mode<br>settings are returned in both modes, if specified once, but if basic mode<br>is switched on, they are not applied<br>, defaults to None
    :type advanced_mode: bool, optional
    :param voicemails: voicemails, defaults to None
    :type voicemails: VoicemailsInfo, optional
    :param inbound_faxes: inbound_faxes, defaults to None
    :type inbound_faxes: InboundFaxesInfo, optional
    :param outbound_faxes: outbound_faxes, defaults to None
    :type outbound_faxes: OutboundFaxesInfo, optional
    :param inbound_texts: inbound_texts, defaults to None
    :type inbound_texts: InboundTextsInfo, optional
    :param missed_calls: missed_calls, defaults to None
    :type missed_calls: MissedCallsInfo, optional
    """

    def __init__(
        self,
        uri: str = None,
        email_recipients: List[EmailRecipientInfo] = None,
        email_addresses: List[str] = None,
        include_managers: bool = None,
        sms_email_addresses: List[str] = None,
        advanced_mode: bool = None,
        voicemails: VoicemailsInfo = None,
        inbound_faxes: InboundFaxesInfo = None,
        outbound_faxes: OutboundFaxesInfo = None,
        inbound_texts: InboundTextsInfo = None,
        missed_calls: MissedCallsInfo = None,
    ):
        if uri is not None:
            self.uri = uri
        if email_recipients is not None:
            self.email_recipients = self._define_list(
                email_recipients, EmailRecipientInfo
            )
        if email_addresses is not None:
            self.email_addresses = email_addresses
        if include_managers is not None:
            self.include_managers = include_managers
        if sms_email_addresses is not None:
            self.sms_email_addresses = sms_email_addresses
        if advanced_mode is not None:
            self.advanced_mode = advanced_mode
        if voicemails is not None:
            self.voicemails = self._define_object(voicemails, VoicemailsInfo)
        if inbound_faxes is not None:
            self.inbound_faxes = self._define_object(inbound_faxes, InboundFaxesInfo)
        if outbound_faxes is not None:
            self.outbound_faxes = self._define_object(outbound_faxes, OutboundFaxesInfo)
        if inbound_texts is not None:
            self.inbound_texts = self._define_object(inbound_texts, InboundTextsInfo)
        if missed_calls is not None:
            self.missed_calls = self._define_object(missed_calls, MissedCallsInfo)
