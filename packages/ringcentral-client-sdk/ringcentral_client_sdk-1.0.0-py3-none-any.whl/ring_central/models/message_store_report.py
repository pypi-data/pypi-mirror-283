# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .pic_message_type_enum import PicMessageTypeEnum


class MessageStoreReportStatus(Enum):
    """An enumeration representing different categories.

    :cvar ACCEPTED: "Accepted"
    :vartype ACCEPTED: str
    :cvar PENDING: "Pending"
    :vartype PENDING: str
    :cvar INPROGRESS: "InProgress"
    :vartype INPROGRESS: str
    :cvar ATTEMPTFAILED: "AttemptFailed"
    :vartype ATTEMPTFAILED: str
    :cvar FAILED: "Failed"
    :vartype FAILED: str
    :cvar COMPLETED: "Completed"
    :vartype COMPLETED: str
    :cvar CANCELLED: "Cancelled"
    :vartype CANCELLED: str
    """

    ACCEPTED = "Accepted"
    PENDING = "Pending"
    INPROGRESS = "InProgress"
    ATTEMPTFAILED = "AttemptFailed"
    FAILED = "Failed"
    COMPLETED = "Completed"
    CANCELLED = "Cancelled"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, MessageStoreReportStatus._member_map_.values())
        )


@JsonMap(
    {
        "id_": "id",
        "account_id": "accountId",
        "extension_id": "extensionId",
        "date_to": "dateTo",
        "date_from": "dateFrom",
        "start_time": "startTime",
        "finish_time": "finishTime",
        "message_types": "messageTypes",
    }
)
class MessageStoreReport(BaseModel):
    """MessageStoreReport

    :param id_: Internal identifier of a message store report task, defaults to None
    :type id_: str, optional
    :param uri: Canonical URI of a task, defaults to None
    :type uri: str, optional
    :param status: Status of a message store report task, defaults to None
    :type status: MessageStoreReportStatus, optional
    :param account_id: Internal identifier of an account, defaults to None
    :type account_id: str, optional
    :param extension_id: Internal identifier of an extension, defaults to None
    :type extension_id: str, optional
    :param date_to: The end of the time range to collect message records in ISO 8601 format including timezone, defaults to None
    :type date_to: str, optional
    :param date_from: The beginning of the time range to collect call log records in ISO 8601 format including timezone, defaults to None
    :type date_from: str, optional
    :param start_time: The time when this task was started, defaults to None
    :type start_time: str, optional
    :param finish_time: The time when this task was finished, defaults to None
    :type finish_time: str, optional
    :param message_types: Type of messages to be collected., defaults to None
    :type message_types: List[PicMessageTypeEnum], optional
    """

    def __init__(
        self,
        id_: str = None,
        uri: str = None,
        status: MessageStoreReportStatus = None,
        account_id: str = None,
        extension_id: str = None,
        date_to: str = None,
        date_from: str = None,
        start_time: str = None,
        finish_time: str = None,
        message_types: List[PicMessageTypeEnum] = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if uri is not None:
            self.uri = uri
        if status is not None:
            self.status = self._enum_matching(
                status, MessageStoreReportStatus.list(), "status"
            )
        if account_id is not None:
            self.account_id = account_id
        if extension_id is not None:
            self.extension_id = extension_id
        if date_to is not None:
            self.date_to = date_to
        if date_from is not None:
            self.date_from = date_from
        if start_time is not None:
            self.start_time = start_time
        if finish_time is not None:
            self.finish_time = finish_time
        if message_types is not None:
            self.message_types = self._define_list(message_types, PicMessageTypeEnum)
