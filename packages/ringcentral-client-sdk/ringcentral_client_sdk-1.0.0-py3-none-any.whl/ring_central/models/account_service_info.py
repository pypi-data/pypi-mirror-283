# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .brand_info import BrandInfo
from .country_info_short_model import CountryInfoShortModel
from .service_plan_info import ServicePlanInfo
from .target_service_plan_info import TargetServicePlanInfo
from .billing_plan_info import BillingPlanInfo
from .service_feature_info import ServiceFeatureInfo
from .account_limits import AccountLimits
from .package_info import PackageInfo
from .u_brand_info import UBrandInfo


@JsonMap(
    {
        "service_plan_name": "servicePlanName",
        "contracted_country": "contractedCountry",
        "service_plan": "servicePlan",
        "target_service_plan": "targetServicePlan",
        "billing_plan": "billingPlan",
        "service_features": "serviceFeatures",
        "u_brand": "uBrand",
    }
)
class AccountServiceInfo(BaseModel):
    """AccountServiceInfo

    :param uri: Canonical URI of the account Service Info resource, defaults to None
    :type uri: str, optional
    :param service_plan_name: Account Service Plan name, defaults to None
    :type service_plan_name: str, optional
    :param brand: Information on account brand, defaults to None
    :type brand: BrandInfo, optional
    :param contracted_country: contracted_country, defaults to None
    :type contracted_country: CountryInfoShortModel, optional
    :param service_plan: Information on account service plan, defaults to None
    :type service_plan: ServicePlanInfo, optional
    :param target_service_plan: Information on account target service plan, defaults to None
    :type target_service_plan: TargetServicePlanInfo, optional
    :param billing_plan: Information on account billing plan, defaults to None
    :type billing_plan: BillingPlanInfo, optional
    :param service_features: Service features information, see Service Feature List, defaults to None
    :type service_features: List[ServiceFeatureInfo], optional
    :param limits: Limits which are effective for the account, defaults to None
    :type limits: AccountLimits, optional
    :param package: package, defaults to None
    :type package: PackageInfo, optional
    :param u_brand: Account sub-brand information, defaults to None
    :type u_brand: UBrandInfo, optional
    """

    def __init__(
        self,
        uri: str = None,
        service_plan_name: str = None,
        brand: BrandInfo = None,
        contracted_country: CountryInfoShortModel = None,
        service_plan: ServicePlanInfo = None,
        target_service_plan: TargetServicePlanInfo = None,
        billing_plan: BillingPlanInfo = None,
        service_features: List[ServiceFeatureInfo] = None,
        limits: AccountLimits = None,
        package: PackageInfo = None,
        u_brand: UBrandInfo = None,
    ):
        if uri is not None:
            self.uri = uri
        if service_plan_name is not None:
            self.service_plan_name = service_plan_name
        if brand is not None:
            self.brand = self._define_object(brand, BrandInfo)
        if contracted_country is not None:
            self.contracted_country = self._define_object(
                contracted_country, CountryInfoShortModel
            )
        if service_plan is not None:
            self.service_plan = self._define_object(service_plan, ServicePlanInfo)
        if target_service_plan is not None:
            self.target_service_plan = self._define_object(
                target_service_plan, TargetServicePlanInfo
            )
        if billing_plan is not None:
            self.billing_plan = self._define_object(billing_plan, BillingPlanInfo)
        if service_features is not None:
            self.service_features = self._define_list(
                service_features, ServiceFeatureInfo
            )
        if limits is not None:
            self.limits = self._define_object(limits, AccountLimits)
        if package is not None:
            self.package = self._define_object(package, PackageInfo)
        if u_brand is not None:
            self.u_brand = self._define_object(u_brand, UBrandInfo)
