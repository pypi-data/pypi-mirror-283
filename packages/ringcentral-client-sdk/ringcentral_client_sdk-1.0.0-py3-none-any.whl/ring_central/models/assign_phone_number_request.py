# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel
from .phone_number_type import PhoneNumberType


class AssignPhoneNumberRequestUsageType(Enum):
    """An enumeration representing different categories.

    :cvar MAINCOMPANYNUMBER: "MainCompanyNumber"
    :vartype MAINCOMPANYNUMBER: str
    :cvar COMPANYNUMBER: "CompanyNumber"
    :vartype COMPANYNUMBER: str
    :cvar DIRECTNUMBER: "DirectNumber"
    :vartype DIRECTNUMBER: str
    :cvar PHONELINE: "PhoneLine"
    :vartype PHONELINE: str
    """

    MAINCOMPANYNUMBER = "MainCompanyNumber"
    COMPANYNUMBER = "CompanyNumber"
    DIRECTNUMBER = "DirectNumber"
    PHONELINE = "PhoneLine"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                AssignPhoneNumberRequestUsageType._member_map_.values(),
            )
        )


@JsonMap({"id_": "id"})
class AssignPhoneNumberRequestExtension(BaseModel):
    """AssignPhoneNumberRequestExtension

    :param id_: Internal identifier of an extension
    :type id_: str
    """

    def __init__(self, id_: str):
        self.id_ = id_


@JsonMap({"type_": "type", "usage_type": "usageType", "cost_center_id": "costCenterId"})
class AssignPhoneNumberRequest(BaseModel):
    """AssignPhoneNumberRequest

    :param type_: Type of phone number, defaults to None
    :type type_: PhoneNumberType, optional
    :param usage_type: Target usage type of phone number (only listed values are supported)
    :type usage_type: AssignPhoneNumberRequestUsageType
    :param extension: extension, defaults to None
    :type extension: AssignPhoneNumberRequestExtension, optional
    :param cost_center_id: cost_center_id, defaults to None
    :type cost_center_id: str, optional
    """

    def __init__(
        self,
        usage_type: AssignPhoneNumberRequestUsageType,
        type_: PhoneNumberType = None,
        extension: AssignPhoneNumberRequestExtension = None,
        cost_center_id: str = None,
    ):
        if type_ is not None:
            self.type_ = self._enum_matching(type_, PhoneNumberType.list(), "type_")
        self.usage_type = self._enum_matching(
            usage_type, AssignPhoneNumberRequestUsageType.list(), "usage_type"
        )
        if extension is not None:
            self.extension = self._define_object(
                extension, AssignPhoneNumberRequestExtension
            )
        if cost_center_id is not None:
            self.cost_center_id = cost_center_id
