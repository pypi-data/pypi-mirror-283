# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel


@JsonMap(
    {
        "id_": "id",
        "bulk_item_successful": "bulkItemSuccessful",
        "bulk_item_errors": "bulkItemErrors",
    }
)
class BulkDeleteUsersResponseRecords(BaseModel):
    """BulkDeleteUsersResponseRecords

    :param id_: Internal identifier of an extension, defaults to None
    :type id_: str, optional
    :param bulk_item_successful: Indicates if this item was processed successfully during bulk operation.<br>If false, `bulkItemErrors` attribute contains the list of errors<br>
    :type bulk_item_successful: bool
    :param bulk_item_errors: The list of errors occurred during processing of particular item of bulk operation.<br>Returned only if `bulkItemSuccessful` is false<br>, defaults to None
    :type bulk_item_errors: List[dict], optional
    """

    def __init__(
        self,
        bulk_item_successful: bool,
        id_: str = None,
        bulk_item_errors: List[dict] = None,
    ):
        if id_ is not None:
            self.id_ = id_
        self.bulk_item_successful = bulk_item_successful
        if bulk_item_errors is not None:
            self.bulk_item_errors = bulk_item_errors


@JsonMap({})
class BulkDeleteUsersResponse(BaseModel):
    """BulkDeleteUsersResponse

    :param records: records
    :type records: List[BulkDeleteUsersResponseRecords]
    """

    def __init__(self, records: List[BulkDeleteUsersResponseRecords]):
        self.records = self._define_list(records, BulkDeleteUsersResponseRecords)
