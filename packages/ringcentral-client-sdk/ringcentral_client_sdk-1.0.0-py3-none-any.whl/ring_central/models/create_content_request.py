# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import Union
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .base import OneOfBaseModel
from .content_components import ContentComponents


class ToGuard(OneOfBaseModel):
    class_list = {"List[str]": List[str], "List[str]": List[str]}


To = Union[List[str], List[str]]


@JsonMap(
    {
        "author_identity_id": "authorIdentityId",
        "in_reply_to_content_id": "inReplyToContentId",
        "source_id": "sourceId",
        "attachment_ids": "attachmentIds",
        "template_name": "templateName",
        "template_language": "templateLanguage",
        "context_data": "contextData",
        "auto_submitted": "autoSubmitted",
    }
)
class CreateContentRequest(BaseModel):
    """CreateContentRequest

    :param author_identity_id: Identity identifier of the author of content.<br><br>Not mandatory on creation, by default it uses the token's user first identity on channel.<br>, defaults to None
    :type author_identity_id: str, optional
    :param body: The content's body.<br><br>On creation this field is mandatory except for WhatsApp content using templates.<br><br>The following are the max length restrictions for the different channels supported.<br>Channel and max length<br>  * Apple Messages For Business (max length 10000)<br>  * Email (max length 262144)<br>  * RingCX Digital Messaging (max length 1024)<br>  * Facebook (max length 8000)<br>  * GoogleBusinessMessages (max length 3000)<br>  * Google My Business (max length 4000)<br>  * Instagram (max length 950)<br>  * Instagram Messaging (max length 1000)<br>  * LinkedIn (max length 3000)<br>  * Messenger (max length 2000)<br>  * Twitter (max length 280)<br>  * Viber (max length 7000)<br>  * WhatsApp (max length 3800)<br>  * Youtube (max length 8000)<br>, defaults to None
    :type body: str, optional
    :param in_reply_to_content_id: The content identifier to which this content is a reply to.<br><br>On creation, if omitted, a new discussion will be created. If the channel does not support to initiate discussion this parameter is mandatory.<br>, defaults to None
    :type in_reply_to_content_id: str, optional
    :param public: True if the content is publicly visible on the remote channel (default).<br><br>Private content is NOT supported on every channel.<br>, defaults to None
    :type public: bool, optional
    :param source_id: Identifier of the channel.<br><br>On creation if `inReplyToContentId` is specified, the channel will be determined from it. Otherwise, this parameter is mandatory.<br>, defaults to None
    :type source_id: str, optional
    :param attachment_ids: An array containing the attachment identifiers that need to be attached to the content.<br>, defaults to None
    :type attachment_ids: List[str], optional
    :param title: Applicable to Email channels only.<br><br>The subject of the email.<br><br>This field is mandatory when initiating a discussion.<br>, defaults to None
    :type title: str, optional
    :param to: to, defaults to None
    :type to: To, optional
    :param cc: Applicable on Email channels only.<br><br>An array containing the email addresses used in sections of the email.<br><br>This parameter is mandatory when initiating a discussion.<br>, defaults to None
    :type cc: List[str], optional
    :param bcc: Applicable on Email channels only.<br><br>An array containing the email addresses used in sections of the email.<br><br>This parameter is mandatory when initiating a discussion.<br>, defaults to None
    :type bcc: List[str], optional
    :param template_name: Applicable to WhatsApp channels only.<br><br>Name of the Whatsapp template to use for the content.<br><br>All available template names are visible on the Whatsapp Business Manager interface.<br>, defaults to None
    :type template_name: str, optional
    :param template_language: Applicable to WhatsApp channels only.<br><br>Language of the Whatsapp template to use for the content. All available template languages are visible on the Whatsapp Business Manager interface.<br><br>Language specified must conform to the ISO 639-1 alpha-2 codes for representing the names of languages.<br>, defaults to None
    :type template_language: str, optional
    :param components: Applicable to WhatsApp channels only.<br><br>Component configuration of the Whatsapp template to use for the content.<br><br>All available components are visible on the Whatsapp Business Manager interface.<br>, defaults to None
    :type components: List[ContentComponents], optional
    :param context_data: Additional data of the content.<br><br>The contextData hash keys are the custom fields keys.<br>, defaults to None
    :type context_data: dict, optional
    :param auto_submitted: Auto submitted content:<br>  - won't reopen tasks or interventions<br>  - can be used to send automatic messages like asking an user to follow on twitter, sending a survey, etc,<br>  - doesn't get included in statistics<br>, defaults to None
    :type auto_submitted: bool, optional
    """

    def __init__(
        self,
        author_identity_id: str = None,
        body: str = None,
        in_reply_to_content_id: str = None,
        public: bool = None,
        source_id: str = None,
        attachment_ids: List[str] = None,
        title: str = None,
        to: To = None,
        cc: List[str] = None,
        bcc: List[str] = None,
        template_name: str = None,
        template_language: str = None,
        components: List[ContentComponents] = None,
        context_data: dict = None,
        auto_submitted: bool = None,
    ):
        if author_identity_id is not None:
            self.author_identity_id = author_identity_id
        if body is not None:
            self.body = body
        if in_reply_to_content_id is not None:
            self.in_reply_to_content_id = in_reply_to_content_id
        if public is not None:
            self.public = public
        if source_id is not None:
            self.source_id = source_id
        if attachment_ids is not None:
            self.attachment_ids = attachment_ids
        if title is not None:
            self.title = title
        if to is not None:
            self.to = ToGuard.return_one_of(to)
        if cc is not None:
            self.cc = cc
        if bcc is not None:
            self.bcc = bcc
        if template_name is not None:
            self.template_name = template_name
        if template_language is not None:
            self.template_language = template_language
        if components is not None:
            self.components = self._define_list(components, ContentComponents)
        if context_data is not None:
            self.context_data = context_data
        if auto_submitted is not None:
            self.auto_submitted = auto_submitted
