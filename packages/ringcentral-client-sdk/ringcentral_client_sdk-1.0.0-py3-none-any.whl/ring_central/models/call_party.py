# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .call_status_info import CallStatusInfo
from .park_info import ParkInfo
from .party_info import PartyInfo
from .owner_info import OwnerInfo
from .recording_info import RecordingInfo


class CallPartyDirection(Enum):
    """An enumeration representing different categories.

    :cvar INBOUND: "Inbound"
    :vartype INBOUND: str
    :cvar OUTBOUND: "Outbound"
    :vartype OUTBOUND: str
    """

    INBOUND = "Inbound"
    OUTBOUND = "Outbound"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, CallPartyDirection._member_map_.values()))


class CallPartyConferenceRole(Enum):
    """An enumeration representing different categories.

    :cvar HOST: "Host"
    :vartype HOST: str
    :cvar PARTICIPANT: "Participant"
    :vartype PARTICIPANT: str
    """

    HOST = "Host"
    PARTICIPANT = "Participant"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, CallPartyConferenceRole._member_map_.values())
        )


class CallPartyRingOutRole(Enum):
    """An enumeration representing different categories.

    :cvar INITIATOR: "Initiator"
    :vartype INITIATOR: str
    :cvar TARGET: "Target"
    :vartype TARGET: str
    """

    INITIATOR = "Initiator"
    TARGET = "Target"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, CallPartyRingOutRole._member_map_.values()))


class CallPartyRingMeRole(Enum):
    """An enumeration representing different categories.

    :cvar INITIATOR: "Initiator"
    :vartype INITIATOR: str
    :cvar TARGET: "Target"
    :vartype TARGET: str
    """

    INITIATOR = "Initiator"
    TARGET = "Target"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, CallPartyRingMeRole._member_map_.values()))


@JsonMap(
    {
        "id_": "id",
        "stand_alone": "standAlone",
        "from_": "from",
        "conference_role": "conferenceRole",
        "ring_out_role": "ringOutRole",
        "ring_me_role": "ringMeRole",
    }
)
class CallParty(BaseModel):
    """Information on a party of a call session

    :param id_: Internal identifier of a party, defaults to None
    :type id_: str, optional
    :param status: Status data of a call session, defaults to None
    :type status: CallStatusInfo, optional
    :param muted: Specifies if a call participant is muted or not. **Note:**<br>If a call is also controlled via Hard phone or RingCentral App (not only<br>through the API by calling call control methods) then it cannot be fully<br>muted/unmuted via API only, in this case the action should be duplicated<br>via Hard phone/RC App interfaces<br>, defaults to None
    :type muted: bool, optional
    :param stand_alone: If `true` then the party is not connected to a session voice<br>conference, `false` means the party is connected to other parties in a<br>session<br>, defaults to None
    :type stand_alone: bool, optional
    :param park: Call park information, defaults to None
    :type park: ParkInfo, optional
    :param from_: from_, defaults to None
    :type from_: PartyInfo, optional
    :param to: to, defaults to None
    :type to: PartyInfo, optional
    :param owner: Deprecated. Information on a call owner, defaults to None
    :type owner: OwnerInfo, optional
    :param direction: Direction of a call, defaults to None
    :type direction: CallPartyDirection, optional
    :param conference_role: A party's role in the conference scenarios. For calls of 'Conference' type only, defaults to None
    :type conference_role: CallPartyConferenceRole, optional
    :param ring_out_role: A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringout' type only, defaults to None
    :type ring_out_role: CallPartyRingOutRole, optional
    :param ring_me_role: A party's role in 'Ring Me'/'RingOut' scenarios. For calls of 'Ringme' type only, defaults to None
    :type ring_me_role: CallPartyRingMeRole, optional
    :param recordings: Active recordings list, defaults to None
    :type recordings: List[RecordingInfo], optional
    """

    def __init__(
        self,
        id_: str = None,
        status: CallStatusInfo = None,
        muted: bool = None,
        stand_alone: bool = None,
        park: ParkInfo = None,
        from_: PartyInfo = None,
        to: PartyInfo = None,
        owner: OwnerInfo = None,
        direction: CallPartyDirection = None,
        conference_role: CallPartyConferenceRole = None,
        ring_out_role: CallPartyRingOutRole = None,
        ring_me_role: CallPartyRingMeRole = None,
        recordings: List[RecordingInfo] = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if status is not None:
            self.status = self._define_object(status, CallStatusInfo)
        if muted is not None:
            self.muted = muted
        if stand_alone is not None:
            self.stand_alone = stand_alone
        if park is not None:
            self.park = self._define_object(park, ParkInfo)
        if from_ is not None:
            self.from_ = self._define_object(from_, PartyInfo)
        if to is not None:
            self.to = self._define_object(to, PartyInfo)
        if owner is not None:
            self.owner = self._define_object(owner, OwnerInfo)
        if direction is not None:
            self.direction = self._enum_matching(
                direction, CallPartyDirection.list(), "direction"
            )
        if conference_role is not None:
            self.conference_role = self._enum_matching(
                conference_role, CallPartyConferenceRole.list(), "conference_role"
            )
        if ring_out_role is not None:
            self.ring_out_role = self._enum_matching(
                ring_out_role, CallPartyRingOutRole.list(), "ring_out_role"
            )
        if ring_me_role is not None:
            self.ring_me_role = self._enum_matching(
                ring_me_role, CallPartyRingMeRole.list(), "ring_me_role"
            )
        if recordings is not None:
            self.recordings = self._define_list(recordings, RecordingInfo)
