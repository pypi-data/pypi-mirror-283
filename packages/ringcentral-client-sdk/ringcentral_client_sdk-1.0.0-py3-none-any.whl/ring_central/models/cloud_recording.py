# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .host import Host


@JsonMap(
    {
        "id_": "id",
        "short_id": "shortId",
        "start_time": "startTime",
        "display_name": "displayName",
        "host_info": "hostInfo",
        "media_link": "mediaLink",
        "expires_in": "expiresIn",
    }
)
class CloudRecording(BaseModel):
    """Recording information

    :param id_: Call id
    :type id_: str
    :param short_id: Short bridge id
    :type short_id: str
    :param start_time: Start time ISO 8601
    :type start_time: str
    :param duration: Meeting duration in seconds, defaults to None
    :type duration: int, optional
    :param display_name: Meeting name
    :type display_name: str
    :param host_info: Meeting host
    :type host_info: Host
    :param media_link: Link to the recording file. Not used anymore by Web team
    :type media_link: str
    :param url: Encrypted link to the recording file
    :type url: str
    :param expires_in: Date after which recording will be deleted, defaults to None
    :type expires_in: str, optional
    """

    def __init__(
        self,
        id_: str,
        short_id: str,
        start_time: str,
        display_name: str,
        host_info: Host,
        media_link: str,
        url: str,
        duration: int = None,
        expires_in: str = None,
    ):
        self.id_ = id_
        self.short_id = short_id
        self.start_time = start_time
        if duration is not None:
            self.duration = duration
        self.display_name = display_name
        self.host_info = self._define_object(host_info, Host)
        self.media_link = media_link
        self.url = url
        if expires_in is not None:
            self.expires_in = expires_in
