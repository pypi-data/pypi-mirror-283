# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel
from .account_status_info import AccountStatusInfo
from .postal_address import PostalAddress
from .service_info_v2 import ServiceInfoV2
from .system_user_contact_info import SystemUserContactInfo


class AccountInfoStatus(Enum):
    """An enumeration representing different categories.

    :cvar INITIAL: "Initial"
    :vartype INITIAL: str
    :cvar UNCONFIRMED: "Unconfirmed"
    :vartype UNCONFIRMED: str
    :cvar CONFIRMED: "Confirmed"
    :vartype CONFIRMED: str
    :cvar DISABLED: "Disabled"
    :vartype DISABLED: str
    """

    INITIAL = "Initial"
    UNCONFIRMED = "Unconfirmed"
    CONFIRMED = "Confirmed"
    DISABLED = "Disabled"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, AccountInfoStatus._member_map_.values()))


@JsonMap(
    {
        "id_": "id",
        "external_account_id": "externalAccountId",
        "main_number": "mainNumber",
        "status_info": "statusInfo",
        "company_name": "companyName",
        "company_address": "companyAddress",
        "service_info": "serviceInfo",
        "contact_info": "contactInfo",
        "opportunity_id": "opportunityId",
    }
)
class AccountInfo(BaseModel):
    """AccountInfo

    :param id_: Internal identifier of RingCentral account
    :type id_: str
    :param external_account_id: External account ID. Used as a primary key to link accounts between<br>RingCentral and partner systems.<br>, defaults to None
    :type external_account_id: str, optional
    :param main_number: Phone number in e.164 format (with '+' prefix), defaults to None
    :type main_number: str, optional
    :param status: Account status
    :type status: AccountInfoStatus
    :param status_info: Optional information to be used when account is moved to "Disabled" status, defaults to None
    :type status_info: AccountStatusInfo, optional
    :param company_name: Company name, defaults to None
    :type company_name: str, optional
    :param company_address: Postal address/location, defaults to None
    :type company_address: PostalAddress, optional
    :param service_info: Service Plan information (billing package, brand, etc.)
    :type service_info: ServiceInfoV2
    :param contact_info: contact_info, defaults to None
    :type contact_info: SystemUserContactInfo, optional
    :param opportunity_id: Opportunity identifier (typically created by SalesForce), defaults to None
    :type opportunity_id: str, optional
    """

    def __init__(
        self,
        id_: str,
        status: AccountInfoStatus,
        service_info: ServiceInfoV2,
        external_account_id: str = None,
        main_number: str = None,
        status_info: AccountStatusInfo = None,
        company_name: str = None,
        company_address: PostalAddress = None,
        contact_info: SystemUserContactInfo = None,
        opportunity_id: str = None,
    ):
        self.id_ = id_
        if external_account_id is not None:
            self.external_account_id = external_account_id
        if main_number is not None:
            self.main_number = self._pattern_matching(
                main_number, "^\+[1-9]\d{1,14}$", "main_number"
            )
        self.status = self._enum_matching(status, AccountInfoStatus.list(), "status")
        if status_info is not None:
            self.status_info = self._define_object(status_info, AccountStatusInfo)
        if company_name is not None:
            self.company_name = company_name
        if company_address is not None:
            self.company_address = self._define_object(company_address, PostalAddress)
        self.service_info = self._define_object(service_info, ServiceInfoV2)
        if contact_info is not None:
            self.contact_info = self._define_object(contact_info, SystemUserContactInfo)
        if opportunity_id is not None:
            self.opportunity_id = opportunity_id
