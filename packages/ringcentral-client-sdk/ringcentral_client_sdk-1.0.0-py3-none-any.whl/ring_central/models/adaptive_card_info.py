# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import Union
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .base import OneOfBaseModel
from .adaptive_card_creator import AdaptiveCardCreator
from .adaptive_card_info_request import AdaptiveCardInfoRequest
from .adaptive_card_action import AdaptiveCardAction
from .adaptive_card_select_action import AdaptiveCardSelectAction
from .vertical_content_alignment import (
    VerticalContentAlignment,
    VerticalContentAlignmentGuard,
)
from .background_image import BackgroundImage


class AdaptiveCardInfoType(Enum):
    """An enumeration representing different categories.

    :cvar ADAPTIVECARD: "AdaptiveCard"
    :vartype ADAPTIVECARD: str
    """

    ADAPTIVECARD = "AdaptiveCard"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, AdaptiveCardInfoType._member_map_.values()))


class AdaptiveCardInfoBackgroundImageGuard(OneOfBaseModel):
    class_list = {"BackgroundImage": BackgroundImage, "str": str}


AdaptiveCardInfoBackgroundImage = Union[BackgroundImage, str]


class AdaptiveCardInfoLang(Enum):
    """An enumeration representing different categories.

    :cvar EN: "en"
    :vartype EN: str
    :cvar FR: "fr"
    :vartype FR: str
    :cvar ES: "es"
    :vartype ES: str
    """

    EN = "en"
    FR = "fr"
    ES = "es"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, AdaptiveCardInfoLang._member_map_.values()))


@JsonMap(
    {
        "id_": "id",
        "creation_time": "creationTime",
        "last_modified_time": "lastModifiedTime",
        "schema": "$schema",
        "type_": "type",
        "chat_ids": "chatIds",
        "select_action": "selectAction",
        "fallback_text": "fallbackText",
        "background_image": "backgroundImage",
        "min_height": "minHeight",
        "vertical_content_alignment": "verticalContentAlignment",
    }
)
class AdaptiveCardInfo(BaseModel):
    """AdaptiveCardInfo

    :param id_: Internal identifier of an adaptive card, defaults to None
    :type id_: str, optional
    :param creation_time: Adaptive Card creation datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, defaults to None
    :type creation_time: str, optional
    :param last_modified_time: Post last modification datetime in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, defaults to None
    :type last_modified_time: str, optional
    :param schema: Schema of an adaptive card, defaults to None
    :type schema: str, optional
    :param type_: type_, defaults to None
    :type type_: AdaptiveCardInfoType, optional
    :param version: Version of an adaptive card, defaults to None
    :type version: str, optional
    :param creator: creator, defaults to None
    :type creator: AdaptiveCardCreator, optional
    :param chat_ids: Chat IDs where an adaptive card is posted or shared., defaults to None
    :type chat_ids: List[str], optional
    :param body: List of card elements to show in the primary card region, defaults to None
    :type body: List[AdaptiveCardInfoRequest], optional
    :param actions: actions, defaults to None
    :type actions: List[AdaptiveCardAction], optional
    :param select_action: An action that will be invoked when the card is tapped or selected. `Action.ShowCard` is not supported, defaults to None
    :type select_action: AdaptiveCardSelectAction, optional
    :param fallback_text: Text shown when the client doesn't support the version specified (may contain markdown), defaults to None
    :type fallback_text: str, optional
    :param background_image: Specifies the background image of a card, defaults to None
    :type background_image: AdaptiveCardInfoBackgroundImage, optional
    :param min_height: Specifies the minimum height of the card in pixels, defaults to None
    :type min_height: str, optional
    :param speak: Specifies what should be spoken for this entire card. This is simple text or SSML fragment, defaults to None
    :type speak: str, optional
    :param lang: The 2-letter ISO-639-1 language used in the card. Used to localize any date/time functions, defaults to None
    :type lang: AdaptiveCardInfoLang, optional
    :param vertical_content_alignment: Defines how the content should be aligned vertically within the container. Only relevant for fixed-height cards, or cards with a `minHeight` specified, defaults to None
    :type vertical_content_alignment: VerticalContentAlignment, optional
    """

    def __init__(
        self,
        id_: str = None,
        creation_time: str = None,
        last_modified_time: str = None,
        schema: str = None,
        type_: AdaptiveCardInfoType = None,
        version: str = None,
        creator: AdaptiveCardCreator = None,
        chat_ids: List[str] = None,
        body: List[AdaptiveCardInfoRequest] = None,
        actions: List[AdaptiveCardAction] = None,
        select_action: AdaptiveCardSelectAction = None,
        fallback_text: str = None,
        background_image: AdaptiveCardInfoBackgroundImage = None,
        min_height: str = None,
        speak: str = None,
        lang: AdaptiveCardInfoLang = None,
        vertical_content_alignment: VerticalContentAlignment = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if creation_time is not None:
            self.creation_time = creation_time
        if last_modified_time is not None:
            self.last_modified_time = last_modified_time
        if schema is not None:
            self.schema = schema
        if type_ is not None:
            self.type_ = self._enum_matching(
                type_, AdaptiveCardInfoType.list(), "type_"
            )
        if version is not None:
            self.version = version
        if creator is not None:
            self.creator = self._define_object(creator, AdaptiveCardCreator)
        if chat_ids is not None:
            self.chat_ids = chat_ids
        if body is not None:
            self.body = self._define_list(body, AdaptiveCardInfoRequest)
        if actions is not None:
            self.actions = self._define_list(actions, AdaptiveCardAction)
        if select_action is not None:
            self.select_action = self._define_object(
                select_action, AdaptiveCardSelectAction
            )
        if fallback_text is not None:
            self.fallback_text = fallback_text
        if background_image is not None:
            self.background_image = AdaptiveCardInfoBackgroundImageGuard.return_one_of(
                background_image
            )
        if min_height is not None:
            self.min_height = min_height
        if speak is not None:
            self.speak = speak
        if lang is not None:
            self.lang = self._enum_matching(lang, AdaptiveCardInfoLang.list(), "lang")
        if vertical_content_alignment is not None:
            self.vertical_content_alignment = (
                VerticalContentAlignmentGuard.return_one_of(vertical_content_alignment)
            )
