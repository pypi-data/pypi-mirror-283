# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class ActionCardBodyType(Enum):
    """An enumeration representing different categories.

    :cvar INPUT_TEXT: "Input.Text"
    :vartype INPUT_TEXT: str
    """

    INPUT_TEXT = "Input.Text"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, ActionCardBodyType._member_map_.values()))


@JsonMap({"type_": "type", "id_": "id", "is_multiline": "isMultiline"})
class ActionCardBody(BaseModel):
    """ActionCardBody

    :param type_: type_, defaults to None
    :type type_: ActionCardBodyType, optional
    :param id_: id_, defaults to None
    :type id_: str, optional
    :param is_multiline: If set to `true`, allows multiple lines of input, defaults to None
    :type is_multiline: bool, optional
    :param placeholder: Description of the input desired. Displayed when no text has been input, defaults to None
    :type placeholder: str, optional
    """

    def __init__(
        self,
        type_: ActionCardBodyType = None,
        id_: str = None,
        is_multiline: bool = None,
        placeholder: str = None,
    ):
        if type_ is not None:
            self.type_ = self._enum_matching(type_, ActionCardBodyType.list(), "type_")
        if id_ is not None:
            self.id_ = id_
        if is_multiline is not None:
            self.is_multiline = is_multiline
        if placeholder is not None:
            self.placeholder = placeholder
