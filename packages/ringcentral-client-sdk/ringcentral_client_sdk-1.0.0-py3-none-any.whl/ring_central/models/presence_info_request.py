# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class PresenceInfoRequestUserStatus(Enum):
    """An enumeration representing different categories.

    :cvar OFFLINE: "Offline"
    :vartype OFFLINE: str
    :cvar BUSY: "Busy"
    :vartype BUSY: str
    :cvar AVAILABLE: "Available"
    :vartype AVAILABLE: str
    """

    OFFLINE = "Offline"
    BUSY = "Busy"
    AVAILABLE = "Available"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, PresenceInfoRequestUserStatus._member_map_.values())
        )


class PresenceInfoRequestDndStatus(Enum):
    """An enumeration representing different categories.

    :cvar TAKEALLCALLS: "TakeAllCalls"
    :vartype TAKEALLCALLS: str
    :cvar DONOTACCEPTDEPARTMENTCALLS: "DoNotAcceptDepartmentCalls"
    :vartype DONOTACCEPTDEPARTMENTCALLS: str
    :cvar TAKEDEPARTMENTCALLSONLY: "TakeDepartmentCallsOnly"
    :vartype TAKEDEPARTMENTCALLSONLY: str
    :cvar DONOTACCEPTANYCALLS: "DoNotAcceptAnyCalls"
    :vartype DONOTACCEPTANYCALLS: str
    :cvar UNKNOWN: "Unknown"
    :vartype UNKNOWN: str
    """

    TAKEALLCALLS = "TakeAllCalls"
    DONOTACCEPTDEPARTMENTCALLS = "DoNotAcceptDepartmentCalls"
    TAKEDEPARTMENTCALLSONLY = "TakeDepartmentCallsOnly"
    DONOTACCEPTANYCALLS = "DoNotAcceptAnyCalls"
    UNKNOWN = "Unknown"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, PresenceInfoRequestDndStatus._member_map_.values())
        )


class PresenceInfoRequestCallerIdVisibility(Enum):
    """An enumeration representing different categories.

    :cvar ALL: "All"
    :vartype ALL: str
    :cvar NONE: "None"
    :vartype NONE: str
    :cvar PERMITTEDUSERS: "PermittedUsers"
    :vartype PERMITTEDUSERS: str
    """

    ALL = "All"
    NONE = "None"
    PERMITTEDUSERS = "PermittedUsers"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                PresenceInfoRequestCallerIdVisibility._member_map_.values(),
            )
        )


@JsonMap(
    {
        "user_status": "userStatus",
        "dnd_status": "dndStatus",
        "allow_see_my_presence": "allowSeeMyPresence",
        "ring_on_monitored_call": "ringOnMonitoredCall",
        "pick_up_calls_on_hold": "pickUpCallsOnHold",
        "caller_id_visibility": "callerIdVisibility",
    }
)
class PresenceInfoRequest(BaseModel):
    """PresenceInfoRequest

    :param user_status: user_status, defaults to None
    :type user_status: PresenceInfoRequestUserStatus, optional
    :param dnd_status: dnd_status, defaults to None
    :type dnd_status: PresenceInfoRequestDndStatus, optional
    :param message: message, defaults to None
    :type message: str, optional
    :param allow_see_my_presence: allow_see_my_presence, defaults to None
    :type allow_see_my_presence: bool, optional
    :param ring_on_monitored_call: ring_on_monitored_call, defaults to None
    :type ring_on_monitored_call: bool, optional
    :param pick_up_calls_on_hold: pick_up_calls_on_hold, defaults to None
    :type pick_up_calls_on_hold: bool, optional
    :param caller_id_visibility: Configures the user presence visibility. When the `allowSeeMyPresence` parameter is set to `true`, <br>the following visibility options are supported via this parameter - All, None, PermittedUsers<br>, defaults to None
    :type caller_id_visibility: PresenceInfoRequestCallerIdVisibility, optional
    """

    def __init__(
        self,
        user_status: PresenceInfoRequestUserStatus = None,
        dnd_status: PresenceInfoRequestDndStatus = None,
        message: str = None,
        allow_see_my_presence: bool = None,
        ring_on_monitored_call: bool = None,
        pick_up_calls_on_hold: bool = None,
        caller_id_visibility: PresenceInfoRequestCallerIdVisibility = None,
    ):
        if user_status is not None:
            self.user_status = self._enum_matching(
                user_status, PresenceInfoRequestUserStatus.list(), "user_status"
            )
        if dnd_status is not None:
            self.dnd_status = self._enum_matching(
                dnd_status, PresenceInfoRequestDndStatus.list(), "dnd_status"
            )
        if message is not None:
            self.message = message
        if allow_see_my_presence is not None:
            self.allow_see_my_presence = allow_see_my_presence
        if ring_on_monitored_call is not None:
            self.ring_on_monitored_call = ring_on_monitored_call
        if pick_up_calls_on_hold is not None:
            self.pick_up_calls_on_hold = pick_up_calls_on_hold
        if caller_id_visibility is not None:
            self.caller_id_visibility = self._enum_matching(
                caller_id_visibility,
                PresenceInfoRequestCallerIdVisibility.list(),
                "caller_id_visibility",
            )
