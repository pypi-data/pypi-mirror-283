# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .search_directory_contact_type import SearchDirectoryContactType
from .search_directory_extension_type import SearchDirectoryExtensionType
from .order_by import OrderBy


class SearchFields(Enum):
    """An enumeration representing different categories.

    :cvar FIRSTNAME: "firstName"
    :vartype FIRSTNAME: str
    :cvar LASTNAME: "lastName"
    :vartype LASTNAME: str
    :cvar EXTENSIONNUMBER: "extensionNumber"
    :vartype EXTENSIONNUMBER: str
    :cvar PHONENUMBER: "phoneNumber"
    :vartype PHONENUMBER: str
    :cvar EMAIL: "email"
    :vartype EMAIL: str
    :cvar JOBTITLE: "jobTitle"
    :vartype JOBTITLE: str
    :cvar DEPARTMENT: "department"
    :vartype DEPARTMENT: str
    :cvar CUSTOMFIELDVALUE: "customFieldValue"
    :vartype CUSTOMFIELDVALUE: str
    """

    FIRSTNAME = "firstName"
    LASTNAME = "lastName"
    EXTENSIONNUMBER = "extensionNumber"
    PHONENUMBER = "phoneNumber"
    EMAIL = "email"
    JOBTITLE = "jobTitle"
    DEPARTMENT = "department"
    CUSTOMFIELDVALUE = "customFieldValue"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, SearchFields._member_map_.values()))


class ExtensionStatuses(Enum):
    """An enumeration representing different categories.

    :cvar ENABLED: "Enabled"
    :vartype ENABLED: str
    :cvar DISABLED: "Disabled"
    :vartype DISABLED: str
    :cvar NOTACTIVATED: "NotActivated"
    :vartype NOTACTIVATED: str
    """

    ENABLED = "Enabled"
    DISABLED = "Disabled"
    NOTACTIVATED = "NotActivated"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, ExtensionStatuses._member_map_.values()))


@JsonMap(
    {
        "search_string": "searchString",
        "search_fields": "searchFields",
        "show_federated": "showFederated",
        "show_admin_only_contacts": "showAdminOnlyContacts",
        "extension_type": "extensionType",
        "site_id": "siteId",
        "show_external_contacts": "showExternalContacts",
        "account_ids": "accountIds",
        "site_ids": "siteIds",
        "extension_statuses": "extensionStatuses",
        "extension_types": "extensionTypes",
        "order_by": "orderBy",
        "per_page": "perPage",
    }
)
class SearchDirectoryEntriesRequest(BaseModel):
    """SearchDirectoryEntriesRequest

    :param search_string: String value to filter the contacts. The value specified is<br>searched through the following fields: `firstName`, `lastName`, `extensionNumber`, `phoneNumber`, `email`,<br>`jobTitle`, `department`, `customFieldValue`<br>, defaults to None
    :type search_string: str, optional
    :param search_fields: The list of field to be searched for, defaults to None
    :type search_fields: List[SearchFields], optional
    :param show_federated: If `true` then contacts of all accounts in federation are returned, if it is in federation, account section will be returned. If `false` then only contacts of the current account are returned, and account section is eliminated in this case, defaults to None
    :type show_federated: bool, optional
    :param show_admin_only_contacts: Should show AdminOnly Contacts, defaults to None
    :type show_admin_only_contacts: bool, optional
    :param extension_type: Type of directory contact to filter, defaults to None
    :type extension_type: SearchDirectoryContactType, optional
    :param site_id: Internal identifier of the business site to which extensions belong, defaults to None
    :type site_id: str, optional
    :param show_external_contacts: Allows to control whether External (Hybrid) contacts should be returned in the response or not, defaults to None
    :type show_external_contacts: bool, optional
    :param account_ids: The list of Internal identifiers of an accounts, defaults to None
    :type account_ids: List[str], optional
    :param department: Department, defaults to None
    :type department: str, optional
    :param site_ids: The list of Internal identifiers of the business sites to which extensions belong, defaults to None
    :type site_ids: List[str], optional
    :param extension_statuses: Extension current state., defaults to None
    :type extension_statuses: List[ExtensionStatuses], optional
    :param extension_types: Types of extension to filter the contacts, defaults to None
    :type extension_types: List[SearchDirectoryExtensionType], optional
    :param order_by: Sorting settings, defaults to None
    :type order_by: List[OrderBy], optional
    :param page: page, defaults to None
    :type page: int, optional
    :param per_page: per_page, defaults to None
    :type per_page: int, optional
    """

    def __init__(
        self,
        search_string: str = None,
        search_fields: List[SearchFields] = None,
        show_federated: bool = None,
        show_admin_only_contacts: bool = None,
        extension_type: SearchDirectoryContactType = None,
        site_id: str = None,
        show_external_contacts: bool = None,
        account_ids: List[str] = None,
        department: str = None,
        site_ids: List[str] = None,
        extension_statuses: List[ExtensionStatuses] = None,
        extension_types: List[SearchDirectoryExtensionType] = None,
        order_by: List[OrderBy] = None,
        page: int = None,
        per_page: int = None,
    ):
        if search_string is not None:
            self.search_string = search_string
        if search_fields is not None:
            self.search_fields = self._define_list(search_fields, SearchFields)
        if show_federated is not None:
            self.show_federated = show_federated
        if show_admin_only_contacts is not None:
            self.show_admin_only_contacts = show_admin_only_contacts
        if extension_type is not None:
            self.extension_type = self._enum_matching(
                extension_type, SearchDirectoryContactType.list(), "extension_type"
            )
        if site_id is not None:
            self.site_id = site_id
        if show_external_contacts is not None:
            self.show_external_contacts = show_external_contacts
        if account_ids is not None:
            self.account_ids = account_ids
        if department is not None:
            self.department = department
        if site_ids is not None:
            self.site_ids = site_ids
        if extension_statuses is not None:
            self.extension_statuses = self._define_list(
                extension_statuses, ExtensionStatuses
            )
        if extension_types is not None:
            self.extension_types = self._define_list(
                extension_types, SearchDirectoryExtensionType
            )
        if order_by is not None:
            self.order_by = self._define_list(order_by, OrderBy)
        if page is not None:
            self.page = page
        if per_page is not None:
            self.per_page = per_page
