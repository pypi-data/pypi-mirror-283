# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class FieldName(Enum):
    """An enumeration representing different categories.

    :cvar FIRSTNAME: "firstName"
    :vartype FIRSTNAME: str
    :cvar LASTNAME: "lastName"
    :vartype LASTNAME: str
    :cvar EXTENSIONNUMBER: "extensionNumber"
    :vartype EXTENSIONNUMBER: str
    :cvar PHONENUMBER: "phoneNumber"
    :vartype PHONENUMBER: str
    :cvar EMAIL: "email"
    :vartype EMAIL: str
    :cvar JOBTITLE: "jobTitle"
    :vartype JOBTITLE: str
    :cvar DEPARTMENT: "department"
    :vartype DEPARTMENT: str
    """

    FIRSTNAME = "firstName"
    LASTNAME = "lastName"
    EXTENSIONNUMBER = "extensionNumber"
    PHONENUMBER = "phoneNumber"
    EMAIL = "email"
    JOBTITLE = "jobTitle"
    DEPARTMENT = "department"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, FieldName._member_map_.values()))


class OrderByDirection(Enum):
    """An enumeration representing different categories.

    :cvar ASC: "Asc"
    :vartype ASC: str
    :cvar DESC: "Desc"
    :vartype DESC: str
    """

    ASC = "Asc"
    DESC = "Desc"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, OrderByDirection._member_map_.values()))


@JsonMap({"field_name": "fieldName"})
class OrderBy(BaseModel):
    """OrderBy

    :param index: Sorting priority index, starting from '1'. Optional if only one element in `orderBy` array is specified, defaults to None
    :type index: int, optional
    :param field_name: Field name by which to sort the contacts, defaults to None
    :type field_name: FieldName, optional
    :param direction: Sorting direction, defaults to None
    :type direction: OrderByDirection, optional
    """

    def __init__(
        self,
        index: int = None,
        field_name: FieldName = None,
        direction: OrderByDirection = None,
    ):
        if index is not None:
            self.index = index
        if field_name is not None:
            self.field_name = self._enum_matching(
                field_name, FieldName.list(), "field_name"
            )
        if direction is not None:
            self.direction = self._enum_matching(
                direction, OrderByDirection.list(), "direction"
            )
