# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel
from .pronounced_name_prompt_info import PronouncedNamePromptInfo


class PronouncedNameInfoType(Enum):
    """An enumeration representing different categories.

    :cvar DEFAULT: "Default"
    :vartype DEFAULT: str
    :cvar TEXTTOSPEECH: "TextToSpeech"
    :vartype TEXTTOSPEECH: str
    :cvar RECORDED: "Recorded"
    :vartype RECORDED: str
    """

    DEFAULT = "Default"
    TEXTTOSPEECH = "TextToSpeech"
    RECORDED = "Recorded"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, PronouncedNameInfoType._member_map_.values())
        )


@JsonMap({"type_": "type"})
class PronouncedNameInfo(BaseModel):
    """PronouncedNameInfo

    :param type_: The method used to pronounce the user's name:<br>- `Default` - default extension name; first and last name specified in user's profile are pronounced using text-to-speech;<br>- `TextToSpeech` - custom text specified by a user  pronounced using text-to-speech;<br>- `Recorded` - custom audio uploaded by a user, the name recorded in user's own voice (supported only for extension retrieval).<br>, defaults to None
    :type type_: PronouncedNameInfoType, optional
    :param text: Custom text (for `TextToSpeech` type only), defaults to None
    :type text: str, optional
    :param prompt: prompt, defaults to None
    :type prompt: PronouncedNamePromptInfo, optional
    """

    def __init__(
        self,
        type_: PronouncedNameInfoType = None,
        text: str = None,
        prompt: PronouncedNamePromptInfo = None,
    ):
        if type_ is not None:
            self.type_ = self._enum_matching(
                type_, PronouncedNameInfoType.list(), "type_"
            )
        if text is not None:
            self.text = text
        if prompt is not None:
            self.prompt = self._define_object(prompt, PronouncedNamePromptInfo)
