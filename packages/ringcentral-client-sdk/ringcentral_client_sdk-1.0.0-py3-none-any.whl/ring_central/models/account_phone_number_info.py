# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .phone_number_type import PhoneNumberType
from .phone_number_toll_type import PhoneNumberTollType
from .phone_number_usage_type import PhoneNumberUsageType
from .phone_number_status import PhoneNumberStatus


@JsonMap({"id_": "id", "extension_number": "extensionNumber"})
class AccountPhoneNumberInfoExtension(BaseModel):
    """Reference to the extension this number is assigned to. Omitted for company numbers

    :param id_: Unique identifier of extension
    :type id_: str
    :param extension_number: Short number of an extension.<br>Actual max length depends on system length limit for extension.<br>, defaults to None
    :type extension_number: str, optional
    """

    def __init__(self, id_: str, extension_number: str = None):
        self.id_ = id_
        if extension_number is not None:
            self.extension_number = self._pattern_matching(
                extension_number, "^\d{3,8}$", "extension_number"
            )


@JsonMap(
    {
        "id_": "id",
        "phone_number": "phoneNumber",
        "type_": "type",
        "toll_type": "tollType",
        "usage_type": "usageType",
        "byoc_number": "byocNumber",
    }
)
class AccountPhoneNumberInfo(BaseModel):
    """AccountPhoneNumberInfo

    :param id_: Internal unique identifier of a phone number
    :type id_: str
    :param phone_number: Phone number in e.164 format (with '+' prefix)
    :type phone_number: str
    :param type_: Type of phone number, defaults to None
    :type type_: PhoneNumberType, optional
    :param toll_type: Indicates if a number is toll or toll-free
    :type toll_type: PhoneNumberTollType
    :param usage_type: Usage type of phone number
    :type usage_type: PhoneNumberUsageType
    :param byoc_number: byoc_number, defaults to None
    :type byoc_number: bool, optional
    :param status: Status of a phone number. If the value is 'Normal', the phone number is ready to be used. Otherwise, it is an external number not yet ported to RingCentral
    :type status: PhoneNumberStatus
    :param extension: Reference to the extension this number is assigned to. Omitted for company numbers, defaults to None
    :type extension: AccountPhoneNumberInfoExtension, optional
    """

    def __init__(
        self,
        id_: str,
        phone_number: str,
        toll_type: PhoneNumberTollType,
        usage_type: PhoneNumberUsageType,
        status: PhoneNumberStatus,
        type_: PhoneNumberType = None,
        byoc_number: bool = None,
        extension: AccountPhoneNumberInfoExtension = None,
    ):
        self.id_ = self._pattern_matching(id_, "^[1-9]\d{1,14}$", "id_")
        self.phone_number = self._pattern_matching(
            phone_number, "^\+[1-9]\d{1,14}$", "phone_number"
        )
        if type_ is not None:
            self.type_ = self._enum_matching(type_, PhoneNumberType.list(), "type_")
        self.toll_type = self._enum_matching(
            toll_type, PhoneNumberTollType.list(), "toll_type"
        )
        self.usage_type = self._enum_matching(
            usage_type, PhoneNumberUsageType.list(), "usage_type"
        )
        if byoc_number is not None:
            self.byoc_number = byoc_number
        self.status = self._enum_matching(status, PhoneNumberStatus.list(), "status")
        if extension is not None:
            self.extension = self._define_object(
                extension, AccountPhoneNumberInfoExtension
            )
