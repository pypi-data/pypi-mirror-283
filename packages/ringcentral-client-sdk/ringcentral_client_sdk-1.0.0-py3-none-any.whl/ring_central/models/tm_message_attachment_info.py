# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .tm_attachment_author_info import TmAttachmentAuthorInfo
from .tm_attachment_fields_info import TmAttachmentFieldsInfo
from .tm_attachment_footnote_info import TmAttachmentFootnoteInfo
from .event_recurrence_info import EventRecurrenceInfo


class TmMessageAttachmentInfoType(Enum):
    """An enumeration representing different categories.

    :cvar CARD: "Card"
    :vartype CARD: str
    :cvar EVENT: "Event"
    :vartype EVENT: str
    :cvar FILE: "File"
    :vartype FILE: str
    :cvar NOTE: "Note"
    :vartype NOTE: str
    :cvar TASK: "Task"
    :vartype TASK: str
    """

    CARD = "Card"
    EVENT = "Event"
    FILE = "File"
    NOTE = "Note"
    TASK = "Task"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, TmMessageAttachmentInfoType._member_map_.values())
        )


class TmMessageAttachmentInfoColor(Enum):
    """An enumeration representing different categories.

    :cvar BLACK: "Black"
    :vartype BLACK: str
    :cvar RED: "Red"
    :vartype RED: str
    :cvar ORANGE: "Orange"
    :vartype ORANGE: str
    :cvar YELLOW: "Yellow"
    :vartype YELLOW: str
    :cvar GREEN: "Green"
    :vartype GREEN: str
    :cvar BLUE: "Blue"
    :vartype BLUE: str
    :cvar PURPLE: "Purple"
    :vartype PURPLE: str
    :cvar MAGENTA: "Magenta"
    :vartype MAGENTA: str
    """

    BLACK = "Black"
    RED = "Red"
    ORANGE = "Orange"
    YELLOW = "Yellow"
    GREEN = "Green"
    BLUE = "Blue"
    PURPLE = "Purple"
    MAGENTA = "Magenta"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, TmMessageAttachmentInfoColor._member_map_.values())
        )


@JsonMap(
    {
        "id_": "id",
        "type_": "type",
        "image_uri": "imageUri",
        "thumbnail_uri": "thumbnailUri",
        "creator_id": "creatorId",
        "start_time": "startTime",
        "end_time": "endTime",
        "all_day": "allDay",
    }
)
class TmMessageAttachmentInfo(BaseModel):
    """TmMessageAttachmentInfo

    :param id_: Internal identifier of an attachment, defaults to None
    :type id_: str, optional
    :param type_: Type of an attachment, defaults to None
    :type type_: TmMessageAttachmentInfoType, optional
    :param fallback: A string of default text that will be rendered in the case that the client does not support Interactive Messages, defaults to None
    :type fallback: str, optional
    :param intro: A pretext to the message, defaults to None
    :type intro: str, optional
    :param author: author, defaults to None
    :type author: TmAttachmentAuthorInfo, optional
    :param title: Message title, defaults to None
    :type title: str, optional
    :param text: A large string field (up to 1000 chars) to be displayed as the body of a message (Supports GlipDown), defaults to None
    :type text: str, optional
    :param image_uri: Link to an image displayed at the bottom of a message, defaults to None
    :type image_uri: str, optional
    :param thumbnail_uri: Link to an image preview displayed to the right of a message (82x82), defaults to None
    :type thumbnail_uri: str, optional
    :param fields: Information on navigation, defaults to None
    :type fields: List[TmAttachmentFieldsInfo], optional
    :param footnote: footnote, defaults to None
    :type footnote: TmAttachmentFootnoteInfo, optional
    :param creator_id: Internal identifier of a person created an event, defaults to None
    :type creator_id: str, optional
    :param start_time: Datetime of starting an event, defaults to None
    :type start_time: str, optional
    :param end_time: Datetime of ending an event, defaults to None
    :type end_time: str, optional
    :param all_day: Indicates whether an event has some specific time slot or lasts for the whole day(s), defaults to None
    :type all_day: bool, optional
    :param recurrence: recurrence, defaults to None
    :type recurrence: EventRecurrenceInfo, optional
    :param color: Color of Event title, including its presentation in Calendar; or the color of the side border of an interactive message of a Card, defaults to None
    :type color: TmMessageAttachmentInfoColor, optional
    :param location: Event location, defaults to None
    :type location: str, optional
    :param description: Event details, defaults to None
    :type description: str, optional
    """

    def __init__(
        self,
        id_: str = None,
        type_: TmMessageAttachmentInfoType = None,
        fallback: str = None,
        intro: str = None,
        author: TmAttachmentAuthorInfo = None,
        title: str = None,
        text: str = None,
        image_uri: str = None,
        thumbnail_uri: str = None,
        fields: List[TmAttachmentFieldsInfo] = None,
        footnote: TmAttachmentFootnoteInfo = None,
        creator_id: str = None,
        start_time: str = None,
        end_time: str = None,
        all_day: bool = None,
        recurrence: EventRecurrenceInfo = None,
        color: TmMessageAttachmentInfoColor = None,
        location: str = None,
        description: str = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if type_ is not None:
            self.type_ = self._enum_matching(
                type_, TmMessageAttachmentInfoType.list(), "type_"
            )
        if fallback is not None:
            self.fallback = fallback
        if intro is not None:
            self.intro = intro
        if author is not None:
            self.author = self._define_object(author, TmAttachmentAuthorInfo)
        if title is not None:
            self.title = title
        if text is not None:
            self.text = text
        if image_uri is not None:
            self.image_uri = image_uri
        if thumbnail_uri is not None:
            self.thumbnail_uri = thumbnail_uri
        if fields is not None:
            self.fields = self._define_list(fields, TmAttachmentFieldsInfo)
        if footnote is not None:
            self.footnote = self._define_object(footnote, TmAttachmentFootnoteInfo)
        if creator_id is not None:
            self.creator_id = creator_id
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if all_day is not None:
            self.all_day = all_day
        if recurrence is not None:
            self.recurrence = self._define_object(recurrence, EventRecurrenceInfo)
        if color is not None:
            self.color = self._enum_matching(
                color, TmMessageAttachmentInfoColor.list(), "color"
            )
        if location is not None:
            self.location = location
        if description is not None:
            self.description = description
