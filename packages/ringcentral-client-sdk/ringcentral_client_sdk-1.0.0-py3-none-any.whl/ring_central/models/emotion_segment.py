# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class Emotion(Enum):
    """An enumeration representing different categories.

    :cvar ANGER: "Anger"
    :vartype ANGER: str
    :cvar EXCITEMENT: "Excitement"
    :vartype EXCITEMENT: str
    :cvar FRUSTRATION: "Frustration"
    :vartype FRUSTRATION: str
    :cvar JOY: "Joy"
    :vartype JOY: str
    :cvar SADNESS: "Sadness"
    :vartype SADNESS: str
    :cvar NEUTRAL: "Neutral"
    :vartype NEUTRAL: str
    """

    ANGER = "Anger"
    EXCITEMENT = "Excitement"
    FRUSTRATION = "Frustration"
    JOY = "Joy"
    SADNESS = "Sadness"
    NEUTRAL = "Neutral"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, Emotion._member_map_.values()))


@JsonMap({})
class EmotionSegment(BaseModel):
    """EmotionSegment

    :param start: start
    :type start: float
    :param end: end
    :type end: float
    :param emotion: emotion
    :type emotion: Emotion
    :param confidence: confidence, defaults to None
    :type confidence: float, optional
    """

    def __init__(
        self, start: float, end: float, emotion: Emotion, confidence: float = None
    ):
        self.start = start
        self.end = end
        self.emotion = self._enum_matching(emotion, Emotion.list(), "emotion")
        if confidence is not None:
            self.confidence = confidence
