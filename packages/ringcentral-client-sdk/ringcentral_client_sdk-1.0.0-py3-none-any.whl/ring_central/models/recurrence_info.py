# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .meeting_frequency import MeetingFrequency
from .week_day import WeekDay
from .monthly_week import MonthlyWeek


@JsonMap(
    {
        "weekly_by_days": "weeklyByDays",
        "monthly_by_day": "monthlyByDay",
        "monthly_by_week": "monthlyByWeek",
        "monthly_by_week_day": "monthlyByWeekDay",
    }
)
class RecurrenceInfo(BaseModel):
    """RecurrenceInfo

    :param frequency: Recurrence time frame, defaults to None
    :type frequency: MeetingFrequency, optional
    :param interval: Recurrence interval. The supported ranges are: 1-90 for `Daily`;<br>1-12 for `Weekly`; 1-3 for `Monthly`<br>, defaults to None
    :type interval: int, optional
    :param weekly_by_days: weekly_by_days, defaults to None
    :type weekly_by_days: List[WeekDay], optional
    :param monthly_by_day: The supported range is 1-31, defaults to None
    :type monthly_by_day: int, optional
    :param monthly_by_week: Supported together with `weeklyByDay`, defaults to None
    :type monthly_by_week: MonthlyWeek, optional
    :param monthly_by_week_day: This field is used only if you're scheduling a recurring meeting of type `3` to state a specific day in a week when the monthly meeting should recur; it works together with `MonthlyByWeek` field. The values are: 1 - Sunday; 2 - Monday; 3 - Tuesday; 4 - Wednesday; 5 - Thursday; 6 - Friday; 7- Saturday, defaults to None
    :type monthly_by_week_day: WeekDay, optional
    :param count: Number of meeting occurrences, defaults to None
    :type count: int, optional
    :param until: Meeting expiration date-time, defaults to None
    :type until: str, optional
    """

    def __init__(
        self,
        frequency: MeetingFrequency = None,
        interval: int = None,
        weekly_by_days: List[WeekDay] = None,
        monthly_by_day: int = None,
        monthly_by_week: MonthlyWeek = None,
        monthly_by_week_day: WeekDay = None,
        count: int = None,
        until: str = None,
    ):
        if frequency is not None:
            self.frequency = self._enum_matching(
                frequency, MeetingFrequency.list(), "frequency"
            )
        if interval is not None:
            self.interval = interval
        if weekly_by_days is not None:
            self.weekly_by_days = self._define_list(weekly_by_days, WeekDay)
        if monthly_by_day is not None:
            self.monthly_by_day = monthly_by_day
        if monthly_by_week is not None:
            self.monthly_by_week = self._enum_matching(
                monthly_by_week, MonthlyWeek.list(), "monthly_by_week"
            )
        if monthly_by_week_day is not None:
            self.monthly_by_week_day = self._enum_matching(
                monthly_by_week_day, WeekDay.list(), "monthly_by_week_day"
            )
        if count is not None:
            self.count = count
        if until is not None:
            self.until = until
