# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class ReferenceInfoType(Enum):
    """An enumeration representing different categories.

    :cvar PARTNERID: "PartnerId"
    :vartype PARTNERID: str
    :cvar CUSTOMERDIRECTORYID: "CustomerDirectoryId"
    :vartype CUSTOMERDIRECTORYID: str
    """

    PARTNERID = "PartnerId"
    CUSTOMERDIRECTORYID = "CustomerDirectoryId"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, ReferenceInfoType._member_map_.values()))


@JsonMap({"type_": "type", "ref_acc_id": "refAccId"})
class ReferenceInfo(BaseModel):
    """ReferenceInfo

    :param ref: Non-RC identifier of an extension, defaults to None
    :type ref: str, optional
    :param type_: Type of external identifier, defaults to None
    :type type_: ReferenceInfoType, optional
    :param ref_acc_id: Primary federation admin account identifier, defaults to None
    :type ref_acc_id: str, optional
    """

    def __init__(
        self, ref: str = None, type_: ReferenceInfoType = None, ref_acc_id: str = None
    ):
        if ref is not None:
            self.ref = ref
        if type_ is not None:
            self.type_ = self._enum_matching(type_, ReferenceInfoType.list(), "type_")
        if ref_acc_id is not None:
            self.ref_acc_id = ref_acc_id
