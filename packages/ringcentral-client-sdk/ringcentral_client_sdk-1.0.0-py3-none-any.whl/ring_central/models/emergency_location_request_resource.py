# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel
from .common_emergency_location_address_info import (
    CommonEmergencyLocationAddressInfo,
    CommonEmergencyLocationAddressInfoGuard,
)
from .common_emergency_location_address_info_default import (
    CommonEmergencyLocationAddressInfoDefault,
)
from .common_emergency_location_address_info_au import (
    CommonEmergencyLocationAddressInfoAu,
)
from .common_emergency_location_address_info_fr import (
    CommonEmergencyLocationAddressInfoFr,
)
from .short_site_info import ShortSiteInfo


class EmergencyLocationRequestResourceAddressStatus(Enum):
    """An enumeration representing different categories.

    :cvar VALID: "Valid"
    :vartype VALID: str
    :cvar INVALID: "Invalid"
    :vartype INVALID: str
    """

    VALID = "Valid"
    INVALID = "Invalid"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                EmergencyLocationRequestResourceAddressStatus._member_map_.values(),
            )
        )


class EmergencyLocationRequestResourceUsageStatus(Enum):
    """An enumeration representing different categories.

    :cvar ACTIVE: "Active"
    :vartype ACTIVE: str
    :cvar INACTIVE: "Inactive"
    :vartype INACTIVE: str
    """

    ACTIVE = "Active"
    INACTIVE = "Inactive"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                EmergencyLocationRequestResourceUsageStatus._member_map_.values(),
            )
        )


class EmergencyLocationRequestResourceVisibility(Enum):
    """An enumeration representing different categories.

    :cvar PUBLIC: "Public"
    :vartype PUBLIC: str
    """

    PUBLIC = "Public"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                EmergencyLocationRequestResourceVisibility._member_map_.values(),
            )
        )


@JsonMap(
    {
        "id_": "id",
        "address_status": "addressStatus",
        "usage_status": "usageStatus",
        "address_format_id": "addressFormatId",
    }
)
class EmergencyLocationRequestResource(BaseModel):
    """EmergencyLocationRequestResource

    :param id_: Internal identifier of an emergency response location<br>, defaults to None
    :type id_: str, optional
    :param address: address, defaults to None
    :type address: CommonEmergencyLocationAddressInfo, optional
    :param name: Emergency response location name, defaults to None
    :type name: str, optional
    :param site: site, defaults to None
    :type site: ShortSiteInfo, optional
    :param address_status: Emergency address status, defaults to None
    :type address_status: EmergencyLocationRequestResourceAddressStatus, optional
    :param usage_status: Status of an emergency response location usage., defaults to None
    :type usage_status: EmergencyLocationRequestResourceUsageStatus, optional
    :param address_format_id: Address format ID, defaults to None
    :type address_format_id: str, optional
    :param visibility: Visibility of an emergency response location. If `Private`<br>is set, then a location is visible only for restricted number of users,<br>specified in `owners` array<br>, defaults to None
    :type visibility: EmergencyLocationRequestResourceVisibility, optional
    :param trusted: If 'true' address validation for non-us addresses is skipped, defaults to None
    :type trusted: bool, optional
    """

    def __init__(
        self,
        id_: str = None,
        address: CommonEmergencyLocationAddressInfo = None,
        name: str = None,
        site: ShortSiteInfo = None,
        address_status: EmergencyLocationRequestResourceAddressStatus = None,
        usage_status: EmergencyLocationRequestResourceUsageStatus = None,
        address_format_id: str = None,
        visibility: EmergencyLocationRequestResourceVisibility = None,
        trusted: bool = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if address is not None:
            self.address = CommonEmergencyLocationAddressInfoGuard.return_one_of(
                address
            )
        if name is not None:
            self.name = name
        if site is not None:
            self.site = self._define_object(site, ShortSiteInfo)
        if address_status is not None:
            self.address_status = self._enum_matching(
                address_status,
                EmergencyLocationRequestResourceAddressStatus.list(),
                "address_status",
            )
        if usage_status is not None:
            self.usage_status = self._enum_matching(
                usage_status,
                EmergencyLocationRequestResourceUsageStatus.list(),
                "usage_status",
            )
        if address_format_id is not None:
            self.address_format_id = address_format_id
        if visibility is not None:
            self.visibility = self._enum_matching(
                visibility,
                EmergencyLocationRequestResourceVisibility.list(),
                "visibility",
            )
        if trusted is not None:
            self.trusted = trusted
