# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .contact_info import ContactInfo
from .cost_center_info import CostCenterInfo
from .custom_field_info import CustomFieldInfo
from .extension_permissions import ExtensionPermissions
from .profile_image_info import ProfileImageInfo
from .reference_info import ReferenceInfo
from .regional_settings import RegionalSettings
from .extension_service_feature_info import ExtensionServiceFeatureInfo
from .setup_wizard_state_for_update_enum import SetupWizardStateForUpdateEnum
from .provisioning_site_info import ProvisioningSiteInfo
from .extension_status_info import ExtensionStatusInfo
from .assigned_country_info import AssignedCountryInfo


class ExtensionCreationResponseStatus(Enum):
    """An enumeration representing different categories.

    :cvar ENABLED: "Enabled"
    :vartype ENABLED: str
    :cvar DISABLED: "Disabled"
    :vartype DISABLED: str
    :cvar FROZEN: "Frozen"
    :vartype FROZEN: str
    :cvar NOTACTIVATED: "NotActivated"
    :vartype NOTACTIVATED: str
    :cvar UNASSIGNED: "Unassigned"
    :vartype UNASSIGNED: str
    """

    ENABLED = "Enabled"
    DISABLED = "Disabled"
    FROZEN = "Frozen"
    NOTACTIVATED = "NotActivated"
    UNASSIGNED = "Unassigned"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value, ExtensionCreationResponseStatus._member_map_.values()
            )
        )


class ExtensionCreationResponseType(Enum):
    """An enumeration representing different categories.

    :cvar USER: "User"
    :vartype USER: str
    :cvar VIRTUALUSER: "VirtualUser"
    :vartype VIRTUALUSER: str
    :cvar DIGITALUSER: "DigitalUser"
    :vartype DIGITALUSER: str
    :cvar FLEXIBLEUSER: "FlexibleUser"
    :vartype FLEXIBLEUSER: str
    :cvar DEPARTMENT: "Department"
    :vartype DEPARTMENT: str
    :cvar ANNOUNCEMENT: "Announcement"
    :vartype ANNOUNCEMENT: str
    :cvar VOICEMAIL: "Voicemail"
    :vartype VOICEMAIL: str
    :cvar SHAREDLINESGROUP: "SharedLinesGroup"
    :vartype SHAREDLINESGROUP: str
    :cvar PAGINGONLY: "PagingOnly"
    :vartype PAGINGONLY: str
    :cvar PARKLOCATION: "ParkLocation"
    :vartype PARKLOCATION: str
    :cvar LIMITED: "Limited"
    :vartype LIMITED: str
    """

    USER = "User"
    VIRTUALUSER = "VirtualUser"
    DIGITALUSER = "DigitalUser"
    FLEXIBLEUSER = "FlexibleUser"
    DEPARTMENT = "Department"
    ANNOUNCEMENT = "Announcement"
    VOICEMAIL = "Voicemail"
    SHAREDLINESGROUP = "SharedLinesGroup"
    PAGINGONLY = "PagingOnly"
    PARKLOCATION = "ParkLocation"
    LIMITED = "Limited"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, ExtensionCreationResponseType._member_map_.values())
        )


@JsonMap(
    {
        "id_": "id",
        "cost_center": "costCenter",
        "custom_fields": "customFields",
        "extension_number": "extensionNumber",
        "partner_id": "partnerId",
        "profile_image": "profileImage",
        "regional_settings": "regionalSettings",
        "service_features": "serviceFeatures",
        "setup_wizard_state": "setupWizardState",
        "status_info": "statusInfo",
        "type_": "type",
        "assigned_country": "assignedCountry",
    }
)
class ExtensionCreationResponse(BaseModel):
    """ExtensionCreationResponse

    :param id_: Internal identifier of an extension, defaults to None
    :type id_: int, optional
    :param uri: Canonical URI of an extension, defaults to None
    :type uri: str, optional
    :param contact: Detailed contact information, defaults to None
    :type contact: ContactInfo, optional
    :param cost_center: Cost center information. Applicable if Cost Center feature is enabled. The default is `root` cost center value, defaults to None
    :type cost_center: CostCenterInfo, optional
    :param custom_fields: custom_fields, defaults to None
    :type custom_fields: List[CustomFieldInfo], optional
    :param extension_number: Extension number, defaults to None
    :type extension_number: str, optional
    :param name: Extension name. For user extension types the value is a combination<br>of the specified first name and last name<br>, defaults to None
    :type name: str, optional
    :param partner_id: For Partner Applications Internal identifier of an extension<br>created by partner. The RingCentral supports the mapping of accounts and<br>stores the corresponding account ID/extension ID for each partner ID of<br>a client application. In request URIs partner IDs are accepted instead<br>of regular RingCentral native IDs as path parameters using `pid=XXX` clause.<br>Though in response URIs contain the corresponding account IDs and extension<br>IDs. In all request and response bodies these values are reflected via<br>partnerId attributes of account and extension<br>, defaults to None
    :type partner_id: str, optional
    :param permissions: Extension permissions, corresponding to the Service Web permissions<br>'Admin' and 'InternationalCalling'<br>, defaults to None
    :type permissions: ExtensionPermissions, optional
    :param profile_image: Information on profile image, defaults to None
    :type profile_image: ProfileImageInfo, optional
    :param references: List of non-RC internal identifiers assigned to an extension<br>, defaults to None
    :type references: List[ReferenceInfo], optional
    :param regional_settings: Regional data (timezone, home country, language) of an extension/account.<br>The default is Company (Auto-Receptionist) settings<br>, defaults to None
    :type regional_settings: RegionalSettings, optional
    :param service_features: Extension service features returned in response only when the<br>logged-in user requests his/her own extension info, see also Extension<br>Service Features<br>, defaults to None
    :type service_features: List[ExtensionServiceFeatureInfo], optional
    :param setup_wizard_state: Initial configuration wizard state, defaults to None
    :type setup_wizard_state: SetupWizardStateForUpdateEnum, optional
    :param site: Site data. If multi-site feature is turned on for an account,<br>then ID of a site must be specified. In order to assign a wireless<br>point to the main site (company) the site ID should be set to `main-site`<br>, defaults to None
    :type site: ProvisioningSiteInfo, optional
    :param status: Extension current state. If 'Unassigned' is specified, then<br>extensions without `extensionNumber` are returned. If not specified, then<br>all extensions are returned<br>, defaults to None
    :type status: ExtensionCreationResponseStatus, optional
    :param status_info: Status information (reason, comment). Returned for 'Disabled'<br>status only<br>, defaults to None
    :type status_info: ExtensionStatusInfo, optional
    :param type_: Extension type. Please note that legacy 'Department' extension type<br>corresponds to 'Call Queue' extensions in modern RingCentral product terminology<br>, defaults to None
    :type type_: ExtensionCreationResponseType, optional
    :param hidden: Hides an extension from showing in company directory. Supported<br>for extensions of 'User' type only<br>, defaults to None
    :type hidden: bool, optional
    :param assigned_country: Information on a country assigned to an extension user. Returned for the User extension type only, defaults to None
    :type assigned_country: AssignedCountryInfo, optional
    """

    def __init__(
        self,
        id_: int = None,
        uri: str = None,
        contact: ContactInfo = None,
        cost_center: CostCenterInfo = None,
        custom_fields: List[CustomFieldInfo] = None,
        extension_number: str = None,
        name: str = None,
        partner_id: str = None,
        permissions: ExtensionPermissions = None,
        profile_image: ProfileImageInfo = None,
        references: List[ReferenceInfo] = None,
        regional_settings: RegionalSettings = None,
        service_features: List[ExtensionServiceFeatureInfo] = None,
        setup_wizard_state: SetupWizardStateForUpdateEnum = None,
        site: ProvisioningSiteInfo = None,
        status: ExtensionCreationResponseStatus = None,
        status_info: ExtensionStatusInfo = None,
        type_: ExtensionCreationResponseType = None,
        hidden: bool = None,
        assigned_country: AssignedCountryInfo = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if uri is not None:
            self.uri = uri
        if contact is not None:
            self.contact = self._define_object(contact, ContactInfo)
        if cost_center is not None:
            self.cost_center = self._define_object(cost_center, CostCenterInfo)
        if custom_fields is not None:
            self.custom_fields = self._define_list(custom_fields, CustomFieldInfo)
        if extension_number is not None:
            self.extension_number = extension_number
        if name is not None:
            self.name = name
        if partner_id is not None:
            self.partner_id = partner_id
        if permissions is not None:
            self.permissions = self._define_object(permissions, ExtensionPermissions)
        if profile_image is not None:
            self.profile_image = self._define_object(profile_image, ProfileImageInfo)
        if references is not None:
            self.references = self._define_list(references, ReferenceInfo)
        if regional_settings is not None:
            self.regional_settings = self._define_object(
                regional_settings, RegionalSettings
            )
        if service_features is not None:
            self.service_features = self._define_list(
                service_features, ExtensionServiceFeatureInfo
            )
        if setup_wizard_state is not None:
            self.setup_wizard_state = self._enum_matching(
                setup_wizard_state,
                SetupWizardStateForUpdateEnum.list(),
                "setup_wizard_state",
            )
        if site is not None:
            self.site = self._define_object(site, ProvisioningSiteInfo)
        if status is not None:
            self.status = self._enum_matching(
                status, ExtensionCreationResponseStatus.list(), "status"
            )
        if status_info is not None:
            self.status_info = self._define_object(status_info, ExtensionStatusInfo)
        if type_ is not None:
            self.type_ = self._enum_matching(
                type_, ExtensionCreationResponseType.list(), "type_"
            )
        if hidden is not None:
            self.hidden = hidden
        if assigned_country is not None:
            self.assigned_country = self._define_object(
                assigned_country, AssignedCountryInfo
            )
