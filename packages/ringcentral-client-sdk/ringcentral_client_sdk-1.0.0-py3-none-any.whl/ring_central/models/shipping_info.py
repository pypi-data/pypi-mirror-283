# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .shipping_status import ShippingStatus
from .shipping_method_info import ShippingMethodInfo
from .shipping_address_info import ShippingAddressInfo


@JsonMap({"tracking_number": "trackingNumber"})
class ShippingInfo(BaseModel):
    """Shipping information, according to which devices (in case of HardPhone)
    or e911 stickers (in case of SoftPhone and OtherPhone) will be delivered
    to the customer


    :param status: Order item shipping status. It is set to `Initial` when the order is submitted.<br>Then it is changed to `Accepted` when a distributor starts processing the order.<br>Finally, it is changed to `Shipped` which means that the distributor has shipped the device.<br>, defaults to None
    :type status: ShippingStatus, optional
    :param carrier: Shipping carrier name. Appears only if the device status is 'Shipped'<br>, defaults to None
    :type carrier: str, optional
    :param tracking_number: Carrier-specific tracking number. Appears only if the device status is 'Shipped'<br>, defaults to None
    :type tracking_number: str, optional
    :param method: method, defaults to None
    :type method: ShippingMethodInfo, optional
    :param address: Shipping address for the order. If it coincides with the Emergency<br>Service Address, then can be omitted. By default, the same value as the<br>emergencyServiceAddress. Multiple addresses can be specified; in case<br>an order contains several devices, they can be delivered to different addresses<br>, defaults to None
    :type address: ShippingAddressInfo, optional
    """

    def __init__(
        self,
        status: ShippingStatus = None,
        carrier: str = None,
        tracking_number: str = None,
        method: ShippingMethodInfo = None,
        address: ShippingAddressInfo = None,
    ):
        if status is not None:
            self.status = self._enum_matching(status, ShippingStatus.list(), "status")
        if carrier is not None:
            self.carrier = carrier
        if tracking_number is not None:
            self.tracking_number = tracking_number
        if method is not None:
            self.method = self._define_object(method, ShippingMethodInfo)
        if address is not None:
            self.address = self._define_object(address, ShippingAddressInfo)
