# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class ResourceType(Enum):
    """An enumeration representing different categories.

    :cvar USER: "User"
    :vartype USER: str
    :cvar GROUP: "Group"
    :vartype GROUP: str
    :cvar RESOURCETYPE: "ResourceType"
    :vartype RESOURCETYPE: str
    :cvar SCHEMA: "Schema"
    :vartype SCHEMA: str
    """

    USER = "User"
    GROUP = "Group"
    RESOURCETYPE = "ResourceType"
    SCHEMA = "Schema"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, ResourceType._member_map_.values()))


@JsonMap({"last_modified": "lastModified", "resource_type": "resourceType"})
class ScimMeta(BaseModel):
    """Resource metadata

    :param created: created, defaults to None
    :type created: str, optional
    :param last_modified: last_modified, defaults to None
    :type last_modified: str, optional
    :param location: Resource location URI, defaults to None
    :type location: str, optional
    :param resource_type: resource_type, defaults to None
    :type resource_type: ResourceType, optional
    """

    def __init__(
        self,
        created: str = None,
        last_modified: str = None,
        location: str = None,
        resource_type: ResourceType = None,
    ):
        if created is not None:
            self.created = created
        if last_modified is not None:
            self.last_modified = last_modified
        if location is not None:
            self.location = location
        if resource_type is not None:
            self.resource_type = self._enum_matching(
                resource_type, ResourceType.list(), "resource_type"
            )
