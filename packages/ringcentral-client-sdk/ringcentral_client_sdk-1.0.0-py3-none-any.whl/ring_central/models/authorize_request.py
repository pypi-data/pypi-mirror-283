# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel
from .display_modes_enum import DisplayModesEnum
from .code_challenge_method_enum import CodeChallengeMethodEnum


class AuthorizeRequestResponseType(Enum):
    """An enumeration representing different categories.

    :cvar CODE: "code"
    :vartype CODE: str
    """

    CODE = "code"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, AuthorizeRequestResponseType._member_map_.values())
        )


@JsonMap({})
class AuthorizeRequest(BaseModel):
    """AuthorizeRequest

    :param response_type: Determines authorization flow type. The only supported value is `code` which corresponds to OAuth 2.0 "Authorization Code Flow"<br>
    :type response_type: AuthorizeRequestResponseType
    :param redirect_uri: This is the URI where the Authorization Server redirects the User Agent to at the end of the authorization flow.<br>The value of this parameter must exactly match one of the URIs registered for this client application.<br>This parameter is required if there are more than one redirect URIs registered for the app.<br>, defaults to None
    :type redirect_uri: str, optional
    :param client_id: The registered identifier of a client application
    :type client_id: str
    :param state: An opaque value used by the client to maintain state between the request and callback.<br>The authorization server includes this value when redirecting the User Agent back<br>to the client. The parameter SHOULD be used for preventing cross-site request forgery attacks.<br>, defaults to None
    :type state: str, optional
    :param scope: The list of requested OAuth scopes (space separated), defaults to None
    :type scope: str, optional
    :param display: Specifies how the Authorization Server displays the authentication and consent user interface pages to the End-User.<br>, defaults to None
    :type display: DisplayModesEnum, optional
    :param prompt: Space-delimited, case-sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for<br>re-authentication and consent. The defined values are:<br><br>- `login` - RingCentral native login form,<br>- `sso` - Single Sign-On login form,<br>- `consent` - form to show the requested scope and prompt user for consent.<br><br>Either `login` or `sso` (or both) must be specified. The default<br>value is `login sso`<br>, defaults to None
    :type prompt: str, optional
    :param ui_locales: End-User's preferred languages and scripts for the user interface, represented as a space-separated list of<br>[RFC-5646](https://datatracker.ietf.org/doc/html/rfc5646) language tag values, ordered by preference.<br><br>If this parameter is provided, its value overrides 'Accept-Language' header value and 'localeId' parameter value (if any)<br>, defaults to None
    :type ui_locales: str, optional
    :param code_challenge: The code challenge value as defined by the PKCE specification -<br>[RFC-7636 "Proof Key for Code Exchange by OAuth Public Clients"](https://datatracker.ietf.org/doc/html/rfc7636)<br>, defaults to None
    :type code_challenge: str, optional
    :param code_challenge_method: The code challenge method as defined by the PKCE specification -<br>[RFC-7636 "Proof Key for Code Exchange by OAuth Public Clients"](https://datatracker.ietf.org/doc/html/rfc7636)<br>, defaults to None
    :type code_challenge_method: CodeChallengeMethodEnum, optional
    :param nonce: String value used to associate a Client session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authentication Request to the ID Token.<br>, defaults to None
    :type nonce: str, optional
    :param ui_options: Login form user interface options (space-separated). By default, the UI options that are registered for this client application will be used<br>, defaults to None
    :type ui_options: str, optional
    :param login_hint: Hint to the Authorization Server about the login identifier the End-User might use to log in., defaults to None
    :type login_hint: str, optional
    :param brand_id: RingCentral Brand identifier. If it is not provided in the request,<br>server will try to determine brand from the client application profile.<br>, defaults to None
    :type brand_id: str, optional
    :param accept_language: accept_language, defaults to None
    :type accept_language: str, optional
    """

    def __init__(
        self,
        response_type: AuthorizeRequestResponseType,
        client_id: str,
        redirect_uri: str = None,
        state: str = None,
        scope: str = None,
        display: DisplayModesEnum = None,
        prompt: str = None,
        ui_locales: str = None,
        code_challenge: str = None,
        code_challenge_method: CodeChallengeMethodEnum = None,
        nonce: str = None,
        ui_options: str = None,
        login_hint: str = None,
        brand_id: str = None,
        accept_language: str = None,
    ):
        self.response_type = self._enum_matching(
            response_type, AuthorizeRequestResponseType.list(), "response_type"
        )
        if redirect_uri is not None:
            self.redirect_uri = redirect_uri
        self.client_id = client_id
        if state is not None:
            self.state = state
        if scope is not None:
            self.scope = scope
        if display is not None:
            self.display = self._enum_matching(
                display, DisplayModesEnum.list(), "display"
            )
        if prompt is not None:
            self.prompt = prompt
        if ui_locales is not None:
            self.ui_locales = ui_locales
        if code_challenge is not None:
            self.code_challenge = code_challenge
        if code_challenge_method is not None:
            self.code_challenge_method = self._enum_matching(
                code_challenge_method,
                CodeChallengeMethodEnum.list(),
                "code_challenge_method",
            )
        if nonce is not None:
            self.nonce = nonce
        if ui_options is not None:
            self.ui_options = ui_options
        if login_hint is not None:
            self.login_hint = login_hint
        if brand_id is not None:
            self.brand_id = brand_id
        if accept_language is not None:
            self.accept_language = accept_language
