# This file was generated by liblab | https://liblab.com/

from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel


class CallMonitoringExtensionInfoPermissions(Enum):
    """An enumeration representing different categories.

    :cvar MONITORING: "Monitoring"
    :vartype MONITORING: str
    :cvar MONITORED: "Monitored"
    :vartype MONITORED: str
    """

    MONITORING = "Monitoring"
    MONITORED = "Monitored"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                CallMonitoringExtensionInfoPermissions._member_map_.values(),
            )
        )


@JsonMap({"id_": "id"})
class CallMonitoringExtensionInfo(BaseModel):
    """CallMonitoringExtensionInfo

    :param id_: Internal identifier of an extension. Only the following extension<br>types are allowed: User, DigitalUser, VirtualUser, FaxUser, Limited<br>, defaults to None
    :type id_: str, optional
    :param permissions: Set of call monitoring group permissions granted to a specified<br>extension. In order to remove a specified extension from a call monitoring<br>group use an empty value<br>, defaults to None
    :type permissions: List[CallMonitoringExtensionInfoPermissions], optional
    """

    def __init__(
        self,
        id_: str = None,
        permissions: List[CallMonitoringExtensionInfoPermissions] = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if permissions is not None:
            self.permissions = self._define_list(
                permissions, CallMonitoringExtensionInfoPermissions
            )
