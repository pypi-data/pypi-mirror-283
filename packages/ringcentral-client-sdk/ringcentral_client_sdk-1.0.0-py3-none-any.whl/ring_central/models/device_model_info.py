# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .device_addon_info import DeviceAddonInfo


class DeviceModelInfoFeatures(Enum):
    """An enumeration representing different categories.

    :cvar BLA: "BLA"
    :vartype BLA: str
    :cvar INTERCOM: "Intercom"
    :vartype INTERCOM: str
    :cvar PAGING: "Paging"
    :vartype PAGING: str
    :cvar HELD: "HELD"
    :vartype HELD: str
    """

    BLA = "BLA"
    INTERCOM = "Intercom"
    PAGING = "Paging"
    HELD = "HELD"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, DeviceModelInfoFeatures._member_map_.values())
        )


@JsonMap({"id_": "id"})
class DeviceModelInfo(BaseModel):
    """HardPhone model information

    :param id_: Addon identifier. For HardPhones of certain types, which are compatible with this add-on identifier, defaults to None
    :type id_: str, optional
    :param name: Device name, defaults to None
    :type name: str, optional
    :param addons: Add-ons description
    :type addons: List[DeviceAddonInfo]
    :param features: Device feature or multiple features supported, defaults to None
    :type features: List[DeviceModelInfoFeatures], optional
    """

    def __init__(
        self,
        addons: List[DeviceAddonInfo],
        id_: str = None,
        name: str = None,
        features: List[DeviceModelInfoFeatures] = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if name is not None:
            self.name = name
        self.addons = self._define_list(addons, DeviceAddonInfo)
        if features is not None:
            self.features = self._define_list(features, DeviceModelInfoFeatures)
