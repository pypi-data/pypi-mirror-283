# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel
from .image_fill_mode import ImageFillMode, ImageFillModeGuard
from .horizontal_alignment import HorizontalAlignment, HorizontalAlignmentGuard
from .vertical_alignment import VerticalAlignment, VerticalAlignmentGuard


class BackgroundImageType(Enum):
    """An enumeration representing different categories.

    :cvar BACKGROUNDIMAGE: "BackgroundImage"
    :vartype BACKGROUNDIMAGE: str
    """

    BACKGROUNDIMAGE = "BackgroundImage"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, BackgroundImageType._member_map_.values()))


@JsonMap(
    {
        "type_": "type",
        "fill_mode": "fillMode",
        "horizontal_alignment": "horizontalAlignment",
        "vertical_alignment": "verticalAlignment",
    }
)
class BackgroundImage(BaseModel):
    """Specifies a background image oa a card. Acceptable formats are PNG, JPEG, and GIF

    :param type_: Must be `BackgroundImage`, defaults to None
    :type type_: BackgroundImageType, optional
    :param url: The URL/data URL of an image to be used as a background of a card. Acceptable formats are PNG, JPEG, and GIF
    :type url: str
    :param fill_mode: Describes how the image should fill the area, defaults to None
    :type fill_mode: ImageFillMode, optional
    :param horizontal_alignment: Describes how the image should be aligned if it must be cropped or if using repeat fill mode, defaults to None
    :type horizontal_alignment: HorizontalAlignment, optional
    :param vertical_alignment: Describes how the image should be aligned if it must be cropped or if using repeat fill mode, defaults to None
    :type vertical_alignment: VerticalAlignment, optional
    """

    def __init__(
        self,
        url: str,
        type_: BackgroundImageType = None,
        fill_mode: ImageFillMode = None,
        horizontal_alignment: HorizontalAlignment = None,
        vertical_alignment: VerticalAlignment = None,
    ):
        if type_ is not None:
            self.type_ = self._enum_matching(type_, BackgroundImageType.list(), "type_")
        self.url = url
        if fill_mode is not None:
            self.fill_mode = ImageFillModeGuard.return_one_of(fill_mode)
        if horizontal_alignment is not None:
            self.horizontal_alignment = HorizontalAlignmentGuard.return_one_of(
                horizontal_alignment
            )
        if vertical_alignment is not None:
            self.vertical_alignment = VerticalAlignmentGuard.return_one_of(
                vertical_alignment
            )
