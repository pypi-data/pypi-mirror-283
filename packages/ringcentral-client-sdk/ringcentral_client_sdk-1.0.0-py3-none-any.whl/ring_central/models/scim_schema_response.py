# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .scim_schema_attribute import ScimSchemaAttribute
from .scim_meta import ScimMeta


@JsonMap({"id_": "id"})
class ScimSchemaResponse(BaseModel):
    """ScimSchemaResponse

    :param id_: The unique URI of the schema
    :type id_: str
    :param name: The name of the schema, defaults to None
    :type name: str, optional
    :param description: The description of the schema, defaults to None
    :type description: str, optional
    :param attributes: attributes, defaults to None
    :type attributes: List[ScimSchemaAttribute], optional
    :param meta: Resource metadata, defaults to None
    :type meta: ScimMeta, optional
    """

    def __init__(
        self,
        id_: str,
        name: str = None,
        description: str = None,
        attributes: List[ScimSchemaAttribute] = None,
        meta: ScimMeta = None,
    ):
        self.id_ = id_
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if attributes is not None:
            self.attributes = self._define_list(attributes, ScimSchemaAttribute)
        if meta is not None:
            self.meta = self._define_object(meta, ScimMeta)
