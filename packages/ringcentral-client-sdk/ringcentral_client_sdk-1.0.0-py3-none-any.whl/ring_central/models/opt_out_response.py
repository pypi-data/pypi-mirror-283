# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class OptOutResponseStatus(Enum):
    """An enumeration representing different categories.

    :cvar OPTIN: "OptIn"
    :vartype OPTIN: str
    :cvar OPTOUT: "OptOut"
    :vartype OPTOUT: str
    """

    OPTIN = "OptIn"
    OPTOUT = "OptOut"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, OptOutResponseStatus._member_map_.values()))


class Source(Enum):
    """An enumeration representing different categories.

    :cvar RECIPIENT: "Recipient"
    :vartype RECIPIENT: str
    :cvar ACCOUNT: "Account"
    :vartype ACCOUNT: str
    :cvar UPSTREAM: "Upstream"
    :vartype UPSTREAM: str
    :cvar CARRIER: "Carrier"
    :vartype CARRIER: str
    """

    RECIPIENT = "Recipient"
    ACCOUNT = "Account"
    UPSTREAM = "Upstream"
    CARRIER = "Carrier"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, Source._member_map_.values()))


@JsonMap({"from_": "from"})
class OptOutResponse(BaseModel):
    """Opt-out record

    :param from_: Phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format from which the recipient has opted out, defaults to None
    :type from_: str, optional
    :param to: Phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format which is opted out, defaults to None
    :type to: str, optional
    :param status: Status of a phone number, defaults to None
    :type status: OptOutResponseStatus, optional
    :param source: source, defaults to None
    :type source: Source, optional
    """

    def __init__(
        self,
        from_: str = None,
        to: str = None,
        status: OptOutResponseStatus = None,
        source: Source = None,
    ):
        if from_ is not None:
            self.from_ = from_
        if to is not None:
            self.to = to
        if status is not None:
            self.status = self._enum_matching(
                status, OptOutResponseStatus.list(), "status"
            )
        if source is not None:
            self.source = self._enum_matching(source, Source.list(), "source")
