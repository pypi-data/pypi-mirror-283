# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .message_store_caller_info_request import MessageStoreCallerInfoRequest
from .sms_request_country_info import SmsRequestCountryInfo


@JsonMap({"from_": "from"})
class CreateMmsMessage(BaseModel):
    """CreateMmsMessage

    :param from_: Message sender information. The `phoneNumber` value should be one<br>the account phone numbers allowed to send the current type of messages<br>
    :type from_: MessageStoreCallerInfoRequest
    :param to: Message receiver(s) information. The `phoneNumber` value is required
    :type to: List[MessageStoreCallerInfoRequest]
    :param text: Text of a message. Max length is 1000 symbols (2-byte UTF-16<br>encoded). If a character is encoded in 4 bytes in UTF-16 it is treated<br>as 2 characters, thus restricting the maximum message length to 500 symbols<br>, defaults to None
    :type text: str, optional
    :param country: Target number country information. Either `id` or `isoCode` can be specified., defaults to None
    :type country: SmsRequestCountryInfo, optional
    :param attachments: Media file(s) to upload
    :type attachments: List[any]
    """

    def __init__(
        self,
        from_: MessageStoreCallerInfoRequest,
        to: List[MessageStoreCallerInfoRequest],
        attachments: List[any],
        text: str = None,
        country: SmsRequestCountryInfo = None,
    ):
        self.from_ = self._define_object(from_, MessageStoreCallerInfoRequest)
        self.to = self._define_list(to, MessageStoreCallerInfoRequest)
        if text is not None:
            self.text = text
        if country is not None:
            self.country = self._define_object(country, SmsRequestCountryInfo)
        self.attachments = attachments
