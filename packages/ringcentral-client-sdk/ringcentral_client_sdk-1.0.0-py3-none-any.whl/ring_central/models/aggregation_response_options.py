# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .aggregation_response_options_counters import AggregationResponseOptionsCounters
from .aggregation_response_options_timers import AggregationResponseOptionsTimers


@JsonMap({})
class AggregationResponseOptions(BaseModel):
    """This field provides mapping of possible breakdown options for call aggregation and aggregation formula

    :param counters: The formula is defined by `aggregationType` and `aggregationInterval` for every counter individually.<br>If `aggregationType` is `Sum` or `Percent`, `aggregationInterval` is not supported.<br>If `aggregationType` is `Min`, `Max` or `Average`, `aggregationInterval` is required, defaults to None
    :type counters: AggregationResponseOptionsCounters, optional
    :param timers: The formula is defined by `aggregationType` and `aggregationInterval` for every timer individually.<br>If `aggregationType` is `Sum` or `Percent`, `aggregationInterval` is not supported.<br>If `aggregationType` is `Min`, `Max` or `Average`, `aggregationInterval` is supported, but not required.<br>If left empty, aggregation will be performed on per-call basis, defaults to None
    :type timers: AggregationResponseOptionsTimers, optional
    """

    def __init__(
        self,
        counters: AggregationResponseOptionsCounters = None,
        timers: AggregationResponseOptionsTimers = None,
    ):
        if counters is not None:
            self.counters = self._define_object(
                counters, AggregationResponseOptionsCounters
            )
        if timers is not None:
            self.timers = self._define_object(timers, AggregationResponseOptionsTimers)
