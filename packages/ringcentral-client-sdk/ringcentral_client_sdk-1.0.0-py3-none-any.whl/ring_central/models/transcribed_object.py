# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .utterance_object import UtteranceObject
from .word_segment import WordSegment


@JsonMap({"speaker_count": "speakerCount"})
class TranscribedObject(BaseModel):
    """TranscribedObject

    :param speaker_count: The number of speakers detected. Field is set only when enableSpeakerDiarization is true., defaults to None
    :type speaker_count: int, optional
    :param utterances: Speaker wise utterances. Field is set only when enableSpeakerDiarization is true., defaults to None
    :type utterances: List[UtteranceObject], optional
    :param words: words
    :type words: List[WordSegment]
    :param confidence: Overall transcription confidence., defaults to None
    :type confidence: float, optional
    :param transcript: The entire transcript with/without punctuations according to the input.
    :type transcript: str
    """

    def __init__(
        self,
        words: List[WordSegment],
        transcript: str,
        speaker_count: int = None,
        utterances: List[UtteranceObject] = None,
        confidence: float = None,
    ):
        if speaker_count is not None:
            self.speaker_count = speaker_count
        if utterances is not None:
            self.utterances = self._define_list(utterances, UtteranceObject)
        self.words = self._define_list(words, WordSegment)
        if confidence is not None:
            self.confidence = confidence
        self.transcript = transcript
