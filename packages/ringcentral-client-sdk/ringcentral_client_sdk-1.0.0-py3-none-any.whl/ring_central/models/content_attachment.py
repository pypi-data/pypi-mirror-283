# This file was generated by liblab | https://liblab.com/

from .utils.json_map import JsonMap
from .base import BaseModel


@JsonMap(
    {
        "content_type": "contentType",
        "creation_time": "creationTime",
        "id_": "id",
        "last_modified_time": "lastModifiedTime",
    }
)
class ContentAttachment(BaseModel):
    """ContentAttachment

    :param content_type: Type of the attachment, which is generally a MIME attachment type like "image/jpeg", etc.<br><br>Security level in ED determines what type of attachment is allowed.<br><br>Based on the security level the following attachment types are supported.<br><br>"Strict" level allows safe extensions below:<br>Content name and supported types<br>* audio (supports aac mp3 ogg m4a)<br>* image (supports bmp gif jpg jpeg png svg webp)<br>* pdf (supports pdf)<br>* text (supports csv txt log)<br>* video (supports avi flv m4v mkv mov mp4 mpg qt wmv)<br>* other (supports amr dms vcard tif tiff mpeg)<br><br>"Relaxed" level allows documents:<br>Content name and supported types<br>* excel (supports xls xlsm xlsx xlc xlt xltm xltx)<br>* presentation (supports key odp otp)<br>* powerpoint (supports pps ppt pptx pot)<br>* spreadsheet (supports numbers ods ots)<br>* word (supports doc docm docx dotm dotx)<br>* word_processing (supports pages odt ott rtf)<br><br>"Permissive" level allows all documents.<br><br>However, there are no security level restrictions for content posted through the channel.<br>, defaults to None
    :type content_type: str, optional
    :param creation_time: Creation time of the attachment., defaults to None
    :type creation_time: str, optional
    :param embedded: Embedded in a content., defaults to None
    :type embedded: bool, optional
    :param filename: Filename of the attachment., defaults to None
    :type filename: str, optional
    :param id_: Identifier of the attachment., defaults to None
    :type id_: str, optional
    :param public: Privacy setting of the attachment., defaults to None
    :type public: bool, optional
    :param size: Size of the attachment., defaults to None
    :type size: int, optional
    :param last_modified_time: The time when the last modification was completed., defaults to None
    :type last_modified_time: str, optional
    :param uri: Uri of the attachment., defaults to None
    :type uri: str, optional
    """

    def __init__(
        self,
        content_type: str = None,
        creation_time: str = None,
        embedded: bool = None,
        filename: str = None,
        id_: str = None,
        public: bool = None,
        size: int = None,
        last_modified_time: str = None,
        uri: str = None,
    ):
        if content_type is not None:
            self.content_type = content_type
        if creation_time is not None:
            self.creation_time = creation_time
        if embedded is not None:
            self.embedded = embedded
        if filename is not None:
            self.filename = filename
        if id_ is not None:
            self.id_ = id_
        if public is not None:
            self.public = public
        if size is not None:
            self.size = size
        if last_modified_time is not None:
            self.last_modified_time = last_modified_time
        if uri is not None:
            self.uri = uri
