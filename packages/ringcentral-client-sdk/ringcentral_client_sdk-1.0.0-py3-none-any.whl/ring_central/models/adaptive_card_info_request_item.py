# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .adaptive_card_column_info import AdaptiveCardColumnInfo


class AdaptiveCardInfoRequestItemType(Enum):
    """An enumeration representing different categories.

    :cvar TEXTBLOCK: "TextBlock"
    :vartype TEXTBLOCK: str
    :cvar COLUMNSET: "ColumnSet"
    :vartype COLUMNSET: str
    :cvar COLUMN: "Column"
    :vartype COLUMN: str
    :cvar FACTSET: "FactSet"
    :vartype FACTSET: str
    """

    TEXTBLOCK = "TextBlock"
    COLUMNSET = "ColumnSet"
    COLUMN = "Column"
    FACTSET = "FactSet"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value, AdaptiveCardInfoRequestItemType._member_map_.values()
            )
        )


@JsonMap({"type_": "type"})
class AdaptiveCardInfoRequestItem(BaseModel):
    """AdaptiveCardInfoRequestItem

    :param type_: type_, defaults to None
    :type type_: AdaptiveCardInfoRequestItemType, optional
    :param text: text, defaults to None
    :type text: str, optional
    :param weight: weight, defaults to None
    :type weight: str, optional
    :param size: size, defaults to None
    :type size: str, optional
    :param columns: columns, defaults to None
    :type columns: List[AdaptiveCardColumnInfo], optional
    """

    def __init__(
        self,
        type_: AdaptiveCardInfoRequestItemType = None,
        text: str = None,
        weight: str = None,
        size: str = None,
        columns: List[AdaptiveCardColumnInfo] = None,
    ):
        if type_ is not None:
            self.type_ = self._enum_matching(
                type_, AdaptiveCardInfoRequestItemType.list(), "type_"
            )
        if text is not None:
            self.text = text
        if weight is not None:
            self.weight = weight
        if size is not None:
            self.size = size
        if columns is not None:
            self.columns = self._define_list(columns, AdaptiveCardColumnInfo)
