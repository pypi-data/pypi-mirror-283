# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .bridge_response_security_password import BridgeResponseSecurityPassword


@JsonMap(
    {
        "password_protected": "passwordProtected",
        "no_guests": "noGuests",
        "same_account": "sameAccount",
    }
)
class BridgeResponseSecurity(BaseModel):
    """BridgeResponseSecurity

    :param password_protected: Specifies if a meeting is password protected., defaults to None
    :type password_protected: bool, optional
    :param password: password, defaults to None
    :type password: BridgeResponseSecurityPassword, optional
    :param no_guests: If true, only authenticated users can join to a meeting., defaults to None
    :type no_guests: bool, optional
    :param same_account: If true, only users have the same account can join to a meeting., defaults to None
    :type same_account: bool, optional
    :param e2ee: If true, end to end encryption will be enabled for a meeting., defaults to None
    :type e2ee: bool, optional
    """

    def __init__(
        self,
        password_protected: bool = None,
        password: BridgeResponseSecurityPassword = None,
        no_guests: bool = None,
        same_account: bool = None,
        e2ee: bool = None,
    ):
        if password_protected is not None:
            self.password_protected = password_protected
        if password is not None:
            self.password = self._define_object(
                password, BridgeResponseSecurityPassword
            )
        if no_guests is not None:
            self.no_guests = no_guests
        if same_account is not None:
            self.same_account = same_account
        if e2ee is not None:
            self.e2ee = e2ee
