# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class MessageAttachmentInfoIntIdType(Enum):
    """An enumeration representing different categories.

    :cvar AUDIORECORDING: "AudioRecording"
    :vartype AUDIORECORDING: str
    :cvar AUDIOTRANSCRIPTION: "AudioTranscription"
    :vartype AUDIOTRANSCRIPTION: str
    :cvar TEXT: "Text"
    :vartype TEXT: str
    :cvar SOURCEDOCUMENT: "SourceDocument"
    :vartype SOURCEDOCUMENT: str
    :cvar RENDEREDDOCUMENT: "RenderedDocument"
    :vartype RENDEREDDOCUMENT: str
    :cvar MMSATTACHMENT: "MmsAttachment"
    :vartype MMSATTACHMENT: str
    """

    AUDIORECORDING = "AudioRecording"
    AUDIOTRANSCRIPTION = "AudioTranscription"
    TEXT = "Text"
    SOURCEDOCUMENT = "SourceDocument"
    RENDEREDDOCUMENT = "RenderedDocument"
    MMSATTACHMENT = "MmsAttachment"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, MessageAttachmentInfoIntIdType._member_map_.values())
        )


@JsonMap({"id_": "id", "type_": "type", "content_type": "contentType"})
class MessageAttachmentInfoIntId(BaseModel):
    """MessageAttachmentInfoIntId

    :param id_: Internal identifier of a message attachment, defaults to None
    :type id_: int, optional
    :param uri: Canonical URI of a message attachment, defaults to None
    :type uri: str, optional
    :param type_: Type of message attachment, defaults to None
    :type type_: MessageAttachmentInfoIntIdType, optional
    :param content_type: MIME type for a given attachment, for instance 'audio/wav', defaults to None
    :type content_type: str, optional
    :param filename: Name of a file attached, defaults to None
    :type filename: str, optional
    :param size: Size of an attachment in bytes, defaults to None
    :type size: int, optional
    """

    def __init__(
        self,
        id_: int = None,
        uri: str = None,
        type_: MessageAttachmentInfoIntIdType = None,
        content_type: str = None,
        filename: str = None,
        size: int = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if uri is not None:
            self.uri = uri
        if type_ is not None:
            self.type_ = self._enum_matching(
                type_, MessageAttachmentInfoIntIdType.list(), "type_"
            )
        if content_type is not None:
            self.content_type = content_type
        if filename is not None:
            self.filename = filename
        if size is not None:
            self.size = size
