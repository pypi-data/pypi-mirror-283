# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel
from .answering_rule_query_request import AnsweringRuleQueryRequest


class CreateCustomUserGreetingRequestType1(Enum):
    """An enumeration representing different categories.

    :cvar INTRODUCTORY: "Introductory"
    :vartype INTRODUCTORY: str
    :cvar ANNOUNCEMENT: "Announcement"
    :vartype ANNOUNCEMENT: str
    :cvar CONNECTINGMESSAGE: "ConnectingMessage"
    :vartype CONNECTINGMESSAGE: str
    :cvar CONNECTINGAUDIO: "ConnectingAudio"
    :vartype CONNECTINGAUDIO: str
    :cvar VOICEMAIL: "Voicemail"
    :vartype VOICEMAIL: str
    :cvar UNAVAILABLE: "Unavailable"
    :vartype UNAVAILABLE: str
    :cvar HOLDMUSIC: "HoldMusic"
    :vartype HOLDMUSIC: str
    :cvar TEMPLATEGREETING: "TemplateGreeting"
    :vartype TEMPLATEGREETING: str
    """

    INTRODUCTORY = "Introductory"
    ANNOUNCEMENT = "Announcement"
    CONNECTINGMESSAGE = "ConnectingMessage"
    CONNECTINGAUDIO = "ConnectingAudio"
    VOICEMAIL = "Voicemail"
    UNAVAILABLE = "Unavailable"
    HOLDMUSIC = "HoldMusic"
    TEMPLATEGREETING = "TemplateGreeting"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                CreateCustomUserGreetingRequestType1._member_map_.values(),
            )
        )


@JsonMap({"type_": "type", "answering_rule": "answeringRule"})
class GreetingsCreateCustomUserGreetingRequest1(BaseModel):
    """GreetingsCreateCustomUserGreetingRequest1

    :param type_: Type of greeting, specifying the case when the greeting is played.
    :type type_: CreateCustomUserGreetingRequestType1
    :param answering_rule: answering_rule
    :type answering_rule: AnsweringRuleQueryRequest
    :param binary: Media file to upload
    :type binary: any
    """

    def __init__(
        self,
        type_: CreateCustomUserGreetingRequestType1,
        answering_rule: AnsweringRuleQueryRequest,
        binary: any,
    ):
        self.type_ = self._enum_matching(
            type_, CreateCustomUserGreetingRequestType1.list(), "type_"
        )
        self.answering_rule = self._define_object(
            answering_rule, AnsweringRuleQueryRequest
        )
        self.binary = binary
