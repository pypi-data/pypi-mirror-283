# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .pic_message_type_enum import PicMessageTypeEnum


@JsonMap(
    {"date_to": "dateTo", "date_from": "dateFrom", "message_types": "messageTypes"}
)
class CreateMessageStoreReportRequest(BaseModel):
    """CreateMessageStoreReportRequest

    :param date_to: The end of the time range to collect message records in ISO 8601 format including timezone.<br>Default is the current time<br>, defaults to None
    :type date_to: str, optional
    :param date_from: The beginning of the time range to collect call log records in ISO 8601 format including timezone.<br>Default is the current time minus 24 hours<br>, defaults to None
    :type date_from: str, optional
    :param message_types: Types of messages to be collected. If not specified, all messages without message type filtering will be returned. Multiple values are accepted, defaults to None
    :type message_types: List[PicMessageTypeEnum], optional
    """

    def __init__(
        self,
        date_to: str = None,
        date_from: str = None,
        message_types: List[PicMessageTypeEnum] = None,
    ):
        if date_to is not None:
            self.date_to = date_to
        if date_from is not None:
            self.date_from = date_from
        if message_types is not None:
            self.message_types = self._define_list(message_types, PicMessageTypeEnum)
