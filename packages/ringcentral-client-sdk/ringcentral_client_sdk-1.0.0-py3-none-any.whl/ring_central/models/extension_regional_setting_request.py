# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel
from .extension_country_info_request import ExtensionCountryInfoRequest
from .extension_timezone_info_request import ExtensionTimezoneInfoRequest
from .extension_language_info_request import ExtensionLanguageInfoRequest
from .extension_greeting_language_info_request import (
    ExtensionGreetingLanguageInfoRequest,
)
from .extension_formatting_locale_info_request import (
    ExtensionFormattingLocaleInfoRequest,
)
from .extension_currency_info_request import ExtensionCurrencyInfoRequest


class ExtensionRegionalSettingRequestTimeFormat(Enum):
    """An enumeration representing different categories.

    :cvar _12H: "12h"
    :vartype _12H: str
    :cvar _24H: "24h"
    :vartype _24H: str
    """

    _12H = "12h"
    _24H = "24h"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                ExtensionRegionalSettingRequestTimeFormat._member_map_.values(),
            )
        )


@JsonMap(
    {
        "home_country": "homeCountry",
        "greeting_language": "greetingLanguage",
        "formatting_locale": "formattingLocale",
        "time_format": "timeFormat",
    }
)
class ExtensionRegionalSettingRequest(BaseModel):
    """ExtensionRegionalSettingRequest

    :param home_country: home_country, defaults to None
    :type home_country: ExtensionCountryInfoRequest, optional
    :param timezone: timezone, defaults to None
    :type timezone: ExtensionTimezoneInfoRequest, optional
    :param language: language, defaults to None
    :type language: ExtensionLanguageInfoRequest, optional
    :param greeting_language: greeting_language, defaults to None
    :type greeting_language: ExtensionGreetingLanguageInfoRequest, optional
    :param formatting_locale: formatting_locale, defaults to None
    :type formatting_locale: ExtensionFormattingLocaleInfoRequest, optional
    :param currency: currency, defaults to None
    :type currency: ExtensionCurrencyInfoRequest, optional
    :param time_format: Time format setting, defaults to None
    :type time_format: ExtensionRegionalSettingRequestTimeFormat, optional
    """

    def __init__(
        self,
        home_country: ExtensionCountryInfoRequest = None,
        timezone: ExtensionTimezoneInfoRequest = None,
        language: ExtensionLanguageInfoRequest = None,
        greeting_language: ExtensionGreetingLanguageInfoRequest = None,
        formatting_locale: ExtensionFormattingLocaleInfoRequest = None,
        currency: ExtensionCurrencyInfoRequest = None,
        time_format: ExtensionRegionalSettingRequestTimeFormat = None,
    ):
        if home_country is not None:
            self.home_country = self._define_object(
                home_country, ExtensionCountryInfoRequest
            )
        if timezone is not None:
            self.timezone = self._define_object(timezone, ExtensionTimezoneInfoRequest)
        if language is not None:
            self.language = self._define_object(language, ExtensionLanguageInfoRequest)
        if greeting_language is not None:
            self.greeting_language = self._define_object(
                greeting_language, ExtensionGreetingLanguageInfoRequest
            )
        if formatting_locale is not None:
            self.formatting_locale = self._define_object(
                formatting_locale, ExtensionFormattingLocaleInfoRequest
            )
        if currency is not None:
            self.currency = self._define_object(currency, ExtensionCurrencyInfoRequest)
        if time_format is not None:
            self.time_format = self._enum_matching(
                time_format,
                ExtensionRegionalSettingRequestTimeFormat.list(),
                "time_format",
            )
