# This file was generated by liblab | https://liblab.com/

from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel


class ScimSearchRequestSchemas(Enum):
    """An enumeration representing different categories.

    :cvar URN_IETF_PARAMS_SCIM_API_MESSAGES_2_0_SEARCHREQUEST: "urn:ietf:params:scim:api:messages:2.0:SearchRequest"
    :vartype URN_IETF_PARAMS_SCIM_API_MESSAGES_2_0_SEARCHREQUEST: str
    """

    URN_IETF_PARAMS_SCIM_API_MESSAGES_2_0_SEARCHREQUEST = (
        "urn:ietf:params:scim:api:messages:2.0:SearchRequest"
    )

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, ScimSearchRequestSchemas._member_map_.values())
        )


@JsonMap({"start_index": "startIndex"})
class ScimSearchRequest(BaseModel):
    """ScimSearchRequest

    :param count: Page size, defaults to None
    :type count: int, optional
    :param filter: Only support 'userName' or 'email' filter expressions for now, defaults to None
    :type filter: str, optional
    :param schemas: schemas, defaults to None
    :type schemas: List[ScimSearchRequestSchemas], optional
    :param start_index: Start index (1-based), defaults to None
    :type start_index: int, optional
    """

    def __init__(
        self,
        count: int = None,
        filter: str = None,
        schemas: List[ScimSearchRequestSchemas] = None,
        start_index: int = None,
    ):
        if count is not None:
            self.count = count
        if filter is not None:
            self.filter = filter
        if schemas is not None:
            self.schemas = self._define_list(schemas, ScimSearchRequestSchemas)
        if start_index is not None:
            self.start_index = start_index
