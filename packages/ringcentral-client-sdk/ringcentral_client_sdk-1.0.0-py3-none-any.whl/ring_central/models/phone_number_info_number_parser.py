# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .get_country_info_number_parser import GetCountryInfoNumberParser


@JsonMap(
    {
        "original_string": "originalString",
        "area_code": "areaCode",
        "formatted_international": "formattedInternational",
        "formatted_national": "formattedNational",
        "toll_free": "tollFree",
        "sub_address": "subAddress",
        "subscriber_number": "subscriberNumber",
        "dtmf_postfix": "dtmfPostfix",
    }
)
class PhoneNumberInfoNumberParser(BaseModel):
    """PhoneNumberInfoNumberParser

    :param original_string: Original phone number string as it was passed in the request, defaults to None
    :type original_string: str, optional
    :param country: country, defaults to None
    :type country: GetCountryInfoNumberParser, optional
    :param area_code: Area code of location. The portion of the [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I)<br>number that identifies a specific geographic region/numbering area of<br>the national numbering plan (NANP); that can be summarized as `NPA-NXX-xxxx`<br>and covers Canada, the United States, parts of the Caribbean Sea, and<br>some Atlantic and Pacific islands.<br>See [North American Numbering Plan](https://en.wikipedia.org/wiki/North_American_Numbering_Plan)<br>for details<br>, defaults to None
    :type area_code: str, optional
    :param dialable: Dialing format of a phone number, defaults to None
    :type dialable: str, optional
    :param e164: Phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format, defaults to None
    :type e164: str, optional
    :param formatted_international: The formatted phone number string in international format, defaults to None
    :type formatted_international: str, optional
    :param formatted_national: The formatted phone number string in domestic format, defaults to None
    :type formatted_national: str, optional
    :param special: Indicates if the number is in a special format (for example N11 code)', defaults to None
    :type special: bool, optional
    :param normalized: Phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format without plus sign ('+'), defaults to None
    :type normalized: str, optional
    :param toll_free: Indicates if the number is toll free, defaults to None
    :type toll_free: bool, optional
    :param sub_address: Sub-Address. The portion of the number that identifies a subscriber into the subscriber internal (non-public) network., defaults to None
    :type sub_address: str, optional
    :param subscriber_number: Subscriber number. The portion of the [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) number that identifies a subscriber in a network or numbering area., defaults to None
    :type subscriber_number: str, optional
    :param dtmf_postfix: DTMF (Dual Tone Multi-Frequency) postfix, defaults to None
    :type dtmf_postfix: str, optional
    """

    def __init__(
        self,
        original_string: str = None,
        country: GetCountryInfoNumberParser = None,
        area_code: str = None,
        dialable: str = None,
        e164: str = None,
        formatted_international: str = None,
        formatted_national: str = None,
        special: bool = None,
        normalized: str = None,
        toll_free: bool = None,
        sub_address: str = None,
        subscriber_number: str = None,
        dtmf_postfix: str = None,
    ):
        if original_string is not None:
            self.original_string = original_string
        if country is not None:
            self.country = self._define_object(country, GetCountryInfoNumberParser)
        if area_code is not None:
            self.area_code = area_code
        if dialable is not None:
            self.dialable = dialable
        if e164 is not None:
            self.e164 = e164
        if formatted_international is not None:
            self.formatted_international = formatted_international
        if formatted_national is not None:
            self.formatted_national = formatted_national
        if special is not None:
            self.special = special
        if normalized is not None:
            self.normalized = normalized
        if toll_free is not None:
            self.toll_free = toll_free
        if sub_address is not None:
            self.sub_address = sub_address
        if subscriber_number is not None:
            self.subscriber_number = subscriber_number
        if dtmf_postfix is not None:
            self.dtmf_postfix = dtmf_postfix
