# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .summary_timings_unit import SummaryTimingsUnit


class SummaryOutputUnitName(Enum):
    """An enumeration representing different categories.

    :cvar EXTRACTIVE: "Extractive"
    :vartype EXTRACTIVE: str
    :cvar ABSTRACTIVELONG: "AbstractiveLong"
    :vartype ABSTRACTIVELONG: str
    :cvar ABSTRACTIVESHORT: "AbstractiveShort"
    :vartype ABSTRACTIVESHORT: str
    :cvar ALL: "All"
    :vartype ALL: str
    """

    EXTRACTIVE = "Extractive"
    ABSTRACTIVELONG = "AbstractiveLong"
    ABSTRACTIVESHORT = "AbstractiveShort"
    ALL = "All"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, SummaryOutputUnitName._member_map_.values()))


@JsonMap({})
class SummaryOutputUnit(BaseModel):
    """SummaryOutputUnit

    :param name: name, defaults to None
    :type name: SummaryOutputUnitName, optional
    :param values: Summary output units sorted by their occurrence in the conversation, defaults to None
    :type values: List[SummaryTimingsUnit], optional
    """

    def __init__(
        self,
        name: SummaryOutputUnitName = None,
        values: List[SummaryTimingsUnit] = None,
    ):
        if name is not None:
            self.name = self._enum_matching(name, SummaryOutputUnitName.list(), "name")
        if values is not None:
            self.values = self._define_list(values, SummaryTimingsUnit)
