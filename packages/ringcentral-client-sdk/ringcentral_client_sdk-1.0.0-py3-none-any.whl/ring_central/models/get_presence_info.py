# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .get_presence_extension_info import GetPresenceExtensionInfo
from .active_call_info import ActiveCallInfo


class GetPresenceInfoCallerIdVisibility(Enum):
    """An enumeration representing different categories.

    :cvar ALL: "All"
    :vartype ALL: str
    :cvar NONE: "None"
    :vartype NONE: str
    :cvar PERMITTEDUSERS: "PermittedUsers"
    :vartype PERMITTEDUSERS: str
    """

    ALL = "All"
    NONE = "None"
    PERMITTEDUSERS = "PermittedUsers"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                GetPresenceInfoCallerIdVisibility._member_map_.values(),
            )
        )


class GetPresenceInfoDndStatus(Enum):
    """An enumeration representing different categories.

    :cvar TAKEALLCALLS: "TakeAllCalls"
    :vartype TAKEALLCALLS: str
    :cvar DONOTACCEPTANYCALLS: "DoNotAcceptAnyCalls"
    :vartype DONOTACCEPTANYCALLS: str
    :cvar DONOTACCEPTDEPARTMENTCALLS: "DoNotAcceptDepartmentCalls"
    :vartype DONOTACCEPTDEPARTMENTCALLS: str
    :cvar TAKEDEPARTMENTCALLSONLY: "TakeDepartmentCallsOnly"
    :vartype TAKEDEPARTMENTCALLSONLY: str
    """

    TAKEALLCALLS = "TakeAllCalls"
    DONOTACCEPTANYCALLS = "DoNotAcceptAnyCalls"
    DONOTACCEPTDEPARTMENTCALLS = "DoNotAcceptDepartmentCalls"
    TAKEDEPARTMENTCALLSONLY = "TakeDepartmentCallsOnly"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, GetPresenceInfoDndStatus._member_map_.values())
        )


class GetPresenceInfoPresenceStatus(Enum):
    """An enumeration representing different categories.

    :cvar OFFLINE: "Offline"
    :vartype OFFLINE: str
    :cvar BUSY: "Busy"
    :vartype BUSY: str
    :cvar AVAILABLE: "Available"
    :vartype AVAILABLE: str
    """

    OFFLINE = "Offline"
    BUSY = "Busy"
    AVAILABLE = "Available"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, GetPresenceInfoPresenceStatus._member_map_.values())
        )


class GetPresenceInfoTelephonyStatus(Enum):
    """An enumeration representing different categories.

    :cvar NOCALL: "NoCall"
    :vartype NOCALL: str
    :cvar CALLCONNECTED: "CallConnected"
    :vartype CALLCONNECTED: str
    :cvar RINGING: "Ringing"
    :vartype RINGING: str
    :cvar ONHOLD: "OnHold"
    :vartype ONHOLD: str
    :cvar PARKEDCALL: "ParkedCall"
    :vartype PARKEDCALL: str
    """

    NOCALL = "NoCall"
    CALLCONNECTED = "CallConnected"
    RINGING = "Ringing"
    ONHOLD = "OnHold"
    PARKEDCALL = "ParkedCall"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, GetPresenceInfoTelephonyStatus._member_map_.values())
        )


class GetPresenceInfoUserStatus(Enum):
    """An enumeration representing different categories.

    :cvar OFFLINE: "Offline"
    :vartype OFFLINE: str
    :cvar BUSY: "Busy"
    :vartype BUSY: str
    :cvar AVAILABLE: "Available"
    :vartype AVAILABLE: str
    """

    OFFLINE = "Offline"
    BUSY = "Busy"
    AVAILABLE = "Available"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, GetPresenceInfoUserStatus._member_map_.values())
        )


class GetPresenceInfoMeetingStatus(Enum):
    """An enumeration representing different categories.

    :cvar CONNECTED: "Connected"
    :vartype CONNECTED: str
    :cvar DISCONNECTED: "Disconnected"
    :vartype DISCONNECTED: str
    """

    CONNECTED = "Connected"
    DISCONNECTED = "Disconnected"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, GetPresenceInfoMeetingStatus._member_map_.values())
        )


@JsonMap(
    {
        "allow_see_my_presence": "allowSeeMyPresence",
        "caller_id_visibility": "callerIdVisibility",
        "dnd_status": "dndStatus",
        "pick_up_calls_on_hold": "pickUpCallsOnHold",
        "presence_status": "presenceStatus",
        "ring_on_monitored_call": "ringOnMonitoredCall",
        "telephony_status": "telephonyStatus",
        "user_status": "userStatus",
        "meeting_status": "meetingStatus",
        "active_calls": "activeCalls",
    }
)
class GetPresenceInfo(BaseModel):
    """GetPresenceInfo

    :param uri: Canonical URI of a presence info resource, defaults to None
    :type uri: str, optional
    :param allow_see_my_presence: If set to `true` - enables other extensions to see the extension presence status, defaults to None
    :type allow_see_my_presence: bool, optional
    :param caller_id_visibility: Configures the user presence visibility. When the `allowSeeMyPresence` parameter is set to `true`, <br>the following visibility options are supported via this parameter - All, None, PermittedUsers<br>, defaults to None
    :type caller_id_visibility: GetPresenceInfoCallerIdVisibility, optional
    :param dnd_status: Extended DnD (Do not Disturb) status. Cannot be set for Department/Announcement/Voicemail<br>(Take Messages Only)/Fax User/Shared Lines Group/Paging Only Group/IVR<br>Menu/Application Extension/Park Location extensions. The 'DoNotAcceptDepartmentCalls'<br>and 'TakeDepartmentCallsOnly' values are applicable only for extensions<br>- members of a Department; if these values are set for department outsiders,<br>the 400 Bad Request error code is returned. The 'TakeDepartmentCallsOnly'<br>status can be set through the old RingCentral user interface and is available<br>for some migrated accounts only.<br>, defaults to None
    :type dnd_status: GetPresenceInfoDndStatus, optional
    :param extension: Information on extension, for which this presence data is returned, defaults to None
    :type extension: GetPresenceExtensionInfo, optional
    :param message: Custom status message (as previously published by user), defaults to None
    :type message: str, optional
    :param pick_up_calls_on_hold: If `true` enables the extension user to pick up a monitored line on hold, defaults to None
    :type pick_up_calls_on_hold: bool, optional
    :param presence_status: Aggregated presence status, calculated from a number of sources, defaults to None
    :type presence_status: GetPresenceInfoPresenceStatus, optional
    :param ring_on_monitored_call: If `true` enables to ring extension phone, if any user monitored by this extension is ringing, defaults to None
    :type ring_on_monitored_call: bool, optional
    :param telephony_status: Telephony presence status, defaults to None
    :type telephony_status: GetPresenceInfoTelephonyStatus, optional
    :param user_status: User-defined presence status (as previously published by the user), defaults to None
    :type user_status: GetPresenceInfoUserStatus, optional
    :param meeting_status: RingCentral Meetings presence, defaults to None
    :type meeting_status: GetPresenceInfoMeetingStatus, optional
    :param active_calls: Information on active calls, defaults to None
    :type active_calls: List[ActiveCallInfo], optional
    """

    def __init__(
        self,
        uri: str = None,
        allow_see_my_presence: bool = None,
        caller_id_visibility: GetPresenceInfoCallerIdVisibility = None,
        dnd_status: GetPresenceInfoDndStatus = None,
        extension: GetPresenceExtensionInfo = None,
        message: str = None,
        pick_up_calls_on_hold: bool = None,
        presence_status: GetPresenceInfoPresenceStatus = None,
        ring_on_monitored_call: bool = None,
        telephony_status: GetPresenceInfoTelephonyStatus = None,
        user_status: GetPresenceInfoUserStatus = None,
        meeting_status: GetPresenceInfoMeetingStatus = None,
        active_calls: List[ActiveCallInfo] = None,
    ):
        if uri is not None:
            self.uri = uri
        if allow_see_my_presence is not None:
            self.allow_see_my_presence = allow_see_my_presence
        if caller_id_visibility is not None:
            self.caller_id_visibility = self._enum_matching(
                caller_id_visibility,
                GetPresenceInfoCallerIdVisibility.list(),
                "caller_id_visibility",
            )
        if dnd_status is not None:
            self.dnd_status = self._enum_matching(
                dnd_status, GetPresenceInfoDndStatus.list(), "dnd_status"
            )
        if extension is not None:
            self.extension = self._define_object(extension, GetPresenceExtensionInfo)
        if message is not None:
            self.message = message
        if pick_up_calls_on_hold is not None:
            self.pick_up_calls_on_hold = pick_up_calls_on_hold
        if presence_status is not None:
            self.presence_status = self._enum_matching(
                presence_status, GetPresenceInfoPresenceStatus.list(), "presence_status"
            )
        if ring_on_monitored_call is not None:
            self.ring_on_monitored_call = ring_on_monitored_call
        if telephony_status is not None:
            self.telephony_status = self._enum_matching(
                telephony_status,
                GetPresenceInfoTelephonyStatus.list(),
                "telephony_status",
            )
        if user_status is not None:
            self.user_status = self._enum_matching(
                user_status, GetPresenceInfoUserStatus.list(), "user_status"
            )
        if meeting_status is not None:
            self.meeting_status = self._enum_matching(
                meeting_status, GetPresenceInfoMeetingStatus.list(), "meeting_status"
            )
        if active_calls is not None:
            self.active_calls = self._define_list(active_calls, ActiveCallInfo)
