# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .create_forwarding_number_device_info import CreateForwardingNumberDeviceInfo


class ForwardingNumberInfoFeatures(Enum):
    """An enumeration representing different categories.

    :cvar CALLFLIP: "CallFlip"
    :vartype CALLFLIP: str
    :cvar CALLFORWARDING: "CallForwarding"
    :vartype CALLFORWARDING: str
    """

    CALLFLIP = "CallFlip"
    CALLFORWARDING = "CallForwarding"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, ForwardingNumberInfoFeatures._member_map_.values())
        )


class ForwardingNumberInfoType(Enum):
    """An enumeration representing different categories.

    :cvar HOME: "Home"
    :vartype HOME: str
    :cvar MOBILE: "Mobile"
    :vartype MOBILE: str
    :cvar WORK: "Work"
    :vartype WORK: str
    :cvar PHONELINE: "PhoneLine"
    :vartype PHONELINE: str
    :cvar OUTAGE: "Outage"
    :vartype OUTAGE: str
    :cvar OTHER: "Other"
    :vartype OTHER: str
    :cvar BUSINESSMOBILEPHONE: "BusinessMobilePhone"
    :vartype BUSINESSMOBILEPHONE: str
    :cvar EXTERNALCARRIER: "ExternalCarrier"
    :vartype EXTERNALCARRIER: str
    :cvar EXTENSIONAPPS: "ExtensionApps"
    :vartype EXTENSIONAPPS: str
    """

    HOME = "Home"
    MOBILE = "Mobile"
    WORK = "Work"
    PHONELINE = "PhoneLine"
    OUTAGE = "Outage"
    OTHER = "Other"
    BUSINESSMOBILEPHONE = "BusinessMobilePhone"
    EXTERNALCARRIER = "ExternalCarrier"
    EXTENSIONAPPS = "ExtensionApps"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, ForwardingNumberInfoType._member_map_.values())
        )


@JsonMap({"id_": "id", "extension_number": "extensionNumber"})
class ForwardingNumberInfoExtension(BaseModel):
    """Extension information. Returned only if extension type is 'ExtensionApps'

    :param id_: Internal identifier of an extension, defaults to None
    :type id_: str, optional
    :param extension_number: Number of an extension, defaults to None
    :type extension_number: str, optional
    :param name: Extension name, defaults to None
    :type name: str, optional
    """

    def __init__(self, id_: str = None, extension_number: str = None, name: str = None):
        if id_ is not None:
            self.id_ = id_
        if extension_number is not None:
            self.extension_number = extension_number
        if name is not None:
            self.name = name


@JsonMap(
    {
        "id_": "id",
        "phone_number": "phoneNumber",
        "flip_number": "flipNumber",
        "type_": "type",
    }
)
class ForwardingNumberInfo(BaseModel):
    """ForwardingNumberInfo

    :param id_: Internal identifier of a forwarding/call flip phone number, defaults to None
    :type id_: str, optional
    :param uri: Canonical URI of a forwarding/call flip phone number, defaults to None
    :type uri: str, optional
    :param phone_number: Forwarding/Call flip phone number, defaults to None
    :type phone_number: str, optional
    :param label: Forwarding/Call flip number title, defaults to None
    :type label: str, optional
    :param features: Type of option this phone number is used for. Multiple values are accepted, defaults to None
    :type features: List[ForwardingNumberInfoFeatures], optional
    :param flip_number: Number assigned to the call flip phone number, corresponds to the shortcut dial number, defaults to None
    :type flip_number: str, optional
    :param device: Forwarding device information. Applicable for 'PhoneLine' type only.<br>Cannot be specified together with 'phoneNumber' parameter<br>, defaults to None
    :type device: CreateForwardingNumberDeviceInfo, optional
    :param type_: Forwarding phone number type, defaults to None
    :type type_: ForwardingNumberInfoType, optional
    :param extension: Extension information. Returned only if extension type is 'ExtensionApps', defaults to None
    :type extension: ForwardingNumberInfoExtension, optional
    """

    def __init__(
        self,
        id_: str = None,
        uri: str = None,
        phone_number: str = None,
        label: str = None,
        features: List[ForwardingNumberInfoFeatures] = None,
        flip_number: str = None,
        device: CreateForwardingNumberDeviceInfo = None,
        type_: ForwardingNumberInfoType = None,
        extension: ForwardingNumberInfoExtension = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if uri is not None:
            self.uri = uri
        if phone_number is not None:
            self.phone_number = phone_number
        if label is not None:
            self.label = label
        if features is not None:
            self.features = self._define_list(features, ForwardingNumberInfoFeatures)
        if flip_number is not None:
            self.flip_number = flip_number
        if device is not None:
            self.device = self._define_object(device, CreateForwardingNumberDeviceInfo)
        if type_ is not None:
            self.type_ = self._enum_matching(
                type_, ForwardingNumberInfoType.list(), "type_"
            )
        if extension is not None:
            self.extension = self._define_object(
                extension, ForwardingNumberInfoExtension
            )
