# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel


@JsonMap({"type_": "type"})
class Parameters(BaseModel):
    """Parameters

    :param type_: type_, defaults to None
    :type type_: str, optional
    :param text: text, defaults to None
    :type text: str, optional
    """

    def __init__(self, type_: str = None, text: str = None):
        if type_ is not None:
            self.type_ = type_
        if text is not None:
            self.text = text


@JsonMap({"type_": "type"})
class ContentComponents(BaseModel):
    """ContentComponents

    :param type_: type_, defaults to None
    :type type_: str, optional
    :param parameters: parameters, defaults to None
    :type parameters: List[Parameters], optional
    """

    def __init__(self, type_: str = None, parameters: List[Parameters] = None):
        if type_ is not None:
            self.type_ = type_
        if parameters is not None:
            self.parameters = self._define_list(parameters, Parameters)
