# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class ExtensionStatusInfoReason(Enum):
    """An enumeration representing different categories.

    :cvar SUSPENDEDVOLUNTARILY: "SuspendedVoluntarily"
    :vartype SUSPENDEDVOLUNTARILY: str
    :cvar SUSPENDEDINVOLUNTARILY: "SuspendedInvoluntarily"
    :vartype SUSPENDEDINVOLUNTARILY: str
    :cvar CANCELLEDVOLUNTARILY: "CancelledVoluntarily"
    :vartype CANCELLEDVOLUNTARILY: str
    :cvar CANCELLEDINVOLUNTARILY: "CancelledInvoluntarily"
    :vartype CANCELLEDINVOLUNTARILY: str
    """

    SUSPENDEDVOLUNTARILY = "SuspendedVoluntarily"
    SUSPENDEDINVOLUNTARILY = "SuspendedInvoluntarily"
    CANCELLEDVOLUNTARILY = "CancelledVoluntarily"
    CANCELLEDINVOLUNTARILY = "CancelledInvoluntarily"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, ExtensionStatusInfoReason._member_map_.values())
        )


@JsonMap({})
class ExtensionStatusInfo(BaseModel):
    """Status information (reason, comment). Returned for 'Disabled'
    status only


    :param comment: A free-form user comment, describing the status change reason, defaults to None
    :type comment: str, optional
    :param reason: Type of suspension, defaults to None
    :type reason: ExtensionStatusInfoReason, optional
    :param till: Date until which an account will get deleted. The default<br>value is 30 days since the current date<br>, defaults to None
    :type till: str, optional
    """

    def __init__(
        self,
        comment: str = None,
        reason: ExtensionStatusInfoReason = None,
        till: str = None,
    ):
        if comment is not None:
            self.comment = comment
        if reason is not None:
            self.reason = self._enum_matching(
                reason, ExtensionStatusInfoReason.list(), "reason"
            )
        if till is not None:
            self.till = till
