# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .wcs_session_status_model import WcsSessionStatusModel


@JsonMap(
    {
        "id_": "id",
        "creation_time": "creationTime",
        "last_modified_time": "lastModifiedTime",
        "scheduled_start_time": "scheduledStartTime",
        "scheduled_duration": "scheduledDuration",
        "time_zone": "timeZone",
        "localized_time_zone_description": "localizedTimeZoneDescription",
        "panel_join_time_offset": "panelJoinTimeOffset",
        "host_join_uri": "hostJoinUri",
        "locale_code": "localeCode",
        "video_bridge_id": "videoBridgeId",
        "video_bridge_password": "videoBridgePassword",
        "video_bridge_pstn_password": "videoBridgePstnPassword",
        "attendee_join_uri": "attendeeJoinUri",
        "has_unsent_invites": "hasUnsentInvites",
    }
)
class WcsSessionResource(BaseModel):
    """WcsSessionResource

    :param id_: Internal object ID, defaults to None
    :type id_: str, optional
    :param creation_time: Object creation time
    :type creation_time: str
    :param last_modified_time: Object last modification time
    :type last_modified_time: str
    :param scheduled_start_time: Session scheduled start time.
    :type scheduled_start_time: str
    :param scheduled_duration: The duration of the Session in seconds.
    :type scheduled_duration: int
    :param time_zone: IANA-compatible time zone name (see https://www.iana.org/time-zones).
    :type time_zone: str
    :param localized_time_zone_description: Localized time zone description., defaults to None
    :type localized_time_zone_description: str, optional
    :param panel_join_time_offset: The time offset (positive, in seconds) indicating how much in advance<br>(comparing to "scheduledStartTime") panel members should join for the pre-webinar team sync<br>, defaults to None
    :type panel_join_time_offset: int, optional
    :param title: Session title. Can be left blank - then Webinar title should be used for presentation., defaults to None
    :type title: str, optional
    :param description: User-friendly description of the Session. Can be left blank - then Webinar title should be used for presentation., defaults to None
    :type description: str, optional
    :param status: Session status (for the purposes of Configuration service), defaults to None
    :type status: WcsSessionStatusModel, optional
    :param host_join_uri: The URI to join the webinar as a host, defaults to None
    :type host_join_uri: str, optional
    :param locale_code: Session locale code. Can't be blank or null, defaults to None
    :type locale_code: str, optional
    :param video_bridge_id: The RCV bridge id, defaults to None
    :type video_bridge_id: str, optional
    :param video_bridge_password: The RCV bridge password. Returned only if requested by Host/Co-host/Panelist and a password for the bridge is set., defaults to None
    :type video_bridge_password: str, optional
    :param video_bridge_pstn_password: The RCV bridge PSTN password. Returned only if requested by Host/Co-host/Panelist and a PSTN password for the bridge is set., defaults to None
    :type video_bridge_pstn_password: str, optional
    :param attendee_join_uri: The URI for attendees to join the Webinar (if it is a public webinar), defaults to None
    :type attendee_join_uri: str, optional
    :param has_unsent_invites: Calculated attribute indicating if there are any unsent/deferred invites to session participants, defaults to None
    :type has_unsent_invites: bool, optional
    """

    def __init__(
        self,
        creation_time: str,
        last_modified_time: str,
        scheduled_start_time: str,
        scheduled_duration: int,
        time_zone: str,
        id_: str = None,
        localized_time_zone_description: str = None,
        panel_join_time_offset: int = None,
        title: str = None,
        description: str = None,
        status: WcsSessionStatusModel = None,
        host_join_uri: str = None,
        locale_code: str = None,
        video_bridge_id: str = None,
        video_bridge_password: str = None,
        video_bridge_pstn_password: str = None,
        attendee_join_uri: str = None,
        has_unsent_invites: bool = None,
    ):
        if id_ is not None:
            self.id_ = id_
        self.creation_time = creation_time
        self.last_modified_time = last_modified_time
        self.scheduled_start_time = scheduled_start_time
        self.scheduled_duration = scheduled_duration
        self.time_zone = time_zone
        if localized_time_zone_description is not None:
            self.localized_time_zone_description = localized_time_zone_description
        if panel_join_time_offset is not None:
            self.panel_join_time_offset = panel_join_time_offset
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if status is not None:
            self.status = self._enum_matching(
                status, WcsSessionStatusModel.list(), "status"
            )
        if host_join_uri is not None:
            self.host_join_uri = host_join_uri
        if locale_code is not None:
            self.locale_code = locale_code
        if video_bridge_id is not None:
            self.video_bridge_id = video_bridge_id
        if video_bridge_password is not None:
            self.video_bridge_password = video_bridge_password
        if video_bridge_pstn_password is not None:
            self.video_bridge_pstn_password = video_bridge_pstn_password
        if attendee_join_uri is not None:
            self.attendee_join_uri = attendee_join_uri
        if has_unsent_invites is not None:
            self.has_unsent_invites = has_unsent_invites
