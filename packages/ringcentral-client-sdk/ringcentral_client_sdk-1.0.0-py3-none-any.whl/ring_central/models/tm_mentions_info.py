# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class TmMentionsInfoType(Enum):
    """An enumeration representing different categories.

    :cvar PERSON: "Person"
    :vartype PERSON: str
    :cvar TEAM: "Team"
    :vartype TEAM: str
    :cvar FILE: "File"
    :vartype FILE: str
    :cvar LINK: "Link"
    :vartype LINK: str
    :cvar EVENT: "Event"
    :vartype EVENT: str
    :cvar TASK: "Task"
    :vartype TASK: str
    :cvar NOTE: "Note"
    :vartype NOTE: str
    :cvar CARD: "Card"
    :vartype CARD: str
    """

    PERSON = "Person"
    TEAM = "Team"
    FILE = "File"
    LINK = "Link"
    EVENT = "Event"
    TASK = "Task"
    NOTE = "Note"
    CARD = "Card"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, TmMentionsInfoType._member_map_.values()))


@JsonMap({"id_": "id", "type_": "type"})
class TmMentionsInfo(BaseModel):
    """TmMentionsInfo

    :param id_: Internal identifier of a user, defaults to None
    :type id_: str, optional
    :param type_: Type of mention, defaults to None
    :type type_: TmMentionsInfoType, optional
    :param name: Name of a user, defaults to None
    :type name: str, optional
    """

    def __init__(
        self, id_: str = None, type_: TmMentionsInfoType = None, name: str = None
    ):
        if id_ is not None:
            self.id_ = id_
        if type_ is not None:
            self.type_ = self._enum_matching(type_, TmMentionsInfoType.list(), "type_")
        if name is not None:
            self.name = name
