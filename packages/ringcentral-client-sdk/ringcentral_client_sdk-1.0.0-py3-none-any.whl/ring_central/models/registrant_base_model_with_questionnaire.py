# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .reg_answer_model import RegAnswerModel, RegAnswerModelGuard
from .fixed_answer_model import FixedAnswerModel
from .variable_answer_model import VariableAnswerModel


@JsonMap(
    {
        "first_name": "firstName",
        "last_name": "lastName",
        "join_uri": "joinUri",
        "cancellation_uri": "cancellationUri",
        "registered_post_webinar": "registeredPostWebinar",
        "visitor_id": "visitorId",
        "external_id": "externalId",
        "registration_time": "registrationTime",
        "ip_address": "ipAddress",
        "participant_id": "participantId",
    }
)
class RegistrantBaseModelWithQuestionnaire(BaseModel):
    """RegistrantBaseModelWithQuestionnaire

    :param first_name: First (given) name
    :type first_name: str
    :param last_name: Last (family) name
    :type last_name: str
    :param email: User's contact email
    :type email: str
    :param join_uri: The personalized URI for this registrant to join the Webinar, defaults to None
    :type join_uri: str, optional
    :param cancellation_uri: The personalized URI for this registrant to cancel the registration, defaults to None
    :type cancellation_uri: str, optional
    :param registered_post_webinar: Indicates if the registrant was registered to on-demand webinar, defaults to None
    :type registered_post_webinar: bool, optional
    :param visitor_id: Visitor ID passed from registration page, defaults to None
    :type visitor_id: str, optional
    :param external_id: ID of a registrant passed from external system, defaults to None
    :type external_id: str, optional
    :param registration_time: Registration time (can be earlier than "creationTime" due to indirect persistence), defaults to None
    :type registration_time: str, optional
    :param ip_address: IP address of the registrant's user agent, defaults to None
    :type ip_address: str, optional
    :param source: Registration channel source (coming from registration URI), defaults to None
    :type source: str, optional
    :param participant_id: ID of session participant (from Runtime Service - if this registrant attended the webinar), defaults to None
    :type participant_id: str, optional
    :param questionnaire: Answers on custom registration questions, defaults to None
    :type questionnaire: List[RegAnswerModel], optional
    """

    def __init__(
        self,
        first_name: str,
        last_name: str,
        email: str,
        join_uri: str = None,
        cancellation_uri: str = None,
        registered_post_webinar: bool = None,
        visitor_id: str = None,
        external_id: str = None,
        registration_time: str = None,
        ip_address: str = None,
        source: str = None,
        participant_id: str = None,
        questionnaire: List[RegAnswerModel] = None,
    ):
        self.first_name = first_name
        self.last_name = last_name
        self.email = email
        if join_uri is not None:
            self.join_uri = join_uri
        if cancellation_uri is not None:
            self.cancellation_uri = cancellation_uri
        if registered_post_webinar is not None:
            self.registered_post_webinar = registered_post_webinar
        if visitor_id is not None:
            self.visitor_id = visitor_id
        if external_id is not None:
            self.external_id = external_id
        if registration_time is not None:
            self.registration_time = registration_time
        if ip_address is not None:
            self.ip_address = ip_address
        if source is not None:
            self.source = source
        if participant_id is not None:
            self.participant_id = participant_id
        if questionnaire is not None:
            self.questionnaire = self._define_list(questionnaire, RegAnswerModel)
