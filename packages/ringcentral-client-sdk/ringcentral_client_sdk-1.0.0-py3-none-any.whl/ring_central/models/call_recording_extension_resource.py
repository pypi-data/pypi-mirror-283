# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class CallDirection(Enum):
    """An enumeration representing different categories.

    :cvar OUTBOUND: "Outbound"
    :vartype OUTBOUND: str
    :cvar INBOUND: "Inbound"
    :vartype INBOUND: str
    :cvar ALL: "All"
    :vartype ALL: str
    """

    OUTBOUND = "Outbound"
    INBOUND = "Inbound"
    ALL = "All"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, CallDirection._member_map_.values()))


@JsonMap(
    {
        "id_": "id",
        "extension_number": "extensionNumber",
        "type_": "type",
        "call_direction": "callDirection",
    }
)
class CallRecordingExtensionResource(BaseModel):
    """CallRecordingExtensionResource

    :param id_: Internal identifier of an extension, defaults to None
    :type id_: str, optional
    :param uri: uri, defaults to None
    :type uri: str, optional
    :param extension_number: extension_number, defaults to None
    :type extension_number: str, optional
    :param type_: type_, defaults to None
    :type type_: str, optional
    :param call_direction: Direction of call, defaults to None
    :type call_direction: CallDirection, optional
    """

    def __init__(
        self,
        id_: str = None,
        uri: str = None,
        extension_number: str = None,
        type_: str = None,
        call_direction: CallDirection = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if uri is not None:
            self.uri = uri
        if extension_number is not None:
            self.extension_number = extension_number
        if type_ is not None:
            self.type_ = type_
        if call_direction is not None:
            self.call_direction = self._enum_matching(
                call_direction, CallDirection.list(), "call_direction"
            )
