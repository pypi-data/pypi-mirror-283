# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .active_call_info import ActiveCallInfo
from .get_presence_extension_info import GetPresenceExtensionInfo


class PresenceInfoResponseUserStatus(Enum):
    """An enumeration representing different categories.

    :cvar OFFLINE: "Offline"
    :vartype OFFLINE: str
    :cvar BUSY: "Busy"
    :vartype BUSY: str
    :cvar AVAILABLE: "Available"
    :vartype AVAILABLE: str
    """

    OFFLINE = "Offline"
    BUSY = "Busy"
    AVAILABLE = "Available"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, PresenceInfoResponseUserStatus._member_map_.values())
        )


class PresenceInfoResponseDndStatus(Enum):
    """An enumeration representing different categories.

    :cvar TAKEALLCALLS: "TakeAllCalls"
    :vartype TAKEALLCALLS: str
    :cvar DONOTACCEPTDEPARTMENTCALLS: "DoNotAcceptDepartmentCalls"
    :vartype DONOTACCEPTDEPARTMENTCALLS: str
    :cvar TAKEDEPARTMENTCALLSONLY: "TakeDepartmentCallsOnly"
    :vartype TAKEDEPARTMENTCALLSONLY: str
    :cvar DONOTACCEPTANYCALLS: "DoNotAcceptAnyCalls"
    :vartype DONOTACCEPTANYCALLS: str
    :cvar UNKNOWN: "Unknown"
    :vartype UNKNOWN: str
    """

    TAKEALLCALLS = "TakeAllCalls"
    DONOTACCEPTDEPARTMENTCALLS = "DoNotAcceptDepartmentCalls"
    TAKEDEPARTMENTCALLSONLY = "TakeDepartmentCallsOnly"
    DONOTACCEPTANYCALLS = "DoNotAcceptAnyCalls"
    UNKNOWN = "Unknown"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, PresenceInfoResponseDndStatus._member_map_.values())
        )


class PresenceInfoResponseCallerIdVisibility(Enum):
    """An enumeration representing different categories.

    :cvar ALL: "All"
    :vartype ALL: str
    :cvar NONE: "None"
    :vartype NONE: str
    :cvar PERMITTEDUSERS: "PermittedUsers"
    :vartype PERMITTEDUSERS: str
    """

    ALL = "All"
    NONE = "None"
    PERMITTEDUSERS = "PermittedUsers"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                PresenceInfoResponseCallerIdVisibility._member_map_.values(),
            )
        )


class PresenceInfoResponseMeetingStatus(Enum):
    """An enumeration representing different categories.

    :cvar CONNECTED: "Connected"
    :vartype CONNECTED: str
    :cvar DISCONNECTED: "Disconnected"
    :vartype DISCONNECTED: str
    """

    CONNECTED = "Connected"
    DISCONNECTED = "Disconnected"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                PresenceInfoResponseMeetingStatus._member_map_.values(),
            )
        )


class PresenceInfoResponseTelephonyStatus(Enum):
    """An enumeration representing different categories.

    :cvar NOCALL: "NoCall"
    :vartype NOCALL: str
    :cvar CALLCONNECTED: "CallConnected"
    :vartype CALLCONNECTED: str
    :cvar RINGING: "Ringing"
    :vartype RINGING: str
    :cvar ONHOLD: "OnHold"
    :vartype ONHOLD: str
    :cvar PARKEDCALL: "ParkedCall"
    :vartype PARKEDCALL: str
    """

    NOCALL = "NoCall"
    CALLCONNECTED = "CallConnected"
    RINGING = "Ringing"
    ONHOLD = "OnHold"
    PARKEDCALL = "ParkedCall"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                PresenceInfoResponseTelephonyStatus._member_map_.values(),
            )
        )


class PresenceInfoResponsePresenceStatus(Enum):
    """An enumeration representing different categories.

    :cvar OFFLINE: "Offline"
    :vartype OFFLINE: str
    :cvar BUSY: "Busy"
    :vartype BUSY: str
    :cvar AVAILABLE: "Available"
    :vartype AVAILABLE: str
    """

    OFFLINE = "Offline"
    BUSY = "Busy"
    AVAILABLE = "Available"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                PresenceInfoResponsePresenceStatus._member_map_.values(),
            )
        )


@JsonMap(
    {
        "user_status": "userStatus",
        "dnd_status": "dndStatus",
        "allow_see_my_presence": "allowSeeMyPresence",
        "caller_id_visibility": "callerIdVisibility",
        "ring_on_monitored_call": "ringOnMonitoredCall",
        "pick_up_calls_on_hold": "pickUpCallsOnHold",
        "active_calls": "activeCalls",
        "meeting_status": "meetingStatus",
        "telephony_status": "telephonyStatus",
        "presence_status": "presenceStatus",
    }
)
class PresenceInfoResponse(BaseModel):
    """PresenceInfoResponse

    :param uri: Link to the presence resource, defaults to None
    :type uri: str, optional
    :param user_status: user_status, defaults to None
    :type user_status: PresenceInfoResponseUserStatus, optional
    :param dnd_status: dnd_status, defaults to None
    :type dnd_status: PresenceInfoResponseDndStatus, optional
    :param message: message, defaults to None
    :type message: str, optional
    :param allow_see_my_presence: allow_see_my_presence, defaults to None
    :type allow_see_my_presence: bool, optional
    :param caller_id_visibility: Configures the user presence visibility. When the `allowSeeMyPresence` parameter is set to `true`, <br>the following visibility options are supported via this parameter - All, None, PermittedUsers<br>, defaults to None
    :type caller_id_visibility: PresenceInfoResponseCallerIdVisibility, optional
    :param ring_on_monitored_call: ring_on_monitored_call, defaults to None
    :type ring_on_monitored_call: bool, optional
    :param pick_up_calls_on_hold: pick_up_calls_on_hold, defaults to None
    :type pick_up_calls_on_hold: bool, optional
    :param active_calls: active_calls, defaults to None
    :type active_calls: List[ActiveCallInfo], optional
    :param extension: Information on extension, for which this presence data is returned, defaults to None
    :type extension: GetPresenceExtensionInfo, optional
    :param meeting_status: Meetings presence status, defaults to None
    :type meeting_status: PresenceInfoResponseMeetingStatus, optional
    :param telephony_status: Telephony presence status. Returned if telephony status is changed, defaults to None
    :type telephony_status: PresenceInfoResponseTelephonyStatus, optional
    :param presence_status: Aggregated presence status, calculated from a number of sources, defaults to None
    :type presence_status: PresenceInfoResponsePresenceStatus, optional
    """

    def __init__(
        self,
        uri: str = None,
        user_status: PresenceInfoResponseUserStatus = None,
        dnd_status: PresenceInfoResponseDndStatus = None,
        message: str = None,
        allow_see_my_presence: bool = None,
        caller_id_visibility: PresenceInfoResponseCallerIdVisibility = None,
        ring_on_monitored_call: bool = None,
        pick_up_calls_on_hold: bool = None,
        active_calls: List[ActiveCallInfo] = None,
        extension: GetPresenceExtensionInfo = None,
        meeting_status: PresenceInfoResponseMeetingStatus = None,
        telephony_status: PresenceInfoResponseTelephonyStatus = None,
        presence_status: PresenceInfoResponsePresenceStatus = None,
    ):
        if uri is not None:
            self.uri = uri
        if user_status is not None:
            self.user_status = self._enum_matching(
                user_status, PresenceInfoResponseUserStatus.list(), "user_status"
            )
        if dnd_status is not None:
            self.dnd_status = self._enum_matching(
                dnd_status, PresenceInfoResponseDndStatus.list(), "dnd_status"
            )
        if message is not None:
            self.message = message
        if allow_see_my_presence is not None:
            self.allow_see_my_presence = allow_see_my_presence
        if caller_id_visibility is not None:
            self.caller_id_visibility = self._enum_matching(
                caller_id_visibility,
                PresenceInfoResponseCallerIdVisibility.list(),
                "caller_id_visibility",
            )
        if ring_on_monitored_call is not None:
            self.ring_on_monitored_call = ring_on_monitored_call
        if pick_up_calls_on_hold is not None:
            self.pick_up_calls_on_hold = pick_up_calls_on_hold
        if active_calls is not None:
            self.active_calls = self._define_list(active_calls, ActiveCallInfo)
        if extension is not None:
            self.extension = self._define_object(extension, GetPresenceExtensionInfo)
        if meeting_status is not None:
            self.meeting_status = self._enum_matching(
                meeting_status,
                PresenceInfoResponseMeetingStatus.list(),
                "meeting_status",
            )
        if telephony_status is not None:
            self.telephony_status = self._enum_matching(
                telephony_status,
                PresenceInfoResponseTelephonyStatus.list(),
                "telephony_status",
            )
        if presence_status is not None:
            self.presence_status = self._enum_matching(
                presence_status,
                PresenceInfoResponsePresenceStatus.list(),
                "presence_status",
            )
