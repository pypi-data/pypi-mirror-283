# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class PubNubDeliveryModeRequestTransportType(Enum):
    """An enumeration representing different categories.

    :cvar PUBNUB: "PubNub"
    :vartype PUBNUB: str
    """

    PUBNUB = "PubNub"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                PubNubDeliveryModeRequestTransportType._member_map_.values(),
            )
        )


@JsonMap({"transport_type": "transportType"})
class PubNubDeliveryModeRequest(BaseModel):
    """PubNubDeliveryModeRequest

    :param transport_type: The transport type for this subscription, or the channel by which an app should be notified of an event
    :type transport_type: PubNubDeliveryModeRequestTransportType
    :param encryption: Optional. Specifies if notification messages will be encrypted<br>or not. Please note that for some event filters (e.g. presence) encryption is mandatory and<br>`false` value provided by caller will be ignored.<br>, defaults to None
    :type encryption: bool, optional
    """

    def __init__(
        self,
        transport_type: PubNubDeliveryModeRequestTransportType,
        encryption: bool = None,
    ):
        self.transport_type = self._enum_matching(
            transport_type,
            PubNubDeliveryModeRequestTransportType.list(),
            "transport_type",
        )
        if encryption is not None:
            self.encryption = encryption
