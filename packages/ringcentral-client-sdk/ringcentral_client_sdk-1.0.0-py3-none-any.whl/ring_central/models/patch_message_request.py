# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .message_read_status_enum import MessageReadStatusEnum
from .message_availability_enum import MessageAvailabilityEnum


@JsonMap({"read_status": "readStatus"})
class PatchMessageRequest(BaseModel):
    """Either `readStatus` or `availability` or both are required

    :param read_status: Message read status, defaults to None
    :type read_status: MessageReadStatusEnum, optional
    :param availability: Message availability status. Message in 'Deleted' state is still<br>preserved with all its attachments and can be restored. 'Purged' means<br>that all attachments are already deleted and the message itself is about<br>to be physically deleted shortly<br>, defaults to None
    :type availability: MessageAvailabilityEnum, optional
    """

    def __init__(
        self,
        read_status: MessageReadStatusEnum = None,
        availability: MessageAvailabilityEnum = None,
    ):
        if read_status is not None:
            self.read_status = self._enum_matching(
                read_status, MessageReadStatusEnum.list(), "read_status"
            )
        if availability is not None:
            self.availability = self._enum_matching(
                availability, MessageAvailabilityEnum.list(), "availability"
            )
