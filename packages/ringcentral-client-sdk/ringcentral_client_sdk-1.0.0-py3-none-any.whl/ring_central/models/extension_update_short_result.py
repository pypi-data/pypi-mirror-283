# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .error_entity import ErrorEntity


class ExtensionUpdateShortResultStatus(Enum):
    """An enumeration representing different categories.

    :cvar FAIL: "Fail"
    :vartype FAIL: str
    :cvar SUCCESS: "Success"
    :vartype SUCCESS: str
    """

    FAIL = "Fail"
    SUCCESS = "Success"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                ExtensionUpdateShortResultStatus._member_map_.values(),
            )
        )


@JsonMap({"extension_id": "extensionId"})
class ExtensionUpdateShortResult(BaseModel):
    """ExtensionUpdateShortResult

    :param extension_id: Internal identifier of an extension, defaults to None
    :type extension_id: str, optional
    :param status: Extension update status, defaults to None
    :type status: ExtensionUpdateShortResultStatus, optional
    :param errors: errors, defaults to None
    :type errors: List[ErrorEntity], optional
    """

    def __init__(
        self,
        extension_id: str = None,
        status: ExtensionUpdateShortResultStatus = None,
        errors: List[ErrorEntity] = None,
    ):
        if extension_id is not None:
            self.extension_id = extension_id
        if status is not None:
            self.status = self._enum_matching(
                status, ExtensionUpdateShortResultStatus.list(), "status"
            )
        if errors is not None:
            self.errors = self._define_list(errors, ErrorEntity)
