# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .common_emergency_location_address_info import (
    CommonEmergencyLocationAddressInfo,
    CommonEmergencyLocationAddressInfoGuard,
)
from .common_emergency_location_address_info_default import (
    CommonEmergencyLocationAddressInfoDefault,
)
from .common_emergency_location_address_info_au import (
    CommonEmergencyLocationAddressInfoAu,
)
from .common_emergency_location_address_info_fr import (
    CommonEmergencyLocationAddressInfoFr,
)
from .short_site_info import ShortSiteInfo
from .address_status import AddressStatus
from .usage_status import UsageStatus
from .sync_status import SyncStatus
from .emergency_address_type import EmergencyAddressType
from .visibility import Visibility
from .location_owner_info import LocationOwnerInfo


@JsonMap(
    {
        "id_": "id",
        "address_status": "addressStatus",
        "usage_status": "usageStatus",
        "sync_status": "syncStatus",
        "address_type": "addressType",
        "address_format_id": "addressFormatId",
    }
)
class CommonEmergencyLocationResource(BaseModel):
    """Company emergency response location details

    :param id_: Internal identifier of an emergency response location<br>, defaults to None
    :type id_: str, optional
    :param address: address, defaults to None
    :type address: CommonEmergencyLocationAddressInfo, optional
    :param name: Emergency response location name, defaults to None
    :type name: str, optional
    :param site: site, defaults to None
    :type site: ShortSiteInfo, optional
    :param address_status: Emergency address status, defaults to None
    :type address_status: AddressStatus, optional
    :param usage_status: Status of emergency response location usage., defaults to None
    :type usage_status: UsageStatus, optional
    :param sync_status: Resulting status of emergency address synchronization. Returned<br>if `syncEmergencyAddress` parameter is set to `true`<br>, defaults to None
    :type sync_status: SyncStatus, optional
    :param address_type: address_type, defaults to None
    :type address_type: EmergencyAddressType, optional
    :param visibility: Visibility of an emergency response location. If `Private`<br>is set, then location is visible only for the restricted number of users,<br>specified in `owners` array<br>, defaults to None
    :type visibility: Visibility, optional
    :param owners: List of private location owners, defaults to None
    :type owners: List[LocationOwnerInfo], optional
    :param address_format_id: Address format ID, defaults to None
    :type address_format_id: str, optional
    """

    def __init__(
        self,
        id_: str = None,
        address: CommonEmergencyLocationAddressInfo = None,
        name: str = None,
        site: ShortSiteInfo = None,
        address_status: AddressStatus = None,
        usage_status: UsageStatus = None,
        sync_status: SyncStatus = None,
        address_type: EmergencyAddressType = None,
        visibility: Visibility = None,
        owners: List[LocationOwnerInfo] = None,
        address_format_id: str = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if address is not None:
            self.address = CommonEmergencyLocationAddressInfoGuard.return_one_of(
                address
            )
        if name is not None:
            self.name = name
        if site is not None:
            self.site = self._define_object(site, ShortSiteInfo)
        if address_status is not None:
            self.address_status = self._enum_matching(
                address_status, AddressStatus.list(), "address_status"
            )
        if usage_status is not None:
            self.usage_status = self._enum_matching(
                usage_status, UsageStatus.list(), "usage_status"
            )
        if sync_status is not None:
            self.sync_status = self._enum_matching(
                sync_status, SyncStatus.list(), "sync_status"
            )
        if address_type is not None:
            self.address_type = self._enum_matching(
                address_type, EmergencyAddressType.list(), "address_type"
            )
        if visibility is not None:
            self.visibility = self._enum_matching(
                visibility, Visibility.list(), "visibility"
            )
        if owners is not None:
            self.owners = self._define_list(owners, LocationOwnerInfo)
        if address_format_id is not None:
            self.address_format_id = address_format_id
