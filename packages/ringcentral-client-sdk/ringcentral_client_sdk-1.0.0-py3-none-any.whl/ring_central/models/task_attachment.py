# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class TaskAttachmentType(Enum):
    """An enumeration representing different categories.

    :cvar FILE: "File"
    :vartype FILE: str
    """

    FILE = "File"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, TaskAttachmentType._member_map_.values()))


@JsonMap({"id_": "id", "type_": "type", "content_uri": "contentUri"})
class TaskAttachment(BaseModel):
    """TaskAttachment

    :param id_: File ID., defaults to None
    :type id_: str, optional
    :param type_: Possible value - File. Attachment type (currently, only File is possible), defaults to None
    :type type_: TaskAttachmentType, optional
    :param name: Name of the attached file (incl. extension name), defaults to None
    :type name: str, optional
    :param content_uri: URI, defaults to None
    :type content_uri: str, optional
    """

    def __init__(
        self,
        id_: str = None,
        type_: TaskAttachmentType = None,
        name: str = None,
        content_uri: str = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if type_ is not None:
            self.type_ = self._enum_matching(type_, TaskAttachmentType.list(), "type_")
        if name is not None:
            self.name = name
        if content_uri is not None:
            self.content_uri = content_uri
