# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .validation_error import ValidationError


class WirelessPointValidatedStatus(Enum):
    """An enumeration representing different categories.

    :cvar VALID: "Valid"
    :vartype VALID: str
    :cvar INVALID: "Invalid"
    :vartype INVALID: str
    """

    VALID = "Valid"
    INVALID = "Invalid"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, WirelessPointValidatedStatus._member_map_.values())
        )


@JsonMap({"id_": "id"})
class WirelessPointValidated(BaseModel):
    """WirelessPointValidated

    :param id_: Internal identifier of a wireless point, defaults to None
    :type id_: str, optional
    :param bssid: Unique 48-bit identifier of the wireless access point that<br>follows MAC address conventions<br>, defaults to None
    :type bssid: str, optional
    :param status: Validation result status, defaults to None
    :type status: WirelessPointValidatedStatus, optional
    :param errors: errors, defaults to None
    :type errors: List[ValidationError], optional
    """

    def __init__(
        self,
        id_: str = None,
        bssid: str = None,
        status: WirelessPointValidatedStatus = None,
        errors: List[ValidationError] = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if bssid is not None:
            self.bssid = bssid
        if status is not None:
            self.status = self._enum_matching(
                status, WirelessPointValidatedStatus.list(), "status"
            )
        if errors is not None:
            self.errors = self._define_list(errors, ValidationError)
