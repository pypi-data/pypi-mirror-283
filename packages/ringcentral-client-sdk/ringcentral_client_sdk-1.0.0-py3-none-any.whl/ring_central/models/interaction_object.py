# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .utterance_insights_object import UtteranceInsightsObject
from .speaker_insights_object import SpeakerInsightsObject
from .conversational_insights_unit import ConversationalInsightsUnit


@JsonMap(
    {
        "utterance_insights": "utteranceInsights",
        "speaker_insights": "speakerInsights",
        "conversational_insights": "conversationalInsights",
    }
)
class InteractionObject(BaseModel):
    """InteractionObject

    :param utterance_insights: utterance_insights, defaults to None
    :type utterance_insights: List[UtteranceInsightsObject], optional
    :param speaker_insights: speaker_insights, defaults to None
    :type speaker_insights: SpeakerInsightsObject, optional
    :param conversational_insights: conversational_insights, defaults to None
    :type conversational_insights: List[ConversationalInsightsUnit], optional
    """

    def __init__(
        self,
        utterance_insights: List[UtteranceInsightsObject] = None,
        speaker_insights: SpeakerInsightsObject = None,
        conversational_insights: List[ConversationalInsightsUnit] = None,
    ):
        if utterance_insights is not None:
            self.utterance_insights = self._define_list(
                utterance_insights, UtteranceInsightsObject
            )
        if speaker_insights is not None:
            self.speaker_insights = self._define_object(
                speaker_insights, SpeakerInsightsObject
            )
        if conversational_insights is not None:
            self.conversational_insights = self._define_list(
                conversational_insights, ConversationalInsightsUnit
            )
