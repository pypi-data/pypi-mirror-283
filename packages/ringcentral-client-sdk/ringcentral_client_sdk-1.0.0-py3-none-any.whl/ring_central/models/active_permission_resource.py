# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .permission_id_resource import PermissionIdResource
from .role_id_resource import RoleIdResource


class Scopes(Enum):
    """An enumeration representing different categories.

    :cvar ACCOUNT: "Account"
    :vartype ACCOUNT: str
    :cvar ALLEXTENSIONS: "AllExtensions"
    :vartype ALLEXTENSIONS: str
    :cvar FEDERATION: "Federation"
    :vartype FEDERATION: str
    :cvar NONUSEREXTENSIONS: "NonUserExtensions"
    :vartype NONUSEREXTENSIONS: str
    :cvar ROLEBASED: "RoleBased"
    :vartype ROLEBASED: str
    :cvar SELF: "Self"
    :vartype SELF: str
    :cvar USEREXTENSIONS: "UserExtensions"
    :vartype USEREXTENSIONS: str
    """

    ACCOUNT = "Account"
    ALLEXTENSIONS = "AllExtensions"
    FEDERATION = "Federation"
    NONUSEREXTENSIONS = "NonUserExtensions"
    ROLEBASED = "RoleBased"
    SELF = "Self"
    USEREXTENSIONS = "UserExtensions"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, Scopes._member_map_.values()))


@JsonMap({"effective_role": "effectiveRole"})
class ActivePermissionResource(BaseModel):
    """ActivePermissionResource

    :param permission: permission, defaults to None
    :type permission: PermissionIdResource, optional
    :param effective_role: effective_role, defaults to None
    :type effective_role: RoleIdResource, optional
    :param scopes: scopes, defaults to None
    :type scopes: List[Scopes], optional
    """

    def __init__(
        self,
        permission: PermissionIdResource = None,
        effective_role: RoleIdResource = None,
        scopes: List[Scopes] = None,
    ):
        if permission is not None:
            self.permission = self._define_object(permission, PermissionIdResource)
        if effective_role is not None:
            self.effective_role = self._define_object(effective_role, RoleIdResource)
        if scopes is not None:
            self.scopes = self._define_list(scopes, Scopes)
