# This file was generated by liblab | https://liblab.com/

from .utils.json_map import JsonMap
from .base import BaseModel


@JsonMap(
    {"id_": "id", "extension_number": "extensionNumber", "partner_id": "partnerId"}
)
class AccountOperatorInfo(BaseModel):
    """Operator extension information. This extension will receive
    all calls and messages addressed to an operator.


    :param uri: Link to an operator extension resource, defaults to None
    :type uri: str, optional
    :param id_: Internal identifier of an operator extension, defaults to None
    :type id_: int, optional
    :param extension_number: Number of an operator extension, defaults to None
    :type extension_number: str, optional
    :param partner_id: Internal identifier of an extension created by partner. Supported for Partner Applications.<br>The RingCentral supports the mapping of accounts and stores the corresponding account ID/extension<br>ID for each partner ID of a client application. In request URIs partner IDs are accepted instead<br>of regular RingCentral native IDs as path parameters using `pid=XXX` clause.<br>Though in response URIs contain the corresponding account IDs and extension<br>IDs. In all request and response bodies these values are reflected via<br>partnerId attributes of account and extension<br>, defaults to None
    :type partner_id: str, optional
    """

    def __init__(
        self,
        uri: str = None,
        id_: int = None,
        extension_number: str = None,
        partner_id: str = None,
    ):
        if uri is not None:
            self.uri = uri
        if id_ is not None:
            self.id_ = id_
        if extension_number is not None:
            self.extension_number = extension_number
        if partner_id is not None:
            self.partner_id = partner_id
