# This file was generated by liblab | https://liblab.com/

from .utils.json_map import JsonMap
from .base import BaseModel


@JsonMap(
    {
        "per_page": "perPage",
        "page_start": "pageStart",
        "page_end": "pageEnd",
        "total_pages": "totalPages",
        "total_elements": "totalElements",
    }
)
class GlipDataExportPagingInfo(BaseModel):
    """GlipDataExportPagingInfo

    :param page: The current page number. 1-indexed, so the first page is 1 by default. May be omitted if result is empty (because non-existent page was specified or perPage=0 was requested), defaults to None
    :type page: int, optional
    :param per_page: Current page size, describes how many items are in each page. Default value is 100. Maximum value is 1000. If perPage value in the request is greater than 1000, the maximum value (1000) is applied, defaults to None
    :type per_page: int, optional
    :param page_start: The zero-based number of the first element on the current page. Omitted if the page is omitted or result is empty, defaults to None
    :type page_start: int, optional
    :param page_end: The zero-based index of the last element on the current page. Omitted if the page is omitted or result is empty, defaults to None
    :type page_end: int, optional
    :param total_pages: The total number of pages in a dataset. May be omitted for some resources due to performance reasons, defaults to None
    :type total_pages: int, optional
    :param total_elements: The total number of elements in a dataset. May be omitted for some resource due to performance reasons, defaults to None
    :type total_elements: int, optional
    """

    def __init__(
        self,
        page: int = None,
        per_page: int = None,
        page_start: int = None,
        page_end: int = None,
        total_pages: int = None,
        total_elements: int = None,
    ):
        if page is not None:
            self.page = page
        if per_page is not None:
            self.per_page = per_page
        if page_start is not None:
            self.page_start = page_start
        if page_end is not None:
            self.page_end = page_end
        if total_pages is not None:
            self.total_pages = total_pages
        if total_elements is not None:
            self.total_elements = total_elements
