# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class SyncInfoSyncType(Enum):
    """An enumeration representing different categories.

    :cvar FSYNC: "FSync"
    :vartype FSYNC: str
    :cvar ISYNC: "ISync"
    :vartype ISYNC: str
    """

    FSYNC = "FSync"
    ISYNC = "ISync"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, SyncInfoSyncType._member_map_.values()))


@JsonMap(
    {
        "sync_type": "syncType",
        "sync_token": "syncToken",
        "sync_time": "syncTime",
        "older_records_exist": "olderRecordsExist",
    }
)
class SyncInfo(BaseModel):
    """SyncInfo

    :param sync_type: sync_type, defaults to None
    :type sync_type: SyncInfoSyncType, optional
    :param sync_token: sync_token, defaults to None
    :type sync_token: str, optional
    :param sync_time: sync_time, defaults to None
    :type sync_time: str, optional
    :param older_records_exist: older_records_exist, defaults to None
    :type older_records_exist: bool, optional
    """

    def __init__(
        self,
        sync_type: SyncInfoSyncType = None,
        sync_token: str = None,
        sync_time: str = None,
        older_records_exist: bool = None,
    ):
        if sync_type is not None:
            self.sync_type = self._enum_matching(
                sync_type, SyncInfoSyncType.list(), "sync_type"
            )
        if sync_token is not None:
            self.sync_token = sync_token
        if sync_time is not None:
            self.sync_time = sync_time
        if older_records_exist is not None:
            self.older_records_exist = older_records_exist
