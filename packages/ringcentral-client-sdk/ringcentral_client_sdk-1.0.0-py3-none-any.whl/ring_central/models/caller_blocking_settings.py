# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .blocked_caller_greeting_info import BlockedCallerGreetingInfo


class CallerBlockingSettingsMode(Enum):
    """An enumeration representing different categories.

    :cvar SPECIFIC: "Specific"
    :vartype SPECIFIC: str
    :cvar ALL: "All"
    :vartype ALL: str
    """

    SPECIFIC = "Specific"
    ALL = "All"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, CallerBlockingSettingsMode._member_map_.values())
        )


class CallerBlockingSettingsNoCallerId(Enum):
    """An enumeration representing different categories.

    :cvar BLOCKCALLSANDFAXES: "BlockCallsAndFaxes"
    :vartype BLOCKCALLSANDFAXES: str
    :cvar BLOCKFAXES: "BlockFaxes"
    :vartype BLOCKFAXES: str
    :cvar ALLOW: "Allow"
    :vartype ALLOW: str
    """

    BLOCKCALLSANDFAXES = "BlockCallsAndFaxes"
    BLOCKFAXES = "BlockFaxes"
    ALLOW = "Allow"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                CallerBlockingSettingsNoCallerId._member_map_.values(),
            )
        )


class CallerBlockingSettingsPayPhones(Enum):
    """An enumeration representing different categories.

    :cvar BLOCK: "Block"
    :vartype BLOCK: str
    :cvar ALLOW: "Allow"
    :vartype ALLOW: str
    """

    BLOCK = "Block"
    ALLOW = "Allow"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value, CallerBlockingSettingsPayPhones._member_map_.values()
            )
        )


@JsonMap({"no_caller_id": "noCallerId", "pay_phones": "payPhones"})
class CallerBlockingSettings(BaseModel):
    """Returns the lists of blocked and allowed phone numbers

    :param mode: Call blocking options: either specific or all calls and faxes, defaults to None
    :type mode: CallerBlockingSettingsMode, optional
    :param no_caller_id: Determines how to handle calls with no caller ID in `Specific` mode, defaults to None
    :type no_caller_id: CallerBlockingSettingsNoCallerId, optional
    :param pay_phones: Blocking settings for pay phones, defaults to None
    :type pay_phones: CallerBlockingSettingsPayPhones, optional
    :param greetings: List of greetings played for blocked callers, defaults to None
    :type greetings: List[BlockedCallerGreetingInfo], optional
    """

    def __init__(
        self,
        mode: CallerBlockingSettingsMode = None,
        no_caller_id: CallerBlockingSettingsNoCallerId = None,
        pay_phones: CallerBlockingSettingsPayPhones = None,
        greetings: List[BlockedCallerGreetingInfo] = None,
    ):
        if mode is not None:
            self.mode = self._enum_matching(
                mode, CallerBlockingSettingsMode.list(), "mode"
            )
        if no_caller_id is not None:
            self.no_caller_id = self._enum_matching(
                no_caller_id, CallerBlockingSettingsNoCallerId.list(), "no_caller_id"
            )
        if pay_phones is not None:
            self.pay_phones = self._enum_matching(
                pay_phones, CallerBlockingSettingsPayPhones.list(), "pay_phones"
            )
        if greetings is not None:
            self.greetings = self._define_list(greetings, BlockedCallerGreetingInfo)
