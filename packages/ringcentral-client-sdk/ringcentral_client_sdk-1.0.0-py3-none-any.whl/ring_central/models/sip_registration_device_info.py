# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .device_model_info import DeviceModelInfo
from .device_extension_info import DeviceExtensionInfo
from .device_emergency_service_address_resource_default import (
    DeviceEmergencyServiceAddressResourceDefault,
)
from .sip_registration_device_emergency_info import SipRegistrationDeviceEmergencyInfo
from .shipping_info import ShippingInfo
from .device_phone_lines_info import DevicePhoneLinesInfo
from .line_pooling_enum import LinePoolingEnum
from .device_site_info import DeviceSiteInfo


class SipRegistrationDeviceInfoType(Enum):
    """An enumeration representing different categories.

    :cvar HARDPHONE: "HardPhone"
    :vartype HARDPHONE: str
    :cvar SOFTPHONE: "SoftPhone"
    :vartype SOFTPHONE: str
    :cvar OTHERPHONE: "OtherPhone"
    :vartype OTHERPHONE: str
    :cvar PAGING: "Paging"
    :vartype PAGING: str
    :cvar WEBPHONE: "WebPhone"
    :vartype WEBPHONE: str
    :cvar ROOM: "Room"
    :vartype ROOM: str
    """

    HARDPHONE = "HardPhone"
    SOFTPHONE = "SoftPhone"
    OTHERPHONE = "OtherPhone"
    PAGING = "Paging"
    WEBPHONE = "WebPhone"
    ROOM = "Room"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, SipRegistrationDeviceInfoType._member_map_.values())
        )


class SipRegistrationDeviceInfoStatus(Enum):
    """An enumeration representing different categories.

    :cvar ONLINE: "Online"
    :vartype ONLINE: str
    :cvar OFFLINE: "Offline"
    :vartype OFFLINE: str
    """

    ONLINE = "Online"
    OFFLINE = "Offline"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value, SipRegistrationDeviceInfoStatus._member_map_.values()
            )
        )


@JsonMap(
    {
        "id_": "id",
        "type_": "type",
        "computer_name": "computerName",
        "emergency_service_address": "emergencyServiceAddress",
        "phone_lines": "phoneLines",
        "box_billing_id": "boxBillingId",
        "use_as_common_phone": "useAsCommonPhone",
        "line_pooling": "linePooling",
        "in_company_net": "inCompanyNet",
        "last_location_report_time": "lastLocationReportTime",
    }
)
class SipRegistrationDeviceInfo(BaseModel):
    """SipRegistrationDeviceInfo

    :param uri: Canonical URI of the resource, defaults to None
    :type uri: str, optional
    :param id_: Internal identifier of a device, defaults to None
    :type id_: str, optional
    :param type_: Device type, defaults to None
    :type type_: SipRegistrationDeviceInfoType, optional
    :param sku: Device identification number (SKU, Stock Keeping Unit) in the format<br>TP-ID [-AT-AC], where TP is device type (HP for RC desk phones, DV for all<br>other devices including soft phones); ID - device model ID; AT - add-on type<br>ID; AC - add-on count (if any). For example 'HP-56-2-2'<br>, defaults to None
    :type sku: str, optional
    :param status: status, defaults to None
    :type status: SipRegistrationDeviceInfoStatus, optional
    :param name: Device name. Mandatory if ordering  SoftPhone or OtherPhone.<br>Optional for HardPhone. If not specified for HardPhone, then device  model  name<br>is used as device  name<br>, defaults to None
    :type name: str, optional
    :param serial: Serial number for HardPhone (is returned only when the phone<br>is shipped and provisioned); endpoint_id for Softphone and mobile applications<br>, defaults to None
    :type serial: str, optional
    :param computer_name: Computer name (for devices of `SoftPhone` type only), defaults to None
    :type computer_name: str, optional
    :param model: HardPhone model information, defaults to None
    :type model: DeviceModelInfo, optional
    :param extension: extension, defaults to None
    :type extension: DeviceExtensionInfo, optional
    :param emergency_service_address: Address for emergency cases. The same emergency address is assigned to all the numbers of one device, defaults to None
    :type emergency_service_address: DeviceEmergencyServiceAddressResourceDefault, optional
    :param emergency: Emergency response location settings of a device, defaults to None
    :type emergency: SipRegistrationDeviceEmergencyInfo, optional
    :param shipping: Shipping information, according to which devices (in case of HardPhone)<br>or e911 stickers (in case of SoftPhone and OtherPhone) will be delivered<br>to the customer<br>, defaults to None
    :type shipping: ShippingInfo, optional
    :param phone_lines: Phone lines information, defaults to None
    :type phone_lines: List[DevicePhoneLinesInfo], optional
    :param box_billing_id: Box billing identifier of a device. Applicable only for devices of `HardPhone` type.<br>, defaults to None
    :type box_billing_id: int, optional
    :param use_as_common_phone: Supported only for devices assigned to Limited extensions. If true, enables users to log in to this phone as a common phone., defaults to None
    :type use_as_common_phone: bool, optional
    :param line_pooling: Pooling type of device:<br>- `Host` - device with a standalone paid phone line which can be linked to soft phone client instance;<br>- `Guest` - device with a linked phone line;<br>- `None` - device without a phone line or with a specific line (free, BLA, etc.)<br>, defaults to None
    :type line_pooling: LinePoolingEnum, optional
    :param in_company_net: Network location status. `true` if the device is located in<br>the configured corporate network (On-Net); `false` for Off-Net location.<br>Parameter is not returned if `EmergencyAddressAutoUpdate` feature is not<br>enabled for the account/user, or if device network location is not determined<br>, defaults to None
    :type in_company_net: bool, optional
    :param site: Site data, defaults to None
    :type site: DeviceSiteInfo, optional
    :param last_location_report_time: Timestamp of receiving last location report in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)<br>format including timezone, for example *2016-03-10T18:07:52.534Z<br>, defaults to None
    :type last_location_report_time: str, optional
    """

    def __init__(
        self,
        uri: str = None,
        id_: str = None,
        type_: SipRegistrationDeviceInfoType = None,
        sku: str = None,
        status: SipRegistrationDeviceInfoStatus = None,
        name: str = None,
        serial: str = None,
        computer_name: str = None,
        model: DeviceModelInfo = None,
        extension: DeviceExtensionInfo = None,
        emergency_service_address: DeviceEmergencyServiceAddressResourceDefault = None,
        emergency: SipRegistrationDeviceEmergencyInfo = None,
        shipping: ShippingInfo = None,
        phone_lines: List[DevicePhoneLinesInfo] = None,
        box_billing_id: int = None,
        use_as_common_phone: bool = None,
        line_pooling: LinePoolingEnum = None,
        in_company_net: bool = None,
        site: DeviceSiteInfo = None,
        last_location_report_time: str = None,
    ):
        if uri is not None:
            self.uri = uri
        if id_ is not None:
            self.id_ = id_
        if type_ is not None:
            self.type_ = self._enum_matching(
                type_, SipRegistrationDeviceInfoType.list(), "type_"
            )
        if sku is not None:
            self.sku = sku
        if status is not None:
            self.status = self._enum_matching(
                status, SipRegistrationDeviceInfoStatus.list(), "status"
            )
        if name is not None:
            self.name = name
        if serial is not None:
            self.serial = serial
        if computer_name is not None:
            self.computer_name = computer_name
        if model is not None:
            self.model = self._define_object(model, DeviceModelInfo)
        if extension is not None:
            self.extension = self._define_object(extension, DeviceExtensionInfo)
        if emergency_service_address is not None:
            self.emergency_service_address = self._define_object(
                emergency_service_address, DeviceEmergencyServiceAddressResourceDefault
            )
        if emergency is not None:
            self.emergency = self._define_object(
                emergency, SipRegistrationDeviceEmergencyInfo
            )
        if shipping is not None:
            self.shipping = self._define_object(shipping, ShippingInfo)
        if phone_lines is not None:
            self.phone_lines = self._define_list(phone_lines, DevicePhoneLinesInfo)
        if box_billing_id is not None:
            self.box_billing_id = box_billing_id
        if use_as_common_phone is not None:
            self.use_as_common_phone = use_as_common_phone
        if line_pooling is not None:
            self.line_pooling = self._enum_matching(
                line_pooling, LinePoolingEnum.list(), "line_pooling"
            )
        if in_company_net is not None:
            self.in_company_net = in_company_net
        if site is not None:
            self.site = self._define_object(site, DeviceSiteInfo)
        if last_location_report_time is not None:
            self.last_location_report_time = last_location_report_time
