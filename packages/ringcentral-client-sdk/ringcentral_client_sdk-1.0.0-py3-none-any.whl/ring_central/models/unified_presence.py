# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel
from .unified_presence_glip import UnifiedPresenceGlip
from .unified_presence_telephony import UnifiedPresenceTelephony
from .unified_presence_meeting import UnifiedPresenceMeeting


class UnifiedPresenceStatus(Enum):
    """An enumeration representing different categories.

    :cvar AVAILABLE: "Available"
    :vartype AVAILABLE: str
    :cvar OFFLINE: "Offline"
    :vartype OFFLINE: str
    :cvar DND: "DND"
    :vartype DND: str
    :cvar BUSY: "Busy"
    :vartype BUSY: str
    """

    AVAILABLE = "Available"
    OFFLINE = "Offline"
    DND = "DND"
    BUSY = "Busy"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, UnifiedPresenceStatus._member_map_.values()))


@JsonMap({})
class UnifiedPresence(BaseModel):
    """UnifiedPresence

    :param status: Aggregated presence status of the user, defaults to None
    :type status: UnifiedPresenceStatus, optional
    :param glip: Returned if *Glip* feature is switched on, defaults to None
    :type glip: UnifiedPresenceGlip, optional
    :param telephony: Returned if *BLF* feature is switched on, defaults to None
    :type telephony: UnifiedPresenceTelephony, optional
    :param meeting: Returned if *Meetings* feature is switched on, defaults to None
    :type meeting: UnifiedPresenceMeeting, optional
    """

    def __init__(
        self,
        status: UnifiedPresenceStatus = None,
        glip: UnifiedPresenceGlip = None,
        telephony: UnifiedPresenceTelephony = None,
        meeting: UnifiedPresenceMeeting = None,
    ):
        if status is not None:
            self.status = self._enum_matching(
                status, UnifiedPresenceStatus.list(), "status"
            )
        if glip is not None:
            self.glip = self._define_object(glip, UnifiedPresenceGlip)
        if telephony is not None:
            self.telephony = self._define_object(telephony, UnifiedPresenceTelephony)
        if meeting is not None:
            self.meeting = self._define_object(meeting, UnifiedPresenceMeeting)
