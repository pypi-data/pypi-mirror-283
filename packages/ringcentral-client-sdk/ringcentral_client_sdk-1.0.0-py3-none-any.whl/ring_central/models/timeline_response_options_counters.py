# This file was generated by liblab | https://liblab.com/

from .utils.json_map import JsonMap
from .base import BaseModel


@JsonMap(
    {
        "all_calls": "allCalls",
        "calls_by_direction": "callsByDirection",
        "calls_by_origin": "callsByOrigin",
        "calls_by_response": "callsByResponse",
        "calls_segments": "callsSegments",
        "calls_by_result": "callsByResult",
        "calls_by_company_hours": "callsByCompanyHours",
        "calls_by_queue_sla": "callsByQueueSla",
        "calls_by_actions": "callsByActions",
        "calls_by_type": "callsByType",
        "queue_opportunities": "queueOpportunities",
    }
)
class TimelineResponseOptionsCounters(BaseModel):
    """Options for selecting breakdown for calls count

    :param all_calls: Include data for total calls count, defaults to None
    :type all_calls: bool, optional
    :param calls_by_direction: Include breakdown of calls count by direction (Inbound, Outbound), defaults to None
    :type calls_by_direction: bool, optional
    :param calls_by_origin: Include breakdown of calls count by origin (Internal, External), defaults to None
    :type calls_by_origin: bool, optional
    :param calls_by_response: Include breakdown of calls count by response (Answered, NotAnswered, Connected, NotConnected), defaults to None
    :type calls_by_response: bool, optional
    :param calls_segments: Include breakdown of calls count by segments (Ringing, LiveTalk, Hold, Park, Transfer, IvrPrompt, Voicemail, VmGreeting, Setup), defaults to None
    :type calls_segments: bool, optional
    :param calls_by_result: Include breakdown of calls count by result (Completed, Abandoned, Voicemail, Unknown, Missed, Accepted), defaults to None
    :type calls_by_result: bool, optional
    :param calls_by_company_hours: Include breakdown of calls count by company hours (BusinessHours, AfterHours), defaults to None
    :type calls_by_company_hours: bool, optional
    :param calls_by_queue_sla: Include breakdown of calls count by queue SLA (InSLA, OutSLA). This counter is only applicable to Queues grouping, defaults to None
    :type calls_by_queue_sla: bool, optional
    :param calls_by_actions: Include breakdown of calls count by action (HoldOff, HoldOn, ParkOn, ParkOff, BlindTransfer, WarmTransfer, DTMFTransfer), defaults to None
    :type calls_by_actions: bool, optional
    :param calls_by_type: Include breakdown of calls count by type (Direct, FromQueue, ParkRetrieval, Transferred, Outbound), defaults to None
    :type calls_by_type: bool, optional
    :param queue_opportunities: Include breakdown of calls count by the total number of times a Queue call was presented to the user. It is limited to `groupBy` Users and `groupByMembers` (Department, Queue, Site, UserGroup) grouping. Only the listed below options for call filters are applicable to `queueOpportunities` and provide meaningful results: `queues` (selected queue extension ids), `callResults` (Missed, Abandoned), `callResponses` (Answered, NotAnswered), `origins` (Internal, External), defaults to None
    :type queue_opportunities: bool, optional
    """

    def __init__(
        self,
        all_calls: bool = None,
        calls_by_direction: bool = None,
        calls_by_origin: bool = None,
        calls_by_response: bool = None,
        calls_segments: bool = None,
        calls_by_result: bool = None,
        calls_by_company_hours: bool = None,
        calls_by_queue_sla: bool = None,
        calls_by_actions: bool = None,
        calls_by_type: bool = None,
        queue_opportunities: bool = None,
    ):
        if all_calls is not None:
            self.all_calls = all_calls
        if calls_by_direction is not None:
            self.calls_by_direction = calls_by_direction
        if calls_by_origin is not None:
            self.calls_by_origin = calls_by_origin
        if calls_by_response is not None:
            self.calls_by_response = calls_by_response
        if calls_segments is not None:
            self.calls_segments = calls_segments
        if calls_by_result is not None:
            self.calls_by_result = calls_by_result
        if calls_by_company_hours is not None:
            self.calls_by_company_hours = calls_by_company_hours
        if calls_by_queue_sla is not None:
            self.calls_by_queue_sla = calls_by_queue_sla
        if calls_by_actions is not None:
            self.calls_by_actions = calls_by_actions
        if calls_by_type is not None:
            self.calls_by_type = calls_by_type
        if queue_opportunities is not None:
            self.queue_opportunities = queue_opportunities
