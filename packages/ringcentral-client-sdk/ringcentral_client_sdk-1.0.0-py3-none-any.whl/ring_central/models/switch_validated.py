# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .validation_error import ValidationError


class SwitchValidatedStatus(Enum):
    """An enumeration representing different categories.

    :cvar VALID: "Valid"
    :vartype VALID: str
    :cvar INVALID: "Invalid"
    :vartype INVALID: str
    """

    VALID = "Valid"
    INVALID = "Invalid"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, SwitchValidatedStatus._member_map_.values()))


@JsonMap({"id_": "id", "chassis_id": "chassisId"})
class SwitchValidated(BaseModel):
    """SwitchValidated

    :param id_: Internal identifier of a switch, defaults to None
    :type id_: str, optional
    :param chassis_id: Unique identifier of a network switch, defaults to None
    :type chassis_id: str, optional
    :param port: Switch entity extension for better diversity. Should be used together with chassisId., defaults to None
    :type port: str, optional
    :param status: Validation result status, defaults to None
    :type status: SwitchValidatedStatus, optional
    :param errors: errors, defaults to None
    :type errors: List[ValidationError], optional
    """

    def __init__(
        self,
        id_: str = None,
        chassis_id: str = None,
        port: str = None,
        status: SwitchValidatedStatus = None,
        errors: List[ValidationError] = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if chassis_id is not None:
            self.chassis_id = chassis_id
        if port is not None:
            self.port = port
        if status is not None:
            self.status = self._enum_matching(
                status, SwitchValidatedStatus.list(), "status"
            )
        if errors is not None:
            self.errors = self._define_list(errors, ValidationError)
