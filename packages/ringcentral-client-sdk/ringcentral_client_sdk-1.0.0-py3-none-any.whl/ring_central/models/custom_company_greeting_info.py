# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel
from .custom_greeting_answering_rule_info import CustomGreetingAnsweringRuleInfo
from .custom_company_greeting_language_info import CustomCompanyGreetingLanguageInfo


class CustomCompanyGreetingInfoType(Enum):
    """An enumeration representing different categories.

    :cvar COMPANY: "Company"
    :vartype COMPANY: str
    :cvar STARTRECORDING: "StartRecording"
    :vartype STARTRECORDING: str
    :cvar STOPRECORDING: "StopRecording"
    :vartype STOPRECORDING: str
    :cvar AUTOMATICRECORDING: "AutomaticRecording"
    :vartype AUTOMATICRECORDING: str
    :cvar TEMPLATEGREETING: "TemplateGreeting"
    :vartype TEMPLATEGREETING: str
    """

    COMPANY = "Company"
    STARTRECORDING = "StartRecording"
    STOPRECORDING = "StopRecording"
    AUTOMATICRECORDING = "AutomaticRecording"
    TEMPLATEGREETING = "TemplateGreeting"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, CustomCompanyGreetingInfoType._member_map_.values())
        )


class CustomCompanyGreetingInfoContentType(Enum):
    """An enumeration representing different categories.

    :cvar AUDIO_MPEG: "audio/mpeg"
    :vartype AUDIO_MPEG: str
    :cvar AUDIO_WAV: "audio/wav"
    :vartype AUDIO_WAV: str
    """

    AUDIO_MPEG = "audio/mpeg"
    AUDIO_WAV = "audio/wav"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                CustomCompanyGreetingInfoContentType._member_map_.values(),
            )
        )


@JsonMap(
    {
        "id_": "id",
        "type_": "type",
        "content_type": "contentType",
        "content_uri": "contentUri",
        "answering_rule": "answeringRule",
    }
)
class CustomCompanyGreetingInfo(BaseModel):
    """CustomCompanyGreetingInfo

    :param uri: Link to an extension custom greeting, defaults to None
    :type uri: str, optional
    :param id_: Internal identifier of an answering rule, defaults to None
    :type id_: str, optional
    :param type_: Type of company greeting, defaults to None
    :type type_: CustomCompanyGreetingInfoType, optional
    :param content_type: Content media type, defaults to None
    :type content_type: CustomCompanyGreetingInfoContentType, optional
    :param content_uri: Link to a greeting content (audio file), defaults to None
    :type content_uri: str, optional
    :param answering_rule: Information on an answering rule that the greeting is applied to, defaults to None
    :type answering_rule: CustomGreetingAnsweringRuleInfo, optional
    :param language: Information on a greeting language. Supported for types 'StopRecording', 'StartRecording', 'AutomaticRecording', defaults to None
    :type language: CustomCompanyGreetingLanguageInfo, optional
    """

    def __init__(
        self,
        uri: str = None,
        id_: str = None,
        type_: CustomCompanyGreetingInfoType = None,
        content_type: CustomCompanyGreetingInfoContentType = None,
        content_uri: str = None,
        answering_rule: CustomGreetingAnsweringRuleInfo = None,
        language: CustomCompanyGreetingLanguageInfo = None,
    ):
        if uri is not None:
            self.uri = uri
        if id_ is not None:
            self.id_ = id_
        if type_ is not None:
            self.type_ = self._enum_matching(
                type_, CustomCompanyGreetingInfoType.list(), "type_"
            )
        if content_type is not None:
            self.content_type = self._enum_matching(
                content_type,
                CustomCompanyGreetingInfoContentType.list(),
                "content_type",
            )
        if content_uri is not None:
            self.content_uri = content_uri
        if answering_rule is not None:
            self.answering_rule = self._define_object(
                answering_rule, CustomGreetingAnsweringRuleInfo
            )
        if language is not None:
            self.language = self._define_object(
                language, CustomCompanyGreetingLanguageInfo
            )
