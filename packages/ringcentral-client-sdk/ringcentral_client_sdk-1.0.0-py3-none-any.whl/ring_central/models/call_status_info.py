# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel
from .peer_info import PeerInfo


class CallStatusInfoCode(Enum):
    """An enumeration representing different categories.

    :cvar SETUP: "Setup"
    :vartype SETUP: str
    :cvar PROCEEDING: "Proceeding"
    :vartype PROCEEDING: str
    :cvar ANSWERED: "Answered"
    :vartype ANSWERED: str
    :cvar DISCONNECTED: "Disconnected"
    :vartype DISCONNECTED: str
    :cvar GONE: "Gone"
    :vartype GONE: str
    :cvar PARKED: "Parked"
    :vartype PARKED: str
    :cvar HOLD: "Hold"
    :vartype HOLD: str
    :cvar VOICEMAIL: "VoiceMail"
    :vartype VOICEMAIL: str
    :cvar FAXRECEIVE: "FaxReceive"
    :vartype FAXRECEIVE: str
    :cvar TDS: "Tds"
    :vartype TDS: str
    :cvar VOICEMAILSCREENING: "VoiceMailScreening"
    :vartype VOICEMAILSCREENING: str
    """

    SETUP = "Setup"
    PROCEEDING = "Proceeding"
    ANSWERED = "Answered"
    DISCONNECTED = "Disconnected"
    GONE = "Gone"
    PARKED = "Parked"
    HOLD = "Hold"
    VOICEMAIL = "VoiceMail"
    FAXRECEIVE = "FaxReceive"
    TDS = "Tds"
    VOICEMAILSCREENING = "VoiceMailScreening"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, CallStatusInfoCode._member_map_.values()))


class CallStatusInfoReason(Enum):
    """An enumeration representing different categories.

    :cvar PICKUP: "Pickup"
    :vartype PICKUP: str
    :cvar SUPERVISING: "Supervising"
    :vartype SUPERVISING: str
    :cvar TAKEOVER: "TakeOver"
    :vartype TAKEOVER: str
    :cvar TIMEOUT: "Timeout"
    :vartype TIMEOUT: str
    :cvar BLINDTRANSFER: "BlindTransfer"
    :vartype BLINDTRANSFER: str
    :cvar RCCTRANSFER: "RccTransfer"
    :vartype RCCTRANSFER: str
    :cvar ATTENDEDTRANSFER: "AttendedTransfer"
    :vartype ATTENDEDTRANSFER: str
    :cvar CALLERINPUTREDIRECT: "CallerInputRedirect"
    :vartype CALLERINPUTREDIRECT: str
    :cvar CALLFLIP: "CallFlip"
    :vartype CALLFLIP: str
    :cvar PARKLOCATION: "ParkLocation"
    :vartype PARKLOCATION: str
    :cvar DTMFTRANSFER: "DtmfTransfer"
    :vartype DTMFTRANSFER: str
    :cvar AGENTANSWERED: "AgentAnswered"
    :vartype AGENTANSWERED: str
    :cvar AGENTDROPPED: "AgentDropped"
    :vartype AGENTDROPPED: str
    :cvar REJECTED: "Rejected"
    :vartype REJECTED: str
    :cvar CANCELLED: "Cancelled"
    :vartype CANCELLED: str
    :cvar INTERNALERROR: "InternalError"
    :vartype INTERNALERROR: str
    :cvar NOANSWER: "NoAnswer"
    :vartype NOANSWER: str
    :cvar TARGETBUSY: "TargetBusy"
    :vartype TARGETBUSY: str
    :cvar INVALIDNUMBER: "InvalidNumber"
    :vartype INVALIDNUMBER: str
    :cvar INTERNATIONALDISABLED: "InternationalDisabled"
    :vartype INTERNATIONALDISABLED: str
    :cvar DESTINATIONBLOCKED: "DestinationBlocked"
    :vartype DESTINATIONBLOCKED: str
    :cvar NOTENOUGHFUNDS: "NotEnoughFunds"
    :vartype NOTENOUGHFUNDS: str
    :cvar NOSUCHUSER: "NoSuchUser"
    :vartype NOSUCHUSER: str
    :cvar CALLPARK: "CallPark"
    :vartype CALLPARK: str
    :cvar CALLREDIRECTED: "CallRedirected"
    :vartype CALLREDIRECTED: str
    :cvar CALLREPLIED: "CallReplied"
    :vartype CALLREPLIED: str
    :cvar CALLSWITCH: "CallSwitch"
    :vartype CALLSWITCH: str
    :cvar CALLFINISHED: "CallFinished"
    :vartype CALLFINISHED: str
    :cvar CALLDROPPED: "CallDropped"
    :vartype CALLDROPPED: str
    """

    PICKUP = "Pickup"
    SUPERVISING = "Supervising"
    TAKEOVER = "TakeOver"
    TIMEOUT = "Timeout"
    BLINDTRANSFER = "BlindTransfer"
    RCCTRANSFER = "RccTransfer"
    ATTENDEDTRANSFER = "AttendedTransfer"
    CALLERINPUTREDIRECT = "CallerInputRedirect"
    CALLFLIP = "CallFlip"
    PARKLOCATION = "ParkLocation"
    DTMFTRANSFER = "DtmfTransfer"
    AGENTANSWERED = "AgentAnswered"
    AGENTDROPPED = "AgentDropped"
    REJECTED = "Rejected"
    CANCELLED = "Cancelled"
    INTERNALERROR = "InternalError"
    NOANSWER = "NoAnswer"
    TARGETBUSY = "TargetBusy"
    INVALIDNUMBER = "InvalidNumber"
    INTERNATIONALDISABLED = "InternationalDisabled"
    DESTINATIONBLOCKED = "DestinationBlocked"
    NOTENOUGHFUNDS = "NotEnoughFunds"
    NOSUCHUSER = "NoSuchUser"
    CALLPARK = "CallPark"
    CALLREDIRECTED = "CallRedirected"
    CALLREPLIED = "CallReplied"
    CALLSWITCH = "CallSwitch"
    CALLFINISHED = "CallFinished"
    CALLDROPPED = "CallDropped"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, CallStatusInfoReason._member_map_.values()))


@JsonMap({"peer_id": "peerId"})
class CallStatusInfo(BaseModel):
    """Status data of a call session

    :param code: Status code of a call, defaults to None
    :type code: CallStatusInfoCode, optional
    :param peer_id: Peer session/party details. Valid in 'Gone' state of a call, defaults to None
    :type peer_id: PeerInfo, optional
    :param reason: Reason for call termination. For 'Disconnected' code only, defaults to None
    :type reason: CallStatusInfoReason, optional
    :param description: Optional message, defaults to None
    :type description: str, optional
    """

    def __init__(
        self,
        code: CallStatusInfoCode = None,
        peer_id: PeerInfo = None,
        reason: CallStatusInfoReason = None,
        description: str = None,
    ):
        if code is not None:
            self.code = self._enum_matching(code, CallStatusInfoCode.list(), "code")
        if peer_id is not None:
            self.peer_id = self._define_object(peer_id, PeerInfo)
        if reason is not None:
            self.reason = self._enum_matching(
                reason, CallStatusInfoReason.list(), "reason"
            )
        if description is not None:
            self.description = description
