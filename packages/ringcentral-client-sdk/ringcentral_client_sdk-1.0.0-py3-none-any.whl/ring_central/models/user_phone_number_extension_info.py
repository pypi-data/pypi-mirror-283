# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel
from .contact_center_provider import ContactCenterProvider


class UserPhoneNumberExtensionInfoType(Enum):
    """An enumeration representing different categories.

    :cvar USER: "User"
    :vartype USER: str
    :cvar FAXUSER: "FaxUser"
    :vartype FAXUSER: str
    :cvar VIRTUALUSER: "VirtualUser"
    :vartype VIRTUALUSER: str
    :cvar DIGITALUSER: "DigitalUser"
    :vartype DIGITALUSER: str
    :cvar DEPARTMENT: "Department"
    :vartype DEPARTMENT: str
    :cvar ANNOUNCEMENT: "Announcement"
    :vartype ANNOUNCEMENT: str
    :cvar VOICEMAIL: "Voicemail"
    :vartype VOICEMAIL: str
    :cvar SHAREDLINESGROUP: "SharedLinesGroup"
    :vartype SHAREDLINESGROUP: str
    :cvar PAGINGONLY: "PagingOnly"
    :vartype PAGINGONLY: str
    :cvar IVRMENU: "IvrMenu"
    :vartype IVRMENU: str
    :cvar APPLICATIONEXTENSION: "ApplicationExtension"
    :vartype APPLICATIONEXTENSION: str
    :cvar PARKLOCATION: "ParkLocation"
    :vartype PARKLOCATION: str
    :cvar SITE: "Site"
    :vartype SITE: str
    """

    USER = "User"
    FAXUSER = "FaxUser"
    VIRTUALUSER = "VirtualUser"
    DIGITALUSER = "DigitalUser"
    DEPARTMENT = "Department"
    ANNOUNCEMENT = "Announcement"
    VOICEMAIL = "Voicemail"
    SHAREDLINESGROUP = "SharedLinesGroup"
    PAGINGONLY = "PagingOnly"
    IVRMENU = "IvrMenu"
    APPLICATIONEXTENSION = "ApplicationExtension"
    PARKLOCATION = "ParkLocation"
    SITE = "Site"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                UserPhoneNumberExtensionInfoType._member_map_.values(),
            )
        )


@JsonMap(
    {
        "id_": "id",
        "extension_number": "extensionNumber",
        "partner_id": "partnerId",
        "type_": "type",
        "contact_center_provider": "contactCenterProvider",
    }
)
class UserPhoneNumberExtensionInfo(BaseModel):
    """Information on the extension, to which the phone number is assigned.
    Returned only for the request of Account phone number list


    :param id_: Internal identifier of an extension, defaults to None
    :type id_: int, optional
    :param uri: Canonical URI of an extension, defaults to None
    :type uri: str, optional
    :param extension_number: Extension short number, defaults to None
    :type extension_number: str, optional
    :param partner_id: For Partner Applications Internal identifier of an extension<br>created by partner. The RingCentral supports the mapping of accounts and<br>stores the corresponding account ID/extension ID for each partner ID of<br>a client application. In request URIs partner IDs are accepted instead<br>of regular RingCentral native IDs as path parameters using `pid=XXX` clause.<br>Though in response URIs contain the corresponding account IDs and extension<br>IDs. In all request and response bodies these values are reflected via<br>partnerId attributes of account and extension<br>, defaults to None
    :type partner_id: str, optional
    :param type_: Extension type. Please note that legacy 'Department' extension type<br>corresponds to 'Call Queue' extensions in modern RingCentral product terminology<br>, defaults to None
    :type type_: UserPhoneNumberExtensionInfoType, optional
    :param contact_center_provider: CCRN (Contact Center Routing Number) provider. If not specified<br>then the default value 'InContact/North America' is used, its ID is '1'<br>, defaults to None
    :type contact_center_provider: ContactCenterProvider, optional
    :param name: Extension name. For user extension types the value is a combination<br>of the specified first name and last name<br>, defaults to None
    :type name: str, optional
    """

    def __init__(
        self,
        id_: int = None,
        uri: str = None,
        extension_number: str = None,
        partner_id: str = None,
        type_: UserPhoneNumberExtensionInfoType = None,
        contact_center_provider: ContactCenterProvider = None,
        name: str = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if uri is not None:
            self.uri = uri
        if extension_number is not None:
            self.extension_number = extension_number
        if partner_id is not None:
            self.partner_id = partner_id
        if type_ is not None:
            self.type_ = self._enum_matching(
                type_, UserPhoneNumberExtensionInfoType.list(), "type_"
            )
        if contact_center_provider is not None:
            self.contact_center_provider = self._define_object(
                contact_center_provider, ContactCenterProvider
            )
        if name is not None:
            self.name = name
