# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel
from .bridge_pins import BridgePins
from .bridge_request_security import BridgeRequestSecurity
from .bridge_preferences import BridgePreferences


class CreateBridgeRequestType(Enum):
    """An enumeration representing different categories.

    :cvar INSTANT: "Instant"
    :vartype INSTANT: str
    :cvar SCHEDULED: "Scheduled"
    :vartype SCHEDULED: str
    :cvar PMI: "PMI"
    :vartype PMI: str
    """

    INSTANT = "Instant"
    SCHEDULED = "Scheduled"
    PMI = "PMI"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, CreateBridgeRequestType._member_map_.values())
        )


@JsonMap({"type_": "type"})
class CreateBridgeRequest(BaseModel):
    """CreateBridgeRequest

    :param name: Custom name of a bridge, defaults to None
    :type name: str, optional
    :param type_: Type of bridge. It specifies bridge life cycle.<br>1) Instant - The bridge will be used for a meeting only once immediately after creation. Then it will be deleted.<br>2) Scheduled - The bridge will be used for scheduled one or more meetings. If the bridge is not used for a long<br>time after the last meeting, then it will be deleted.<br>3) PMI - The bridge will contain Personal Meeting Identifier owned by a user. It is the default user bridge.<br>Each user may have only one default (PMI) bridge. Such bridge will be deleted only in case the user is deleted<br>from the system.<br>, defaults to None
    :type type_: CreateBridgeRequestType, optional
    :param pins: pins, defaults to None
    :type pins: BridgePins, optional
    :param security: security, defaults to None
    :type security: BridgeRequestSecurity, optional
    :param preferences: preferences, defaults to None
    :type preferences: BridgePreferences, optional
    """

    def __init__(
        self,
        name: str = None,
        type_: CreateBridgeRequestType = None,
        pins: BridgePins = None,
        security: BridgeRequestSecurity = None,
        preferences: BridgePreferences = None,
    ):
        if name is not None:
            self.name = name
        if type_ is not None:
            self.type_ = self._enum_matching(
                type_, CreateBridgeRequestType.list(), "type_"
            )
        if pins is not None:
            self.pins = self._define_object(pins, BridgePins)
        if security is not None:
            self.security = self._define_object(security, BridgeRequestSecurity)
        if preferences is not None:
            self.preferences = self._define_object(preferences, BridgePreferences)
