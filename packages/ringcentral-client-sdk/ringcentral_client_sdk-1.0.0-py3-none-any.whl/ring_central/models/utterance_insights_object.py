# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .word_timings_unit import WordTimingsUnit
from .utterance_insights_unit import UtteranceInsightsUnit


@JsonMap({"speaker_id": "speakerId", "word_timings": "wordTimings"})
class UtteranceInsightsObject(BaseModel):
    """UtteranceInsightsObject

    :param start: start
    :type start: float
    :param end: end
    :type end: float
    :param text: text
    :type text: str
    :param confidence: confidence, defaults to None
    :type confidence: float, optional
    :param speaker_id: speaker_id, defaults to None
    :type speaker_id: str, optional
    :param word_timings: word_timings, defaults to None
    :type word_timings: List[WordTimingsUnit], optional
    :param insights: insights, defaults to None
    :type insights: List[UtteranceInsightsUnit], optional
    """

    def __init__(
        self,
        start: float,
        end: float,
        text: str,
        confidence: float = None,
        speaker_id: str = None,
        word_timings: List[WordTimingsUnit] = None,
        insights: List[UtteranceInsightsUnit] = None,
    ):
        self.start = start
        self.end = end
        self.text = text
        if confidence is not None:
            self.confidence = confidence
        if speaker_id is not None:
            self.speaker_id = speaker_id
        if word_timings is not None:
            self.word_timings = self._define_list(word_timings, WordTimingsUnit)
        if insights is not None:
            self.insights = self._define_list(insights, UtteranceInsightsUnit)
