# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .tm_chat_member_info import TmChatMemberInfo


class TmChatInfoType(Enum):
    """An enumeration representing different categories.

    :cvar EVERYONE: "Everyone"
    :vartype EVERYONE: str
    :cvar TEAM: "Team"
    :vartype TEAM: str
    :cvar GROUP: "Group"
    :vartype GROUP: str
    :cvar DIRECT: "Direct"
    :vartype DIRECT: str
    :cvar PERSONAL: "Personal"
    :vartype PERSONAL: str
    """

    EVERYONE = "Everyone"
    TEAM = "Team"
    GROUP = "Group"
    DIRECT = "Direct"
    PERSONAL = "Personal"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, TmChatInfoType._member_map_.values()))


class TmChatInfoStatus(Enum):
    """An enumeration representing different categories.

    :cvar ACTIVE: "Active"
    :vartype ACTIVE: str
    :cvar ARCHIVED: "Archived"
    :vartype ARCHIVED: str
    """

    ACTIVE = "Active"
    ARCHIVED = "Archived"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, TmChatInfoStatus._member_map_.values()))


@JsonMap(
    {
        "id_": "id",
        "type_": "type",
        "creation_time": "creationTime",
        "last_modified_time": "lastModifiedTime",
    }
)
class TmChatInfo(BaseModel):
    """TmChatInfo

    :param id_: Internal identifier of a chat, defaults to None
    :type id_: str, optional
    :param type_: Type of chat, defaults to None
    :type type_: TmChatInfoType, optional
    :param public: For 'Team' chat type only. Team access level., defaults to None
    :type public: bool, optional
    :param name: For 'Team','Everyone' chats types only. Chat name., defaults to None
    :type name: str, optional
    :param description: For 'Team','Everyone' chats types only. Chat description., defaults to None
    :type description: str, optional
    :param status: For 'Team' chat type only. Team status., defaults to None
    :type status: TmChatInfoStatus, optional
    :param creation_time: Chat creation datetime in ISO 8601 format, defaults to None
    :type creation_time: str, optional
    :param last_modified_time: Chat last change datetime in ISO 8601 format, defaults to None
    :type last_modified_time: str, optional
    :param members: members, defaults to None
    :type members: List[TmChatMemberInfo], optional
    """

    def __init__(
        self,
        id_: str = None,
        type_: TmChatInfoType = None,
        public: bool = None,
        name: str = None,
        description: str = None,
        status: TmChatInfoStatus = None,
        creation_time: str = None,
        last_modified_time: str = None,
        members: List[TmChatMemberInfo] = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if type_ is not None:
            self.type_ = self._enum_matching(type_, TmChatInfoType.list(), "type_")
        if public is not None:
            self.public = public
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if status is not None:
            self.status = self._enum_matching(status, TmChatInfoStatus.list(), "status")
        if creation_time is not None:
            self.creation_time = creation_time
        if last_modified_time is not None:
            self.last_modified_time = last_modified_time
        if members is not None:
            self.members = self._define_list(members, TmChatMemberInfo)
