# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel
from .event_recurrence_info import EventRecurrenceInfo


class TmCreateEventRequestColor(Enum):
    """An enumeration representing different categories.

    :cvar BLACK: "Black"
    :vartype BLACK: str
    :cvar RED: "Red"
    :vartype RED: str
    :cvar ORANGE: "Orange"
    :vartype ORANGE: str
    :cvar YELLOW: "Yellow"
    :vartype YELLOW: str
    :cvar GREEN: "Green"
    :vartype GREEN: str
    :cvar BLUE: "Blue"
    :vartype BLUE: str
    :cvar PURPLE: "Purple"
    :vartype PURPLE: str
    :cvar MAGENTA: "Magenta"
    :vartype MAGENTA: str
    """

    BLACK = "Black"
    RED = "Red"
    ORANGE = "Orange"
    YELLOW = "Yellow"
    GREEN = "Green"
    BLUE = "Blue"
    PURPLE = "Purple"
    MAGENTA = "Magenta"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, TmCreateEventRequestColor._member_map_.values())
        )


@JsonMap(
    {
        "id_": "id",
        "creator_id": "creatorId",
        "start_time": "startTime",
        "end_time": "endTime",
        "all_day": "allDay",
    }
)
class TmCreateEventRequest(BaseModel):
    """TmCreateEventRequest

    :param id_: Internal identifier of an event, defaults to None
    :type id_: str, optional
    :param creator_id: Internal identifier of a person created an event, defaults to None
    :type creator_id: str, optional
    :param title: Event title
    :type title: str
    :param start_time: Datetime of starting an event
    :type start_time: str
    :param end_time: Datetime of ending an event
    :type end_time: str
    :param all_day: Indicates whether event has some specific time slot or lasts for whole day(s), defaults to None
    :type all_day: bool, optional
    :param recurrence: recurrence, defaults to None
    :type recurrence: EventRecurrenceInfo, optional
    :param color: Color of Event title (including its presentation in Calendar), defaults to None
    :type color: TmCreateEventRequestColor, optional
    :param location: Event location, defaults to None
    :type location: str, optional
    :param description: Event details, defaults to None
    :type description: str, optional
    """

    def __init__(
        self,
        title: str,
        start_time: str,
        end_time: str,
        id_: str = None,
        creator_id: str = None,
        all_day: bool = None,
        recurrence: EventRecurrenceInfo = None,
        color: TmCreateEventRequestColor = None,
        location: str = None,
        description: str = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if creator_id is not None:
            self.creator_id = creator_id
        self.title = title
        self.start_time = start_time
        self.end_time = end_time
        if all_day is not None:
            self.all_day = all_day
        if recurrence is not None:
            self.recurrence = self._define_object(recurrence, EventRecurrenceInfo)
        if color is not None:
            self.color = self._enum_matching(
                color, TmCreateEventRequestColor.list(), "color"
            )
        if location is not None:
            self.location = location
        if description is not None:
            self.description = description
