# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .forwarding_rule_create_request import ForwardingRuleCreateRequest


class ForwardingInfoCreateRuleRequestRingingMode(Enum):
    """An enumeration representing different categories.

    :cvar SEQUENTIALLY: "Sequentially"
    :vartype SEQUENTIALLY: str
    :cvar SIMULTANEOUSLY: "Simultaneously"
    :vartype SIMULTANEOUSLY: str
    """

    SEQUENTIALLY = "Sequentially"
    SIMULTANEOUSLY = "Simultaneously"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                ForwardingInfoCreateRuleRequestRingingMode._member_map_.values(),
            )
        )


@JsonMap(
    {
        "notify_my_soft_phones": "notifyMySoftPhones",
        "notify_admin_soft_phones": "notifyAdminSoftPhones",
        "soft_phones_ring_count": "softPhonesRingCount",
        "soft_phones_always_ring": "softPhonesAlwaysRing",
        "ringing_mode": "ringingMode",
        "mobile_timeout": "mobileTimeout",
    }
)
class ForwardingInfoCreateRuleRequest(BaseModel):
    """Forwarding parameters. Returned if 'ForwardCalls' is specified in 'callHandlingAction'. These settings determine the forwarding numbers to which the call will be forwarded

    :param notify_my_soft_phones: Specifies if the first ring on desktop/mobile apps is enabled. The default value is `true`, defaults to None
    :type notify_my_soft_phones: bool, optional
    :param notify_admin_soft_phones: Deprecated parameter. Specifies if the administrator's softphone (desktop application) is notified before forwarding the incoming call to desk phones and forwarding numbers. The default value is `true`., defaults to None
    :type notify_admin_soft_phones: bool, optional
    :param soft_phones_ring_count: Specifies delay between ring on apps and starting of a call forwarding. To activate this parameter use the value > 0, and turn off the `softPhonesAlwaysRing` setting. If the value is 1 or 0, the `softPhonesAlwaysRing` setting cannot be turned off, defaults to None
    :type soft_phones_ring_count: int, optional
    :param soft_phones_always_ring: Specifies that desktop and mobile applications of the user will ring till the end of their forwarding list. If set to `true` then `softPhonesRingCount` is ignored, defaults to None
    :type soft_phones_always_ring: bool, optional
    :param ringing_mode: Specifies the order in which forwarding numbers ring. 'Sequentially' means that forwarding numbers are ringing one at a time, in order of priority. 'Simultaneously' means that forwarding numbers are ringing all at the same time. The default value is 'Sequentially', defaults to None
    :type ringing_mode: ForwardingInfoCreateRuleRequestRingingMode, optional
    :param rules: Information on a call forwarding rule, defaults to None
    :type rules: List[ForwardingRuleCreateRequest], optional
    :param mobile_timeout: Deprecated parameter. Specifies if mobile timeout is activated for the rule, defaults to None
    :type mobile_timeout: bool, optional
    """

    def __init__(
        self,
        notify_my_soft_phones: bool = None,
        notify_admin_soft_phones: bool = None,
        soft_phones_ring_count: int = None,
        soft_phones_always_ring: bool = None,
        ringing_mode: ForwardingInfoCreateRuleRequestRingingMode = None,
        rules: List[ForwardingRuleCreateRequest] = None,
        mobile_timeout: bool = None,
    ):
        if notify_my_soft_phones is not None:
            self.notify_my_soft_phones = notify_my_soft_phones
        if notify_admin_soft_phones is not None:
            self.notify_admin_soft_phones = notify_admin_soft_phones
        if soft_phones_ring_count is not None:
            self.soft_phones_ring_count = soft_phones_ring_count
        if soft_phones_always_ring is not None:
            self.soft_phones_always_ring = soft_phones_always_ring
        if ringing_mode is not None:
            self.ringing_mode = self._enum_matching(
                ringing_mode,
                ForwardingInfoCreateRuleRequestRingingMode.list(),
                "ringing_mode",
            )
        if rules is not None:
            self.rules = self._define_list(rules, ForwardingRuleCreateRequest)
        if mobile_timeout is not None:
            self.mobile_timeout = mobile_timeout
