# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .device_definition import DeviceDefinition


class BatchProvisionUsersRequestItemStatus(Enum):
    """An enumeration representing different categories.

    :cvar ENABLED: "Enabled"
    :vartype ENABLED: str
    """

    ENABLED = "Enabled"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                BatchProvisionUsersRequestItemStatus._member_map_.values(),
            )
        )


@JsonMap(
    {
        "first_name": "firstName",
        "last_name": "lastName",
        "mobile_number": "mobileNumber",
        "email_as_login_name": "emailAsLoginName",
    }
)
class Contact(BaseModel):
    """Contact

    :param first_name: Given name, defaults to None
    :type first_name: str, optional
    :param last_name: Family name, defaults to None
    :type last_name: str, optional
    :param email: Contact email, defaults to None
    :type email: str, optional
    :param mobile_number: Phone number in e.164 format (with '+' prefix), defaults to None
    :type mobile_number: str, optional
    :param email_as_login_name: Indicates that contact email is enabled as login name for this user.<br>Please note that email must be unique in this case.<br>, defaults to None
    :type email_as_login_name: bool, optional
    """

    def __init__(
        self,
        first_name: str = None,
        last_name: str = None,
        email: str = None,
        mobile_number: str = None,
        email_as_login_name: bool = None,
    ):
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if email is not None:
            self.email = email
        if mobile_number is not None:
            self.mobile_number = self._pattern_matching(
                mobile_number, "^\+[1-9]\d{1,14}$", "mobile_number"
            )
        if email_as_login_name is not None:
            self.email_as_login_name = email_as_login_name


@JsonMap({"id_": "id"})
class CostCenter(BaseModel):
    """CostCenter

    :param id_: Internal identifier of the Cost Center
    :type id_: str
    """

    def __init__(self, id_: str):
        self.id_ = id_


@JsonMap({"id_": "id"})
class BatchProvisionUsersRequestItemRoles(BaseModel):
    """BatchProvisionUsersRequestItemRoles

    :param id_: Internal identifier of a role to be assigned
    :type id_: str
    """

    def __init__(self, id_: str):
        self.id_ = id_


@JsonMap({"device_info": "deviceInfo"})
class BatchProvisionUsersRequestItemDevices(BaseModel):
    """BatchProvisionUsersRequestItemDevices

    :param device_info: device_info
    :type device_info: DeviceDefinition
    """

    def __init__(self, device_info: DeviceDefinition):
        self.device_info = self._define_object(device_info, DeviceDefinition)


@JsonMap(
    {
        "extension_number": "extensionNumber",
        "cost_center": "costCenter",
        "send_welcome_email": "sendWelcomeEmail",
    }
)
class BatchProvisionUsersRequestItem(BaseModel):
    """Describes request for user extension provisioning

    :param extension_number: Short number of an extension.<br>Actual max length depends on system length limit for extension.<br>, defaults to None
    :type extension_number: str, optional
    :param status: Extension status. Only "Enabled" can be specified
    :type status: BatchProvisionUsersRequestItemStatus
    :param contact: contact
    :type contact: Contact
    :param cost_center: cost_center, defaults to None
    :type cost_center: CostCenter, optional
    :param roles: roles, defaults to None
    :type roles: List[BatchProvisionUsersRequestItemRoles], optional
    :param devices: devices, defaults to None
    :type devices: List[BatchProvisionUsersRequestItemDevices], optional
    :param send_welcome_email: Specifies if a welcome/activation email is sent to the new users (within extension status changing from<br>'Unassigned' to 'NotActivated/Disabled')<br>, defaults to None
    :type send_welcome_email: bool, optional
    """

    def __init__(
        self,
        status: BatchProvisionUsersRequestItemStatus,
        contact: Contact,
        extension_number: str = None,
        cost_center: CostCenter = None,
        roles: List[BatchProvisionUsersRequestItemRoles] = None,
        devices: List[BatchProvisionUsersRequestItemDevices] = None,
        send_welcome_email: bool = None,
    ):
        if extension_number is not None:
            self.extension_number = self._pattern_matching(
                extension_number, "^\d{3,8}$", "extension_number"
            )
        self.status = self._enum_matching(
            status, BatchProvisionUsersRequestItemStatus.list(), "status"
        )
        self.contact = self._define_object(contact, Contact)
        if cost_center is not None:
            self.cost_center = self._define_object(cost_center, CostCenter)
        if roles is not None:
            self.roles = self._define_list(roles, BatchProvisionUsersRequestItemRoles)
        if devices is not None:
            self.devices = self._define_list(
                devices, BatchProvisionUsersRequestItemDevices
            )
        if send_welcome_email is not None:
            self.send_welcome_email = send_welcome_email
