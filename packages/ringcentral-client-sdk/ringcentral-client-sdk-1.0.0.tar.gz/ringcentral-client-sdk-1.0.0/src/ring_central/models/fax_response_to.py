# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .message_status_enum import MessageStatusEnum


@JsonMap(
    {
        "recipient_id": "recipientId",
        "phone_number": "phoneNumber",
        "message_status": "messageStatus",
    }
)
class FaxResponseTo(BaseModel):
    """FaxResponseTo

    :param recipient_id: Internal identifier of a fax recipient, defaults to None
    :type recipient_id: str, optional
    :param phone_number: Phone number in E.164 (with '+' sign) format, defaults to None
    :type phone_number: str, optional
    :param name: Name of a fax recipient listed on a fax cover page, defaults to None
    :type name: str, optional
    :param message_status: Message status. Different message types may have different<br>allowed status values. For outbound faxes the aggregated message status<br>is returned. If, for outbound message, a status for at least one recipient is 'Queued', then<br>the 'Queued' value is returned. If a status for at least one recipient is<br>'SendingFailed', then the 'SendingFailed' value is returned. In other cases<br>the 'Sent' status is returned<br>, defaults to None
    :type message_status: MessageStatusEnum, optional
    :param location: Contains party location (city, state) if one can be determined<br>from phoneNumber. This property is filled only when phoneNumber is not<br>empty and server can calculate location information from it (for example,<br>this information is unavailable for US toll-free numbers)<br>, defaults to None
    :type location: str, optional
    """

    def __init__(
        self,
        recipient_id: str = None,
        phone_number: str = None,
        name: str = None,
        message_status: MessageStatusEnum = None,
        location: str = None,
    ):
        if recipient_id is not None:
            self.recipient_id = recipient_id
        if phone_number is not None:
            self.phone_number = phone_number
        if name is not None:
            self.name = name
        if message_status is not None:
            self.message_status = self._enum_matching(
                message_status, MessageStatusEnum.list(), "message_status"
            )
        if location is not None:
            self.location = location
