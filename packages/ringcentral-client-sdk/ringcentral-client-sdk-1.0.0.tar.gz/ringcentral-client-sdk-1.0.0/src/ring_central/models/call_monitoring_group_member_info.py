# This file was generated by liblab | https://liblab.com/

from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel


class CallMonitoringGroupMemberInfoPermissions(Enum):
    """An enumeration representing different categories.

    :cvar MONITORING: "Monitoring"
    :vartype MONITORING: str
    :cvar MONITORED: "Monitored"
    :vartype MONITORED: str
    """

    MONITORING = "Monitoring"
    MONITORED = "Monitored"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                CallMonitoringGroupMemberInfoPermissions._member_map_.values(),
            )
        )


@JsonMap({"id_": "id", "extension_number": "extensionNumber"})
class CallMonitoringGroupMemberInfo(BaseModel):
    """CallMonitoringGroupMemberInfo

    :param uri: Link to a call monitoring group member, defaults to None
    :type uri: str, optional
    :param id_: Internal identifier of a call monitoring group member<br>, defaults to None
    :type id_: str, optional
    :param extension_number: Extension number of a call monitoring group member<br>, defaults to None
    :type extension_number: str, optional
    :param permissions: permissions, defaults to None
    :type permissions: List[CallMonitoringGroupMemberInfoPermissions], optional
    """

    def __init__(
        self,
        uri: str = None,
        id_: str = None,
        extension_number: str = None,
        permissions: List[CallMonitoringGroupMemberInfoPermissions] = None,
    ):
        if uri is not None:
            self.uri = uri
        if id_ is not None:
            self.id_ = id_
        if extension_number is not None:
            self.extension_number = extension_number
        if permissions is not None:
            self.permissions = self._define_list(
                permissions, CallMonitoringGroupMemberInfoPermissions
            )
