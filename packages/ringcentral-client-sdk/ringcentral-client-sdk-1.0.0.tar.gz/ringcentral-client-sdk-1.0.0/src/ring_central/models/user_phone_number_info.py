# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .country_info_basic_model import CountryInfoBasicModel
from .contact_center_provider import ContactCenterProvider
from .user_phone_number_extension_info import UserPhoneNumberExtensionInfo
from .platform_payment_type import PlatformPaymentType


class UserPhoneNumberInfoStatus(Enum):
    """An enumeration representing different categories.

    :cvar NORMAL: "Normal"
    :vartype NORMAL: str
    :cvar PENDING: "Pending"
    :vartype PENDING: str
    :cvar PORTEDIN: "PortedIn"
    :vartype PORTEDIN: str
    :cvar TEMPORARY: "Temporary"
    :vartype TEMPORARY: str
    """

    NORMAL = "Normal"
    PENDING = "Pending"
    PORTEDIN = "PortedIn"
    TEMPORARY = "Temporary"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, UserPhoneNumberInfoStatus._member_map_.values())
        )


class UserPhoneNumberInfoType(Enum):
    """An enumeration representing different categories.

    :cvar VOICEFAX: "VoiceFax"
    :vartype VOICEFAX: str
    :cvar FAXONLY: "FaxOnly"
    :vartype FAXONLY: str
    :cvar VOICEONLY: "VoiceOnly"
    :vartype VOICEONLY: str
    """

    VOICEFAX = "VoiceFax"
    FAXONLY = "FaxOnly"
    VOICEONLY = "VoiceOnly"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, UserPhoneNumberInfoType._member_map_.values())
        )


class UserPhoneNumberInfoSubType(Enum):
    """An enumeration representing different categories.

    :cvar VIDEOPRO: "VideoPro"
    :vartype VIDEOPRO: str
    :cvar VIDEOPROPLUS: "VideoProPlus"
    :vartype VIDEOPROPLUS: str
    :cvar DIGITALSIGNAGE: "DigitalSignage"
    :vartype DIGITALSIGNAGE: str
    :cvar UNKNOWN: "Unknown"
    :vartype UNKNOWN: str
    :cvar EMERGENCY: "Emergency"
    :vartype EMERGENCY: str
    """

    VIDEOPRO = "VideoPro"
    VIDEOPROPLUS = "VideoProPlus"
    DIGITALSIGNAGE = "DigitalSignage"
    UNKNOWN = "Unknown"
    EMERGENCY = "Emergency"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, UserPhoneNumberInfoSubType._member_map_.values())
        )


class UserPhoneNumberInfoUsageType(Enum):
    """An enumeration representing different categories.

    :cvar MAINCOMPANYNUMBER: "MainCompanyNumber"
    :vartype MAINCOMPANYNUMBER: str
    :cvar ADDITIONALCOMPANYNUMBER: "AdditionalCompanyNumber"
    :vartype ADDITIONALCOMPANYNUMBER: str
    :cvar COMPANYNUMBER: "CompanyNumber"
    :vartype COMPANYNUMBER: str
    :cvar DIRECTNUMBER: "DirectNumber"
    :vartype DIRECTNUMBER: str
    :cvar COMPANYFAXNUMBER: "CompanyFaxNumber"
    :vartype COMPANYFAXNUMBER: str
    :cvar FORWARDEDNUMBER: "ForwardedNumber"
    :vartype FORWARDEDNUMBER: str
    :cvar FORWARDEDCOMPANYNUMBER: "ForwardedCompanyNumber"
    :vartype FORWARDEDCOMPANYNUMBER: str
    :cvar CONTACTCENTERNUMBER: "ContactCenterNumber"
    :vartype CONTACTCENTERNUMBER: str
    :cvar CONFERENCINGNUMBER: "ConferencingNumber"
    :vartype CONFERENCINGNUMBER: str
    :cvar NUMBERPOOL: "NumberPool"
    :vartype NUMBERPOOL: str
    :cvar BUSINESSMOBILENUMBER: "BusinessMobileNumber"
    :vartype BUSINESSMOBILENUMBER: str
    :cvar PARTNERBUSINESSMOBILENUMBER: "PartnerBusinessMobileNumber"
    :vartype PARTNERBUSINESSMOBILENUMBER: str
    :cvar INTEGRATIONNUMBER: "IntegrationNumber"
    :vartype INTEGRATIONNUMBER: str
    """

    MAINCOMPANYNUMBER = "MainCompanyNumber"
    ADDITIONALCOMPANYNUMBER = "AdditionalCompanyNumber"
    COMPANYNUMBER = "CompanyNumber"
    DIRECTNUMBER = "DirectNumber"
    COMPANYFAXNUMBER = "CompanyFaxNumber"
    FORWARDEDNUMBER = "ForwardedNumber"
    FORWARDEDCOMPANYNUMBER = "ForwardedCompanyNumber"
    CONTACTCENTERNUMBER = "ContactCenterNumber"
    CONFERENCINGNUMBER = "ConferencingNumber"
    NUMBERPOOL = "NumberPool"
    BUSINESSMOBILENUMBER = "BusinessMobileNumber"
    PARTNERBUSINESSMOBILENUMBER = "PartnerBusinessMobileNumber"
    INTEGRATIONNUMBER = "IntegrationNumber"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, UserPhoneNumberInfoUsageType._member_map_.values())
        )


class UserPhoneNumberInfoFeatures(Enum):
    """An enumeration representing different categories.

    :cvar CALLERID: "CallerId"
    :vartype CALLERID: str
    :cvar SMSSENDER: "SmsSender"
    :vartype SMSSENDER: str
    :cvar A2PSMSSENDER: "A2PSmsSender"
    :vartype A2PSMSSENDER: str
    :cvar MMSSENDER: "MmsSender"
    :vartype MMSSENDER: str
    :cvar INTERNATIONALSMSSENDER: "InternationalSmsSender"
    :vartype INTERNATIONALSMSSENDER: str
    :cvar DELEGATED: "Delegated"
    :vartype DELEGATED: str
    """

    CALLERID = "CallerId"
    SMSSENDER = "SmsSender"
    A2PSMSSENDER = "A2PSmsSender"
    MMSSENDER = "MmsSender"
    INTERNATIONALSMSSENDER = "InternationalSmsSender"
    DELEGATED = "Delegated"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, UserPhoneNumberInfoFeatures._member_map_.values())
        )


@JsonMap(
    {
        "id_": "id",
        "contact_center_provider": "contactCenterProvider",
        "payment_type": "paymentType",
        "phone_number": "phoneNumber",
        "type_": "type",
        "sub_type": "subType",
        "usage_type": "usageType",
    }
)
class UserPhoneNumberInfo(BaseModel):
    """UserPhoneNumberInfo

    :param uri: Link to the user phone number resource, defaults to None
    :type uri: str, optional
    :param id_: Internal identifier of a phone number, defaults to None
    :type id_: int, optional
    :param country: country, defaults to None
    :type country: CountryInfoBasicModel, optional
    :param contact_center_provider: CCRN (Contact Center Routing Number) provider. If not specified<br>then the default value 'InContact/North America' is used, its ID is '1'<br>, defaults to None
    :type contact_center_provider: ContactCenterProvider, optional
    :param extension: Information on the extension, to which the phone number is assigned.<br>Returned only for the request of Account phone number list<br>, defaults to None
    :type extension: UserPhoneNumberExtensionInfo, optional
    :param label: Custom user-defined name of a phone number, if any, defaults to None
    :type label: str, optional
    :param location: Location (City, State). Filled for local US numbers, defaults to None
    :type location: str, optional
    :param payment_type: Payment type. 'External' is returned for forwarded numbers<br>which are not terminated in the RingCentral phone system<br>, defaults to None
    :type payment_type: PlatformPaymentType, optional
    :param phone_number: Phone number, defaults to None
    :type phone_number: str, optional
    :param primary: Indicates if a phone number is primary, i.e. displayed as 'main number' and called by default<br>, defaults to None
    :type primary: bool, optional
    :param status: Status of a phone number. If the value is 'Normal', the phone<br>number is ready to be used. Otherwise, it is an external number not yet<br>ported to RingCentral<br>, defaults to None
    :type status: UserPhoneNumberInfoStatus, optional
    :param type_: Phone number type, defaults to None
    :type type_: UserPhoneNumberInfoType, optional
    :param sub_type: Extension subtype, if applicable. For any unsupported subtypes the 'Unknown' value will be returned<br>, defaults to None
    :type sub_type: UserPhoneNumberInfoSubType, optional
    :param usage_type: Usage type of phone number. Numbers of 'NumberPool' type will not be returned for phone number list requests<br>, defaults to None
    :type usage_type: UserPhoneNumberInfoUsageType, optional
    :param features: List of features of a phone number, defaults to None
    :type features: List[UserPhoneNumberInfoFeatures], optional
    """

    def __init__(
        self,
        uri: str = None,
        id_: int = None,
        country: CountryInfoBasicModel = None,
        contact_center_provider: ContactCenterProvider = None,
        extension: UserPhoneNumberExtensionInfo = None,
        label: str = None,
        location: str = None,
        payment_type: PlatformPaymentType = None,
        phone_number: str = None,
        primary: bool = None,
        status: UserPhoneNumberInfoStatus = None,
        type_: UserPhoneNumberInfoType = None,
        sub_type: UserPhoneNumberInfoSubType = None,
        usage_type: UserPhoneNumberInfoUsageType = None,
        features: List[UserPhoneNumberInfoFeatures] = None,
    ):
        if uri is not None:
            self.uri = uri
        if id_ is not None:
            self.id_ = id_
        if country is not None:
            self.country = self._define_object(country, CountryInfoBasicModel)
        if contact_center_provider is not None:
            self.contact_center_provider = self._define_object(
                contact_center_provider, ContactCenterProvider
            )
        if extension is not None:
            self.extension = self._define_object(
                extension, UserPhoneNumberExtensionInfo
            )
        if label is not None:
            self.label = label
        if location is not None:
            self.location = location
        if payment_type is not None:
            self.payment_type = self._enum_matching(
                payment_type, PlatformPaymentType.list(), "payment_type"
            )
        if phone_number is not None:
            self.phone_number = phone_number
        if primary is not None:
            self.primary = primary
        if status is not None:
            self.status = self._enum_matching(
                status, UserPhoneNumberInfoStatus.list(), "status"
            )
        if type_ is not None:
            self.type_ = self._enum_matching(
                type_, UserPhoneNumberInfoType.list(), "type_"
            )
        if sub_type is not None:
            self.sub_type = self._enum_matching(
                sub_type, UserPhoneNumberInfoSubType.list(), "sub_type"
            )
        if usage_type is not None:
            self.usage_type = self._enum_matching(
                usage_type, UserPhoneNumberInfoUsageType.list(), "usage_type"
            )
        if features is not None:
            self.features = self._define_list(features, UserPhoneNumberInfoFeatures)
