# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .message_status_counts import MessageStatusCounts


@JsonMap({"delivery_failed": "deliveryFailed", "sending_failed": "sendingFailed"})
class MessageStatusesResponse(BaseModel):
    """The messages status object with details of each status

    :param queued: Message status parameters, defaults to None
    :type queued: MessageStatusCounts, optional
    :param delivered: Message status parameters, defaults to None
    :type delivered: MessageStatusCounts, optional
    :param delivery_failed: Message status parameters, defaults to None
    :type delivery_failed: MessageStatusCounts, optional
    :param sent: Message status parameters, defaults to None
    :type sent: MessageStatusCounts, optional
    :param sending_failed: Message status parameters, defaults to None
    :type sending_failed: MessageStatusCounts, optional
    """

    def __init__(
        self,
        queued: MessageStatusCounts = None,
        delivered: MessageStatusCounts = None,
        delivery_failed: MessageStatusCounts = None,
        sent: MessageStatusCounts = None,
        sending_failed: MessageStatusCounts = None,
    ):
        if queued is not None:
            self.queued = self._define_object(queued, MessageStatusCounts)
        if delivered is not None:
            self.delivered = self._define_object(delivered, MessageStatusCounts)
        if delivery_failed is not None:
            self.delivery_failed = self._define_object(
                delivery_failed, MessageStatusCounts
            )
        if sent is not None:
            self.sent = self._define_object(sent, MessageStatusCounts)
        if sending_failed is not None:
            self.sending_failed = self._define_object(
                sending_failed, MessageStatusCounts
            )
