# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .company_answering_rule_weekly_schedule_info_request import (
    CompanyAnsweringRuleWeeklyScheduleInfoRequest,
)
from .ranges_info import RangesInfo


class CompanyAnsweringRuleScheduleInfoRef(Enum):
    """An enumeration representing different categories.

    :cvar BUSINESSHOURS: "BusinessHours"
    :vartype BUSINESSHOURS: str
    :cvar AFTERHOURS: "AfterHours"
    :vartype AFTERHOURS: str
    """

    BUSINESSHOURS = "BusinessHours"
    AFTERHOURS = "AfterHours"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                CompanyAnsweringRuleScheduleInfoRef._member_map_.values(),
            )
        )


@JsonMap({"weekly_ranges": "weeklyRanges"})
class CompanyAnsweringRuleScheduleInfo(BaseModel):
    """Schedule when an answering rule should be applied

    :param weekly_ranges: Weekly schedule. If specified, ranges cannot be specified, defaults to None
    :type weekly_ranges: CompanyAnsweringRuleWeeklyScheduleInfoRequest, optional
    :param ranges: Specific data ranges. If specified, weeklyRanges cannot be specified, defaults to None
    :type ranges: List[RangesInfo], optional
    :param ref: Reference to Business Hours or After Hours schedule = ['BusinessHours', 'AfterHours'], defaults to None
    :type ref: CompanyAnsweringRuleScheduleInfoRef, optional
    """

    def __init__(
        self,
        weekly_ranges: CompanyAnsweringRuleWeeklyScheduleInfoRequest = None,
        ranges: List[RangesInfo] = None,
        ref: CompanyAnsweringRuleScheduleInfoRef = None,
    ):
        if weekly_ranges is not None:
            self.weekly_ranges = self._define_object(
                weekly_ranges, CompanyAnsweringRuleWeeklyScheduleInfoRequest
            )
        if ranges is not None:
            self.ranges = self._define_list(ranges, RangesInfo)
        if ref is not None:
            self.ref = self._enum_matching(
                ref, CompanyAnsweringRuleScheduleInfoRef.list(), "ref"
            )
