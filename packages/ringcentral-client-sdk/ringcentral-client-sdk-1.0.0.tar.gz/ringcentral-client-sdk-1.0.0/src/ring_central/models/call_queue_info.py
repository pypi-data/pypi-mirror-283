# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class CallQueueInfoStatus(Enum):
    """An enumeration representing different categories.

    :cvar ENABLED: "Enabled"
    :vartype ENABLED: str
    :cvar DISABLED: "Disabled"
    :vartype DISABLED: str
    :cvar NOTACTIVATED: "NotActivated"
    :vartype NOTACTIVATED: str
    """

    ENABLED = "Enabled"
    DISABLED = "Disabled"
    NOTACTIVATED = "NotActivated"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, CallQueueInfoStatus._member_map_.values()))


class CallQueueInfoSubType(Enum):
    """An enumeration representing different categories.

    :cvar EMERGENCY: "Emergency"
    :vartype EMERGENCY: str
    """

    EMERGENCY = "Emergency"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, CallQueueInfoSubType._member_map_.values()))


@JsonMap({"id_": "id", "extension_number": "extensionNumber", "sub_type": "subType"})
class CallQueueInfo(BaseModel):
    """CallQueueInfo

    :param uri: Link to a call queue, defaults to None
    :type uri: str, optional
    :param id_: Internal identifier of a call queue, defaults to None
    :type id_: str, optional
    :param extension_number: Extension number of a call queue, defaults to None
    :type extension_number: str, optional
    :param name: Name of a call queue, defaults to None
    :type name: str, optional
    :param status: Call queue status, defaults to None
    :type status: CallQueueInfoStatus, optional
    :param sub_type: Indicates whether it is an emergency call queue extension or not, defaults to None
    :type sub_type: CallQueueInfoSubType, optional
    """

    def __init__(
        self,
        uri: str = None,
        id_: str = None,
        extension_number: str = None,
        name: str = None,
        status: CallQueueInfoStatus = None,
        sub_type: CallQueueInfoSubType = None,
    ):
        if uri is not None:
            self.uri = uri
        if id_ is not None:
            self.id_ = id_
        if extension_number is not None:
            self.extension_number = extension_number
        if name is not None:
            self.name = name
        if status is not None:
            self.status = self._enum_matching(
                status, CallQueueInfoStatus.list(), "status"
            )
        if sub_type is not None:
            self.sub_type = self._enum_matching(
                sub_type, CallQueueInfoSubType.list(), "sub_type"
            )
