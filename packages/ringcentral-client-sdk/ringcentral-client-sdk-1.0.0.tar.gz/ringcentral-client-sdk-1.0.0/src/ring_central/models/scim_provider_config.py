# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .scim_authentication_scheme import ScimAuthenticationScheme
from .scim_bulk_supported import ScimBulkSupported
from .scim_supported import ScimSupported
from .scim_filter_supported import ScimFilterSupported


class ScimProviderConfigSchemas(Enum):
    """An enumeration representing different categories.

    :cvar URN_IETF_PARAMS_SCIM_SCHEMAS_CORE_2_0_SERVICEPROVIDERCONFIG: "urn:ietf:params:scim:schemas:core:2.0:ServiceProviderConfig"
    :vartype URN_IETF_PARAMS_SCIM_SCHEMAS_CORE_2_0_SERVICEPROVIDERCONFIG: str
    """

    URN_IETF_PARAMS_SCIM_SCHEMAS_CORE_2_0_SERVICEPROVIDERCONFIG = (
        "urn:ietf:params:scim:schemas:core:2.0:ServiceProviderConfig"
    )

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, ScimProviderConfigSchemas._member_map_.values())
        )


@JsonMap(
    {
        "authentication_schemes": "authenticationSchemes",
        "change_password": "changePassword",
        "xml_data_format": "xmlDataFormat",
    }
)
class ScimProviderConfig(BaseModel):
    """ScimProviderConfig

    :param authentication_schemes: authentication_schemes, defaults to None
    :type authentication_schemes: List[ScimAuthenticationScheme], optional
    :param bulk: bulk, defaults to None
    :type bulk: ScimBulkSupported, optional
    :param change_password: change_password, defaults to None
    :type change_password: ScimSupported, optional
    :param etag: etag, defaults to None
    :type etag: ScimSupported, optional
    :param filter: filter, defaults to None
    :type filter: ScimFilterSupported, optional
    :param patch: patch, defaults to None
    :type patch: ScimSupported, optional
    :param schemas: schemas, defaults to None
    :type schemas: List[ScimProviderConfigSchemas], optional
    :param sort: sort, defaults to None
    :type sort: ScimSupported, optional
    :param xml_data_format: xml_data_format, defaults to None
    :type xml_data_format: ScimSupported, optional
    """

    def __init__(
        self,
        authentication_schemes: List[ScimAuthenticationScheme] = None,
        bulk: ScimBulkSupported = None,
        change_password: ScimSupported = None,
        etag: ScimSupported = None,
        filter: ScimFilterSupported = None,
        patch: ScimSupported = None,
        schemas: List[ScimProviderConfigSchemas] = None,
        sort: ScimSupported = None,
        xml_data_format: ScimSupported = None,
    ):
        if authentication_schemes is not None:
            self.authentication_schemes = self._define_list(
                authentication_schemes, ScimAuthenticationScheme
            )
        if bulk is not None:
            self.bulk = self._define_object(bulk, ScimBulkSupported)
        if change_password is not None:
            self.change_password = self._define_object(change_password, ScimSupported)
        if etag is not None:
            self.etag = self._define_object(etag, ScimSupported)
        if filter is not None:
            self.filter = self._define_object(filter, ScimFilterSupported)
        if patch is not None:
            self.patch = self._define_object(patch, ScimSupported)
        if schemas is not None:
            self.schemas = self._define_list(schemas, ScimProviderConfigSchemas)
        if sort is not None:
            self.sort = self._define_object(sort, ScimSupported)
        if xml_data_format is not None:
            self.xml_data_format = self._define_object(xml_data_format, ScimSupported)
