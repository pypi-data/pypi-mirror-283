# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel
from .permissions_capabilities import PermissionsCapabilities


class PermissionIdResourceSiteCompatible(Enum):
    """An enumeration representing different categories.

    :cvar COMPATIBLE: "Compatible"
    :vartype COMPATIBLE: str
    :cvar INCOMPATIBLE: "Incompatible"
    :vartype INCOMPATIBLE: str
    :cvar INDEPENDENT: "Independent"
    :vartype INDEPENDENT: str
    """

    COMPATIBLE = "Compatible"
    INCOMPATIBLE = "Incompatible"
    INDEPENDENT = "Independent"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                PermissionIdResourceSiteCompatible._member_map_.values(),
            )
        )


@JsonMap(
    {
        "id_": "id",
        "site_compatible": "siteCompatible",
        "read_only": "readOnly",
        "permissions_capabilities": "permissionsCapabilities",
    }
)
class PermissionIdResource(BaseModel):
    """PermissionIdResource

    :param uri: uri, defaults to None
    :type uri: str, optional
    :param id_: id_, defaults to None
    :type id_: str, optional
    :param site_compatible: Site compatibility flag set for permission, defaults to None
    :type site_compatible: PermissionIdResourceSiteCompatible, optional
    :param read_only: Specifies if the permission is editable on UI (if set to `true`) or not (if set to `false`), defaults to None
    :type read_only: bool, optional
    :param assignable: Specifies if the permission can be assigned by the account administrator, defaults to None
    :type assignable: bool, optional
    :param permissions_capabilities: Advanced permissions capabilities. Returned if `advancedPermissions` query parameter is set to `true`., defaults to None
    :type permissions_capabilities: PermissionsCapabilities, optional
    """

    def __init__(
        self,
        uri: str = None,
        id_: str = None,
        site_compatible: PermissionIdResourceSiteCompatible = None,
        read_only: bool = None,
        assignable: bool = None,
        permissions_capabilities: PermissionsCapabilities = None,
    ):
        if uri is not None:
            self.uri = uri
        if id_ is not None:
            self.id_ = id_
        if site_compatible is not None:
            self.site_compatible = self._enum_matching(
                site_compatible,
                PermissionIdResourceSiteCompatible.list(),
                "site_compatible",
            )
        if read_only is not None:
            self.read_only = read_only
        if assignable is not None:
            self.assignable = assignable
        if permissions_capabilities is not None:
            self.permissions_capabilities = self._define_object(
                permissions_capabilities, PermissionsCapabilities
            )
