# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel
from .roles_timezone_resource import RolesTimezoneResource
from .roles_country_resource import RolesCountryResource
from .roles_language_resource import RolesLanguageResource
from .currency_resource import CurrencyResource


class RolesRegionalSettingsResourceTimeFormat(Enum):
    """An enumeration representing different categories.

    :cvar _12H: "12h"
    :vartype _12H: str
    :cvar _24H: "24h"
    :vartype _24H: str
    """

    _12H = "12h"
    _24H = "24h"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                RolesRegionalSettingsResourceTimeFormat._member_map_.values(),
            )
        )


@JsonMap(
    {
        "home_country": "homeCountry",
        "greeting_language": "greetingLanguage",
        "formatting_locale": "formattingLocale",
        "time_format": "timeFormat",
    }
)
class RolesRegionalSettingsResource(BaseModel):
    """RolesRegionalSettingsResource

    :param timezone: timezone, defaults to None
    :type timezone: RolesTimezoneResource, optional
    :param home_country: home_country, defaults to None
    :type home_country: RolesCountryResource, optional
    :param language: language, defaults to None
    :type language: RolesLanguageResource, optional
    :param greeting_language: greeting_language, defaults to None
    :type greeting_language: RolesLanguageResource, optional
    :param formatting_locale: formatting_locale, defaults to None
    :type formatting_locale: RolesLanguageResource, optional
    :param time_format: time_format, defaults to None
    :type time_format: RolesRegionalSettingsResourceTimeFormat, optional
    :param currency: currency, defaults to None
    :type currency: CurrencyResource, optional
    """

    def __init__(
        self,
        timezone: RolesTimezoneResource = None,
        home_country: RolesCountryResource = None,
        language: RolesLanguageResource = None,
        greeting_language: RolesLanguageResource = None,
        formatting_locale: RolesLanguageResource = None,
        time_format: RolesRegionalSettingsResourceTimeFormat = None,
        currency: CurrencyResource = None,
    ):
        if timezone is not None:
            self.timezone = self._define_object(timezone, RolesTimezoneResource)
        if home_country is not None:
            self.home_country = self._define_object(home_country, RolesCountryResource)
        if language is not None:
            self.language = self._define_object(language, RolesLanguageResource)
        if greeting_language is not None:
            self.greeting_language = self._define_object(
                greeting_language, RolesLanguageResource
            )
        if formatting_locale is not None:
            self.formatting_locale = self._define_object(
                formatting_locale, RolesLanguageResource
            )
        if time_format is not None:
            self.time_format = self._enum_matching(
                time_format,
                RolesRegionalSettingsResourceTimeFormat.list(),
                "time_format",
            )
        if currency is not None:
            self.currency = self._define_object(currency, CurrencyResource)
