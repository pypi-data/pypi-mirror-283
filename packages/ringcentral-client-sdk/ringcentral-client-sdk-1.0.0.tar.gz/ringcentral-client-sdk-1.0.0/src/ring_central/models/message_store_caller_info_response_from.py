# This file was generated by liblab | https://liblab.com/

from .utils.json_map import JsonMap
from .base import BaseModel


@JsonMap(
    {
        "extension_number": "extensionNumber",
        "extension_id": "extensionId",
        "phone_number": "phoneNumber",
    }
)
class MessageStoreCallerInfoResponseFrom(BaseModel):
    """Sender information

    :param extension_number: Extension short number (usually 3 or 4 digits). This property<br>is filled when parties communicate by means of short internal numbers,<br>for example when calling to other extension or sending/receiving Company<br>Pager message<br>, defaults to None
    :type extension_number: str, optional
    :param extension_id: Internal identifier of an extension, defaults to None
    :type extension_id: str, optional
    :param location: Contains party location (city, state) if one can be determined<br>from phoneNumber. This property is filled only when phoneNumber is not<br>empty and server can calculate location information from it (for example,<br>this information is unavailable for US toll-free numbers)<br>, defaults to None
    :type location: str, optional
    :param name: Symbolic name associated with a party. If the phone does not<br>belong to the known extension, only the location is returned, the name<br>is not determined then<br>, defaults to None
    :type name: str, optional
    :param phone_number: Phone number of a party. Usually it is a plain number including<br>country and area code like 18661234567. But sometimes it could be returned<br>from database with some formatting applied, for example (866)123-4567.<br>This property is filled in all cases where parties communicate by means<br>of global phone numbers, for example when calling to direct numbers or<br>sending/receiving SMS<br>, defaults to None
    :type phone_number: str, optional
    """

    def __init__(
        self,
        extension_number: str = None,
        extension_id: str = None,
        location: str = None,
        name: str = None,
        phone_number: str = None,
    ):
        if extension_number is not None:
            self.extension_number = extension_number
        if extension_id is not None:
            self.extension_id = extension_id
        if location is not None:
            self.location = location
        if name is not None:
            self.name = name
        if phone_number is not None:
            self.phone_number = phone_number
