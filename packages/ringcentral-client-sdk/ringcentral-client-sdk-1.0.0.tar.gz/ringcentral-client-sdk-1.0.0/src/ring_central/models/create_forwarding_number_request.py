# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel
from .create_forwarding_number_device_info import CreateForwardingNumberDeviceInfo


class CreateForwardingNumberRequestType(Enum):
    """An enumeration representing different categories.

    :cvar PHONELINE: "PhoneLine"
    :vartype PHONELINE: str
    :cvar HOME: "Home"
    :vartype HOME: str
    :cvar MOBILE: "Mobile"
    :vartype MOBILE: str
    :cvar WORK: "Work"
    :vartype WORK: str
    :cvar OTHER: "Other"
    :vartype OTHER: str
    """

    PHONELINE = "PhoneLine"
    HOME = "Home"
    MOBILE = "Mobile"
    WORK = "Work"
    OTHER = "Other"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                CreateForwardingNumberRequestType._member_map_.values(),
            )
        )


@JsonMap({"flip_number": "flipNumber", "phone_number": "phoneNumber", "type_": "type"})
class CreateForwardingNumberRequest(BaseModel):
    """CreateForwardingNumberRequest

    :param flip_number: Number assigned to the call flip phone number, corresponds to the shortcut dial number, defaults to None
    :type flip_number: int, optional
    :param phone_number: Forwarding/Call flip phone number, defaults to None
    :type phone_number: str, optional
    :param label: Forwarding/Call flip number title, defaults to None
    :type label: str, optional
    :param type_: Forwarding/Call flip phone type. If specified, 'label' attribute value is ignored. The default value is 'Other', defaults to None
    :type type_: CreateForwardingNumberRequestType, optional
    :param device: Forwarding device information. Applicable for 'PhoneLine' type only.<br>Cannot be specified together with 'phoneNumber' parameter<br>, defaults to None
    :type device: CreateForwardingNumberDeviceInfo, optional
    """

    def __init__(
        self,
        flip_number: int = None,
        phone_number: str = None,
        label: str = None,
        type_: CreateForwardingNumberRequestType = None,
        device: CreateForwardingNumberDeviceInfo = None,
    ):
        if flip_number is not None:
            self.flip_number = flip_number
        if phone_number is not None:
            self.phone_number = phone_number
        if label is not None:
            self.label = label
        if type_ is not None:
            self.type_ = self._enum_matching(
                type_, CreateForwardingNumberRequestType.list(), "type_"
            )
        if device is not None:
            self.device = self._define_object(device, CreateForwardingNumberDeviceInfo)
