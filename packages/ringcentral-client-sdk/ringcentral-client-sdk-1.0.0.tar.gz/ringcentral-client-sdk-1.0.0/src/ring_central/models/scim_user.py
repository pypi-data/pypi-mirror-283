# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .scim_user_address import ScimUserAddress
from .scim_email import ScimEmail
from .scim_name import ScimName
from .scim_phone_number import ScimPhoneNumber
from .scim_photo import ScimPhoto
from .scim_enterprise_user import ScimEnterpriseUser


class ScimUserSchemas(Enum):
    """An enumeration representing different categories.

    :cvar URN_IETF_PARAMS_SCIM_SCHEMAS_CORE_2_0_USER: "urn:ietf:params:scim:schemas:core:2.0:User"
    :vartype URN_IETF_PARAMS_SCIM_SCHEMAS_CORE_2_0_USER: str
    """

    URN_IETF_PARAMS_SCIM_SCHEMAS_CORE_2_0_USER = (
        "urn:ietf:params:scim:schemas:core:2.0:User"
    )

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, ScimUserSchemas._member_map_.values()))


@JsonMap(
    {
        "external_id": "externalId",
        "id_": "id",
        "phone_numbers": "phoneNumbers",
        "urn_ietf_params_scim_schemas_extension_enterprise_2_0_user": "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User",
        "user_name": "userName",
    }
)
class ScimUser(BaseModel):
    """ScimUser

    :param active: User status, defaults to None
    :type active: bool, optional
    :param addresses: addresses, defaults to None
    :type addresses: List[ScimUserAddress], optional
    :param emails: emails
    :type emails: List[ScimEmail]
    :param external_id: External unique resource ID defined by provisioning client, defaults to None
    :type external_id: str, optional
    :param id_: Unique resource ID defined by RingCentral, defaults to None
    :type id_: str, optional
    :param name: name
    :type name: ScimName
    :param phone_numbers: phone_numbers, defaults to None
    :type phone_numbers: List[ScimPhoneNumber], optional
    :param photos: photos, defaults to None
    :type photos: List[ScimPhoto], optional
    :param schemas: schemas
    :type schemas: List[ScimUserSchemas]
    :param title: User title, defaults to None
    :type title: str, optional
    :param urn_ietf_params_scim_schemas_extension_enterprise_2_0_user: urn_ietf_params_scim_schemas_extension_enterprise_2_0_user, defaults to None
    :type urn_ietf_params_scim_schemas_extension_enterprise_2_0_user: ScimEnterpriseUser, optional
    :param user_name: MUST be same as work type email address
    :type user_name: str
    """

    def __init__(
        self,
        emails: List[ScimEmail],
        name: ScimName,
        schemas: List[ScimUserSchemas],
        user_name: str,
        active: bool = None,
        addresses: List[ScimUserAddress] = None,
        external_id: str = None,
        id_: str = None,
        phone_numbers: List[ScimPhoneNumber] = None,
        photos: List[ScimPhoto] = None,
        title: str = None,
        urn_ietf_params_scim_schemas_extension_enterprise_2_0_user: ScimEnterpriseUser = None,
    ):
        if active is not None:
            self.active = active
        if addresses is not None:
            self.addresses = self._define_list(addresses, ScimUserAddress)
        self.emails = self._define_list(emails, ScimEmail)
        if external_id is not None:
            self.external_id = external_id
        if id_ is not None:
            self.id_ = id_
        self.name = self._define_object(name, ScimName)
        if phone_numbers is not None:
            self.phone_numbers = self._define_list(phone_numbers, ScimPhoneNumber)
        if photos is not None:
            self.photos = self._define_list(photos, ScimPhoto)
        self.schemas = self._define_list(schemas, ScimUserSchemas)
        if title is not None:
            self.title = title
        if urn_ietf_params_scim_schemas_extension_enterprise_2_0_user is not None:
            self.urn_ietf_params_scim_schemas_extension_enterprise_2_0_user = (
                self._define_object(
                    urn_ietf_params_scim_schemas_extension_enterprise_2_0_user,
                    ScimEnterpriseUser,
                )
            )
        self.user_name = user_name
