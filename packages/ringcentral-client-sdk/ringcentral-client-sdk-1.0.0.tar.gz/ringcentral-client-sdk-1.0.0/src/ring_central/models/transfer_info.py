# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel
from .transfer_extension_info import TransferExtensionInfo


class TransferInfoAction(Enum):
    """An enumeration representing different categories.

    :cvar HOLDTIMEEXPIRATION: "HoldTimeExpiration"
    :vartype HOLDTIMEEXPIRATION: str
    :cvar MAXCALLERS: "MaxCallers"
    :vartype MAXCALLERS: str
    :cvar NOANSWER: "NoAnswer"
    :vartype NOANSWER: str
    """

    HOLDTIMEEXPIRATION = "HoldTimeExpiration"
    MAXCALLERS = "MaxCallers"
    NOANSWER = "NoAnswer"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, TransferInfoAction._member_map_.values()))


@JsonMap({})
class TransferInfo(BaseModel):
    """TransferInfo

    :param extension: extension, defaults to None
    :type extension: TransferExtensionInfo, optional
    :param action: Event that initiates transferring to the specified extension, defaults to None
    :type action: TransferInfoAction, optional
    """

    def __init__(
        self, extension: TransferExtensionInfo = None, action: TransferInfoAction = None
    ):
        if extension is not None:
            self.extension = self._define_object(extension, TransferExtensionInfo)
        if action is not None:
            self.action = self._enum_matching(
                action, TransferInfoAction.list(), "action"
            )
