# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .account_resource import AccountResource
from .phone_number_resource import PhoneNumberResource
from .account_directory_profile_image_resource import (
    AccountDirectoryProfileImageResource,
)
from .business_site_resource import BusinessSiteResource
from .directory_role_resource import DirectoryRoleResource
from .call_queue_resource import CallQueueResource
from .custom_field_resource import CustomFieldResource
from .group_resource import GroupResource
from .cost_center_resource import CostCenterResource
from .external_integration_resource import ExternalIntegrationResource
from .contact_sub_type_enum import ContactSubTypeEnum


class ContactResourceType(Enum):
    """An enumeration representing different categories.

    :cvar USER: "User"
    :vartype USER: str
    :cvar DEPARTMENT: "Department"
    :vartype DEPARTMENT: str
    :cvar ANNOUNCEMENT: "Announcement"
    :vartype ANNOUNCEMENT: str
    :cvar VOICEMAIL: "Voicemail"
    :vartype VOICEMAIL: str
    :cvar SHAREDLINESGROUP: "SharedLinesGroup"
    :vartype SHAREDLINESGROUP: str
    :cvar PAGINGONLY: "PagingOnly"
    :vartype PAGINGONLY: str
    :cvar PARKLOCATION: "ParkLocation"
    :vartype PARKLOCATION: str
    :cvar IVRMENU: "IvrMenu"
    :vartype IVRMENU: str
    :cvar LIMITED: "Limited"
    :vartype LIMITED: str
    :cvar APPLICATIONEXTENSION: "ApplicationExtension"
    :vartype APPLICATIONEXTENSION: str
    :cvar SITE: "Site"
    :vartype SITE: str
    :cvar BOT: "Bot"
    :vartype BOT: str
    :cvar ROOM: "Room"
    :vartype ROOM: str
    :cvar PROXYADMIN: "ProxyAdmin"
    :vartype PROXYADMIN: str
    :cvar DELEGATEDLINESGROUP: "DelegatedLinesGroup"
    :vartype DELEGATEDLINESGROUP: str
    :cvar GROUPCALLPICKUP: "GroupCallPickup"
    :vartype GROUPCALLPICKUP: str
    :cvar EXTERNAL: "External"
    :vartype EXTERNAL: str
    :cvar ROOMCONNECTOR: "RoomConnector"
    :vartype ROOMCONNECTOR: str
    :cvar UNKNOWN: "Unknown"
    :vartype UNKNOWN: str
    """

    USER = "User"
    DEPARTMENT = "Department"
    ANNOUNCEMENT = "Announcement"
    VOICEMAIL = "Voicemail"
    SHAREDLINESGROUP = "SharedLinesGroup"
    PAGINGONLY = "PagingOnly"
    PARKLOCATION = "ParkLocation"
    IVRMENU = "IvrMenu"
    LIMITED = "Limited"
    APPLICATIONEXTENSION = "ApplicationExtension"
    SITE = "Site"
    BOT = "Bot"
    ROOM = "Room"
    PROXYADMIN = "ProxyAdmin"
    DELEGATEDLINESGROUP = "DelegatedLinesGroup"
    GROUPCALLPICKUP = "GroupCallPickup"
    EXTERNAL = "External"
    ROOMCONNECTOR = "RoomConnector"
    UNKNOWN = "Unknown"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, ContactResourceType._member_map_.values()))


class ContactResourceStatus(Enum):
    """An enumeration representing different categories.

    :cvar ENABLED: "Enabled"
    :vartype ENABLED: str
    :cvar DISABLED: "Disabled"
    :vartype DISABLED: str
    :cvar FROZEN: "Frozen"
    :vartype FROZEN: str
    :cvar NOTACTIVATED: "NotActivated"
    :vartype NOTACTIVATED: str
    :cvar UNASSIGNED: "Unassigned"
    :vartype UNASSIGNED: str
    :cvar UNKNOWN: "Unknown"
    :vartype UNKNOWN: str
    """

    ENABLED = "Enabled"
    DISABLED = "Disabled"
    FROZEN = "Frozen"
    NOTACTIVATED = "NotActivated"
    UNASSIGNED = "Unassigned"
    UNKNOWN = "Unknown"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, ContactResourceStatus._member_map_.values()))


@JsonMap(
    {
        "id_": "id",
        "type_": "type",
        "extension_number": "extensionNumber",
        "first_name": "firstName",
        "last_name": "lastName",
        "job_title": "jobTitle",
        "phone_numbers": "phoneNumbers",
        "profile_image": "profileImage",
        "call_queues": "callQueues",
        "custom_fields": "customFields",
        "cost_center": "costCenter",
        "sub_type": "subType",
    }
)
class ContactResource(BaseModel):
    """ContactResource

    :param id_: Contact extension identifier
    :type id_: str
    :param type_: Contact type, defaults to None
    :type type_: ContactResourceType, optional
    :param status: Contact status, defaults to None
    :type status: ContactResourceStatus, optional
    :param account: account, defaults to None
    :type account: AccountResource, optional
    :param department: department, defaults to None
    :type department: str, optional
    :param email: email, defaults to None
    :type email: str, optional
    :param extension_number: extension_number, defaults to None
    :type extension_number: str, optional
    :param first_name: First name of a contact, for user extensions only, defaults to None
    :type first_name: str, optional
    :param last_name: Last name of a contact, for user extensions only, defaults to None
    :type last_name: str, optional
    :param name: Name of a contact, for non-user extensions, defaults to None
    :type name: str, optional
    :param job_title: job_title, defaults to None
    :type job_title: str, optional
    :param phone_numbers: phone_numbers, defaults to None
    :type phone_numbers: List[PhoneNumberResource], optional
    :param profile_image: profile_image, defaults to None
    :type profile_image: AccountDirectoryProfileImageResource, optional
    :param site: site, defaults to None
    :type site: BusinessSiteResource, optional
    :param hidden: hidden, defaults to None
    :type hidden: bool, optional
    :param role: role, defaults to None
    :type role: DirectoryRoleResource, optional
    :param call_queues: call_queues, defaults to None
    :type call_queues: List[CallQueueResource], optional
    :param custom_fields: custom_fields, defaults to None
    :type custom_fields: List[CustomFieldResource], optional
    :param groups: groups, defaults to None
    :type groups: List[GroupResource], optional
    :param cost_center: cost_center, defaults to None
    :type cost_center: CostCenterResource, optional
    :param integration: integration, defaults to None
    :type integration: ExternalIntegrationResource, optional
    :param sub_type: Extension subtype, defaults to None
    :type sub_type: ContactSubTypeEnum, optional
    """

    def __init__(
        self,
        id_: str,
        type_: ContactResourceType = None,
        status: ContactResourceStatus = None,
        account: AccountResource = None,
        department: str = None,
        email: str = None,
        extension_number: str = None,
        first_name: str = None,
        last_name: str = None,
        name: str = None,
        job_title: str = None,
        phone_numbers: List[PhoneNumberResource] = None,
        profile_image: AccountDirectoryProfileImageResource = None,
        site: BusinessSiteResource = None,
        hidden: bool = None,
        role: DirectoryRoleResource = None,
        call_queues: List[CallQueueResource] = None,
        custom_fields: List[CustomFieldResource] = None,
        groups: List[GroupResource] = None,
        cost_center: CostCenterResource = None,
        integration: ExternalIntegrationResource = None,
        sub_type: ContactSubTypeEnum = None,
    ):
        self.id_ = id_
        if type_ is not None:
            self.type_ = self._enum_matching(type_, ContactResourceType.list(), "type_")
        if status is not None:
            self.status = self._enum_matching(
                status, ContactResourceStatus.list(), "status"
            )
        if account is not None:
            self.account = self._define_object(account, AccountResource)
        if department is not None:
            self.department = department
        if email is not None:
            self.email = email
        if extension_number is not None:
            self.extension_number = extension_number
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if name is not None:
            self.name = name
        if job_title is not None:
            self.job_title = job_title
        if phone_numbers is not None:
            self.phone_numbers = self._define_list(phone_numbers, PhoneNumberResource)
        if profile_image is not None:
            self.profile_image = self._define_object(
                profile_image, AccountDirectoryProfileImageResource
            )
        if site is not None:
            self.site = self._define_object(site, BusinessSiteResource)
        if hidden is not None:
            self.hidden = hidden
        if role is not None:
            self.role = self._define_object(role, DirectoryRoleResource)
        if call_queues is not None:
            self.call_queues = self._define_list(call_queues, CallQueueResource)
        if custom_fields is not None:
            self.custom_fields = self._define_list(custom_fields, CustomFieldResource)
        if groups is not None:
            self.groups = self._define_list(groups, GroupResource)
        if cost_center is not None:
            self.cost_center = self._define_object(cost_center, CostCenterResource)
        if integration is not None:
            self.integration = self._define_object(
                integration, ExternalIntegrationResource
            )
        if sub_type is not None:
            self.sub_type = self._enum_matching(
                sub_type, ContactSubTypeEnum.list(), "sub_type"
            )
