# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .all_calls import AllCalls
from .calls_by_direction import CallsByDirection
from .calls_by_origin import CallsByOrigin
from .calls_by_response import CallsByResponse
from .calls_by_segments import CallsBySegments
from .calls_by_result import CallsByResult
from .calls_by_company_hours import CallsByCompanyHours
from .calls_by_queue_sla import CallsByQueueSla
from .calls_by_type import CallsByType


@JsonMap(
    {
        "all_calls": "allCalls",
        "calls_by_direction": "callsByDirection",
        "calls_by_origin": "callsByOrigin",
        "calls_by_response": "callsByResponse",
        "calls_segments": "callsSegments",
        "calls_by_result": "callsByResult",
        "calls_by_company_hours": "callsByCompanyHours",
        "calls_by_queue_sla": "callsByQueueSla",
        "calls_by_type": "callsByType",
    }
)
class CallsTimers(BaseModel):
    """Call length data for the specified grouping

    :param all_calls: Data for all calls, defaults to None
    :type all_calls: AllCalls, optional
    :param calls_by_direction: Data for calls with breakdown by direction (Inbound, Outbound), defaults to None
    :type calls_by_direction: CallsByDirection, optional
    :param calls_by_origin: Data for calls with breakdown by origin (Internal, External), defaults to None
    :type calls_by_origin: CallsByOrigin, optional
    :param calls_by_response: Data for calls with breakdown by response (Answered, NotAnswered, Connected, NotConnected), defaults to None
    :type calls_by_response: CallsByResponse, optional
    :param calls_segments: Data for calls with breakdown by segments (Ringing, LiveTalk, Hold, Park, Transfer, IvrPrompt, Voicemail, VmGreeting, Setup), defaults to None
    :type calls_segments: CallsBySegments, optional
    :param calls_by_result: Data for calls with breakdown by result (Completed, Abandoned, Voicemail, Unknown, Missed, Accepted), defaults to None
    :type calls_by_result: CallsByResult, optional
    :param calls_by_company_hours: Data for calls with breakdown by company hours (BusinessHours, AfterHours), defaults to None
    :type calls_by_company_hours: CallsByCompanyHours, optional
    :param calls_by_queue_sla: Data for calls with breakdown by queue SLA (InSLA, OutSLA). This counter is only applicable to Queues grouping, defaults to None
    :type calls_by_queue_sla: CallsByQueueSla, optional
    :param calls_by_type: Data for calls with breakdown by type (Direct, FromQueue, ParkRetrieval, Transferred, Outbound, Overflow), defaults to None
    :type calls_by_type: CallsByType, optional
    """

    def __init__(
        self,
        all_calls: AllCalls = None,
        calls_by_direction: CallsByDirection = None,
        calls_by_origin: CallsByOrigin = None,
        calls_by_response: CallsByResponse = None,
        calls_segments: CallsBySegments = None,
        calls_by_result: CallsByResult = None,
        calls_by_company_hours: CallsByCompanyHours = None,
        calls_by_queue_sla: CallsByQueueSla = None,
        calls_by_type: CallsByType = None,
    ):
        if all_calls is not None:
            self.all_calls = self._define_object(all_calls, AllCalls)
        if calls_by_direction is not None:
            self.calls_by_direction = self._define_object(
                calls_by_direction, CallsByDirection
            )
        if calls_by_origin is not None:
            self.calls_by_origin = self._define_object(calls_by_origin, CallsByOrigin)
        if calls_by_response is not None:
            self.calls_by_response = self._define_object(
                calls_by_response, CallsByResponse
            )
        if calls_segments is not None:
            self.calls_segments = self._define_object(calls_segments, CallsBySegments)
        if calls_by_result is not None:
            self.calls_by_result = self._define_object(calls_by_result, CallsByResult)
        if calls_by_company_hours is not None:
            self.calls_by_company_hours = self._define_object(
                calls_by_company_hours, CallsByCompanyHours
            )
        if calls_by_queue_sla is not None:
            self.calls_by_queue_sla = self._define_object(
                calls_by_queue_sla, CallsByQueueSla
            )
        if calls_by_type is not None:
            self.calls_by_type = self._define_object(calls_by_type, CallsByType)
