# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .authorization_type import AuthorizationType


class SipInfoResponseTransport(Enum):
    """An enumeration representing different categories.

    :cvar UDP: "UDP"
    :vartype UDP: str
    :cvar TCP: "TCP"
    :vartype TCP: str
    :cvar TLS: "TLS"
    :vartype TLS: str
    :cvar WSS: "WSS"
    :vartype WSS: str
    """

    UDP = "UDP"
    TCP = "TCP"
    TLS = "TLS"
    WSS = "WSS"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, SipInfoResponseTransport._member_map_.values())
        )


@JsonMap(
    {
        "authorization_types": "authorizationTypes",
        "authorization_id": "authorizationId",
        "outbound_proxy": "outboundProxy",
        "outbound_proxy_i_pv6": "outboundProxyIPv6",
        "outbound_proxy_backup": "outboundProxyBackup",
        "outbound_proxy_i_pv6_backup": "outboundProxyIPv6Backup",
        "switch_back_interval": "switchBackInterval",
        "stun_servers": "stunServers",
    }
)
class SipInfoResponse(BaseModel):
    """SipInfoResponse

    :param username: User credentials, defaults to None
    :type username: str, optional
    :param password: User password. Not returned if SipDigest is not enabled, defaults to None
    :type password: str, optional
    :param authorization_types: Supported authorization types and their priority for clients, defaults to None
    :type authorization_types: List[AuthorizationType], optional
    :param authorization_id: Identifier for SIP authorization, defaults to None
    :type authorization_id: str, optional
    :param domain: SIP domain, defaults to None
    :type domain: str, optional
    :param outbound_proxy: SIP outbound proxy server address (in the format <host:port>), defaults to None
    :type outbound_proxy: str, optional
    :param outbound_proxy_i_pv6: SIP outbound IPv6 proxy server address (in the format <host:port>), defaults to None
    :type outbound_proxy_i_pv6: str, optional
    :param outbound_proxy_backup: SIP outbound proxy server backup address (in the format <host:port>), defaults to None
    :type outbound_proxy_backup: str, optional
    :param outbound_proxy_i_pv6_backup: SIP outbound IPv6 proxy server backup address (in the format <host:port>), defaults to None
    :type outbound_proxy_i_pv6_backup: str, optional
    :param transport: Preferred transport. SIP info will be returned for this transport if supported, defaults to None
    :type transport: SipInfoResponseTransport, optional
    :param certificate: For TLS transport only, Base64 encoded certificate, defaults to None
    :type certificate: str, optional
    :param switch_back_interval: The interval in seconds after which the app must try to switch<br>back to primary proxy if it was previously switched to backup. If this<br>parameter is not returned, the app must stay on backup proxy and try to<br>switch to primary proxy after the next SIP-provision call.<br>, defaults to None
    :type switch_back_interval: int, optional
    :param stun_servers: List of stun servers in the format <host:port>, defaults to None
    :type stun_servers: List[str], optional
    """

    def __init__(
        self,
        username: str = None,
        password: str = None,
        authorization_types: List[AuthorizationType] = None,
        authorization_id: str = None,
        domain: str = None,
        outbound_proxy: str = None,
        outbound_proxy_i_pv6: str = None,
        outbound_proxy_backup: str = None,
        outbound_proxy_i_pv6_backup: str = None,
        transport: SipInfoResponseTransport = None,
        certificate: str = None,
        switch_back_interval: int = None,
        stun_servers: List[str] = None,
    ):
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if authorization_types is not None:
            self.authorization_types = self._define_list(
                authorization_types, AuthorizationType
            )
        if authorization_id is not None:
            self.authorization_id = authorization_id
        if domain is not None:
            self.domain = domain
        if outbound_proxy is not None:
            self.outbound_proxy = outbound_proxy
        if outbound_proxy_i_pv6 is not None:
            self.outbound_proxy_i_pv6 = outbound_proxy_i_pv6
        if outbound_proxy_backup is not None:
            self.outbound_proxy_backup = outbound_proxy_backup
        if outbound_proxy_i_pv6_backup is not None:
            self.outbound_proxy_i_pv6_backup = outbound_proxy_i_pv6_backup
        if transport is not None:
            self.transport = self._enum_matching(
                transport, SipInfoResponseTransport.list(), "transport"
            )
        if certificate is not None:
            self.certificate = certificate
        if switch_back_interval is not None:
            self.switch_back_interval = switch_back_interval
        if stun_servers is not None:
            self.stun_servers = stun_servers
