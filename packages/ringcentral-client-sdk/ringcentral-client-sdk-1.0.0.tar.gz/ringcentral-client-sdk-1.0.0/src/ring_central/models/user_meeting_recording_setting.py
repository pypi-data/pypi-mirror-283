# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class AutoRecording(Enum):
    """An enumeration representing different categories.

    :cvar LOCAL: "local"
    :vartype LOCAL: str
    :cvar CLOUD: "cloud"
    :vartype CLOUD: str
    :cvar NONE: "none"
    :vartype NONE: str
    """

    LOCAL = "local"
    CLOUD = "cloud"
    NONE = "none"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, AutoRecording._member_map_.values()))


@JsonMap(
    {
        "local_recording": "localRecording",
        "cloud_recording": "cloudRecording",
        "record_speaker_view": "recordSpeakerView",
        "record_gallery_view": "recordGalleryView",
        "record_audio_file": "recordAudioFile",
        "save_chat_text": "saveChatText",
        "show_timestamp": "showTimestamp",
        "auto_recording": "autoRecording",
        "auto_delete_cmr": "autoDeleteCmr",
        "auto_delete_cmr_days": "autoDeleteCmrDays",
    }
)
class UserMeetingRecordingSetting(BaseModel):
    """Meeting recording settings locked on account level

    :param local_recording: Allows hosts and participants to record a meeting to a local file, defaults to None
    :type local_recording: bool, optional
    :param cloud_recording: Allows hosts to record and save a meeting/webinar in the cloud, defaults to None
    :type cloud_recording: bool, optional
    :param record_speaker_view: Allows to record active speaker with the shared screen, defaults to None
    :type record_speaker_view: bool, optional
    :param record_gallery_view: Allows to record gallery view with the shared screen, defaults to None
    :type record_gallery_view: bool, optional
    :param record_audio_file: Allows to record an audio-only file, defaults to None
    :type record_audio_file: bool, optional
    :param save_chat_text: Allows to save chat text from a meeting, defaults to None
    :type save_chat_text: bool, optional
    :param show_timestamp: Allows to show timestamp on video, defaults to None
    :type show_timestamp: bool, optional
    :param auto_recording: Automatic recording (local/cloud/none) of meetings as they start, defaults to None
    :type auto_recording: AutoRecording, optional
    :param auto_delete_cmr: Automatic deletion of cloud recordings, defaults to None
    :type auto_delete_cmr: str, optional
    :param auto_delete_cmr_days: A specified number of days for automatic deletion of cloud recordings, the value range is 1-60, defaults to None
    :type auto_delete_cmr_days: int, optional
    """

    def __init__(
        self,
        local_recording: bool = None,
        cloud_recording: bool = None,
        record_speaker_view: bool = None,
        record_gallery_view: bool = None,
        record_audio_file: bool = None,
        save_chat_text: bool = None,
        show_timestamp: bool = None,
        auto_recording: AutoRecording = None,
        auto_delete_cmr: str = None,
        auto_delete_cmr_days: int = None,
    ):
        if local_recording is not None:
            self.local_recording = local_recording
        if cloud_recording is not None:
            self.cloud_recording = cloud_recording
        if record_speaker_view is not None:
            self.record_speaker_view = record_speaker_view
        if record_gallery_view is not None:
            self.record_gallery_view = record_gallery_view
        if record_audio_file is not None:
            self.record_audio_file = record_audio_file
        if save_chat_text is not None:
            self.save_chat_text = save_chat_text
        if show_timestamp is not None:
            self.show_timestamp = show_timestamp
        if auto_recording is not None:
            self.auto_recording = self._enum_matching(
                auto_recording, AutoRecording.list(), "auto_recording"
            )
        if auto_delete_cmr is not None:
            self.auto_delete_cmr = auto_delete_cmr
        if auto_delete_cmr_days is not None:
            self.auto_delete_cmr_days = auto_delete_cmr_days
