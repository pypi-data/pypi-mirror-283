# This file was generated by liblab | https://liblab.com/

from .utils.json_map import JsonMap
from .base import BaseModel


@JsonMap(
    {
        "sla_goal": "slaGoal",
        "sla_threshold_seconds": "slaThresholdSeconds",
        "include_abandoned_calls": "includeAbandonedCalls",
        "abandoned_threshold_seconds": "abandonedThresholdSeconds",
    }
)
class CallQueueServiceLevelSettings(BaseModel):
    """Call queue service level settings

    :param sla_goal: Target percentage of calls that must be answered by agents<br>within the service level time threshold<br>, defaults to None
    :type sla_goal: int, optional
    :param sla_threshold_seconds: The period of time in seconds that is considered to be an acceptable<br>service level<br>, defaults to None
    :type sla_threshold_seconds: int, optional
    :param include_abandoned_calls: Includes abandoned calls (when callers hang up prior to being<br>served by an agent) into service-level calculation<br>, defaults to None
    :type include_abandoned_calls: bool, optional
    :param abandoned_threshold_seconds: Abandoned calls that are shorter than the defined period of<br>time in seconds will not be included into the calculation of Service Level<br>, defaults to None
    :type abandoned_threshold_seconds: int, optional
    """

    def __init__(
        self,
        sla_goal: int = None,
        sla_threshold_seconds: int = None,
        include_abandoned_calls: bool = None,
        abandoned_threshold_seconds: int = None,
    ):
        if sla_goal is not None:
            self.sla_goal = sla_goal
        if sla_threshold_seconds is not None:
            self.sla_threshold_seconds = sla_threshold_seconds
        if include_abandoned_calls is not None:
            self.include_abandoned_calls = include_abandoned_calls
        if abandoned_threshold_seconds is not None:
            self.abandoned_threshold_seconds = abandoned_threshold_seconds
