# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class ErrorCode(Enum):
    """An enumeration representing different categories.

    :cvar CAI_101: "CAI-101"
    :vartype CAI_101: str
    :cvar CAI_102: "CAI-102"
    :vartype CAI_102: str
    :cvar CAI_103: "CAI-103"
    :vartype CAI_103: str
    :cvar CAI_104: "CAI-104"
    :vartype CAI_104: str
    :cvar CAI_105: "CAI-105"
    :vartype CAI_105: str
    :cvar CAI_106: "CAI-106"
    :vartype CAI_106: str
    :cvar CAI_107: "CAI-107"
    :vartype CAI_107: str
    :cvar CAI_108: "CAI-108"
    :vartype CAI_108: str
    :cvar CAI_109: "CAI-109"
    :vartype CAI_109: str
    :cvar CAI_110: "CAI-110"
    :vartype CAI_110: str
    """

    CAI_101 = "CAI-101"
    CAI_102 = "CAI-102"
    CAI_103 = "CAI-103"
    CAI_104 = "CAI-104"
    CAI_105 = "CAI-105"
    CAI_106 = "CAI-106"
    CAI_107 = "CAI-107"
    CAI_108 = "CAI-108"
    CAI_109 = "CAI-109"
    CAI_110 = "CAI-110"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, ErrorCode._member_map_.values()))


@JsonMap({"error_code": "errorCode", "parameter_name": "parameterName"})
class CaiErrorCodeResponse(BaseModel):
    """CaiErrorCodeResponse

    :param error_code: error_code
    :type error_code: ErrorCode
    :param message: Helpful description of the errorCode
    :type message: str
    :param parameter_name: Name of parameter if specified in the message, defaults to None
    :type parameter_name: str, optional
    """

    def __init__(self, error_code: ErrorCode, message: str, parameter_name: str = None):
        self.error_code = self._enum_matching(
            error_code, ErrorCode.list(), "error_code"
        )
        self.message = message
        if parameter_name is not None:
            self.parameter_name = parameter_name
