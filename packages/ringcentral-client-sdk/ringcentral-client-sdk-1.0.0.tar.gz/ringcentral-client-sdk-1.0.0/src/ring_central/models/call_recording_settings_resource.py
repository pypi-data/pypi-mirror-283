# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .on_demand_resource import OnDemandResource
from .automatic_recording_resource import AutomaticRecordingResource
from .greeting_resource import GreetingResource


@JsonMap({"on_demand": "onDemand"})
class CallRecordingSettingsResource(BaseModel):
    """CallRecordingSettingsResource

    :param on_demand: on_demand, defaults to None
    :type on_demand: OnDemandResource, optional
    :param automatic: automatic, defaults to None
    :type automatic: AutomaticRecordingResource, optional
    :param greetings: Collection of Greeting Info, defaults to None
    :type greetings: List[GreetingResource], optional
    """

    def __init__(
        self,
        on_demand: OnDemandResource = None,
        automatic: AutomaticRecordingResource = None,
        greetings: List[GreetingResource] = None,
    ):
        if on_demand is not None:
            self.on_demand = self._define_object(on_demand, OnDemandResource)
        if automatic is not None:
            self.automatic = self._define_object(automatic, AutomaticRecordingResource)
        if greetings is not None:
            self.greetings = self._define_list(greetings, GreetingResource)
