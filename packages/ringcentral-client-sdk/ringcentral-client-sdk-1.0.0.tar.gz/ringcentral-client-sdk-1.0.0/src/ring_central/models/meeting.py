# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .host import Host
from .participant import Participant
from .recording import Recording


class MeetingType(Enum):
    """An enumeration representing different categories.

    :cvar MEETING: "Meeting"
    :vartype MEETING: str
    :cvar CALL: "Call"
    :vartype CALL: str
    """

    MEETING = "Meeting"
    CALL = "Call"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, MeetingType._member_map_.values()))


class MeetingStatus(Enum):
    """An enumeration representing different categories.

    :cvar INPROGRESS: "InProgress"
    :vartype INPROGRESS: str
    :cvar DONE: "Done"
    :vartype DONE: str
    """

    INPROGRESS = "InProgress"
    DONE = "Done"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, MeetingStatus._member_map_.values()))


class Rights(Enum):
    """An enumeration representing different categories.

    :cvar DELETE: "delete"
    :vartype DELETE: str
    :cvar DOWNLOAD: "download"
    :vartype DOWNLOAD: str
    :cvar SHARE: "share"
    :vartype SHARE: str
    """

    DELETE = "delete"
    DOWNLOAD = "download"
    SHARE = "share"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, Rights._member_map_.values()))


@JsonMap(
    {
        "id_": "id",
        "bridge_id": "bridgeId",
        "short_id": "shortId",
        "start_time": "startTime",
        "display_name": "displayName",
        "type_": "type",
        "host_info": "hostInfo",
        "long_summary": "longSummary",
        "short_summary": "shortSummary",
        "chat_url": "chatUrl",
    }
)
class Meeting(BaseModel):
    """Meeting information

    :param id_: Call id
    :type id_: str
    :param bridge_id: Bridge id
    :type bridge_id: str
    :param short_id: Short bridge id
    :type short_id: str
    :param start_time: Start time ISO 8601
    :type start_time: str
    :param duration: Duration second, defaults to None
    :type duration: int, optional
    :param display_name: Meetings name
    :type display_name: str
    :param type_: Meeting type
    :type type_: MeetingType
    :param status: Meeting status
    :type status: MeetingStatus
    :param host_info: Meeting host
    :type host_info: Host
    :param rights: Describe access rights which has participants to meeting
    :type rights: List[Rights]
    :param long_summary: During meeting AI team analyze code and after meeting finished generates text summary about this meeting, defaults to None
    :type long_summary: str, optional
    :param short_summary: During meeting AI team analyze code and after meeting finished generates text summary about this meeting, defaults to None
    :type short_summary: str, optional
    :param keywords: During meeting AI team analyze code and after meeting finished generates key words used in meeting, defaults to None
    :type keywords: List[str], optional
    :param participants: List of the participants in the meeting
    :type participants: List[Participant]
    :param recordings: Recording information
    :type recordings: List[Recording]
    :param chat_url: Chat location, defaults to None
    :type chat_url: str, optional
    """

    def __init__(
        self,
        id_: str,
        bridge_id: str,
        short_id: str,
        start_time: str,
        display_name: str,
        type_: MeetingType,
        status: MeetingStatus,
        host_info: Host,
        rights: List[Rights],
        participants: List[Participant],
        recordings: List[Recording],
        duration: int = None,
        long_summary: str = None,
        short_summary: str = None,
        keywords: List[str] = None,
        chat_url: str = None,
    ):
        self.id_ = id_
        self.bridge_id = bridge_id
        self.short_id = short_id
        self.start_time = start_time
        if duration is not None:
            self.duration = duration
        self.display_name = display_name
        self.type_ = self._enum_matching(type_, MeetingType.list(), "type_")
        self.status = self._enum_matching(status, MeetingStatus.list(), "status")
        self.host_info = self._define_object(host_info, Host)
        self.rights = self._define_list(rights, Rights)
        if long_summary is not None:
            self.long_summary = long_summary
        if short_summary is not None:
            self.short_summary = short_summary
        if keywords is not None:
            self.keywords = keywords
        self.participants = self._define_list(participants, Participant)
        self.recordings = self._define_list(recordings, Recording)
        if chat_url is not None:
            self.chat_url = chat_url
