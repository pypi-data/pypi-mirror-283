# This file was generated by liblab | https://liblab.com/

from enum import Enum
from typing import Union
from .utils.json_map import JsonMap
from .base import BaseModel
from .base import OneOfBaseModel


class GetTokenRequest1GrantType(Enum):
    """An enumeration representing different categories.

    :cvar AUTHORIZATION_CODE: "authorization_code"
    :vartype AUTHORIZATION_CODE: str
    :cvar PASSWORD: "password"
    :vartype PASSWORD: str
    :cvar REFRESH_TOKEN: "refresh_token"
    :vartype REFRESH_TOKEN: str
    :cvar CLIENT_CREDENTIALS: "client_credentials"
    :vartype CLIENT_CREDENTIALS: str
    :cvar URN_IETF_PARAMS_OAUTH_GRANT_TYPE_JWT_BEARER: "urn:ietf:params:oauth:grant-type:jwt-bearer"
    :vartype URN_IETF_PARAMS_OAUTH_GRANT_TYPE_JWT_BEARER: str
    :cvar URN_IETF_PARAMS_OAUTH_GRANT_TYPE_DEVICE_CODE: "urn:ietf:params:oauth:grant-type:device_code"
    :vartype URN_IETF_PARAMS_OAUTH_GRANT_TYPE_DEVICE_CODE: str
    :cvar DEVICE_CERTIFICATE: "device_certificate"
    :vartype DEVICE_CERTIFICATE: str
    :cvar PARTNER_JWT: "partner_jwt"
    :vartype PARTNER_JWT: str
    :cvar GUEST: "guest"
    :vartype GUEST: str
    :cvar PERSONAL_JWT: "personal_jwt"
    :vartype PERSONAL_JWT: str
    :cvar OTP: "otp"
    :vartype OTP: str
    :cvar IVR_PIN: "ivr_pin"
    :vartype IVR_PIN: str
    """

    AUTHORIZATION_CODE = "authorization_code"
    PASSWORD = "password"
    REFRESH_TOKEN = "refresh_token"
    CLIENT_CREDENTIALS = "client_credentials"
    URN_IETF_PARAMS_OAUTH_GRANT_TYPE_JWT_BEARER = (
        "urn:ietf:params:oauth:grant-type:jwt-bearer"
    )
    URN_IETF_PARAMS_OAUTH_GRANT_TYPE_DEVICE_CODE = (
        "urn:ietf:params:oauth:grant-type:device_code"
    )
    DEVICE_CERTIFICATE = "device_certificate"
    PARTNER_JWT = "partner_jwt"
    GUEST = "guest"
    PERSONAL_JWT = "personal_jwt"
    OTP = "otp"
    IVR_PIN = "ivr_pin"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, GetTokenRequest1GrantType._member_map_.values())
        )


class GetTokenRequest1ClientAssertionType(Enum):
    """An enumeration representing different categories.

    :cvar URN_IETF_PARAMS_OAUTH_CLIENT_ASSERTION_TYPE_JWT_BEARER: "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
    :vartype URN_IETF_PARAMS_OAUTH_CLIENT_ASSERTION_TYPE_JWT_BEARER: str
    """

    URN_IETF_PARAMS_OAUTH_CLIENT_ASSERTION_TYPE_JWT_BEARER = (
        "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
    )

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                GetTokenRequest1ClientAssertionType._member_map_.values(),
            )
        )


@JsonMap({})
class GetTokenRequest1(BaseModel):
    """GetTokenRequest1

    :param grant_type: Grant type
    :type grant_type: GetTokenRequest1GrantType
    :param code: For `authorization_code` grant type only. User's authorization code, defaults to None
    :type code: str, optional
    :param redirect_uri: For `authorization_code` grant type only. This is a callback URI which determines where the response<br>is sent. The value of this parameter must exactly match one of<br>the URIs you have provided for your app upon registration<br>, defaults to None
    :type redirect_uri: str, optional
    :param code_verifier: For `authorization_code` grant type only.<br>The code verifier as defined by  the PKCE specification -<br>[RFC-7636 "Proof Key for Code Exchange by OAuth Public Clients"](https://datatracker.ietf.org/doc/html/rfc7636)<br>, defaults to None
    :type code_verifier: str, optional
    :param client_assertion_type: Client assertion type for the `client_secret_jwt` or `private_key_jwt` client authentication types,<br>as defined by [RFC-7523](https://datatracker.ietf.org/doc/html/rfc7523#section-2.2).<br>This parameter is mandatory if the client authentication is required and a client decided to use one of these authentication types<br>, defaults to None
    :type client_assertion_type: GetTokenRequest1ClientAssertionType, optional
    :param client_assertion: Client assertion (JWT) for the `client_secret_jwt` or `private_key_jwt` client authentication types,<br>as defined by [RFC-7523](https://datatracker.ietf.org/doc/html/rfc7523#section-2.2).<br>This parameter is mandatory if the client authentication is required and a client decided to use one of these authentication types<br>, defaults to None
    :type client_assertion: str, optional
    :param scope: The list of application permissions (OAuth scopes) requested.<br>By default, it includes all permissions configured on<br>the client application registration<br>, defaults to None
    :type scope: str, optional
    :param client_id: The registered identifier of a client application.<br>Used to identify a client ONLY if the client authentication is not required and<br>corresponding credentials are not provided with this request<br>, defaults to None
    :type client_id: str, optional
    :param endpoint_id: The unique identifier of a client application instance. If not<br>specified, the derived or auto-generated value will be used<br>, defaults to None
    :type endpoint_id: str, optional
    :param access_token_ttl: Access token lifetime in seconds, defaults to None
    :type access_token_ttl: int, optional
    :param refresh_token_ttl: Refresh token lifetime in seconds, defaults to None
    :type refresh_token_ttl: int, optional
    """

    def __init__(
        self,
        grant_type: GetTokenRequest1GrantType,
        code: str = None,
        redirect_uri: str = None,
        code_verifier: str = None,
        client_assertion_type: GetTokenRequest1ClientAssertionType = None,
        client_assertion: str = None,
        scope: str = None,
        client_id: str = None,
        endpoint_id: str = None,
        access_token_ttl: int = None,
        refresh_token_ttl: int = None,
    ):
        self.grant_type = self._enum_matching(
            grant_type, GetTokenRequest1GrantType.list(), "grant_type"
        )
        if code is not None:
            self.code = code
        if redirect_uri is not None:
            self.redirect_uri = redirect_uri
        if code_verifier is not None:
            self.code_verifier = code_verifier
        if client_assertion_type is not None:
            self.client_assertion_type = self._enum_matching(
                client_assertion_type,
                GetTokenRequest1ClientAssertionType.list(),
                "client_assertion_type",
            )
        if client_assertion is not None:
            self.client_assertion = client_assertion
        if scope is not None:
            self.scope = scope
        if client_id is not None:
            self.client_id = client_id
        if endpoint_id is not None:
            self.endpoint_id = endpoint_id
        if access_token_ttl is not None:
            self.access_token_ttl = access_token_ttl
        if refresh_token_ttl is not None:
            self.refresh_token_ttl = refresh_token_ttl


class GetTokenRequest2GrantType(Enum):
    """An enumeration representing different categories.

    :cvar AUTHORIZATION_CODE: "authorization_code"
    :vartype AUTHORIZATION_CODE: str
    :cvar PASSWORD: "password"
    :vartype PASSWORD: str
    :cvar REFRESH_TOKEN: "refresh_token"
    :vartype REFRESH_TOKEN: str
    :cvar CLIENT_CREDENTIALS: "client_credentials"
    :vartype CLIENT_CREDENTIALS: str
    :cvar URN_IETF_PARAMS_OAUTH_GRANT_TYPE_JWT_BEARER: "urn:ietf:params:oauth:grant-type:jwt-bearer"
    :vartype URN_IETF_PARAMS_OAUTH_GRANT_TYPE_JWT_BEARER: str
    :cvar URN_IETF_PARAMS_OAUTH_GRANT_TYPE_DEVICE_CODE: "urn:ietf:params:oauth:grant-type:device_code"
    :vartype URN_IETF_PARAMS_OAUTH_GRANT_TYPE_DEVICE_CODE: str
    :cvar DEVICE_CERTIFICATE: "device_certificate"
    :vartype DEVICE_CERTIFICATE: str
    :cvar PARTNER_JWT: "partner_jwt"
    :vartype PARTNER_JWT: str
    :cvar GUEST: "guest"
    :vartype GUEST: str
    :cvar PERSONAL_JWT: "personal_jwt"
    :vartype PERSONAL_JWT: str
    :cvar OTP: "otp"
    :vartype OTP: str
    :cvar IVR_PIN: "ivr_pin"
    :vartype IVR_PIN: str
    """

    AUTHORIZATION_CODE = "authorization_code"
    PASSWORD = "password"
    REFRESH_TOKEN = "refresh_token"
    CLIENT_CREDENTIALS = "client_credentials"
    URN_IETF_PARAMS_OAUTH_GRANT_TYPE_JWT_BEARER = (
        "urn:ietf:params:oauth:grant-type:jwt-bearer"
    )
    URN_IETF_PARAMS_OAUTH_GRANT_TYPE_DEVICE_CODE = (
        "urn:ietf:params:oauth:grant-type:device_code"
    )
    DEVICE_CERTIFICATE = "device_certificate"
    PARTNER_JWT = "partner_jwt"
    GUEST = "guest"
    PERSONAL_JWT = "personal_jwt"
    OTP = "otp"
    IVR_PIN = "ivr_pin"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, GetTokenRequest2GrantType._member_map_.values())
        )


class GetTokenRequest2ClientAssertionType(Enum):
    """An enumeration representing different categories.

    :cvar URN_IETF_PARAMS_OAUTH_CLIENT_ASSERTION_TYPE_JWT_BEARER: "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
    :vartype URN_IETF_PARAMS_OAUTH_CLIENT_ASSERTION_TYPE_JWT_BEARER: str
    """

    URN_IETF_PARAMS_OAUTH_CLIENT_ASSERTION_TYPE_JWT_BEARER = (
        "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
    )

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                GetTokenRequest2ClientAssertionType._member_map_.values(),
            )
        )


@JsonMap({})
class GetTokenRequest2(BaseModel):
    """GetTokenRequest2

    :param grant_type: Grant type
    :type grant_type: GetTokenRequest2GrantType
    :param username: For `password` grant type only. User login name: email or phone number in E.164 format<br>, defaults to None
    :type username: str, optional
    :param password: For `password` grant type only. User's password, defaults to None
    :type password: str, optional
    :param extension: For `password` grant type only. Optional. Extension short number. If a company number<br>is specified as a username, and extension is not specified, the<br>server will attempt to authenticate client as main company administrator<br><br>DEPRECATED: use extension number embedded into username string like `+16501234567*101`<br>, defaults to None
    :type extension: str, optional
    :param pin: IVR pin for pin-based authentication.<br><br>DEPRECATED: use a dedicated `ivr_pin` grant type instead<br>, defaults to None
    :type pin: str, optional
    :param client_assertion_type: Client assertion type for the `client_secret_jwt` or `private_key_jwt` client authentication types,<br>as defined by [RFC-7523](https://datatracker.ietf.org/doc/html/rfc7523#section-2.2).<br>This parameter is mandatory if the client authentication is required and a client decided to use one of these authentication types<br>, defaults to None
    :type client_assertion_type: GetTokenRequest2ClientAssertionType, optional
    :param client_assertion: Client assertion (JWT) for the `client_secret_jwt` or `private_key_jwt` client authentication types,<br>as defined by [RFC-7523](https://datatracker.ietf.org/doc/html/rfc7523#section-2.2).<br>This parameter is mandatory if the client authentication is required and a client decided to use one of these authentication types<br>, defaults to None
    :type client_assertion: str, optional
    :param scope: The list of application permissions (OAuth scopes) requested.<br>By default, it includes all permissions configured on<br>the client application registration<br>, defaults to None
    :type scope: str, optional
    :param client_id: The registered identifier of a client application.<br>Used to identify a client ONLY if the client authentication is not required and<br>corresponding credentials are not provided with this request<br>, defaults to None
    :type client_id: str, optional
    :param endpoint_id: The unique identifier of a client application instance. If not<br>specified, the derived or auto-generated value will be used<br>, defaults to None
    :type endpoint_id: str, optional
    :param access_token_ttl: Access token lifetime in seconds, defaults to None
    :type access_token_ttl: int, optional
    :param refresh_token_ttl: Refresh token lifetime in seconds, defaults to None
    :type refresh_token_ttl: int, optional
    """

    def __init__(
        self,
        grant_type: GetTokenRequest2GrantType,
        username: str = None,
        password: str = None,
        extension: str = None,
        pin: str = None,
        client_assertion_type: GetTokenRequest2ClientAssertionType = None,
        client_assertion: str = None,
        scope: str = None,
        client_id: str = None,
        endpoint_id: str = None,
        access_token_ttl: int = None,
        refresh_token_ttl: int = None,
    ):
        self.grant_type = self._enum_matching(
            grant_type, GetTokenRequest2GrantType.list(), "grant_type"
        )
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if extension is not None:
            self.extension = extension
        if pin is not None:
            self.pin = pin
        if client_assertion_type is not None:
            self.client_assertion_type = self._enum_matching(
                client_assertion_type,
                GetTokenRequest2ClientAssertionType.list(),
                "client_assertion_type",
            )
        if client_assertion is not None:
            self.client_assertion = client_assertion
        if scope is not None:
            self.scope = scope
        if client_id is not None:
            self.client_id = client_id
        if endpoint_id is not None:
            self.endpoint_id = endpoint_id
        if access_token_ttl is not None:
            self.access_token_ttl = access_token_ttl
        if refresh_token_ttl is not None:
            self.refresh_token_ttl = refresh_token_ttl


class GetTokenRequest3GrantType(Enum):
    """An enumeration representing different categories.

    :cvar AUTHORIZATION_CODE: "authorization_code"
    :vartype AUTHORIZATION_CODE: str
    :cvar PASSWORD: "password"
    :vartype PASSWORD: str
    :cvar REFRESH_TOKEN: "refresh_token"
    :vartype REFRESH_TOKEN: str
    :cvar CLIENT_CREDENTIALS: "client_credentials"
    :vartype CLIENT_CREDENTIALS: str
    :cvar URN_IETF_PARAMS_OAUTH_GRANT_TYPE_JWT_BEARER: "urn:ietf:params:oauth:grant-type:jwt-bearer"
    :vartype URN_IETF_PARAMS_OAUTH_GRANT_TYPE_JWT_BEARER: str
    :cvar URN_IETF_PARAMS_OAUTH_GRANT_TYPE_DEVICE_CODE: "urn:ietf:params:oauth:grant-type:device_code"
    :vartype URN_IETF_PARAMS_OAUTH_GRANT_TYPE_DEVICE_CODE: str
    :cvar DEVICE_CERTIFICATE: "device_certificate"
    :vartype DEVICE_CERTIFICATE: str
    :cvar PARTNER_JWT: "partner_jwt"
    :vartype PARTNER_JWT: str
    :cvar GUEST: "guest"
    :vartype GUEST: str
    :cvar PERSONAL_JWT: "personal_jwt"
    :vartype PERSONAL_JWT: str
    :cvar OTP: "otp"
    :vartype OTP: str
    :cvar IVR_PIN: "ivr_pin"
    :vartype IVR_PIN: str
    """

    AUTHORIZATION_CODE = "authorization_code"
    PASSWORD = "password"
    REFRESH_TOKEN = "refresh_token"
    CLIENT_CREDENTIALS = "client_credentials"
    URN_IETF_PARAMS_OAUTH_GRANT_TYPE_JWT_BEARER = (
        "urn:ietf:params:oauth:grant-type:jwt-bearer"
    )
    URN_IETF_PARAMS_OAUTH_GRANT_TYPE_DEVICE_CODE = (
        "urn:ietf:params:oauth:grant-type:device_code"
    )
    DEVICE_CERTIFICATE = "device_certificate"
    PARTNER_JWT = "partner_jwt"
    GUEST = "guest"
    PERSONAL_JWT = "personal_jwt"
    OTP = "otp"
    IVR_PIN = "ivr_pin"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, GetTokenRequest3GrantType._member_map_.values())
        )


class GetTokenRequest3ClientAssertionType(Enum):
    """An enumeration representing different categories.

    :cvar URN_IETF_PARAMS_OAUTH_CLIENT_ASSERTION_TYPE_JWT_BEARER: "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
    :vartype URN_IETF_PARAMS_OAUTH_CLIENT_ASSERTION_TYPE_JWT_BEARER: str
    """

    URN_IETF_PARAMS_OAUTH_CLIENT_ASSERTION_TYPE_JWT_BEARER = (
        "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
    )

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                GetTokenRequest3ClientAssertionType._member_map_.values(),
            )
        )


@JsonMap({})
class GetTokenRequest3(BaseModel):
    """GetTokenRequest3

    :param grant_type: Grant type
    :type grant_type: GetTokenRequest3GrantType
    :param assertion: For `urn:ietf:params:oauth:grant-type:jwt-bearer` or `partner_jwt` grant types only.<br>Authorization grant assertion (JWT)<br>as defined by [RFC-7523](https://datatracker.ietf.org/doc/html/rfc7523#section-2.1).<br>, defaults to None
    :type assertion: str, optional
    :param client_assertion_type: Client assertion type for the `client_secret_jwt` or `private_key_jwt` client authentication types,<br>as defined by [RFC-7523](https://datatracker.ietf.org/doc/html/rfc7523#section-2.2).<br>This parameter is mandatory if the client authentication is required and a client decided to use one of these authentication types<br>, defaults to None
    :type client_assertion_type: GetTokenRequest3ClientAssertionType, optional
    :param client_assertion: Client assertion (JWT) for the `client_secret_jwt` or `private_key_jwt` client authentication types,<br>as defined by [RFC-7523](https://datatracker.ietf.org/doc/html/rfc7523#section-2.2).<br>This parameter is mandatory if the client authentication is required and a client decided to use one of these authentication types<br>, defaults to None
    :type client_assertion: str, optional
    :param scope: The list of application permissions (OAuth scopes) requested.<br>By default, it includes all permissions configured on<br>the client application registration<br>, defaults to None
    :type scope: str, optional
    :param client_id: The registered identifier of a client application.<br>Used to identify a client ONLY if the client authentication is not required and<br>corresponding credentials are not provided with this request<br>, defaults to None
    :type client_id: str, optional
    :param endpoint_id: The unique identifier of a client application instance. If not<br>specified, the derived or auto-generated value will be used<br>, defaults to None
    :type endpoint_id: str, optional
    :param access_token_ttl: Access token lifetime in seconds, defaults to None
    :type access_token_ttl: int, optional
    :param refresh_token_ttl: Refresh token lifetime in seconds, defaults to None
    :type refresh_token_ttl: int, optional
    """

    def __init__(
        self,
        grant_type: GetTokenRequest3GrantType,
        assertion: str = None,
        client_assertion_type: GetTokenRequest3ClientAssertionType = None,
        client_assertion: str = None,
        scope: str = None,
        client_id: str = None,
        endpoint_id: str = None,
        access_token_ttl: int = None,
        refresh_token_ttl: int = None,
    ):
        self.grant_type = self._enum_matching(
            grant_type, GetTokenRequest3GrantType.list(), "grant_type"
        )
        if assertion is not None:
            self.assertion = assertion
        if client_assertion_type is not None:
            self.client_assertion_type = self._enum_matching(
                client_assertion_type,
                GetTokenRequest3ClientAssertionType.list(),
                "client_assertion_type",
            )
        if client_assertion is not None:
            self.client_assertion = client_assertion
        if scope is not None:
            self.scope = scope
        if client_id is not None:
            self.client_id = client_id
        if endpoint_id is not None:
            self.endpoint_id = endpoint_id
        if access_token_ttl is not None:
            self.access_token_ttl = access_token_ttl
        if refresh_token_ttl is not None:
            self.refresh_token_ttl = refresh_token_ttl


class GetTokenRequest4GrantType(Enum):
    """An enumeration representing different categories.

    :cvar AUTHORIZATION_CODE: "authorization_code"
    :vartype AUTHORIZATION_CODE: str
    :cvar PASSWORD: "password"
    :vartype PASSWORD: str
    :cvar REFRESH_TOKEN: "refresh_token"
    :vartype REFRESH_TOKEN: str
    :cvar CLIENT_CREDENTIALS: "client_credentials"
    :vartype CLIENT_CREDENTIALS: str
    :cvar URN_IETF_PARAMS_OAUTH_GRANT_TYPE_JWT_BEARER: "urn:ietf:params:oauth:grant-type:jwt-bearer"
    :vartype URN_IETF_PARAMS_OAUTH_GRANT_TYPE_JWT_BEARER: str
    :cvar URN_IETF_PARAMS_OAUTH_GRANT_TYPE_DEVICE_CODE: "urn:ietf:params:oauth:grant-type:device_code"
    :vartype URN_IETF_PARAMS_OAUTH_GRANT_TYPE_DEVICE_CODE: str
    :cvar DEVICE_CERTIFICATE: "device_certificate"
    :vartype DEVICE_CERTIFICATE: str
    :cvar PARTNER_JWT: "partner_jwt"
    :vartype PARTNER_JWT: str
    :cvar GUEST: "guest"
    :vartype GUEST: str
    :cvar PERSONAL_JWT: "personal_jwt"
    :vartype PERSONAL_JWT: str
    :cvar OTP: "otp"
    :vartype OTP: str
    :cvar IVR_PIN: "ivr_pin"
    :vartype IVR_PIN: str
    """

    AUTHORIZATION_CODE = "authorization_code"
    PASSWORD = "password"
    REFRESH_TOKEN = "refresh_token"
    CLIENT_CREDENTIALS = "client_credentials"
    URN_IETF_PARAMS_OAUTH_GRANT_TYPE_JWT_BEARER = (
        "urn:ietf:params:oauth:grant-type:jwt-bearer"
    )
    URN_IETF_PARAMS_OAUTH_GRANT_TYPE_DEVICE_CODE = (
        "urn:ietf:params:oauth:grant-type:device_code"
    )
    DEVICE_CERTIFICATE = "device_certificate"
    PARTNER_JWT = "partner_jwt"
    GUEST = "guest"
    PERSONAL_JWT = "personal_jwt"
    OTP = "otp"
    IVR_PIN = "ivr_pin"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, GetTokenRequest4GrantType._member_map_.values())
        )


class GetTokenRequest4ClientAssertionType(Enum):
    """An enumeration representing different categories.

    :cvar URN_IETF_PARAMS_OAUTH_CLIENT_ASSERTION_TYPE_JWT_BEARER: "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
    :vartype URN_IETF_PARAMS_OAUTH_CLIENT_ASSERTION_TYPE_JWT_BEARER: str
    """

    URN_IETF_PARAMS_OAUTH_CLIENT_ASSERTION_TYPE_JWT_BEARER = (
        "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
    )

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                GetTokenRequest4ClientAssertionType._member_map_.values(),
            )
        )


@JsonMap({})
class GetTokenRequest4(BaseModel):
    """GetTokenRequest4

    :param grant_type: Grant type
    :type grant_type: GetTokenRequest4GrantType
    :param refresh_token: For `refresh_token` grant type only. Previously issued refresh token.<br>, defaults to None
    :type refresh_token: str, optional
    :param client_assertion_type: Client assertion type for the `client_secret_jwt` or `private_key_jwt` client authentication types,<br>as defined by [RFC-7523](https://datatracker.ietf.org/doc/html/rfc7523#section-2.2).<br>This parameter is mandatory if the client authentication is required and a client decided to use one of these authentication types<br>, defaults to None
    :type client_assertion_type: GetTokenRequest4ClientAssertionType, optional
    :param client_assertion: Client assertion (JWT) for the `client_secret_jwt` or `private_key_jwt` client authentication types,<br>as defined by [RFC-7523](https://datatracker.ietf.org/doc/html/rfc7523#section-2.2).<br>This parameter is mandatory if the client authentication is required and a client decided to use one of these authentication types<br>, defaults to None
    :type client_assertion: str, optional
    :param scope: The list of application permissions (OAuth scopes) requested.<br>By default, it includes all permissions configured on<br>the client application registration<br>, defaults to None
    :type scope: str, optional
    :param client_id: The registered identifier of a client application.<br>Used to identify a client ONLY if the client authentication is not required and<br>corresponding credentials are not provided with this request<br>, defaults to None
    :type client_id: str, optional
    :param endpoint_id: The unique identifier of a client application instance. If not<br>specified, the derived or auto-generated value will be used<br>, defaults to None
    :type endpoint_id: str, optional
    :param access_token_ttl: Access token lifetime in seconds, defaults to None
    :type access_token_ttl: int, optional
    :param refresh_token_ttl: Refresh token lifetime in seconds, defaults to None
    :type refresh_token_ttl: int, optional
    """

    def __init__(
        self,
        grant_type: GetTokenRequest4GrantType,
        refresh_token: str = None,
        client_assertion_type: GetTokenRequest4ClientAssertionType = None,
        client_assertion: str = None,
        scope: str = None,
        client_id: str = None,
        endpoint_id: str = None,
        access_token_ttl: int = None,
        refresh_token_ttl: int = None,
    ):
        self.grant_type = self._enum_matching(
            grant_type, GetTokenRequest4GrantType.list(), "grant_type"
        )
        if refresh_token is not None:
            self.refresh_token = refresh_token
        if client_assertion_type is not None:
            self.client_assertion_type = self._enum_matching(
                client_assertion_type,
                GetTokenRequest4ClientAssertionType.list(),
                "client_assertion_type",
            )
        if client_assertion is not None:
            self.client_assertion = client_assertion
        if scope is not None:
            self.scope = scope
        if client_id is not None:
            self.client_id = client_id
        if endpoint_id is not None:
            self.endpoint_id = endpoint_id
        if access_token_ttl is not None:
            self.access_token_ttl = access_token_ttl
        if refresh_token_ttl is not None:
            self.refresh_token_ttl = refresh_token_ttl


class GetTokenRequest5GrantType(Enum):
    """An enumeration representing different categories.

    :cvar AUTHORIZATION_CODE: "authorization_code"
    :vartype AUTHORIZATION_CODE: str
    :cvar PASSWORD: "password"
    :vartype PASSWORD: str
    :cvar REFRESH_TOKEN: "refresh_token"
    :vartype REFRESH_TOKEN: str
    :cvar CLIENT_CREDENTIALS: "client_credentials"
    :vartype CLIENT_CREDENTIALS: str
    :cvar URN_IETF_PARAMS_OAUTH_GRANT_TYPE_JWT_BEARER: "urn:ietf:params:oauth:grant-type:jwt-bearer"
    :vartype URN_IETF_PARAMS_OAUTH_GRANT_TYPE_JWT_BEARER: str
    :cvar URN_IETF_PARAMS_OAUTH_GRANT_TYPE_DEVICE_CODE: "urn:ietf:params:oauth:grant-type:device_code"
    :vartype URN_IETF_PARAMS_OAUTH_GRANT_TYPE_DEVICE_CODE: str
    :cvar DEVICE_CERTIFICATE: "device_certificate"
    :vartype DEVICE_CERTIFICATE: str
    :cvar PARTNER_JWT: "partner_jwt"
    :vartype PARTNER_JWT: str
    :cvar GUEST: "guest"
    :vartype GUEST: str
    :cvar PERSONAL_JWT: "personal_jwt"
    :vartype PERSONAL_JWT: str
    :cvar OTP: "otp"
    :vartype OTP: str
    :cvar IVR_PIN: "ivr_pin"
    :vartype IVR_PIN: str
    """

    AUTHORIZATION_CODE = "authorization_code"
    PASSWORD = "password"
    REFRESH_TOKEN = "refresh_token"
    CLIENT_CREDENTIALS = "client_credentials"
    URN_IETF_PARAMS_OAUTH_GRANT_TYPE_JWT_BEARER = (
        "urn:ietf:params:oauth:grant-type:jwt-bearer"
    )
    URN_IETF_PARAMS_OAUTH_GRANT_TYPE_DEVICE_CODE = (
        "urn:ietf:params:oauth:grant-type:device_code"
    )
    DEVICE_CERTIFICATE = "device_certificate"
    PARTNER_JWT = "partner_jwt"
    GUEST = "guest"
    PERSONAL_JWT = "personal_jwt"
    OTP = "otp"
    IVR_PIN = "ivr_pin"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, GetTokenRequest5GrantType._member_map_.values())
        )


class GetTokenRequest5ClientAssertionType(Enum):
    """An enumeration representing different categories.

    :cvar URN_IETF_PARAMS_OAUTH_CLIENT_ASSERTION_TYPE_JWT_BEARER: "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
    :vartype URN_IETF_PARAMS_OAUTH_CLIENT_ASSERTION_TYPE_JWT_BEARER: str
    """

    URN_IETF_PARAMS_OAUTH_CLIENT_ASSERTION_TYPE_JWT_BEARER = (
        "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
    )

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                GetTokenRequest5ClientAssertionType._member_map_.values(),
            )
        )


@JsonMap({})
class GetTokenRequest5(BaseModel):
    """GetTokenRequest5

    :param grant_type: Grant type
    :type grant_type: GetTokenRequest5GrantType
    :param ivr_pin: For `ivr_pin` grant type only. User's IVR pin., defaults to None
    :type ivr_pin: str, optional
    :param client_assertion_type: Client assertion type for the `client_secret_jwt` or `private_key_jwt` client authentication types,<br>as defined by [RFC-7523](https://datatracker.ietf.org/doc/html/rfc7523#section-2.2).<br>This parameter is mandatory if the client authentication is required and a client decided to use one of these authentication types<br>, defaults to None
    :type client_assertion_type: GetTokenRequest5ClientAssertionType, optional
    :param client_assertion: Client assertion (JWT) for the `client_secret_jwt` or `private_key_jwt` client authentication types,<br>as defined by [RFC-7523](https://datatracker.ietf.org/doc/html/rfc7523#section-2.2).<br>This parameter is mandatory if the client authentication is required and a client decided to use one of these authentication types<br>, defaults to None
    :type client_assertion: str, optional
    :param scope: The list of application permissions (OAuth scopes) requested.<br>By default, it includes all permissions configured on<br>the client application registration<br>, defaults to None
    :type scope: str, optional
    :param client_id: The registered identifier of a client application.<br>Used to identify a client ONLY if the client authentication is not required and<br>corresponding credentials are not provided with this request<br>, defaults to None
    :type client_id: str, optional
    :param endpoint_id: The unique identifier of a client application instance. If not<br>specified, the derived or auto-generated value will be used<br>, defaults to None
    :type endpoint_id: str, optional
    :param access_token_ttl: Access token lifetime in seconds, defaults to None
    :type access_token_ttl: int, optional
    :param refresh_token_ttl: Refresh token lifetime in seconds, defaults to None
    :type refresh_token_ttl: int, optional
    """

    def __init__(
        self,
        grant_type: GetTokenRequest5GrantType,
        ivr_pin: str = None,
        client_assertion_type: GetTokenRequest5ClientAssertionType = None,
        client_assertion: str = None,
        scope: str = None,
        client_id: str = None,
        endpoint_id: str = None,
        access_token_ttl: int = None,
        refresh_token_ttl: int = None,
    ):
        self.grant_type = self._enum_matching(
            grant_type, GetTokenRequest5GrantType.list(), "grant_type"
        )
        if ivr_pin is not None:
            self.ivr_pin = ivr_pin
        if client_assertion_type is not None:
            self.client_assertion_type = self._enum_matching(
                client_assertion_type,
                GetTokenRequest5ClientAssertionType.list(),
                "client_assertion_type",
            )
        if client_assertion is not None:
            self.client_assertion = client_assertion
        if scope is not None:
            self.scope = scope
        if client_id is not None:
            self.client_id = client_id
        if endpoint_id is not None:
            self.endpoint_id = endpoint_id
        if access_token_ttl is not None:
            self.access_token_ttl = access_token_ttl
        if refresh_token_ttl is not None:
            self.refresh_token_ttl = refresh_token_ttl


class GetTokenRequest6GrantType(Enum):
    """An enumeration representing different categories.

    :cvar AUTHORIZATION_CODE: "authorization_code"
    :vartype AUTHORIZATION_CODE: str
    :cvar PASSWORD: "password"
    :vartype PASSWORD: str
    :cvar REFRESH_TOKEN: "refresh_token"
    :vartype REFRESH_TOKEN: str
    :cvar CLIENT_CREDENTIALS: "client_credentials"
    :vartype CLIENT_CREDENTIALS: str
    :cvar URN_IETF_PARAMS_OAUTH_GRANT_TYPE_JWT_BEARER: "urn:ietf:params:oauth:grant-type:jwt-bearer"
    :vartype URN_IETF_PARAMS_OAUTH_GRANT_TYPE_JWT_BEARER: str
    :cvar URN_IETF_PARAMS_OAUTH_GRANT_TYPE_DEVICE_CODE: "urn:ietf:params:oauth:grant-type:device_code"
    :vartype URN_IETF_PARAMS_OAUTH_GRANT_TYPE_DEVICE_CODE: str
    :cvar DEVICE_CERTIFICATE: "device_certificate"
    :vartype DEVICE_CERTIFICATE: str
    :cvar PARTNER_JWT: "partner_jwt"
    :vartype PARTNER_JWT: str
    :cvar GUEST: "guest"
    :vartype GUEST: str
    :cvar PERSONAL_JWT: "personal_jwt"
    :vartype PERSONAL_JWT: str
    :cvar OTP: "otp"
    :vartype OTP: str
    :cvar IVR_PIN: "ivr_pin"
    :vartype IVR_PIN: str
    """

    AUTHORIZATION_CODE = "authorization_code"
    PASSWORD = "password"
    REFRESH_TOKEN = "refresh_token"
    CLIENT_CREDENTIALS = "client_credentials"
    URN_IETF_PARAMS_OAUTH_GRANT_TYPE_JWT_BEARER = (
        "urn:ietf:params:oauth:grant-type:jwt-bearer"
    )
    URN_IETF_PARAMS_OAUTH_GRANT_TYPE_DEVICE_CODE = (
        "urn:ietf:params:oauth:grant-type:device_code"
    )
    DEVICE_CERTIFICATE = "device_certificate"
    PARTNER_JWT = "partner_jwt"
    GUEST = "guest"
    PERSONAL_JWT = "personal_jwt"
    OTP = "otp"
    IVR_PIN = "ivr_pin"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, GetTokenRequest6GrantType._member_map_.values())
        )


class GetTokenRequest6ClientAssertionType(Enum):
    """An enumeration representing different categories.

    :cvar URN_IETF_PARAMS_OAUTH_CLIENT_ASSERTION_TYPE_JWT_BEARER: "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
    :vartype URN_IETF_PARAMS_OAUTH_CLIENT_ASSERTION_TYPE_JWT_BEARER: str
    """

    URN_IETF_PARAMS_OAUTH_CLIENT_ASSERTION_TYPE_JWT_BEARER = (
        "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
    )

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                GetTokenRequest6ClientAssertionType._member_map_.values(),
            )
        )


@JsonMap({})
class GetTokenRequest6(BaseModel):
    """GetTokenRequest6

    :param grant_type: Grant type
    :type grant_type: GetTokenRequest6GrantType
    :param device_code: For `urn:ietf:params:oauth:grant-type:device_code` grant type only.<br>The device verification code as defined by [RFC-8628](https://datatracker.ietf.org/doc/html/rfc8628#section-3.4)<br>, defaults to None
    :type device_code: str, optional
    :param client_assertion_type: Client assertion type for the `client_secret_jwt` or `private_key_jwt` client authentication types,<br>as defined by [RFC-7523](https://datatracker.ietf.org/doc/html/rfc7523#section-2.2).<br>This parameter is mandatory if the client authentication is required and a client decided to use one of these authentication types<br>, defaults to None
    :type client_assertion_type: GetTokenRequest6ClientAssertionType, optional
    :param client_assertion: Client assertion (JWT) for the `client_secret_jwt` or `private_key_jwt` client authentication types,<br>as defined by [RFC-7523](https://datatracker.ietf.org/doc/html/rfc7523#section-2.2).<br>This parameter is mandatory if the client authentication is required and a client decided to use one of these authentication types<br>, defaults to None
    :type client_assertion: str, optional
    :param scope: The list of application permissions (OAuth scopes) requested.<br>By default, it includes all permissions configured on<br>the client application registration<br>, defaults to None
    :type scope: str, optional
    :param client_id: The registered identifier of a client application.<br>Used to identify a client ONLY if the client authentication is not required and<br>corresponding credentials are not provided with this request<br>, defaults to None
    :type client_id: str, optional
    :param endpoint_id: The unique identifier of a client application instance. If not<br>specified, the derived or auto-generated value will be used<br>, defaults to None
    :type endpoint_id: str, optional
    :param access_token_ttl: Access token lifetime in seconds, defaults to None
    :type access_token_ttl: int, optional
    :param refresh_token_ttl: Refresh token lifetime in seconds, defaults to None
    :type refresh_token_ttl: int, optional
    """

    def __init__(
        self,
        grant_type: GetTokenRequest6GrantType,
        device_code: str = None,
        client_assertion_type: GetTokenRequest6ClientAssertionType = None,
        client_assertion: str = None,
        scope: str = None,
        client_id: str = None,
        endpoint_id: str = None,
        access_token_ttl: int = None,
        refresh_token_ttl: int = None,
    ):
        self.grant_type = self._enum_matching(
            grant_type, GetTokenRequest6GrantType.list(), "grant_type"
        )
        if device_code is not None:
            self.device_code = device_code
        if client_assertion_type is not None:
            self.client_assertion_type = self._enum_matching(
                client_assertion_type,
                GetTokenRequest6ClientAssertionType.list(),
                "client_assertion_type",
            )
        if client_assertion is not None:
            self.client_assertion = client_assertion
        if scope is not None:
            self.scope = scope
        if client_id is not None:
            self.client_id = client_id
        if endpoint_id is not None:
            self.endpoint_id = endpoint_id
        if access_token_ttl is not None:
            self.access_token_ttl = access_token_ttl
        if refresh_token_ttl is not None:
            self.refresh_token_ttl = refresh_token_ttl


class GetTokenRequest7_1GrantType(Enum):
    """An enumeration representing different categories.

    :cvar AUTHORIZATION_CODE: "authorization_code"
    :vartype AUTHORIZATION_CODE: str
    :cvar PASSWORD: "password"
    :vartype PASSWORD: str
    :cvar REFRESH_TOKEN: "refresh_token"
    :vartype REFRESH_TOKEN: str
    :cvar CLIENT_CREDENTIALS: "client_credentials"
    :vartype CLIENT_CREDENTIALS: str
    :cvar URN_IETF_PARAMS_OAUTH_GRANT_TYPE_JWT_BEARER: "urn:ietf:params:oauth:grant-type:jwt-bearer"
    :vartype URN_IETF_PARAMS_OAUTH_GRANT_TYPE_JWT_BEARER: str
    :cvar URN_IETF_PARAMS_OAUTH_GRANT_TYPE_DEVICE_CODE: "urn:ietf:params:oauth:grant-type:device_code"
    :vartype URN_IETF_PARAMS_OAUTH_GRANT_TYPE_DEVICE_CODE: str
    :cvar DEVICE_CERTIFICATE: "device_certificate"
    :vartype DEVICE_CERTIFICATE: str
    :cvar PARTNER_JWT: "partner_jwt"
    :vartype PARTNER_JWT: str
    :cvar GUEST: "guest"
    :vartype GUEST: str
    :cvar PERSONAL_JWT: "personal_jwt"
    :vartype PERSONAL_JWT: str
    :cvar OTP: "otp"
    :vartype OTP: str
    :cvar IVR_PIN: "ivr_pin"
    :vartype IVR_PIN: str
    """

    AUTHORIZATION_CODE = "authorization_code"
    PASSWORD = "password"
    REFRESH_TOKEN = "refresh_token"
    CLIENT_CREDENTIALS = "client_credentials"
    URN_IETF_PARAMS_OAUTH_GRANT_TYPE_JWT_BEARER = (
        "urn:ietf:params:oauth:grant-type:jwt-bearer"
    )
    URN_IETF_PARAMS_OAUTH_GRANT_TYPE_DEVICE_CODE = (
        "urn:ietf:params:oauth:grant-type:device_code"
    )
    DEVICE_CERTIFICATE = "device_certificate"
    PARTNER_JWT = "partner_jwt"
    GUEST = "guest"
    PERSONAL_JWT = "personal_jwt"
    OTP = "otp"
    IVR_PIN = "ivr_pin"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, GetTokenRequest7_1GrantType._member_map_.values())
        )


class GetTokenRequest7_1ClientAssertionType(Enum):
    """An enumeration representing different categories.

    :cvar URN_IETF_PARAMS_OAUTH_CLIENT_ASSERTION_TYPE_JWT_BEARER: "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
    :vartype URN_IETF_PARAMS_OAUTH_CLIENT_ASSERTION_TYPE_JWT_BEARER: str
    """

    URN_IETF_PARAMS_OAUTH_CLIENT_ASSERTION_TYPE_JWT_BEARER = (
        "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
    )

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                GetTokenRequest7_1ClientAssertionType._member_map_.values(),
            )
        )


@JsonMap({})
class GetTokenRequest7_1(BaseModel):
    """GetTokenRequest7_1

    :param account_id: RingCentral internal account ID
    :type account_id: str
    :param grant_type: Grant type
    :type grant_type: GetTokenRequest7_1GrantType
    :param client_assertion_type: Client assertion type for the `client_secret_jwt` or `private_key_jwt` client authentication types,<br>as defined by [RFC-7523](https://datatracker.ietf.org/doc/html/rfc7523#section-2.2).<br>This parameter is mandatory if the client authentication is required and a client decided to use one of these authentication types<br>, defaults to None
    :type client_assertion_type: GetTokenRequest7_1ClientAssertionType, optional
    :param client_assertion: Client assertion (JWT) for the `client_secret_jwt` or `private_key_jwt` client authentication types,<br>as defined by [RFC-7523](https://datatracker.ietf.org/doc/html/rfc7523#section-2.2).<br>This parameter is mandatory if the client authentication is required and a client decided to use one of these authentication types<br>, defaults to None
    :type client_assertion: str, optional
    :param scope: The list of application permissions (OAuth scopes) requested.<br>By default, it includes all permissions configured on<br>the client application registration<br>, defaults to None
    :type scope: str, optional
    :param client_id: The registered identifier of a client application.<br>Used to identify a client ONLY if the client authentication is not required and<br>corresponding credentials are not provided with this request<br>, defaults to None
    :type client_id: str, optional
    :param endpoint_id: The unique identifier of a client application instance. If not<br>specified, the derived or auto-generated value will be used<br>, defaults to None
    :type endpoint_id: str, optional
    :param access_token_ttl: Access token lifetime in seconds, defaults to None
    :type access_token_ttl: int, optional
    :param refresh_token_ttl: Refresh token lifetime in seconds, defaults to None
    :type refresh_token_ttl: int, optional
    """

    def __init__(
        self,
        account_id: str,
        grant_type: GetTokenRequest7_1GrantType,
        client_assertion_type: GetTokenRequest7_1ClientAssertionType = None,
        client_assertion: str = None,
        scope: str = None,
        client_id: str = None,
        endpoint_id: str = None,
        access_token_ttl: int = None,
        refresh_token_ttl: int = None,
    ):
        self.account_id = account_id
        self.grant_type = self._enum_matching(
            grant_type, GetTokenRequest7_1GrantType.list(), "grant_type"
        )
        if client_assertion_type is not None:
            self.client_assertion_type = self._enum_matching(
                client_assertion_type,
                GetTokenRequest7_1ClientAssertionType.list(),
                "client_assertion_type",
            )
        if client_assertion is not None:
            self.client_assertion = client_assertion
        if scope is not None:
            self.scope = scope
        if client_id is not None:
            self.client_id = client_id
        if endpoint_id is not None:
            self.endpoint_id = endpoint_id
        if access_token_ttl is not None:
            self.access_token_ttl = access_token_ttl
        if refresh_token_ttl is not None:
            self.refresh_token_ttl = refresh_token_ttl


class GetTokenRequest7_2GrantType(Enum):
    """An enumeration representing different categories.

    :cvar AUTHORIZATION_CODE: "authorization_code"
    :vartype AUTHORIZATION_CODE: str
    :cvar PASSWORD: "password"
    :vartype PASSWORD: str
    :cvar REFRESH_TOKEN: "refresh_token"
    :vartype REFRESH_TOKEN: str
    :cvar CLIENT_CREDENTIALS: "client_credentials"
    :vartype CLIENT_CREDENTIALS: str
    :cvar URN_IETF_PARAMS_OAUTH_GRANT_TYPE_JWT_BEARER: "urn:ietf:params:oauth:grant-type:jwt-bearer"
    :vartype URN_IETF_PARAMS_OAUTH_GRANT_TYPE_JWT_BEARER: str
    :cvar URN_IETF_PARAMS_OAUTH_GRANT_TYPE_DEVICE_CODE: "urn:ietf:params:oauth:grant-type:device_code"
    :vartype URN_IETF_PARAMS_OAUTH_GRANT_TYPE_DEVICE_CODE: str
    :cvar DEVICE_CERTIFICATE: "device_certificate"
    :vartype DEVICE_CERTIFICATE: str
    :cvar PARTNER_JWT: "partner_jwt"
    :vartype PARTNER_JWT: str
    :cvar GUEST: "guest"
    :vartype GUEST: str
    :cvar PERSONAL_JWT: "personal_jwt"
    :vartype PERSONAL_JWT: str
    :cvar OTP: "otp"
    :vartype OTP: str
    :cvar IVR_PIN: "ivr_pin"
    :vartype IVR_PIN: str
    """

    AUTHORIZATION_CODE = "authorization_code"
    PASSWORD = "password"
    REFRESH_TOKEN = "refresh_token"
    CLIENT_CREDENTIALS = "client_credentials"
    URN_IETF_PARAMS_OAUTH_GRANT_TYPE_JWT_BEARER = (
        "urn:ietf:params:oauth:grant-type:jwt-bearer"
    )
    URN_IETF_PARAMS_OAUTH_GRANT_TYPE_DEVICE_CODE = (
        "urn:ietf:params:oauth:grant-type:device_code"
    )
    DEVICE_CERTIFICATE = "device_certificate"
    PARTNER_JWT = "partner_jwt"
    GUEST = "guest"
    PERSONAL_JWT = "personal_jwt"
    OTP = "otp"
    IVR_PIN = "ivr_pin"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, GetTokenRequest7_2GrantType._member_map_.values())
        )


class GetTokenRequest7_2ClientAssertionType(Enum):
    """An enumeration representing different categories.

    :cvar URN_IETF_PARAMS_OAUTH_CLIENT_ASSERTION_TYPE_JWT_BEARER: "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
    :vartype URN_IETF_PARAMS_OAUTH_CLIENT_ASSERTION_TYPE_JWT_BEARER: str
    """

    URN_IETF_PARAMS_OAUTH_CLIENT_ASSERTION_TYPE_JWT_BEARER = (
        "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
    )

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                GetTokenRequest7_2ClientAssertionType._member_map_.values(),
            )
        )


@JsonMap({})
class GetTokenRequest7_2(BaseModel):
    """GetTokenRequest7_2

    :param partner_account_id: The ID of the account on RingCentral partner's side, defaults to None
    :type partner_account_id: str, optional
    :param brand_id: RingCentral Brand identifier.
    :type brand_id: str
    :param grant_type: Grant type
    :type grant_type: GetTokenRequest7_2GrantType
    :param client_assertion_type: Client assertion type for the `client_secret_jwt` or `private_key_jwt` client authentication types,<br>as defined by [RFC-7523](https://datatracker.ietf.org/doc/html/rfc7523#section-2.2).<br>This parameter is mandatory if the client authentication is required and a client decided to use one of these authentication types<br>, defaults to None
    :type client_assertion_type: GetTokenRequest7_2ClientAssertionType, optional
    :param client_assertion: Client assertion (JWT) for the `client_secret_jwt` or `private_key_jwt` client authentication types,<br>as defined by [RFC-7523](https://datatracker.ietf.org/doc/html/rfc7523#section-2.2).<br>This parameter is mandatory if the client authentication is required and a client decided to use one of these authentication types<br>, defaults to None
    :type client_assertion: str, optional
    :param scope: The list of application permissions (OAuth scopes) requested.<br>By default, it includes all permissions configured on<br>the client application registration<br>, defaults to None
    :type scope: str, optional
    :param client_id: The registered identifier of a client application.<br>Used to identify a client ONLY if the client authentication is not required and<br>corresponding credentials are not provided with this request<br>, defaults to None
    :type client_id: str, optional
    :param endpoint_id: The unique identifier of a client application instance. If not<br>specified, the derived or auto-generated value will be used<br>, defaults to None
    :type endpoint_id: str, optional
    :param access_token_ttl: Access token lifetime in seconds, defaults to None
    :type access_token_ttl: int, optional
    :param refresh_token_ttl: Refresh token lifetime in seconds, defaults to None
    :type refresh_token_ttl: int, optional
    """

    def __init__(
        self,
        brand_id: str,
        grant_type: GetTokenRequest7_2GrantType,
        partner_account_id: str = None,
        client_assertion_type: GetTokenRequest7_2ClientAssertionType = None,
        client_assertion: str = None,
        scope: str = None,
        client_id: str = None,
        endpoint_id: str = None,
        access_token_ttl: int = None,
        refresh_token_ttl: int = None,
    ):
        if partner_account_id is not None:
            self.partner_account_id = partner_account_id
        self.brand_id = brand_id
        self.grant_type = self._enum_matching(
            grant_type, GetTokenRequest7_2GrantType.list(), "grant_type"
        )
        if client_assertion_type is not None:
            self.client_assertion_type = self._enum_matching(
                client_assertion_type,
                GetTokenRequest7_2ClientAssertionType.list(),
                "client_assertion_type",
            )
        if client_assertion is not None:
            self.client_assertion = client_assertion
        if scope is not None:
            self.scope = scope
        if client_id is not None:
            self.client_id = client_id
        if endpoint_id is not None:
            self.endpoint_id = endpoint_id
        if access_token_ttl is not None:
            self.access_token_ttl = access_token_ttl
        if refresh_token_ttl is not None:
            self.refresh_token_ttl = refresh_token_ttl


class GetTokenRequest7Guard(OneOfBaseModel):
    class_list = {
        "GetTokenRequest7_1": GetTokenRequest7_1,
        "GetTokenRequest7_2": GetTokenRequest7_2,
    }


GetTokenRequest7 = Union[GetTokenRequest7_1, GetTokenRequest7_2]


class GetTokenRequest8GrantType(Enum):
    """An enumeration representing different categories.

    :cvar AUTHORIZATION_CODE: "authorization_code"
    :vartype AUTHORIZATION_CODE: str
    :cvar PASSWORD: "password"
    :vartype PASSWORD: str
    :cvar REFRESH_TOKEN: "refresh_token"
    :vartype REFRESH_TOKEN: str
    :cvar CLIENT_CREDENTIALS: "client_credentials"
    :vartype CLIENT_CREDENTIALS: str
    :cvar URN_IETF_PARAMS_OAUTH_GRANT_TYPE_JWT_BEARER: "urn:ietf:params:oauth:grant-type:jwt-bearer"
    :vartype URN_IETF_PARAMS_OAUTH_GRANT_TYPE_JWT_BEARER: str
    :cvar URN_IETF_PARAMS_OAUTH_GRANT_TYPE_DEVICE_CODE: "urn:ietf:params:oauth:grant-type:device_code"
    :vartype URN_IETF_PARAMS_OAUTH_GRANT_TYPE_DEVICE_CODE: str
    :cvar DEVICE_CERTIFICATE: "device_certificate"
    :vartype DEVICE_CERTIFICATE: str
    :cvar PARTNER_JWT: "partner_jwt"
    :vartype PARTNER_JWT: str
    :cvar GUEST: "guest"
    :vartype GUEST: str
    :cvar PERSONAL_JWT: "personal_jwt"
    :vartype PERSONAL_JWT: str
    :cvar OTP: "otp"
    :vartype OTP: str
    :cvar IVR_PIN: "ivr_pin"
    :vartype IVR_PIN: str
    """

    AUTHORIZATION_CODE = "authorization_code"
    PASSWORD = "password"
    REFRESH_TOKEN = "refresh_token"
    CLIENT_CREDENTIALS = "client_credentials"
    URN_IETF_PARAMS_OAUTH_GRANT_TYPE_JWT_BEARER = (
        "urn:ietf:params:oauth:grant-type:jwt-bearer"
    )
    URN_IETF_PARAMS_OAUTH_GRANT_TYPE_DEVICE_CODE = (
        "urn:ietf:params:oauth:grant-type:device_code"
    )
    DEVICE_CERTIFICATE = "device_certificate"
    PARTNER_JWT = "partner_jwt"
    GUEST = "guest"
    PERSONAL_JWT = "personal_jwt"
    OTP = "otp"
    IVR_PIN = "ivr_pin"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, GetTokenRequest8GrantType._member_map_.values())
        )


class GetTokenRequest8ClientAssertionType(Enum):
    """An enumeration representing different categories.

    :cvar URN_IETF_PARAMS_OAUTH_CLIENT_ASSERTION_TYPE_JWT_BEARER: "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
    :vartype URN_IETF_PARAMS_OAUTH_CLIENT_ASSERTION_TYPE_JWT_BEARER: str
    """

    URN_IETF_PARAMS_OAUTH_CLIENT_ASSERTION_TYPE_JWT_BEARER = (
        "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
    )

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                GetTokenRequest8ClientAssertionType._member_map_.values(),
            )
        )


@JsonMap({})
class GetTokenRequest8(BaseModel):
    """GetTokenRequest8

    :param grant_type: Grant type
    :type grant_type: GetTokenRequest8GrantType
    :param code: For `otp` grant type only.<br>One-time password code<br>, defaults to None
    :type code: str, optional
    :param client_assertion_type: Client assertion type for the `client_secret_jwt` or `private_key_jwt` client authentication types,<br>as defined by [RFC-7523](https://datatracker.ietf.org/doc/html/rfc7523#section-2.2).<br>This parameter is mandatory if the client authentication is required and a client decided to use one of these authentication types<br>, defaults to None
    :type client_assertion_type: GetTokenRequest8ClientAssertionType, optional
    :param client_assertion: Client assertion (JWT) for the `client_secret_jwt` or `private_key_jwt` client authentication types,<br>as defined by [RFC-7523](https://datatracker.ietf.org/doc/html/rfc7523#section-2.2).<br>This parameter is mandatory if the client authentication is required and a client decided to use one of these authentication types<br>, defaults to None
    :type client_assertion: str, optional
    :param scope: The list of application permissions (OAuth scopes) requested.<br>By default, it includes all permissions configured on<br>the client application registration<br>, defaults to None
    :type scope: str, optional
    :param client_id: The registered identifier of a client application.<br>Used to identify a client ONLY if the client authentication is not required and<br>corresponding credentials are not provided with this request<br>, defaults to None
    :type client_id: str, optional
    :param endpoint_id: The unique identifier of a client application instance. If not<br>specified, the derived or auto-generated value will be used<br>, defaults to None
    :type endpoint_id: str, optional
    :param access_token_ttl: Access token lifetime in seconds, defaults to None
    :type access_token_ttl: int, optional
    :param refresh_token_ttl: Refresh token lifetime in seconds, defaults to None
    :type refresh_token_ttl: int, optional
    """

    def __init__(
        self,
        grant_type: GetTokenRequest8GrantType,
        code: str = None,
        client_assertion_type: GetTokenRequest8ClientAssertionType = None,
        client_assertion: str = None,
        scope: str = None,
        client_id: str = None,
        endpoint_id: str = None,
        access_token_ttl: int = None,
        refresh_token_ttl: int = None,
    ):
        self.grant_type = self._enum_matching(
            grant_type, GetTokenRequest8GrantType.list(), "grant_type"
        )
        if code is not None:
            self.code = code
        if client_assertion_type is not None:
            self.client_assertion_type = self._enum_matching(
                client_assertion_type,
                GetTokenRequest8ClientAssertionType.list(),
                "client_assertion_type",
            )
        if client_assertion is not None:
            self.client_assertion = client_assertion
        if scope is not None:
            self.scope = scope
        if client_id is not None:
            self.client_id = client_id
        if endpoint_id is not None:
            self.endpoint_id = endpoint_id
        if access_token_ttl is not None:
            self.access_token_ttl = access_token_ttl
        if refresh_token_ttl is not None:
            self.refresh_token_ttl = refresh_token_ttl


class GetTokenRequest9GrantType(Enum):
    """An enumeration representing different categories.

    :cvar AUTHORIZATION_CODE: "authorization_code"
    :vartype AUTHORIZATION_CODE: str
    :cvar PASSWORD: "password"
    :vartype PASSWORD: str
    :cvar REFRESH_TOKEN: "refresh_token"
    :vartype REFRESH_TOKEN: str
    :cvar CLIENT_CREDENTIALS: "client_credentials"
    :vartype CLIENT_CREDENTIALS: str
    :cvar URN_IETF_PARAMS_OAUTH_GRANT_TYPE_JWT_BEARER: "urn:ietf:params:oauth:grant-type:jwt-bearer"
    :vartype URN_IETF_PARAMS_OAUTH_GRANT_TYPE_JWT_BEARER: str
    :cvar URN_IETF_PARAMS_OAUTH_GRANT_TYPE_DEVICE_CODE: "urn:ietf:params:oauth:grant-type:device_code"
    :vartype URN_IETF_PARAMS_OAUTH_GRANT_TYPE_DEVICE_CODE: str
    :cvar DEVICE_CERTIFICATE: "device_certificate"
    :vartype DEVICE_CERTIFICATE: str
    :cvar PARTNER_JWT: "partner_jwt"
    :vartype PARTNER_JWT: str
    :cvar GUEST: "guest"
    :vartype GUEST: str
    :cvar PERSONAL_JWT: "personal_jwt"
    :vartype PERSONAL_JWT: str
    :cvar OTP: "otp"
    :vartype OTP: str
    :cvar IVR_PIN: "ivr_pin"
    :vartype IVR_PIN: str
    """

    AUTHORIZATION_CODE = "authorization_code"
    PASSWORD = "password"
    REFRESH_TOKEN = "refresh_token"
    CLIENT_CREDENTIALS = "client_credentials"
    URN_IETF_PARAMS_OAUTH_GRANT_TYPE_JWT_BEARER = (
        "urn:ietf:params:oauth:grant-type:jwt-bearer"
    )
    URN_IETF_PARAMS_OAUTH_GRANT_TYPE_DEVICE_CODE = (
        "urn:ietf:params:oauth:grant-type:device_code"
    )
    DEVICE_CERTIFICATE = "device_certificate"
    PARTNER_JWT = "partner_jwt"
    GUEST = "guest"
    PERSONAL_JWT = "personal_jwt"
    OTP = "otp"
    IVR_PIN = "ivr_pin"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, GetTokenRequest9GrantType._member_map_.values())
        )


class GetTokenRequest9ClientAssertionType(Enum):
    """An enumeration representing different categories.

    :cvar URN_IETF_PARAMS_OAUTH_CLIENT_ASSERTION_TYPE_JWT_BEARER: "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
    :vartype URN_IETF_PARAMS_OAUTH_CLIENT_ASSERTION_TYPE_JWT_BEARER: str
    """

    URN_IETF_PARAMS_OAUTH_CLIENT_ASSERTION_TYPE_JWT_BEARER = (
        "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
    )

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                GetTokenRequest9ClientAssertionType._member_map_.values(),
            )
        )


@JsonMap({})
class GetTokenRequest9(BaseModel):
    """GetTokenRequest9

    :param grant_type: Grant type
    :type grant_type: GetTokenRequest9GrantType
    :param brand_id: RingCentral Brand identifier., defaults to None
    :type brand_id: str, optional
    :param resource_type: Resource type for the guest access., defaults to None
    :type resource_type: str, optional
    :param resource: Resource URL for the guest access., defaults to None
    :type resource: str, optional
    :param client_assertion_type: Client assertion type for the `client_secret_jwt` or `private_key_jwt` client authentication types,<br>as defined by [RFC-7523](https://datatracker.ietf.org/doc/html/rfc7523#section-2.2).<br>This parameter is mandatory if the client authentication is required and a client decided to use one of these authentication types<br>, defaults to None
    :type client_assertion_type: GetTokenRequest9ClientAssertionType, optional
    :param client_assertion: Client assertion (JWT) for the `client_secret_jwt` or `private_key_jwt` client authentication types,<br>as defined by [RFC-7523](https://datatracker.ietf.org/doc/html/rfc7523#section-2.2).<br>This parameter is mandatory if the client authentication is required and a client decided to use one of these authentication types<br>, defaults to None
    :type client_assertion: str, optional
    :param scope: The list of application permissions (OAuth scopes) requested.<br>By default, it includes all permissions configured on<br>the client application registration<br>, defaults to None
    :type scope: str, optional
    :param client_id: The registered identifier of a client application.<br>Used to identify a client ONLY if the client authentication is not required and<br>corresponding credentials are not provided with this request<br>, defaults to None
    :type client_id: str, optional
    :param endpoint_id: The unique identifier of a client application instance. If not<br>specified, the derived or auto-generated value will be used<br>, defaults to None
    :type endpoint_id: str, optional
    :param access_token_ttl: Access token lifetime in seconds, defaults to None
    :type access_token_ttl: int, optional
    :param refresh_token_ttl: Refresh token lifetime in seconds, defaults to None
    :type refresh_token_ttl: int, optional
    """

    def __init__(
        self,
        grant_type: GetTokenRequest9GrantType,
        brand_id: str = None,
        resource_type: str = None,
        resource: str = None,
        client_assertion_type: GetTokenRequest9ClientAssertionType = None,
        client_assertion: str = None,
        scope: str = None,
        client_id: str = None,
        endpoint_id: str = None,
        access_token_ttl: int = None,
        refresh_token_ttl: int = None,
    ):
        self.grant_type = self._enum_matching(
            grant_type, GetTokenRequest9GrantType.list(), "grant_type"
        )
        if brand_id is not None:
            self.brand_id = brand_id
        if resource_type is not None:
            self.resource_type = resource_type
        if resource is not None:
            self.resource = resource
        if client_assertion_type is not None:
            self.client_assertion_type = self._enum_matching(
                client_assertion_type,
                GetTokenRequest9ClientAssertionType.list(),
                "client_assertion_type",
            )
        if client_assertion is not None:
            self.client_assertion = client_assertion
        if scope is not None:
            self.scope = scope
        if client_id is not None:
            self.client_id = client_id
        if endpoint_id is not None:
            self.endpoint_id = endpoint_id
        if access_token_ttl is not None:
            self.access_token_ttl = access_token_ttl
        if refresh_token_ttl is not None:
            self.refresh_token_ttl = refresh_token_ttl


class GetTokenRequestGuard(OneOfBaseModel):
    class_list = {
        "GetTokenRequest1": GetTokenRequest1,
        "GetTokenRequest2": GetTokenRequest2,
        "GetTokenRequest3": GetTokenRequest3,
        "GetTokenRequest4": GetTokenRequest4,
        "GetTokenRequest5": GetTokenRequest5,
        "GetTokenRequest6": GetTokenRequest6,
        "GetTokenRequest7_1": GetTokenRequest7_1,
        "GetTokenRequest7_2": GetTokenRequest7_2,
        "GetTokenRequest8": GetTokenRequest8,
        "GetTokenRequest9": GetTokenRequest9,
    }


GetTokenRequest = Union[
    GetTokenRequest1,
    GetTokenRequest2,
    GetTokenRequest3,
    GetTokenRequest4,
    GetTokenRequest5,
    GetTokenRequest6,
    GetTokenRequest7_1,
    GetTokenRequest7_2,
    GetTokenRequest8,
    GetTokenRequest9,
]
