# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .pager_caller_info_request import PagerCallerInfoRequest


@JsonMap({"from_": "from", "reply_on": "replyOn"})
class CreateInternalTextMessageRequest(BaseModel):
    """CreateInternalTextMessageRequest

    :param from_: Sender of a pager message., defaults to None
    :type from_: PagerCallerInfoRequest, optional
    :param reply_on: Internal identifier of a message this message replies to, defaults to None
    :type reply_on: int, optional
    :param text: Text of a pager message. Max length is 1024 symbols (2-byte<br>UTF-16 encoded). If a character is encoded in 4 bytes in UTF-16 it is<br>treated as 2 characters, thus restricting the maximum message length to<br>512 symbols<br>
    :type text: str
    :param to: Optional if `replyOn` parameter is specified. Receiver of a pager<br>message.<br>, defaults to None
    :type to: List[PagerCallerInfoRequest], optional
    """

    def __init__(
        self,
        text: str,
        from_: PagerCallerInfoRequest = None,
        reply_on: int = None,
        to: List[PagerCallerInfoRequest] = None,
    ):
        if from_ is not None:
            self.from_ = self._define_object(from_, PagerCallerInfoRequest)
        if reply_on is not None:
            self.reply_on = reply_on
        self.text = text
        if to is not None:
            self.to = self._define_list(to, PagerCallerInfoRequest)
