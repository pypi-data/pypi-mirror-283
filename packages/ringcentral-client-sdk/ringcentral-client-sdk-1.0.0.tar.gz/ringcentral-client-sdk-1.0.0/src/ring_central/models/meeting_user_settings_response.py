# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .user_meeting_recording_setting import UserMeetingRecordingSetting
from .schedule_user_meeting_info import ScheduleUserMeetingInfo
from .telephony_user_meeting_settings import TelephonyUserMeetingSettings
from .user_in_meeting_response import UserInMeetingResponse


@JsonMap({"schedule_meeting": "scheduleMeeting", "in_meetings": "inMeetings"})
class MeetingUserSettingsResponse(BaseModel):
    """MeetingUserSettingsResponse

    :param recording: Meeting recording settings locked on account level, defaults to None
    :type recording: UserMeetingRecordingSetting, optional
    :param schedule_meeting: Scheduling meeting settings locked on account level \|\| Settings defining how to schedule user meetings, defaults to None
    :type schedule_meeting: ScheduleUserMeetingInfo, optional
    :param telephony: telephony, defaults to None
    :type telephony: TelephonyUserMeetingSettings, optional
    :param in_meetings: in_meetings, defaults to None
    :type in_meetings: UserInMeetingResponse, optional
    """

    def __init__(
        self,
        recording: UserMeetingRecordingSetting = None,
        schedule_meeting: ScheduleUserMeetingInfo = None,
        telephony: TelephonyUserMeetingSettings = None,
        in_meetings: UserInMeetingResponse = None,
    ):
        if recording is not None:
            self.recording = self._define_object(recording, UserMeetingRecordingSetting)
        if schedule_meeting is not None:
            self.schedule_meeting = self._define_object(
                schedule_meeting, ScheduleUserMeetingInfo
            )
        if telephony is not None:
            self.telephony = self._define_object(
                telephony, TelephonyUserMeetingSettings
            )
        if in_meetings is not None:
            self.in_meetings = self._define_object(in_meetings, UserInMeetingResponse)
