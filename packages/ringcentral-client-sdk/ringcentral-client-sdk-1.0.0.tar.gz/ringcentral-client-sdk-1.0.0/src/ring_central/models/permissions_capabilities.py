# This file was generated by liblab | https://liblab.com/

from .utils.json_map import JsonMap
from .base import BaseModel


@JsonMap({"manage_enabled": "manageEnabled", "grant_enabled": "grantEnabled"})
class PermissionsCapabilities(BaseModel):
    """Advanced permissions capabilities. Returned if `advancedPermissions` query parameter is set to `true`.

    :param enabled: Specifies whether the user is enabled with the listed permission or not, defaults to None
    :type enabled: bool, optional
    :param manage_enabled: Specifies if the user can manage the listed permission and is allowed to enable it on other users, defaults to None
    :type manage_enabled: bool, optional
    :param grant_enabled: Specifies if the users who were enabled with the listed permission can grant it further to other users, defaults to None
    :type grant_enabled: bool, optional
    """

    def __init__(
        self,
        enabled: bool = None,
        manage_enabled: bool = None,
        grant_enabled: bool = None,
    ):
        if enabled is not None:
            self.enabled = enabled
        if manage_enabled is not None:
            self.manage_enabled = manage_enabled
        if grant_enabled is not None:
            self.grant_enabled = grant_enabled
