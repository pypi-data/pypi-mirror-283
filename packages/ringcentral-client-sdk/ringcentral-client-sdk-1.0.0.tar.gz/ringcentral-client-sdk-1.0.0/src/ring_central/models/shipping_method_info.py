# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class Id(Enum):
    """An enumeration representing different categories.

    :cvar _1: "1"
    :vartype _1: str
    :cvar _2: "2"
    :vartype _2: str
    :cvar _3: "3"
    :vartype _3: str
    """

    _1 = "1"
    _2 = "2"
    _3 = "3"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, Id._member_map_.values()))


class ShippingMethodInfoName(Enum):
    """An enumeration representing different categories.

    :cvar GROUND: "Ground"
    :vartype GROUND: str
    :cvar _2_DAY: "2 Day"
    :vartype _2_DAY: str
    :cvar OVERNIGHT: "Overnight"
    :vartype OVERNIGHT: str
    """

    GROUND = "Ground"
    _2_DAY = "2 Day"
    OVERNIGHT = "Overnight"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, ShippingMethodInfoName._member_map_.values())
        )


@JsonMap({"id_": "id"})
class ShippingMethodInfo(BaseModel):
    """ShippingMethodInfo

    :param id_: Shipping method ID:<br>- "1" - Ground Shipping (5-7 business days)<br>- "2" - Expedited Shipping (2-days)<br>- "3" - Overnight Shipping<br>
    :type id_: Id
    :param name: Method name, corresponding to the identifier, defaults to None
    :type name: ShippingMethodInfoName, optional
    """

    def __init__(self, id_: Id, name: ShippingMethodInfoName = None):
        self.id_ = self._enum_matching(id_, Id.list(), "id_")
        if name is not None:
            self.name = self._enum_matching(name, ShippingMethodInfoName.list(), "name")
