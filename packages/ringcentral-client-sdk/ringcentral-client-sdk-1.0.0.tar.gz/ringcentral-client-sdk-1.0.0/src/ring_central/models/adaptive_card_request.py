# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import Union
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .base import OneOfBaseModel
from .adaptive_card_info_request import AdaptiveCardInfoRequest
from .adaptive_card_action import AdaptiveCardAction
from .adaptive_card_select_action import AdaptiveCardSelectAction
from .vertical_content_alignment import (
    VerticalContentAlignment,
    VerticalContentAlignmentGuard,
)
from .background_image import BackgroundImage


class AdaptiveCardRequestType(Enum):
    """An enumeration representing different categories.

    :cvar ADAPTIVECARD: "AdaptiveCard"
    :vartype ADAPTIVECARD: str
    """

    ADAPTIVECARD = "AdaptiveCard"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, AdaptiveCardRequestType._member_map_.values())
        )


class AdaptiveCardRequestBackgroundImageGuard(OneOfBaseModel):
    class_list = {"str": str, "BackgroundImage": BackgroundImage}


AdaptiveCardRequestBackgroundImage = Union[str, BackgroundImage]


class AdaptiveCardRequestLang(Enum):
    """An enumeration representing different categories.

    :cvar EN: "en"
    :vartype EN: str
    :cvar FR: "fr"
    :vartype FR: str
    :cvar ES: "es"
    :vartype ES: str
    """

    EN = "en"
    FR = "fr"
    ES = "es"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, AdaptiveCardRequestLang._member_map_.values())
        )


@JsonMap(
    {
        "type_": "type",
        "select_action": "selectAction",
        "fallback_text": "fallbackText",
        "background_image": "backgroundImage",
        "min_height": "minHeight",
        "vertical_content_alignment": "verticalContentAlignment",
    }
)
class AdaptiveCardRequest(BaseModel):
    """AdaptiveCardRequest

    :param type_: Type of attachment. This field is mandatory and filled on server side -<br>will be ignored if set in request body<br>
    :type type_: AdaptiveCardRequestType
    :param version: Version. This field is mandatory and filled on server side -<br>will be ignored if set in request body<br>
    :type version: str
    :param body: List of adaptive cards with the detailed information, defaults to None
    :type body: List[AdaptiveCardInfoRequest], optional
    :param actions: actions, defaults to None
    :type actions: List[AdaptiveCardAction], optional
    :param select_action: An action that will be invoked when the card is tapped or selected. `Action.ShowCard` is not supported, defaults to None
    :type select_action: AdaptiveCardSelectAction, optional
    :param fallback_text: fallback_text, defaults to None
    :type fallback_text: str, optional
    :param background_image: Specifies the background image of a card, defaults to None
    :type background_image: AdaptiveCardRequestBackgroundImage, optional
    :param min_height: Specifies the minimum height of the card in pixels, defaults to None
    :type min_height: str, optional
    :param speak: Specifies what should be spoken for this entire card. This is simple text or SSML fragment, defaults to None
    :type speak: str, optional
    :param lang: The 2-letter ISO-639-1 language used in the card. Used to localize any date/time functions, defaults to None
    :type lang: AdaptiveCardRequestLang, optional
    :param vertical_content_alignment: Defines how the content should be aligned vertically within the container. Only relevant for fixed-height cards, or cards with a `minHeight` specified, defaults to None
    :type vertical_content_alignment: VerticalContentAlignment, optional
    """

    def __init__(
        self,
        type_: AdaptiveCardRequestType,
        version: str,
        body: List[AdaptiveCardInfoRequest] = None,
        actions: List[AdaptiveCardAction] = None,
        select_action: AdaptiveCardSelectAction = None,
        fallback_text: str = None,
        background_image: AdaptiveCardRequestBackgroundImage = None,
        min_height: str = None,
        speak: str = None,
        lang: AdaptiveCardRequestLang = None,
        vertical_content_alignment: VerticalContentAlignment = None,
    ):
        self.type_ = self._enum_matching(type_, AdaptiveCardRequestType.list(), "type_")
        self.version = version
        if body is not None:
            self.body = self._define_list(body, AdaptiveCardInfoRequest)
        if actions is not None:
            self.actions = self._define_list(actions, AdaptiveCardAction)
        if select_action is not None:
            self.select_action = self._define_object(
                select_action, AdaptiveCardSelectAction
            )
        if fallback_text is not None:
            self.fallback_text = fallback_text
        if background_image is not None:
            self.background_image = (
                AdaptiveCardRequestBackgroundImageGuard.return_one_of(background_image)
            )
        if min_height is not None:
            self.min_height = min_height
        if speak is not None:
            self.speak = speak
        if lang is not None:
            self.lang = self._enum_matching(
                lang, AdaptiveCardRequestLang.list(), "lang"
            )
        if vertical_content_alignment is not None:
            self.vertical_content_alignment = (
                VerticalContentAlignmentGuard.return_one_of(vertical_content_alignment)
            )
