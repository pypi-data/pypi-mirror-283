# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class PronouncedNamePromptInfoContentType(Enum):
    """An enumeration representing different categories.

    :cvar AUDIO_MPEG: "audio/mpeg"
    :vartype AUDIO_MPEG: str
    :cvar AUDIO_WAV: "audio/wav"
    :vartype AUDIO_WAV: str
    """

    AUDIO_MPEG = "audio/mpeg"
    AUDIO_WAV = "audio/wav"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                PronouncedNamePromptInfoContentType._member_map_.values(),
            )
        )


@JsonMap({"id_": "id", "content_uri": "contentUri", "content_type": "contentType"})
class PronouncedNamePromptInfo(BaseModel):
    """PronouncedNamePromptInfo

    :param id_: id_, defaults to None
    :type id_: str, optional
    :param content_uri: Link to a prompt resource, defaults to None
    :type content_uri: str, optional
    :param content_type: Content media type, defaults to None
    :type content_type: PronouncedNamePromptInfoContentType, optional
    """

    def __init__(
        self,
        id_: str = None,
        content_uri: str = None,
        content_type: PronouncedNamePromptInfoContentType = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if content_uri is not None:
            self.content_uri = content_uri
        if content_type is not None:
            self.content_type = self._enum_matching(
                content_type, PronouncedNamePromptInfoContentType.list(), "content_type"
            )
