# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .time_range import TimeRange
from .advanced_time_settings import AdvancedTimeSettings


@JsonMap(
    {
        "time_zone": "timeZone",
        "time_range": "timeRange",
        "advanced_time_settings": "advancedTimeSettings",
    }
)
class TimeSettings(BaseModel):
    """Date-time range for the calls. The call is considered to be within time range if it started within time range. Both borders are inclusive

    :param time_zone: Name of the timezone that will be used for `includeDays` and `includeHours` filters and aggregation intervals. For example 'America/Los_Angeles', 'Europe/Zurich'. See also *[Time Zones](https://www.iana.org/time-zones)*. Value in this field doesn't affect interpretation of time in `timeRange`, as it already includes offset from UTC
    :type time_zone: str
    :param time_range: Time range for the request
    :type time_range: TimeRange
    :param advanced_time_settings: Allows more granular control over time included in the report, defaults to None
    :type advanced_time_settings: AdvancedTimeSettings, optional
    """

    def __init__(
        self,
        time_zone: str,
        time_range: TimeRange,
        advanced_time_settings: AdvancedTimeSettings = None,
    ):
        self.time_zone = time_zone
        self.time_range = self._define_object(time_range, TimeRange)
        if advanced_time_settings is not None:
            self.advanced_time_settings = self._define_object(
                advanced_time_settings, AdvancedTimeSettings
            )
