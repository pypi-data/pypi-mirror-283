# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class AddDeviceToInventoryRequestType(Enum):
    """An enumeration representing different categories.

    :cvar OTHERPHONE: "OtherPhone"
    :vartype OTHERPHONE: str
    """

    OTHERPHONE = "OtherPhone"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value, AddDeviceToInventoryRequestType._member_map_.values()
            )
        )


@JsonMap({"id_": "id"})
class AddDeviceToInventoryRequestSite(BaseModel):
    """AddDeviceToInventoryRequestSite

    :param id_: Site extension identifier or "main-site" for the main site, defaults to None
    :type id_: str, optional
    """

    def __init__(self, id_: str = None):
        if id_ is not None:
            self.id_ = id_


@JsonMap({"type_": "type"})
class AddDeviceToInventoryRequest(BaseModel):
    """AddDeviceToInventoryRequest

    :param type_: Device type. Use `OtherPhone` to indicate BYOD (customer provided) device<br>
    :type type_: AddDeviceToInventoryRequestType
    :param quantity: Quantity of devices (total quantity should not exceed 50)
    :type quantity: int
    :param site: site, defaults to None
    :type site: AddDeviceToInventoryRequestSite, optional
    """

    def __init__(
        self,
        type_: AddDeviceToInventoryRequestType,
        quantity: int,
        site: AddDeviceToInventoryRequestSite = None,
    ):
        self.type_ = self._enum_matching(
            type_, AddDeviceToInventoryRequestType.list(), "type_"
        )
        self.quantity = quantity
        if site is not None:
            self.site = self._define_object(site, AddDeviceToInventoryRequestSite)
