# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class PrimaryCqInfoType(Enum):
    """An enumeration representing different categories.

    :cvar PHONENUMBERLABEL: "PhoneNumberLabel"
    :vartype PHONENUMBERLABEL: str
    :cvar PHONENUMBER: "PhoneNumber"
    :vartype PHONENUMBER: str
    :cvar QUEUEEXTENSION: "QueueExtension"
    :vartype QUEUEEXTENSION: str
    :cvar QUEUENAME: "QueueName"
    :vartype QUEUENAME: str
    :cvar CALLERIDNAME: "CallerIdName"
    :vartype CALLERIDNAME: str
    :cvar CALLERIDNUMBER: "CallerIdNumber"
    :vartype CALLERIDNUMBER: str
    :cvar NONE: "None"
    :vartype NONE: str
    """

    PHONENUMBERLABEL = "PhoneNumberLabel"
    PHONENUMBER = "PhoneNumber"
    QUEUEEXTENSION = "QueueExtension"
    QUEUENAME = "QueueName"
    CALLERIDNAME = "CallerIdName"
    CALLERIDNUMBER = "CallerIdNumber"
    NONE = "None"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, PrimaryCqInfoType._member_map_.values()))


@JsonMap({"type_": "type"})
class PrimaryCqInfo(BaseModel):
    """Primary call session information. Supported for Call Queues only

    :param type_: Call information to be displayed as 'Line 1' for a call queue call session, defaults to None
    :type type_: PrimaryCqInfoType, optional
    :param value: Call information value, defaults to None
    :type value: str, optional
    """

    def __init__(self, type_: PrimaryCqInfoType = None, value: str = None):
        if type_ is not None:
            self.type_ = self._enum_matching(type_, PrimaryCqInfoType.list(), "type_")
        if value is not None:
            self.value = value
