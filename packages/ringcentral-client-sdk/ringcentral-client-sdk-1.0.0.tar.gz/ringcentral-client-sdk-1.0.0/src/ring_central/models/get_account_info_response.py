# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel
from .account_operator_info import AccountOperatorInfo
from .service_info import ServiceInfo
from .setup_wizard_state_enum import SetupWizardStateEnum
from .signup_info_resource import SignupInfoResource
from .account_status_info import AccountStatusInfo
from .account_regional_settings import AccountRegionalSettings
from .account_limits import AccountLimits


class GetAccountInfoResponseStatus(Enum):
    """An enumeration representing different categories.

    :cvar INITIAL: "Initial"
    :vartype INITIAL: str
    :cvar CONFIRMED: "Confirmed"
    :vartype CONFIRMED: str
    :cvar UNCONFIRMED: "Unconfirmed"
    :vartype UNCONFIRMED: str
    :cvar DISABLED: "Disabled"
    :vartype DISABLED: str
    """

    INITIAL = "Initial"
    CONFIRMED = "Confirmed"
    UNCONFIRMED = "Unconfirmed"
    DISABLED = "Disabled"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, GetAccountInfoResponseStatus._member_map_.values())
        )


@JsonMap(
    {
        "id_": "id",
        "main_number": "mainNumber",
        "partner_id": "partnerId",
        "service_info": "serviceInfo",
        "setup_wizard_state": "setupWizardState",
        "signup_info": "signupInfo",
        "status_info": "statusInfo",
        "regional_settings": "regionalSettings",
        "outbound_call_prefix": "outboundCallPrefix",
    }
)
class GetAccountInfoResponse(BaseModel):
    """GetAccountInfoResponse

    :param id_: Internal identifier of an account, defaults to None
    :type id_: int, optional
    :param uri: Canonical URI of an account, defaults to None
    :type uri: str, optional
    :param bsid: Internal identifier of an account in the billing system<br>, defaults to None
    :type bsid: str, optional
    :param main_number: Main phone number of the current account<br>, defaults to None
    :type main_number: str, optional
    :param operator: Operator extension information. This extension will receive<br>all calls and messages addressed to an operator.<br>, defaults to None
    :type operator: AccountOperatorInfo, optional
    :param partner_id: Additional account identifier, created by partner application<br>and applied on client side<br>, defaults to None
    :type partner_id: str, optional
    :param service_info: Account service information, including brand, sub-brand, service plan and<br>billing plan<br>, defaults to None
    :type service_info: ServiceInfo, optional
    :param setup_wizard_state: Initial configuration wizard state, defaults to None
    :type setup_wizard_state: SetupWizardStateEnum, optional
    :param signup_info: Account sign up data, defaults to None
    :type signup_info: SignupInfoResource, optional
    :param status: Status of the current account, defaults to None
    :type status: GetAccountInfoResponseStatus, optional
    :param status_info: Optional information to be used when account is moved to "Disabled" status, defaults to None
    :type status_info: AccountStatusInfo, optional
    :param regional_settings: Account level region data (web service Auto-Receptionist settings)<br>, defaults to None
    :type regional_settings: AccountRegionalSettings, optional
    :param federated: Specifies whether an account is included into any federation<br>of accounts or not<br>, defaults to None
    :type federated: bool, optional
    :param outbound_call_prefix: If outbound call prefix is not specified, or set to null (0),<br>then the parameter is not returned; the supported value range is 2-9<br>, defaults to None
    :type outbound_call_prefix: int, optional
    :param cfid: Customer facing identifier. Returned for accounts with the<br>turned off PBX features. Equals to main company number in<br>[E.164](https://www.itu.int/rec/T-REC-E.164-201011-I)<br>(without "+" sign)format<br>, defaults to None
    :type cfid: str, optional
    :param limits: Limits which are effective for the account, defaults to None
    :type limits: AccountLimits, optional
    """

    def __init__(
        self,
        id_: int = None,
        uri: str = None,
        bsid: str = None,
        main_number: str = None,
        operator: AccountOperatorInfo = None,
        partner_id: str = None,
        service_info: ServiceInfo = None,
        setup_wizard_state: SetupWizardStateEnum = None,
        signup_info: SignupInfoResource = None,
        status: GetAccountInfoResponseStatus = None,
        status_info: AccountStatusInfo = None,
        regional_settings: AccountRegionalSettings = None,
        federated: bool = None,
        outbound_call_prefix: int = None,
        cfid: str = None,
        limits: AccountLimits = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if uri is not None:
            self.uri = uri
        if bsid is not None:
            self.bsid = bsid
        if main_number is not None:
            self.main_number = main_number
        if operator is not None:
            self.operator = self._define_object(operator, AccountOperatorInfo)
        if partner_id is not None:
            self.partner_id = partner_id
        if service_info is not None:
            self.service_info = self._define_object(service_info, ServiceInfo)
        if setup_wizard_state is not None:
            self.setup_wizard_state = self._enum_matching(
                setup_wizard_state, SetupWizardStateEnum.list(), "setup_wizard_state"
            )
        if signup_info is not None:
            self.signup_info = self._define_object(signup_info, SignupInfoResource)
        if status is not None:
            self.status = self._enum_matching(
                status, GetAccountInfoResponseStatus.list(), "status"
            )
        if status_info is not None:
            self.status_info = self._define_object(status_info, AccountStatusInfo)
        if regional_settings is not None:
            self.regional_settings = self._define_object(
                regional_settings, AccountRegionalSettings
            )
        if federated is not None:
            self.federated = federated
        if outbound_call_prefix is not None:
            self.outbound_call_prefix = outbound_call_prefix
        if cfid is not None:
            self.cfid = cfid
        if limits is not None:
            self.limits = self._define_object(limits, AccountLimits)
