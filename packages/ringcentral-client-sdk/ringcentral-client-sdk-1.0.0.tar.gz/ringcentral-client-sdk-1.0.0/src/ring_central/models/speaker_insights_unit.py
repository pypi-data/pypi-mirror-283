# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .speaker_insights_values_items import SpeakerInsightsValuesItems


class SpeakerInsightsUnitName(Enum):
    """An enumeration representing different categories.

    :cvar ENERGY: "Energy"
    :vartype ENERGY: str
    :cvar PACE: "Pace"
    :vartype PACE: str
    :cvar TALKTOLISTENRATIO: "TalkToListenRatio"
    :vartype TALKTOLISTENRATIO: str
    :cvar QUESTIONSASKED: "QuestionsAsked"
    :vartype QUESTIONSASKED: str
    """

    ENERGY = "Energy"
    PACE = "Pace"
    TALKTOLISTENRATIO = "TalkToListenRatio"
    QUESTIONSASKED = "QuestionsAsked"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, SpeakerInsightsUnitName._member_map_.values())
        )


@JsonMap({})
class SpeakerInsightsUnit(BaseModel):
    """SpeakerInsightsUnit

    :param name: name
    :type name: SpeakerInsightsUnitName
    :param values: values
    :type values: List[SpeakerInsightsValuesItems]
    """

    def __init__(
        self, name: SpeakerInsightsUnitName, values: List[SpeakerInsightsValuesItems]
    ):
        self.name = self._enum_matching(name, SpeakerInsightsUnitName.list(), "name")
        self.values = self._define_list(values, SpeakerInsightsValuesItems)
