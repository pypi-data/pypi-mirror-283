# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .called_number_info import CalledNumberInfo
from .company_answering_rule_extension_info import CompanyAnsweringRuleExtensionInfo


class ListCompanyAnsweringRuleInfoType(Enum):
    """An enumeration representing different categories.

    :cvar BUSINESSHOURS: "BusinessHours"
    :vartype BUSINESSHOURS: str
    :cvar AFTERHOURS: "AfterHours"
    :vartype AFTERHOURS: str
    :cvar CUSTOM: "Custom"
    :vartype CUSTOM: str
    """

    BUSINESSHOURS = "BusinessHours"
    AFTERHOURS = "AfterHours"
    CUSTOM = "Custom"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                ListCompanyAnsweringRuleInfoType._member_map_.values(),
            )
        )


@JsonMap({"id_": "id", "type_": "type", "called_numbers": "calledNumbers"})
class ListCompanyAnsweringRuleInfo(BaseModel):
    """ListCompanyAnsweringRuleInfo

    :param id_: Internal identifier of an answering rule, defaults to None
    :type id_: str, optional
    :param uri: Canonical URI of an answering rule, defaults to None
    :type uri: str, optional
    :param enabled: Specifies if the rule is active or inactive. The default value is `true`, defaults to None
    :type enabled: bool, optional
    :param type_: Type of an answering rule, the default value is 'Custom' = ['BusinessHours', 'AfterHours', 'Custom'], defaults to None
    :type type_: ListCompanyAnsweringRuleInfoType, optional
    :param name: Name of an answering rule specified by user. Max number of symbols is 30. The default value is 'My Rule N' where 'N' is the first free number, defaults to None
    :type name: str, optional
    :param called_numbers: Answering rules are applied when calling to selected number(s), defaults to None
    :type called_numbers: List[CalledNumberInfo], optional
    :param extension: extension, defaults to None
    :type extension: CompanyAnsweringRuleExtensionInfo, optional
    """

    def __init__(
        self,
        id_: str = None,
        uri: str = None,
        enabled: bool = None,
        type_: ListCompanyAnsweringRuleInfoType = None,
        name: str = None,
        called_numbers: List[CalledNumberInfo] = None,
        extension: CompanyAnsweringRuleExtensionInfo = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if uri is not None:
            self.uri = uri
        if enabled is not None:
            self.enabled = enabled
        if type_ is not None:
            self.type_ = self._enum_matching(
                type_, ListCompanyAnsweringRuleInfoType.list(), "type_"
            )
        if name is not None:
            self.name = name
        if called_numbers is not None:
            self.called_numbers = self._define_list(called_numbers, CalledNumberInfo)
        if extension is not None:
            self.extension = self._define_object(
                extension, CompanyAnsweringRuleExtensionInfo
            )
