# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .summary_unit import SummaryUnit


class SummaryType(Enum):
    """An enumeration representing different categories.

    :cvar EXTRACTIVE: "Extractive"
    :vartype EXTRACTIVE: str
    :cvar ABSTRACTIVESHORT: "AbstractiveShort"
    :vartype ABSTRACTIVESHORT: str
    :cvar ABSTRACTIVELONG: "AbstractiveLong"
    :vartype ABSTRACTIVELONG: str
    :cvar ABSTRACTIVEALL: "AbstractiveAll"
    :vartype ABSTRACTIVEALL: str
    :cvar ALL: "All"
    :vartype ALL: str
    """

    EXTRACTIVE = "Extractive"
    ABSTRACTIVESHORT = "AbstractiveShort"
    ABSTRACTIVELONG = "AbstractiveLong"
    ABSTRACTIVEALL = "AbstractiveAll"
    ALL = "All"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, SummaryType._member_map_.values()))


@JsonMap({"summary_type": "summaryType"})
class SummaryInput(BaseModel):
    """SummaryInput

    :param summary_type: Type of summary to be computed
    :type summary_type: SummaryType
    :param utterances: utterances
    :type utterances: List[SummaryUnit]
    """

    def __init__(self, summary_type: SummaryType, utterances: List[SummaryUnit]):
        self.summary_type = self._enum_matching(
            summary_type, SummaryType.list(), "summary_type"
        )
        self.utterances = self._define_list(utterances, SummaryUnit)
