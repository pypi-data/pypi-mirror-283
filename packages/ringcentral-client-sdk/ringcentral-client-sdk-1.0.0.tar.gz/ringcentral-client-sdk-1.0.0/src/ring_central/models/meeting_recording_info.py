# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class MeetingRecordingInfoContentType(Enum):
    """An enumeration representing different categories.

    :cvar VIDEO_MP4: "video/mp4"
    :vartype VIDEO_MP4: str
    :cvar AUDIO_M4A: "audio/m4a"
    :vartype AUDIO_M4A: str
    :cvar TEXT_VTT: "text/vtt"
    :vartype TEXT_VTT: str
    """

    VIDEO_MP4 = "video/mp4"
    AUDIO_M4A = "audio/m4a"
    TEXT_VTT = "text/vtt"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value, MeetingRecordingInfoContentType._member_map_.values()
            )
        )


class MeetingRecordingInfoStatus(Enum):
    """An enumeration representing different categories.

    :cvar COMPLETED: "Completed"
    :vartype COMPLETED: str
    :cvar PROCESSING: "Processing"
    :vartype PROCESSING: str
    """

    COMPLETED = "Completed"
    PROCESSING = "Processing"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, MeetingRecordingInfoStatus._member_map_.values())
        )


@JsonMap(
    {
        "id_": "id",
        "content_download_uri": "contentDownloadUri",
        "content_type": "contentType",
        "start_time": "startTime",
        "end_time": "endTime",
    }
)
class MeetingRecordingInfo(BaseModel):
    """MeetingRecordingInfo

    :param uuid: Unique identifier of a meeting instance, defaults to None
    :type uuid: str, optional
    :param id_: id_, defaults to None
    :type id_: str, optional
    :param content_download_uri: Link for downloading the recorded file (mp4, mp3 audio and text/plain chat file), defaults to None
    :type content_download_uri: str, optional
    :param content_type: content_type, defaults to None
    :type content_type: MeetingRecordingInfoContentType, optional
    :param size: size, defaults to None
    :type size: int, optional
    :param start_time: Starting time of a recording, defaults to None
    :type start_time: str, optional
    :param end_time: Ending time of a recording, defaults to None
    :type end_time: str, optional
    :param status: status, defaults to None
    :type status: MeetingRecordingInfoStatus, optional
    """

    def __init__(
        self,
        uuid: str = None,
        id_: str = None,
        content_download_uri: str = None,
        content_type: MeetingRecordingInfoContentType = None,
        size: int = None,
        start_time: str = None,
        end_time: str = None,
        status: MeetingRecordingInfoStatus = None,
    ):
        if uuid is not None:
            self.uuid = uuid
        if id_ is not None:
            self.id_ = id_
        if content_download_uri is not None:
            self.content_download_uri = content_download_uri
        if content_type is not None:
            self.content_type = self._enum_matching(
                content_type, MeetingRecordingInfoContentType.list(), "content_type"
            )
        if size is not None:
            self.size = size
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if status is not None:
            self.status = self._enum_matching(
                status, MeetingRecordingInfoStatus.list(), "status"
            )
