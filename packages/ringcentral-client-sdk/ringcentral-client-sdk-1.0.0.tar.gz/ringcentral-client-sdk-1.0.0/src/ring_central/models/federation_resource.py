# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .federated_account_resource import FederatedAccountResource
from .federation_type import FederationType


@JsonMap(
    {
        "creation_time": "creationTime",
        "display_name": "displayName",
        "id_": "id",
        "last_modified_time": "lastModifiedTime",
        "type_": "type",
    }
)
class FederationResource(BaseModel):
    """FederationResource

    :param accounts: accounts, defaults to None
    :type accounts: List[FederatedAccountResource], optional
    :param creation_time: creation_time, defaults to None
    :type creation_time: str, optional
    :param display_name: display_name, defaults to None
    :type display_name: str, optional
    :param id_: id_, defaults to None
    :type id_: str, optional
    :param last_modified_time: last_modified_time, defaults to None
    :type last_modified_time: str, optional
    :param type_: Federation type, defaults to None
    :type type_: FederationType, optional
    """

    def __init__(
        self,
        accounts: List[FederatedAccountResource] = None,
        creation_time: str = None,
        display_name: str = None,
        id_: str = None,
        last_modified_time: str = None,
        type_: FederationType = None,
    ):
        if accounts is not None:
            self.accounts = self._define_list(accounts, FederatedAccountResource)
        if creation_time is not None:
            self.creation_time = creation_time
        if display_name is not None:
            self.display_name = display_name
        if id_ is not None:
            self.id_ = id_
        if last_modified_time is not None:
            self.last_modified_time = last_modified_time
        if type_ is not None:
            self.type_ = self._enum_matching(type_, FederationType.list(), "type_")
