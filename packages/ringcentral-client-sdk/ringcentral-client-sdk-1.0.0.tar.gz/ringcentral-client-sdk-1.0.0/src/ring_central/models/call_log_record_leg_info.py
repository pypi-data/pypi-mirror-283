# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .extension_info_call_log import ExtensionInfoCallLog
from .call_transport_enum import CallTransportEnum
from .call_log_from_party import CallLogFromParty
from .call_log_to_party import CallLogToParty
from .call_type_enum import CallTypeEnum
from .call_direction_enum import CallDirectionEnum
from .call_log_record_message import CallLogRecordMessage
from .call_log_delegate_info import CallLogDelegateInfo
from .delegation_type_enum import DelegationTypeEnum
from .call_action_enum import CallActionEnum
from .call_result_enum import CallResultEnum
from .call_result_reason_enum import CallResultReasonEnum
from .call_log_recording_info import CallLogRecordingInfo
from .billing_info import BillingInfo
from .call_internal_type_enum import CallInternalTypeEnum
from .call_leg_type_enum import CallLegTypeEnum


@JsonMap({"telephony_session_id": "telephonySessionId"})
class CallLogRecordLegInfoTransferTarget(BaseModel):
    """CallLogRecordLegInfoTransferTarget

    :param telephony_session_id: Internal Identifier of Telephony Session, which belongs to transfer target in case of Warm Transfer, defaults to None
    :type telephony_session_id: str, optional
    """

    def __init__(self, telephony_session_id: str = None):
        if telephony_session_id is not None:
            self.telephony_session_id = telephony_session_id


@JsonMap({"telephony_session_id": "telephonySessionId"})
class CallLogRecordLegInfoTransferee(BaseModel):
    """CallLogRecordLegInfoTransferee

    :param telephony_session_id: Internal Identifier of Telephony Session, which belongs to transferee in case of Warm Transfer, defaults to None
    :type telephony_session_id: str, optional
    """

    def __init__(self, telephony_session_id: str = None):
        if telephony_session_id is not None:
            self.telephony_session_id = telephony_session_id


@JsonMap(
    {
        "telephony_session_id": "telephonySessionId",
        "sip_uuid_info": "sipUuidInfo",
        "transfer_target": "transferTarget",
        "party_id": "partyId",
        "from_": "from",
        "type_": "type",
        "delegation_type": "delegationType",
        "reason_description": "reasonDescription",
        "start_time": "startTime",
        "duration_ms": "durationMs",
        "short_recording": "shortRecording",
        "internal_type": "internalType",
        "leg_type": "legType",
    }
)
class CallLogRecordLegInfo(BaseModel):
    """CallLogRecordLegInfo

    :param extension: Information about extension on whose behalf a call is initiated. For Secretary call log the Boss extension info is returned, defaults to None
    :type extension: ExtensionInfoCallLog, optional
    :param telephony_session_id: Telephony identifier of a call session, defaults to None
    :type telephony_session_id: str, optional
    :param sip_uuid_info: Call session identifier, required for Telephony REST API, defaults to None
    :type sip_uuid_info: str, optional
    :param transfer_target: transfer_target, defaults to None
    :type transfer_target: CallLogRecordLegInfoTransferTarget, optional
    :param transferee: transferee, defaults to None
    :type transferee: CallLogRecordLegInfoTransferee, optional
    :param party_id: Internal Identifier of Participant, defaults to None
    :type party_id: str, optional
    :param transport: The type of call transport. 'PSTN' indicates that a call leg was initiated<br>from the PSTN network provider; 'VoIP' - from an RC phone.<br>, defaults to None
    :type transport: CallTransportEnum, optional
    :param from_: from_, defaults to None
    :type from_: CallLogFromParty, optional
    :param to: to, defaults to None
    :type to: CallLogToParty, optional
    :param type_: The type of call
    :type type_: CallTypeEnum
    :param direction: The direction of a call
    :type direction: CallDirectionEnum
    :param message: Linked message (Fax/Voicemail), defaults to None
    :type message: CallLogRecordMessage, optional
    :param delegate: Information on a delegate extension that actually implemented a call action. For Secretary call log the field is returned if the current extension implemented a call. For Boss call log the field contains information on a Secretary extension which actually implemented a call on behalf of the current extension, defaults to None
    :type delegate: CallLogDelegateInfo, optional
    :param delegation_type: Call delegation type, defaults to None
    :type delegation_type: DelegationTypeEnum, optional
    :param action: The internal action corresponding to the call operation
    :type action: CallActionEnum
    :param result: The result of the call operation, defaults to None
    :type result: CallResultEnum, optional
    :param reason: The reason of the call result:<br>  * `Accepted` - The call was connected to and accepted by this number<br>  * `Connected` - The call was answered, but there was no response on how to handle the call (for example, a voice mail system answered the call and did not push "1" to accept)<br>  * `Line Busy` - The phone number you dialed was busy<br>  * `Not Answered` - The phone number you dialed was not answered<br>  * `No Answer` - You did not answer the call<br>  * `Hang Up` - The caller hung up before the call was answered<br>  * `Stopped` - This attempt was stopped because the call was answered by another phone<br>  * `Internal Error` - An internal error occurred when making the call. Please try again<br>  * `No Credit` - There was not enough Calling Credit on your account to make this call<br>  * `Restricted Number` - The number you dialed is restricted by RingCentral<br>  * `Wrong Number` - The number you dialed has either been disconnected or is not a valid phone number. Please check the number and try again<br>  * `International Disabled` - International calling is not enabled on your account. Contact customer service to activate International Calling<br>  * `International Restricted` - The country and/or area you attempted to call has been prohibited by your administrator<br>  * `Bad Number` - An error occurred when making the call. Please check the number before trying again<br>  * `Info 411 Restricted` - Calling to 411 Information Services is restricted<br>  * `Customer 611 Restricted` - 611 customer service is not supported. Please contact customer service at <(888) 555-1212><br>  * `No Digital Line` - This DigitalLine was either not plugged in or did not have an internet connection<br>  * `Failed Try Again` - Call failed. Please try again<br>  * `Max Call Limit` - The number of simultaneous calls to your account has reached its limit<br>  * `Too Many Calls` - The number of simultaneous calls for per DigitalLine associated with Other Phone has reached its limit. Please contact customer service<br>  * `Calls Not Accepted` - Your account was not accepting calls at this time<br>  * `Number Not Allowed` - The number that was dialed to access your account is not allowed<br>  * `Number Blocked` - This number is in your Blocked Numbers list<br>  * `Number Disabled` - The phone number and/or area you attempted to call has been prohibited by your administrator<br>  * `Resource Error` - An error occurred when making the call. Please try again<br>  * `Call Loop` - A call loop occurred due to an incorrect call forwarding configuration. Please check that you are not forwarding calls back to your own account<br>  * `Fax Not Received` - An incoming fax could not be received because a proper connection with the sender's fax machine could not be established<br>  * `Fax Partially Sent` - The fax was only partially sent. Possible explanations include phone line quality to poor to maintain the connection or the call was dropped<br>  * `Fax Not Sent` - An attempt to send the fax was made, but could not connect with the receiving fax machine<br>  * `Fax Poor Line` - An attempt to send the fax was made, but the phone line quality was too poor to send the fax<br>  * `Fax Prepare Error` - An internal error occurred when preparing the fax. Please try again<br>  * `Fax Save Error` - An internal error occurred when saving the fax. Please try again<br>  * `Fax Send Error` - An error occurred when sending the fax. Please try again<br>  * `Emergency Address not defined` - The call was rejected due to no E911 address<br>  * `Carrier is not active` - The call was rejected due to carrier inactivity<br>  * `EDGE trunk misconfigured` - The call was rejected due to error in EDGE trunk configuration<br>  * `Internal Call Error` - An internal error occurred when making the call. Please try again<br>  * `Receive Error` - Fax receive error<br>, defaults to None
    :type reason: CallResultReasonEnum, optional
    :param reason_description: The detailed reason description of the call result, defaults to None
    :type reason_description: str, optional
    :param start_time: The call start datetime in ISO 8601 format including timezone, for example 2016-03-10T18:07:52.534Z
    :type start_time: str
    :param duration: Call duration in seconds
    :type duration: int
    :param duration_ms: Call duration in milliseconds
    :type duration_ms: int
    :param recording: Call recording data. Returned if the call was recorded, defaults to None
    :type recording: CallLogRecordingInfo, optional
    :param short_recording: Indicates that the recording is too short and therefore wouldn't be returned. The flag is not returned if the value is false, defaults to None
    :type short_recording: bool, optional
    :param billing: Billing information related to the call. Returned for 'Detailed' view only, defaults to None
    :type billing: BillingInfo, optional
    :param internal_type: The internal type of the call, defaults to None
    :type internal_type: CallInternalTypeEnum, optional
    :param leg_type: Leg type
    :type leg_type: CallLegTypeEnum
    :param master: Returned for 'Detailed' call log. Specifies if the leg is master-leg, defaults to None
    :type master: bool, optional
    """

    def __init__(
        self,
        type_: CallTypeEnum,
        direction: CallDirectionEnum,
        action: CallActionEnum,
        start_time: str,
        duration: int,
        duration_ms: int,
        leg_type: CallLegTypeEnum,
        extension: ExtensionInfoCallLog = None,
        telephony_session_id: str = None,
        sip_uuid_info: str = None,
        transfer_target: CallLogRecordLegInfoTransferTarget = None,
        transferee: CallLogRecordLegInfoTransferee = None,
        party_id: str = None,
        transport: CallTransportEnum = None,
        from_: CallLogFromParty = None,
        to: CallLogToParty = None,
        message: CallLogRecordMessage = None,
        delegate: CallLogDelegateInfo = None,
        delegation_type: DelegationTypeEnum = None,
        result: CallResultEnum = None,
        reason: CallResultReasonEnum = None,
        reason_description: str = None,
        recording: CallLogRecordingInfo = None,
        short_recording: bool = None,
        billing: BillingInfo = None,
        internal_type: CallInternalTypeEnum = None,
        master: bool = None,
    ):
        if extension is not None:
            self.extension = self._define_object(extension, ExtensionInfoCallLog)
        if telephony_session_id is not None:
            self.telephony_session_id = telephony_session_id
        if sip_uuid_info is not None:
            self.sip_uuid_info = sip_uuid_info
        if transfer_target is not None:
            self.transfer_target = self._define_object(
                transfer_target, CallLogRecordLegInfoTransferTarget
            )
        if transferee is not None:
            self.transferee = self._define_object(
                transferee, CallLogRecordLegInfoTransferee
            )
        if party_id is not None:
            self.party_id = party_id
        if transport is not None:
            self.transport = self._enum_matching(
                transport, CallTransportEnum.list(), "transport"
            )
        if from_ is not None:
            self.from_ = self._define_object(from_, CallLogFromParty)
        if to is not None:
            self.to = self._define_object(to, CallLogToParty)
        self.type_ = self._enum_matching(type_, CallTypeEnum.list(), "type_")
        self.direction = self._enum_matching(
            direction, CallDirectionEnum.list(), "direction"
        )
        if message is not None:
            self.message = self._define_object(message, CallLogRecordMessage)
        if delegate is not None:
            self.delegate = self._define_object(delegate, CallLogDelegateInfo)
        if delegation_type is not None:
            self.delegation_type = self._enum_matching(
                delegation_type, DelegationTypeEnum.list(), "delegation_type"
            )
        self.action = self._enum_matching(action, CallActionEnum.list(), "action")
        if result is not None:
            self.result = self._enum_matching(result, CallResultEnum.list(), "result")
        if reason is not None:
            self.reason = self._enum_matching(
                reason, CallResultReasonEnum.list(), "reason"
            )
        if reason_description is not None:
            self.reason_description = reason_description
        self.start_time = start_time
        self.duration = duration
        self.duration_ms = duration_ms
        if recording is not None:
            self.recording = self._define_object(recording, CallLogRecordingInfo)
        if short_recording is not None:
            self.short_recording = short_recording
        if billing is not None:
            self.billing = self._define_object(billing, BillingInfo)
        if internal_type is not None:
            self.internal_type = self._enum_matching(
                internal_type, CallInternalTypeEnum.list(), "internal_type"
            )
        self.leg_type = self._enum_matching(
            leg_type, CallLegTypeEnum.list(), "leg_type"
        )
        if master is not None:
            self.master = master
