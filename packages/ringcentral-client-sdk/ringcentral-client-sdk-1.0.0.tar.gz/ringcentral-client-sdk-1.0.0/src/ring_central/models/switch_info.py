# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .switch_site_info import SwitchSiteInfo
from .emergency_address_info import EmergencyAddressInfo, EmergencyAddressInfoGuard
from .emergency_location_info import EmergencyLocationInfo


@JsonMap(
    {
        "id_": "id",
        "chassis_id": "chassisId",
        "emergency_address": "emergencyAddress",
        "emergency_location": "emergencyLocation",
    }
)
class SwitchInfo(BaseModel):
    """SwitchInfo

    :param uri: Link to the network switch resource, defaults to None
    :type uri: str, optional
    :param id_: Internal identifier of a network switch, defaults to None
    :type id_: str, optional
    :param chassis_id: Unique identifier of a network switch, defaults to None
    :type chassis_id: str, optional
    :param port: Switch entity extension for better diversity. Should be used together with chassisId., defaults to None
    :type port: str, optional
    :param name: Name of a network switch, defaults to None
    :type name: str, optional
    :param site: site, defaults to None
    :type site: SwitchSiteInfo, optional
    :param emergency_address: emergency_address, defaults to None
    :type emergency_address: EmergencyAddressInfo, optional
    :param emergency_location: Emergency response location information, defaults to None
    :type emergency_location: EmergencyLocationInfo, optional
    """

    def __init__(
        self,
        uri: str = None,
        id_: str = None,
        chassis_id: str = None,
        port: str = None,
        name: str = None,
        site: SwitchSiteInfo = None,
        emergency_address: EmergencyAddressInfo = None,
        emergency_location: EmergencyLocationInfo = None,
    ):
        if uri is not None:
            self.uri = uri
        if id_ is not None:
            self.id_ = id_
        if chassis_id is not None:
            self.chassis_id = chassis_id
        if port is not None:
            self.port = port
        if name is not None:
            self.name = name
        if site is not None:
            self.site = self._define_object(site, SwitchSiteInfo)
        if emergency_address is not None:
            self.emergency_address = EmergencyAddressInfoGuard.return_one_of(
                emergency_address
            )
        if emergency_location is not None:
            self.emergency_location = self._define_object(
                emergency_location, EmergencyLocationInfo
            )
