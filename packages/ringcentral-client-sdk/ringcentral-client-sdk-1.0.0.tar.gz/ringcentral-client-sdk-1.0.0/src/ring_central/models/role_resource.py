# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .permission_id_resource import PermissionIdResource


class Scope(Enum):
    """An enumeration representing different categories.

    :cvar ACCOUNT: "Account"
    :vartype ACCOUNT: str
    :cvar ALLEXTENSIONS: "AllExtensions"
    :vartype ALLEXTENSIONS: str
    :cvar FEDERATION: "Federation"
    :vartype FEDERATION: str
    :cvar GROUP: "Group"
    :vartype GROUP: str
    :cvar NONUSEREXTENSIONS: "NonUserExtensions"
    :vartype NONUSEREXTENSIONS: str
    :cvar ROLEBASED: "RoleBased"
    :vartype ROLEBASED: str
    :cvar SELF: "Self"
    :vartype SELF: str
    :cvar USEREXTENSIONS: "UserExtensions"
    :vartype USEREXTENSIONS: str
    """

    ACCOUNT = "Account"
    ALLEXTENSIONS = "AllExtensions"
    FEDERATION = "Federation"
    GROUP = "Group"
    NONUSEREXTENSIONS = "NonUserExtensions"
    ROLEBASED = "RoleBased"
    SELF = "Self"
    USEREXTENSIONS = "UserExtensions"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, Scope._member_map_.values()))


@JsonMap(
    {
        "id_": "id",
        "display_name": "displayName",
        "site_compatible": "siteCompatible",
        "last_updated": "lastUpdated",
    }
)
class RoleResource(BaseModel):
    """RoleResource

    :param uri: Link to a role resource, defaults to None
    :type uri: str, optional
    :param id_: Internal identifier of a role, defaults to None
    :type id_: str, optional
    :param display_name: Dispayed name of a role, defaults to None
    :type display_name: str, optional
    :param description: Role description, defaults to None
    :type description: str, optional
    :param site_compatible: Site compatibility of a user role, defaults to None
    :type site_compatible: bool, optional
    :param custom: Specifies if a user role is custom, defaults to None
    :type custom: bool, optional
    :param scope: Specifies resource for permission, defaults to None
    :type scope: Scope, optional
    :param hidden: hidden, defaults to None
    :type hidden: bool, optional
    :param last_updated: last_updated, defaults to None
    :type last_updated: str, optional
    :param permissions: permissions, defaults to None
    :type permissions: List[PermissionIdResource], optional
    """

    def __init__(
        self,
        uri: str = None,
        id_: str = None,
        display_name: str = None,
        description: str = None,
        site_compatible: bool = None,
        custom: bool = None,
        scope: Scope = None,
        hidden: bool = None,
        last_updated: str = None,
        permissions: List[PermissionIdResource] = None,
    ):
        if uri is not None:
            self.uri = uri
        if id_ is not None:
            self.id_ = id_
        if display_name is not None:
            self.display_name = self._pattern_matching(
                display_name, '^((?!(<|>|\/|")).)*$', "display_name"
            )
        if description is not None:
            self.description = self._pattern_matching(
                description, '^((?!(<|>|\/|")).)*$', "description"
            )
        if site_compatible is not None:
            self.site_compatible = site_compatible
        if custom is not None:
            self.custom = custom
        if scope is not None:
            self.scope = self._enum_matching(scope, Scope.list(), "scope")
        if hidden is not None:
            self.hidden = hidden
        if last_updated is not None:
            self.last_updated = last_updated
        if permissions is not None:
            self.permissions = self._define_list(permissions, PermissionIdResource)
