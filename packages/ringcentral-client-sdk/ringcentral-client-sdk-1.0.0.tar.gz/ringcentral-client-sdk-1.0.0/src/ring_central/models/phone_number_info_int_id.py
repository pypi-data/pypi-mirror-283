# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel
from .phone_number_country_info import PhoneNumberCountryInfo
from .device_provisioning_extension_info import DeviceProvisioningExtensionInfo


class PhoneNumberInfoIntIdPaymentType(Enum):
    """An enumeration representing different categories.

    :cvar EXTERNAL: "External"
    :vartype EXTERNAL: str
    :cvar LOCAL: "Local"
    :vartype LOCAL: str
    """

    EXTERNAL = "External"
    LOCAL = "Local"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value, PhoneNumberInfoIntIdPaymentType._member_map_.values()
            )
        )


class PhoneNumberInfoIntIdType(Enum):
    """An enumeration representing different categories.

    :cvar VOICEFAX: "VoiceFax"
    :vartype VOICEFAX: str
    :cvar FAXONLY: "FaxOnly"
    :vartype FAXONLY: str
    :cvar VOICEONLY: "VoiceOnly"
    :vartype VOICEONLY: str
    """

    VOICEFAX = "VoiceFax"
    FAXONLY = "FaxOnly"
    VOICEONLY = "VoiceOnly"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, PhoneNumberInfoIntIdType._member_map_.values())
        )


class PhoneNumberInfoIntIdUsageType(Enum):
    """An enumeration representing different categories.

    :cvar MAINCOMPANYNUMBER: "MainCompanyNumber"
    :vartype MAINCOMPANYNUMBER: str
    :cvar ADDITIONALCOMPANYNUMBER: "AdditionalCompanyNumber"
    :vartype ADDITIONALCOMPANYNUMBER: str
    :cvar COMPANYNUMBER: "CompanyNumber"
    :vartype COMPANYNUMBER: str
    :cvar DIRECTNUMBER: "DirectNumber"
    :vartype DIRECTNUMBER: str
    :cvar COMPANYFAXNUMBER: "CompanyFaxNumber"
    :vartype COMPANYFAXNUMBER: str
    :cvar FORWARDEDNUMBER: "ForwardedNumber"
    :vartype FORWARDEDNUMBER: str
    :cvar FORWARDEDCOMPANYNUMBER: "ForwardedCompanyNumber"
    :vartype FORWARDEDCOMPANYNUMBER: str
    :cvar CONTACTCENTERNUMBER: "ContactCenterNumber"
    :vartype CONTACTCENTERNUMBER: str
    """

    MAINCOMPANYNUMBER = "MainCompanyNumber"
    ADDITIONALCOMPANYNUMBER = "AdditionalCompanyNumber"
    COMPANYNUMBER = "CompanyNumber"
    DIRECTNUMBER = "DirectNumber"
    COMPANYFAXNUMBER = "CompanyFaxNumber"
    FORWARDEDNUMBER = "ForwardedNumber"
    FORWARDEDCOMPANYNUMBER = "ForwardedCompanyNumber"
    CONTACTCENTERNUMBER = "ContactCenterNumber"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, PhoneNumberInfoIntIdUsageType._member_map_.values())
        )


@JsonMap(
    {
        "id_": "id",
        "payment_type": "paymentType",
        "phone_number": "phoneNumber",
        "type_": "type",
        "usage_type": "usageType",
    }
)
class PhoneNumberInfoIntId(BaseModel):
    """Phone number information

    :param id_: Internal identifier of a phone number, defaults to None
    :type id_: int, optional
    :param country: Brief information on a phone number country, defaults to None
    :type country: PhoneNumberCountryInfo, optional
    :param extension: Information on the extension, to which the phone number is assigned. Returned only for the request of Account phone number list, defaults to None
    :type extension: DeviceProvisioningExtensionInfo, optional
    :param label: Custom user-defined name of a phone number, if any, defaults to None
    :type label: str, optional
    :param location: Location (City, State). Filled for local US numbers, defaults to None
    :type location: str, optional
    :param payment_type: Payment type. 'External' is returned for forwarded numbers<br>which are not terminated in the RingCentral phone system<br>, defaults to None
    :type payment_type: PhoneNumberInfoIntIdPaymentType, optional
    :param phone_number: Phone number, defaults to None
    :type phone_number: str, optional
    :param status: Status of a phone number. If the value is 'Normal', the phone<br>number is ready to be used. Otherwise, it is an external number not yet<br>ported to RingCentral<br>, defaults to None
    :type status: str, optional
    :param type_: Phone number type, defaults to None
    :type type_: PhoneNumberInfoIntIdType, optional
    :param usage_type: Usage type of the phone number, defaults to None
    :type usage_type: PhoneNumberInfoIntIdUsageType, optional
    """

    def __init__(
        self,
        id_: int = None,
        country: PhoneNumberCountryInfo = None,
        extension: DeviceProvisioningExtensionInfo = None,
        label: str = None,
        location: str = None,
        payment_type: PhoneNumberInfoIntIdPaymentType = None,
        phone_number: str = None,
        status: str = None,
        type_: PhoneNumberInfoIntIdType = None,
        usage_type: PhoneNumberInfoIntIdUsageType = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if country is not None:
            self.country = self._define_object(country, PhoneNumberCountryInfo)
        if extension is not None:
            self.extension = self._define_object(
                extension, DeviceProvisioningExtensionInfo
            )
        if label is not None:
            self.label = label
        if location is not None:
            self.location = location
        if payment_type is not None:
            self.payment_type = self._enum_matching(
                payment_type, PhoneNumberInfoIntIdPaymentType.list(), "payment_type"
            )
        if phone_number is not None:
            self.phone_number = phone_number
        if status is not None:
            self.status = status
        if type_ is not None:
            self.type_ = self._enum_matching(
                type_, PhoneNumberInfoIntIdType.list(), "type_"
            )
        if usage_type is not None:
            self.usage_type = self._enum_matching(
                usage_type, PhoneNumberInfoIntIdUsageType.list(), "usage_type"
            )
