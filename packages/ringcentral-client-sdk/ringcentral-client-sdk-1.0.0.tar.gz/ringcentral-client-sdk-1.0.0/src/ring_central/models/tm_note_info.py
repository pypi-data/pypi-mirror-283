# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .tm_creator_info import TmCreatorInfo
from .last_modified_by_info import LastModifiedByInfo
from .locked_by_info import LockedByInfo


class TmNoteInfoStatus(Enum):
    """An enumeration representing different categories.

    :cvar ACTIVE: "Active"
    :vartype ACTIVE: str
    :cvar DRAFT: "Draft"
    :vartype DRAFT: str
    """

    ACTIVE = "Active"
    DRAFT = "Draft"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, TmNoteInfoStatus._member_map_.values()))


class TmNoteInfoType(Enum):
    """An enumeration representing different categories.

    :cvar NOTE: "Note"
    :vartype NOTE: str
    """

    NOTE = "Note"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, TmNoteInfoType._member_map_.values()))


@JsonMap(
    {
        "id_": "id",
        "chat_ids": "chatIds",
        "last_modified_by": "lastModifiedBy",
        "locked_by": "lockedBy",
        "creation_time": "creationTime",
        "last_modified_time": "lastModifiedTime",
        "type_": "type",
    }
)
class TmNoteInfo(BaseModel):
    """TmNoteInfo

    :param id_: Internal identifier of a note, defaults to None
    :type id_: str, optional
    :param title: Title of a note, defaults to None
    :type title: str, optional
    :param chat_ids: Internal identifiers of the chat(s) where the note is posted or shared., defaults to None
    :type chat_ids: List[str], optional
    :param preview: Preview of a note (first 150 characters of a body), defaults to None
    :type preview: str, optional
    :param creator: Note creator information, defaults to None
    :type creator: TmCreatorInfo, optional
    :param last_modified_by: Note last modification information, defaults to None
    :type last_modified_by: LastModifiedByInfo, optional
    :param locked_by: Returned for the note being edited (locked) at the current moment. Information on the user editing the note, defaults to None
    :type locked_by: LockedByInfo, optional
    :param status: Note publishing status. Any note is created in 'Draft' status. After it is posted it becomes 'Active', defaults to None
    :type status: TmNoteInfoStatus, optional
    :param creation_time: Creation time, defaults to None
    :type creation_time: str, optional
    :param last_modified_time: Datetime of the note last update, defaults to None
    :type last_modified_time: str, optional
    :param type_: type_, defaults to None
    :type type_: TmNoteInfoType, optional
    """

    def __init__(
        self,
        id_: str = None,
        title: str = None,
        chat_ids: List[str] = None,
        preview: str = None,
        creator: TmCreatorInfo = None,
        last_modified_by: LastModifiedByInfo = None,
        locked_by: LockedByInfo = None,
        status: TmNoteInfoStatus = None,
        creation_time: str = None,
        last_modified_time: str = None,
        type_: TmNoteInfoType = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if title is not None:
            self.title = title
        if chat_ids is not None:
            self.chat_ids = chat_ids
        if preview is not None:
            self.preview = preview
        if creator is not None:
            self.creator = self._define_object(creator, TmCreatorInfo)
        if last_modified_by is not None:
            self.last_modified_by = self._define_object(
                last_modified_by, LastModifiedByInfo
            )
        if locked_by is not None:
            self.locked_by = self._define_object(locked_by, LockedByInfo)
        if status is not None:
            self.status = self._enum_matching(status, TmNoteInfoStatus.list(), "status")
        if creation_time is not None:
            self.creation_time = creation_time
        if last_modified_time is not None:
            self.last_modified_time = last_modified_time
        if type_ is not None:
            self.type_ = self._enum_matching(type_, TmNoteInfoType.list(), "type_")
