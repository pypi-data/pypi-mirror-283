# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .extension_info_grants import ExtensionInfoGrants


@JsonMap(
    {
        "call_pickup": "callPickup",
        "call_monitoring": "callMonitoring",
        "call_on_behalf_of": "callOnBehalfOf",
        "call_delegation": "callDelegation",
        "group_paging": "groupPaging",
        "call_queue_setup": "callQueueSetup",
        "call_queue_members_setup": "callQueueMembersSetup",
        "call_queue_messages": "callQueueMessages",
        "call_queue_fac_setup": "callQueueFacSetup",
        "shared_voicemails": "sharedVoicemails",
    }
)
class GrantInfo(BaseModel):
    """GrantInfo

    :param uri: Canonical URI of a grant, defaults to None
    :type uri: str, optional
    :param extension: Extension information, defaults to None
    :type extension: ExtensionInfoGrants, optional
    :param call_pickup: Specifies if picking up of other extensions' calls is allowed<br>for the extension. If 'Presence' feature is disabled for the given extension,<br>the flag is not returned<br>, defaults to None
    :type call_pickup: bool, optional
    :param call_monitoring: Specifies if monitoring of other extensions' calls is allowed<br>for the extension. If 'CallMonitoring' feature is disabled for the given<br>extension, the flag is not returned<br>, defaults to None
    :type call_monitoring: bool, optional
    :param call_on_behalf_of: Specifies whether the current extension is able to make or<br>receive calls on behalf of the user referenced in extension object<br>, defaults to None
    :type call_on_behalf_of: bool, optional
    :param call_delegation: Specifies whether the current extension can delegate a call<br>to the user referenced in extension object<br>, defaults to None
    :type call_delegation: bool, optional
    :param group_paging: Specifies whether the current extension is allowed to call<br>Paging Only group referenced to in extension object<br>, defaults to None
    :type group_paging: bool, optional
    :param call_queue_setup: Specifies whether the current extension is assigned as a Full-Access<br>manager in the call queue referenced in extension object<br>, defaults to None
    :type call_queue_setup: bool, optional
    :param call_queue_members_setup: Specifies whether the current extension is assigned as a Members-Only<br>manager in the call queue referenced in extension object<br>, defaults to None
    :type call_queue_members_setup: bool, optional
    :param call_queue_messages: Specifies whether the current extension is assigned as a Messages Manager<br>in the queue referenced in extension object<br>, defaults to None
    :type call_queue_messages: bool, optional
    :param call_queue_fac_setup: Specifies whether the current extension is granted *Forward All Calls (FAC)* permission<br>, defaults to None
    :type call_queue_fac_setup: bool, optional
    :param shared_voicemails: Specifies whether the user referenced in extension object is sharing voicemails<br>with the current extension<br>, defaults to None
    :type shared_voicemails: bool, optional
    """

    def __init__(
        self,
        uri: str = None,
        extension: ExtensionInfoGrants = None,
        call_pickup: bool = None,
        call_monitoring: bool = None,
        call_on_behalf_of: bool = None,
        call_delegation: bool = None,
        group_paging: bool = None,
        call_queue_setup: bool = None,
        call_queue_members_setup: bool = None,
        call_queue_messages: bool = None,
        call_queue_fac_setup: bool = None,
        shared_voicemails: bool = None,
    ):
        if uri is not None:
            self.uri = uri
        if extension is not None:
            self.extension = self._define_object(extension, ExtensionInfoGrants)
        if call_pickup is not None:
            self.call_pickup = call_pickup
        if call_monitoring is not None:
            self.call_monitoring = call_monitoring
        if call_on_behalf_of is not None:
            self.call_on_behalf_of = call_on_behalf_of
        if call_delegation is not None:
            self.call_delegation = call_delegation
        if group_paging is not None:
            self.group_paging = group_paging
        if call_queue_setup is not None:
            self.call_queue_setup = call_queue_setup
        if call_queue_members_setup is not None:
            self.call_queue_members_setup = call_queue_members_setup
        if call_queue_messages is not None:
            self.call_queue_messages = call_queue_messages
        if call_queue_fac_setup is not None:
            self.call_queue_fac_setup = call_queue_fac_setup
        if shared_voicemails is not None:
            self.shared_voicemails = shared_voicemails
