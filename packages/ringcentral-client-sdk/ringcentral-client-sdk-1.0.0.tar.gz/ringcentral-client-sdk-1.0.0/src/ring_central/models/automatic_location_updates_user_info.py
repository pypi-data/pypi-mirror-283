# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel
from .automatic_location_updates_site_info import AutomaticLocationUpdatesSiteInfo


class AutomaticLocationUpdatesUserInfoType(Enum):
    """An enumeration representing different categories.

    :cvar USER: "User"
    :vartype USER: str
    :cvar LIMITED: "Limited"
    :vartype LIMITED: str
    """

    USER = "User"
    LIMITED = "Limited"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                AutomaticLocationUpdatesUserInfoType._member_map_.values(),
            )
        )


@JsonMap(
    {
        "id_": "id",
        "full_name": "fullName",
        "extension_number": "extensionNumber",
        "feature_enabled": "featureEnabled",
        "type_": "type",
    }
)
class AutomaticLocationUpdatesUserInfo(BaseModel):
    """AutomaticLocationUpdatesUserInfo

    :param id_: Internal identifier of a device, defaults to None
    :type id_: str, optional
    :param full_name: User name, defaults to None
    :type full_name: str, optional
    :param extension_number: extension_number, defaults to None
    :type extension_number: str, optional
    :param feature_enabled: Specifies whether Automatic Location Updates feature is enabled, defaults to None
    :type feature_enabled: bool, optional
    :param type_: User extension type, defaults to None
    :type type_: AutomaticLocationUpdatesUserInfoType, optional
    :param site: Site data. If multi-site feature is turned on for the account,<br>then ID of a site must be specified. In order to assign a wireless<br>point to the main site (company) site ID should be set to `main-site`<br>, defaults to None
    :type site: AutomaticLocationUpdatesSiteInfo, optional
    :param department: Department name, defaults to None
    :type department: str, optional
    """

    def __init__(
        self,
        id_: str = None,
        full_name: str = None,
        extension_number: str = None,
        feature_enabled: bool = None,
        type_: AutomaticLocationUpdatesUserInfoType = None,
        site: AutomaticLocationUpdatesSiteInfo = None,
        department: str = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if full_name is not None:
            self.full_name = full_name
        if extension_number is not None:
            self.extension_number = extension_number
        if feature_enabled is not None:
            self.feature_enabled = feature_enabled
        if type_ is not None:
            self.type_ = self._enum_matching(
                type_, AutomaticLocationUpdatesUserInfoType.list(), "type_"
            )
        if site is not None:
            self.site = self._define_object(site, AutomaticLocationUpdatesSiteInfo)
        if department is not None:
            self.department = department
