# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .session_livestream_status_model import SessionLivestreamStatusModel


@JsonMap(
    {
        "livestream_id": "livestreamId",
        "service_provider": "serviceProvider",
        "livestream_status": "livestreamStatus",
        "previous_livestream_status": "previousLivestreamStatus",
        "livestream_start_time": "livestreamStartTime",
    }
)
class SessionLivestreamMinimalModel(BaseModel):
    """SessionLivestreamMinimalModel

    :param livestream_id: Identifier of the livestream
    :type livestream_id: str
    :param service_provider: Name of the livestreaming service provider
    :type service_provider: str
    :param livestream_status: Last known state of the livestream as notified by Webinar Livestreaming Controller Service (WLCS).<br>Value may not be consistent with latest state, especially for livestream associated with OAuth2.0 based service providers.<br>Thus, state must be obtained directly from WLCS<br>
    :type livestream_status: SessionLivestreamStatusModel
    :param previous_livestream_status: Last known state of the livestream as notified by Webinar Livestreaming Controller Service (WLCS).<br>Value may not be consistent with latest state, especially for livestream associated with OAuth2.0 based service providers.<br>Thus, state must be obtained directly from WLCS<br>, defaults to None
    :type previous_livestream_status: SessionLivestreamStatusModel, optional
    :param livestream_start_time: Time at which the session started to publish media to livestream service provider., defaults to None
    :type livestream_start_time: str, optional
    :param error: Generalized API error structure suitable for any error type, defaults to None
    :type error: dict, optional
    """

    def __init__(
        self,
        livestream_id: str,
        service_provider: str,
        livestream_status: SessionLivestreamStatusModel,
        previous_livestream_status: SessionLivestreamStatusModel = None,
        livestream_start_time: str = None,
        error: dict = None,
    ):
        self.livestream_id = livestream_id
        self.service_provider = service_provider
        self.livestream_status = self._enum_matching(
            livestream_status, SessionLivestreamStatusModel.list(), "livestream_status"
        )
        if previous_livestream_status is not None:
            self.previous_livestream_status = self._enum_matching(
                previous_livestream_status,
                SessionLivestreamStatusModel.list(),
                "previous_livestream_status",
            )
        if livestream_start_time is not None:
            self.livestream_start_time = livestream_start_time
        if error is not None:
            self.error = error
