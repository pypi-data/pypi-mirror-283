# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class Pattern(Enum):
    """An enumeration representing different categories.

    :cvar WILLCALLYOUBACK: "WillCallYouBack"
    :vartype WILLCALLYOUBACK: str
    :cvar CALLMEBACK: "CallMeBack"
    :vartype CALLMEBACK: str
    :cvar ONMYWAY: "OnMyWay"
    :vartype ONMYWAY: str
    :cvar ONTHEOTHERLINE: "OnTheOtherLine"
    :vartype ONTHEOTHERLINE: str
    :cvar WILLCALLYOUBACKLATER: "WillCallYouBackLater"
    :vartype WILLCALLYOUBACKLATER: str
    :cvar CALLMEBACKLATER: "CallMeBackLater"
    :vartype CALLMEBACKLATER: str
    :cvar INAMEETING: "InAMeeting"
    :vartype INAMEETING: str
    :cvar ONTHEOTHERLINENOCALL: "OnTheOtherLineNoCall"
    :vartype ONTHEOTHERLINENOCALL: str
    """

    WILLCALLYOUBACK = "WillCallYouBack"
    CALLMEBACK = "CallMeBack"
    ONMYWAY = "OnMyWay"
    ONTHEOTHERLINE = "OnTheOtherLine"
    WILLCALLYOUBACKLATER = "WillCallYouBackLater"
    CALLMEBACKLATER = "CallMeBackLater"
    INAMEETING = "InAMeeting"
    ONTHEOTHERLINENOCALL = "OnTheOtherLineNoCall"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, Pattern._member_map_.values()))


class TimeUnit(Enum):
    """An enumeration representing different categories.

    :cvar MINUTE: "Minute"
    :vartype MINUTE: str
    :cvar HOUR: "Hour"
    :vartype HOUR: str
    :cvar DAY: "Day"
    :vartype DAY: str
    """

    MINUTE = "Minute"
    HOUR = "Hour"
    DAY = "Day"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, TimeUnit._member_map_.values()))


@JsonMap({"time_unit": "timeUnit"})
class ReplyWithPattern(BaseModel):
    """ReplyWithPattern

    :param pattern: Predefined reply pattern name., defaults to None
    :type pattern: Pattern, optional
    :param time: Number of time units. Applicable only to WillCallYouBack, CallMeBack patterns., defaults to None
    :type time: int, optional
    :param time_unit: Time unit name., defaults to None
    :type time_unit: TimeUnit, optional
    """

    def __init__(
        self, pattern: Pattern = None, time: int = None, time_unit: TimeUnit = None
    ):
        if pattern is not None:
            self.pattern = self._enum_matching(pattern, Pattern.list(), "pattern")
        if time is not None:
            self.time = time
        if time_unit is not None:
            self.time_unit = self._enum_matching(
                time_unit, TimeUnit.list(), "time_unit"
            )
