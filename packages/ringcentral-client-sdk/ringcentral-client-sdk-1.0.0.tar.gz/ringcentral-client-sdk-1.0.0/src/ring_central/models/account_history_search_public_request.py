# This file was generated by liblab | https://liblab.com/

from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel


class ActionIds(Enum):
    """An enumeration representing different categories.

    :cvar CHANGE_SECRET_INFO: "CHANGE_SECRET_INFO"
    :vartype CHANGE_SECRET_INFO: str
    :cvar CHANGE_USER_INFO: "CHANGE_USER_INFO"
    :vartype CHANGE_USER_INFO: str
    """

    CHANGE_SECRET_INFO = "CHANGE_SECRET_INFO"
    CHANGE_USER_INFO = "CHANGE_USER_INFO"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, ActionIds._member_map_.values()))


class ExcludeActionIds(Enum):
    """An enumeration representing different categories.

    :cvar CHANGE_SECRET_INFO: "CHANGE_SECRET_INFO"
    :vartype CHANGE_SECRET_INFO: str
    :cvar CHANGE_USER_INFO: "CHANGE_USER_INFO"
    :vartype CHANGE_USER_INFO: str
    """

    CHANGE_SECRET_INFO = "CHANGE_SECRET_INFO"
    CHANGE_USER_INFO = "CHANGE_USER_INFO"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, ExcludeActionIds._member_map_.values()))


@JsonMap(
    {
        "event_time_from": "eventTimeFrom",
        "event_time_to": "eventTimeTo",
        "initiator_ids": "initiatorIds",
        "per_page": "perPage",
        "target_ids": "targetIds",
        "site_id": "siteId",
        "action_ids": "actionIds",
        "search_string": "searchString",
        "exclude_action_ids": "excludeActionIds",
    }
)
class AccountHistorySearchPublicRequest(BaseModel):
    """AccountHistorySearchPublicRequest

    :param event_time_from: The beginning of the time range to return records in ISO 8601 format in UTC timezone, default is "eventTimeFrom"-24 hours<br>, defaults to None
    :type event_time_from: str, optional
    :param event_time_to: The end of the time range to return records in ISO 8601 format in UTC timezone, default is the current time, defaults to None
    :type event_time_to: str, optional
    :param initiator_ids: List of extension IDs of change initiators., defaults to None
    :type initiator_ids: List[str], optional
    :param page: Page number in the result set, defaults to None
    :type page: int, optional
    :param per_page: Number of records to be returned per page., defaults to None
    :type per_page: int, optional
    :param target_ids: List of extension (user) IDs affected by this action., defaults to None
    :type target_ids: List[str], optional
    :param site_id: Site ID to apply as a filter, defaults to None
    :type site_id: str, optional
    :param action_ids: List of action IDs (exact keys) to search for (alternatively "excludeActionIds" option can be used)., defaults to None
    :type action_ids: List[ActionIds], optional
    :param search_string: The (sub)string to search, applied to the following fields:<br><br>- initiator.name<br>- initiator.role<br>- initiator.extensionNumber<br>- target.name<br>- target.extensionNumber<br>- details.parameters.value, defaults to None
    :type search_string: str, optional
    :param exclude_action_ids: List of action IDs (exact keys) to exclude from your search (alternatively "actionIds" option can be used)., defaults to None
    :type exclude_action_ids: List[ExcludeActionIds], optional
    """

    def __init__(
        self,
        event_time_from: str = None,
        event_time_to: str = None,
        initiator_ids: List[str] = None,
        page: int = None,
        per_page: int = None,
        target_ids: List[str] = None,
        site_id: str = None,
        action_ids: List[ActionIds] = None,
        search_string: str = None,
        exclude_action_ids: List[ExcludeActionIds] = None,
    ):
        if event_time_from is not None:
            self.event_time_from = event_time_from
        if event_time_to is not None:
            self.event_time_to = event_time_to
        if initiator_ids is not None:
            self.initiator_ids = initiator_ids
        if page is not None:
            self.page = page
        if per_page is not None:
            self.per_page = per_page
        if target_ids is not None:
            self.target_ids = target_ids
        if site_id is not None:
            self.site_id = site_id
        if action_ids is not None:
            self.action_ids = self._define_list(action_ids, ActionIds)
        if search_string is not None:
            self.search_string = search_string
        if exclude_action_ids is not None:
            self.exclude_action_ids = self._define_list(
                exclude_action_ids, ExcludeActionIds
            )
