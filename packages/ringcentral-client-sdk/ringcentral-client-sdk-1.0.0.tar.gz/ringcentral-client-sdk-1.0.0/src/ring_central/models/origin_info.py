# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class OriginInfoType(Enum):
    """An enumeration representing different categories.

    :cvar CALL: "Call"
    :vartype CALL: str
    :cvar RINGOUT: "RingOut"
    :vartype RINGOUT: str
    :cvar RINGME: "RingMe"
    :vartype RINGME: str
    :cvar CONFERENCE: "Conference"
    :vartype CONFERENCE: str
    :cvar GREETINGSRECORDING: "GreetingsRecording"
    :vartype GREETINGSRECORDING: str
    :cvar VERIFICATIONCALL: "VerificationCall"
    :vartype VERIFICATIONCALL: str
    :cvar ZOOM: "Zoom"
    :vartype ZOOM: str
    :cvar CALLOUT: "CallOut"
    :vartype CALLOUT: str
    """

    CALL = "Call"
    RINGOUT = "RingOut"
    RINGME = "RingMe"
    CONFERENCE = "Conference"
    GREETINGSRECORDING = "GreetingsRecording"
    VERIFICATIONCALL = "VerificationCall"
    ZOOM = "Zoom"
    CALLOUT = "CallOut"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, OriginInfoType._member_map_.values()))


@JsonMap({"type_": "type"})
class OriginInfo(BaseModel):
    """Session origin details

    :param type_: Session origin type, defaults to None
    :type type_: OriginInfoType, optional
    """

    def __init__(self, type_: OriginInfoType = None):
        if type_ is not None:
            self.type_ = self._enum_matching(type_, OriginInfoType.list(), "type_")
