# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .contact_info_creation_request import ContactInfoCreationRequest
from .cost_center_info import CostCenterInfo
from .custom_field_info import CustomFieldInfo
from .reference_info import ReferenceInfo
from .regional_settings import RegionalSettings
from .setup_wizard_state_for_update_enum import SetupWizardStateForUpdateEnum
from .site_info import SiteInfo
from .extension_status_info import ExtensionStatusInfo


class ExtensionCreationRequestStatus(Enum):
    """An enumeration representing different categories.

    :cvar ENABLED: "Enabled"
    :vartype ENABLED: str
    :cvar DISABLED: "Disabled"
    :vartype DISABLED: str
    :cvar NOTACTIVATED: "NotActivated"
    :vartype NOTACTIVATED: str
    :cvar UNASSIGNED: "Unassigned"
    :vartype UNASSIGNED: str
    :cvar FROZEN: "Frozen"
    :vartype FROZEN: str
    """

    ENABLED = "Enabled"
    DISABLED = "Disabled"
    NOTACTIVATED = "NotActivated"
    UNASSIGNED = "Unassigned"
    FROZEN = "Frozen"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, ExtensionCreationRequestStatus._member_map_.values())
        )


class ExtensionCreationRequestType(Enum):
    """An enumeration representing different categories.

    :cvar USER: "User"
    :vartype USER: str
    :cvar VIRTUALUSER: "VirtualUser"
    :vartype VIRTUALUSER: str
    :cvar DIGITALUSER: "DigitalUser"
    :vartype DIGITALUSER: str
    :cvar FLEXIBLEUSER: "FlexibleUser"
    :vartype FLEXIBLEUSER: str
    :cvar DEPARTMENT: "Department"
    :vartype DEPARTMENT: str
    :cvar ANNOUNCEMENT: "Announcement"
    :vartype ANNOUNCEMENT: str
    :cvar VOICEMAIL: "Voicemail"
    :vartype VOICEMAIL: str
    :cvar SHAREDLINESGROUP: "SharedLinesGroup"
    :vartype SHAREDLINESGROUP: str
    :cvar PAGINGONLY: "PagingOnly"
    :vartype PAGINGONLY: str
    :cvar PARKLOCATION: "ParkLocation"
    :vartype PARKLOCATION: str
    :cvar LIMITED: "Limited"
    :vartype LIMITED: str
    """

    USER = "User"
    VIRTUALUSER = "VirtualUser"
    DIGITALUSER = "DigitalUser"
    FLEXIBLEUSER = "FlexibleUser"
    DEPARTMENT = "Department"
    ANNOUNCEMENT = "Announcement"
    VOICEMAIL = "Voicemail"
    SHAREDLINESGROUP = "SharedLinesGroup"
    PAGINGONLY = "PagingOnly"
    PARKLOCATION = "ParkLocation"
    LIMITED = "Limited"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, ExtensionCreationRequestType._member_map_.values())
        )


@JsonMap(
    {
        "extension_number": "extensionNumber",
        "cost_center": "costCenter",
        "custom_fields": "customFields",
        "regional_settings": "regionalSettings",
        "partner_id": "partnerId",
        "ivr_pin": "ivrPin",
        "setup_wizard_state": "setupWizardState",
        "status_info": "statusInfo",
        "type_": "type",
    }
)
class ExtensionCreationRequest(BaseModel):
    """ExtensionCreationRequest

    :param contact: Contact Information, defaults to None
    :type contact: ContactInfoCreationRequest, optional
    :param extension_number: Extension short number, defaults to None
    :type extension_number: str, optional
    :param cost_center: Cost center information. Applicable if Cost Center feature is enabled. The default is `root` cost center value, defaults to None
    :type cost_center: CostCenterInfo, optional
    :param custom_fields: custom_fields, defaults to None
    :type custom_fields: List[CustomFieldInfo], optional
    :param password: Password for extension. If not specified, the password is auto-generated, defaults to None
    :type password: str, optional
    :param references: List of non-RC internal identifiers assigned to an extension, defaults to None
    :type references: List[ReferenceInfo], optional
    :param regional_settings: Regional data (timezone, home country, language) of an extension/account.<br>The default is Company (Auto-Receptionist) settings<br>, defaults to None
    :type regional_settings: RegionalSettings, optional
    :param partner_id: Additional extension identifier, created by partner application<br>and applied on client side<br>, defaults to None
    :type partner_id: str, optional
    :param ivr_pin: IVR PIN, defaults to None
    :type ivr_pin: str, optional
    :param setup_wizard_state: Initial configuration wizard state, defaults to None
    :type setup_wizard_state: SetupWizardStateForUpdateEnum, optional
    :param site: site, defaults to None
    :type site: SiteInfo, optional
    :param status: Extension current state, defaults to None
    :type status: ExtensionCreationRequestStatus, optional
    :param status_info: Status information (reason, comment). Returned for 'Disabled'<br>status only<br>, defaults to None
    :type status_info: ExtensionStatusInfo, optional
    :param type_: Extension type. Please note that legacy 'Department' extension type<br>corresponds to 'Call Queue' extensions in modern RingCentral product<br>terminology<br>, defaults to None
    :type type_: ExtensionCreationRequestType, optional
    :param hidden: Hides extension from showing in company directory. Supported<br>for extensions of 'User' type only. For unassigned extensions the value<br>is set to `true` by default. For assigned extensions the value is set<br>to `false` by default<br>, defaults to None
    :type hidden: bool, optional
    """

    def __init__(
        self,
        contact: ContactInfoCreationRequest = None,
        extension_number: str = None,
        cost_center: CostCenterInfo = None,
        custom_fields: List[CustomFieldInfo] = None,
        password: str = None,
        references: List[ReferenceInfo] = None,
        regional_settings: RegionalSettings = None,
        partner_id: str = None,
        ivr_pin: str = None,
        setup_wizard_state: SetupWizardStateForUpdateEnum = None,
        site: SiteInfo = None,
        status: ExtensionCreationRequestStatus = None,
        status_info: ExtensionStatusInfo = None,
        type_: ExtensionCreationRequestType = None,
        hidden: bool = None,
    ):
        if contact is not None:
            self.contact = self._define_object(contact, ContactInfoCreationRequest)
        if extension_number is not None:
            self.extension_number = extension_number
        if cost_center is not None:
            self.cost_center = self._define_object(cost_center, CostCenterInfo)
        if custom_fields is not None:
            self.custom_fields = self._define_list(custom_fields, CustomFieldInfo)
        if password is not None:
            self.password = password
        if references is not None:
            self.references = self._define_list(references, ReferenceInfo)
        if regional_settings is not None:
            self.regional_settings = self._define_object(
                regional_settings, RegionalSettings
            )
        if partner_id is not None:
            self.partner_id = partner_id
        if ivr_pin is not None:
            self.ivr_pin = ivr_pin
        if setup_wizard_state is not None:
            self.setup_wizard_state = self._enum_matching(
                setup_wizard_state,
                SetupWizardStateForUpdateEnum.list(),
                "setup_wizard_state",
            )
        if site is not None:
            self.site = self._define_object(site, SiteInfo)
        if status is not None:
            self.status = self._enum_matching(
                status, ExtensionCreationRequestStatus.list(), "status"
            )
        if status_info is not None:
            self.status_info = self._define_object(status_info, ExtensionStatusInfo)
        if type_ is not None:
            self.type_ = self._enum_matching(
                type_, ExtensionCreationRequestType.list(), "type_"
            )
        if hidden is not None:
            self.hidden = hidden
