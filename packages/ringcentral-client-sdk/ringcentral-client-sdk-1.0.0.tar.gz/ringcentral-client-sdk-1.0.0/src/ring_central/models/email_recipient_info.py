# This file was generated by liblab | https://liblab.com/

from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel


class EmailRecipientInfoStatus(Enum):
    """An enumeration representing different categories.

    :cvar ENABLED: "Enabled"
    :vartype ENABLED: str
    :cvar DISABLE: "Disable"
    :vartype DISABLE: str
    :cvar NOTACTIVATED: "NotActivated"
    :vartype NOTACTIVATED: str
    :cvar UNASSIGNED: "Unassigned"
    :vartype UNASSIGNED: str
    """

    ENABLED = "Enabled"
    DISABLE = "Disable"
    NOTACTIVATED = "NotActivated"
    UNASSIGNED = "Unassigned"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, EmailRecipientInfoStatus._member_map_.values())
        )


class Permission(Enum):
    """An enumeration representing different categories.

    :cvar FULLACCESS: "FullAccess"
    :vartype FULLACCESS: str
    :cvar MESSAGES: "Messages"
    :vartype MESSAGES: str
    :cvar MEMBERMANAGEMENT: "MemberManagement"
    :vartype MEMBERMANAGEMENT: str
    """

    FULLACCESS = "FullAccess"
    MESSAGES = "Messages"
    MEMBERMANAGEMENT = "MemberManagement"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, Permission._member_map_.values()))


@JsonMap(
    {
        "extension_id": "extensionId",
        "full_name": "fullName",
        "extension_number": "extensionNumber",
        "email_addresses": "emailAddresses",
    }
)
class EmailRecipientInfo(BaseModel):
    """EmailRecipientInfo

    :param extension_id: Internal identifier of an extension, defaults to None
    :type extension_id: str, optional
    :param full_name: User full name, defaults to None
    :type full_name: str, optional
    :param extension_number: User extension number, defaults to None
    :type extension_number: str, optional
    :param status: Current state of an extension, defaults to None
    :type status: EmailRecipientInfoStatus, optional
    :param email_addresses: List of user email addresses from extension notification settings.<br>By default, main email address from contact information is returned<br>, defaults to None
    :type email_addresses: List[str], optional
    :param permission: Call queue manager permission, defaults to None
    :type permission: Permission, optional
    """

    def __init__(
        self,
        extension_id: str = None,
        full_name: str = None,
        extension_number: str = None,
        status: EmailRecipientInfoStatus = None,
        email_addresses: List[str] = None,
        permission: Permission = None,
    ):
        if extension_id is not None:
            self.extension_id = extension_id
        if full_name is not None:
            self.full_name = full_name
        if extension_number is not None:
            self.extension_number = extension_number
        if status is not None:
            self.status = self._enum_matching(
                status, EmailRecipientInfoStatus.list(), "status"
            )
        if email_addresses is not None:
            self.email_addresses = email_addresses
        if permission is not None:
            self.permission = self._enum_matching(
                permission, Permission.list(), "permission"
            )
