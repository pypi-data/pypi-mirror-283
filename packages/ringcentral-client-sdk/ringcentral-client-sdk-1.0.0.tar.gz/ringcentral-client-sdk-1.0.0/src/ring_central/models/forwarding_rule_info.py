# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .create_answering_rule_forwarding_number_info import (
    CreateAnsweringRuleForwardingNumberInfo,
)


@JsonMap({"ring_count": "ringCount", "forwarding_numbers": "forwardingNumbers"})
class ForwardingRuleInfo(BaseModel):
    """ForwardingRuleInfo

    :param index: Forwarding number (or group) ordinal, defaults to None
    :type index: int, optional
    :param ring_count: Number of rings for a forwarding number (or group), defaults to None
    :type ring_count: int, optional
    :param enabled: Forwarding number status. Returned only if `showInactiveNumbers` is set to `true`, defaults to None
    :type enabled: bool, optional
    :param forwarding_numbers: Forwarding number (or group) data, defaults to None
    :type forwarding_numbers: List[CreateAnsweringRuleForwardingNumberInfo], optional
    """

    def __init__(
        self,
        index: int = None,
        ring_count: int = None,
        enabled: bool = None,
        forwarding_numbers: List[CreateAnsweringRuleForwardingNumberInfo] = None,
    ):
        if index is not None:
            self.index = index
        if ring_count is not None:
            self.ring_count = ring_count
        if enabled is not None:
            self.enabled = enabled
        if forwarding_numbers is not None:
            self.forwarding_numbers = self._define_list(
                forwarding_numbers, CreateAnsweringRuleForwardingNumberInfo
            )
