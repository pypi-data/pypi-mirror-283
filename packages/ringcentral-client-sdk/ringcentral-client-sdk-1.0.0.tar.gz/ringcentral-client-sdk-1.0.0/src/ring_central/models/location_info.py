# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .location_state_info import LocationStateInfo


@JsonMap({"area_code": "areaCode"})
class LocationInfo(BaseModel):
    """LocationInfo

    :param uri: Canonical URI of a location, defaults to None
    :type uri: str, optional
    :param area_code: Area code of the location, defaults to None
    :type area_code: str, optional
    :param city: Official name of the city, belonging to the certain state<br>, defaults to None
    :type city: str, optional
    :param npa: Area code of the location (3-digit usually), according to the<br>NANP number format, that can be summarized as NPA-NXX-xxxx and covers<br>Canada, the United States, parts of the Caribbean Sea, and some Atlantic<br>and Pacific islands. See for details North American Numbering Plan<br>, defaults to None
    :type npa: str, optional
    :param nxx: Central office code of the location, according to the NANP<br>number format, that can be summarized as NPA-NXX-xxxx and covers Canada,<br>the United States, parts of the Caribbean Sea, and some Atlantic and Pacific<br>islands. See for details North American Numbering Plan<br>, defaults to None
    :type nxx: str, optional
    :param state: Information on a state this location belongs to, defaults to None
    :type state: LocationStateInfo, optional
    """

    def __init__(
        self,
        uri: str = None,
        area_code: str = None,
        city: str = None,
        npa: str = None,
        nxx: str = None,
        state: LocationStateInfo = None,
    ):
        if uri is not None:
            self.uri = uri
        if area_code is not None:
            self.area_code = area_code
        if city is not None:
            self.city = city
        if npa is not None:
            self.npa = npa
        if nxx is not None:
            self.nxx = nxx
        if state is not None:
            self.state = self._define_object(state, LocationStateInfo)
