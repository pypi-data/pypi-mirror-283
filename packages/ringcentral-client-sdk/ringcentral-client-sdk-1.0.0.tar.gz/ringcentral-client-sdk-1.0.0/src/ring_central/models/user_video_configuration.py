# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class Provider(Enum):
    """An enumeration representing different categories.

    :cvar RCMEETINGS: "RCMeetings"
    :vartype RCMEETINGS: str
    :cvar RCVIDEO: "RCVideo"
    :vartype RCVIDEO: str
    :cvar NONE: "None"
    :vartype NONE: str
    """

    RCMEETINGS = "RCMeetings"
    RCVIDEO = "RCVideo"
    NONE = "None"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, Provider._member_map_.values()))


class UserLicenseType(Enum):
    """An enumeration representing different categories.

    :cvar PAID: "Paid"
    :vartype PAID: str
    :cvar FREE: "Free"
    :vartype FREE: str
    """

    PAID = "Paid"
    FREE = "Free"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, UserLicenseType._member_map_.values()))


@JsonMap({"user_license_type": "userLicenseType"})
class UserVideoConfiguration(BaseModel):
    """UserVideoConfiguration

    :param provider: Video provider of the user, defaults to None
    :type provider: Provider, optional
    :param user_license_type: Specifies if the user is 'paid' (has meeting license) or 'free' (w/o meeting license)<br>, defaults to None
    :type user_license_type: UserLicenseType, optional
    """

    def __init__(
        self, provider: Provider = None, user_license_type: UserLicenseType = None
    ):
        if provider is not None:
            self.provider = self._enum_matching(provider, Provider.list(), "provider")
        if user_license_type is not None:
            self.user_license_type = self._enum_matching(
                user_license_type, UserLicenseType.list(), "user_license_type"
            )
