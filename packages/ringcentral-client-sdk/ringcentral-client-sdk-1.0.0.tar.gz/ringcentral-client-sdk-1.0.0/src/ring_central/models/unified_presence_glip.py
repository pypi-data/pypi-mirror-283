# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class UnifiedPresenceGlipStatus(Enum):
    """An enumeration representing different categories.

    :cvar OFFLINE: "Offline"
    :vartype OFFLINE: str
    :cvar ONLINE: "Online"
    :vartype ONLINE: str
    """

    OFFLINE = "Offline"
    ONLINE = "Online"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, UnifiedPresenceGlipStatus._member_map_.values())
        )


class UnifiedPresenceGlipVisibility(Enum):
    """An enumeration representing different categories.

    :cvar VISIBLE: "Visible"
    :vartype VISIBLE: str
    :cvar INVISIBLE: "Invisible"
    :vartype INVISIBLE: str
    """

    VISIBLE = "Visible"
    INVISIBLE = "Invisible"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, UnifiedPresenceGlipVisibility._member_map_.values())
        )


class UnifiedPresenceGlipAvailability(Enum):
    """An enumeration representing different categories.

    :cvar AVAILABLE: "Available"
    :vartype AVAILABLE: str
    :cvar DND: "DND"
    :vartype DND: str
    """

    AVAILABLE = "Available"
    DND = "DND"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value, UnifiedPresenceGlipAvailability._member_map_.values()
            )
        )


@JsonMap({})
class UnifiedPresenceGlip(BaseModel):
    """Returned if *Glip* feature is switched on

    :param status: Glip connection status calculated from all user's apps. Returned always for the requester's extension; returned for another users if their glip visibility is set to 'Visible', defaults to None
    :type status: UnifiedPresenceGlipStatus, optional
    :param visibility: Visibility setting allowing other users to see the user's Glip presence status; returned only for requester's extension, defaults to None
    :type visibility: UnifiedPresenceGlipVisibility, optional
    :param availability: Shows whether user wants to receive Glip notifications or not., defaults to None
    :type availability: UnifiedPresenceGlipAvailability, optional
    """

    def __init__(
        self,
        status: UnifiedPresenceGlipStatus = None,
        visibility: UnifiedPresenceGlipVisibility = None,
        availability: UnifiedPresenceGlipAvailability = None,
    ):
        if status is not None:
            self.status = self._enum_matching(
                status, UnifiedPresenceGlipStatus.list(), "status"
            )
        if visibility is not None:
            self.visibility = self._enum_matching(
                visibility, UnifiedPresenceGlipVisibility.list(), "visibility"
            )
        if availability is not None:
            self.availability = self._enum_matching(
                availability, UnifiedPresenceGlipAvailability.list(), "availability"
            )
