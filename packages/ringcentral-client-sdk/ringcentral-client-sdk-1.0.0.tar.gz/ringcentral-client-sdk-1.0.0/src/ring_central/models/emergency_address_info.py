# This file was generated by liblab | https://liblab.com/

from enum import Enum
from typing import Union
from .utils.json_map import JsonMap
from .base import BaseModel
from .base import OneOfBaseModel


class EmergencyAddressInfo1SyncStatus(Enum):
    """An enumeration representing different categories.

    :cvar VERIFIED: "Verified"
    :vartype VERIFIED: str
    :cvar UPDATED: "Updated"
    :vartype UPDATED: str
    :cvar DELETED: "Deleted"
    :vartype DELETED: str
    :cvar NOTREQUIRED: "NotRequired"
    :vartype NOTREQUIRED: str
    :cvar UNSUPPORTED: "Unsupported"
    :vartype UNSUPPORTED: str
    :cvar FAILED: "Failed"
    :vartype FAILED: str
    """

    VERIFIED = "Verified"
    UPDATED = "Updated"
    DELETED = "Deleted"
    NOTREQUIRED = "NotRequired"
    UNSUPPORTED = "Unsupported"
    FAILED = "Failed"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value, EmergencyAddressInfo1SyncStatus._member_map_.values()
            )
        )


@JsonMap(
    {
        "country_id": "countryId",
        "country_iso_code": "countryIsoCode",
        "country_name": "countryName",
        "state_id": "stateId",
        "state_iso_code": "stateIsoCode",
        "state_name": "stateName",
        "customer_name": "customerName",
        "sync_status": "syncStatus",
    }
)
class EmergencyAddressInfo1(BaseModel):
    """EmergencyAddressInfo1

    :param country: Country name, defaults to None
    :type country: str, optional
    :param country_id: Internal identifier of a country, defaults to None
    :type country_id: str, optional
    :param country_iso_code: ISO code of a country, defaults to None
    :type country_iso_code: str, optional
    :param country_name: Full name of a country, defaults to None
    :type country_name: str, optional
    :param state: State/Province name. Mandatory for the USA, the UK and Canada<br>, defaults to None
    :type state: str, optional
    :param state_id: Internal identifier of a state, defaults to None
    :type state_id: str, optional
    :param state_iso_code: ISO code of a state, defaults to None
    :type state_iso_code: str, optional
    :param state_name: Full name of a state, defaults to None
    :type state_name: str, optional
    :param city: City name, defaults to None
    :type city: str, optional
    :param street: First line address, defaults to None
    :type street: str, optional
    :param street2: Second line address (apartment, suite, unit, building, floor,<br>etc.)<br>, defaults to None
    :type street2: str, optional
    :param zip: Postal (Zip) code, defaults to None
    :type zip: str, optional
    :param customer_name: Customer name, defaults to None
    :type customer_name: str, optional
    :param sync_status: Resulting status of emergency address synchronization. Returned<br>for 'Get Device Info' request if `syncEmergencyAddress` parameter is set<br>to `true`<br>, defaults to None
    :type sync_status: EmergencyAddressInfo1SyncStatus, optional
    """

    def __init__(
        self,
        country: str = None,
        country_id: str = None,
        country_iso_code: str = None,
        country_name: str = None,
        state: str = None,
        state_id: str = None,
        state_iso_code: str = None,
        state_name: str = None,
        city: str = None,
        street: str = None,
        street2: str = None,
        zip: str = None,
        customer_name: str = None,
        sync_status: EmergencyAddressInfo1SyncStatus = None,
    ):
        if country is not None:
            self.country = country
        if country_id is not None:
            self.country_id = country_id
        if country_iso_code is not None:
            self.country_iso_code = country_iso_code
        if country_name is not None:
            self.country_name = country_name
        if state is not None:
            self.state = state
        if state_id is not None:
            self.state_id = state_id
        if state_iso_code is not None:
            self.state_iso_code = state_iso_code
        if state_name is not None:
            self.state_name = state_name
        if city is not None:
            self.city = city
        if street is not None:
            self.street = street
        if street2 is not None:
            self.street2 = street2
        if zip is not None:
            self.zip = zip
        if customer_name is not None:
            self.customer_name = customer_name
        if sync_status is not None:
            self.sync_status = self._enum_matching(
                sync_status, EmergencyAddressInfo1SyncStatus.list(), "sync_status"
            )


class EmergencyAddressInfo2SyncStatus(Enum):
    """An enumeration representing different categories.

    :cvar VERIFIED: "Verified"
    :vartype VERIFIED: str
    :cvar UPDATED: "Updated"
    :vartype UPDATED: str
    :cvar DELETED: "Deleted"
    :vartype DELETED: str
    :cvar NOTREQUIRED: "NotRequired"
    :vartype NOTREQUIRED: str
    :cvar UNSUPPORTED: "Unsupported"
    :vartype UNSUPPORTED: str
    :cvar FAILED: "Failed"
    :vartype FAILED: str
    """

    VERIFIED = "Verified"
    UPDATED = "Updated"
    DELETED = "Deleted"
    NOTREQUIRED = "NotRequired"
    UNSUPPORTED = "Unsupported"
    FAILED = "Failed"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value, EmergencyAddressInfo2SyncStatus._member_map_.values()
            )
        )


@JsonMap(
    {
        "country_id": "countryId",
        "country_iso_code": "countryIsoCode",
        "country_name": "countryName",
        "state_id": "stateId",
        "state_iso_code": "stateIsoCode",
        "state_name": "stateName",
        "company_name": "companyName",
        "building_name": "buildingName",
        "street_type": "streetType",
        "building_number": "buildingNumber",
        "customer_name": "customerName",
        "sync_status": "syncStatus",
    }
)
class EmergencyAddressInfo2(BaseModel):
    """EmergencyAddressInfo2

    :param country: Country name, defaults to None
    :type country: str, optional
    :param country_id: Internal identifier of a country, defaults to None
    :type country_id: str, optional
    :param country_iso_code: ISO code of a country, defaults to None
    :type country_iso_code: str, optional
    :param country_name: Full name of a country, defaults to None
    :type country_name: str, optional
    :param state: State/Province name. Mandatory for the USA, the UK and Canada<br>, defaults to None
    :type state: str, optional
    :param state_id: Internal identifier of a state, defaults to None
    :type state_id: str, optional
    :param state_iso_code: ISO code of a state, defaults to None
    :type state_iso_code: str, optional
    :param state_name: Full name of a state, defaults to None
    :type state_name: str, optional
    :param city: City name, defaults to None
    :type city: str, optional
    :param street: The name of the street (the field is utilized as 'streetName' field for AU addresses), defaults to None
    :type street: str, optional
    :param company_name: Company name, defaults to None
    :type company_name: str, optional
    :param building_name: (Optional) Building name, defaults to None
    :type building_name: str, optional
    :param street_type: Street type, defaults to None
    :type street_type: str, optional
    :param building_number: Building/street number, defaults to None
    :type building_number: str, optional
    :param street2: Second line address (apartment, suite, unit, building, floor, etc.)<br>, defaults to None
    :type street2: str, optional
    :param zip: Postal (Zip) code, defaults to None
    :type zip: str, optional
    :param customer_name: Customer name, defaults to None
    :type customer_name: str, optional
    :param sync_status: Resulting status of emergency address synchronization. Returned<br>for 'Get Device Info' request if `syncEmergencyAddress` parameter is set<br>to `true`<br>, defaults to None
    :type sync_status: EmergencyAddressInfo2SyncStatus, optional
    """

    def __init__(
        self,
        country: str = None,
        country_id: str = None,
        country_iso_code: str = None,
        country_name: str = None,
        state: str = None,
        state_id: str = None,
        state_iso_code: str = None,
        state_name: str = None,
        city: str = None,
        street: str = None,
        company_name: str = None,
        building_name: str = None,
        street_type: str = None,
        building_number: str = None,
        street2: str = None,
        zip: str = None,
        customer_name: str = None,
        sync_status: EmergencyAddressInfo2SyncStatus = None,
    ):
        if country is not None:
            self.country = country
        if country_id is not None:
            self.country_id = country_id
        if country_iso_code is not None:
            self.country_iso_code = country_iso_code
        if country_name is not None:
            self.country_name = country_name
        if state is not None:
            self.state = state
        if state_id is not None:
            self.state_id = state_id
        if state_iso_code is not None:
            self.state_iso_code = state_iso_code
        if state_name is not None:
            self.state_name = state_name
        if city is not None:
            self.city = city
        if street is not None:
            self.street = street
        if company_name is not None:
            self.company_name = company_name
        if building_name is not None:
            self.building_name = building_name
        if street_type is not None:
            self.street_type = street_type
        if building_number is not None:
            self.building_number = building_number
        if street2 is not None:
            self.street2 = street2
        if zip is not None:
            self.zip = zip
        if customer_name is not None:
            self.customer_name = customer_name
        if sync_status is not None:
            self.sync_status = self._enum_matching(
                sync_status, EmergencyAddressInfo2SyncStatus.list(), "sync_status"
            )


class EmergencyAddressInfo3SyncStatus(Enum):
    """An enumeration representing different categories.

    :cvar VERIFIED: "Verified"
    :vartype VERIFIED: str
    :cvar UPDATED: "Updated"
    :vartype UPDATED: str
    :cvar DELETED: "Deleted"
    :vartype DELETED: str
    :cvar NOTREQUIRED: "NotRequired"
    :vartype NOTREQUIRED: str
    :cvar UNSUPPORTED: "Unsupported"
    :vartype UNSUPPORTED: str
    :cvar FAILED: "Failed"
    :vartype FAILED: str
    """

    VERIFIED = "Verified"
    UPDATED = "Updated"
    DELETED = "Deleted"
    NOTREQUIRED = "NotRequired"
    UNSUPPORTED = "Unsupported"
    FAILED = "Failed"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value, EmergencyAddressInfo3SyncStatus._member_map_.values()
            )
        )


@JsonMap(
    {
        "country_id": "countryId",
        "country_iso_code": "countryIsoCode",
        "country_name": "countryName",
        "state_id": "stateId",
        "state_iso_code": "stateIsoCode",
        "state_name": "stateName",
        "company_name": "companyName",
        "building_name": "buildingName",
        "building_number": "buildingNumber",
        "customer_name": "customerName",
        "sync_status": "syncStatus",
    }
)
class EmergencyAddressInfo3(BaseModel):
    """EmergencyAddressInfo3

    :param country: Country name, defaults to None
    :type country: str, optional
    :param country_id: Internal identifier of a country, defaults to None
    :type country_id: str, optional
    :param country_iso_code: ISO code of a country, defaults to None
    :type country_iso_code: str, optional
    :param country_name: Full name of a country, defaults to None
    :type country_name: str, optional
    :param state: State/Province name. Mandatory for the USA, the UK and Canada<br>, defaults to None
    :type state: str, optional
    :param state_id: Internal identifier of a state, defaults to None
    :type state_id: str, optional
    :param state_iso_code: ISO code of a state, defaults to None
    :type state_iso_code: str, optional
    :param state_name: Full name of a state, defaults to None
    :type state_name: str, optional
    :param city: City name, defaults to None
    :type city: str, optional
    :param street: The name of the street (The field is utilized as 'streetName' field for FR addresses), defaults to None
    :type street: str, optional
    :param company_name: Company name, defaults to None
    :type company_name: str, optional
    :param building_name: (Optional) Building name, defaults to None
    :type building_name: str, optional
    :param building_number: Building/street number, defaults to None
    :type building_number: str, optional
    :param street2: Second line address (apartment, suite, unit, building, floor,<br>etc.)<br>, defaults to None
    :type street2: str, optional
    :param zip: Postal (Zip) code, defaults to None
    :type zip: str, optional
    :param customer_name: Customer name, defaults to None
    :type customer_name: str, optional
    :param sync_status: Resulting status of emergency address synchronization. Returned<br>for 'Get Device Info' request if `syncEmergencyAddress` parameter is set<br>to `true`<br>, defaults to None
    :type sync_status: EmergencyAddressInfo3SyncStatus, optional
    """

    def __init__(
        self,
        country: str = None,
        country_id: str = None,
        country_iso_code: str = None,
        country_name: str = None,
        state: str = None,
        state_id: str = None,
        state_iso_code: str = None,
        state_name: str = None,
        city: str = None,
        street: str = None,
        company_name: str = None,
        building_name: str = None,
        building_number: str = None,
        street2: str = None,
        zip: str = None,
        customer_name: str = None,
        sync_status: EmergencyAddressInfo3SyncStatus = None,
    ):
        if country is not None:
            self.country = country
        if country_id is not None:
            self.country_id = country_id
        if country_iso_code is not None:
            self.country_iso_code = country_iso_code
        if country_name is not None:
            self.country_name = country_name
        if state is not None:
            self.state = state
        if state_id is not None:
            self.state_id = state_id
        if state_iso_code is not None:
            self.state_iso_code = state_iso_code
        if state_name is not None:
            self.state_name = state_name
        if city is not None:
            self.city = city
        if street is not None:
            self.street = street
        if company_name is not None:
            self.company_name = company_name
        if building_name is not None:
            self.building_name = building_name
        if building_number is not None:
            self.building_number = building_number
        if street2 is not None:
            self.street2 = street2
        if zip is not None:
            self.zip = zip
        if customer_name is not None:
            self.customer_name = customer_name
        if sync_status is not None:
            self.sync_status = self._enum_matching(
                sync_status, EmergencyAddressInfo3SyncStatus.list(), "sync_status"
            )


class EmergencyAddressInfoGuard(OneOfBaseModel):
    class_list = {
        "EmergencyAddressInfo1": EmergencyAddressInfo1,
        "EmergencyAddressInfo2": EmergencyAddressInfo2,
        "EmergencyAddressInfo3": EmergencyAddressInfo3,
    }


EmergencyAddressInfo = Union[
    EmergencyAddressInfo1, EmergencyAddressInfo2, EmergencyAddressInfo3
]
