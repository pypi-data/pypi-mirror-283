# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .task_recurrence_info import TaskRecurrenceInfo
from .tm_attachment_info import TmAttachmentInfo


@JsonMap({"id_": "id"})
class TmCreateTaskRequestAssignees(BaseModel):
    """TmCreateTaskRequestAssignees

    :param id_: Internal identifier of an assignee, defaults to None
    :type id_: str, optional
    """

    def __init__(self, id_: str = None):
        if id_ is not None:
            self.id_ = id_


class TmCreateTaskRequestCompletenessCondition(Enum):
    """An enumeration representing different categories.

    :cvar SIMPLE: "Simple"
    :vartype SIMPLE: str
    :cvar ALLASSIGNEES: "AllAssignees"
    :vartype ALLASSIGNEES: str
    :cvar PERCENTAGE: "Percentage"
    :vartype PERCENTAGE: str
    """

    SIMPLE = "Simple"
    ALLASSIGNEES = "AllAssignees"
    PERCENTAGE = "Percentage"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                TmCreateTaskRequestCompletenessCondition._member_map_.values(),
            )
        )


class TmCreateTaskRequestColor(Enum):
    """An enumeration representing different categories.

    :cvar BLACK: "Black"
    :vartype BLACK: str
    :cvar RED: "Red"
    :vartype RED: str
    :cvar ORANGE: "Orange"
    :vartype ORANGE: str
    :cvar YELLOW: "Yellow"
    :vartype YELLOW: str
    :cvar GREEN: "Green"
    :vartype GREEN: str
    :cvar BLUE: "Blue"
    :vartype BLUE: str
    :cvar PURPLE: "Purple"
    :vartype PURPLE: str
    :cvar MAGENTA: "Magenta"
    :vartype MAGENTA: str
    """

    BLACK = "Black"
    RED = "Red"
    ORANGE = "Orange"
    YELLOW = "Yellow"
    GREEN = "Green"
    BLUE = "Blue"
    PURPLE = "Purple"
    MAGENTA = "Magenta"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, TmCreateTaskRequestColor._member_map_.values())
        )


@JsonMap(
    {
        "completeness_condition": "completenessCondition",
        "start_date": "startDate",
        "due_date": "dueDate",
    }
)
class TmCreateTaskRequest(BaseModel):
    """TmCreateTaskRequest

    :param subject: Task name/subject. Max allowed length is 250 characters
    :type subject: str
    :param assignees: assignees
    :type assignees: List[TmCreateTaskRequestAssignees]
    :param completeness_condition: completeness_condition, defaults to None
    :type completeness_condition: TmCreateTaskRequestCompletenessCondition, optional
    :param start_date: Task start date in UTC time zone., defaults to None
    :type start_date: str, optional
    :param due_date: Task due date/time in UTC time zone., defaults to None
    :type due_date: str, optional
    :param color: color, defaults to None
    :type color: TmCreateTaskRequestColor, optional
    :param section: Task section to group / search by. Max allowed length is 100 characters., defaults to None
    :type section: str, optional
    :param description: Task details. Max allowed length is 102400 characters (100kB)., defaults to None
    :type description: str, optional
    :param recurrence: Task information, defaults to None
    :type recurrence: TaskRecurrenceInfo, optional
    :param attachments: attachments, defaults to None
    :type attachments: List[TmAttachmentInfo], optional
    """

    def __init__(
        self,
        subject: str,
        assignees: List[TmCreateTaskRequestAssignees],
        completeness_condition: TmCreateTaskRequestCompletenessCondition = None,
        start_date: str = None,
        due_date: str = None,
        color: TmCreateTaskRequestColor = None,
        section: str = None,
        description: str = None,
        recurrence: TaskRecurrenceInfo = None,
        attachments: List[TmAttachmentInfo] = None,
    ):
        self.subject = subject
        self.assignees = self._define_list(assignees, TmCreateTaskRequestAssignees)
        if completeness_condition is not None:
            self.completeness_condition = self._enum_matching(
                completeness_condition,
                TmCreateTaskRequestCompletenessCondition.list(),
                "completeness_condition",
            )
        if start_date is not None:
            self.start_date = start_date
        if due_date is not None:
            self.due_date = due_date
        if color is not None:
            self.color = self._enum_matching(
                color, TmCreateTaskRequestColor.list(), "color"
            )
        if section is not None:
            self.section = section
        if description is not None:
            self.description = description
        if recurrence is not None:
            self.recurrence = self._define_object(recurrence, TaskRecurrenceInfo)
        if attachments is not None:
            self.attachments = self._define_list(attachments, TmAttachmentInfo)
