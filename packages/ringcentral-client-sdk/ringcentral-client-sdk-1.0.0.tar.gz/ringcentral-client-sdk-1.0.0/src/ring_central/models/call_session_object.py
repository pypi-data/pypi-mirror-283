# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .origin_info import OriginInfo
from .call_party import CallParty


@JsonMap(
    {"id_": "id", "voice_call_token": "voiceCallToken", "creation_time": "creationTime"}
)
class CallSessionObject(BaseModel):
    """Call session information

    :param id_: Internal identifier of a call session, defaults to None
    :type id_: str, optional
    :param origin: Session origin details, defaults to None
    :type origin: OriginInfo, optional
    :param voice_call_token: For calls of 'Conference' type only, defaults to None
    :type voice_call_token: str, optional
    :param parties: parties, defaults to None
    :type parties: List[CallParty], optional
    :param creation_time: Date and time of the latest session update represented in Unix time format, defaults to None
    :type creation_time: str, optional
    """

    def __init__(
        self,
        id_: str = None,
        origin: OriginInfo = None,
        voice_call_token: str = None,
        parties: List[CallParty] = None,
        creation_time: str = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if origin is not None:
            self.origin = self._define_object(origin, OriginInfo)
        if voice_call_token is not None:
            self.voice_call_token = voice_call_token
        if parties is not None:
            self.parties = self._define_list(parties, CallParty)
        if creation_time is not None:
            self.creation_time = creation_time
