# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel
from .country_info_short_model import CountryInfoShortModel
from .timezone_info import TimezoneInfo
from .regional_language_info import RegionalLanguageInfo
from .greeting_language_info import GreetingLanguageInfo
from .formatting_locale_info import FormattingLocaleInfo


class RegionalSettingsTimeFormat(Enum):
    """An enumeration representing different categories.

    :cvar _12H: "12h"
    :vartype _12H: str
    :cvar _24H: "24h"
    :vartype _24H: str
    """

    _12H = "12h"
    _24H = "24h"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, RegionalSettingsTimeFormat._member_map_.values())
        )


@JsonMap(
    {
        "home_country": "homeCountry",
        "greeting_language": "greetingLanguage",
        "formatting_locale": "formattingLocale",
        "time_format": "timeFormat",
    }
)
class RegionalSettings(BaseModel):
    """Regional data (timezone, home country, language) of an extension/account.
    The default is Company (Auto-Receptionist) settings


    :param home_country: home_country, defaults to None
    :type home_country: CountryInfoShortModel, optional
    :param timezone: Extension timezone information, defaults to None
    :type timezone: TimezoneInfo, optional
    :param language: Information on a language set as regional, defaults to None
    :type language: RegionalLanguageInfo, optional
    :param greeting_language: Information on language used for telephony greetings<br>, defaults to None
    :type greeting_language: GreetingLanguageInfo, optional
    :param formatting_locale: Formatting language preferences for numbers, dates and currencies<br>, defaults to None
    :type formatting_locale: FormattingLocaleInfo, optional
    :param time_format: Time format setting. The default value is '12h' = ['12h', '24h'], defaults to None
    :type time_format: RegionalSettingsTimeFormat, optional
    """

    def __init__(
        self,
        home_country: CountryInfoShortModel = None,
        timezone: TimezoneInfo = None,
        language: RegionalLanguageInfo = None,
        greeting_language: GreetingLanguageInfo = None,
        formatting_locale: FormattingLocaleInfo = None,
        time_format: RegionalSettingsTimeFormat = None,
    ):
        if home_country is not None:
            self.home_country = self._define_object(home_country, CountryInfoShortModel)
        if timezone is not None:
            self.timezone = self._define_object(timezone, TimezoneInfo)
        if language is not None:
            self.language = self._define_object(language, RegionalLanguageInfo)
        if greeting_language is not None:
            self.greeting_language = self._define_object(
                greeting_language, GreetingLanguageInfo
            )
        if formatting_locale is not None:
            self.formatting_locale = self._define_object(
                formatting_locale, FormattingLocaleInfo
            )
        if time_format is not None:
            self.time_format = self._enum_matching(
                time_format, RegionalSettingsTimeFormat.list(), "time_format"
            )
