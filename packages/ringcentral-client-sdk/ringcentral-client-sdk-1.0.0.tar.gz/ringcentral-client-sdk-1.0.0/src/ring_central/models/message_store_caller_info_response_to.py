# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .message_status_enum import MessageStatusEnum
from .fax_error_code_enum import FaxErrorCodeEnum


@JsonMap(
    {
        "extension_number": "extensionNumber",
        "extension_id": "extensionId",
        "message_status": "messageStatus",
        "fax_error_code": "faxErrorCode",
        "phone_number": "phoneNumber",
        "recipient_id": "recipientId",
    }
)
class MessageStoreCallerInfoResponseTo(BaseModel):
    """MessageStoreCallerInfoResponseTo

    :param extension_number: Extension short number (usually 3 or 4 digits). This property<br>is filled when parties communicate by means of short internal numbers,<br>for example when calling to other extension or sending/receiving Company<br>Pager messages<br>, defaults to None
    :type extension_number: str, optional
    :param extension_id: extension_id, defaults to None
    :type extension_id: str, optional
    :param location: Contains party location (city, state) if one can be determined<br>from a phone number. This property is filled only when `phoneNumber` is not<br>empty and a server can calculate location information from it (for example,<br>this information is unavailable for US toll-free numbers)<br>, defaults to None
    :type location: str, optional
    :param target: The `true` value specifies that message is sent exactly to this recipient.<br>Returned in the `to` field for group MMS. Useful if one extension has several<br>phone numbers'<br>, defaults to None
    :type target: bool, optional
    :param message_status: Message status. Different message types may have different<br>allowed status values. For outbound faxes the aggregated message status<br>is returned. If, for outbound message, a status for at least one recipient is 'Queued', then<br>the 'Queued' value is returned. If a status for at least one recipient is<br>'SendingFailed', then the 'SendingFailed' value is returned. In other cases<br>the 'Sent' status is returned<br>, defaults to None
    :type message_status: MessageStatusEnum, optional
    :param fax_error_code: fax_error_code, defaults to None
    :type fax_error_code: FaxErrorCodeEnum, optional
    :param name: Symbolic name associated with a party. If the phone does not<br>belong to the known extension, only the location is returned, the name<br>is not determined then<br>, defaults to None
    :type name: str, optional
    :param phone_number: Phone number of a party. Usually it is a plain number including<br>country and area code like 18661234567. But sometimes it could be returned<br>from database with some formatting applied, for example (866)123-4567.<br>This property is filled in all cases where parties communicate by means<br>of global phone numbers, for example when calling to direct numbers or<br>sending/receiving SMS<br>, defaults to None
    :type phone_number: str, optional
    :param recipient_id: Internal identifier of a message recipient, defaults to None
    :type recipient_id: str, optional
    """

    def __init__(
        self,
        extension_number: str = None,
        extension_id: str = None,
        location: str = None,
        target: bool = None,
        message_status: MessageStatusEnum = None,
        fax_error_code: FaxErrorCodeEnum = None,
        name: str = None,
        phone_number: str = None,
        recipient_id: str = None,
    ):
        if extension_number is not None:
            self.extension_number = extension_number
        if extension_id is not None:
            self.extension_id = extension_id
        if location is not None:
            self.location = location
        if target is not None:
            self.target = target
        if message_status is not None:
            self.message_status = self._enum_matching(
                message_status, MessageStatusEnum.list(), "message_status"
            )
        if fax_error_code is not None:
            self.fax_error_code = self._enum_matching(
                fax_error_code, FaxErrorCodeEnum.list(), "fax_error_code"
            )
        if name is not None:
            self.name = name
        if phone_number is not None:
            self.phone_number = phone_number
        if recipient_id is not None:
            self.recipient_id = recipient_id
