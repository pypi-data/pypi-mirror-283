# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel
from .rcw_role_enum import RcwRoleEnum
from .rcw_domain_user_model import RcwDomainUserModel


class InviteeModelType(Enum):
    """An enumeration representing different categories.

    :cvar USER: "User"
    :vartype USER: str
    :cvar ROOM: "Room"
    :vartype ROOM: str
    """

    USER = "User"
    ROOM = "Room"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, InviteeModelType._member_map_.values()))


@JsonMap(
    {
        "id_": "id",
        "first_name": "firstName",
        "last_name": "lastName",
        "original_role": "originalRole",
        "linked_user": "linkedUser",
        "avatar_token": "avatarToken",
        "type_": "type",
        "qna_blocked": "qnaBlocked",
        "send_invite": "sendInvite",
    }
)
class InviteeModel(BaseModel):
    """InviteeModel

    :param id_: Internal object ID, defaults to None
    :type id_: str, optional
    :param first_name: First (given) name, defaults to None
    :type first_name: str, optional
    :param last_name: Last (family) name, defaults to None
    :type last_name: str, optional
    :param role: The role of the webinar session participant/invitee.<br>See also: [Understanding Webinar Roles](https://support.ringcentral.com/webinar/getting-started/understanding-ringcentral-webinar-roles.html)<br>
    :type role: RcwRoleEnum
    :param original_role: The role of the webinar session participant/invitee.<br>See also: [Understanding Webinar Roles](https://support.ringcentral.com/webinar/getting-started/understanding-ringcentral-webinar-roles.html)<br>
    :type original_role: RcwRoleEnum
    :param linked_user: linked_user, defaults to None
    :type linked_user: RcwDomainUserModel, optional
    :param avatar_token: A token to access avatar image from CDN. Available only for authenticated panelists, defaults to None
    :type avatar_token: str, optional
    :param type_: The type of the participant specified in invite or determined at join time
    :type type_: InviteeModelType
    :param email: User's contact email, defaults to None
    :type email: str, optional
    :param qna_blocked: Boolean to indicate if the participant was blocked from Q&A<br>, defaults to None
    :type qna_blocked: bool, optional
    :param send_invite: Indicates if invite/cancellation emails was sent to this invitee.<br>
    :type send_invite: bool
    :param joined: Indicates that this invitee joined the session
    :type joined: bool
    """

    def __init__(
        self,
        role: RcwRoleEnum,
        original_role: RcwRoleEnum,
        type_: InviteeModelType,
        send_invite: bool,
        joined: bool,
        id_: str = None,
        first_name: str = None,
        last_name: str = None,
        linked_user: RcwDomainUserModel = None,
        avatar_token: str = None,
        email: str = None,
        qna_blocked: bool = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        self.role = self._enum_matching(role, RcwRoleEnum.list(), "role")
        self.original_role = self._enum_matching(
            original_role, RcwRoleEnum.list(), "original_role"
        )
        if linked_user is not None:
            self.linked_user = self._define_object(linked_user, RcwDomainUserModel)
        if avatar_token is not None:
            self.avatar_token = avatar_token
        self.type_ = self._enum_matching(type_, InviteeModelType.list(), "type_")
        if email is not None:
            self.email = email
        if qna_blocked is not None:
            self.qna_blocked = qna_blocked
        self.send_invite = send_invite
        self.joined = joined
