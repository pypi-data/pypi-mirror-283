# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel
from .audio_prompt_info import AudioPromptInfo
from .prompt_language_info import PromptLanguageInfo


class IvrMenuPromptInfoMode(Enum):
    """An enumeration representing different categories.

    :cvar AUDIO: "Audio"
    :vartype AUDIO: str
    :cvar TEXTTOSPEECH: "TextToSpeech"
    :vartype TEXTTOSPEECH: str
    """

    AUDIO = "Audio"
    TEXTTOSPEECH = "TextToSpeech"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, IvrMenuPromptInfoMode._member_map_.values()))


@JsonMap({})
class IvrMenuPromptInfo(BaseModel):
    """Prompt metadata

    :param mode: Prompt mode: custom media or text, defaults to None
    :type mode: IvrMenuPromptInfoMode, optional
    :param audio: For 'Audio' mode only. Prompt media reference, defaults to None
    :type audio: AudioPromptInfo, optional
    :param text: For 'TextToSpeech' mode only. Prompt text, defaults to None
    :type text: str, optional
    :param language: For 'TextToSpeech' mode only. Prompt language metadata, defaults to None
    :type language: PromptLanguageInfo, optional
    """

    def __init__(
        self,
        mode: IvrMenuPromptInfoMode = None,
        audio: AudioPromptInfo = None,
        text: str = None,
        language: PromptLanguageInfo = None,
    ):
        if mode is not None:
            self.mode = self._enum_matching(mode, IvrMenuPromptInfoMode.list(), "mode")
        if audio is not None:
            self.audio = self._define_object(audio, AudioPromptInfo)
        if text is not None:
            self.text = text
        if language is not None:
            self.language = self._define_object(language, PromptLanguageInfo)
