# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel
from .answering_rule_query_request import AnsweringRuleQueryRequest


class CreateCompanyGreetingRequestType1(Enum):
    """An enumeration representing different categories.

    :cvar COMPANY: "Company"
    :vartype COMPANY: str
    :cvar STARTRECORDING: "StartRecording"
    :vartype STARTRECORDING: str
    :cvar STOPRECORDING: "StopRecording"
    :vartype STOPRECORDING: str
    :cvar AUTOMATICRECORDING: "AutomaticRecording"
    :vartype AUTOMATICRECORDING: str
    :cvar TEMPLATEGREETING: "TemplateGreeting"
    :vartype TEMPLATEGREETING: str
    """

    COMPANY = "Company"
    STARTRECORDING = "StartRecording"
    STOPRECORDING = "StopRecording"
    AUTOMATICRECORDING = "AutomaticRecording"
    TEMPLATEGREETING = "TemplateGreeting"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                CreateCompanyGreetingRequestType1._member_map_.values(),
            )
        )


@JsonMap(
    {"type_": "type", "answering_rule": "answeringRule", "language_id": "languageId"}
)
class GreetingsCreateCompanyGreetingRequest1(BaseModel):
    """GreetingsCreateCompanyGreetingRequest1

    :param type_: Type of greeting, specifying the case when the greeting<br>is played.<br>
    :type type_: CreateCompanyGreetingRequestType1
    :param answering_rule: answering_rule, defaults to None
    :type answering_rule: AnsweringRuleQueryRequest, optional
    :param language_id: Internal identifier of a language. See Get Language<br>List<br>, defaults to None
    :type language_id: str, optional
    :param binary: Media file to upload
    :type binary: any
    """

    def __init__(
        self,
        type_: CreateCompanyGreetingRequestType1,
        binary: any,
        answering_rule: AnsweringRuleQueryRequest = None,
        language_id: str = None,
    ):
        self.type_ = self._enum_matching(
            type_, CreateCompanyGreetingRequestType1.list(), "type_"
        )
        if answering_rule is not None:
            self.answering_rule = self._define_object(
                answering_rule, AnsweringRuleQueryRequest
            )
        if language_id is not None:
            self.language_id = language_id
        self.binary = binary
