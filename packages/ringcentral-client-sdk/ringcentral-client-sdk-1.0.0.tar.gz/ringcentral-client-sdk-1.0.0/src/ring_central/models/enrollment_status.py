# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class EnrollmentQuality(Enum):
    """An enumeration representing different categories.

    :cvar POOR: "Poor"
    :vartype POOR: str
    :cvar AVERAGE: "Average"
    :vartype AVERAGE: str
    :cvar GOOD: "Good"
    :vartype GOOD: str
    :cvar HIGH: "High"
    :vartype HIGH: str
    """

    POOR = "Poor"
    AVERAGE = "Average"
    GOOD = "Good"
    HIGH = "High"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, EnrollmentQuality._member_map_.values()))


@JsonMap(
    {
        "enrollment_quality": "enrollmentQuality",
        "enrollment_complete": "enrollmentComplete",
        "speaker_id": "speakerId",
        "total_enroll_duration": "totalEnrollDuration",
        "total_speech_duration": "totalSpeechDuration",
    }
)
class EnrollmentStatus(BaseModel):
    """EnrollmentStatus

    :param enrollment_quality: Quality of the enrollment., defaults to None
    :type enrollment_quality: EnrollmentQuality, optional
    :param enrollment_complete: Status of the enrollment.
    :type enrollment_complete: bool
    :param speaker_id: speaker_id
    :type speaker_id: str
    :param total_enroll_duration: Total speech duration of the enrollment in seconds., defaults to None
    :type total_enroll_duration: float, optional
    :param total_speech_duration: Total duration of the enrollment in seconds.
    :type total_speech_duration: float
    """

    def __init__(
        self,
        enrollment_complete: bool,
        speaker_id: str,
        total_speech_duration: float,
        enrollment_quality: EnrollmentQuality = None,
        total_enroll_duration: float = None,
    ):
        if enrollment_quality is not None:
            self.enrollment_quality = self._enum_matching(
                enrollment_quality, EnrollmentQuality.list(), "enrollment_quality"
            )
        self.enrollment_complete = enrollment_complete
        self.speaker_id = speaker_id
        if total_enroll_duration is not None:
            self.total_enroll_duration = total_enroll_duration
        self.total_speech_duration = total_speech_duration
