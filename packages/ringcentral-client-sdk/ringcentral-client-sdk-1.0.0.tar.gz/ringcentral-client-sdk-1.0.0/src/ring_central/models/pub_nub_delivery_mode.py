# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class PubNubDeliveryModeTransportType(Enum):
    """An enumeration representing different categories.

    :cvar PUBNUB: "PubNub"
    :vartype PUBNUB: str
    """

    PUBNUB = "PubNub"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value, PubNubDeliveryModeTransportType._member_map_.values()
            )
        )


class EncryptionAlgorithm(Enum):
    """An enumeration representing different categories.

    :cvar AES: "AES"
    :vartype AES: str
    """

    AES = "AES"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, EncryptionAlgorithm._member_map_.values()))


@JsonMap(
    {
        "transport_type": "transportType",
        "subscriber_key": "subscriberKey",
        "secret_key": "secretKey",
        "encryption_algorithm": "encryptionAlgorithm",
        "encryption_key": "encryptionKey",
    }
)
class PubNubDeliveryMode(BaseModel):
    """PubNubDeliveryMode

    :param transport_type: The transport type for this subscription, or the channel by which an app should be notified of an event
    :type transport_type: PubNubDeliveryModeTransportType
    :param encryption: Optional. Specifies if notification messages will be encrypted<br>or not. Please note that for some event filters (e.g. presence) encryption is mandatory and<br>`false` value provided by caller will be ignored.<br>
    :type encryption: bool
    :param address: PubNub channel name<br>
    :type address: str
    :param subscriber_key: PubNub credential required to subscribe to the channel
    :type subscriber_key: str
    :param secret_key: PubNub credential required to subscribe to the channel
    :type secret_key: str
    :param encryption_algorithm: (Only for a "PubNub" transport, returned only if `encryption` is `true`)<br>Encryption algorithm used<br>, defaults to None
    :type encryption_algorithm: EncryptionAlgorithm, optional
    :param encryption_key: (Only for a "PubNub" transport, returned only if `encryption` is `true`)<br>Cryptographic key to decrypt PubNub notification messages<br>, defaults to None
    :type encryption_key: str, optional
    """

    def __init__(
        self,
        transport_type: PubNubDeliveryModeTransportType,
        encryption: bool,
        address: str,
        subscriber_key: str,
        secret_key: str,
        encryption_algorithm: EncryptionAlgorithm = None,
        encryption_key: str = None,
    ):
        self.transport_type = self._enum_matching(
            transport_type, PubNubDeliveryModeTransportType.list(), "transport_type"
        )
        self.encryption = encryption
        self.address = address
        self.subscriber_key = subscriber_key
        self.secret_key = secret_key
        if encryption_algorithm is not None:
            self.encryption_algorithm = self._enum_matching(
                encryption_algorithm, EncryptionAlgorithm.list(), "encryption_algorithm"
            )
        if encryption_key is not None:
            self.encryption_key = encryption_key
