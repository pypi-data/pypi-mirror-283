# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .add_invitee_request import AddInviteeRequest
from .rcw_resource_id_model import RcwResourceIdModel
from .rcw_role_enum import RcwRoleEnum
from .rcw_invitee_type_enum import RcwInviteeTypeEnum


@JsonMap(
    {
        "id_": "id",
        "first_name": "firstName",
        "last_name": "lastName",
        "job_title": "jobTitle",
        "type_": "type",
        "send_invite": "sendInvite",
    }
)
class UpdatedInvitees(BaseModel):
    """UpdatedInvitees

    :param id_: Internal object ID, defaults to None
    :type id_: str, optional
    :param first_name: First (given) name, defaults to None
    :type first_name: str, optional
    :param last_name: Last (family) name, defaults to None
    :type last_name: str, optional
    :param email: User's contact email, defaults to None
    :type email: str, optional
    :param job_title: Job title, defaults to None
    :type job_title: str, optional
    :param role: The role of the webinar session participant/invitee.<br>See also: [Understanding Webinar Roles](https://support.ringcentral.com/webinar/getting-started/understanding-ringcentral-webinar-roles.html)<br>
    :type role: RcwRoleEnum
    :param type_: The type of the webinar invitee, defaults to None
    :type type_: RcwInviteeTypeEnum, optional
    :param send_invite: Indicates if invite/cancellation emails have to be sent to this invitee.<br>For "Host" it cannot be set to false.<br>If it is true it can't be changed back to false.<br>, defaults to None
    :type send_invite: bool, optional
    """

    def __init__(
        self,
        role: RcwRoleEnum,
        id_: str = None,
        first_name: str = None,
        last_name: str = None,
        email: str = None,
        job_title: str = None,
        type_: RcwInviteeTypeEnum = None,
        send_invite: bool = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if email is not None:
            self.email = email
        if job_title is not None:
            self.job_title = job_title
        self.role = self._enum_matching(role, RcwRoleEnum.list(), "role")
        if type_ is not None:
            self.type_ = self._enum_matching(type_, RcwInviteeTypeEnum.list(), "type_")
        if send_invite is not None:
            self.send_invite = send_invite


@JsonMap(
    {
        "added_invitees": "addedInvitees",
        "updated_invitees": "updatedInvitees",
        "deleted_invitees": "deletedInvitees",
    }
)
class BulkUpdateInviteesRequest(BaseModel):
    """BulkUpdateInviteesRequest

    :param added_invitees: added_invitees, defaults to None
    :type added_invitees: List[AddInviteeRequest], optional
    :param updated_invitees: updated_invitees, defaults to None
    :type updated_invitees: List[UpdatedInvitees], optional
    :param deleted_invitees: deleted_invitees, defaults to None
    :type deleted_invitees: List[RcwResourceIdModel], optional
    """

    def __init__(
        self,
        added_invitees: List[AddInviteeRequest] = None,
        updated_invitees: List[UpdatedInvitees] = None,
        deleted_invitees: List[RcwResourceIdModel] = None,
    ):
        if added_invitees is not None:
            self.added_invitees = self._define_list(added_invitees, AddInviteeRequest)
        if updated_invitees is not None:
            self.updated_invitees = self._define_list(updated_invitees, UpdatedInvitees)
        if deleted_invitees is not None:
            self.deleted_invitees = self._define_list(
                deleted_invitees, RcwResourceIdModel
            )
