# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .webhook_delivery_mode_request import WebhookDeliveryModeRequest


@JsonMap(
    {
        "event_filters": "eventFilters",
        "expires_in": "expiresIn",
        "delivery_mode": "deliveryMode",
    }
)
class CreateWebhookSubscriptionRequest(BaseModel):
    """CreateWebhookSubscriptionRequest

    :param event_filters: The list of event filters corresponding to events the user is subscribed to
    :type event_filters: List[str]
    :param expires_in: Subscription lifetime in seconds. The maximum subscription lifetime depends upon the specified `transportType`:<br><br>\| Transport type      \| Maximum permitted lifetime     \|<br>\| ------------------- \| ------------------------------ \|<br>\| `WebHook`           \| 315360000 seconds (10 years)   \|<br>\| `RC/APNS`, `RC/GSM` \| 7776000 seconds (90 days)      \|<br>\| `PubNub`            \| 900 seconds (15 minutes)       \|<br>\| `WebSocket`         \| n/a (the parameter is ignored) \|<br>, defaults to None
    :type expires_in: int, optional
    :param delivery_mode: delivery_mode
    :type delivery_mode: WebhookDeliveryModeRequest
    """

    def __init__(
        self,
        event_filters: List[str],
        delivery_mode: WebhookDeliveryModeRequest,
        expires_in: int = None,
    ):
        self.event_filters = event_filters
        if expires_in is not None:
            self.expires_in = expires_in
        self.delivery_mode = self._define_object(
            delivery_mode, WebhookDeliveryModeRequest
        )
