# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel
from .missed_call_extension_info import MissedCallExtensionInfo


class ActionType(Enum):
    """An enumeration representing different categories.

    :cvar PLAYGREETINGANDDISCONNECT: "PlayGreetingAndDisconnect"
    :vartype PLAYGREETINGANDDISCONNECT: str
    :cvar CONNECTTOEXTENSION: "ConnectToExtension"
    :vartype CONNECTTOEXTENSION: str
    :cvar CONNECTTOEXTERNALNUMBER: "ConnectToExternalNumber"
    :vartype CONNECTTOEXTERNALNUMBER: str
    """

    PLAYGREETINGANDDISCONNECT = "PlayGreetingAndDisconnect"
    CONNECTTOEXTENSION = "ConnectToExtension"
    CONNECTTOEXTERNALNUMBER = "ConnectToExternalNumber"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, ActionType._member_map_.values()))


@JsonMap({"action_type": "actionType"})
class MissedCallInfo(BaseModel):
    """Specifies behavior for the missed call scenario. Returned only if `enabled` parameter of a voicemail is set to 'false'

    :param action_type: Specifies the action that should be executed on a missed call. It can either be playing greeting message and disconnection, or sending call to a calling group. If 'ConnectToExtension' is set, then calling group extension should be specified, defaults to None
    :type action_type: ActionType, optional
    :param extension: Specifies an extension (a calling group) which should be used for the missed call transfer. Returned only if the `actionType` is set to 'ConnectToExtension', defaults to None
    :type extension: MissedCallExtensionInfo, optional
    """

    def __init__(
        self, action_type: ActionType = None, extension: MissedCallExtensionInfo = None
    ):
        if action_type is not None:
            self.action_type = self._enum_matching(
                action_type, ActionType.list(), "action_type"
            )
        if extension is not None:
            self.extension = self._define_object(extension, MissedCallExtensionInfo)
