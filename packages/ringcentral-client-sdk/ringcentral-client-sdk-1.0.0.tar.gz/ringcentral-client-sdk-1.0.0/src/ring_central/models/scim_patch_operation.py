# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class Op(Enum):
    """An enumeration representing different categories.

    :cvar ADD: "add"
    :vartype ADD: str
    :cvar REPLACE: "replace"
    :vartype REPLACE: str
    :cvar REMOVE: "remove"
    :vartype REMOVE: str
    """

    ADD = "add"
    REPLACE = "replace"
    REMOVE = "remove"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, Op._member_map_.values()))


@JsonMap({})
class ScimPatchOperation(BaseModel):
    """ScimPatchOperation

    :param op: op
    :type op: Op
    :param path: path, defaults to None
    :type path: str, optional
    :param value: Corresponding 'value' of that field specified by 'path', defaults to None
    :type value: str, optional
    """

    def __init__(self, op: Op, path: str = None, value: str = None):
        self.op = self._enum_matching(op, Op.list(), "op")
        if path is not None:
            self.path = path
        if value is not None:
            self.value = value
