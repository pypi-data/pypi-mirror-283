# This file was generated by liblab | https://liblab.com/

from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel


class SignupState(Enum):
    """An enumeration representing different categories.

    :cvar ACCOUNTCREATED: "AccountCreated"
    :vartype ACCOUNTCREATED: str
    :cvar BILLINGENTERED: "BillingEntered"
    :vartype BILLINGENTERED: str
    :cvar CREDITCARDAPPROVED: "CreditCardApproved"
    :vartype CREDITCARDAPPROVED: str
    :cvar ACCOUNTCONFIRMED: "AccountConfirmed"
    :vartype ACCOUNTCONFIRMED: str
    :cvar PHONEVERIFICATIONREQUIRED: "PhoneVerificationRequired"
    :vartype PHONEVERIFICATIONREQUIRED: str
    :cvar PHONEVERIFICATIONPASSED: "PhoneVerificationPassed"
    :vartype PHONEVERIFICATIONPASSED: str
    """

    ACCOUNTCREATED = "AccountCreated"
    BILLINGENTERED = "BillingEntered"
    CREDITCARDAPPROVED = "CreditCardApproved"
    ACCOUNTCONFIRMED = "AccountConfirmed"
    PHONEVERIFICATIONREQUIRED = "PhoneVerificationRequired"
    PHONEVERIFICATIONPASSED = "PhoneVerificationPassed"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, SignupState._member_map_.values()))


class VerificationReason(Enum):
    """An enumeration representing different categories.

    :cvar CC_FAILED: "CC_Failed"
    :vartype CC_FAILED: str
    :cvar PHONE_SUSPICIOUS: "Phone_Suspicious"
    :vartype PHONE_SUSPICIOUS: str
    :cvar CC_PHONE_NOT_MATCH: "CC_Phone_Not_Match"
    :vartype CC_PHONE_NOT_MATCH: str
    :cvar AVS_NOT_AVAILABLE: "AVS_Not_Available"
    :vartype AVS_NOT_AVAILABLE: str
    :cvar MAXMIND: "MaxMind"
    :vartype MAXMIND: str
    :cvar CC_BLACKLISTED: "CC_Blacklisted"
    :vartype CC_BLACKLISTED: str
    :cvar EMAIL_BLACKLISTED: "Email_Blacklisted"
    :vartype EMAIL_BLACKLISTED: str
    :cvar PHONE_BLACKLISTED: "Phone_Blacklisted"
    :vartype PHONE_BLACKLISTED: str
    :cvar COOKIE_BLACKLISTED: "Cookie_Blacklisted"
    :vartype COOKIE_BLACKLISTED: str
    :cvar DEVICE_BLACKLISTED: "Device_Blacklisted"
    :vartype DEVICE_BLACKLISTED: str
    :cvar IP_BLACKLISTED: "IP_Blacklisted"
    :vartype IP_BLACKLISTED: str
    :cvar AGENT_INSTANCE_BLACKLISTED: "Agent_Instance_Blacklisted"
    :vartype AGENT_INSTANCE_BLACKLISTED: str
    :cvar CHARGE_LIMIT: "Charge_Limit"
    :vartype CHARGE_LIMIT: str
    :cvar OTHER_COUNTRY: "Other_Country"
    :vartype OTHER_COUNTRY: str
    :cvar UNKNOWN: "Unknown"
    :vartype UNKNOWN: str
    """

    CC_FAILED = "CC_Failed"
    PHONE_SUSPICIOUS = "Phone_Suspicious"
    CC_PHONE_NOT_MATCH = "CC_Phone_Not_Match"
    AVS_NOT_AVAILABLE = "AVS_Not_Available"
    MAXMIND = "MaxMind"
    CC_BLACKLISTED = "CC_Blacklisted"
    EMAIL_BLACKLISTED = "Email_Blacklisted"
    PHONE_BLACKLISTED = "Phone_Blacklisted"
    COOKIE_BLACKLISTED = "Cookie_Blacklisted"
    DEVICE_BLACKLISTED = "Device_Blacklisted"
    IP_BLACKLISTED = "IP_Blacklisted"
    AGENT_INSTANCE_BLACKLISTED = "Agent_Instance_Blacklisted"
    CHARGE_LIMIT = "Charge_Limit"
    OTHER_COUNTRY = "Other_Country"
    UNKNOWN = "Unknown"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, VerificationReason._member_map_.values()))


@JsonMap(
    {
        "tos_accepted": "tosAccepted",
        "signup_state": "signupState",
        "verification_reason": "verificationReason",
        "marketing_accepted": "marketingAccepted",
        "creation_time": "creationTime",
    }
)
class SignupInfoResource(BaseModel):
    """Account sign up data

    :param tos_accepted: tos_accepted, defaults to None
    :type tos_accepted: bool, optional
    :param signup_state: signup_state, defaults to None
    :type signup_state: List[SignupState], optional
    :param verification_reason: verification_reason, defaults to None
    :type verification_reason: VerificationReason, optional
    :param marketing_accepted: Updates 'Send Marketing Information' flag on web interface<br>, defaults to None
    :type marketing_accepted: bool, optional
    :param creation_time: The timestamp of account creation, defaults to None
    :type creation_time: str, optional
    """

    def __init__(
        self,
        tos_accepted: bool = None,
        signup_state: List[SignupState] = None,
        verification_reason: VerificationReason = None,
        marketing_accepted: bool = None,
        creation_time: str = None,
    ):
        if tos_accepted is not None:
            self.tos_accepted = tos_accepted
        if signup_state is not None:
            self.signup_state = self._define_list(signup_state, SignupState)
        if verification_reason is not None:
            self.verification_reason = self._enum_matching(
                verification_reason, VerificationReason.list(), "verification_reason"
            )
        if marketing_accepted is not None:
            self.marketing_accepted = marketing_accepted
        if creation_time is not None:
            self.creation_time = creation_time
