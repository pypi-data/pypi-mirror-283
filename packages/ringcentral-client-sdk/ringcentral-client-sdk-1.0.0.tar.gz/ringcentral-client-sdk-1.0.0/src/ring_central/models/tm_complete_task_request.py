# This file was generated by liblab | https://liblab.com/

from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel


class TmCompleteTaskRequestStatus(Enum):
    """An enumeration representing different categories.

    :cvar INCOMPLETE: "Incomplete"
    :vartype INCOMPLETE: str
    :cvar COMPLETE: "Complete"
    :vartype COMPLETE: str
    """

    INCOMPLETE = "Incomplete"
    COMPLETE = "Complete"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, TmCompleteTaskRequestStatus._member_map_.values())
        )


@JsonMap({"id_": "id"})
class TmCompleteTaskRequestAssignees(BaseModel):
    """TmCompleteTaskRequestAssignees

    :param id_: Internal identifier of an assignee, defaults to None
    :type id_: str, optional
    """

    def __init__(self, id_: str = None):
        if id_ is not None:
            self.id_ = id_


@JsonMap({"completeness_percentage": "completenessPercentage"})
class TmCompleteTaskRequest(BaseModel):
    """TmCompleteTaskRequest

    :param status: Completeness status, defaults to None
    :type status: TmCompleteTaskRequestStatus, optional
    :param assignees: assignees, defaults to None
    :type assignees: List[TmCompleteTaskRequestAssignees], optional
    :param completeness_percentage: completeness_percentage, defaults to None
    :type completeness_percentage: int, optional
    """

    def __init__(
        self,
        status: TmCompleteTaskRequestStatus = None,
        assignees: List[TmCompleteTaskRequestAssignees] = None,
        completeness_percentage: int = None,
    ):
        if status is not None:
            self.status = self._enum_matching(
                status, TmCompleteTaskRequestStatus.list(), "status"
            )
        if assignees is not None:
            self.assignees = self._define_list(
                assignees, TmCompleteTaskRequestAssignees
            )
        if completeness_percentage is not None:
            self.completeness_percentage = completeness_percentage
