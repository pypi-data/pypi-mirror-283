# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import Union
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .base import OneOfBaseModel
from .summary_api_response import SummaryApiResponse, SummaryApiResponseGuard
from .summary_output import SummaryOutput
from .cai_error_response import CaiErrorResponse
from .punctuate_api_response import PunctuateApiResponse, PunctuateApiResponseGuard
from .punctuate_output import PunctuateOutput
from .diarized_object import DiarizedObject
from .speaker_identification_object import SpeakerIdentificationObject
from .transcribed_object import TranscribedObject
from .emotion_segment import EmotionSegment
from .interaction_object import InteractionObject


class JobStatusResponse1Status(Enum):
    """An enumeration representing different categories.

    :cvar SUCCESS: "Success"
    :vartype SUCCESS: str
    :cvar FAIL: "Fail"
    :vartype FAIL: str
    """

    SUCCESS = "Success"
    FAIL = "Fail"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, JobStatusResponse1Status._member_map_.values())
        )


@JsonMap(
    {
        "job_id": "jobId",
        "creation_time": "creationTime",
        "completion_time": "completionTime",
        "expiration_time": "expirationTime",
    }
)
class JobStatusResponse1(BaseModel):
    """JobStatusResponse1

    :param status: status, defaults to None
    :type status: JobStatusResponse1Status, optional
    :param response: response, defaults to None
    :type response: SummaryApiResponse, optional
    :param job_id: job_id, defaults to None
    :type job_id: str, optional
    :param creation_time: creation_time, defaults to None
    :type creation_time: str, optional
    :param completion_time: completion_time, defaults to None
    :type completion_time: str, optional
    :param expiration_time: expiration_time, defaults to None
    :type expiration_time: str, optional
    """

    def __init__(
        self,
        status: JobStatusResponse1Status = None,
        response: SummaryApiResponse = None,
        job_id: str = None,
        creation_time: str = None,
        completion_time: str = None,
        expiration_time: str = None,
    ):
        if status is not None:
            self.status = self._enum_matching(
                status, JobStatusResponse1Status.list(), "status"
            )
        if response is not None:
            self.response = SummaryApiResponseGuard.return_one_of(response)
        if job_id is not None:
            self.job_id = job_id
        if creation_time is not None:
            self.creation_time = creation_time
        if completion_time is not None:
            self.completion_time = completion_time
        if expiration_time is not None:
            self.expiration_time = expiration_time


class JobStatusResponse2Status(Enum):
    """An enumeration representing different categories.

    :cvar SUCCESS: "Success"
    :vartype SUCCESS: str
    :cvar FAIL: "Fail"
    :vartype FAIL: str
    """

    SUCCESS = "Success"
    FAIL = "Fail"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, JobStatusResponse2Status._member_map_.values())
        )


@JsonMap(
    {
        "job_id": "jobId",
        "creation_time": "creationTime",
        "completion_time": "completionTime",
        "expiration_time": "expirationTime",
    }
)
class JobStatusResponse2(BaseModel):
    """JobStatusResponse2

    :param status: status, defaults to None
    :type status: JobStatusResponse2Status, optional
    :param response: response, defaults to None
    :type response: PunctuateApiResponse, optional
    :param job_id: job_id, defaults to None
    :type job_id: str, optional
    :param creation_time: creation_time, defaults to None
    :type creation_time: str, optional
    :param completion_time: completion_time, defaults to None
    :type completion_time: str, optional
    :param expiration_time: expiration_time, defaults to None
    :type expiration_time: str, optional
    """

    def __init__(
        self,
        status: JobStatusResponse2Status = None,
        response: PunctuateApiResponse = None,
        job_id: str = None,
        creation_time: str = None,
        completion_time: str = None,
        expiration_time: str = None,
    ):
        if status is not None:
            self.status = self._enum_matching(
                status, JobStatusResponse2Status.list(), "status"
            )
        if response is not None:
            self.response = PunctuateApiResponseGuard.return_one_of(response)
        if job_id is not None:
            self.job_id = job_id
        if creation_time is not None:
            self.creation_time = creation_time
        if completion_time is not None:
            self.completion_time = completion_time
        if expiration_time is not None:
            self.expiration_time = expiration_time


class JobStatusResponse3Status(Enum):
    """An enumeration representing different categories.

    :cvar SUCCESS: "Success"
    :vartype SUCCESS: str
    :cvar FAIL: "Fail"
    :vartype FAIL: str
    """

    SUCCESS = "Success"
    FAIL = "Fail"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, JobStatusResponse3Status._member_map_.values())
        )


class JobStatusResponse3ResponseGuard(OneOfBaseModel):
    class_list = {
        "DiarizedObject": DiarizedObject,
        "CaiErrorResponse": CaiErrorResponse,
    }


JobStatusResponse3Response = Union[DiarizedObject, CaiErrorResponse]


@JsonMap(
    {
        "job_id": "jobId",
        "creation_time": "creationTime",
        "completion_time": "completionTime",
        "expiration_time": "expirationTime",
    }
)
class JobStatusResponse3(BaseModel):
    """JobStatusResponse3

    :param status: status, defaults to None
    :type status: JobStatusResponse3Status, optional
    :param response: response, defaults to None
    :type response: JobStatusResponse3Response, optional
    :param job_id: job_id, defaults to None
    :type job_id: str, optional
    :param creation_time: creation_time, defaults to None
    :type creation_time: str, optional
    :param completion_time: completion_time, defaults to None
    :type completion_time: str, optional
    :param expiration_time: expiration_time, defaults to None
    :type expiration_time: str, optional
    """

    def __init__(
        self,
        status: JobStatusResponse3Status = None,
        response: JobStatusResponse3Response = None,
        job_id: str = None,
        creation_time: str = None,
        completion_time: str = None,
        expiration_time: str = None,
    ):
        if status is not None:
            self.status = self._enum_matching(
                status, JobStatusResponse3Status.list(), "status"
            )
        if response is not None:
            self.response = JobStatusResponse3ResponseGuard.return_one_of(response)
        if job_id is not None:
            self.job_id = job_id
        if creation_time is not None:
            self.creation_time = creation_time
        if completion_time is not None:
            self.completion_time = completion_time
        if expiration_time is not None:
            self.expiration_time = expiration_time


class JobStatusResponse4Status(Enum):
    """An enumeration representing different categories.

    :cvar SUCCESS: "Success"
    :vartype SUCCESS: str
    :cvar FAIL: "Fail"
    :vartype FAIL: str
    """

    SUCCESS = "Success"
    FAIL = "Fail"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, JobStatusResponse4Status._member_map_.values())
        )


class JobStatusResponse4ResponseGuard(OneOfBaseModel):
    class_list = {
        "SpeakerIdentificationObject": SpeakerIdentificationObject,
        "CaiErrorResponse": CaiErrorResponse,
    }


JobStatusResponse4Response = Union[SpeakerIdentificationObject, CaiErrorResponse]


@JsonMap(
    {
        "job_id": "jobId",
        "creation_time": "creationTime",
        "completion_time": "completionTime",
        "expiration_time": "expirationTime",
    }
)
class JobStatusResponse4(BaseModel):
    """JobStatusResponse4

    :param status: status, defaults to None
    :type status: JobStatusResponse4Status, optional
    :param response: response, defaults to None
    :type response: JobStatusResponse4Response, optional
    :param job_id: job_id, defaults to None
    :type job_id: str, optional
    :param creation_time: creation_time, defaults to None
    :type creation_time: str, optional
    :param completion_time: completion_time, defaults to None
    :type completion_time: str, optional
    :param expiration_time: expiration_time, defaults to None
    :type expiration_time: str, optional
    """

    def __init__(
        self,
        status: JobStatusResponse4Status = None,
        response: JobStatusResponse4Response = None,
        job_id: str = None,
        creation_time: str = None,
        completion_time: str = None,
        expiration_time: str = None,
    ):
        if status is not None:
            self.status = self._enum_matching(
                status, JobStatusResponse4Status.list(), "status"
            )
        if response is not None:
            self.response = JobStatusResponse4ResponseGuard.return_one_of(response)
        if job_id is not None:
            self.job_id = job_id
        if creation_time is not None:
            self.creation_time = creation_time
        if completion_time is not None:
            self.completion_time = completion_time
        if expiration_time is not None:
            self.expiration_time = expiration_time


class JobStatusResponse5Status(Enum):
    """An enumeration representing different categories.

    :cvar SUCCESS: "Success"
    :vartype SUCCESS: str
    :cvar FAIL: "Fail"
    :vartype FAIL: str
    """

    SUCCESS = "Success"
    FAIL = "Fail"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, JobStatusResponse5Status._member_map_.values())
        )


class JobStatusResponse5ResponseGuard(OneOfBaseModel):
    class_list = {
        "TranscribedObject": TranscribedObject,
        "CaiErrorResponse": CaiErrorResponse,
    }


JobStatusResponse5Response = Union[TranscribedObject, CaiErrorResponse]


@JsonMap(
    {
        "job_id": "jobId",
        "creation_time": "creationTime",
        "completion_time": "completionTime",
        "expiration_time": "expirationTime",
    }
)
class JobStatusResponse5(BaseModel):
    """JobStatusResponse5

    :param status: status, defaults to None
    :type status: JobStatusResponse5Status, optional
    :param response: response, defaults to None
    :type response: JobStatusResponse5Response, optional
    :param job_id: job_id, defaults to None
    :type job_id: str, optional
    :param creation_time: creation_time, defaults to None
    :type creation_time: str, optional
    :param completion_time: completion_time, defaults to None
    :type completion_time: str, optional
    :param expiration_time: expiration_time, defaults to None
    :type expiration_time: str, optional
    """

    def __init__(
        self,
        status: JobStatusResponse5Status = None,
        response: JobStatusResponse5Response = None,
        job_id: str = None,
        creation_time: str = None,
        completion_time: str = None,
        expiration_time: str = None,
    ):
        if status is not None:
            self.status = self._enum_matching(
                status, JobStatusResponse5Status.list(), "status"
            )
        if response is not None:
            self.response = JobStatusResponse5ResponseGuard.return_one_of(response)
        if job_id is not None:
            self.job_id = job_id
        if creation_time is not None:
            self.creation_time = creation_time
        if completion_time is not None:
            self.completion_time = completion_time
        if expiration_time is not None:
            self.expiration_time = expiration_time


class JobStatusResponse6Status(Enum):
    """An enumeration representing different categories.

    :cvar SUCCESS: "Success"
    :vartype SUCCESS: str
    :cvar FAIL: "Fail"
    :vartype FAIL: str
    """

    SUCCESS = "Success"
    FAIL = "Fail"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, JobStatusResponse6Status._member_map_.values())
        )


class JobStatusResponse6ResponseGuard(OneOfBaseModel):
    class_list = {
        "List[EmotionSegment]": List[EmotionSegment],
        "CaiErrorResponse": CaiErrorResponse,
    }


JobStatusResponse6Response = Union[List[EmotionSegment], CaiErrorResponse]


@JsonMap(
    {
        "job_id": "jobId",
        "creation_time": "creationTime",
        "completion_time": "completionTime",
        "expiration_time": "expirationTime",
    }
)
class JobStatusResponse6(BaseModel):
    """JobStatusResponse6

    :param status: status, defaults to None
    :type status: JobStatusResponse6Status, optional
    :param response: response, defaults to None
    :type response: JobStatusResponse6Response, optional
    :param job_id: job_id, defaults to None
    :type job_id: str, optional
    :param creation_time: creation_time, defaults to None
    :type creation_time: str, optional
    :param completion_time: completion_time, defaults to None
    :type completion_time: str, optional
    :param expiration_time: expiration_time, defaults to None
    :type expiration_time: str, optional
    """

    def __init__(
        self,
        status: JobStatusResponse6Status = None,
        response: JobStatusResponse6Response = None,
        job_id: str = None,
        creation_time: str = None,
        completion_time: str = None,
        expiration_time: str = None,
    ):
        if status is not None:
            self.status = self._enum_matching(
                status, JobStatusResponse6Status.list(), "status"
            )
        if response is not None:
            self.response = JobStatusResponse6ResponseGuard.return_one_of(response)
        if job_id is not None:
            self.job_id = job_id
        if creation_time is not None:
            self.creation_time = creation_time
        if completion_time is not None:
            self.completion_time = completion_time
        if expiration_time is not None:
            self.expiration_time = expiration_time


class JobStatusResponse7Status(Enum):
    """An enumeration representing different categories.

    :cvar SUCCESS: "Success"
    :vartype SUCCESS: str
    :cvar FAIL: "Fail"
    :vartype FAIL: str
    """

    SUCCESS = "Success"
    FAIL = "Fail"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, JobStatusResponse7Status._member_map_.values())
        )


class JobStatusResponse7ResponseGuard(OneOfBaseModel):
    class_list = {
        "InteractionObject": InteractionObject,
        "CaiErrorResponse": CaiErrorResponse,
    }


JobStatusResponse7Response = Union[InteractionObject, CaiErrorResponse]


@JsonMap(
    {
        "job_id": "jobId",
        "creation_time": "creationTime",
        "completion_time": "completionTime",
        "expiration_time": "expirationTime",
    }
)
class JobStatusResponse7(BaseModel):
    """JobStatusResponse7

    :param status: status, defaults to None
    :type status: JobStatusResponse7Status, optional
    :param response: response, defaults to None
    :type response: JobStatusResponse7Response, optional
    :param job_id: job_id, defaults to None
    :type job_id: str, optional
    :param creation_time: creation_time, defaults to None
    :type creation_time: str, optional
    :param completion_time: completion_time, defaults to None
    :type completion_time: str, optional
    :param expiration_time: expiration_time, defaults to None
    :type expiration_time: str, optional
    """

    def __init__(
        self,
        status: JobStatusResponse7Status = None,
        response: JobStatusResponse7Response = None,
        job_id: str = None,
        creation_time: str = None,
        completion_time: str = None,
        expiration_time: str = None,
    ):
        if status is not None:
            self.status = self._enum_matching(
                status, JobStatusResponse7Status.list(), "status"
            )
        if response is not None:
            self.response = JobStatusResponse7ResponseGuard.return_one_of(response)
        if job_id is not None:
            self.job_id = job_id
        if creation_time is not None:
            self.creation_time = creation_time
        if completion_time is not None:
            self.completion_time = completion_time
        if expiration_time is not None:
            self.expiration_time = expiration_time


class JobStatusResponseGuard(OneOfBaseModel):
    class_list = {
        "JobStatusResponse1": JobStatusResponse1,
        "JobStatusResponse2": JobStatusResponse2,
        "JobStatusResponse3": JobStatusResponse3,
        "JobStatusResponse4": JobStatusResponse4,
        "JobStatusResponse5": JobStatusResponse5,
        "JobStatusResponse6": JobStatusResponse6,
        "JobStatusResponse7": JobStatusResponse7,
    }


JobStatusResponse = Union[
    JobStatusResponse1,
    JobStatusResponse2,
    JobStatusResponse3,
    JobStatusResponse4,
    JobStatusResponse5,
    JobStatusResponse6,
    JobStatusResponse7,
]
