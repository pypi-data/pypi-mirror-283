# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .phone_number_info_conferencing import PhoneNumberInfoConferencing


@JsonMap(
    {
        "allow_join_before_host": "allowJoinBeforeHost",
        "host_code": "hostCode",
        "participant_code": "participantCode",
        "phone_number": "phoneNumber",
        "support_uri": "supportUri",
        "tap_to_join_uri": "tapToJoinUri",
        "phone_numbers": "phoneNumbers",
    }
)
class GetConferencingInfoResponse(BaseModel):
    """GetConferencingInfoResponse

    :param uri: Canonical URI of a conferencing, defaults to None
    :type uri: str, optional
    :param allow_join_before_host: Determines if host user allows conference participants to join<br>before the host<br>, defaults to None
    :type allow_join_before_host: bool, optional
    :param host_code: Access code for a host user, defaults to None
    :type host_code: str, optional
    :param mode: Internal parameter specifying a conferencing engine<br>, defaults to None
    :type mode: str, optional
    :param participant_code: Access code for any participant, defaults to None
    :type participant_code: str, optional
    :param phone_number: Primary conference phone number for user's home country returned<br>in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format<br>, defaults to None
    :type phone_number: str, optional
    :param support_uri: Link to a branded support page, defaults to None
    :type support_uri: str, optional
    :param tap_to_join_uri: Short URL leading to the service web page Tap to Join for audio<br>conference bridge<br>, defaults to None
    :type tap_to_join_uri: str, optional
    :param phone_numbers: List of multiple dial-in phone numbers to connect to audio<br>conference service, relevant for the user's brand. Each number is given with<br>the country and location information, in order to let the user choose<br>less expensive way to connect to a conference. The first number in<br>the list is a primary conference number, that is default and domestic<br>, defaults to None
    :type phone_numbers: List[PhoneNumberInfoConferencing], optional
    """

    def __init__(
        self,
        uri: str = None,
        allow_join_before_host: bool = None,
        host_code: str = None,
        mode: str = None,
        participant_code: str = None,
        phone_number: str = None,
        support_uri: str = None,
        tap_to_join_uri: str = None,
        phone_numbers: List[PhoneNumberInfoConferencing] = None,
    ):
        if uri is not None:
            self.uri = uri
        if allow_join_before_host is not None:
            self.allow_join_before_host = allow_join_before_host
        if host_code is not None:
            self.host_code = host_code
        if mode is not None:
            self.mode = mode
        if participant_code is not None:
            self.participant_code = participant_code
        if phone_number is not None:
            self.phone_number = phone_number
        if support_uri is not None:
            self.support_uri = support_uri
        if tap_to_join_uri is not None:
            self.tap_to_join_uri = tap_to_join_uri
        if phone_numbers is not None:
            self.phone_numbers = self._define_list(
                phone_numbers, PhoneNumberInfoConferencing
            )
