# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class WebinarSettingsModelPanelistAuthentication(Enum):
    """An enumeration representing different categories.

    :cvar GUEST: "Guest"
    :vartype GUEST: str
    :cvar AUTHENTICATEDUSER: "AuthenticatedUser"
    :vartype AUTHENTICATEDUSER: str
    :cvar AUTHENTICATEDCOWORKER: "AuthenticatedCoworker"
    :vartype AUTHENTICATEDCOWORKER: str
    """

    GUEST = "Guest"
    AUTHENTICATEDUSER = "AuthenticatedUser"
    AUTHENTICATEDCOWORKER = "AuthenticatedCoworker"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                WebinarSettingsModelPanelistAuthentication._member_map_.values(),
            )
        )


class WebinarSettingsModelAttendeeAuthentication(Enum):
    """An enumeration representing different categories.

    :cvar GUEST: "Guest"
    :vartype GUEST: str
    :cvar AUTHENTICATEDUSER: "AuthenticatedUser"
    :vartype AUTHENTICATEDUSER: str
    :cvar AUTHENTICATEDCOWORKER: "AuthenticatedCoworker"
    :vartype AUTHENTICATEDCOWORKER: str
    """

    GUEST = "Guest"
    AUTHENTICATEDUSER = "AuthenticatedUser"
    AUTHENTICATEDCOWORKER = "AuthenticatedCoworker"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                WebinarSettingsModelAttendeeAuthentication._member_map_.values(),
            )
        )


class WebinarSettingsModelArtifactsAccessAuthentication(Enum):
    """An enumeration representing different categories.

    :cvar GUEST: "Guest"
    :vartype GUEST: str
    :cvar AUTHENTICATEDUSER: "AuthenticatedUser"
    :vartype AUTHENTICATEDUSER: str
    :cvar AUTHENTICATEDCOWORKER: "AuthenticatedCoworker"
    :vartype AUTHENTICATEDCOWORKER: str
    """

    GUEST = "Guest"
    AUTHENTICATEDUSER = "AuthenticatedUser"
    AUTHENTICATEDCOWORKER = "AuthenticatedCoworker"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                WebinarSettingsModelArtifactsAccessAuthentication._member_map_.values(),
            )
        )


@JsonMap(
    {
        "recording_enabled": "recordingEnabled",
        "auto_record": "autoRecord",
        "recording_sharing_enabled": "recordingSharingEnabled",
        "recording_download_enabled": "recordingDownloadEnabled",
        "recording_deletion_enabled": "recordingDeletionEnabled",
        "past_session_deletion_enabled": "pastSessionDeletionEnabled",
        "panelist_waiting_room": "panelistWaitingRoom",
        "panelist_video_enabled": "panelistVideoEnabled",
        "panelist_screen_sharing_enabled": "panelistScreenSharingEnabled",
        "panelist_mute_control_enabled": "panelistMuteControlEnabled",
        "panelist_authentication": "panelistAuthentication",
        "attendee_authentication": "attendeeAuthentication",
        "artifacts_access_authentication": "artifactsAccessAuthentication",
        "pstn_enabled": "pstnEnabled",
        "qna_enabled": "qnaEnabled",
        "qna_anonymous_enabled": "qnaAnonymousEnabled",
        "moderated_qna_enabled": "moderatedQnaEnabled",
        "polls_enabled": "pollsEnabled",
        "polls_anonymous_enabled": "pollsAnonymousEnabled",
        "registration_enabled": "registrationEnabled",
        "post_webinar_redirect_uri": "postWebinarRedirectUri",
        "external_livestream_enabled": "externalLivestreamEnabled",
    }
)
class WebinarSettingsModel(BaseModel):
    """Various settings which define behavior of this Webinar's Sessions

    :param recording_enabled: Indicates if recording is enabled (if false all other recording settings cannot be enabled), defaults to None
    :type recording_enabled: bool, optional
    :param auto_record: Indicates if recording should start automatically when a Webinar goes live, defaults to None
    :type auto_record: bool, optional
    :param recording_sharing_enabled: Indicates if recording can be shared, defaults to None
    :type recording_sharing_enabled: bool, optional
    :param recording_download_enabled: Indicates if recording can be downloaded, defaults to None
    :type recording_download_enabled: bool, optional
    :param recording_deletion_enabled: DEPRECATED AND REPLACED BY 'pastSessionDeletionEnabled' setting.<br>Indicates if recording can be deleted (this setting is read-only at webinar/session level)<br>, defaults to None
    :type recording_deletion_enabled: bool, optional
    :param past_session_deletion_enabled: Indicates if deletion of past session along with its artifacts is enabled for host.<br>This setting is read-only at webinar level<br>, defaults to None
    :type past_session_deletion_enabled: bool, optional
    :param panelist_waiting_room: Indicates if Panelists should be places to waiting room after joining, defaults to None
    :type panelist_waiting_room: bool, optional
    :param panelist_video_enabled: Indicates if Panelists' video should be 'on' by default, defaults to None
    :type panelist_video_enabled: bool, optional
    :param panelist_screen_sharing_enabled: Indicates if Panelists' screen sharing should be 'on' by default, defaults to None
    :type panelist_screen_sharing_enabled: bool, optional
    :param panelist_mute_control_enabled: Indicates if Panelists can mute/unmute themselves by default, defaults to None
    :type panelist_mute_control_enabled: bool, optional
    :param panelist_authentication: Indicates if Panelists have to be authenticated users, defaults to None
    :type panelist_authentication: WebinarSettingsModelPanelistAuthentication, optional
    :param attendee_authentication: Indicates if attendees have to be authenticated users, defaults to None
    :type attendee_authentication: WebinarSettingsModelAttendeeAuthentication, optional
    :param artifacts_access_authentication: Indicates who can access webinar artifacts. Applies to recordings at present.<br>Applicable to other artifacts such as Q&A, Polls in the future.<br>, defaults to None
    :type artifacts_access_authentication: WebinarSettingsModelArtifactsAccessAuthentication, optional
    :param pstn_enabled: Indicates if dial-in PSTN audio option is enabled by default, defaults to None
    :type pstn_enabled: bool, optional
    :param password: Webinar password, defaults to None
    :type password: str, optional
    :param qna_enabled: Indicates if Q&A is enabled for the webinar (if false all other Q&A settings cannot be enabled), defaults to None
    :type qna_enabled: bool, optional
    :param qna_anonymous_enabled: Indicates if anonymous Q&A is enabled for the webinar, defaults to None
    :type qna_anonymous_enabled: bool, optional
    :param moderated_qna_enabled: Indicate if the moderated Q&A enabled for webinar, defaults to None
    :type moderated_qna_enabled: bool, optional
    :param polls_enabled: Indicates if polls are enabled for the webinar (if false all other polls settings cannot be enabled), defaults to None
    :type polls_enabled: bool, optional
    :param polls_anonymous_enabled: Indicates if anonymous poll answers are enabled for the webinar, defaults to None
    :type polls_anonymous_enabled: bool, optional
    :param registration_enabled: Indicates if a registration is enabled for the webinar (if false all other registration settings are ignored), defaults to None
    :type registration_enabled: bool, optional
    :param post_webinar_redirect_uri: URI to redirect users after the webinar, defaults to None
    :type post_webinar_redirect_uri: str, optional
    :param external_livestream_enabled: Indicates if livestreaming to external streaming provider is enabled, defaults to None
    :type external_livestream_enabled: bool, optional
    """

    def __init__(
        self,
        recording_enabled: bool = None,
        auto_record: bool = None,
        recording_sharing_enabled: bool = None,
        recording_download_enabled: bool = None,
        recording_deletion_enabled: bool = None,
        past_session_deletion_enabled: bool = None,
        panelist_waiting_room: bool = None,
        panelist_video_enabled: bool = None,
        panelist_screen_sharing_enabled: bool = None,
        panelist_mute_control_enabled: bool = None,
        panelist_authentication: WebinarSettingsModelPanelistAuthentication = None,
        attendee_authentication: WebinarSettingsModelAttendeeAuthentication = None,
        artifacts_access_authentication: WebinarSettingsModelArtifactsAccessAuthentication = None,
        pstn_enabled: bool = None,
        password: str = None,
        qna_enabled: bool = None,
        qna_anonymous_enabled: bool = None,
        moderated_qna_enabled: bool = None,
        polls_enabled: bool = None,
        polls_anonymous_enabled: bool = None,
        registration_enabled: bool = None,
        post_webinar_redirect_uri: str = None,
        external_livestream_enabled: bool = None,
    ):
        if recording_enabled is not None:
            self.recording_enabled = recording_enabled
        if auto_record is not None:
            self.auto_record = auto_record
        if recording_sharing_enabled is not None:
            self.recording_sharing_enabled = recording_sharing_enabled
        if recording_download_enabled is not None:
            self.recording_download_enabled = recording_download_enabled
        if recording_deletion_enabled is not None:
            self.recording_deletion_enabled = recording_deletion_enabled
        if past_session_deletion_enabled is not None:
            self.past_session_deletion_enabled = past_session_deletion_enabled
        if panelist_waiting_room is not None:
            self.panelist_waiting_room = panelist_waiting_room
        if panelist_video_enabled is not None:
            self.panelist_video_enabled = panelist_video_enabled
        if panelist_screen_sharing_enabled is not None:
            self.panelist_screen_sharing_enabled = panelist_screen_sharing_enabled
        if panelist_mute_control_enabled is not None:
            self.panelist_mute_control_enabled = panelist_mute_control_enabled
        if panelist_authentication is not None:
            self.panelist_authentication = self._enum_matching(
                panelist_authentication,
                WebinarSettingsModelPanelistAuthentication.list(),
                "panelist_authentication",
            )
        if attendee_authentication is not None:
            self.attendee_authentication = self._enum_matching(
                attendee_authentication,
                WebinarSettingsModelAttendeeAuthentication.list(),
                "attendee_authentication",
            )
        if artifacts_access_authentication is not None:
            self.artifacts_access_authentication = self._enum_matching(
                artifacts_access_authentication,
                WebinarSettingsModelArtifactsAccessAuthentication.list(),
                "artifacts_access_authentication",
            )
        if pstn_enabled is not None:
            self.pstn_enabled = pstn_enabled
        if password is not None:
            self.password = password
        if qna_enabled is not None:
            self.qna_enabled = qna_enabled
        if qna_anonymous_enabled is not None:
            self.qna_anonymous_enabled = qna_anonymous_enabled
        if moderated_qna_enabled is not None:
            self.moderated_qna_enabled = moderated_qna_enabled
        if polls_enabled is not None:
            self.polls_enabled = polls_enabled
        if polls_anonymous_enabled is not None:
            self.polls_anonymous_enabled = polls_anonymous_enabled
        if registration_enabled is not None:
            self.registration_enabled = registration_enabled
        if post_webinar_redirect_uri is not None:
            self.post_webinar_redirect_uri = post_webinar_redirect_uri
        if external_livestream_enabled is not None:
            self.external_livestream_enabled = external_livestream_enabled
