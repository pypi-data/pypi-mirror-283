# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .permission_category_id_resource import PermissionCategoryIdResource
from .permission_id_resource import PermissionIdResource


class PermissionResourceSiteCompatible(Enum):
    """An enumeration representing different categories.

    :cvar INCOMPATIBLE: "Incompatible"
    :vartype INCOMPATIBLE: str
    :cvar COMPATIBLE: "Compatible"
    :vartype COMPATIBLE: str
    :cvar INDEPENDENT: "Independent"
    :vartype INDEPENDENT: str
    """

    INCOMPATIBLE = "Incompatible"
    COMPATIBLE = "Compatible"
    INDEPENDENT = "Independent"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                PermissionResourceSiteCompatible._member_map_.values(),
            )
        )


@JsonMap(
    {
        "id_": "id",
        "display_name": "displayName",
        "read_only": "readOnly",
        "site_compatible": "siteCompatible",
        "included_permissions": "includedPermissions",
    }
)
class PermissionResource(BaseModel):
    """PermissionResource

    :param uri: uri, defaults to None
    :type uri: str, optional
    :param id_: id_, defaults to None
    :type id_: str, optional
    :param display_name: display_name, defaults to None
    :type display_name: str, optional
    :param description: description, defaults to None
    :type description: str, optional
    :param assignable: assignable, defaults to None
    :type assignable: bool, optional
    :param read_only: read_only, defaults to None
    :type read_only: bool, optional
    :param site_compatible: Site compatibility flag set for permission, defaults to None
    :type site_compatible: PermissionResourceSiteCompatible, optional
    :param category: category, defaults to None
    :type category: PermissionCategoryIdResource, optional
    :param included_permissions: included_permissions, defaults to None
    :type included_permissions: List[PermissionIdResource], optional
    """

    def __init__(
        self,
        uri: str = None,
        id_: str = None,
        display_name: str = None,
        description: str = None,
        assignable: bool = None,
        read_only: bool = None,
        site_compatible: PermissionResourceSiteCompatible = None,
        category: PermissionCategoryIdResource = None,
        included_permissions: List[PermissionIdResource] = None,
    ):
        if uri is not None:
            self.uri = uri
        if id_ is not None:
            self.id_ = id_
        if display_name is not None:
            self.display_name = display_name
        if description is not None:
            self.description = description
        if assignable is not None:
            self.assignable = assignable
        if read_only is not None:
            self.read_only = read_only
        if site_compatible is not None:
            self.site_compatible = self._enum_matching(
                site_compatible,
                PermissionResourceSiteCompatible.list(),
                "site_compatible",
            )
        if category is not None:
            self.category = self._define_object(category, PermissionCategoryIdResource)
        if included_permissions is not None:
            self.included_permissions = self._define_list(
                included_permissions, PermissionIdResource
            )
