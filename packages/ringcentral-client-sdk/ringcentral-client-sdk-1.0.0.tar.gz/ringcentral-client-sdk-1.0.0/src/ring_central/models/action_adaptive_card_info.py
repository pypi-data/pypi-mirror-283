# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .action_card_body import ActionCardBody


class ActionAdaptiveCardInfoType(Enum):
    """An enumeration representing different categories.

    :cvar ADAPTIVECARD: "AdaptiveCard"
    :vartype ADAPTIVECARD: str
    """

    ADAPTIVECARD = "AdaptiveCard"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, ActionAdaptiveCardInfoType._member_map_.values())
        )


@JsonMap({"type_": "type"})
class ActionAdaptiveCardInfo(BaseModel):
    """ActionAdaptiveCardInfo

    :param type_: type_, defaults to None
    :type type_: ActionAdaptiveCardInfoType, optional
    :param body: body, defaults to None
    :type body: List[ActionCardBody], optional
    """

    def __init__(
        self,
        type_: ActionAdaptiveCardInfoType = None,
        body: List[ActionCardBody] = None,
    ):
        if type_ is not None:
            self.type_ = self._enum_matching(
                type_, ActionAdaptiveCardInfoType.list(), "type_"
            )
        if body is not None:
            self.body = self._define_list(body, ActionCardBody)
