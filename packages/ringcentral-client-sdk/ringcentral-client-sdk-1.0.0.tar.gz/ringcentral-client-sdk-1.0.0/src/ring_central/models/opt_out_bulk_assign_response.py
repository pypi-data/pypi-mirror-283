# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .opt_out_bulk_assign_failed_entry import OptOutBulkAssignFailedEntry


@JsonMap({})
class OptIns(BaseModel):
    """Contains successful and failed opt-ins

    :param successful: Recipients' phone numbers which opt-ins were successfully added for., defaults to None
    :type successful: List[str], optional
    :param failed: Recipients' phone numbers which opt-ins were failed to be added for. Plus, error messages, defaults to None
    :type failed: List[OptOutBulkAssignFailedEntry], optional
    """

    def __init__(
        self,
        successful: List[str] = None,
        failed: List[OptOutBulkAssignFailedEntry] = None,
    ):
        if successful is not None:
            self.successful = successful
        if failed is not None:
            self.failed = self._define_list(failed, OptOutBulkAssignFailedEntry)


@JsonMap({})
class OptOuts(BaseModel):
    """Contains successful and failed opt-outs

    :param successful: Recipients' phone numbers which opt-outs were successfully added for., defaults to None
    :type successful: List[str], optional
    :param failed: Recipients' phone numbers which opt-outs were failed to be added for. Plus, error messages, defaults to None
    :type failed: List[OptOutBulkAssignFailedEntry], optional
    """

    def __init__(
        self,
        successful: List[str] = None,
        failed: List[OptOutBulkAssignFailedEntry] = None,
    ):
        if successful is not None:
            self.successful = successful
        if failed is not None:
            self.failed = self._define_list(failed, OptOutBulkAssignFailedEntry)


@JsonMap({"opt_ins": "optIns", "opt_outs": "optOuts"})
class OptOutBulkAssignResponse(BaseModel):
    """The results of adding opt-outs and opt-ins

    :param opt_ins: Contains successful and failed opt-ins, defaults to None
    :type opt_ins: OptIns, optional
    :param opt_outs: Contains successful and failed opt-outs, defaults to None
    :type opt_outs: OptOuts, optional
    """

    def __init__(self, opt_ins: OptIns = None, opt_outs: OptOuts = None):
        if opt_ins is not None:
            self.opt_ins = self._define_object(opt_ins, OptIns)
        if opt_outs is not None:
            self.opt_outs = self._define_object(opt_outs, OptOuts)
