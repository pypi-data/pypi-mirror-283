# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel
from .location_deletion_error_info import LocationDeletionErrorInfo


class LocationDeletionInfoDeletion(Enum):
    """An enumeration representing different categories.

    :cvar FAILED: "Failed"
    :vartype FAILED: str
    :cvar COMPLETED: "Completed"
    :vartype COMPLETED: str
    :cvar FORBIDDEN: "Forbidden"
    :vartype FORBIDDEN: str
    :cvar RESTRICTED: "Restricted"
    :vartype RESTRICTED: str
    :cvar ALLOWED: "Allowed"
    :vartype ALLOWED: str
    """

    FAILED = "Failed"
    COMPLETED = "Completed"
    FORBIDDEN = "Forbidden"
    RESTRICTED = "Restricted"
    ALLOWED = "Allowed"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, LocationDeletionInfoDeletion._member_map_.values())
        )


@JsonMap({"id_": "id"})
class LocationDeletionInfo(BaseModel):
    """LocationDeletionInfo

    :param id_: id_, defaults to None
    :type id_: str, optional
    :param name: name, defaults to None
    :type name: str, optional
    :param deletion: Identifies the possibility and status of emergency location<br>deletion<br>, defaults to None
    :type deletion: LocationDeletionInfoDeletion, optional
    :param errors: errors, defaults to None
    :type errors: LocationDeletionErrorInfo, optional
    """

    def __init__(
        self,
        id_: str = None,
        name: str = None,
        deletion: LocationDeletionInfoDeletion = None,
        errors: LocationDeletionErrorInfo = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if name is not None:
            self.name = name
        if deletion is not None:
            self.deletion = self._enum_matching(
                deletion, LocationDeletionInfoDeletion.list(), "deletion"
            )
        if errors is not None:
            self.errors = self._define_object(errors, LocationDeletionErrorInfo)
