# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .call_recording_extension_resource import CallRecordingExtensionResource


@JsonMap(
    {
        "added_extensions": "addedExtensions",
        "updated_extensions": "updatedExtensions",
        "removed_extensions": "removedExtensions",
    }
)
class BulkAccountCallRecordingsResource(BaseModel):
    """BulkAccountCallRecordingsResource

    :param added_extensions: added_extensions, defaults to None
    :type added_extensions: List[CallRecordingExtensionResource], optional
    :param updated_extensions: updated_extensions, defaults to None
    :type updated_extensions: List[CallRecordingExtensionResource], optional
    :param removed_extensions: removed_extensions, defaults to None
    :type removed_extensions: List[CallRecordingExtensionResource], optional
    """

    def __init__(
        self,
        added_extensions: List[CallRecordingExtensionResource] = None,
        updated_extensions: List[CallRecordingExtensionResource] = None,
        removed_extensions: List[CallRecordingExtensionResource] = None,
    ):
        if added_extensions is not None:
            self.added_extensions = self._define_list(
                added_extensions, CallRecordingExtensionResource
            )
        if updated_extensions is not None:
            self.updated_extensions = self._define_list(
                updated_extensions, CallRecordingExtensionResource
            )
        if removed_extensions is not None:
            self.removed_extensions = self._define_list(
                removed_extensions, CallRecordingExtensionResource
            )
