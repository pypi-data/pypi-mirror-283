# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .members_grouping_options import MembersGroupingOptions


@JsonMap({"group_by_members": "groupByMembers"})
class GroupingByMembers(BaseModel):
    """This grouping allows to specify the `groupByMembers` option. The response data will be grouped by users and will only include users that belong to the scope selected in `groupByMembers` field

    :param group_by_members: The selected data scope
    :type group_by_members: MembersGroupingOptions
    :param keys: This field can be used to further limit the users selection by specifying unique identifiers of corresponding entities. For example, providing unique queue ids along with `Queue` in `groupByMembers` field will limit the response to users that are queue agents in at least one of these queues, defaults to None
    :type keys: List[str], optional
    """

    def __init__(
        self, group_by_members: MembersGroupingOptions, keys: List[str] = None
    ):
        self.group_by_members = self._enum_matching(
            group_by_members, MembersGroupingOptions.list(), "group_by_members"
        )
        if keys is not None:
            self.keys = keys
