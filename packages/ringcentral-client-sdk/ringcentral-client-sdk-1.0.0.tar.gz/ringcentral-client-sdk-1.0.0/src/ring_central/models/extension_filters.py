# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel


@JsonMap({"from_ids": "fromIds", "to_ids": "toIds"})
class ExtensionFilters(BaseModel):
    """Specifies filtering based on extension ids

    :param from_ids: List of extension ids to match against incoming calls, joined via OR condition. Only applicable for `groupByMembers` options and Users, IVRs, SharedLines and Queues in `groupBy`, defaults to None
    :type from_ids: List[str], optional
    :param to_ids: List of extension ids to match against outgoing calls, joined via OR condition. Limited to the extension id that first accepted the call. Only applicable for `groupByMembers` options and Users, IVRs and SharedLines in `groupBy`, defaults to None
    :type to_ids: List[str], optional
    """

    def __init__(self, from_ids: List[str] = None, to_ids: List[str] = None):
        if from_ids is not None:
            self.from_ids = from_ids
        if to_ids is not None:
            self.to_ids = to_ids
