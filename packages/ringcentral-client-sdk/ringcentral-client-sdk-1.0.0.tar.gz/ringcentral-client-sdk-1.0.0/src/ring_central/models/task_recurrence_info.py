# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class TaskRecurrenceInfoSchedule(Enum):
    """An enumeration representing different categories.

    :cvar NONE: "None"
    :vartype NONE: str
    :cvar DAILY: "Daily"
    :vartype DAILY: str
    :cvar WEEKDAYS: "Weekdays"
    :vartype WEEKDAYS: str
    :cvar WEEKLY: "Weekly"
    :vartype WEEKLY: str
    :cvar MONTHLY: "Monthly"
    :vartype MONTHLY: str
    :cvar YEARLY: "Yearly"
    :vartype YEARLY: str
    """

    NONE = "None"
    DAILY = "Daily"
    WEEKDAYS = "Weekdays"
    WEEKLY = "Weekly"
    MONTHLY = "Monthly"
    YEARLY = "Yearly"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, TaskRecurrenceInfoSchedule._member_map_.values())
        )


class TaskRecurrenceInfoEndingCondition(Enum):
    """An enumeration representing different categories.

    :cvar NONE: "None"
    :vartype NONE: str
    :cvar COUNT: "Count"
    :vartype COUNT: str
    :cvar DATE: "Date"
    :vartype DATE: str
    """

    NONE = "None"
    COUNT = "Count"
    DATE = "Date"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                TaskRecurrenceInfoEndingCondition._member_map_.values(),
            )
        )


@JsonMap(
    {
        "ending_condition": "endingCondition",
        "ending_after": "endingAfter",
        "ending_on": "endingOn",
    }
)
class TaskRecurrenceInfo(BaseModel):
    """Task information

    :param schedule: Recurrence settings of a task. None for non-periodic tasks, defaults to None
    :type schedule: TaskRecurrenceInfoSchedule, optional
    :param ending_condition: Ending condition of a task, defaults to None
    :type ending_condition: TaskRecurrenceInfoEndingCondition, optional
    :param ending_after: Count of iterations of periodic tasks, defaults to None
    :type ending_after: int, optional
    :param ending_on: End date of a periodic task in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) <br>format, UTC time zone<br>, defaults to None
    :type ending_on: str, optional
    """

    def __init__(
        self,
        schedule: TaskRecurrenceInfoSchedule = None,
        ending_condition: TaskRecurrenceInfoEndingCondition = None,
        ending_after: int = None,
        ending_on: str = None,
    ):
        if schedule is not None:
            self.schedule = self._enum_matching(
                schedule, TaskRecurrenceInfoSchedule.list(), "schedule"
            )
        if ending_condition is not None:
            self.ending_condition = self._enum_matching(
                ending_condition,
                TaskRecurrenceInfoEndingCondition.list(),
                "ending_condition",
            )
        if ending_after is not None:
            self.ending_after = ending_after
        if ending_on is not None:
            self.ending_on = ending_on
