# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel
from .call_recording_custom_greeting_data import CallRecordingCustomGreetingData
from .call_recording_custom_greeting_language import CallRecordingCustomGreetingLanguage


class CallRecordingCustomGreetingType(Enum):
    """An enumeration representing different categories.

    :cvar STARTRECORDING: "StartRecording"
    :vartype STARTRECORDING: str
    :cvar STOPRECORDING: "StopRecording"
    :vartype STOPRECORDING: str
    :cvar AUTOMATICRECORDING: "AutomaticRecording"
    :vartype AUTOMATICRECORDING: str
    """

    STARTRECORDING = "StartRecording"
    STOPRECORDING = "StopRecording"
    AUTOMATICRECORDING = "AutomaticRecording"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value, CallRecordingCustomGreetingType._member_map_.values()
            )
        )


@JsonMap({"type_": "type"})
class CallRecordingCustomGreeting(BaseModel):
    """CallRecordingCustomGreeting

    :param type_: type_, defaults to None
    :type type_: CallRecordingCustomGreetingType, optional
    :param custom: Custom greeting data, defaults to None
    :type custom: CallRecordingCustomGreetingData, optional
    :param language: Custom greeting language, defaults to None
    :type language: CallRecordingCustomGreetingLanguage, optional
    """

    def __init__(
        self,
        type_: CallRecordingCustomGreetingType = None,
        custom: CallRecordingCustomGreetingData = None,
        language: CallRecordingCustomGreetingLanguage = None,
    ):
        if type_ is not None:
            self.type_ = self._enum_matching(
                type_, CallRecordingCustomGreetingType.list(), "type_"
            )
        if custom is not None:
            self.custom = self._define_object(custom, CallRecordingCustomGreetingData)
        if language is not None:
            self.language = self._define_object(
                language, CallRecordingCustomGreetingLanguage
            )
