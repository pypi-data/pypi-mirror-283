# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .scim_schema_response import ScimSchemaResponse


class ScimSchemaSearchResponseSchemas(Enum):
    """An enumeration representing different categories.

    :cvar URN_IETF_PARAMS_SCIM_API_MESSAGES_2_0_LISTRESPONSE: "urn:ietf:params:scim:api:messages:2.0:ListResponse"
    :vartype URN_IETF_PARAMS_SCIM_API_MESSAGES_2_0_LISTRESPONSE: str
    """

    URN_IETF_PARAMS_SCIM_API_MESSAGES_2_0_LISTRESPONSE = (
        "urn:ietf:params:scim:api:messages:2.0:ListResponse"
    )

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value, ScimSchemaSearchResponseSchemas._member_map_.values()
            )
        )


@JsonMap(
    {
        "resources": "Resources",
        "items_per_page": "itemsPerPage",
        "start_index": "startIndex",
        "total_results": "totalResults",
    }
)
class ScimSchemaSearchResponse(BaseModel):
    """ScimSchemaSearchResponse

    :param resources: Resource type list, defaults to None
    :type resources: List[ScimSchemaResponse], optional
    :param items_per_page: items_per_page, defaults to None
    :type items_per_page: int, optional
    :param schemas: schemas, defaults to None
    :type schemas: List[ScimSchemaSearchResponseSchemas], optional
    :param start_index: start_index, defaults to None
    :type start_index: int, optional
    :param total_results: total_results, defaults to None
    :type total_results: int, optional
    """

    def __init__(
        self,
        resources: List[ScimSchemaResponse] = None,
        items_per_page: int = None,
        schemas: List[ScimSchemaSearchResponseSchemas] = None,
        start_index: int = None,
        total_results: int = None,
    ):
        if resources is not None:
            self.resources = self._define_list(resources, ScimSchemaResponse)
        if items_per_page is not None:
            self.items_per_page = items_per_page
        if schemas is not None:
            self.schemas = self._define_list(schemas, ScimSchemaSearchResponseSchemas)
        if start_index is not None:
            self.start_index = start_index
        if total_results is not None:
            self.total_results = total_results
