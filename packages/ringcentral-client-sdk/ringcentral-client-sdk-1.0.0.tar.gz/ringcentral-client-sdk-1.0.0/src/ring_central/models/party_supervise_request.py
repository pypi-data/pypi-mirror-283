# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class PartySuperviseRequestMode(Enum):
    """An enumeration representing different categories.

    :cvar LISTEN: "Listen"
    :vartype LISTEN: str
    """

    LISTEN = "Listen"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, PartySuperviseRequestMode._member_map_.values())
        )


class PartySuperviseRequestMediaSdp(Enum):
    """An enumeration representing different categories.

    :cvar SENDONLY: "sendOnly"
    :vartype SENDONLY: str
    :cvar SENDRECV: "sendRecv"
    :vartype SENDRECV: str
    """

    SENDONLY = "sendOnly"
    SENDRECV = "sendRecv"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, PartySuperviseRequestMediaSdp._member_map_.values())
        )


@JsonMap(
    {
        "supervisor_device_id": "supervisorDeviceId",
        "agent_extension_id": "agentExtensionId",
        "auto_answer": "autoAnswer",
        "media_sdp": "mediaSDP",
    }
)
class PartySuperviseRequest(BaseModel):
    """PartySuperviseRequest

    :param mode: Supervising mode
    :type mode: PartySuperviseRequestMode
    :param supervisor_device_id: Internal identifier of a supervisor's device
    :type supervisor_device_id: str
    :param agent_extension_id: Mailbox ID of a user that will be monitored
    :type agent_extension_id: str
    :param auto_answer: Specifies if auto-answer SIP header should be sent. If auto-answer is set to `true`, the call is automatically answered by the supervising party, if set to `false` - then the supervising party has to accept or decline the monitored call, defaults to None
    :type auto_answer: bool, optional
    :param media_sdp: Specifies session description protocol (SDP) setting. The possible values are 'sendOnly' (only sending) meaning one-way audio streaming; and 'sendRecv' (sending/receiving) meaning two-way audio streaming, defaults to None
    :type media_sdp: PartySuperviseRequestMediaSdp, optional
    """

    def __init__(
        self,
        mode: PartySuperviseRequestMode,
        supervisor_device_id: str,
        agent_extension_id: str,
        auto_answer: bool = None,
        media_sdp: PartySuperviseRequestMediaSdp = None,
    ):
        self.mode = self._enum_matching(mode, PartySuperviseRequestMode.list(), "mode")
        self.supervisor_device_id = supervisor_device_id
        self.agent_extension_id = agent_extension_id
        if auto_answer is not None:
            self.auto_answer = auto_answer
        if media_sdp is not None:
            self.media_sdp = self._enum_matching(
                media_sdp, PartySuperviseRequestMediaSdp.list(), "media_sdp"
            )
