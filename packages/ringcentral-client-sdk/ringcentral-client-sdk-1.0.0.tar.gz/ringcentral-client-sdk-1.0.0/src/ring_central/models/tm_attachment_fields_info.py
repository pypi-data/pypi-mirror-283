# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class Style(Enum):
    """An enumeration representing different categories.

    :cvar SHORT: "Short"
    :vartype SHORT: str
    :cvar LONG: "Long"
    :vartype LONG: str
    """

    SHORT = "Short"
    LONG = "Long"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, Style._member_map_.values()))


@JsonMap({})
class TmAttachmentFieldsInfo(BaseModel):
    """TmAttachmentFieldsInfo

    :param title: Title of an individual field, defaults to None
    :type title: str, optional
    :param value: Value of an individual field (supports Markdown), defaults to None
    :type value: str, optional
    :param style: Style of width span applied to a field, defaults to None
    :type style: Style, optional
    """

    def __init__(self, title: str = None, value: str = None, style: Style = None):
        if title is not None:
            self.title = title
        if value is not None:
            self.value = value
        if style is not None:
            self.style = self._enum_matching(style, Style.list(), "style")
