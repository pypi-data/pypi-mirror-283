# This file was generated by liblab | https://liblab.com/

from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel


class ForwardingNumberResourceFeatures(Enum):
    """An enumeration representing different categories.

    :cvar CALLFLIP: "CallFlip"
    :vartype CALLFLIP: str
    :cvar CALLFORWARDING: "CallForwarding"
    :vartype CALLFORWARDING: str
    """

    CALLFLIP = "CallFlip"
    CALLFORWARDING = "CallForwarding"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                ForwardingNumberResourceFeatures._member_map_.values(),
            )
        )


class ForwardingNumberResourceType(Enum):
    """An enumeration representing different categories.

    :cvar HOME: "Home"
    :vartype HOME: str
    :cvar MOBILE: "Mobile"
    :vartype MOBILE: str
    :cvar WORK: "Work"
    :vartype WORK: str
    :cvar PHONELINE: "PhoneLine"
    :vartype PHONELINE: str
    :cvar OUTAGE: "Outage"
    :vartype OUTAGE: str
    :cvar OTHER: "Other"
    :vartype OTHER: str
    """

    HOME = "Home"
    MOBILE = "Mobile"
    WORK = "Work"
    PHONELINE = "PhoneLine"
    OUTAGE = "Outage"
    OTHER = "Other"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, ForwardingNumberResourceType._member_map_.values())
        )


@JsonMap(
    {
        "id_": "id",
        "phone_number": "phoneNumber",
        "flip_number": "flipNumber",
        "type_": "type",
    }
)
class ForwardingNumberResource(BaseModel):
    """ForwardingNumberResource

    :param uri: uri, defaults to None
    :type uri: str, optional
    :param id_: id_, defaults to None
    :type id_: str, optional
    :param phone_number: phone_number, defaults to None
    :type phone_number: str, optional
    :param label: label, defaults to None
    :type label: str, optional
    :param features: features, defaults to None
    :type features: List[ForwardingNumberResourceFeatures], optional
    :param flip_number: flip_number, defaults to None
    :type flip_number: str, optional
    :param type_: Forwarding phone number type, defaults to None
    :type type_: ForwardingNumberResourceType, optional
    """

    def __init__(
        self,
        uri: str = None,
        id_: str = None,
        phone_number: str = None,
        label: str = None,
        features: List[ForwardingNumberResourceFeatures] = None,
        flip_number: str = None,
        type_: ForwardingNumberResourceType = None,
    ):
        if uri is not None:
            self.uri = uri
        if id_ is not None:
            self.id_ = id_
        if phone_number is not None:
            self.phone_number = phone_number
        if label is not None:
            self.label = label
        if features is not None:
            self.features = self._define_list(
                features, ForwardingNumberResourceFeatures
            )
        if flip_number is not None:
            self.flip_number = self._pattern_matching(
                flip_number, "[1-8]", "flip_number"
            )
        if type_ is not None:
            self.type_ = self._enum_matching(
                type_, ForwardingNumberResourceType.list(), "type_"
            )
