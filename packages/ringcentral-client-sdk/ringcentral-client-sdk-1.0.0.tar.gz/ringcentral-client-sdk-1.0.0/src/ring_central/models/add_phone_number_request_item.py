# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class AddPhoneNumberRequestItemUsageType(Enum):
    """An enumeration representing different categories.

    :cvar INVENTORY: "Inventory"
    :vartype INVENTORY: str
    :cvar INVENTORYPARTNERBUSINESSMOBILENUMBER: "InventoryPartnerBusinessMobileNumber"
    :vartype INVENTORYPARTNERBUSINESSMOBILENUMBER: str
    :cvar PARTNERBUSINESSMOBILENUMBER: "PartnerBusinessMobileNumber"
    :vartype PARTNERBUSINESSMOBILENUMBER: str
    """

    INVENTORY = "Inventory"
    INVENTORYPARTNERBUSINESSMOBILENUMBER = "InventoryPartnerBusinessMobileNumber"
    PARTNERBUSINESSMOBILENUMBER = "PartnerBusinessMobileNumber"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                AddPhoneNumberRequestItemUsageType._member_map_.values(),
            )
        )


@JsonMap({"phone_number": "phoneNumber", "usage_type": "usageType"})
class AddPhoneNumberRequestItem(BaseModel):
    """AddPhoneNumberRequestItem

    :param phone_number: Phone number in e.164 format (with '+' prefix).<br>Wildcards are supported to pass large sets (for example 100 numbers);<br>only one phone number record must be passed in request in that case, for example '+1650123456*'<br>
    :type phone_number: str
    :param usage_type: Usage type of phone number. Currently, we support the following values: `Inventory`, `InventoryPartnerBusinessMobileNumber`<br>and `PartnerBusinessMobileNumber`. Later we may support some other values like `ForwardedNumber`, etc.<br>
    :type usage_type: AddPhoneNumberRequestItemUsageType
    """

    def __init__(
        self, phone_number: str, usage_type: AddPhoneNumberRequestItemUsageType
    ):
        self.phone_number = phone_number
        self.usage_type = self._enum_matching(
            usage_type, AddPhoneNumberRequestItemUsageType.list(), "usage_type"
        )
