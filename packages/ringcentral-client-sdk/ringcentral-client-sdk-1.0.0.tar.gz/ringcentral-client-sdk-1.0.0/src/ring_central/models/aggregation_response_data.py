# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .grouping_options import GroupingOptions
from .aggregation_response_record import AggregationResponseRecord


@JsonMap({"grouped_by": "groupedBy"})
class AggregationResponseData(BaseModel):
    """Aggregation result

    :param grouped_by: The selected grouping option
    :type grouped_by: GroupingOptions
    :param records: A list of call aggregations as per the grouping and filtering options specified in the request, defaults to None
    :type records: List[AggregationResponseRecord], optional
    """

    def __init__(
        self,
        grouped_by: GroupingOptions,
        records: List[AggregationResponseRecord] = None,
    ):
        self.grouped_by = self._enum_matching(
            grouped_by, GroupingOptions.list(), "grouped_by"
        )
        if records is not None:
            self.records = self._define_list(records, AggregationResponseRecord)
