# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .creator_info import CreatorInfo
from .specific_info import SpecificInfo
from .export_task_result_info import ExportTaskResultInfo


class DataExportTaskStatus(Enum):
    """An enumeration representing different categories.

    :cvar ACCEPTED: "Accepted"
    :vartype ACCEPTED: str
    :cvar INPROGRESS: "InProgress"
    :vartype INPROGRESS: str
    :cvar COMPLETED: "Completed"
    :vartype COMPLETED: str
    :cvar FAILED: "Failed"
    :vartype FAILED: str
    :cvar EXPIRED: "Expired"
    :vartype EXPIRED: str
    """

    ACCEPTED = "Accepted"
    INPROGRESS = "InProgress"
    COMPLETED = "Completed"
    FAILED = "Failed"
    EXPIRED = "Expired"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, DataExportTaskStatus._member_map_.values()))


@JsonMap(
    {
        "id_": "id",
        "creation_time": "creationTime",
        "last_modified_time": "lastModifiedTime",
    }
)
class DataExportTask(BaseModel):
    """DataExportTask

    :param uri: Canonical URI of a task, defaults to None
    :type uri: str, optional
    :param id_: Internal identifier of a task, defaults to None
    :type id_: str, optional
    :param creation_time: Task creation timestamp, defaults to None
    :type creation_time: str, optional
    :param last_modified_time: Task last modification timestamp, defaults to None
    :type last_modified_time: str, optional
    :param status: Task status, defaults to None
    :type status: DataExportTaskStatus, optional
    :param creator: Task creator information, defaults to None
    :type creator: CreatorInfo, optional
    :param specific: Information specified in request, defaults to None
    :type specific: SpecificInfo, optional
    :param datasets: Data collection archives. Returned by task ID, defaults to None
    :type datasets: List[ExportTaskResultInfo], optional
    """

    def __init__(
        self,
        uri: str = None,
        id_: str = None,
        creation_time: str = None,
        last_modified_time: str = None,
        status: DataExportTaskStatus = None,
        creator: CreatorInfo = None,
        specific: SpecificInfo = None,
        datasets: List[ExportTaskResultInfo] = None,
    ):
        if uri is not None:
            self.uri = uri
        if id_ is not None:
            self.id_ = id_
        if creation_time is not None:
            self.creation_time = creation_time
        if last_modified_time is not None:
            self.last_modified_time = last_modified_time
        if status is not None:
            self.status = self._enum_matching(
                status, DataExportTaskStatus.list(), "status"
            )
        if creator is not None:
            self.creator = self._define_object(creator, CreatorInfo)
        if specific is not None:
            self.specific = self._define_object(specific, SpecificInfo)
        if datasets is not None:
            self.datasets = self._define_list(datasets, ExportTaskResultInfo)
