# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .country_info_short_model import CountryInfoShortModel


@JsonMap({"has_greeting": "hasGreeting", "phone_number": "phoneNumber"})
class PhoneNumberInfoConferencing(BaseModel):
    """PhoneNumberInfoConferencing

    :param country: country, defaults to None
    :type country: CountryInfoShortModel, optional
    :param default: The value should be `true` if the number is default for the conference. Default<br>conference number is a domestic number that can be set by user (otherwise<br>it is set by the system). Only one default number per country is allowed<br>, defaults to None
    :type default: bool, optional
    :param has_greeting: The value should be `true` if any greeting message is played on this number<br>, defaults to None
    :type has_greeting: bool, optional
    :param location: Location (city, region, state) of a conference phone number<br>, defaults to None
    :type location: str, optional
    :param phone_number: Dial-in phone number to connect to a conference, defaults to None
    :type phone_number: str, optional
    :param premium: Indicates if the number is 'premium' (account phone number<br>with the `ConferencingNumber` usageType)<br>, defaults to None
    :type premium: bool, optional
    """

    def __init__(
        self,
        country: CountryInfoShortModel = None,
        default: bool = None,
        has_greeting: bool = None,
        location: str = None,
        phone_number: str = None,
        premium: bool = None,
    ):
        if country is not None:
            self.country = self._define_object(country, CountryInfoShortModel)
        if default is not None:
            self.default = default
        if has_greeting is not None:
            self.has_greeting = has_greeting
        if location is not None:
            self.location = location
        if phone_number is not None:
            self.phone_number = phone_number
        if premium is not None:
            self.premium = premium
