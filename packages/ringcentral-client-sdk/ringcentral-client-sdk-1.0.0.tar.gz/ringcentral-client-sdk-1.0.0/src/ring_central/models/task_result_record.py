# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .task_result_record_errors_info import TaskResultRecordErrorsInfo


@JsonMap({"id_": "id", "chassis_id": "chassisId"})
class TaskResultRecord(BaseModel):
    """TaskResultRecord

    :param id_: Internal identifier of the created/updated element - wireless point or network switch, defaults to None
    :type id_: str, optional
    :param bssid: Unique 48-bit identifier of the wireless access point complying with MAC address conventions. Returned only for 'Wireless Points Bulk Create' tasks, defaults to None
    :type bssid: str, optional
    :param chassis_id: Unique identifier of a network switch. Returned only for 'Switches Bulk Create' tasks, defaults to None
    :type chassis_id: str, optional
    :param port: Switch entity extension for better diversity. Should be used together with chassisId., defaults to None
    :type port: str, optional
    :param status: Operation status, defaults to None
    :type status: str, optional
    :param errors: errors, defaults to None
    :type errors: List[TaskResultRecordErrorsInfo], optional
    """

    def __init__(
        self,
        id_: str = None,
        bssid: str = None,
        chassis_id: str = None,
        port: str = None,
        status: str = None,
        errors: List[TaskResultRecordErrorsInfo] = None,
    ):
        if id_ is not None:
            self.id_ = id_
        if bssid is not None:
            self.bssid = bssid
        if chassis_id is not None:
            self.chassis_id = chassis_id
        if port is not None:
            self.port = port
        if status is not None:
            self.status = status
        if errors is not None:
            self.errors = self._define_list(errors, TaskResultRecordErrorsInfo)
