# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .base import BaseModel


class AccountStatusInfoReason(Enum):
    """An enumeration representing different categories.

    :cvar SUSPENDEDVOLUNTARILY: "SuspendedVoluntarily"
    :vartype SUSPENDEDVOLUNTARILY: str
    :cvar SUSPENDEDINVOLUNTARILY: "SuspendedInvoluntarily"
    :vartype SUSPENDEDINVOLUNTARILY: str
    :cvar CANCELLEDVOLUNTARILY: "CancelledVoluntarily"
    :vartype CANCELLEDVOLUNTARILY: str
    :cvar CANCELLEDINVOLUNTARILY: "CancelledInvoluntarily"
    :vartype CANCELLEDINVOLUNTARILY: str
    """

    SUSPENDEDVOLUNTARILY = "SuspendedVoluntarily"
    SUSPENDEDINVOLUNTARILY = "SuspendedInvoluntarily"
    CANCELLEDVOLUNTARILY = "CancelledVoluntarily"
    CANCELLEDINVOLUNTARILY = "CancelledInvoluntarily"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, AccountStatusInfoReason._member_map_.values())
        )


@JsonMap({})
class AccountStatusInfo(BaseModel):
    """Optional information to be used when account is moved to "Disabled" status

    :param reason: Type of suspension, voluntarily or not, defaults to None
    :type reason: AccountStatusInfoReason, optional
    :param comment: A meaningful description of the reason to change the status, defaults to None
    :type comment: str, optional
    :param till: Date after which the account will get deleted. Parameter can be used to overwrite default retention period, defaults to None
    :type till: str, optional
    """

    def __init__(
        self,
        reason: AccountStatusInfoReason = None,
        comment: str = None,
        till: str = None,
    ):
        if reason is not None:
            self.reason = self._enum_matching(
                reason, AccountStatusInfoReason.list(), "reason"
            )
        if comment is not None:
            self.comment = comment
        if till is not None:
            self.till = till
