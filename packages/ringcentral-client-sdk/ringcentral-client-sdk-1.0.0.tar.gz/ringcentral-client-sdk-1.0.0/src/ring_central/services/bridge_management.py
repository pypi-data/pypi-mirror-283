# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.update_bridge_request import UpdateBridgeRequest
from ..models.create_bridge_request import CreateBridgeRequest
from ..models.bridge_response import BridgeResponse


class BridgeManagementService(BaseService):

    @cast_models
    def create_bridge(
        self,
        account_id: str,
        extension_id: str,
        request_body: CreateBridgeRequest = None,
    ) -> BridgeResponse:
        """Creates a new bridge for the user specified by **accountId** and **extensionId** identifiers. The request body
        should contain JSON object which describes properties of the new bridge.
        The bridge can be created by a user himself, his delegate or any user who has the **Super Admin** privilege.

        :param request_body: The request body., defaults to None
        :type request_body: CreateBridgeRequest, optional
        :param account_id: Account identifier
        :type account_id: str
        :param extension_id: Extension identifier
        :type extension_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: BridgeResponse
        """

        Validator(CreateBridgeRequest).is_optional().validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/rcvideo/v2/account/{{accountId}}/extension/{{extensionId}}/bridges",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return BridgeResponse._unmap(response)

    @cast_models
    def get_default_bridge(self, account_id: str, extension_id: str) -> BridgeResponse:
        """Returns a default bridge (PMI) for the user specified by **accountId**
        and **extensionId** identifiers.

        :param account_id: Account identifier
        :type account_id: str
        :param extension_id: Extension identifier
        :type extension_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: BridgeResponse
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/rcvideo/v2/account/{{accountId}}/extension/{{extensionId}}/bridges/default",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return BridgeResponse._unmap(response)

    @cast_models
    def get_bridge_by_pstn_pin(
        self, pin: str, phone_number: str = None, pw: str = None
    ) -> BridgeResponse:
        """Finds a bridge by Host or Participant PSTN PIN.

        :param pin: Host or Participant PSTN PIN
        :type pin: str
        :param phone_number: Phone number to find a phone group for PSTN PIN. If it is not specified, then the default phone group will be used., defaults to None
        :type phone_number: str, optional
        :param pw: Bridge hash password, defaults to None
        :type pw: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: BridgeResponse
        """

        Validator(str).validate(pin)
        Validator(str).is_optional().validate(phone_number)
        Validator(str).is_optional().validate(pw)

        serialized_request = (
            Serializer(
                f"{self.base_url}/rcvideo/v2/bridges/pin/pstn/{{pin}}",
                self.get_default_headers(),
            )
            .add_path("pin", pin)
            .add_query("phoneNumber", phone_number)
            .add_query("pw", pw)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return BridgeResponse._unmap(response)

    @cast_models
    def get_bridge_by_web_pin(self, pin: str, pw: str = None) -> BridgeResponse:
        """Finds a bridge by short identifier (Web PIN). Also it can be used to find a default bridge by the alias
        (personal meeting name).

        :param pin: Bridge short identifier (Web PIN) or alias (personal meeting name)
        :type pin: str
        :param pw: Bridge hash password, defaults to None
        :type pw: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: BridgeResponse
        """

        Validator(str).validate(pin)
        Validator(str).is_optional().validate(pw)

        serialized_request = (
            Serializer(
                f"{self.base_url}/rcvideo/v2/bridges/pin/web/{{pin}}",
                self.get_default_headers(),
            )
            .add_path("pin", pin)
            .add_query("pw", pw)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return BridgeResponse._unmap(response)

    @cast_models
    def get_bridge(self, bridge_id: str, pw: str = None) -> BridgeResponse:
        """Returns a bridge by **bridgeId** identifier.

        :param bridge_id: Bridge identifier
        :type bridge_id: str
        :param pw: Bridge hash password, defaults to None
        :type pw: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: BridgeResponse
        """

        Validator(str).validate(bridge_id)
        Validator(str).is_optional().validate(pw)

        serialized_request = (
            Serializer(
                f"{self.base_url}/rcvideo/v2/bridges/{{bridgeId}}",
                self.get_default_headers(),
            )
            .add_path("bridgeId", bridge_id)
            .add_query("pw", pw)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return BridgeResponse._unmap(response)

    @cast_models
    def update_bridge(
        self, request_body: UpdateBridgeRequest, bridge_id: str
    ) -> BridgeResponse:
        """Updates a bridge by **bridgeId** identifier. The request body should contain JSON object with updating properties.
        Update can only be done by bridge owner, his delegate or any user who has the **Super Admin** privilege.

        :param request_body: The request body.
        :type request_body: UpdateBridgeRequest
        :param bridge_id: Bridge identifier
        :type bridge_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: BridgeResponse
        """

        Validator(UpdateBridgeRequest).validate(request_body)
        Validator(str).validate(bridge_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/rcvideo/v2/bridges/{{bridgeId}}",
                self.get_default_headers(),
            )
            .add_path("bridgeId", bridge_id)
            .serialize()
            .set_method("PATCH")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return BridgeResponse._unmap(response)

    @cast_models
    def delete_bridge(self, bridge_id: str):
        """Deletes a bridge by **bridgeId** identifier.
        Deletion can only be done by bridge owner, his delegate or any user who has the **Super Admin** privilege.

        :param bridge_id: Bridge identifier
        :type bridge_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(bridge_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/rcvideo/v2/bridges/{{bridgeId}}",
                self.get_default_headers(),
            )
            .add_path("bridgeId", bridge_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)

        return response
