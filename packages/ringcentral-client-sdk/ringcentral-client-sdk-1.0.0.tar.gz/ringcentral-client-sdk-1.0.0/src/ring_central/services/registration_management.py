# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.reg_session_model import RegSessionModel


class RegistrationManagementService(BaseService):

    @cast_models
    def rcw_reg_get_session(self, session_id: str) -> RegSessionModel:
        """Returns a registration Session information by ID.

        A caller must be an authorized user: either a host of the webinar or an IT Admin:
        a user from host's account with "WebinarSettings" permission.

        :param session_id: Identifier of the Session.
        :type session_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response
        :rtype: RegSessionModel
        """

        Validator(str).min_length(1).max_length(20).validate(session_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/webinar/registration/v1/sessions/{{sessionId}}",
                self.get_default_headers(),
            )
            .add_path("sessionId", session_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return RegSessionModel._unmap(response)

    @cast_models
    def rcw_reg_update_session(
        self, request_body: RegSessionModel, session_id: str
    ) -> RegSessionModel:
        """Updates a Session by ID.

        This is a PARTIAL update (PATCH), client may call it providing only attributes which are to be changed.

        A caller must be an authorized user: either a host of the webinar or an IT Admin:
        a user from host's account with "WebinarSettings" permission.

        If a session record with given ID doesn't exist on Registration Service side the API should return HTTP 404.

        :param request_body: The request body.
        :type request_body: RegSessionModel
        :param session_id: Identifier of the Session.
        :type session_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response
        :rtype: RegSessionModel
        """

        Validator(RegSessionModel).validate(request_body)
        Validator(str).min_length(1).max_length(20).validate(session_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/webinar/registration/v1/sessions/{{sessionId}}",
                self.get_default_headers(),
            )
            .add_path("sessionId", session_id)
            .serialize()
            .set_method("PATCH")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return RegSessionModel._unmap(response)
