# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.summary_input import SummaryInput
from ..models.punctuate_input import PunctuateInput
from ..models.cai_async_api_response import CaiAsyncApiResponse


class TextService(BaseService):

    @cast_models
    def cai_summarize(
        self, request_body: SummaryInput, webhook: str
    ) -> CaiAsyncApiResponse:
        """Returns Conversational Summarization to the webhook URI for segmented transcript of audios
        with start, end, speakerId, text(alphanumeric and punctuations).

        :param request_body: The request body.
        :type request_body: SummaryInput
        :param webhook: The webhook URI to which the job response will be returned
        :type webhook: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Task accepted for processing.
        :rtype: CaiAsyncApiResponse
        """

        Validator(SummaryInput).validate(request_body)
        Validator(str).validate(webhook)

        serialized_request = (
            Serializer(
                f"{self.base_url}/ai/text/v1/async/summarize",
                self.get_default_headers(),
            )
            .add_query("webhook", webhook)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return CaiAsyncApiResponse._unmap(response)

    @cast_models
    def cai_punctuate(
        self, request_body: PunctuateInput, webhook: str
    ) -> CaiAsyncApiResponse:
        """Returns Smart Punctuation to the provided webhook URI.

        :param request_body: The request body.
        :type request_body: PunctuateInput
        :param webhook: The webhook URI to which the job response will be returned
        :type webhook: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Task accepted for processing.
        :rtype: CaiAsyncApiResponse
        """

        Validator(PunctuateInput).validate(request_body)
        Validator(str).validate(webhook)

        serialized_request = (
            Serializer(
                f"{self.base_url}/ai/text/v1/async/punctuate",
                self.get_default_headers(),
            )
            .add_query("webhook", webhook)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return CaiAsyncApiResponse._unmap(response)
