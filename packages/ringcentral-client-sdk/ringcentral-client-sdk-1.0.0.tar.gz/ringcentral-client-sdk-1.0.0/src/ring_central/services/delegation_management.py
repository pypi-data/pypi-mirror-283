# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.delegators_list_result import DelegatorsListResult


class DelegationManagementService(BaseService):

    @cast_models
    def rcv_list_delegators(
        self, account_id: str, extension_id: str
    ) -> DelegatorsListResult:
        """Returns the list of users who can delegate bridge/meeting creation to the given user.

        :param account_id: account_id
        :type account_id: str
        :param extension_id: extension_id
        :type extension_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response
        :rtype: DelegatorsListResult
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/rcvideo/v1/accounts/{{accountId}}/extensions/{{extensionId}}/delegators",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return DelegatorsListResult._unmap(response)
