# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.soc_msg_creation_time_order import SocMsgCreationTimeOrder
from ..models.identity_model import IdentityModel
from ..models.identities_list import IdentitiesList


class IdentitiesService(BaseService):

    @cast_models
    def soc_msg_list_identities(
        self,
        source_id: str = None,
        identity_group_ids: List[str] = None,
        user_id: str = None,
        uuid: str = None,
        order_by: SocMsgCreationTimeOrder = None,
        page_token: str = None,
        per_page: int = None,
    ) -> IdentitiesList:
        """List identities by creation date. The default order is descending.

        The account context of this request is determined by the RC Account Id associated with the access token provided
        in the Authorization header.

        The query parameters provided shall be considered an AND operation to filter the list.

        A query parameter not specified or a query parameter provided with no value is treated as not required for
        filtering the list.

        :param source_id: Filter based on the specified sourceId., defaults to None
        :type source_id: str, optional
        :param identity_group_ids: Filter based on the specified identityGroupIds (separated by commas)., defaults to None
        :type identity_group_ids: List[str], optional
        :param user_id: Filter based on the specified userId., defaults to None
        :type user_id: str, optional
        :param uuid: Filter based on the specified uuid., defaults to None
        :type uuid: str, optional
        :param order_by: Order results by specified field., defaults to None
        :type order_by: SocMsgCreationTimeOrder, optional
        :param page_token: The token indicating the particular page of the result set to be retrieved.
        If omitted the first page will be returned., defaults to None
        :type page_token: str, optional
        :param per_page: The number of items per page. If provided value in the request
        is greater than a maximum, the maximum value is applied, defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response.
        :rtype: IdentitiesList
        """

        Validator(str).is_optional().validate(source_id)
        Validator(str).is_array().is_optional().validate(identity_group_ids)
        Validator(str).is_optional().validate(user_id)
        Validator(str).is_optional().validate(uuid)
        Validator(SocMsgCreationTimeOrder).is_optional().validate(order_by)
        Validator(str).is_optional().validate(page_token)
        Validator(int).is_optional().min(1).max(1000).validate(per_page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/cx/social-messaging/v1/identities",
                self.get_default_headers(),
            )
            .add_query("sourceId", source_id)
            .add_query("identityGroupIds", identity_group_ids, explode=False)
            .add_query("userId", user_id)
            .add_query("uuid", uuid)
            .add_query("orderBy", order_by)
            .add_query("pageToken", page_token, explode=False)
            .add_query("perPage", per_page, explode=False)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return IdentitiesList._unmap(response)

    @cast_models
    def soc_msg_get_identity(self, identity_id: str) -> IdentityModel:
        """Renders an identity from given id.

        :param identity_id: identity_id
        :type identity_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response.
        :rtype: IdentityModel
        """

        Validator(str).validate(identity_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/cx/social-messaging/v1/identities/{{identityId}}",
                self.get_default_headers(),
            )
            .add_path("identityId", identity_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return IdentityModel._unmap(response)
