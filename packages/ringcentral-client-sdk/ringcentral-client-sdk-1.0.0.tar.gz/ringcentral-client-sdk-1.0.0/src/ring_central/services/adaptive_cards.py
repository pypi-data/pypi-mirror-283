# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.adaptive_card_short_info import AdaptiveCardShortInfo
from ..models.adaptive_card_request import AdaptiveCardRequest
from ..models.adaptive_card_info import AdaptiveCardInfo


class AdaptiveCardsService(BaseService):

    @cast_models
    def create_glip_adaptive_card_new(
        self, request_body: AdaptiveCardRequest, chat_id: str
    ) -> AdaptiveCardShortInfo:
        """Creates a new adaptive card in the chat specified in path.

        :param request_body: The request body.
        :type request_body: AdaptiveCardRequest
        :param chat_id: Internal identifier of a chat
        :type chat_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Created
        :rtype: AdaptiveCardShortInfo
        """

        Validator(AdaptiveCardRequest).validate(request_body)
        Validator(str).validate(chat_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/team-messaging/v1/chats/{{chatId}}/adaptive-cards",
                self.get_default_headers(),
            )
            .add_path("chatId", chat_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return AdaptiveCardShortInfo._unmap(response)

    @cast_models
    def get_glip_adaptive_card_new(self, card_id: List[str]) -> AdaptiveCardInfo:
        """Returns adaptive card(s) with given id(s).

        :param card_id: Internal identifier of an adaptive card, or comma separated list of adaptive cards IDs.
        :type card_id: List[str]
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: AdaptiveCardInfo
        """

        Validator(str).is_array().validate(card_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/team-messaging/v1/adaptive-cards/{{cardId}}",
                self.get_default_headers(),
            )
            .add_path("cardId", card_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return AdaptiveCardInfo._unmap(response)

    @cast_models
    def update_glip_adaptive_card_new(
        self, request_body: AdaptiveCardRequest, card_id: str
    ) -> AdaptiveCardShortInfo:
        """Updates an adaptive card.

        :param request_body: The request body.
        :type request_body: AdaptiveCardRequest
        :param card_id: Internal identifier of an adaptive card
        :type card_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: AdaptiveCardShortInfo
        """

        Validator(AdaptiveCardRequest).validate(request_body)
        Validator(str).validate(card_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/team-messaging/v1/adaptive-cards/{{cardId}}",
                self.get_default_headers(),
            )
            .add_path("cardId", card_id)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return AdaptiveCardShortInfo._unmap(response)

    @cast_models
    def delete_glip_adaptive_card_new(self, card_id: str):
        """Deletes an adaptive card by ID.

        :param card_id: Adaptive Card ID to be deleted.
        :type card_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(card_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/team-messaging/v1/adaptive-cards/{{cardId}}",
                self.get_default_headers(),
            )
            .add_path("cardId", card_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)

        return response
