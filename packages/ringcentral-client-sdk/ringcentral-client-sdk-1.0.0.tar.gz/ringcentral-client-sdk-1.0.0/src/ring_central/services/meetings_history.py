# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.meeting_page import MeetingPage
from ..models.meeting import Meeting
from ..models.list_video_meetings_type import ListVideoMeetingsType


class MeetingsHistoryService(BaseService):

    @cast_models
    def list_video_meetings(
        self,
        text: str = None,
        page_token: str = None,
        per_page: int = None,
        type_: ListVideoMeetingsType = None,
        start_time: int = None,
        end_time: int = None,
    ) -> MeetingPage:
        """Returns the list of user meetings.

        :param text: Search text, defaults to None
        :type text: str, optional
        :param page_token: Token to get the next page, defaults to None
        :type page_token: str, optional
        :param per_page: Number of records returned, defaults to None
        :type per_page: int, optional
        :param type_: Specify what kind of meeting should be returned. Possible values: All, My, Deleted, Shared
        Request type meaning in meeting search:
        `None` (not passed) - take meetings only where requested acc/ext is participant OR host OR deputy OR watcher.
        `ALL`- access rights of meeting is equal to Alive AND requested acc/ext  is in watchers list OR host OR deputy
        `My`- access rights of meeting is equal to Alive AND requested acc/ext is host OR deputy
        `Shared` - access rights of meeting is equal to Alive AND requested acc/ext is in watcher list AND not HOST
        `Deleted` - access rights of meeting is equal to Delete and requested acc/ext is host OR deputy, defaults to None
        :type type_: ListVideoMeetingsType, optional
        :param start_time: Unix timestamp in milliseconds (inclusive) indicates the start time of meetings which should be included in response, defaults to None
        :type start_time: int, optional
        :param end_time: Unix timestamp in milliseconds (inclusive) indicates the end time of meetings which should be included in response, defaults to None
        :type end_time: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Returns meetings list with pagination
        :rtype: MeetingPage
        """

        Validator(str).is_optional().validate(text)
        Validator(str).is_optional().validate(page_token)
        Validator(int).is_optional().validate(per_page)
        Validator(ListVideoMeetingsType).is_optional().validate(type_)
        Validator(int).is_optional().validate(start_time)
        Validator(int).is_optional().validate(end_time)

        serialized_request = (
            Serializer(
                f"{self.base_url}/rcvideo/v1/history/meetings",
                self.get_default_headers(),
            )
            .add_query("text", text)
            .add_query("pageToken", page_token)
            .add_query("perPage", per_page)
            .add_query("type", type_)
            .add_query("startTime", start_time)
            .add_query("endTime", end_time)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return MeetingPage._unmap(response)

    @cast_models
    def get_video_meeting(self, meeting_id: str) -> Meeting:
        """Returns a user meeting by ID.

        :param meeting_id: Meeting id
        :type meeting_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Return meeting
        :rtype: Meeting
        """

        Validator(str).validate(meeting_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/rcvideo/v1/history/meetings/{{meetingId}}",
                self.get_default_headers(),
            )
            .add_path("meetingId", meeting_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return Meeting._unmap(response)
