# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.tm_person_info import TmPersonInfo
from ..models.tm_company_info import TmCompanyInfo


class ProfileService(BaseService):

    @cast_models
    def read_tm_company_info_new(self, company_id: str) -> TmCompanyInfo:
        """Returns information about one or more companies by their IDs.

        :param company_id: Internal identifier of an RC account/Glip company, or tilde (~) to indicate a company the current user belongs to.
        :type company_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Success
        :rtype: TmCompanyInfo
        """

        Validator(str).validate(company_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/team-messaging/v1/companies/{{companyId}}",
                self.get_default_headers(),
            )
            .add_path("companyId", company_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return TmCompanyInfo._unmap(response)

    @cast_models
    def read_glip_person_new(self, person_id: str) -> TmPersonInfo:
        """Returns a user or multiple users by their ID(s). Batch request is supported.

        :param person_id: Internal identifier of a user to be returned, the maximum number of IDs is 30
        :type person_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Success
        :rtype: TmPersonInfo
        """

        Validator(str).validate(person_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/team-messaging/v1/persons/{{personId}}",
                self.get_default_headers(),
            )
            .add_path("personId", person_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return TmPersonInfo._unmap(response)
