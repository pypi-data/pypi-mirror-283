# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.create_call_monitoring_group_request import (
    CreateCallMonitoringGroupRequest,
)
from ..models.call_monitoring_groups import CallMonitoringGroups
from ..models.call_monitoring_group_member_list import CallMonitoringGroupMemberList
from ..models.call_monitoring_group import CallMonitoringGroup
from ..models.call_monitoring_bulk_assign import CallMonitoringBulkAssign


class CallMonitoringGroupsService(BaseService):

    @cast_models
    def list_call_monitoring_groups(
        self,
        account_id: str,
        page: int = None,
        per_page: int = None,
        member_extension_id: str = None,
    ) -> CallMonitoringGroups:
        """Returns a list of call monitoring groups filtered by an extension.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param page: Indicates a page number to retrieve. Only positive number values
        are allowed, defaults to None
        :type page: int, optional
        :param per_page: Indicates a page size (number of items), defaults to None
        :type per_page: int, optional
        :param member_extension_id: Internal identifier of an extension that is a member of every
        group within the result, defaults to None
        :type member_extension_id: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Call monitoring groups information
        :rtype: CallMonitoringGroups
        """

        Validator(str).validate(account_id)
        Validator(int).is_optional().validate(page)
        Validator(int).is_optional().validate(per_page)
        Validator(str).is_optional().validate(member_extension_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/call-monitoring-groups",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_query("page", page)
            .add_query("perPage", per_page)
            .add_query("memberExtensionId", member_extension_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return CallMonitoringGroups._unmap(response)

    @cast_models
    def create_call_monitoring_group(
        self, request_body: CreateCallMonitoringGroupRequest, account_id: str
    ) -> CallMonitoringGroup:
        """Creates a new call monitoring group.

        :param request_body: The request body.
        :type request_body: CreateCallMonitoringGroupRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Call monitoring group information
        :rtype: CallMonitoringGroup
        """

        Validator(CreateCallMonitoringGroupRequest).validate(request_body)
        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/call-monitoring-groups",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return CallMonitoringGroup._unmap(response)

    @cast_models
    def update_call_monitoring_group(
        self,
        request_body: CreateCallMonitoringGroupRequest,
        account_id: str,
        group_id: str,
    ) -> CallMonitoringGroup:
        """Updates a call monitoring group name.

        :param request_body: The request body.
        :type request_body: CreateCallMonitoringGroupRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param group_id: Internal identifier of a call monitoring group
        :type group_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Updated call monitoring group information
        :rtype: CallMonitoringGroup
        """

        Validator(CreateCallMonitoringGroupRequest).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(group_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/call-monitoring-groups/{{groupId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("groupId", group_id)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return CallMonitoringGroup._unmap(response)

    @cast_models
    def delete_call_monitoring_group(self, account_id: str, group_id: str):
        """Removes information about a call monitoring group specified in path.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param group_id: Internal identifier of a call monitoring group
        :type group_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(account_id)
        Validator(str).validate(group_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/call-monitoring-groups/{{groupId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("groupId", group_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def update_call_monitoring_group_list(
        self, request_body: CallMonitoringBulkAssign, account_id: str, group_id: str
    ):
        """Updates a list of call monitoring groups.

        :param request_body: The request body.
        :type request_body: CallMonitoringBulkAssign
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param group_id: Internal identifier of a call monitoring group
        :type group_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(CallMonitoringBulkAssign).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(group_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/call-monitoring-groups/{{groupId}}/bulk-assign",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("groupId", group_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def list_call_monitoring_group_members(
        self, account_id: str, group_id: str, page: int = None, per_page: int = None
    ) -> CallMonitoringGroupMemberList:
        """Returns a list of members for a call monitoring group specified in path.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param group_id: Internal identifier of a call monitoring group
        :type group_id: str
        :param page: Indicates a page number to retrieve. Only positive number values
        are allowed, defaults to None
        :type page: int, optional
        :param per_page: Indicates a page size (number of items), defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Call monitoring group members information
        :rtype: CallMonitoringGroupMemberList
        """

        Validator(str).validate(account_id)
        Validator(str).validate(group_id)
        Validator(int).is_optional().validate(page)
        Validator(int).is_optional().validate(per_page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/call-monitoring-groups/{{groupId}}/members",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("groupId", group_id)
            .add_query("page", page)
            .add_query("perPage", per_page)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return CallMonitoringGroupMemberList._unmap(response)
