# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.permission_resource import PermissionResource
from ..models.permission_collection_resource import PermissionCollectionResource
from ..models.permission_category_resource import PermissionCategoryResource
from ..models.permission_category_collection_resource import (
    PermissionCategoryCollectionResource,
)
from ..models.auth_profile_resource import AuthProfileResource
from ..models.auth_profile_check_resource import AuthProfileCheckResource


class UserPermissionsService(BaseService):

    @cast_models
    def read_authorization_profile(
        self, account_id: str, extension_id: str, target_extension_id: str = None
    ) -> AuthProfileResource:
        """Returns a list of user permissions granted at authorization procedure.
        Please note: Some permissions may be restricted by extension type.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param target_extension_id: target_extension_id, defaults to None
        :type target_extension_id: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: List of user permissions
        :rtype: AuthProfileResource
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(str).is_optional().validate(target_extension_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/authz-profile",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_query("targetExtensionId", target_extension_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return AuthProfileResource._unmap(response)

    @cast_models
    def check_user_permission(
        self,
        account_id: str,
        extension_id: str,
        permission_id: str = None,
        target_extension_id: str = None,
    ) -> AuthProfileCheckResource:
        """Checks if a certain user permission is activated for a particular extension.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param permission_id: permission_id, defaults to None
        :type permission_id: str, optional
        :param target_extension_id: target_extension_id, defaults to None
        :type target_extension_id: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Authorization profile resource
        :rtype: AuthProfileCheckResource
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(str).is_optional().validate(permission_id)
        Validator(str).is_optional().validate(target_extension_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/authz-profile/check",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_query("permissionId", permission_id)
            .add_query("targetExtensionId", target_extension_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return AuthProfileCheckResource._unmap(response)

    @cast_models
    def list_permissions(
        self,
        page: int = None,
        per_page: int = None,
        assignable: bool = None,
        service_plan_id: str = None,
    ) -> PermissionCollectionResource:
        """Returns a list of extension user permissions.

        :param page: The result set page number (1-indexed) to return, defaults to None
        :type page: int, optional
        :param per_page: The number of items per page. If provided value in the request
        is greater than a maximum, the maximum value is applied, defaults to None
        :type per_page: int, optional
        :param assignable: Specifies whether to return only assignable permissions, defaults to None
        :type assignable: bool, optional
        :param service_plan_id: Internal identifier of a service plan, defaults to None
        :type service_plan_id: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: List of user permissions
        :rtype: PermissionCollectionResource
        """

        Validator(int).is_optional().min(1).max(1000).validate(page)
        Validator(int).is_optional().min(1).max(1000).validate(per_page)
        Validator(bool).is_optional().validate(assignable)
        Validator(str).is_optional().validate(service_plan_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/dictionary/permission",
                self.get_default_headers(),
            )
            .add_query("page", page, explode=False)
            .add_query("perPage", per_page, explode=False)
            .add_query("assignable", assignable)
            .add_query("servicePlanId", service_plan_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return PermissionCollectionResource._unmap(response)

    @cast_models
    def read_permission(self, permission_id: str) -> PermissionResource:
        """Returns a user permission by ID.

        :param permission_id: Internal identifier of a user permission
        :type permission_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Permission information
        :rtype: PermissionResource
        """

        Validator(str).validate(permission_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/dictionary/permission/{{permissionId}}",
                self.get_default_headers(),
            )
            .add_path("permissionId", permission_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return PermissionResource._unmap(response)

    @cast_models
    def list_permission_categories(
        self, page: int = None, per_page: int = None, service_plan_id: str = None
    ) -> PermissionCategoryCollectionResource:
        """Returns a list of permission categories.

        :param page: The result set page number (1-indexed) to return, defaults to None
        :type page: int, optional
        :param per_page: The number of items per page. If provided value in the request
        is greater than a maximum, the maximum value is applied, defaults to None
        :type per_page: int, optional
        :param service_plan_id: Internal identifier of a service plan, defaults to None
        :type service_plan_id: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: List of permission categories
        :rtype: PermissionCategoryCollectionResource
        """

        Validator(int).is_optional().min(1).max(1000).validate(page)
        Validator(int).is_optional().min(1).max(1000).validate(per_page)
        Validator(str).is_optional().validate(service_plan_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/dictionary/permission-category",
                self.get_default_headers(),
            )
            .add_query("page", page, explode=False)
            .add_query("perPage", per_page, explode=False)
            .add_query("servicePlanId", service_plan_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return PermissionCategoryCollectionResource._unmap(response)

    @cast_models
    def read_permission_category(
        self, permission_category_id: str
    ) -> PermissionCategoryResource:
        """Returns a permission category by ID.

        :param permission_category_id: Internal identifier of a category
        :type permission_category_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Permission category
        :rtype: PermissionCategoryResource
        """

        Validator(str).validate(permission_category_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/dictionary/permission-category/{{permissionCategoryId}}",
                self.get_default_headers(),
            )
            .add_path("permissionCategoryId", permission_category_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return PermissionCategoryResource._unmap(response)
