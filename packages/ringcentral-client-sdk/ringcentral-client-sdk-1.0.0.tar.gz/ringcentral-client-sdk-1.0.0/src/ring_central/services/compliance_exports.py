# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.list_data_export_tasks_new_status import ListDataExportTasksNewStatus
from ..models.data_export_task_list import DataExportTaskList
from ..models.data_export_task import DataExportTask
from ..models.create_data_export_task_request import CreateDataExportTaskRequest


class ComplianceExportsService(BaseService):

    @cast_models
    def list_data_export_tasks_new(
        self,
        status: ListDataExportTasksNewStatus = None,
        page: int = None,
        per_page: int = None,
    ) -> DataExportTaskList:
        """Returns the list of Glip data export tasks.

        :param status: Status of the task(s) to be returned. Multiple values are supported, defaults to None
        :type status: ListDataExportTasksNewStatus, optional
        :param page: Page number to be retrieved; value range is > 0, defaults to None
        :type page: int, optional
        :param per_page: Number of records to be returned per page; value range is 1 - 250, defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Data Export Task List
        :rtype: DataExportTaskList
        """

        Validator(ListDataExportTasksNewStatus).is_optional().validate(status)
        Validator(int).is_optional().validate(page)
        Validator(int).is_optional().validate(per_page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/team-messaging/v1/data-export",
                self.get_default_headers(),
            )
            .add_query("status", status)
            .add_query("page", page)
            .add_query("perPage", per_page)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return DataExportTaskList._unmap(response)

    @cast_models
    def create_data_export_task_new(
        self, request_body: CreateDataExportTaskRequest = None
    ) -> DataExportTask:
        """Creates a task for Glip data export and returns a link at which the exported data will be available in future once the task is implemented. The exported data can be downloaded by calling Get Data Export Task method with the specified task ID. Simultaneously no more than 2 tasks per company can be created.

        :param request_body: The request body., defaults to None
        :type request_body: CreateDataExportTaskRequest, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The task is accepted
        :rtype: DataExportTask
        """

        Validator(CreateDataExportTaskRequest).is_optional().validate(request_body)

        serialized_request = (
            Serializer(
                f"{self.base_url}/team-messaging/v1/data-export",
                self.get_default_headers(),
            )
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return DataExportTask._unmap(response)

    @cast_models
    def read_data_export_task_new(self, task_id: str) -> DataExportTask:
        """Returns the links for downloading Glip data exported within the specified task. If the export task is still in progress, then only the task status will be returned. If the data is ready for downloading, then the list of URLs will be returned.

        :param task_id: Internal identifier of a task to be retrieved
        :type task_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: DataExportTask
        """

        Validator(str).validate(task_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/team-messaging/v1/data-export/{{taskId}}",
                self.get_default_headers(),
            )
            .add_path("taskId", task_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return DataExportTask._unmap(response)
