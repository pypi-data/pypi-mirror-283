# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.sms_direction_enum import SmsDirectionEnum
from ..models.read_a2_psms_opt_outs_status import ReadA2PsmsOptOutsStatus
from ..models.opt_out_list_response import OptOutListResponse
from ..models.opt_out_bulk_assign_response import OptOutBulkAssignResponse
from ..models.opt_out_bulk_assign_request import OptOutBulkAssignRequest
from ..models.message_statuses_response import MessageStatusesResponse
from ..models.message_list_response import MessageListResponse
from ..models.message_details_response import MessageDetailsResponse
from ..models.message_batch_response import MessageBatchResponse
from ..models.message_batch_create_request import MessageBatchCreateRequest
from ..models.list_a2_psms_view import ListA2PsmsView
from ..models.list_a2_p_batches_status import ListA2PBatchesStatus
from ..models.batch_list_response import BatchListResponse


class HighVolumeSmsService(BaseService):

    @cast_models
    def aggregate_a2_psms_statuses(
        self,
        account_id: str,
        batch_id: str = None,
        direction: SmsDirectionEnum = None,
        date_from: str = None,
        date_to: str = None,
        phone_number: List[str] = None,
    ) -> MessageStatusesResponse:
        """Retrieves a set of message counts by message status and error codes filtered by dates, batchId and message direction.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param batch_id: Internal identifier of a message batch to filter the response, defaults to None
        :type batch_id: str, optional
        :param direction: Direction of a message to filter the message list result.
        By default, there is no filter applied - both Inbound and Outbound messages are returned, defaults to None
        :type direction: SmsDirectionEnum, optional
        :param date_from: The end of the time range to filter the results in ISO 8601 format including timezone. Default is the 'dateTo' minus 24 hours, defaults to None
        :type date_from: str, optional
        :param date_to: The end of the time range to filter the results in ISO 8601 format including timezone. Default is the current time, defaults to None
        :type date_to: str, optional
        :param phone_number: List of phone numbers (specified in 'to' or 'from' fields of a message) to filter the results. Maximum number of phone numbers allowed to be specified as filters is 15, defaults to None
        :type phone_number: List[str], optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The statuses of the messages sent by the account filtered by criteria specified in the query
        :rtype: MessageStatusesResponse
        """

        Validator(str).validate(account_id)
        Validator(str).is_optional().validate(batch_id)
        Validator(SmsDirectionEnum).is_optional().validate(direction)
        Validator(str).is_optional().validate(date_from)
        Validator(str).is_optional().validate(date_to)
        Validator(str).is_array().is_optional().validate(phone_number)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/a2p-sms/statuses",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_query("batchId", batch_id)
            .add_query("direction", direction)
            .add_query("dateFrom", date_from)
            .add_query("dateTo", date_to)
            .add_query("phoneNumber", phone_number)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return MessageStatusesResponse._unmap(response)

    @cast_models
    def list_a2_psms(
        self,
        account_id: str,
        batch_id: str = None,
        direction: SmsDirectionEnum = None,
        date_from: str = None,
        date_to: str = None,
        view: ListA2PsmsView = None,
        phone_number: List[str] = None,
        page_token: str = None,
        per_page: int = None,
    ) -> MessageListResponse:
        """Returns the list of outbound/inbound A2P messages sent from/to A2P phone numbers of the current account. The list can be filtered by message batch ID and/or phone number.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param batch_id: Internal identifier of a message batch to filter the response, defaults to None
        :type batch_id: str, optional
        :param direction: Direction of a message to filter the message list result.
        By default, there is no filter applied - both Inbound and Outbound messages are returned, defaults to None
        :type direction: SmsDirectionEnum, optional
        :param date_from: The end of the time range to filter the results in ISO 8601 format including timezone. Default is the 'dateTo' minus 24 hours, defaults to None
        :type date_from: str, optional
        :param date_to: The end of the time range to filter the results in ISO 8601 format including timezone. Default is the current time, defaults to None
        :type date_to: str, optional
        :param view: Indicates if the response has to be detailed, includes text in the response if detailed, defaults to None
        :type view: ListA2PsmsView, optional
        :param phone_number: List of phone numbers (specified in 'to' or 'from' fields of a message) to filter the results. Maximum number of phone numbers allowed to be specified as filters is 15, defaults to None
        :type phone_number: List[str], optional
        :param page_token: The page token of the page to be retrieved., defaults to None
        :type page_token: str, optional
        :param per_page: The number of messages to be returned per request, defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The list of messages sent by the account and filtered by the criteria specified in the query parameters

        :rtype: MessageListResponse
        """

        Validator(str).validate(account_id)
        Validator(str).is_optional().validate(batch_id)
        Validator(SmsDirectionEnum).is_optional().validate(direction)
        Validator(str).is_optional().validate(date_from)
        Validator(str).is_optional().validate(date_to)
        Validator(ListA2PsmsView).is_optional().validate(view)
        Validator(str).is_array().is_optional().validate(phone_number)
        Validator(str).is_optional().validate(page_token)
        Validator(int).is_optional().validate(per_page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/a2p-sms/messages",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_query("batchId", batch_id)
            .add_query("direction", direction)
            .add_query("dateFrom", date_from)
            .add_query("dateTo", date_to)
            .add_query("view", view)
            .add_query("phoneNumber", phone_number)
            .add_query("pageToken", page_token)
            .add_query("perPage", per_page)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return MessageListResponse._unmap(response)

    @cast_models
    def read_a2_psms(self, account_id: str, message_id: str) -> MessageDetailsResponse:
        """Returns the details of an A2P SMS message by ID.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param message_id: Internal identifier of a message to be retrieved
        :type message_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The message is found and returned
        :rtype: MessageDetailsResponse
        """

        Validator(str).validate(account_id)
        Validator(str).validate(message_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/a2p-sms/messages/{{messageId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("messageId", message_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return MessageDetailsResponse._unmap(response)

    @cast_models
    def read_a2_psms_opt_outs(
        self,
        account_id: str,
        from_: str = None,
        to: str = None,
        status: ReadA2PsmsOptOutsStatus = None,
        page_token: str = None,
        per_page: int = None,
    ) -> OptOutListResponse:
        """Returns the list of numbers opted out from the account. The list
        can be filtered by `to`/`from` phone number query parameters. Specifying `text/csv`
        in the `Accept` header lets download the data in the CSV format.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param from_: The sender's phone number in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format for filtering messages.
        The asterisk value "*" means any number in `from` field, defaults to None
        :type from_: str, optional
        :param to: The receiver's phone number (`to` field) in [E.164](https://www.itu.int/rec/T-REC-E.164-201011-I) format for filtering messages, defaults to None
        :type to: str, optional
        :param status: The status (opted out, opted in, or both) to be used as the filter, defaults to None
        :type status: ReadA2PsmsOptOutsStatus, optional
        :param page_token: The page token of the page to be retrieved, defaults to None
        :type page_token: str, optional
        :param per_page: The number of records to be returned for the page, defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response
        :rtype: OptOutListResponse
        """

        Validator(str).validate(account_id)
        Validator(str).is_optional().validate(from_)
        Validator(str).is_optional().validate(to)
        Validator(ReadA2PsmsOptOutsStatus).is_optional().validate(status)
        Validator(str).is_optional().validate(page_token)
        Validator(int).is_optional().validate(per_page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/a2p-sms/opt-outs",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_query("from", from_)
            .add_query("to", to)
            .add_query("status", status)
            .add_query("pageToken", page_token)
            .add_query("perPage", per_page)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return OptOutListResponse._unmap(response)

    @cast_models
    def add_a2_psms_opt_outs(
        self, request_body: OptOutBulkAssignRequest, account_id: str
    ) -> OptOutBulkAssignResponse:
        """Adds multiple opt-outs and/or opt-ins for the specified sender number and a set of recipient numbers.

        :param request_body: The request body.
        :type request_body: OptOutBulkAssignRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The results of adding opt-outs and opt-ins.
        :rtype: OptOutBulkAssignResponse
        """

        Validator(OptOutBulkAssignRequest).validate(request_body)
        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/a2p-sms/opt-outs/bulk-assign",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return OptOutBulkAssignResponse._unmap(response)

    @cast_models
    def list_a2_p_batches(
        self,
        account_id: str,
        date_from: str = None,
        date_to: str = None,
        from_: str = None,
        status: List[ListA2PBatchesStatus] = None,
        page_token: str = None,
        per_page: int = None,
    ) -> BatchListResponse:
        """Returns the list of A2P batches sent from the current account.
        The list can be filtered by message batch ID and/or from phone number.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param date_from: The end of the time range to filter the results in ISO 8601 format including timezone. Default is the 'dateTo' minus 24 hours, defaults to None
        :type date_from: str, optional
        :param date_to: The end of the time range to filter the results in ISO 8601 format including timezone. Default is the current time, defaults to None
        :type date_to: str, optional
        :param from_: Phone number in E.164 format from which the messages are going to be sent, defaults to None
        :type from_: str, optional
        :param status: A list of batch statuses to filter the results, defaults to None
        :type status: List[ListA2PBatchesStatus], optional
        :param page_token: The page token of the page to be retrieved, defaults to None
        :type page_token: str, optional
        :param per_page: The number of records to be returned per page, defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The list of batches sent by the account and filtered by the criteria specified in the query parameters

        :rtype: BatchListResponse
        """

        Validator(str).validate(account_id)
        Validator(str).is_optional().validate(date_from)
        Validator(str).is_optional().validate(date_to)
        Validator(str).is_optional().validate(from_)
        Validator(ListA2PBatchesStatus).is_array().is_optional().validate(status)
        Validator(str).is_optional().validate(page_token)
        Validator(int).is_optional().validate(per_page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/a2p-sms/batches",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_query("dateFrom", date_from)
            .add_query("dateTo", date_to)
            .add_query("from", from_)
            .add_query("status", status)
            .add_query("pageToken", page_token)
            .add_query("perPage", per_page)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return BatchListResponse._unmap(response)

    @cast_models
    def create_a2_psms(
        self, request_body: MessageBatchCreateRequest, account_id: str
    ) -> MessageBatchResponse:
        """Allows to send high volume of A2P (Application-to-Person) SMS messages
        (in message batches). Only phone number with the `A2PSmsSender` feature can
        be used as a sender.

        :param request_body: The request body.
        :type request_body: MessageBatchCreateRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Message batch created
        :rtype: MessageBatchResponse
        """

        Validator(MessageBatchCreateRequest).validate(request_body)
        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/a2p-sms/batches",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return MessageBatchResponse._unmap(response)

    @cast_models
    def read_a2_p_batch(self, account_id: str, batch_id: str) -> MessageBatchResponse:
        """Returns information on a message batch.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param batch_id: Internal identifier of a message batch to be retrieved
        :type batch_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Message batch information
        :rtype: MessageBatchResponse
        """

        Validator(str).validate(account_id)
        Validator(str).validate(batch_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/a2p-sms/batches/{{batchId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("batchId", batch_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return MessageBatchResponse._unmap(response)
