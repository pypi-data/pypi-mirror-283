# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.sync_address_book_sync_type import SyncAddressBookSyncType
from ..models.sort_by import SortBy
from ..models.personal_contact_resource import PersonalContactResource
from ..models.personal_contact_request import PersonalContactRequest
from ..models.favorite_contact_list import FavoriteContactList
from ..models.favorite_collection import FavoriteCollection
from ..models.contact_list import ContactList
from ..models.address_book_sync import AddressBookSync
from ..models.address_book_bulk_upload_response import AddressBookBulkUploadResponse
from ..models.address_book_bulk_upload_request import AddressBookBulkUploadRequest


class ExternalContactsService(BaseService):

    @cast_models
    def address_book_bulk_upload(
        self, request_body: AddressBookBulkUploadRequest, account_id: str
    ) -> AddressBookBulkUploadResponse:
        """Uploads multiple contacts for multiple extensions at once.
        Maximum 500 extensions can be uploaded per request. Max amount
        of contacts that can be uploaded per extension is 10,000.
        Each contact uploaded for a certain extension is not visible
        to other extensions.

        :param request_body: The request body.
        :type request_body: AddressBookBulkUploadRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Accepted
        :rtype: AddressBookBulkUploadResponse
        """

        Validator(AddressBookBulkUploadRequest).validate(request_body)
        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/address-book-bulk-upload",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return AddressBookBulkUploadResponse._unmap(response)

    @cast_models
    def get_address_book_bulk_upload_task(
        self, account_id: str, task_id: str
    ) -> AddressBookBulkUploadResponse:
        """Returns the status of a task on adding multiple contacts to multiple extensions.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param task_id: Internal identifier of a task
        :type task_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Contacts upload task
        :rtype: AddressBookBulkUploadResponse
        """

        Validator(str).validate(account_id)
        Validator(str).validate(task_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/address-book-bulk-upload/tasks/{{taskId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("taskId", task_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return AddressBookBulkUploadResponse._unmap(response)

    @cast_models
    def list_favorite_contacts(
        self, account_id: str, extension_id: str
    ) -> FavoriteContactList:
        """Returns the list of favorite contacts of the current extension.
        Favorite contacts include both company contacts (extensions) and personal
        contacts (address book records).

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Favorite Contact List
        :rtype: FavoriteContactList
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/favorite",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return FavoriteContactList._unmap(response)

    @cast_models
    def update_favorite_contact_list(
        self, request_body: FavoriteCollection, account_id: str, extension_id: str
    ) -> FavoriteContactList:
        """Updates the list of favorite contacts of the current extension.
        Favorite contacts include both company contacts (extensions) and personal
        contacts (address book records).**Please note**: Currently personal address
        book size is limited to 10 000 contacts.

        :param request_body: The request body.
        :type request_body: FavoriteCollection
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Favorite contacts list
        :rtype: FavoriteContactList
        """

        Validator(FavoriteCollection).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/favorite",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return FavoriteContactList._unmap(response)

    @cast_models
    def list_contacts(
        self,
        account_id: str,
        extension_id: str,
        starts_with: str = None,
        sort_by: List[SortBy] = None,
        page: int = None,
        per_page: int = None,
        phone_number: List[str] = None,
    ) -> ContactList:
        """Returns the user personal contacts.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param starts_with: If specified, only contacts which 'First name' or 'Last name' start
        with the mentioned substring will be returned. Case-insensitive, defaults to None
        :type starts_with: str, optional
        :param sort_by: Sorts results by the specified property, defaults to None
        :type sort_by: List[SortBy], optional
        :param page: The result set page number (1-indexed) to return, defaults to None
        :type page: int, optional
        :param per_page: The number of items per page. If provided value in the request
        is greater than a maximum, the maximum value is applied, defaults to None
        :type per_page: int, optional
        :param phone_number: Phone number in e.164 format, defaults to None
        :type phone_number: List[str], optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Contact list
        :rtype: ContactList
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(str).is_optional().validate(starts_with)
        Validator(SortBy).is_array().is_optional().validate(sort_by)
        Validator(int).is_optional().min(1).max(1000).validate(page)
        Validator(int).is_optional().min(1).max(1000).validate(per_page)
        Validator(str).is_array().is_optional().validate(phone_number)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/address-book/contact",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_query("startsWith", starts_with)
            .add_query("sortBy", sort_by)
            .add_query("page", page, explode=False)
            .add_query("perPage", per_page, explode=False)
            .add_query("phoneNumber", phone_number)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return ContactList._unmap(response)

    @cast_models
    def create_contact(
        self,
        request_body: PersonalContactRequest,
        account_id: str,
        extension_id: str,
        dialing_plan: str = None,
    ) -> PersonalContactResource:
        """Creates the user personal contact.

        :param request_body: The request body.
        :type request_body: PersonalContactRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param dialing_plan: Country code value complying with the [ISO 3166-1 alpha-2](https://ru.wikipedia.org/wiki/ISO_3166-1_alpha-2)
        format. The default value is home country of the current extension, defaults to None
        :type dialing_plan: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Created contact information
        :rtype: PersonalContactResource
        """

        Validator(PersonalContactRequest).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(str).is_optional().validate(dialing_plan)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/address-book/contact",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_query("dialingPlan", dialing_plan)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return PersonalContactResource._unmap(response)

    @cast_models
    def read_contact(
        self, account_id: str, extension_id: str, contact_id: List[int]
    ) -> PersonalContactResource:
        """Returns the user personal contact(s).
        [Batch request syntax](https://developers.ringcentral.com/api-reference/Batch-Requests) is supported.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param contact_id: The list of contact identifiers (comma-separated)
        :type contact_id: List[int]
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: User personal contact(s) information
        :rtype: PersonalContactResource
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(int).is_array().validate(contact_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/address-book/contact/{{contactId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_path("contactId", contact_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return PersonalContactResource._unmap(response)

    @cast_models
    def update_contact(
        self,
        request_body: PersonalContactRequest,
        account_id: str,
        extension_id: str,
        contact_id: List[int],
        dialing_plan: str = None,
    ) -> PersonalContactResource:
        """Updates the user personal contact(s) (full resource update).
        [Batch request syntax](https://developers.ringcentral.com/api-reference/Batch-Requests) is supported.

        :param request_body: The request body.
        :type request_body: PersonalContactRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param contact_id: The list of contact identifiers (comma-separated)
        :type contact_id: List[int]
        :param dialing_plan: Country code value complying with the [ISO 3166-1 alpha-2](https://ru.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
        The default value is home country of the current extension, defaults to None
        :type dialing_plan: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Success
        :rtype: PersonalContactResource
        """

        Validator(PersonalContactRequest).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(int).is_array().validate(contact_id)
        Validator(str).is_optional().validate(dialing_plan)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/address-book/contact/{{contactId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_path("contactId", contact_id)
            .add_query("dialingPlan", dialing_plan)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return PersonalContactResource._unmap(response)

    @cast_models
    def patch_contact(
        self,
        request_body: PersonalContactRequest,
        account_id: str,
        extension_id: str,
        contact_id: int,
        dialing_plan: str = None,
    ) -> PersonalContactResource:
        """Updates particular values of a personal contact attributes specified in request (partial resource update). Omitted attributes will remain unchanged.
        If any attribute is passed in request body with the null value, then this attribute value will be removed.

        :param request_body: The request body.
        :type request_body: PersonalContactRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param contact_id: Internal identifier of a contact record in the RingCentral database
        :type contact_id: int
        :param dialing_plan: Country code value complying with the [ISO 3166-1 alpha-2](https://ru.wikipedia.org/wiki/ISO_3166-1_alpha-2)
        format. The default value is home country of the current extension, defaults to None
        :type dialing_plan: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Edited personal contact information
        :rtype: PersonalContactResource
        """

        Validator(PersonalContactRequest).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(int).validate(contact_id)
        Validator(str).is_optional().validate(dialing_plan)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/address-book/contact/{{contactId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_path("contactId", contact_id)
            .add_query("dialingPlan", dialing_plan)
            .serialize()
            .set_method("PATCH")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return PersonalContactResource._unmap(response)

    @cast_models
    def delete_contact(self, account_id: str, extension_id: str, contact_id: List[int]):
        """Deletes the user personal contact(s).
        [Batch request syntax](https://developers.ringcentral.com/api-reference/Batch-Requests) is supported.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param contact_id: The list of contact identifiers (comma-separated)
        :type contact_id: List[int]
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(int).is_array().validate(contact_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/address-book/contact/{{contactId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_path("contactId", contact_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def sync_address_book(
        self,
        account_id: str,
        extension_id: str,
        sync_type: SyncAddressBookSyncType = None,
        sync_token: str = None,
        per_page: int = None,
        page_id: int = None,
    ) -> AddressBookSync:
        """Synchronizes user contacts.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param sync_type: Type of synchronization, defaults to None
        :type sync_type: SyncAddressBookSyncType, optional
        :param sync_token: Value of syncToken property of the last sync request response, defaults to None
        :type sync_token: str, optional
        :param per_page: Number of records per page to be returned. Max number of
        records is 250, which is also the default.
        For 'FSync' - if the number of records exceeds the parameter value
        (either specified or default), all of the pages can be retrieved
        in several requests. For 'ISync' - if the number of records exceeds
        page size, then the number of incoming changes to this
        number is limited, defaults to None
        :type per_page: int, optional
        :param page_id: Internal identifier of a page. It can be obtained from the 'nextPageId'
        parameter passed in response body, defaults to None
        :type page_id: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Synchronized user contacts
        :rtype: AddressBookSync
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(SyncAddressBookSyncType).is_optional().validate(sync_type)
        Validator(str).is_optional().validate(sync_token)
        Validator(int).is_optional().validate(per_page)
        Validator(int).is_optional().validate(page_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/address-book-sync",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_query("syncType", sync_type)
            .add_query("syncToken", sync_token)
            .add_query("perPage", per_page)
            .add_query("pageId", page_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return AddressBookSync._unmap(response)
