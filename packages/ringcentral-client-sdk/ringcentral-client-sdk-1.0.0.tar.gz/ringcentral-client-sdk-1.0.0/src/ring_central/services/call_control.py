# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.transfer_target import TransferTarget
from ..models.supervise_call_session_response import SuperviseCallSessionResponse
from ..models.supervise_call_session_request import SuperviseCallSessionRequest
from ..models.reply_party import ReplyParty
from ..models.pickup_target import PickupTarget
from ..models.party_update_request import PartyUpdateRequest
from ..models.party_supervise_response import PartySuperviseResponse
from ..models.party_supervise_request import PartySuperviseRequest
from ..models.make_call_out_request import MakeCallOutRequest
from ..models.ignore_request_body import IgnoreRequestBody
from ..models.hold_call_party_request import HoldCallPartyRequest
from ..models.forward_target import ForwardTarget
from ..models.forward_call_party_response import ForwardCallPartyResponse
from ..models.call_session_object import CallSessionObject
from ..models.call_session import CallSession
from ..models.call_recording_update import CallRecordingUpdate
from ..models.call_recording import CallRecording
from ..models.call_party_reply import CallPartyReply
from ..models.call_party_flip import CallPartyFlip
from ..models.call_party import CallParty
from ..models.bridge_target_request import BridgeTargetRequest
from ..models.answer_target import AnswerTarget
from ..models.add_party_request import AddPartyRequest


class CallControlService(BaseService):

    @cast_models
    def create_call_out_call_session(
        self, request_body: MakeCallOutRequest, account_id: str
    ) -> CallSession:
        """Creates a new outbound call out session. Currently this method is supported for Softphone/Hardphone only, since device IDs for WebRTC/Mobile apps cannot be obtained.

        :param request_body: The request body.
        :type request_body: MakeCallOutRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Created
        :rtype: CallSession
        """

        Validator(MakeCallOutRequest).validate(request_body)
        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/telephony/call-out",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return CallSession._unmap(response)

    @cast_models
    def create_conference_call_session(self, account_id: str) -> CallSession:
        """Initiates a conference call session.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Created
        :rtype: CallSession
        """

        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/telephony/conference",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("POST")
        )

        response = self.send_request(serialized_request)

        return CallSession._unmap(response)

    @cast_models
    def read_call_session_status(
        self,
        account_id: str,
        telephony_session_id: str,
        timestamp: str = None,
        timeout: str = None,
    ) -> CallSessionObject:
        """Returns the status of a call session by ID.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param telephony_session_id: Internal identifier of a call session
        :type telephony_session_id: str
        :param timestamp: The date and time of a call session latest change, defaults to None
        :type timestamp: str, optional
        :param timeout: The time frame of awaiting for a status change before sending
        the resulting one in response, defaults to None
        :type timeout: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Success
        :rtype: CallSessionObject
        """

        Validator(str).validate(account_id)
        Validator(str).validate(telephony_session_id)
        Validator(str).is_optional().validate(timestamp)
        Validator(str).is_optional().validate(timeout)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/telephony/sessions/{{telephonySessionId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("telephonySessionId", telephony_session_id)
            .add_query("timestamp", timestamp)
            .add_query("timeout", timeout)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return CallSessionObject._unmap(response)

    @cast_models
    def delete_call_session(self, account_id: str, telephony_session_id: str):
        """Drops a call session.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param telephony_session_id: Internal identifier of a call session
        :type telephony_session_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(account_id)
        Validator(str).validate(telephony_session_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/telephony/sessions/{{telephonySessionId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("telephonySessionId", telephony_session_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def create_call_party_with_bring_in(
        self, request_body: AddPartyRequest, account_id: str, telephony_session_id: str
    ) -> CallParty:
        """Adds a new party to the call session by bringing in an established
        SIP call connection. The maximum number of parties to bring in is 10; only
        1 call party can be added per request. Currently, the method is supported for
        sessions of the `Conference` origin only.

        :param request_body: The request body.
        :type request_body: AddPartyRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param telephony_session_id: Internal identifier of a call session
        :type telephony_session_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Created
        :rtype: CallParty
        """

        Validator(AddPartyRequest).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(telephony_session_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/telephony/sessions/{{telephonySessionId}}/parties/bring-in",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("telephonySessionId", telephony_session_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return CallParty._unmap(response)

    @cast_models
    def read_call_party_status(
        self, account_id: str, telephony_session_id: str, party_id: str
    ) -> CallParty:
        """Returns a call party status by ID.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param telephony_session_id: Internal identifier of a call session
        :type telephony_session_id: str
        :param party_id: Internal identifier of a call party
        :type party_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Success
        :rtype: CallParty
        """

        Validator(str).validate(account_id)
        Validator(str).validate(telephony_session_id)
        Validator(str).validate(party_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/telephony/sessions/{{telephonySessionId}}/parties/{{partyId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("telephonySessionId", telephony_session_id)
            .add_path("partyId", party_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return CallParty._unmap(response)

    @cast_models
    def update_call_party(
        self,
        request_body: PartyUpdateRequest,
        account_id: str,
        telephony_session_id: str,
        party_id: str,
    ) -> CallParty:
        """Modifies a call party by ID. There is a known limitation for Mute scenario - mute via REST API doesn't work with mute placed via RingCentral apps or HardPhone. It means that if you muted participant via Call Control API and RingCentral Desktop app you need to unmute both endpoints to bring the media back.

        :param request_body: The request body.
        :type request_body: PartyUpdateRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param telephony_session_id: Internal identifier of a call session
        :type telephony_session_id: str
        :param party_id: Internal identifier of a call party
        :type party_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Success
        :rtype: CallParty
        """

        Validator(PartyUpdateRequest).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(telephony_session_id)
        Validator(str).validate(party_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/telephony/sessions/{{telephonySessionId}}/parties/{{partyId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("telephonySessionId", telephony_session_id)
            .add_path("partyId", party_id)
            .serialize()
            .set_method("PATCH")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return CallParty._unmap(response)

    @cast_models
    def delete_call_party(
        self, account_id: str, telephony_session_id: str, party_id: str
    ):
        """Deletes a party from a call session by ID. A party can be deleted only if supervised or parked. It is possible to delete only one conference participant per request.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param telephony_session_id: Internal identifier of a call session
        :type telephony_session_id: str
        :param party_id: Internal identifier of a call party
        :type party_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(account_id)
        Validator(str).validate(telephony_session_id)
        Validator(str).validate(party_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/telephony/sessions/{{telephonySessionId}}/parties/{{partyId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("telephonySessionId", telephony_session_id)
            .add_path("partyId", party_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def unhold_call_party(
        self, account_id: str, telephony_session_id: str, party_id: str
    ) -> CallParty:
        """Brings a party back into a call and stops to play Hold Music. There is a known limitation for Hold API - hold via REST API doesn't work with hold placed via RingCentral apps or HardPhone. It means that if you muted participant via Call Control API and RingCentral Desktop app, then you need to un-hold both endpoints to remove Hold Music and bring media back.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param telephony_session_id: Internal identifier of a call session
        :type telephony_session_id: str
        :param party_id: Internal identifier of a call party
        :type party_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Success
        :rtype: CallParty
        """

        Validator(str).validate(account_id)
        Validator(str).validate(telephony_session_id)
        Validator(str).validate(party_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/telephony/sessions/{{telephonySessionId}}/parties/{{partyId}}/unhold",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("telephonySessionId", telephony_session_id)
            .add_path("partyId", party_id)
            .serialize()
            .set_method("POST")
        )

        response = self.send_request(serialized_request)

        return CallParty._unmap(response)

    @cast_models
    def call_park_party(
        self, account_id: str, telephony_session_id: str, party_id: str
    ) -> CallParty:
        """Parks a call to a virtual location from where it can further be retrieved by any user from any phone of the system. The call session and call party identifiers should be specified in path. Currently, the users can park only their own incoming calls. Up to 50 calls can be parked simultaneously. Park location starts with asterisk (*) and ranges 801-899.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param telephony_session_id: Internal identifier of a call session
        :type telephony_session_id: str
        :param party_id: Internal identifier of a call party
        :type party_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Created
        :rtype: CallParty
        """

        Validator(str).validate(account_id)
        Validator(str).validate(telephony_session_id)
        Validator(str).validate(party_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/telephony/sessions/{{telephonySessionId}}/parties/{{partyId}}/park",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("telephonySessionId", telephony_session_id)
            .add_path("partyId", party_id)
            .serialize()
            .set_method("POST")
        )

        response = self.send_request(serialized_request)

        return CallParty._unmap(response)

    @cast_models
    def call_flip_party(
        self,
        request_body: CallPartyFlip,
        account_id: str,
        telephony_session_id: str,
        party_id: str,
    ):
        """Performs call flip procedure by holding opposite party and calling to the specified target

        :param request_body: The request body.
        :type request_body: CallPartyFlip
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param telephony_session_id: Internal identifier of a call session
        :type telephony_session_id: str
        :param party_id: Internal identifier of a call party
        :type party_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(CallPartyFlip).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(telephony_session_id)
        Validator(str).validate(party_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/telephony/sessions/{{telephonySessionId}}/parties/{{partyId}}/flip",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("telephonySessionId", telephony_session_id)
            .add_path("partyId", party_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def reply_party(
        self,
        request_body: CallPartyReply,
        account_id: str,
        telephony_session_id: str,
        party_id: str,
    ) -> ReplyParty:
        """Replies with text/pattern without picking up a call.

        :param request_body: The request body.
        :type request_body: CallPartyReply
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param telephony_session_id: Internal identifier of a call session
        :type telephony_session_id: str
        :param party_id: Internal identifier of a call party
        :type party_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Success
        :rtype: ReplyParty
        """

        Validator(CallPartyReply).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(telephony_session_id)
        Validator(str).validate(party_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/telephony/sessions/{{telephonySessionId}}/parties/{{partyId}}/reply",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("telephonySessionId", telephony_session_id)
            .add_path("partyId", party_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return ReplyParty._unmap(response)

    @cast_models
    def bridge_call_party(
        self,
        request_body: BridgeTargetRequest,
        account_id: str,
        telephony_session_id: str,
        party_id: str,
    ) -> CallParty:
        """Allows the user to connect multiple call session participants over a conference call bridge.
        The current active call session ID and party ID of the user within this session should be specified
        in path; the bridged call session ID and party ID of the user within that session should be specified
        in request body. Thus, the user connects participants of two sessions into the one conference call
        using his/her own party IDs from both sessions."

        :param request_body: The request body.
        :type request_body: BridgeTargetRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param telephony_session_id: Internal identifier of a call session
        :type telephony_session_id: str
        :param party_id: Internal identifier of a call party
        :type party_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Bridged Call Info
        :rtype: CallParty
        """

        Validator(BridgeTargetRequest).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(telephony_session_id)
        Validator(str).validate(party_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/telephony/sessions/{{telephonySessionId}}/parties/{{partyId}}/bridge",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("telephonySessionId", telephony_session_id)
            .add_path("partyId", party_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return CallParty._unmap(response)

    @cast_models
    def ignore_call_in_queue(
        self,
        request_body: IgnoreRequestBody,
        account_id: str,
        telephony_session_id: str,
        party_id: str,
    ):
        """Ignores a call to a call queue agent in `Setup` or `Proceeding` state.

        :param request_body: The request body.
        :type request_body: IgnoreRequestBody
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param telephony_session_id: Internal identifier of a call session
        :type telephony_session_id: str
        :param party_id: Internal identifier of a call party
        :type party_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(IgnoreRequestBody).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(telephony_session_id)
        Validator(str).validate(party_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/telephony/sessions/{{telephonySessionId}}/parties/{{partyId}}/ignore",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("telephonySessionId", telephony_session_id)
            .add_path("partyId", party_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def supervise_call_party(
        self,
        request_body: PartySuperviseRequest,
        account_id: str,
        telephony_session_id: str,
        party_id: str,
    ) -> PartySuperviseResponse:
        """Allows to monitor a call party in 'Listen' mode. Input parameters
        are extension number of a monitored user and internal identifier of a supervisor's
        device. Call session and party identifiers should be specified in path. Please
        note that for this method dual channel audio flow is supported, which means
        that you need to make one more request for monitoring the second participant
        of a call. And as a result of each monitoring request the client receives
        SIP invite with the following header `p-rc-api-monitoring-ids` containing
        IDs of the monitored party and session. The flow is supported for calls with
        no more than 2 participants. Currently, this method is supported for Softphone/Hardphone devices
        only, since device IDs for WebRTC/Mobile apps cannot be obtained.

        :param request_body: The request body.
        :type request_body: PartySuperviseRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param telephony_session_id: Internal identifier of a call session
        :type telephony_session_id: str
        :param party_id: Internal identifier of a call party
        :type party_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Created
        :rtype: PartySuperviseResponse
        """

        Validator(PartySuperviseRequest).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(telephony_session_id)
        Validator(str).validate(party_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/telephony/sessions/{{telephonySessionId}}/parties/{{partyId}}/supervise",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("telephonySessionId", telephony_session_id)
            .add_path("partyId", party_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return PartySuperviseResponse._unmap(response)

    @cast_models
    def reject_party(self, account_id: str, telephony_session_id: str, party_id: str):
        """Rejects an inbound call in a "Setup" or "Proceeding" state

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param telephony_session_id: Internal identifier of a call session
        :type telephony_session_id: str
        :param party_id: Internal identifier of a call party
        :type party_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(account_id)
        Validator(str).validate(telephony_session_id)
        Validator(str).validate(party_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/telephony/sessions/{{telephonySessionId}}/parties/{{partyId}}/reject",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("telephonySessionId", telephony_session_id)
            .add_path("partyId", party_id)
            .serialize()
            .set_method("POST")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def start_call_recording(
        self, account_id: str, telephony_session_id: str, party_id: str
    ):
        """Starts a new call recording for the party

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param telephony_session_id: Internal identifier of a call session
        :type telephony_session_id: str
        :param party_id: Internal identifier of a call party
        :type party_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(account_id)
        Validator(str).validate(telephony_session_id)
        Validator(str).validate(party_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/telephony/sessions/{{telephonySessionId}}/parties/{{partyId}}/recordings",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("telephonySessionId", telephony_session_id)
            .add_path("partyId", party_id)
            .serialize()
            .set_method("POST")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def pause_resume_call_recording(
        self,
        request_body: CallRecordingUpdate,
        account_id: str,
        telephony_session_id: str,
        party_id: str,
        recording_id: str,
        brand_id: str,
    ) -> CallRecording:
        """Pause/resume recording

        :param request_body: The request body.
        :type request_body: CallRecordingUpdate
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param telephony_session_id: Internal identifier of a call session
        :type telephony_session_id: str
        :param party_id: Internal identifier of a call party
        :type party_id: str
        :param recording_id: Internal identifier of a recording
        :type recording_id: str
        :param brand_id: Identifies a brand of a logged-in user or a brand of a sign-up session
        :type brand_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Success
        :rtype: CallRecording
        """

        Validator(CallRecordingUpdate).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(telephony_session_id)
        Validator(str).validate(party_id)
        Validator(str).validate(recording_id)
        Validator(str).validate(brand_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/telephony/sessions/{{telephonySessionId}}/parties/{{partyId}}/recordings/{{recordingId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("telephonySessionId", telephony_session_id)
            .add_path("partyId", party_id)
            .add_path("recordingId", recording_id)
            .add_query("brandId", brand_id)
            .serialize()
            .set_method("PATCH")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return CallRecording._unmap(response)

    @cast_models
    def answer_call_party(
        self,
        request_body: AnswerTarget,
        account_id: str,
        telephony_session_id: str,
        party_id: str,
    ) -> CallParty:
        """Answers a call on a certain device by passing the corresponding device ID in request body. Supported for call forwarding, call transfer, call flip and call queues.

        :param request_body: The request body.
        :type request_body: AnswerTarget
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param telephony_session_id: Internal identifier of a call session
        :type telephony_session_id: str
        :param party_id: Internal identifier of a call party
        :type party_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Call Session Information
        :rtype: CallParty
        """

        Validator(AnswerTarget).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(telephony_session_id)
        Validator(str).validate(party_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/telephony/sessions/{{telephonySessionId}}/parties/{{partyId}}/answer",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("telephonySessionId", telephony_session_id)
            .add_path("partyId", party_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return CallParty._unmap(response)

    @cast_models
    def transfer_call_party(
        self,
        request_body: TransferTarget,
        account_id: str,
        telephony_session_id: str,
        party_id: str,
    ) -> CallParty:
        """Transfers an answered call to the specified call party. Applicable for a call session in "Answered" or "Hold" state.

        :param request_body: The request body.
        :type request_body: TransferTarget
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param telephony_session_id: Internal identifier of a call session
        :type telephony_session_id: str
        :param party_id: Internal identifier of a call party
        :type party_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Success
        :rtype: CallParty
        """

        Validator(TransferTarget).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(telephony_session_id)
        Validator(str).validate(party_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/telephony/sessions/{{telephonySessionId}}/parties/{{partyId}}/transfer",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("telephonySessionId", telephony_session_id)
            .add_path("partyId", party_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return CallParty._unmap(response)

    @cast_models
    def hold_call_party(
        self,
        account_id: str,
        telephony_session_id: str,
        party_id: str,
        request_body: HoldCallPartyRequest = None,
    ) -> CallParty:
        """Puts the party to stand-alone mode and starts to play Hold Music according to configuration & state to peers. There is a known limitation for Hold API - hold via REST API doesn't work with hold placed via RingCentral apps or HardPhone. It means that if you muted participant via Call Control API and RingCentral Desktop app, then you need to un-hold both endpoints to remove Hold Music and bring media back.

        :param request_body: The request body., defaults to None
        :type request_body: HoldCallPartyRequest, optional
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param telephony_session_id: Internal identifier of a call session
        :type telephony_session_id: str
        :param party_id: Internal identifier of a call party
        :type party_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Success
        :rtype: CallParty
        """

        Validator(HoldCallPartyRequest).is_optional().validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(telephony_session_id)
        Validator(str).validate(party_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/telephony/sessions/{{telephonySessionId}}/parties/{{partyId}}/hold",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("telephonySessionId", telephony_session_id)
            .add_path("partyId", party_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return CallParty._unmap(response)

    @cast_models
    def pickup_call_party(
        self,
        request_body: PickupTarget,
        account_id: str,
        telephony_session_id: str,
        party_id: str,
    ) -> CallParty:
        """Picks up a call parked to the specified park location.

        :param request_body: The request body.
        :type request_body: PickupTarget
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param telephony_session_id: Internal identifier of a call session
        :type telephony_session_id: str
        :param party_id: Internal identifier of a call party
        :type party_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Created
        :rtype: CallParty
        """

        Validator(PickupTarget).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(telephony_session_id)
        Validator(str).validate(party_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/telephony/sessions/{{telephonySessionId}}/parties/{{partyId}}/pickup",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("telephonySessionId", telephony_session_id)
            .add_path("partyId", party_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return CallParty._unmap(response)

    @cast_models
    def forward_call_party(
        self,
        request_body: ForwardTarget,
        account_id: str,
        telephony_session_id: str,
        party_id: str,
    ) -> ForwardCallPartyResponse:
        """Forwards a non-answered incoming call to the specified call party. Applicable for a call session in "Setup" or "Proceeding" state.

        :param request_body: The request body.
        :type request_body: ForwardTarget
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param telephony_session_id: Internal identifier of a call session
        :type telephony_session_id: str
        :param party_id: Internal identifier of a call party
        :type party_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Success
        :rtype: ForwardCallPartyResponse
        """

        Validator(ForwardTarget).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(telephony_session_id)
        Validator(str).validate(party_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/telephony/sessions/{{telephonySessionId}}/parties/{{partyId}}/forward",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("telephonySessionId", telephony_session_id)
            .add_path("partyId", party_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return ForwardCallPartyResponse._unmap(response)

    @cast_models
    def supervise_call_session(
        self,
        request_body: SuperviseCallSessionRequest,
        account_id: str,
        telephony_session_id: str,
    ) -> SuperviseCallSessionResponse:
        """Allows monitoring a call session in 'Listen' mode. Input parameters should contain internal identifiers of a monitored user and a supervisor's device. Call session should be specified in path. Please note that this method supports single channel audio flow, which means that audio of both call participants is mixed and delivered to the supervisor in single audio channel. Currently this method is supported for Softphone/Hardphone only, since device IDs for WebRTC/Mobile apps cannot be obtained.

        :param request_body: The request body.
        :type request_body: SuperviseCallSessionRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param telephony_session_id: Internal identifier of a call session
        :type telephony_session_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Created
        :rtype: SuperviseCallSessionResponse
        """

        Validator(SuperviseCallSessionRequest).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(telephony_session_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/telephony/sessions/{{telephonySessionId}}/supervise",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("telephonySessionId", telephony_session_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return SuperviseCallSessionResponse._unmap(response)
