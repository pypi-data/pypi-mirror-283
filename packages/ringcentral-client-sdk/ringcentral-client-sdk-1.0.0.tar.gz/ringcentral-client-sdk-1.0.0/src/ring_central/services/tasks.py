# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.tm_update_task_request import TmUpdateTaskRequest
from ..models.tm_task_list import TmTaskList
from ..models.tm_task_info import TmTaskInfo
from ..models.tm_create_task_request import TmCreateTaskRequest
from ..models.tm_complete_task_request import TmCompleteTaskRequest
from ..models.list_chat_tasks_new_status import ListChatTasksNewStatus
from ..models.assignment_status import AssignmentStatus
from ..models.assignee_status import AssigneeStatus


class TasksService(BaseService):

    @cast_models
    def read_task_new(self, task_id: str) -> TmTaskInfo:
        """Returns information about the specified task(s) by ID(s).

        :param task_id: Task identifier or comma separated list of task IDs
        :type task_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: TmTaskInfo
        """

        Validator(str).validate(task_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/team-messaging/v1/tasks/{{taskId}}",
                self.get_default_headers(),
            )
            .add_path("taskId", task_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return TmTaskInfo._unmap(response)

    @cast_models
    def patch_task_new(
        self, task_id: str, request_body: TmUpdateTaskRequest = None
    ) -> TmTaskList:
        """Updates the specified task by ID.

        :param request_body: The request body., defaults to None
        :type request_body: TmUpdateTaskRequest, optional
        :param task_id: Internal identifier of a task
        :type task_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: TmTaskList
        """

        Validator(TmUpdateTaskRequest).is_optional().validate(request_body)
        Validator(str).validate(task_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/team-messaging/v1/tasks/{{taskId}}",
                self.get_default_headers(),
            )
            .add_path("taskId", task_id)
            .serialize()
            .set_method("PATCH")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return TmTaskList._unmap(response)

    @cast_models
    def delete_task_new(self, task_id: str):
        """Deletes the specified task.

        :param task_id: Internal identifier of a task
        :type task_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(task_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/team-messaging/v1/tasks/{{taskId}}",
                self.get_default_headers(),
            )
            .add_path("taskId", task_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def complete_task_new(self, request_body: TmCompleteTaskRequest, task_id: str):
        """Completes a task in the specified chat.

        :param request_body: The request body.
        :type request_body: TmCompleteTaskRequest
        :param task_id: Internal identifier of a task
        :type task_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(TmCompleteTaskRequest).validate(request_body)
        Validator(str).validate(task_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/team-messaging/v1/tasks/{{taskId}}/complete",
                self.get_default_headers(),
            )
            .add_path("taskId", task_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def list_chat_tasks_new(
        self,
        chat_id: str,
        creation_time_to: str = None,
        creation_time_from: str = None,
        creator_id: List[str] = None,
        status: List[ListChatTasksNewStatus] = None,
        assignment_status: AssignmentStatus = None,
        assignee_id: List[str] = None,
        assignee_status: AssigneeStatus = None,
        page_token: str = None,
        record_count: int = None,
    ) -> TmTaskList:
        """Returns the list of tasks of the specified chat.

        :param chat_id: Internal identifier of a chat
        :type chat_id: str
        :param creation_time_to: The end datetime for resulting records in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
        format including timezone, e.g. 2019-03-10T18:23:45Z, defaults to None
        :type creation_time_to: str, optional
        :param creation_time_from: The start datetime for resulting records in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
        format including timezone, e.g. 2016-02-23T00:00:00, defaults to None
        :type creation_time_from: str, optional
        :param creator_id: Internal identifier of a task creator, defaults to None
        :type creator_id: List[str], optional
        :param status: Task execution status, defaults to None
        :type status: List[ListChatTasksNewStatus], optional
        :param assignment_status: Task assignment status, defaults to None
        :type assignment_status: AssignmentStatus, optional
        :param assignee_id: Internal identifier of a task assignee, defaults to None
        :type assignee_id: List[str], optional
        :param assignee_status: Task execution status by assignee(-s) specified in assigneeId, defaults to None
        :type assignee_status: AssigneeStatus, optional
        :param page_token: Token of the current page. If token is omitted then the first
        page should be returned, defaults to None
        :type page_token: str, optional
        :param record_count: Number of records to be returned per screen, defaults to None
        :type record_count: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: TmTaskList
        """

        Validator(str).validate(chat_id)
        Validator(str).is_optional().validate(creation_time_to)
        Validator(str).is_optional().validate(creation_time_from)
        Validator(str).is_array().is_optional().validate(creator_id)
        Validator(ListChatTasksNewStatus).is_array().is_optional().validate(status)
        Validator(AssignmentStatus).is_optional().validate(assignment_status)
        Validator(str).is_array().is_optional().validate(assignee_id)
        Validator(AssigneeStatus).is_optional().validate(assignee_status)
        Validator(str).is_optional().validate(page_token)
        Validator(int).is_optional().min(1).max(250).validate(record_count)

        serialized_request = (
            Serializer(
                f"{self.base_url}/team-messaging/v1/chats/{{chatId}}/tasks",
                self.get_default_headers(),
            )
            .add_path("chatId", chat_id)
            .add_query("creationTimeTo", creation_time_to)
            .add_query("creationTimeFrom", creation_time_from)
            .add_query("creatorId", creator_id, explode=False)
            .add_query("status", status, explode=False)
            .add_query("assignmentStatus", assignment_status)
            .add_query("assigneeId", assignee_id, explode=False)
            .add_query("assigneeStatus", assignee_status)
            .add_query("pageToken", page_token)
            .add_query("recordCount", record_count)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return TmTaskList._unmap(response)

    @cast_models
    def create_task_new(
        self, request_body: TmCreateTaskRequest, chat_id: str
    ) -> TmTaskInfo:
        """Creates a task in the specified chat.

        :param request_body: The request body.
        :type request_body: TmCreateTaskRequest
        :param chat_id: Internal identifier of a chat
        :type chat_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Task information
        :rtype: TmTaskInfo
        """

        Validator(TmCreateTaskRequest).validate(request_body)
        Validator(str).validate(chat_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/team-messaging/v1/chats/{{chatId}}/tasks",
                self.get_default_headers(),
            )
            .add_path("chatId", chat_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return TmTaskInfo._unmap(response)
