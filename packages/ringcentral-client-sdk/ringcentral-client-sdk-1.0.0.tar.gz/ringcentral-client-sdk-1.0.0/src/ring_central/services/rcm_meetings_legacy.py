# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.public_meeting_invitation_response import PublicMeetingInvitationResponse
from ..models.meetings_resource import MeetingsResource
from ..models.meeting_user_settings_response import MeetingUserSettingsResponse
from ..models.meeting_service_info_resource import MeetingServiceInfoResource
from ..models.meeting_service_info_request import MeetingServiceInfoRequest
from ..models.meeting_response_resource import MeetingResponseResource
from ..models.meeting_request_resource import MeetingRequestResource
from ..models.list_meeting_recordings_response import ListMeetingRecordingsResponse
from ..models.create_user_meeting_profile_image_request import (
    CreateUserMeetingProfileImageRequest,
)
from ..models.assisted_users_resource import AssistedUsersResource
from ..models.assistants_resource import AssistantsResource
from ..models.account_locked_setting_response import AccountLockedSettingResponse


class RcmMeetingsLegacyService(BaseService):

    @cast_models
    def get_account_locked_setting(
        self, account_id: str
    ) -> AccountLockedSettingResponse:
        """Returns the information about user meeting settings that are locked on
        account level and therefore cannot be changed by a user.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK: Account Lock Setting
        :rtype: AccountLockedSettingResponse
        """

        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/meeting/locked-settings",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return AccountLockedSettingResponse._unmap(response)

    @cast_models
    def read_account_meeting(
        self, account_id: str, meeting_id: str
    ) -> MeetingResponseResource:
        """Returns a particular account-level meeting details by ID

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param meeting_id: Internal identifier of a RingCentral meeting
        :type meeting_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK: Meeting Info
        :rtype: MeetingResponseResource
        """

        Validator(str).validate(account_id)
        Validator(str).validate(meeting_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/meeting/{{meetingId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("meetingId", meeting_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return MeetingResponseResource._unmap(response)

    @cast_models
    def list_account_meeting_recordings(
        self,
        account_id: str,
        meeting_id: str = None,
        meeting_start_time_from: str = None,
        meeting_start_time_to: str = None,
        page: int = None,
        per_page: int = None,
    ) -> ListMeetingRecordingsResponse:
        """Returns the list of meeting recordings for the current account.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param meeting_id: Internal identifier of a meeting. Either `meetingId` or `meetingStartTime`/`meetingEndTime` can be specified, defaults to None
        :type meeting_id: str, optional
        :param meeting_start_time_from: Recordings of meetings started after the time specified will
        be returned. Either `meetingId` or `meetingStartTime`/`meetingEndTime` can
        be specified, defaults to None
        :type meeting_start_time_from: str, optional
        :param meeting_start_time_to: Recordings of meetings started before the time specified will
        be returned. The default value is current time. Either `meetingId` or `meetingStartTime`/`meetingEndTime`
        can be specified, defaults to None
        :type meeting_start_time_to: str, optional
        :param page: Page number, defaults to None
        :type page: int, optional
        :param per_page: Number of items per page. The `max` value is supported to indicate the maximum size - 300, defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: ListMeetingRecordingsResponse
        """

        Validator(str).validate(account_id)
        Validator(str).is_optional().validate(meeting_id)
        Validator(str).is_optional().validate(meeting_start_time_from)
        Validator(str).is_optional().validate(meeting_start_time_to)
        Validator(int).is_optional().validate(page)
        Validator(int).is_optional().max(300).validate(per_page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/meeting-recordings",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_query("meetingId", meeting_id)
            .add_query("meetingStartTimeFrom", meeting_start_time_from)
            .add_query("meetingStartTimeTo", meeting_start_time_to)
            .add_query("page", page)
            .add_query("perPage", per_page)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return ListMeetingRecordingsResponse._unmap(response)

    @cast_models
    def create_user_meeting_profile_image(
        self, request_body: dict, account_id: str, extension_id: str
    ):
        """Uploads profile picture for user meetings

        :param request_body: The request body.
        :type request_body: dict
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(dict).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/meeting-configuration/profile-image",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body, "multipart/form-data")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def list_meetings(self, account_id: str, extension_id: str) -> MeetingsResource:
        """Returns a list of user meetings scheduled for the future (meetings
        of 'Instant' type are not included).

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK: Scheduled Meeting List
        :rtype: MeetingsResource
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/meeting",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return MeetingsResource._unmap(response)

    @cast_models
    def create_meeting(
        self, request_body: MeetingRequestResource, account_id: str, extension_id: str
    ) -> MeetingResponseResource:
        """Creates a new meeting.

        :param request_body: The request body.
        :type request_body: MeetingRequestResource
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Created Meeting
        :rtype: MeetingResponseResource
        """

        Validator(MeetingRequestResource).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/meeting",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return MeetingResponseResource._unmap(response)

    @cast_models
    def get_user_setting(
        self, account_id: str, extension_id: str
    ) -> MeetingUserSettingsResponse:
        """Returns user settings for meetings.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK: User Setting
        :rtype: MeetingUserSettingsResponse
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/meeting/user-settings",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return MeetingUserSettingsResponse._unmap(response)

    @cast_models
    def read_meeting(
        self, account_id: str, extension_id: str, meeting_id: str
    ) -> MeetingResponseResource:
        """Returns a particular meeting details by ID

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param meeting_id: Internal identifier of a RingCentral meeting
        :type meeting_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK: Meeting Info
        :rtype: MeetingResponseResource
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(str).validate(meeting_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/meeting/{{meetingId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_path("meetingId", meeting_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return MeetingResponseResource._unmap(response)

    @cast_models
    def update_meeting(
        self,
        request_body: MeetingRequestResource,
        account_id: str,
        extension_id: str,
        meeting_id: str,
    ) -> MeetingResponseResource:
        """Modifies a particular meeting

        :param request_body: The request body.
        :type request_body: MeetingRequestResource
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param meeting_id: Internal identifier of a RingCentral meeting
        :type meeting_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK: Updated Meeting Info
        :rtype: MeetingResponseResource
        """

        Validator(MeetingRequestResource).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(str).validate(meeting_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/meeting/{{meetingId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_path("meetingId", meeting_id)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return MeetingResponseResource._unmap(response)

    @cast_models
    def patch_meeting(
        self,
        request_body: MeetingRequestResource,
        account_id: str,
        extension_id: str,
        meeting_id: str,
    ) -> MeetingResponseResource:
        """Modifies a particular meeting

        :param request_body: The request body.
        :type request_body: MeetingRequestResource
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param meeting_id: Internal identifier of a RingCentral meeting
        :type meeting_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK: Updated Meeting Info
        :rtype: MeetingResponseResource
        """

        Validator(MeetingRequestResource).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(str).validate(meeting_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/meeting/{{meetingId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_path("meetingId", meeting_id)
            .serialize()
            .set_method("PATCH")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return MeetingResponseResource._unmap(response)

    @cast_models
    def delete_meeting(
        self,
        account_id: str,
        extension_id: str,
        meeting_id: str,
        occurrence_id: str = None,
    ):
        """Deletes a scheduled meeting.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param meeting_id: Internal identifier of a RingCentral meeting
        :type meeting_id: str
        :param occurrence_id: Internal identifier of a recurrent meeting occurrence, defaults to None
        :type occurrence_id: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(str).validate(meeting_id)
        Validator(str).is_optional().validate(occurrence_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/meeting/{{meetingId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_path("meetingId", meeting_id)
            .add_query("occurrenceId", occurrence_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def end_meeting(self, account_id: str, extension_id: str, meeting_id: str):
        """Ends a meeting which is in progress

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param meeting_id: Internal identifier of a RingCentral meeting
        :type meeting_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(str).validate(meeting_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/meeting/{{meetingId}}/end",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_path("meetingId", meeting_id)
            .serialize()
            .set_method("POST")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def read_meeting_invitation(
        self, account_id: str, extension_id: str, meeting_id: str
    ) -> PublicMeetingInvitationResponse:
        """Returns a Meeting Invitation by ID.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param meeting_id: Internal identifier of a RingCentral meeting
        :type meeting_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK: Meeting Invitation
        :rtype: PublicMeetingInvitationResponse
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(str).validate(meeting_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/meeting/{{meetingId}}/invitation",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_path("meetingId", meeting_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return PublicMeetingInvitationResponse._unmap(response)

    @cast_models
    def read_meeting_service_info(
        self, account_id: str, extension_id: str
    ) -> MeetingServiceInfoResource:
        """Returns information on dial-in numbers for meetings, support and international dial-in numbers URIs and meeting account information.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK: Meeting Service Info
        :rtype: MeetingServiceInfoResource
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/meeting/service-info",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return MeetingServiceInfoResource._unmap(response)

    @cast_models
    def update_meeting_service_info(
        self,
        request_body: MeetingServiceInfoRequest,
        account_id: str,
        extension_id: str,
    ) -> MeetingServiceInfoResource:
        """Updates personal meeting identifier.

        :param request_body: The request body.
        :type request_body: MeetingServiceInfoRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK: Meeting Service Info
        :rtype: MeetingServiceInfoResource
        """

        Validator(MeetingServiceInfoRequest).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/meeting/service-info",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .serialize()
            .set_method("PATCH")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return MeetingServiceInfoResource._unmap(response)

    @cast_models
    def read_assisted_users(
        self, account_id: str, extension_id: str
    ) -> AssistedUsersResource:
        """Returns assisted users information.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Assisted User Info
        :rtype: AssistedUsersResource
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/meetings-configuration/assisted",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return AssistedUsersResource._unmap(response)

    @cast_models
    def read_assistants(self, account_id: str, extension_id: str) -> AssistantsResource:
        """Returns assistants information.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK: Assistants Info
        :rtype: AssistantsResource
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/meetings-configuration/assistants",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return AssistantsResource._unmap(response)

    @cast_models
    def list_user_meeting_recordings(
        self,
        account_id: str,
        extension_id: str,
        meeting_id: str = None,
        meeting_start_time_from: str = None,
        meeting_start_time_to: str = None,
        page: int = None,
        per_page: int = None,
    ) -> ListMeetingRecordingsResponse:
        """Returns the list of meetings recordings for the current user.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param meeting_id: Internal identifier of a meeting. Either `meetingId` or `meetingStartTime`/`meetingEndTime` can be specified, defaults to None
        :type meeting_id: str, optional
        :param meeting_start_time_from: Recordings of meetings started after the time specified will be returned. Either `meetingId` or `meetingStartTime`/`meetingEndTime` can be specified, defaults to None
        :type meeting_start_time_from: str, optional
        :param meeting_start_time_to: Recordings of meetings started before the time specified will be returned. The default value is current time. Either `meetingId` or `meetingStartTime`/`meetingEndTime` can be specified, defaults to None
        :type meeting_start_time_to: str, optional
        :param page: Page number, defaults to None
        :type page: int, optional
        :param per_page: Number of items per page. The `max` value is supported to indicate the maximum size - 300, defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: ListMeetingRecordingsResponse
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(str).is_optional().validate(meeting_id)
        Validator(str).is_optional().validate(meeting_start_time_from)
        Validator(str).is_optional().validate(meeting_start_time_to)
        Validator(int).is_optional().validate(page)
        Validator(int).is_optional().max(300).validate(per_page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/meeting-recordings",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_query("meetingId", meeting_id)
            .add_query("meetingStartTimeFrom", meeting_start_time_from)
            .add_query("meetingStartTimeTo", meeting_start_time_to)
            .add_query("page", page)
            .add_query("perPage", per_page)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return ListMeetingRecordingsResponse._unmap(response)
