# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.sites_list import SitesList
from ..models.site_update_request import SiteUpdateRequest
from ..models.site_members_list import SiteMembersList
from ..models.site_members_bulk_update import SiteMembersBulkUpdate
from ..models.site_ivr_settings_update import SiteIvrSettingsUpdate
from ..models.site_ivr_settings import SiteIvrSettings
from ..models.site_info import SiteInfo
from ..models.create_site_request import CreateSiteRequest


class MultiSiteService(BaseService):

    @cast_models
    def list_sites(self, account_id: str) -> SitesList:
        """Returns a list of sites for the specified account.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Sites information
        :rtype: SitesList
        """

        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/sites",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return SitesList._unmap(response)

    @cast_models
    def create_site(self, request_body: CreateSiteRequest, account_id: str) -> SiteInfo:
        """Creates a site for the specified account.

        :param request_body: The request body.
        :type request_body: CreateSiteRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Added site information
        :rtype: SiteInfo
        """

        Validator(CreateSiteRequest).validate(request_body)
        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/sites",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return SiteInfo._unmap(response)

    @cast_models
    def read_site(self, account_id: str, site_id: str) -> SiteInfo:
        """Returns a site by ID.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param site_id: Internal identifier of a site. *Please note* that `siteId` cannot take the 'main-site' value
        :type site_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Site information
        :rtype: SiteInfo
        """

        Validator(str).validate(account_id)
        Validator(str).validate(site_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/sites/{{siteId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("siteId", site_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return SiteInfo._unmap(response)

    @cast_models
    def update_site(
        self, account_id: str, site_id: str, request_body: SiteUpdateRequest = None
    ) -> SiteInfo:
        """Updates a site specified in path.

        :param request_body: The request body., defaults to None
        :type request_body: SiteUpdateRequest, optional
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param site_id: Internal identifier of a site. *Please note* that `siteId` cannot take the 'main-site' value
        :type site_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Updated site information
        :rtype: SiteInfo
        """

        Validator(SiteUpdateRequest).is_optional().validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(site_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/sites/{{siteId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("siteId", site_id)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return SiteInfo._unmap(response)

    @cast_models
    def delete_site(self, account_id: str, site_id: str):
        """Deletes a site specified in path.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param site_id: Internal identifier of a site. *Please note* that `siteId` cannot take the 'main-site' value
        :type site_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(account_id)
        Validator(str).validate(site_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/sites/{{siteId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("siteId", site_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def assign_multiple_sites(
        self, account_id: str, site_id: str, request_body: SiteMembersBulkUpdate = None
    ):
        """Assigns multiple sites to an account specified in path.

        :param request_body: The request body., defaults to None
        :type request_body: SiteMembersBulkUpdate, optional
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param site_id: Internal identifier of a site. *Please note* that `siteId` cannot take the 'main-site' value
        :type site_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(SiteMembersBulkUpdate).is_optional().validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(site_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/sites/{{siteId}}/bulk-assign",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("siteId", site_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def list_site_members(self, account_id: str, site_id: str) -> SiteMembersList:
        """Returns members of a site specified in path.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param site_id: Internal identifier of a site. *Please note* that `siteId` cannot take the 'main-site' value
        :type site_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Site members information
        :rtype: SiteMembersList
        """

        Validator(str).validate(account_id)
        Validator(str).validate(site_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/sites/{{siteId}}/members",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("siteId", site_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return SiteMembersList._unmap(response)

    @cast_models
    def read_site_ivr_settings(self, account_id: str, site_id: str) -> SiteIvrSettings:
        """Returns IVR settings for a site specified in path.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param site_id: Internal identifier of a site. *Please note* that `siteId` cannot take the 'main-site' value
        :type site_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Site IVR settings
        :rtype: SiteIvrSettings
        """

        Validator(str).validate(account_id)
        Validator(str).validate(site_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/sites/{{siteId}}/ivr",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("siteId", site_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return SiteIvrSettings._unmap(response)

    @cast_models
    def update_site_ivr_settings(
        self, request_body: SiteIvrSettingsUpdate, account_id: str, site_id: str
    ) -> SiteIvrSettings:
        """Updates IVR settings for a site specified in path.

        :param request_body: The request body.
        :type request_body: SiteIvrSettingsUpdate
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param site_id: Internal identifier of a site. *Please note* that `siteId` cannot take the 'main-site' value
        :type site_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Updated IVR settings of a site
        :rtype: SiteIvrSettings
        """

        Validator(SiteIvrSettingsUpdate).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(site_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/sites/{{siteId}}/ivr",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("siteId", site_id)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return SiteIvrSettings._unmap(response)
