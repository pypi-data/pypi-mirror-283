# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.get_sms_message_info_response import GetSmsMessageInfoResponse
from ..models.create_sms_message import CreateSmsMessage
from ..models.create_mms_message import CreateMmsMessage


class SmsService(BaseService):

    @cast_models
    def create_sms_message(
        self, request_body: CreateSmsMessage, account_id: str, extension_id: str
    ) -> GetSmsMessageInfoResponse:
        """Creates and sends a new text message or multiple messages. You can send SMS
        messages simultaneously to different recipients up to 40 requests per minute;
        this limitation is relevant for all client applications. Sending and receiving
        SMS is available for Toll-Free Numbers within the USA. You can send up to
        10 attachments in a single MMS message; the size of all attachments linked
        is limited up to 1500000 bytes.

        :param request_body: The request body.
        :type request_body: CreateSmsMessage
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Message information
        :rtype: GetSmsMessageInfoResponse
        """

        Validator(CreateSmsMessage).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/sms",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return GetSmsMessageInfoResponse._unmap(response)

    @cast_models
    def create_mms(
        self, request_body: dict, account_id: str, extension_id: str
    ) -> GetSmsMessageInfoResponse:
        """Creates and sends a new media message or multiple messages. Sending MMS
        messages simultaneously to different recipients is limited up to 50
        requests per minute; relevant for all client applications.

        :param request_body: The request body.
        :type request_body: dict
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: MMS message (envelope and content)
        :rtype: GetSmsMessageInfoResponse
        """

        Validator(dict).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/mms",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body, "multipart/form-data")
        )

        response = self.send_request(serialized_request)

        return GetSmsMessageInfoResponse._unmap(response)
