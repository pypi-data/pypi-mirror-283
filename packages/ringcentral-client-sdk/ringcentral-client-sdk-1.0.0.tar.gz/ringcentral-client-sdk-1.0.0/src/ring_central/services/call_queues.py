# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.user_call_queues import UserCallQueues
from ..models.department_member_list import DepartmentMemberList
from ..models.department_bulk_assign_resource import DepartmentBulkAssignResource
from ..models.call_queues import CallQueues
from ..models.call_queue_overflow_settings_request_resource import (
    CallQueueOverflowSettingsRequestResource,
)
from ..models.call_queue_overflow_settings import CallQueueOverflowSettings
from ..models.call_queue_members import CallQueueMembers
from ..models.call_queue_details import CallQueueDetails
from ..models.call_queue_bulk_assign_resource import CallQueueBulkAssignResource


class CallQueuesService(BaseService):

    @cast_models
    def list_call_queues(
        self,
        account_id: str,
        page: int = None,
        per_page: int = None,
        member_extension_id: str = None,
    ) -> CallQueues:
        """Returns a call queue list.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param page: Indicates a page number to retrieve. Only positive number values are accepted, defaults to None
        :type page: int, optional
        :param per_page: Indicates a page size (number of items), defaults to None
        :type per_page: int, optional
        :param member_extension_id: Internal identifier of an extension that is a member of every group within the result, defaults to None
        :type member_extension_id: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Success
        :rtype: CallQueues
        """

        Validator(str).validate(account_id)
        Validator(int).is_optional().validate(page)
        Validator(int).is_optional().validate(per_page)
        Validator(str).is_optional().validate(member_extension_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/call-queues",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_query("page", page)
            .add_query("perPage", per_page)
            .add_query("memberExtensionId", member_extension_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return CallQueues._unmap(response)

    @cast_models
    def read_call_queue_info(self, account_id: str, group_id: str) -> CallQueueDetails:
        """Returns basic information on a call queue group extension.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param group_id: group_id
        :type group_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Call queue information
        :rtype: CallQueueDetails
        """

        Validator(str).validate(account_id)
        Validator(str).validate(group_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/call-queues/{{groupId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("groupId", group_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return CallQueueDetails._unmap(response)

    @cast_models
    def update_call_queue_info(
        self, request_body: CallQueueDetails, account_id: str, group_id: str
    ) -> CallQueueDetails:
        """Updates information on a call queue group extension.

        :param request_body: The request body.
        :type request_body: CallQueueDetails
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param group_id: Internal identifier of a call queue group
        :type group_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Updated call queue information
        :rtype: CallQueueDetails
        """

        Validator(CallQueueDetails).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(group_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/call-queues/{{groupId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("groupId", group_id)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return CallQueueDetails._unmap(response)

    @cast_models
    def assign_multiple_call_queue_members(
        self, request_body: CallQueueBulkAssignResource, account_id: str, group_id: str
    ):
        """Assigns multiple call queue members to call queue group.

        :param request_body: The request body.
        :type request_body: CallQueueBulkAssignResource
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param group_id: Internal identifier of a call queue group
        :type group_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(CallQueueBulkAssignResource).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(group_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/call-queues/{{groupId}}/bulk-assign",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("groupId", group_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def list_call_queue_members(
        self, account_id: str, group_id: str, page: int = None, per_page: int = None
    ) -> CallQueueMembers:
        """Returns a list of call queue group members.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param group_id: Internal identifier of a call queue group
        :type group_id: str
        :param page: Indicates a page number to retrieve. Only positive number values
        are allowed, defaults to None
        :type page: int, optional
        :param per_page: Indicates a page size (number of items), defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Call queue group members information
        :rtype: CallQueueMembers
        """

        Validator(str).validate(account_id)
        Validator(str).validate(group_id)
        Validator(int).is_optional().validate(page)
        Validator(int).is_optional().validate(per_page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/call-queues/{{groupId}}/members",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("groupId", group_id)
            .add_query("page", page)
            .add_query("perPage", per_page)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return CallQueueMembers._unmap(response)

    @cast_models
    def list_department_members(
        self,
        account_id: str,
        department_id: int,
        page: int = None,
        per_page: int = None,
    ) -> DepartmentMemberList:
        """Viewing user account information (including name, business name, address
        and phone number/account number). Please note, that this method is
        deprecated and legacy 'Department' entity corresponds to 'Call Queue'
        in modern RingCentral product terminology. In order to retrieve call
        queue members please use the following method
        `GET/restapi/v1.0/account/{accountId}/call-queues/{groupId}/members`.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param department_id: Internal identifier of a Department extension (same as extensionId
        but only the ID of a department extension is valid). Please note that
        legacy 'Department' extension type corresponds to 'Call Queue' extensions
        in modern RingCentral product terminology
        :type department_id: int
        :param page: Indicates a page number to retrieve. Only positive number values
        are accepted, defaults to None
        :type page: int, optional
        :param per_page: Indicates a page size (number of items), defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Department members information
        :rtype: DepartmentMemberList
        """

        Validator(str).validate(account_id)
        Validator(int).validate(department_id)
        Validator(int).is_optional().validate(page)
        Validator(int).is_optional().validate(per_page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/department/{{departmentId}}/members",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("departmentId", department_id)
            .add_query("page", page)
            .add_query("perPage", per_page)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return DepartmentMemberList._unmap(response)

    @cast_models
    def assign_multiple_department_members(
        self, account_id: str, request_body: DepartmentBulkAssignResource = None
    ):
        """Adds and/or removes multiple call queue members. Please note,
        that this method is deprecated and legacy 'Department' entity
        corresponds to 'Call Queue' in modern RingCentral product terminology.
        In order to assign multiple call queue members please use the following
        method `POST/restapi/v1.0/account/{accountId}/call-queues/{groupId}/bulk-assign`.

        :param request_body: The request body., defaults to None
        :type request_body: DepartmentBulkAssignResource, optional
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(DepartmentBulkAssignResource).is_optional().validate(request_body)
        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/department/bulk-assign",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def update_user_call_queues(
        self, request_body: UserCallQueues, account_id: str, extension_id: str
    ) -> UserCallQueues:
        """Updates a list of call queues where the user is an agent. This
        is a full update request, which means that if any call queue where the user is
        an agent is not mentioned in request, then the user is automatically removed
        from this queue.

        :param request_body: The request body.
        :type request_body: UserCallQueues
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: UserCallQueues
        """

        Validator(UserCallQueues).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/call-queues",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return UserCallQueues._unmap(response)

    @cast_models
    def get_call_queue_overflow_settings(
        self, account_id: str, call_queue_id: str
    ) -> CallQueueOverflowSettings:
        """Returns overflow settings for a call queue specified in path.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param call_queue_id: Internal identifier of a call queue
        :type call_queue_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Call queue overflow settings
        :rtype: CallQueueOverflowSettings
        """

        Validator(str).validate(account_id)
        Validator(str).validate(call_queue_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{callQueueId}}/overflow-settings",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("callQueueId", call_queue_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return CallQueueOverflowSettings._unmap(response)

    @cast_models
    def update_call_queue_overflow_settings(
        self,
        request_body: CallQueueOverflowSettingsRequestResource,
        account_id: str,
        call_queue_id: str,
    ) -> CallQueueOverflowSettings:
        """Updates overflow settings for a call queue specified in path.

        :param request_body: The request body.
        :type request_body: CallQueueOverflowSettingsRequestResource
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param call_queue_id: Internal identifier of a call queue
        :type call_queue_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Updated call queue overflow settings
        :rtype: CallQueueOverflowSettings
        """

        Validator(CallQueueOverflowSettingsRequestResource).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(call_queue_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{callQueueId}}/overflow-settings",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("callQueueId", call_queue_id)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return CallQueueOverflowSettings._unmap(response)
