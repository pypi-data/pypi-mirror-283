# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.webinar_resource import WebinarResource
from ..models.utils.cast_models import cast_models
from ..models.session_resource import SessionResource
from ..models.session_global_list_resource import SessionGlobalListResource
from ..models.rcw_session_status_model import RcwSessionStatusModel
from ..models.rcw_role_enum import RcwRoleEnum
from ..models.participant_reduced_model import ParticipantReducedModel
from ..models.participant_list_resource import ParticipantListResource
from ..models.invitee_model import InviteeModel
from ..models.invitee_list_resource import InviteeListResource


class HistoricalWebinarsService(BaseService):

    @cast_models
    def rcw_history_get_webinar(self, webinar_id: str) -> WebinarResource:
        """Returns a historical webinar information by ID (host interface)

        :param webinar_id: Identifier of the Webinar.
        :type webinar_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response
        :rtype: WebinarResource
        """

        Validator(str).min_length(1).max_length(20).validate(webinar_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/webinar/history/v1/webinars/{{webinarId}}",
                self.get_default_headers(),
            )
            .add_path("webinarId", webinar_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return WebinarResource._unmap(response)

    @cast_models
    def rcw_history_get_session(
        self, webinar_id: str, session_id: str
    ) -> SessionResource:
        """Returns a historical webinar Session by ID. Access allowed to participants with original role as Host or CoHost.

        :param webinar_id: Identifier of the Webinar.
        :type webinar_id: str
        :param session_id: Identifier of the Session.
        :type session_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response
        :rtype: SessionResource
        """

        Validator(str).min_length(1).max_length(20).validate(webinar_id)
        Validator(str).min_length(1).max_length(20).validate(session_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/webinar/history/v1/webinars/{{webinarId}}/sessions/{{sessionId}}",
                self.get_default_headers(),
            )
            .add_path("webinarId", webinar_id)
            .add_path("sessionId", session_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return SessionResource._unmap(response)

    @cast_models
    def rcw_history_list_participants(
        self,
        webinar_id: str,
        session_id: str,
        role: List[RcwRoleEnum] = None,
        original_role: List[RcwRoleEnum] = None,
        per_page: int = None,
        page_token: str = None,
    ) -> ParticipantListResource:
        """Returns the list of participants of a given Webinar Session (host interface).

        :param webinar_id: Identifier of the Webinar.
        :type webinar_id: str
        :param session_id: Identifier of the Session.
        :type session_id: str
        :param role: The role of the invitee/participant., defaults to None
        :type role: List[RcwRoleEnum], optional
        :param original_role: The original role of the invitee/participant., defaults to None
        :type original_role: List[RcwRoleEnum], optional
        :param per_page: The number of items per page. If provided value in the request
        is greater than a maximum, the maximum value is applied, defaults to None
        :type per_page: int, optional
        :param page_token: The token indicating the particular page of the result set to be retrieved.
        If omitted the first page will be returned., defaults to None
        :type page_token: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response
        :rtype: ParticipantListResource
        """

        Validator(str).min_length(1).max_length(20).validate(webinar_id)
        Validator(str).min_length(1).max_length(20).validate(session_id)
        Validator(RcwRoleEnum).is_array().is_optional().validate(role)
        Validator(RcwRoleEnum).is_array().is_optional().validate(original_role)
        Validator(int).is_optional().min(1).max(1000).validate(per_page)
        Validator(str).is_optional().validate(page_token)

        serialized_request = (
            Serializer(
                f"{self.base_url}/webinar/history/v1/webinars/{{webinarId}}/sessions/{{sessionId}}/participants",
                self.get_default_headers(),
            )
            .add_path("webinarId", webinar_id)
            .add_path("sessionId", session_id)
            .add_query("role", role)
            .add_query("originalRole", original_role)
            .add_query("perPage", per_page, explode=False)
            .add_query("pageToken", page_token, explode=False)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return ParticipantListResource._unmap(response)

    @cast_models
    def rcw_history_get_participant_info(
        self, webinar_id: str, session_id: str
    ) -> ParticipantReducedModel:
        """Returns the participant information specific to a webinar session. Accessible by any authenticated participant.
        For a non-authenticated participant, API returns error.

        :param webinar_id: Identifier of the Webinar.
        :type webinar_id: str
        :param session_id: Identifier of the Session.
        :type session_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response
        :rtype: ParticipantReducedModel
        """

        Validator(str).min_length(1).max_length(20).validate(webinar_id)
        Validator(str).min_length(1).max_length(20).validate(session_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/webinar/history/v1/webinars/{{webinarId}}/sessions/{{sessionId}}/participants/self",
                self.get_default_headers(),
            )
            .add_path("webinarId", webinar_id)
            .add_path("sessionId", session_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return ParticipantReducedModel._unmap(response)

    @cast_models
    def rcw_history_list_invitees(
        self,
        webinar_id: str,
        session_id: str,
        role: List[RcwRoleEnum] = None,
        original_role: List[RcwRoleEnum] = None,
        per_page: int = None,
        page_token: str = None,
    ) -> InviteeListResource:
        """Returns the list of Invitees (co-hosts and panelists) of a given Webinar Session (host interface).
        An implicit record created for a Webinar 'Host' is always returned.

        :param webinar_id: Identifier of the Webinar.
        :type webinar_id: str
        :param session_id: Identifier of the Session.
        :type session_id: str
        :param role: The role of the invitee/participant., defaults to None
        :type role: List[RcwRoleEnum], optional
        :param original_role: The original role of the invitee/participant., defaults to None
        :type original_role: List[RcwRoleEnum], optional
        :param per_page: The number of items per page. If provided value in the request
        is greater than a maximum, the maximum value is applied, defaults to None
        :type per_page: int, optional
        :param page_token: The token indicating the particular page of the result set to be retrieved.
        If omitted the first page will be returned., defaults to None
        :type page_token: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response
        :rtype: InviteeListResource
        """

        Validator(str).min_length(1).max_length(20).validate(webinar_id)
        Validator(str).min_length(1).max_length(20).validate(session_id)
        Validator(RcwRoleEnum).is_array().is_optional().validate(role)
        Validator(RcwRoleEnum).is_array().is_optional().validate(original_role)
        Validator(int).is_optional().min(1).max(1000).validate(per_page)
        Validator(str).is_optional().validate(page_token)

        serialized_request = (
            Serializer(
                f"{self.base_url}/webinar/history/v1/webinars/{{webinarId}}/sessions/{{sessionId}}/invitees",
                self.get_default_headers(),
            )
            .add_path("webinarId", webinar_id)
            .add_path("sessionId", session_id)
            .add_query("role", role)
            .add_query("originalRole", original_role)
            .add_query("perPage", per_page, explode=False)
            .add_query("pageToken", page_token, explode=False)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return InviteeListResource._unmap(response)

    @cast_models
    def rcw_history_get_invitee(
        self, webinar_id: str, session_id: str, invitee_id: str
    ) -> InviteeModel:
        """Returns a historical session invitee information by ID (host interface).

        :param webinar_id: Identifier of the Webinar.
        :type webinar_id: str
        :param session_id: Identifier of the Session.
        :type session_id: str
        :param invitee_id: Identifier of the Session Invitee.
        :type invitee_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response
        :rtype: InviteeModel
        """

        Validator(str).min_length(1).max_length(20).validate(webinar_id)
        Validator(str).min_length(1).max_length(20).validate(session_id)
        Validator(str).min_length(1).max_length(20).validate(invitee_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/webinar/history/v1/webinars/{{webinarId}}/sessions/{{sessionId}}/invitees/{{inviteeId}}",
                self.get_default_headers(),
            )
            .add_path("webinarId", webinar_id)
            .add_path("sessionId", session_id)
            .add_path("inviteeId", invitee_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return InviteeModel._unmap(response)

    @cast_models
    def rcw_history_list_all_company_sessions(
        self,
        end_time_from: str,
        end_time_to: str,
        host_user_id: List[str] = None,
        status: List[RcwSessionStatusModel] = None,
        per_page: int = None,
        page_token: str = None,
    ) -> SessionGlobalListResource:
        """Returns the list of historical Webinar Sessions hosted by particular user(s) or all company users
        sorted by 'endTime' in the descending order. Depending on a session status 'endTime' can
        represent actual end time or scheduled end time.
        The user must have "WebinarSettings" permission granted otherwise the API returns HTTP 403.

        :param end_time_from: The beginning of the time window by 'endTime' .
        :type end_time_from: str
        :param end_time_to: The end of the time window by 'endTime' .
        :type end_time_to: str
        :param host_user_id: Identifier of the user who hosts a webinar (if omitted, webinars hosted by all company users will be returned), defaults to None
        :type host_user_id: List[str], optional
        :param status: Filter to return only webinar sessions in certain status. Multiple values are supported., defaults to None
        :type status: List[RcwSessionStatusModel], optional
        :param per_page: The number of items per page. If provided value in the request
        is greater than a maximum, the maximum value is applied, defaults to None
        :type per_page: int, optional
        :param page_token: The token indicating the particular page of the result set to be retrieved.
        If omitted the first page will be returned., defaults to None
        :type page_token: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response
        :rtype: SessionGlobalListResource
        """

        Validator(str).validate(end_time_from)
        Validator(str).validate(end_time_to)
        Validator(str).is_array().is_optional().validate(host_user_id)
        Validator(RcwSessionStatusModel).is_array().is_optional().validate(status)
        Validator(int).is_optional().min(1).max(1000).validate(per_page)
        Validator(str).is_optional().validate(page_token)

        serialized_request = (
            Serializer(
                f"{self.base_url}/webinar/history/v1/company/sessions",
                self.get_default_headers(),
            )
            .add_query("hostUserId", host_user_id, explode=False)
            .add_query("status", status)
            .add_query("endTimeFrom", end_time_from, explode=False)
            .add_query("endTimeTo", end_time_to, explode=False)
            .add_query("perPage", per_page, explode=False)
            .add_query("pageToken", page_token, explode=False)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return SessionGlobalListResource._unmap(response)

    @cast_models
    def rcw_history_list_all_sessions(
        self,
        end_time_from: str,
        end_time_to: str,
        name_fragment: str = None,
        status: List[RcwSessionStatusModel] = None,
        per_page: int = None,
        page_token: str = None,
    ) -> SessionGlobalListResource:
        """Returns the list of historical Webinar Sessions hosted by a current authorized user
        sorted by 'endTime' in the descending order. Depending on a session status 'endTime' can
        represent actual end time or scheduled end time.

        :param end_time_from: The beginning of the time window by 'endTime' .
        :type end_time_from: str
        :param end_time_to: The end of the time window by 'endTime' .
        :type end_time_to: str
        :param name_fragment: Filter to return only webinar sessions containing particular substring within their names, defaults to None
        :type name_fragment: str, optional
        :param status: Filter to return only webinar sessions in certain status. Multiple values are supported., defaults to None
        :type status: List[RcwSessionStatusModel], optional
        :param per_page: The number of items per page. If provided value in the request
        is greater than a maximum, the maximum value is applied, defaults to None
        :type per_page: int, optional
        :param page_token: The token indicating the particular page of the result set to be retrieved.
        If omitted the first page will be returned., defaults to None
        :type page_token: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response
        :rtype: SessionGlobalListResource
        """

        Validator(str).validate(end_time_from)
        Validator(str).validate(end_time_to)
        Validator(str).is_optional().validate(name_fragment)
        Validator(RcwSessionStatusModel).is_array().is_optional().validate(status)
        Validator(int).is_optional().min(1).max(1000).validate(per_page)
        Validator(str).is_optional().validate(page_token)

        serialized_request = (
            Serializer(
                f"{self.base_url}/webinar/history/v1/sessions",
                self.get_default_headers(),
            )
            .add_query("nameFragment", name_fragment)
            .add_query("status", status)
            .add_query("endTimeFrom", end_time_from, explode=False)
            .add_query("endTimeTo", end_time_to, explode=False)
            .add_query("perPage", per_page, explode=False)
            .add_query("pageToken", page_token, explode=False)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return SessionGlobalListResource._unmap(response)
