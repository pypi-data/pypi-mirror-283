# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.update_subscription_request import UpdateSubscriptionRequest
from ..models.subscription_list_resource import SubscriptionListResource
from ..models.subscription_info import SubscriptionInfo
from ..models.create_webhook_subscription_request import (
    CreateWebhookSubscriptionRequest,
)


class WebinarSubscriptionsService(BaseService):

    @cast_models
    def rcw_n11s_list_subscriptions(self) -> SubscriptionListResource:
        """Returns a list of webinar subscriptions created by the user for the current authorized client application.

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: List of Subscriptions
        :rtype: SubscriptionListResource
        """

        serialized_request = (
            Serializer(
                f"{self.base_url}/webinar/notifications/v1/subscriptions",
                self.get_default_headers(),
            )
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return SubscriptionListResource._unmap(response)

    @cast_models
    def rcw_n11s_create_subscription(
        self, request_body: CreateWebhookSubscriptionRequest
    ) -> SubscriptionInfo:
        """Creates a new webinar subscription for the current authorized user / client application.

        :param request_body: The request body.
        :type request_body: CreateWebhookSubscriptionRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response
        :rtype: SubscriptionInfo
        """

        Validator(CreateWebhookSubscriptionRequest).validate(request_body)

        serialized_request = (
            Serializer(
                f"{self.base_url}/webinar/notifications/v1/subscriptions",
                self.get_default_headers(),
            )
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return SubscriptionInfo._unmap(response)

    @cast_models
    def rcw_n11s_get_subscription(self, subscription_id: str) -> SubscriptionInfo:
        """Returns the webinar subscription by ID

        :param subscription_id: Internal identifier of a subscription
        :type subscription_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response
        :rtype: SubscriptionInfo
        """

        Validator(str).min_length(1).max_length(20).validate(subscription_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/webinar/notifications/v1/subscriptions/{{subscriptionId}}",
                self.get_default_headers(),
            )
            .add_path("subscriptionId", subscription_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return SubscriptionInfo._unmap(response)

    @cast_models
    def rcw_n11s_update_subscription(
        self, request_body: UpdateSubscriptionRequest, subscription_id: str
    ) -> SubscriptionInfo:
        """Updates the existing subscription. The client application can extend/narrow
        the list of events for which it receives notifications within this subscription.
        If event filters are specified, calling this method modifies them for the
        existing subscription. The method also allows setting the subscription expiration time.
        If other than `events` and `expiresIn` parameters are passed in the request they will be ignored.
        If the request body is empty then the specified subscription will be just renewed without any
        event filter modifications and with default expiration time.

        :param request_body: The request body.
        :type request_body: UpdateSubscriptionRequest
        :param subscription_id: Internal identifier of a subscription
        :type subscription_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response
        :rtype: SubscriptionInfo
        """

        Validator(UpdateSubscriptionRequest).validate(request_body)
        Validator(str).min_length(1).max_length(20).validate(subscription_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/webinar/notifications/v1/subscriptions/{{subscriptionId}}",
                self.get_default_headers(),
            )
            .add_path("subscriptionId", subscription_id)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return SubscriptionInfo._unmap(response)

    @cast_models
    def rcw_n11s_delete_subscription(self, subscription_id: str):
        """Cancels the existing webinar subscription.

        :param subscription_id: Internal identifier of a subscription
        :type subscription_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).min_length(1).max_length(20).validate(subscription_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/webinar/notifications/v1/subscriptions/{{subscriptionId}}",
                self.get_default_headers(),
            )
            .add_path("subscriptionId", subscription_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def rcw_n11s_renew_subscription(self, subscription_id: str) -> SubscriptionInfo:
        """Renews the existing webinar subscription.

        :param subscription_id: Internal identifier of a subscription
        :type subscription_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Subscription renewed successfully
        :rtype: SubscriptionInfo
        """

        Validator(str).min_length(1).max_length(20).validate(subscription_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/webinar/notifications/v1/subscriptions/{{subscriptionId}}/renew",
                self.get_default_headers(),
            )
            .add_path("subscriptionId", subscription_id)
            .serialize()
            .set_method("POST")
        )

        response = self.send_request(serialized_request)

        return SubscriptionInfo._unmap(response)
