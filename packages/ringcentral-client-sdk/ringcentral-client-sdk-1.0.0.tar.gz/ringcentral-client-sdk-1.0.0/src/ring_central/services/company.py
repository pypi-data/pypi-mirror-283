# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.send_welcome_email_v2_request import SendWelcomeEmailV2Request
from ..models.modify_account_business_address_request import (
    ModifyAccountBusinessAddressRequest,
)
from ..models.get_account_info_response import GetAccountInfoResponse
from ..models.country_list_dictionary_model import CountryListDictionaryModel
from ..models.contracted_country_list_response import ContractedCountryListResponse
from ..models.account_service_info import AccountServiceInfo
from ..models.account_info import AccountInfo
from ..models.account_business_address_resource import AccountBusinessAddressResource


class CompanyService(BaseService):

    @cast_models
    def get_account_info_v2(self, account_id: str) -> AccountInfo:
        """Returns basic information about particular RingCentral account

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response
        :rtype: AccountInfo
        """

        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v2/accounts/{{accountId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return AccountInfo._unmap(response)

    @cast_models
    def send_welcome_email_v2(
        self, account_id: str, request_body: SendWelcomeEmailV2Request = None
    ):
        """Sends/resends welcome email to the system user of confirmed account

        :param request_body: The request body., defaults to None
        :type request_body: SendWelcomeEmailV2Request, optional
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(SendWelcomeEmailV2Request).is_optional().validate(request_body)
        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v2/accounts/{{accountId}}/send-welcome-email",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def send_activation_email_v2(self, account_id: str):
        """Sends/resends activation email to the system user of unconfirmed account.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v2/accounts/{{accountId}}/send-activation-email",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("POST")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def read_account_info(self, account_id: str) -> GetAccountInfoResponse:
        """Returns basic information about a particular RingCentral customer account.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Account information
        :rtype: GetAccountInfoResponse
        """

        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return GetAccountInfoResponse._unmap(response)

    @cast_models
    def read_account_service_info(self, account_id: str) -> AccountServiceInfo:
        """Returns the information about service plan, available features
        and limitations for a particular RingCentral customer account.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Success
        :rtype: AccountServiceInfo
        """

        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/service-info",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return AccountServiceInfo._unmap(response)

    @cast_models
    def read_account_business_address(
        self, account_id: str
    ) -> AccountBusinessAddressResource:
        """Returns business address of a company.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Success
        :rtype: AccountBusinessAddressResource
        """

        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/business-address",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return AccountBusinessAddressResource._unmap(response)

    @cast_models
    def update_account_business_address(
        self, request_body: ModifyAccountBusinessAddressRequest, account_id: str
    ) -> AccountBusinessAddressResource:
        """Updates the business address of a company that account is linked
        to.

        :param request_body: The request body.
        :type request_body: ModifyAccountBusinessAddressRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Updated company business address
        :rtype: AccountBusinessAddressResource
        """

        Validator(ModifyAccountBusinessAddressRequest).validate(request_body)
        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/business-address",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return AccountBusinessAddressResource._unmap(response)

    @cast_models
    def list_contracted_countries(self, brand_id: str) -> ContractedCountryListResponse:
        """Returns the list of contracted countries for the given brand.

        :param brand_id: brand_id
        :type brand_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: ContractedCountryListResponse
        """

        Validator(str).validate(brand_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/dictionary/brand/{{brandId}}/contracted-country",
                self.get_default_headers(),
            )
            .add_path("brandId", brand_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return ContractedCountryListResponse._unmap(response)

    @cast_models
    def list_domestic_countries(
        self,
        brand_id: str,
        contracted_country_id: str,
        page: int = None,
        per_page: int = None,
    ) -> CountryListDictionaryModel:
        """Returns the list of domestic countries for account contracted country and brand.

        :param brand_id: Internal identifier of a brand
        :type brand_id: str
        :param contracted_country_id: Internal identifier of a country
        :type contracted_country_id: str
        :param page: Indicates a page number to retrieve. Only positive number values
        are accepted, defaults to None
        :type page: int, optional
        :param per_page: Indicates a page size (number of items), defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Domestic countries list
        :rtype: CountryListDictionaryModel
        """

        Validator(str).validate(brand_id)
        Validator(str).validate(contracted_country_id)
        Validator(int).is_optional().validate(page)
        Validator(int).is_optional().validate(per_page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/dictionary/brand/{{brandId}}/contracted-country/{{contractedCountryId}}",
                self.get_default_headers(),
            )
            .add_path("brandId", brand_id)
            .add_path("contractedCountryId", contracted_country_id)
            .add_query("page", page)
            .add_query("perPage", per_page)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return CountryListDictionaryModel._unmap(response)
