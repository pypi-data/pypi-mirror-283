# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.custom_field_update_request import CustomFieldUpdateRequest
from ..models.custom_field_model import CustomFieldModel
from ..models.custom_field_list import CustomFieldList
from ..models.custom_field_create_request import CustomFieldCreateRequest


class CustomFieldsService(BaseService):

    @cast_models
    def list_custom_fields(self, account_id: str) -> CustomFieldList:
        """Returns the list of created custom fields.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response
        :rtype: CustomFieldList
        """

        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/custom-fields",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return CustomFieldList._unmap(response)

    @cast_models
    def create_custom_field(
        self, request_body: CustomFieldCreateRequest, account_id: str
    ) -> CustomFieldModel:
        """Creates custom field attached to the object.

        :param request_body: The request body.
        :type request_body: CustomFieldCreateRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response
        :rtype: CustomFieldModel
        """

        Validator(CustomFieldCreateRequest).validate(request_body)
        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/custom-fields",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return CustomFieldModel._unmap(response)

    @cast_models
    def update_custom_field(
        self, request_body: CustomFieldUpdateRequest, account_id: str, field_id: str
    ) -> CustomFieldModel:
        """Updates custom field by ID specified in path.

        :param request_body: The request body.
        :type request_body: CustomFieldUpdateRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param field_id: Custom field identifier
        :type field_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response
        :rtype: CustomFieldModel
        """

        Validator(CustomFieldUpdateRequest).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(field_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/custom-fields/{{fieldId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("fieldId", field_id)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return CustomFieldModel._unmap(response)

    @cast_models
    def delete_custom_field(self, account_id: str, field_id: str):
        """Deletes custom field(s) by ID(s) with the corresponding values.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param field_id: Custom field identifier
        :type field_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(account_id)
        Validator(str).validate(field_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/custom-fields/{{fieldId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("fieldId", field_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)

        return response
