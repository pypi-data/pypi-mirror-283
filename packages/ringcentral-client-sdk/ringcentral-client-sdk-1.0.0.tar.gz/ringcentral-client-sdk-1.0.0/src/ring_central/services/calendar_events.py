# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.tm_event_list import TmEventList
from ..models.tm_event_info import TmEventInfo
from ..models.tm_create_event_request import TmCreateEventRequest


class CalendarEventsService(BaseService):

    @cast_models
    def read_glip_events_new(
        self, record_count: int = None, page_token: str = None
    ) -> TmEventList:
        """Returns all calendar events created by the current user.

        :param record_count: Number of groups to be fetched by one request. The maximum value is 250, by default - 30., defaults to None
        :type record_count: int, optional
        :param page_token: Token of a page to be returned, defaults to None
        :type page_token: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: TmEventList
        """

        Validator(int).is_optional().max(250).validate(record_count)
        Validator(str).is_optional().validate(page_token)

        serialized_request = (
            Serializer(
                f"{self.base_url}/team-messaging/v1/events", self.get_default_headers()
            )
            .add_query("recordCount", record_count)
            .add_query("pageToken", page_token)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return TmEventList._unmap(response)

    @cast_models
    def create_event_new(self, request_body: TmCreateEventRequest) -> TmEventInfo:
        """Creates a new calendar event.

        :param request_body: The request body.
        :type request_body: TmCreateEventRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Success
        :rtype: TmEventInfo
        """

        Validator(TmCreateEventRequest).validate(request_body)

        serialized_request = (
            Serializer(
                f"{self.base_url}/team-messaging/v1/events", self.get_default_headers()
            )
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return TmEventInfo._unmap(response)

    @cast_models
    def read_event_new(self, event_id: List[str]) -> TmEventInfo:
        """Returns the specified calendar event(s) by ID(s).

        :param event_id: Event id or comma separated list of event ids.
        :type event_id: List[str]
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: TmEventInfo
        """

        Validator(str).is_array().validate(event_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/team-messaging/v1/events/{{eventId}}",
                self.get_default_headers(),
            )
            .add_path("eventId", event_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return TmEventInfo._unmap(response)

    @cast_models
    def update_event_new(
        self, request_body: TmCreateEventRequest, event_id: str
    ) -> TmEventInfo:
        """Updates the specified calendar event.

        :param request_body: The request body.
        :type request_body: TmCreateEventRequest
        :param event_id: Internal identifier of an event
        :type event_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: TmEventInfo
        """

        Validator(TmCreateEventRequest).validate(request_body)
        Validator(str).validate(event_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/team-messaging/v1/events/{{eventId}}",
                self.get_default_headers(),
            )
            .add_path("eventId", event_id)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return TmEventInfo._unmap(response)

    @cast_models
    def delete_event_new(self, event_id: str):
        """Deletes the specified calendar event.

        :param event_id: Internal identifier of an event to be deleted
        :type event_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(event_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/team-messaging/v1/events/{{eventId}}",
                self.get_default_headers(),
            )
            .add_path("eventId", event_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def list_group_events_new(self, group_id: str) -> TmEventInfo:
        """Returns a list of calendar events available for the current user within the specified group. Users can only see their personal tasks and public tasks.

        :param group_id: Internal identifier of a group
        :type group_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: TmEventInfo
        """

        Validator(str).validate(group_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/team-messaging/v1/groups/{{groupId}}/events",
                self.get_default_headers(),
            )
            .add_path("groupId", group_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return TmEventInfo._unmap(response)

    @cast_models
    def create_event_by_group_id_new(
        self, request_body: TmCreateEventRequest, group_id: str
    ) -> TmEventInfo:
        """Creates a new calendar event within the specified group.

        :param request_body: The request body.
        :type request_body: TmCreateEventRequest
        :param group_id: Internal identifier of a group
        :type group_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Success
        :rtype: TmEventInfo
        """

        Validator(TmCreateEventRequest).validate(request_body)
        Validator(str).validate(group_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/team-messaging/v1/groups/{{groupId}}/events",
                self.get_default_headers(),
            )
            .add_path("groupId", group_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return TmEventInfo._unmap(response)
