# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.swap_device_request import SwapDeviceRequest
from ..models.sip_info_resource import SipInfoResource
from ..models.remove_line_response import RemoveLineResponse
from ..models.remove_line_request import RemoveLineRequest
from ..models.phone_line_type_enum import PhoneLineTypeEnum
from ..models.list_extension_devices_type import ListExtensionDevicesType
from ..models.line_pooling import LinePooling
from ..models.get_extension_devices_response import GetExtensionDevicesResponse
from ..models.device_resource import DeviceResource
from ..models.device_feature_enum import DeviceFeatureEnum
from ..models.delete_device_from_inventory_response import (
    DeleteDeviceFromInventoryResponse,
)
from ..models.delete_device_from_inventory_request import (
    DeleteDeviceFromInventoryRequest,
)
from ..models.bulk_add_devices_response import BulkAddDevicesResponse
from ..models.bulk_add_devices_request import BulkAddDevicesRequest
from ..models.add_device_to_inventory_response import AddDeviceToInventoryResponse
from ..models.add_device_to_inventory_request import AddDeviceToInventoryRequest
from ..models.account_device_update import AccountDeviceUpdate


class DevicesService(BaseService):

    @cast_models
    def add_device_to_inventory(
        self, request_body: AddDeviceToInventoryRequest, account_id: str
    ) -> AddDeviceToInventoryResponse:
        """Adds an existing phone (customer provided device - BYOD) as an unassigned device to the account inventory.

        :param request_body: The request body.
        :type request_body: AddDeviceToInventoryRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Created
        :rtype: AddDeviceToInventoryResponse
        """

        Validator(AddDeviceToInventoryRequest).validate(request_body)
        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v2/accounts/{{accountId}}/device-inventory",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return AddDeviceToInventoryResponse._unmap(response)

    @cast_models
    def delete_device_from_inventory(
        self, request_body: DeleteDeviceFromInventoryRequest, account_id: str
    ) -> DeleteDeviceFromInventoryResponse:
        """Deletes an existing unassigned (without digital line or phone number) device or multiple devices
        from the account inventory. It is possible to delete up to 10 devices per request.

        :param request_body: The request body.
        :type request_body: DeleteDeviceFromInventoryRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful operation
        :rtype: DeleteDeviceFromInventoryResponse
        """

        Validator(DeleteDeviceFromInventoryRequest).validate(request_body)
        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v2/accounts/{{accountId}}/device-inventory",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("DELETE")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return DeleteDeviceFromInventoryResponse._unmap(response)

    @cast_models
    def remove_line_jws_public(
        self, account_id: str, device_id: str, request_body: RemoveLineRequest = None
    ) -> RemoveLineResponse:
        """Disassociates a phone line (DL & Device) from an extension:

         - if the value of `keepAssetsInInventory` is `true`,
        the given device is moved to unassigned devices and the number is moved to the number inventory;
         - if the value of `keepAssetsInInventory` is `false`, the given device and number is removed from the account;
         - if the parameter `keepAssetsInInventory` is not set (empty body), default value `true` is set.

        :param request_body: The request body., defaults to None
        :type request_body: RemoveLineRequest, optional
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param device_id: Internal identifier of a source device
        :type device_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response (when `keepAssetsInInventory` is `true`)

        :rtype: RemoveLineResponse
        """

        Validator(RemoveLineRequest).is_optional().validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(device_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v2/accounts/{{accountId}}/devices/{{deviceId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("deviceId", device_id)
            .serialize()
            .set_method("DELETE")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return RemoveLineResponse._unmap(response)

    @cast_models
    def bulk_add_devices_v2(
        self, request_body: BulkAddDevicesRequest, account_id: str
    ) -> BulkAddDevicesResponse:
        """Adds multiple BYOD (customer provided) devices to an account.

        :param request_body: The request body.
        :type request_body: BulkAddDevicesRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response
        :rtype: BulkAddDevicesResponse
        """

        Validator(BulkAddDevicesRequest).validate(request_body)
        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v2/accounts/{{accountId}}/devices/bulk-add",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return BulkAddDevicesResponse._unmap(response)

    @cast_models
    def replace_devices_jws_public(
        self,
        request_body: SwapDeviceRequest,
        account_id: str,
        extension_id: str,
        device_id: str,
    ):
        """Replaces the user device with another device, which is assigned to an extension
        or is stored in the inventory of the same account.
        Currently, the following device types can be swapped - `HardPhone` and `OtherPhone`.

        Please note:

         - This method allows replacing a device itself, while a phone number,
           a digital Line and an emergency address associated with this device remain unchanged
           and will still work together in a chain with the replacement device.
         - If a target device is from the inventory, then a source device will be moved
           to the inventory, and a target device will be assigned to the current extension.
         - If a target device is currently assigned to another extension,
           then the devices will be just swapped.

        :param request_body: The request body.
        :type request_body: SwapDeviceRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param device_id: Internal identifier of a source device that is currently assigned to the given extension
        :type device_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(SwapDeviceRequest).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(str).validate(device_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v2/accounts/{{accountId}}/extensions/{{extensionId}}/devices/{{deviceId}}/replace",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_path("deviceId", device_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def read_device(
        self, account_id: str, device_id: str, sync_emergency_address: bool = None
    ) -> DeviceResource:
        """Returns account device(s) by their ID(s).

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param device_id: Internal identifier of a device
        :type device_id: str
        :param sync_emergency_address: Specifies if an emergency address should be synchronized or not, defaults to None
        :type sync_emergency_address: bool, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Account device(s) information
        :rtype: DeviceResource
        """

        Validator(str).validate(account_id)
        Validator(str).validate(device_id)
        Validator(bool).is_optional().validate(sync_emergency_address)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/device/{{deviceId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("deviceId", device_id)
            .add_query("syncEmergencyAddress", sync_emergency_address)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return DeviceResource._unmap(response)

    @cast_models
    def update_device(
        self,
        request_body: AccountDeviceUpdate,
        account_id: str,
        device_id: str,
        prestatement: bool = None,
    ) -> DeviceResource:
        """Updates account device(s) by their ID(s).

        :param request_body: The request body.
        :type request_body: AccountDeviceUpdate
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param device_id: Internal identifier of a device
        :type device_id: str
        :param prestatement: prestatement, defaults to None
        :type prestatement: bool, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Updated device(s) information
        :rtype: DeviceResource
        """

        Validator(AccountDeviceUpdate).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(device_id)
        Validator(bool).is_optional().validate(prestatement)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/device/{{deviceId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("deviceId", device_id)
            .add_query("prestatement", prestatement)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return DeviceResource._unmap(response)

    @cast_models
    def read_device_sip_info(self, account_id: str, device_id: str) -> SipInfoResource:
        """Returns device SIP information.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param device_id: Internal identifier of a device
        :type device_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Device SIP information
        :rtype: SipInfoResource
        """

        Validator(str).validate(account_id)
        Validator(str).validate(device_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/device/{{deviceId}}/sip-info",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("deviceId", device_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return SipInfoResource._unmap(response)

    @cast_models
    def update_device_emergency(
        self, request_body: AccountDeviceUpdate, account_id: str, device_id: str
    ) -> DeviceResource:
        """Updates account device emergency information.

        :param request_body: The request body.
        :type request_body: AccountDeviceUpdate
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param device_id: Internal identifier of a device
        :type device_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Updated emergency information of a device
        :rtype: DeviceResource
        """

        Validator(AccountDeviceUpdate).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(device_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/device/{{deviceId}}/emergency",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("deviceId", device_id)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return DeviceResource._unmap(response)

    @cast_models
    def list_extension_devices(
        self,
        account_id: str,
        extension_id: str,
        page: int = None,
        per_page: int = None,
        line_pooling: LinePooling = None,
        feature: DeviceFeatureEnum = None,
        type_: ListExtensionDevicesType = None,
        line_type: PhoneLineTypeEnum = None,
    ) -> GetExtensionDevicesResponse:
        """Returns devices of an extension or multiple extensions by their ID(s). Batch request
        is supported.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param page: The result set page number (1-indexed) to return, defaults to None
        :type page: int, optional
        :param per_page: The number of items per page. If provided value in the request
        is greater than a maximum, the maximum value is applied, defaults to None
        :type per_page: int, optional
        :param line_pooling: Pooling type of device - Host - a device with standalone paid phone line which can be linked to a soft client instance - Guest - a device with a linked phone line - None - a device without a phone line or with specific line (free, BLA, etc.), defaults to None
        :type line_pooling: LinePooling, optional
        :param feature: Device feature or multiple features supported, defaults to None
        :type feature: DeviceFeatureEnum, optional
        :param type_: Device type, defaults to None
        :type type_: ListExtensionDevicesType, optional
        :param line_type: Phone line type, defaults to None
        :type line_type: PhoneLineTypeEnum, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Extension devices information
        :rtype: GetExtensionDevicesResponse
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(int).is_optional().min(1).max(1000).validate(page)
        Validator(int).is_optional().min(1).max(1000).validate(per_page)
        Validator(LinePooling).is_optional().validate(line_pooling)
        Validator(DeviceFeatureEnum).is_optional().validate(feature)
        Validator(ListExtensionDevicesType).is_optional().validate(type_)
        Validator(PhoneLineTypeEnum).is_optional().validate(line_type)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/device",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_query("page", page, explode=False)
            .add_query("perPage", per_page, explode=False)
            .add_query("linePooling", line_pooling)
            .add_query("feature", feature)
            .add_query("type", type_)
            .add_query("lineType", line_type)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return GetExtensionDevicesResponse._unmap(response)
