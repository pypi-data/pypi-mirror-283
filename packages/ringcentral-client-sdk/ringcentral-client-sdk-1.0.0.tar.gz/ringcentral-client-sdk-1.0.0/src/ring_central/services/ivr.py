# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.update_ivr_prompt_request import UpdateIvrPromptRequest
from ..models.prompt_info import PromptInfo
from ..models.ivr_prompts import IvrPrompts
from ..models.ivr_menu_list import IvrMenuList
from ..models.ivr_menu_info import IvrMenuInfo
from ..models.create_ivr_prompt_request import CreateIvrPromptRequest
from ..models.content_disposition import ContentDisposition


class IvrService(BaseService):

    @cast_models
    def read_ivr_prompt_content(
        self,
        account_id: str,
        prompt_id: str,
        content_disposition: ContentDisposition = None,
        content_disposition_filename: str = None,
    ) -> any:
        """Returns media content of an IVR prompt by ID.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param prompt_id: Internal identifier of an IVR prompt
        :type prompt_id: str
        :param content_disposition: Whether the content is expected to be displayed in the browser, or downloaded and saved locally, defaults to None
        :type content_disposition: ContentDisposition, optional
        :param content_disposition_filename: The default filename of the file to be downloaded, defaults to None
        :type content_disposition_filename: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: IVR Prompt Media Data
        :rtype: any
        """

        Validator(str).validate(account_id)
        Validator(str).validate(prompt_id)
        Validator(ContentDisposition).is_optional().validate(content_disposition)
        Validator(str).is_optional().validate(content_disposition_filename)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/ivr-prompts/{{promptId}}/content",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("promptId", prompt_id)
            .add_query("contentDisposition", content_disposition)
            .add_query("contentDispositionFilename", content_disposition_filename)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def list_ivr_prompts(self, account_id: str) -> IvrPrompts:
        """Returns the list of IVR prompts.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: IvrPrompts
        """

        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/ivr-prompts",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return IvrPrompts._unmap(response)

    @cast_models
    def create_ivr_prompt(self, request_body: dict, account_id: str) -> PromptInfo:
        """Creates an IVR prompt.

        :param request_body: The request body.
        :type request_body: dict
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: PromptInfo
        """

        Validator(dict).validate(request_body)
        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/ivr-prompts",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body, "multipart/form-data")
        )

        response = self.send_request(serialized_request)

        return PromptInfo._unmap(response)

    @cast_models
    def read_ivr_prompt(self, account_id: str, prompt_id: str) -> PromptInfo:
        """Returns an IVR prompt by ID.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param prompt_id: Internal identifier of an IVR prompt
        :type prompt_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Prompt Information
        :rtype: PromptInfo
        """

        Validator(str).validate(account_id)
        Validator(str).validate(prompt_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/ivr-prompts/{{promptId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("promptId", prompt_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return PromptInfo._unmap(response)

    @cast_models
    def update_ivr_prompt(
        self,
        account_id: str,
        prompt_id: str,
        request_body: UpdateIvrPromptRequest = None,
    ) -> PromptInfo:
        """Updates an IVR prompt by ID

        :param request_body: The request body., defaults to None
        :type request_body: UpdateIvrPromptRequest, optional
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param prompt_id: Internal identifier of an IVR prompt
        :type prompt_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Updated Prompt Information
        :rtype: PromptInfo
        """

        Validator(UpdateIvrPromptRequest).is_optional().validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(prompt_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/ivr-prompts/{{promptId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("promptId", prompt_id)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return PromptInfo._unmap(response)

    @cast_models
    def delete_ivr_prompt(self, account_id: str, prompt_id: str):
        """Deletes an IVR prompt by ID.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param prompt_id: Internal identifier of an IVR prompt
        :type prompt_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(account_id)
        Validator(str).validate(prompt_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/ivr-prompts/{{promptId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("promptId", prompt_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def read_ivr_menu_list(self, account_id: str) -> IvrMenuList:
        """Returns a company IVR menus.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: IvrMenuList
        """

        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/ivr-menus",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return IvrMenuList._unmap(response)

    @cast_models
    def create_ivr_menu(
        self, request_body: IvrMenuInfo, account_id: str
    ) -> IvrMenuInfo:
        """Creates a company IVR menu.

        :param request_body: The request body.
        :type request_body: IvrMenuInfo
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: IvrMenuInfo
        """

        Validator(IvrMenuInfo).validate(request_body)
        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/ivr-menus",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return IvrMenuInfo._unmap(response)

    @cast_models
    def read_ivr_menu(self, account_id: str, ivr_menu_id: str) -> IvrMenuInfo:
        """Returns a company IVR menu by ID.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param ivr_menu_id: Internal identifier of an IVR menu
        :type ivr_menu_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: IvrMenuInfo
        """

        Validator(str).validate(account_id)
        Validator(str).validate(ivr_menu_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/ivr-menus/{{ivrMenuId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("ivrMenuId", ivr_menu_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return IvrMenuInfo._unmap(response)

    @cast_models
    def update_ivr_menu(
        self, request_body: IvrMenuInfo, account_id: str, ivr_menu_id: str
    ) -> IvrMenuInfo:
        """Updates a company IVR menu by ID.

        :param request_body: The request body.
        :type request_body: IvrMenuInfo
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param ivr_menu_id: Internal identifier of an IVR menu
        :type ivr_menu_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: IvrMenuInfo
        """

        Validator(IvrMenuInfo).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(ivr_menu_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/ivr-menus/{{ivrMenuId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("ivrMenuId", ivr_menu_id)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return IvrMenuInfo._unmap(response)
