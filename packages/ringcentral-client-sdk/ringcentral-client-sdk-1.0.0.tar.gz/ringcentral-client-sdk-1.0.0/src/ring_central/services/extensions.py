# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.user_templates import UserTemplates
from ..models.template_info import TemplateInfo
from ..models.list_user_templates_type import ListUserTemplatesType
from ..models.list_extensions_type import ListExtensionsType
from ..models.list_extensions_status import ListExtensionsStatus
from ..models.get_extension_list_response import GetExtensionListResponse
from ..models.extension_creation_response import ExtensionCreationResponse
from ..models.extension_creation_request import ExtensionCreationRequest
from ..models.extension_bulk_update_task_resource import ExtensionBulkUpdateTaskResource
from ..models.extension_bulk_update_request import ExtensionBulkUpdateRequest


class ExtensionsService(BaseService):

    @cast_models
    def extension_bulk_update(
        self, request_body: ExtensionBulkUpdateRequest, account_id: str
    ) -> ExtensionBulkUpdateTaskResource:
        """Updates multiple extensions at once. Maximum 500 extensions can be updated per request.

        :param request_body: The request body.
        :type request_body: ExtensionBulkUpdateRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Updated extensions
        :rtype: ExtensionBulkUpdateTaskResource
        """

        Validator(ExtensionBulkUpdateRequest).validate(request_body)
        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension-bulk-update",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return ExtensionBulkUpdateTaskResource._unmap(response)

    @cast_models
    def get_extension_bulk_update_task(
        self, account_id: str, task_id: str
    ) -> ExtensionBulkUpdateTaskResource:
        """Returns a status of a task to update multiple extensions.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param task_id: Internal identifier of a task
        :type task_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Bulk update task status
        :rtype: ExtensionBulkUpdateTaskResource
        """

        Validator(str).validate(account_id)
        Validator(str).validate(task_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension-bulk-update/tasks/{{taskId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("taskId", task_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return ExtensionBulkUpdateTaskResource._unmap(response)

    @cast_models
    def list_user_templates(
        self,
        account_id: str,
        type_: ListUserTemplatesType = None,
        page: int = None,
        per_page: int = None,
    ) -> UserTemplates:
        """Returns the list of user templates for the current account.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param type_: Type of template, defaults to None
        :type type_: ListUserTemplatesType, optional
        :param page: Indicates a page number to retrieve. Only positive number values
        are allowed. Default value is '1', defaults to None
        :type page: int, optional
        :param per_page: Indicates a page size (number of items). If not specified, the value is '100' by default, defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: User templates information
        :rtype: UserTemplates
        """

        Validator(str).validate(account_id)
        Validator(ListUserTemplatesType).is_optional().validate(type_)
        Validator(int).is_optional().validate(page)
        Validator(int).is_optional().validate(per_page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/templates",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_query("type", type_)
            .add_query("page", page)
            .add_query("perPage", per_page)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return UserTemplates._unmap(response)

    @cast_models
    def read_user_template(self, account_id: str, template_id: str) -> TemplateInfo:
        """Returns the user template by ID.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param template_id: Internal identifier of a template
        :type template_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: User template information
        :rtype: TemplateInfo
        """

        Validator(str).validate(account_id)
        Validator(str).validate(template_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/templates/{{templateId}}",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("templateId", template_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return TemplateInfo._unmap(response)

    @cast_models
    def list_extensions(
        self,
        account_id: str,
        extension_number: str = None,
        email: str = None,
        page: int = None,
        per_page: int = None,
        status: List[ListExtensionsStatus] = None,
        type_: List[ListExtensionsType] = None,
    ) -> GetExtensionListResponse:
        """Returns the list of extensions created for a particular account.
        All types of extensions are included in this list.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_number: Extension short number to filter records, defaults to None
        :type extension_number: str, optional
        :param email: Extension email address. Multiple values are accepted, defaults to None
        :type email: str, optional
        :param page: Indicates a page number to retrieve. Only positive number values
        are allowed, defaults to None
        :type page: int, optional
        :param per_page: Indicates a page size (number of items), defaults to None
        :type per_page: int, optional
        :param status: Extension current state. Multiple values are supported. If 'Unassigned'
        is specified, then extensions without `extensionNumber` attribute are returned.
        If not specified, then all extensions are returned, defaults to None
        :type status: List[ListExtensionsStatus], optional
        :param type_: Extension type. Multiple values are supported. Please note
        that legacy 'Department' extension type corresponds to 'Call Queue'
        extensions in modern RingCentral product terminology, defaults to None
        :type type_: List[ListExtensionsType], optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Extension list information
        :rtype: GetExtensionListResponse
        """

        Validator(str).validate(account_id)
        Validator(str).is_optional().validate(extension_number)
        Validator(str).is_optional().validate(email)
        Validator(int).is_optional().validate(page)
        Validator(int).is_optional().validate(per_page)
        Validator(ListExtensionsStatus).is_array().is_optional().validate(status)
        Validator(ListExtensionsType).is_array().is_optional().validate(type_)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_query("extensionNumber", extension_number)
            .add_query("email", email)
            .add_query("page", page)
            .add_query("perPage", per_page)
            .add_query("status", status, nullable=True)
            .add_query("type", type_, nullable=True)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return GetExtensionListResponse._unmap(response)

    @cast_models
    def create_extension(
        self, request_body: ExtensionCreationRequest, account_id: str
    ) -> ExtensionCreationResponse:
        """Creates an extension.

        :param request_body: The request body.
        :type request_body: ExtensionCreationRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Created extension information
        :rtype: ExtensionCreationResponse
        """

        Validator(ExtensionCreationRequest).validate(request_body)
        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return ExtensionCreationResponse._unmap(response)
