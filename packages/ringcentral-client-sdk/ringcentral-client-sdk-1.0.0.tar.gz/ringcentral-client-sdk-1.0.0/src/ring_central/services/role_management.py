# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.roles_collection_resource import RolesCollectionResource
from ..models.role_resource import RoleResource
from ..models.extension_with_roles_collection_resource import (
    ExtensionWithRolesCollectionResource,
)
from ..models.default_user_role_request import DefaultUserRoleRequest
from ..models.default_user_role import DefaultUserRole
from ..models.bulk_role_assign_resource import BulkRoleAssignResource
from ..models.assigned_roles_resource import AssignedRolesResource


class RoleManagementService(BaseService):

    @cast_models
    def list_assigned_roles(
        self, account_id: str, show_hidden: bool = None
    ) -> ExtensionWithRolesCollectionResource:
        """Returns a list of roles assigned to the current account.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param show_hidden: Specifies if hidden roles are shown or not, defaults to None
        :type show_hidden: bool, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: List of roles assigned to an account
        :rtype: ExtensionWithRolesCollectionResource
        """

        Validator(str).validate(account_id)
        Validator(bool).is_optional().validate(show_hidden)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/assigned-role",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_query("showHidden", show_hidden)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return ExtensionWithRolesCollectionResource._unmap(response)

    @cast_models
    def list_user_roles(
        self,
        account_id: str,
        custom: bool = None,
        page: int = None,
        per_page: int = None,
    ) -> RolesCollectionResource:
        """Returns a list of account user roles.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param custom: Specifies whether to return custom roles or predefined roles only.
        If not specified, all roles are returned, defaults to None
        :type custom: bool, optional
        :param page: The result set page number (1-indexed) to return, defaults to None
        :type page: int, optional
        :param per_page: The number of items per page. If provided value in the request
        is greater than a maximum, the maximum value is applied, defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: List of account user roles
        :rtype: RolesCollectionResource
        """

        Validator(str).validate(account_id)
        Validator(bool).is_optional().validate(custom)
        Validator(int).is_optional().min(1).max(1000).validate(page)
        Validator(int).is_optional().min(1).max(1000).validate(per_page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/user-role",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_query("custom", custom)
            .add_query("page", page, explode=False)
            .add_query("perPage", per_page, explode=False)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return RolesCollectionResource._unmap(response)

    @cast_models
    def create_custom_role(self, request_body: RoleResource, account_id: str):
        """Creates a custom user role.

        :param request_body: The request body.
        :type request_body: RoleResource
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(RoleResource).validate(request_body)
        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/user-role",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def read_default_role(self, account_id: str) -> DefaultUserRole:
        """Returns the default user role of the current account.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Default user role
        :rtype: DefaultUserRole
        """

        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/user-role/default",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return DefaultUserRole._unmap(response)

    @cast_models
    def update_default_user_role(
        self, request_body: DefaultUserRoleRequest, account_id: str
    ) -> DefaultUserRole:
        """Updates the account default user role.

        :param request_body: The request body.
        :type request_body: DefaultUserRoleRequest
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Updated default user role
        :rtype: DefaultUserRole
        """

        Validator(DefaultUserRoleRequest).validate(request_body)
        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/user-role/default",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return DefaultUserRole._unmap(response)

    @cast_models
    def read_user_role(
        self, role_id: str, account_id: str, advanced_permissions: bool = None
    ) -> RoleResource:
        """Returns a user role assigned to the current account.

        :param role_id: Internal identifier of a role
        :type role_id: str
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param advanced_permissions: Specifies whether to return advanced permissions capabilities within `permissionsCapabilities` resource.
        The default value is false., defaults to None
        :type advanced_permissions: bool, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: User role information
        :rtype: RoleResource
        """

        Validator(str).validate(role_id)
        Validator(str).validate(account_id)
        Validator(bool).is_optional().validate(advanced_permissions)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/user-role/{{roleId}}",
                self.get_default_headers(),
            )
            .add_path("roleId", role_id)
            .add_path("accountId", account_id)
            .add_query("advancedPermissions", advanced_permissions)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return RoleResource._unmap(response)

    @cast_models
    def update_user_role(
        self, request_body: RoleResource, role_id: str, account_id: str
    ) -> RoleResource:
        """Updates a user role assigned to the current account by ID.

        :param request_body: The request body.
        :type request_body: RoleResource
        :param role_id: Internal identifier of a role
        :type role_id: str
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Updated user role information
        :rtype: RoleResource
        """

        Validator(RoleResource).validate(request_body)
        Validator(str).validate(role_id)
        Validator(str).validate(account_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/user-role/{{roleId}}",
                self.get_default_headers(),
            )
            .add_path("roleId", role_id)
            .add_path("accountId", account_id)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return RoleResource._unmap(response)

    @cast_models
    def delete_custom_role(
        self, role_id: str, account_id: str, validate_only: bool = None
    ):
        """Deletes a custom user role by ID.

        :param role_id: Internal identifier of a role
        :type role_id: str
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param validate_only: Specifies that role should be validated prior to deletion, whether
        it can be deleted or not, defaults to None
        :type validate_only: bool, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(role_id)
        Validator(str).validate(account_id)
        Validator(bool).is_optional().validate(validate_only)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/user-role/{{roleId}}",
                self.get_default_headers(),
            )
            .add_path("roleId", role_id)
            .add_path("accountId", account_id)
            .add_query("validateOnly", validate_only)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def assign_multiple_user_roles(
        self, request_body: BulkRoleAssignResource, account_id: str, role_id: str
    ):
        """Assigns multiple user roles.

        :param request_body: The request body.
        :type request_body: BulkRoleAssignResource
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param role_id: Internal identifier of a role
        :type role_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(BulkRoleAssignResource).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(role_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/user-role/{{roleId}}/bulk-assign",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("roleId", role_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def list_of_available_for_assigning_roles(
        self, account_id: str, extension_id: str, page: int = None, per_page: int = None
    ) -> RolesCollectionResource:
        """Returns a list of roles which can be assigned to a given extension.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param page: The result set page number (1-indexed) to return, defaults to None
        :type page: int, optional
        :param per_page: The number of items per page. If provided value in the request
        is greater than a maximum, the maximum value is applied, defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: List of roles which can be assigned to a given extension
        :rtype: RolesCollectionResource
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(int).is_optional().min(1).max(1000).validate(page)
        Validator(int).is_optional().min(1).max(1000).validate(per_page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/assignable-roles",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_query("page", page, explode=False)
            .add_query("perPage", per_page, explode=False)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return RolesCollectionResource._unmap(response)

    @cast_models
    def list_user_assigned_roles(
        self, account_id: str, extension_id: str, show_hidden: bool = None
    ) -> AssignedRolesResource:
        """Returns a list of roles assigned to the current extension.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param show_hidden: Specifies if hidden roles are shown or not, defaults to None
        :type show_hidden: bool, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: List of roles assigned to an extension
        :rtype: AssignedRolesResource
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(bool).is_optional().validate(show_hidden)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/assigned-role",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_query("showHidden", show_hidden)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return AssignedRolesResource._unmap(response)

    @cast_models
    def update_user_assigned_roles(
        self, request_body: AssignedRolesResource, account_id: str, extension_id: str
    ) -> AssignedRolesResource:
        """Updates a list of roles assigned to the current user.

        :param request_body: The request body.
        :type request_body: AssignedRolesResource
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Updated list of roles assigned to an extension
        :rtype: AssignedRolesResource
        """

        Validator(AssignedRolesResource).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/assigned-role",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return AssignedRolesResource._unmap(response)

    @cast_models
    def assign_default_role(
        self, account_id: str, extension_id: str
    ) -> AssignedRolesResource:
        """Assigns the default role to the currently logged-in user extension.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Assigned user role information
        :rtype: AssignedRolesResource
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/assigned-role/default",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .serialize()
            .set_method("PUT")
        )

        response = self.send_request(serialized_request)

        return AssignedRolesResource._unmap(response)

    @cast_models
    def list_standard_user_role(
        self,
        service_plan_id: str = None,
        page: int = None,
        per_page: int = None,
        advanced_permissions: bool = None,
    ) -> RolesCollectionResource:
        """Returns a list of standard user roles.

        :param service_plan_id: Internal identifier of a service plan., defaults to None
        :type service_plan_id: str, optional
        :param page: The result set page number (1-indexed) to return, defaults to None
        :type page: int, optional
        :param per_page: The number of items per page. If provided value in the request
        is greater than a maximum, the maximum value is applied, defaults to None
        :type per_page: int, optional
        :param advanced_permissions: Specifies whether to return advanced permissions capabilities within `permissionsCapabilities` resource.
        The default value is false., defaults to None
        :type advanced_permissions: bool, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: List of standard user roles
        :rtype: RolesCollectionResource
        """

        Validator(str).is_optional().validate(service_plan_id)
        Validator(int).is_optional().min(1).max(1000).validate(page)
        Validator(int).is_optional().min(1).max(1000).validate(per_page)
        Validator(bool).is_optional().validate(advanced_permissions)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/dictionary/user-role",
                self.get_default_headers(),
            )
            .add_query("servicePlanId", service_plan_id)
            .add_query("page", page, explode=False)
            .add_query("perPage", per_page, explode=False)
            .add_query("advancedPermissions", advanced_permissions)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return RolesCollectionResource._unmap(response)

    @cast_models
    def read_standard_user_role(self, role_id: str) -> RoleResource:
        """Returns a standard user role by ID.

        :param role_id: Internal identifier of a role
        :type role_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Standard user role information
        :rtype: RoleResource
        """

        Validator(str).validate(role_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/dictionary/user-role/{{roleId}}",
                self.get_default_headers(),
            )
            .add_path("roleId", role_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return RoleResource._unmap(response)
