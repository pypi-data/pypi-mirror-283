# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.update_unified_presence import UpdateUnifiedPresence
from ..models.unified_presence import UnifiedPresence
from ..models.presence_info_response import PresenceInfoResponse
from ..models.presence_info_request import PresenceInfoRequest
from ..models.get_presence_info import GetPresenceInfo
from ..models.extension_call_queue_update_presence_list import (
    ExtensionCallQueueUpdatePresenceList,
)
from ..models.extension_call_queue_presence_list import ExtensionCallQueuePresenceList
from ..models.call_queue_update_presence import CallQueueUpdatePresence
from ..models.call_queue_presence import CallQueuePresence
from ..models.account_presence_info import AccountPresenceInfo


class PresenceService(BaseService):

    @cast_models
    def read_call_queue_presence(
        self, account_id: str, group_id: str
    ) -> CallQueuePresence:
        """Returns presence status of the call queue members.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param group_id: Internal identifier of a call queue extension
        :type group_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: CallQueuePresence
        """

        Validator(str).validate(account_id)
        Validator(str).validate(group_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/call-queues/{{groupId}}/presence",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("groupId", group_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return CallQueuePresence._unmap(response)

    @cast_models
    def update_call_queue_presence(
        self, request_body: CallQueueUpdatePresence, account_id: str, group_id: str
    ) -> CallQueuePresence:
        """Updates presence status of the call queue members in the specified queue.

        :param request_body: The request body.
        :type request_body: CallQueueUpdatePresence
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param group_id: Internal identifier of a call queue extension
        :type group_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: CallQueuePresence
        """

        Validator(CallQueueUpdatePresence).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(group_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/call-queues/{{groupId}}/presence",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("groupId", group_id)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return CallQueuePresence._unmap(response)

    @cast_models
    def read_account_presence(
        self,
        account_id: str,
        detailed_telephony_state: bool = None,
        sip_data: bool = None,
        page: int = None,
        per_page: int = None,
    ) -> AccountPresenceInfo:
        """Returns presence status of all extensions of an account. Please note: The presenceStatus is returned as Offline (the parameters telephonyStatus, message, userStatus and dndStatus are not returned at all) for the following extension types: Department, Announcement Only, Voicemail (Take Messages Only), Fax User, Paging Only Group, Shared Lines Group, IVR Menu, Application Extension.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param detailed_telephony_state: Whether to return detailed telephony state, defaults to None
        :type detailed_telephony_state: bool, optional
        :param sip_data: Whether to return SIP data, defaults to None
        :type sip_data: bool, optional
        :param page: Page number for account presence information, defaults to None
        :type page: int, optional
        :param per_page: Number for account presence information items per page, defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: AccountPresenceInfo
        """

        Validator(str).validate(account_id)
        Validator(bool).is_optional().validate(detailed_telephony_state)
        Validator(bool).is_optional().validate(sip_data)
        Validator(int).is_optional().validate(page)
        Validator(int).is_optional().validate(per_page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/presence",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_query("detailedTelephonyState", detailed_telephony_state)
            .add_query("sipData", sip_data)
            .add_query("page", page)
            .add_query("perPage", per_page)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return AccountPresenceInfo._unmap(response)

    @cast_models
    def read_extension_call_queue_presence(
        self, account_id: str, extension_id: str, editable_member_status: bool = None
    ) -> ExtensionCallQueuePresenceList:
        """Returns a list of agent's call queues with the agent presence status (per queue).

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param editable_member_status: Filtering by the flag 'Allow members to change their Queue Status'. If 'true' only queues where user can change his availability status are returned, defaults to None
        :type editable_member_status: bool, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: ExtensionCallQueuePresenceList
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(bool).is_optional().validate(editable_member_status)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/call-queue-presence",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_query("editableMemberStatus", editable_member_status)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return ExtensionCallQueuePresenceList._unmap(response)

    @cast_models
    def update_extension_call_queue_presence(
        self,
        request_body: ExtensionCallQueueUpdatePresenceList,
        account_id: str,
        extension_id: str,
    ) -> ExtensionCallQueuePresenceList:
        """Updates availability of the agent for the call queues.

        :param request_body: The request body.
        :type request_body: ExtensionCallQueueUpdatePresenceList
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: ExtensionCallQueuePresenceList
        """

        Validator(ExtensionCallQueueUpdatePresenceList).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/call-queue-presence",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return ExtensionCallQueuePresenceList._unmap(response)

    @cast_models
    def read_user_presence_status(
        self,
        account_id: str,
        extension_id: str,
        detailed_telephony_state: bool = None,
        sip_data: bool = None,
    ) -> GetPresenceInfo:
        """Returns the presence status of an extension or several extensions by their ID(s). The `presenceStatus` is returned as Offline
        (the parameters `telephonyStatus`, `message`, `userStatus` and `dndStatus` are not returned at all) for the following extension types:
        Department/Announcement Only/Take Messages Only (Voicemail)/Fax User/Paging Only Group/Shared Lines Group/IVR Menu/Application Extension/Park Location.
        If the user requests his/her own presence status, the response contains actual presence status even if the status publication is turned off.
        [Batch request syntax](https://developers.ringcentral.com/api-reference/Batch-Requests) is supported. For batch requests the number of extensions
        in one request is limited to 30. If more extensions are included in the request, the error code 400 Bad Request is returned with the logical error
        code InvalidMultipartRequest and the corresponding message Extension Presence Info multipart request is limited to 30 extensions.

        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        :param detailed_telephony_state: Specifies whether to return a detailed telephony state or not, defaults to None
        :type detailed_telephony_state: bool, optional
        :param sip_data: Specifies whether to return SIP data or not, defaults to None
        :type sip_data: bool, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: GetPresenceInfo
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)
        Validator(bool).is_optional().validate(detailed_telephony_state)
        Validator(bool).is_optional().validate(sip_data)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/presence",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .add_query("detailedTelephonyState", detailed_telephony_state)
            .add_query("sipData", sip_data)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return GetPresenceInfo._unmap(response)

    @cast_models
    def update_user_presence_status(
        self,
        account_id: str,
        extension_id: str,
        request_body: PresenceInfoRequest = None,
    ) -> PresenceInfoResponse:
        """Updates user-defined extension presence status, status message and DnD status by extension ID. Supported for regular User extensions only. The extension types listed do not support presence status: Department, Announcement Only, Take Messages Only (Voicemail), Fax User, Paging Only Group, Shared Lines Group, IVR Menu, Application Extension.

        :param request_body: The request body., defaults to None
        :type request_body: PresenceInfoRequest, optional
        :param account_id: Internal identifier of the RingCentral account
        (can be set to "~" to indicate that the account associated with current authorization session should be used)
        :type account_id: str
        :param extension_id: Internal identifier of the RingCentral extension/user
        (can be set to "~" to indicate that the extension associated with current authorization session should be used)
        :type extension_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: PresenceInfoResponse
        """

        Validator(PresenceInfoRequest).is_optional().validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/presence",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return PresenceInfoResponse._unmap(response)

    @cast_models
    def read_unified_presence(
        self, account_id: str, extension_id: str
    ) -> UnifiedPresence:
        """Returns the unified presence status of the requested user(s). The set of parameters returned by this method differs whether you return the requester's presence or any other user presence.

        :param account_id: Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session
        :type account_id: str
        :param extension_id: Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session
        :type extension_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: UnifiedPresence
        """

        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/unified-presence",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return UnifiedPresence._unmap(response)

    @cast_models
    def update_unified_presence(
        self, request_body: UpdateUnifiedPresence, account_id: str, extension_id: str
    ) -> UnifiedPresence:
        """Updates the unified presence for the current user specified in path.

        :param request_body: The request body.
        :type request_body: UpdateUnifiedPresence
        :param account_id: Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session
        :type account_id: str
        :param extension_id: Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session
        :type extension_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: UnifiedPresence
        """

        Validator(UpdateUnifiedPresence).validate(request_body)
        Validator(str).validate(account_id)
        Validator(str).validate(extension_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/v1.0/account/{{accountId}}/extension/{{extensionId}}/unified-presence",
                self.get_default_headers(),
            )
            .add_path("accountId", account_id)
            .add_path("extensionId", extension_id)
            .serialize()
            .set_method("PATCH")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return UnifiedPresence._unmap(response)
