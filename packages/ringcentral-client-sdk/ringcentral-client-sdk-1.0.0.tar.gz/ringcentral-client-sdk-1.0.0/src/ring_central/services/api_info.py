# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.api_versions_list import ApiVersionsList
from ..models.api_version_info import ApiVersionInfo


class ApiInfoService(BaseService):

    @cast_models
    def read_api_versions(self) -> ApiVersionsList:
        """Returns current API version(s) and server info.

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful response
        :rtype: ApiVersionsList
        """

        serialized_request = (
            Serializer(f"{self.base_url}/restapi", self.get_default_headers())
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return ApiVersionsList._unmap(response)

    @cast_models
    def read_api_version(self, api_version: str) -> ApiVersionInfo:
        """Returns current API version info by apiVersion.

        :param api_version: API version to be requested, for example 'v1.0'
        :type api_version: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: API Version
        :rtype: ApiVersionInfo
        """

        Validator(str).validate(api_version)

        serialized_request = (
            Serializer(
                f"{self.base_url}/restapi/{{apiVersion}}", self.get_default_headers()
            )
            .add_path("apiVersion", api_version)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return ApiVersionInfo._unmap(response)
