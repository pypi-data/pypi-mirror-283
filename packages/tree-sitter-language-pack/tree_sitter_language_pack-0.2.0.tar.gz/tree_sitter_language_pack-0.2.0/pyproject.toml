[project]
name = "tree-sitter-language-pack"
version = "0.2.0"
description = "Extensive Language Pack for Tree-Sitter"
authors = [{ name = "Na'aman Hirschfeld", email = "nhirschfeld@gmail.com" }]

keywords = ["tree-sitter"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python",
    "Typing :: Typed"
]

dependencies = [
    "tree-sitter>=0.22.0",
    "tree-sitter-c-sharp>=0.21.2",
    "tree-sitter-embedded-template>=0.21.0",
    "tree-sitter-yaml>=0.6.0",
    "tree-sitter-typescript>=0.21.1",
    "tree-sitter-php>=0.22.5",
    "tree-sitter-xml>=0.6.4",
]
requires-python = ">=3.9.0"
readme = "README.md"
license = {file = "LICENSE"}

[project.urls]
homepage = "https://github.com/Goldziher/tree-sitter-language-pack"

[build-system]
requires = ["setuptools>=70.1.1", "wheel>=0.43.0", "typing-extensions>=4.12.2", "cython"]
build-backend = "setuptools.build_meta"

[tool.pdm]
parallel_install = true
distribution = true

[tool.pdm.build]
run-setuptools = true
package-dir = ["test_sitter_language_pack"]

[tool.pdm.dev-dependencies]
dev = [
    "mypy>=1.10.1",
    "ruff>=0.4.10",
    "pytest>=8.2.2",
    "setuptools>=70.1.1",
    "wheel>=0.43.0",
    "pre-commit>=3.7.1",
    "typing-extensions>=4.12.2",
    "gitpython>=3.1.43",
    "anyio>=4.4.0",
    "aiopath>=0.5.6",
]

[tool.pdm.scripts]
test = "pytest ./tests"

# linters configuration below
[tool.ruff]
line-length = 120
target-version = "py39"

lint.select = [
    "A",   # flake8-builtins
    "B",   # flake8-bugbear
    "BLE", # flake8-blind-except
    "C4",  # flake8-comprehensions
    "C90", # mccabe
    "D",   # pydocstyle
    "DJ",  # flake8-django
    "DTZ", # flake8-datetimez
    "E",   # pycodestyle errors
    "ERA", # eradicate
    "EXE", # flake8-executable
    "F",   # pyflakes
    "G",   # flake8-logging-format
    "I",   # isort
    "ICN", # flake8-import-conventions
    "ISC", # flake8-implicit-str-concat
    "N",   # pep8-naming
    "PIE", # flake8-pie
    "PLC", # pylint - convention
    "PLE", # pylint - error
    "PLW", # pylint - warning
    "Q",   # flake8-quotes
    "RET", # flake8-return
    "RUF", # Ruff-specific rules
    "S",   # flake8-bandit
    "SIM", # flake8-simplify
    "T10", # flake8-debugger
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP",  # pyupgrade
    "W",   # pycodestyle - warning
    "YTT", # flake8-2020
]
lint.ignore = [
    "ISC001", # isort - conflict with other rules
    "A003", # flake8-builtins - class attribute {name} is shadowing a python builtin
    "B008", # bugbear - function call parameters init
    "D100", # pydocstyle - missing docstring in public module
    "D104", # pydocstyle - missing docstring in public package
    "D107", # pydocstyle - missing docstring in __init__
    "E203", # whitespace before ':', handled by ruff format
    "E501", # pycodestyle line too long, handled by ruff format
]
src = ["tree_sitter_language_pack", "tests"]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.*" = [
    "D", "S"
]
"scripts/**/*.*" = ["T201", "S"]

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 120

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["tree_sitter_language_pack", "tests"]

[tool.mypy]
packages = ["tree_sitter_language_pack", "tests"]
python_version = "3.9"
disallow_any_generics = false
disallow_untyped_decorators = false
implicit_reexport = false
show_error_codes = true
strict = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true
