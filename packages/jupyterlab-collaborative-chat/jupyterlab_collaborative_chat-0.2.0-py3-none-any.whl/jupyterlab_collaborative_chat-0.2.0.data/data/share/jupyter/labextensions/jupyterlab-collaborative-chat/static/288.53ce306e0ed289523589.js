"use strict";(self.webpackChunkjupyterlab_collaborative_chat=self.webpackChunkjupyterlab_collaborative_chat||[]).push([[288],{1288:(e,t,a)=>{a.r(t),a.d(t,{default:()=>$});var s=a(22),n=a(1652),i=a(8751),o=a(6110),r=a(7635),d=a(5949),h=a(6389),c=a(4080),l=a(8320),g=a(3858),m=a(405),u=a(4602),p=a(7262),y=a(2697);class _ extends y.YDocument{constructor(e){super(e),this.version="1.0.0",this._usersObserver=e=>{const t=new Array;e.keysChanged.forEach((a=>{const s=e.changes.keys.get(a);if(s)switch(s.action){case"add":t.push({key:a,newValue:this._users.get(a),type:"add"});break;case"delete":t.push({key:a,oldValue:s.oldValue,type:"remove"});break;case"update":t.push({key:a,oldValue:s.oldValue,newValue:this._users.get(a),type:"change"})}})),this._changed.emit({userChange:t})},this._messagesObserver=e=>{const t=e.delta;this._changed.emit({messageChanges:t})},this._metadataObserver=e=>{const t=new Array;e.changes.keys.forEach(((e,a)=>{switch(e.action){case"add":t.push({key:a,newValue:this._metadata.get(a),type:"add"});break;case"delete":t.push({key:a,oldValue:e.oldValue,type:"remove"});break;case"update":t.push({key:a,oldValue:e.oldValue,newValue:this._metadata.get(a),type:"change"})}})),this._changed.emit({metadataChanges:t})},this._users=this.ydoc.getMap("users"),this._users.observe(this._usersObserver),this._messages=this.ydoc.getArray("messages"),this._messages.observe(this._messagesObserver),this._metadata=this.ydoc.getMap("metadata"),this._metadata.observe(this._metadataObserver)}static create(e){return new _(e)}get id(){return this._metadata.get("id")||""}get users(){return p.JSONExt.deepCopy(this._users.toJSON())}get messages(){return p.JSONExt.deepCopy(this._messages.toJSON())}getUser(e){if(e)return this._users.get(e)}setUser(e){this.transact((()=>{this._users.set(e.username,e)}))}getMessage(e){return this._messages.get(e)}addMessage(e){this.transact((()=>{this._messages.push([e])}))}updateMessage(e,t){this.transact((()=>{this._messages.delete(e),this._messages.insert(e,[t])}))}getMessageIndex(e){return this._messages.toArray().findIndex((t=>t.id===e))}deleteMessage(e){this.transact((()=>{this._messages.delete(e)}))}}class C extends s.ChatModel{constructor(e){super(e),this.collaborative=!0,this._onchange=(e,t)=>{if(t.messageChanges){const e=t.messageChanges;let a=0;e.forEach((e=>{if(e.retain)a+=e.retain;else if(e.insert){const t=e.insert.map((e=>({...e,sender:this.sharedModel.getUser(e.sender)||{username:"User undefined"}})));this.messagesInserted(a,t),a+=t.length}else e.delete&&this.messagesDeleted(a,e.delete)}))}t.metadataChanges&&t.metadataChanges.forEach((e=>{"id"===e.key&&(this.id=e.newValue)}))},this.defaultKernelName="",this.defaultKernelLanguage="",this._dirty=!1,this._readOnly=!1,this._disposed=new u.Signal(this),this._contentChanged=new u.Signal(this),this._stateChanged=new u.Signal(this),this._user=e.user||{username:"user undefined"};const{widgetConfig:t,sharedModel:a}=e;this._sharedModel=a||_.create(),this.id=this._sharedModel.id,this.sharedModel.changed.connect(this._onchange,this),this.config=t.config,t.configChanged.connect(((e,t)=>{this.config=t}))}get user(){return this._user}get sharedModel(){return this._sharedModel}get contentChanged(){return this._contentChanged}get stateChanged(){return this._stateChanged}get dirty(){return this._dirty}set dirty(e){this._dirty=e}get readOnly(){return this._readOnly}set readOnly(e){this._readOnly=e}get disposed(){return this._disposed}dispose(){this.isDisposed||(super.dispose(),this._sharedModel.dispose(),this._disposed.emit(),u.Signal.clearData(this))}toString(){return JSON.stringify({},null,2)}fromString(e){}toJSON(){return JSON.parse(this.toString())}fromJSON(e){}addMessage(e){const t={type:"msg",id:p.UUID.uuid4(),body:e.body,time:Date.now()/1e3,sender:this._user.username,raw_time:!0};this.sharedModel.getUser(this._user.username)!==this._user&&this.sharedModel.setUser(this._user),this.sharedModel.addMessage(t)}updateMessage(e,t){const a=this.sharedModel.getMessageIndex(e);let s=this.sharedModel.getMessage(a);if(s)s.body=t.body,s.edited=!0;else{const a=t.sender.username;s={type:"msg",id:e||p.UUID.uuid4(),body:t.body,time:t.time||Date.now()/1e3,sender:a,edited:!0}}this.sharedModel.updateMessage(a,s)}deleteMessage(e){const t=this.sharedModel.getMessageIndex(e),a=this.sharedModel.getMessage(t);a?(a.body="",a.deleted=!0,this.sharedModel.updateMessage(t,a)):console.error("The message to delete does not exist")}}var f=a(3345),b=a.n(f);const v={name:"chat",displayName:"Chat",mimeTypes:["text/json","application/json"],extensions:[".chat"],fileFormat:"text",contentType:"chat",icon:s.chatIcon},w=new p.Token("jupyter-collaborative-chat:IChatFactory"),M="collaborative-chat:create",x="collaborative-chat:open",I="collaborative-chat:moveToSide",R="collaborative-chat:markAsRead",k=new p.Token("jupyter-collaborative-chat:IChatPanel"),S="jp-collab-chat-title-unread";class T extends m.DocumentWidget{constructor(e){super(e),this._unreadChanged=(e,t)=>{t.length?this.title.className.includes(S)||(this.title.className+=` ${S}`):this.title.className=this.title.className.replace(S,"")},this.addClass("jp-collab-chat-main-panel"),this.model.name=this.context.localPath,this.model.unreadChanged.connect(this._unreadChanged)}dispose(){this.model.unreadChanged.disconnect(this._unreadChanged),this.context.dispose(),this.content.dispose(),super.dispose()}get model(){return this.content.model}}class N extends g.SidePanel{constructor(e){super(e),this.updateChatNames=async()=>{const e=v.extensions[0];this._drive.get(".").then((t=>{const a=t.content.filter((t=>"file"===t.type&&t.name.endsWith(e))).map((t=>r.PathExt.basename(t.name,e)));this._chatNamesChanged.emit(a)})).catch((e=>console.error("Error getting the chat files from drive",e)))},this._chatSelected=e=>{const t=e.target.value;if("-"===t)return;const a=this.widgets.findIndex((e=>e.name===t));-1===a?this._commands.execute(x,{filepath:`${t}${v.extensions[0]}`,inSidePanel:!0}):this.widgets[a].isVisible||this.content.expand(a),e.target.selectedIndex=0},this._chatNamesChanged=new u.Signal(this),this._config={},this.addClass("jp-collab-chat-sidepanel"),this._commands=e.commands,this._drive=e.drive,this._rmRegistry=e.rmRegistry,this._themeManager=e.themeManager,this._autocompletionRegistry=e.autocompletionRegistry;const t=new g.CommandToolbarButton({commands:this._commands,id:M,args:{inSidePanel:!0},icon:g.addIcon});t.addClass("jp-collab-chat-add"),this.toolbar.addItem("createChat",t),this._openChat=g.ReactWidget.create(b().createElement(j,{chatNamesChanged:this._chatNamesChanged,handleChange:this._chatSelected.bind(this)})),this._openChat.addClass("jp-collab-chat-open"),this.toolbar.addItem("openChat",this._openChat),this.content.expansionToggled.connect(this._onExpansionToggled,this)}get config(){return this._config}set config(e){this._config={...this._config,...e},this.widgets.forEach((t=>{t.model.config=e}))}addChat(e,t){const a=this.content;for(let e=0;e<this.widgets.length;e++)a.collapse(e);e.name=t;const n=new s.ChatWidget({model:e,rmRegistry:this._rmRegistry,themeManager:this._themeManager,autocompletionRegistry:this._autocompletionRegistry});this.addWidget(new E({name:t,widget:n,commands:this._commands}))}onAfterShow(e){var t;null===(t=this._openChat.renderPromise)||void 0===t||t.then((()=>this.updateChatNames()))}_onExpansionToggled(e,t){if(this.widgets[t].isVisible)for(let a=0;a<this.widgets.length;a++)a!==t&&e.collapse(a)}}class E extends g.PanelWithToolbar{constructor(e){var t;super(e),this._unreadChanged=(e,t)=>{this._markAsRead.enabled=t.length>0},this.addClass("jp-collab-chat-section"),this._name=e.name,this.title.label=this._name,this.title.caption=this._name,this.toolbar.addClass("jp-collab-chat-toolbar"),this._markAsRead=new g.ToolbarButton({icon:s.readIcon,iconLabel:"Mark chat as read",className:"jp-mod-styled",onClick:()=>this.model.unreadMessages=[]});const a=new g.ToolbarButton({icon:g.launchIcon,iconLabel:"Move the chat to the main area",className:"jp-mod-styled",onClick:()=>{this.model.dispose(),e.commands.execute(x,{filepath:`${this._name}${v.extensions[0]}`}),this.dispose()}}),n=new g.ToolbarButton({icon:g.closeIcon,iconLabel:"Close the chat",className:"jp-mod-styled",onClick:()=>{this.model.dispose(),this.dispose()}});this.toolbar.addItem("collaborativeChat-markRead",this._markAsRead),this.toolbar.addItem("collaborativeChat-moveMain",a),this.toolbar.addItem("collaborativeChat-close",n),this.addWidget(e.widget),null===(t=this.model.unreadChanged)||void 0===t||t.connect(this._unreadChanged),this._markAsRead.enabled=this.model.unreadMessages.length>0,e.widget.node.style.height="100%"}get name(){return this._name}get model(){return this.widgets[0].model}dispose(){var e;null===(e=this.model.unreadChanged)||void 0===e||e.disconnect(this._unreadChanged),super.dispose()}}function j({chatNamesChanged:e,handleChange:t}){const[a,s]=(0,f.useState)([]);return e.connect(((e,t)=>{s(t)})),b().createElement(g.HTMLSelect,{onChange:t},b().createElement("option",{value:"-"},"Open a chat"),a.map((e=>b().createElement("option",{value:e},e))))}class W{constructor(e){this.configChanged=new u.Signal(this),this.config=e,this.configChanged.connect(((e,t)=>{this.config={...this.config,...t}}))}}class A extends m.ABCWidgetFactory{constructor(e){super(e),this._themeManager=e.themeManager,this._rmRegistry=e.rmRegistry,this._autocompletionRegistry=e.autocompletionRegistry}createNewWidget(e){return e.rmRegistry=this._rmRegistry,e.themeManager=this._themeManager,e.autocompletionRegistry=this._autocompletionRegistry,new T({context:e,content:new s.ChatWidget(e)})}}class O{constructor(e){this.collaborative=!0,this._disposed=!1,this._user=e.user,this._widgetConfig=e.widgetConfig,this._commands=e.commands}get name(){return"chat"}get contentType(){return"chat"}get fileFormat(){return"text"}get isDisposed(){return this._disposed}dispose(){this._disposed=!0}preferredLanguage(e){return""}createNew(e){return new C({...e,user:this._user,widgetConfig:this._widgetConfig,commands:this._commands})}}const P="Chat",D="jupyterlab-collaborative-chat:factory",V={id:"jupyterlab-collaborative-chat:autocompletionRegistry",description:"An autocompletion registry",autoStart:!0,provides:s.IAutocompletionRegistry,activate:e=>new s.AutocompletionRegistry},F={id:D,description:"A document factories for collaborative chat",autoStart:!0,requires:[h.IRenderMimeRegistry],optional:[s.IAutocompletionRegistry,n.ICollaborativeDrive,i.ILayoutRestorer,c.ISettingRegistry,o.IThemeManager,o.IToolbarWidgetRegistry,l.ITranslator],provides:w,activate:(e,t,a,s,n,i,r,d,h)=>{const c=null!=h?h:l.nullTranslator;let g,m=!1,u=!0,p=!0;function y(e){m=e.get("sendWithShiftEnter").composite,u=e.get("stackMessages").composite,p=e.get("unreadNotifications").composite,C.configChanged.emit({sendWithShiftEnter:m,stackMessages:u,unreadNotifications:p})}i&&(d&&(g=(0,o.createToolbarFactory)(d,i,P,D,c)),Promise.all([e.restored,i.load(D)]).then((([,e])=>{y(e),e.changed.connect(y)})).catch((e=>{console.error(`Something went wrong when reading the settings.\n${e}`)})));const C=new W({sendWithShiftEnter:m,stackMessages:u,unreadNotifications:p}),f=new o.WidgetTracker({namespace:"chat"});if(e.docRegistry.addFileType(v),s){const e=()=>_.create();s.sharedModelFactory.registerDocumentFactory("chat",e)}e.serviceManager.ready.then((()=>{const t=e.serviceManager.user.identity,a=new O({user:t,widgetConfig:C,commands:e.commands});e.docRegistry.addModelFactory(a)})).catch((e=>console.error("The collaborative chat model factory is not initialized",e)));const b=new A({name:P,label:"Chat",modelName:"chat",fileTypes:["chat"],defaultFor:["chat"],themeManager:r,rmRegistry:t,toolbarFactory:g,translator:c,autocompletionRegistry:a});return b.widgetCreated.connect(((t,a)=>{a.context.pathChanged.connect((()=>{f.save(a)})),f.add(a),a.model.unreadChanged.connect((()=>e.commands.notifyCommandChanged(R)))})),e.docRegistry.addWidgetFactory(b),n&&n.restore(f,{command:"docmanager:open",args:e=>({path:e.context.path,factory:P}),name:e=>e.context.path,when:e.serviceManager.ready}),{widgetConfig:C,tracker:f}}},$=[V,{id:"jupyterlab-collaborative-chat:commands",description:"The commands to create or open a chat",autoStart:!0,requires:[n.ICollaborativeDrive,w],optional:[k,o.ICommandPalette,d.ILauncher],activate:(e,t,a,n,i,d)=>{const{commands:h}=e,{tracker:c,widgetConfig:l}=a;h.addCommand(M,{label:e=>e.isPalette?"Create a new chat":"Chat",caption:"Create a chat",icon:e=>e.isPalette?void 0:s.chatIcon,execute:async e=>{var a,s;const n=null!==(a=e.inSidePanel)&&void 0!==a&&a;let i=null!==(s=e.name)&&void 0!==s?s:null,r="";if(i||(i=(await o.InputDialog.getText({label:"Name",placeholder:"untitled",title:"Create a new chat"})).value),null===i)return;i&&(r=i.endsWith(v.extensions[0])?i:`${i}${v.extensions[0]}`);let d=!0;if(r?await t.get(r,{content:!1}).catch((()=>{d=!1})):d=!1,!d){let e=await t.newUntitled({type:"file",ext:v.extensions[0]});if(r&&(e=await t.rename(e.path,r)),!e)return(0,o.showErrorMessage)("Error creating a chat","An error occured while creating the chat"),"";r=e.path}if(h.hasCommand(x))return h.execute(x,{filepath:r,inSidePanel:n});h.execute("docmanager:open",{path:`RTC:${r}`,factory:P})}}),i&&i.addItem({category:"Chat",command:M,args:{isPalette:!0}}),d&&d.add({command:M,category:"Chat",rank:1}),h.addCommand(R,{caption:"Mark chat as read",icon:s.readIcon,isEnabled:()=>null!==c.currentWidget&&c.currentWidget===e.shell.currentWidget&&c.currentWidget.model.unreadMessages.length>0,execute:async t=>{const a=e.shell.currentWidget;a&&a instanceof T&&Array.from(e.shell.widgets("main")).includes(a)?a.model.unreadMessages=[]:console.error(`The command '${R}' should be executed from the toolbar button only`)}}),c.currentChanged.connect((()=>{h.notifyCommandChanged(R)})),e.serviceManager.ready.then((()=>{const a=e.serviceManager.user.identity;h.addCommand(x,{label:"Open a chat",execute:async s=>{var i,d;const c=null!==(i=s.inSidePanel)&&void 0!==i&&i;let g=null!==(d=s.filepath)&&void 0!==d?d:null;if(null===g&&(g=(await o.InputDialog.getText({label:"File path",placeholder:"/path/to/the/chat/file",title:"Path of the chat"})).value),!g)return;let m=!0;if(await t.get(g,{content:!1}).catch((()=>{m=!1})),m)if(c&&n){e.shell.activateById(n.id);const s=await t.get(g),i=t.sharedModelFactory.createNew({path:s.path,format:s.format,contentType:v.contentType,collaborative:!0}),o=new C({user:a,sharedModel:i,widgetConfig:l,commands:e.commands});n.addChat(o,r.PathExt.basename(s.name,v.extensions[0]))}else h.execute("docmanager:open",{path:`RTC:${g}`,factory:P});else(0,o.showErrorMessage)("Error opening chat",`'${g}' is not a valid path`)}}),i&&i.addItem({category:"Chat",command:x})})).catch((e=>console.error("The command to open a chat is not initialized\n",e)))}},F,{id:"jupyterlab-collaborative-chat:chat-panel",description:"A chat extension for Jupyter",autoStart:!0,provides:k,requires:[n.ICollaborativeDrive,h.IRenderMimeRegistry],optional:[s.IAutocompletionRegistry,i.ILayoutRestorer,o.IThemeManager],activate:(e,t,a,n,i,o)=>{const{commands:r}=e,d=new N({commands:r,drive:t,rmRegistry:a,themeManager:o,autocompletionRegistry:n});d.id="JupyterCollaborationChat:sidepanel",d.title.icon=s.chatIcon,d.title.caption="Jupyter Chat",e.shell.add(d,"left",{rank:2e3}),i&&i.add(d,"jupyter-chat");const h=["create","delete","rename"];return e.serviceManager.events.stream.connect(((e,t)=>{if("https://events.jupyter.org/jupyter_server/contents_service/v1"===t.schema_id){const e=t.action;h.includes(e)&&d.updateChatNames()}})),r.addCommand(I,{label:"Move the chat to the side panel",caption:"Move the chat to the side panel",icon:g.launchIcon,isEnabled:()=>r.hasCommand(x),execute:async()=>{const t=e.shell.currentWidget;if(!(t&&t instanceof T&&Array.from(e.shell.widgets("main")).includes(t)))return void console.error(`The command '${I}' should be executed from the toolbar button only`);const a=t.context.path.split(":").pop();r.execute(x,{filepath:a,inSidePanel:!0}),t.dispose()}}),d}}]}}]);