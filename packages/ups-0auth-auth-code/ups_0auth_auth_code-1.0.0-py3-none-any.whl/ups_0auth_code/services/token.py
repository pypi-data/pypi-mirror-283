# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.generate_token_success_response import GenerateTokenSuccessResponse
from ..models.generate_token_request import GenerateTokenRequest


class TokenService(BaseService):

    @cast_models
    def generate_token(
        self, request_body: GenerateTokenRequest = None
    ) -> GenerateTokenSuccessResponse:
        """The Generate Token endpoint exchanges the authorization code received from the client application for an access token and a refresh token. The client uses the access token to make API requests on behalf of the user by including it in the authorization header. The access token will expire after a certain period and can be refreshed by using the /refresh endpoint.

        :param request_body: The request body., defaults to None
        :type request_body: GenerateTokenRequest, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: successful operation
        :rtype: GenerateTokenSuccessResponse
        """

        Validator(GenerateTokenRequest).is_optional().validate(request_body)

        serialized_request = (
            Serializer(
                f"{self.base_url}/security/v1/oauth/token", self.get_default_headers()
            )
            .serialize()
            .set_method("POST")
            .set_body(request_body, "application/x-www-form-urlencoded")
        )

        response = self.send_request(serialized_request)

        return GenerateTokenSuccessResponse._unmap(response)
