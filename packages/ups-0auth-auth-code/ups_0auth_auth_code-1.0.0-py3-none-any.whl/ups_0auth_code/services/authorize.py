# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models


class AuthorizeService(BaseService):

    @cast_models
    def authorize_client(
        self,
        client_id: str,
        redirect_uri: str,
        response_type: str,
        state: str = None,
        scope: str = None,
    ):
        """The Authorize Client endpoint initiates the OAuth Authorization Code flow by redirecting the user to UPS for logging-in and authorize the client application. To begin the authorization flow, the application constructs a URL using the application's client Id, the redirect URI, the scope of permissions requested, and a random string used for subsequent verification. A successful response redirects back to the client with an authorization code that can be exchanged for an access token.

        :param client_id: The public identifier for your application, obtained when you, the developer first registered the application.
        :type client_id: str
        :param redirect_uri: URL that tells the authorization server where to send the user back to after they approve the request.
        :type redirect_uri: str
        :param response_type: Valid Values: code
        :type response_type: str
        :param state: A random string generated by the application and included in the request to prevent CSRF attacks. The application checks that the same value is returned after the user authorizes the app., defaults to None
        :type state: str, optional
        :param scope: One or more space-separated strings indicating which permissions the application is requesting., defaults to None
        :type scope: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(client_id)
        Validator(str).validate(redirect_uri)
        Validator(str).validate(response_type)
        Validator(str).is_optional().validate(state)
        Validator(str).is_optional().validate(scope)

        serialized_request = (
            Serializer(
                f"{self.base_url}/security/v1/oauth/authorize",
                self.get_default_headers(),
            )
            .add_query("client_id", client_id)
            .add_query("redirect_uri", redirect_uri)
            .add_query("response_type", response_type)
            .add_query("state", state)
            .add_query("scope", scope)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response
