# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.refresh_token_success_response import RefreshTokenSuccessResponse
from ..models.refresh_token_request import RefreshTokenRequest


class RefreshService(BaseService):

    @cast_models
    def refresh_token(
        self, request_body: RefreshTokenRequest = None
    ) -> RefreshTokenSuccessResponse:
        """The /refresh endpoint is used to refresh an expired access token in order to continue accessing a UPS API on behalf of a user. The endpoint generates a new access/refresh token pair by exchanging a valid refresh token. A successful response returns new access and refresh tokens for ongoing API access without re-prompting the user.

        :param request_body: The request body., defaults to None
        :type request_body: RefreshTokenRequest, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: successful operation
        :rtype: RefreshTokenSuccessResponse
        """

        Validator(RefreshTokenRequest).is_optional().validate(request_body)

        serialized_request = (
            Serializer(
                f"{self.base_url}/security/v1/oauth/refresh", self.get_default_headers()
            )
            .serialize()
            .set_method("POST")
            .set_body(request_body, "application/x-www-form-urlencoded")
        )

        response = self.send_request(serialized_request)

        return RefreshTokenSuccessResponse._unmap(response)
