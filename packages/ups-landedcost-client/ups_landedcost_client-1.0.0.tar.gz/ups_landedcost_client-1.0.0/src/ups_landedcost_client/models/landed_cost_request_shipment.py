# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .request_shipment_items import RequestShipmentItems


@JsonMap(
    {
        "id_": "id",
        "import_country_code": "importCountryCode",
        "import_province": "importProvince",
        "ship_date": "shipDate",
        "export_country_code": "exportCountryCode",
        "trans_modes": "transModes",
        "transport_cost": "transportCost",
        "shipment_type": "shipmentType",
        "shipment_items": "shipmentItems",
    }
)
class LandedCostRequestShipment(BaseModel):
    """Every Landed Cost request must be based on a shipment.

    :param id_: Specifies the Shipment ID in the Landed Cost quote. It is an arbitrary string provided by the user of the API and will be  returned with the Landed Cost Quote to indicate which shipment the tariffs apply to. There are similar IDs associated with the Product and Order objects.
    :type id_: str
    :param import_country_code: Specifies the Import/Ship-To/Destination/Final country of the shipment. Please check country list in the Appendix.
    :type import_country_code: str
    :param import_province: Province/State is supported only for a few countries such as Mexico, Canada, etc. Please check Province list in the Appendix, defaults to None
    :type import_province: str, optional
    :param ship_date: Defaults to current date if not provided. Date format: YYYY-MM-DD., defaults to None
    :type ship_date: str, optional
    :param incoterms: Supported Incoterm Values: 1. CFR - Cost & Freight  2. CIF - Cost, Insurance & Freight  3. CIP - Carriage and Insurance Paid-To  4. CPT - Carriage Paid-To  5. DAP - Delivered At Place  6. DAT - Delivered At Terminal  7. DDP - Delivered Duty Paid  8. DPU - Delivered at Place Unloaded  9. EXW - Ex Works  10. FAS - Free Alongside Ship  11. FCA - Free Carrier  12. FOB - Free On Board (Default), defaults to None
    :type incoterms: str, optional
    :param export_country_code: Specifies the export/ship-from/origin country of the shipment. Please check country List in the Appendix section. **Note:** Export country code must be different from the import country code.
    :type export_country_code: str
    :param trans_modes: The modes of transportation (in upper case). Supported Values:  1. INT_AIR 2.  INT_OCEAN  3. INT_RAIL  4. INT_TRUCK  5. DOM_AIR  6. DOM_OCEAN  7. DOM_RAIL  8. DOM_TRUCK  Default value will vary based on the import country., defaults to None
    :type trans_modes: str, optional
    :param transport_cost: Specifies the Freight charge or transport costs, which are used for tariff calculations. Landed cost result might have some dependency on the freight charges in some countries. Therefore, freight amount should be always provided for accurate Landed Cost result.  Allowed values:  1. Any non-negative floating-point number.  2. Numeric value with optional decimal value., defaults to None
    :type transport_cost: float, optional
    :param shipment_type: Specifies the shipment type such as Gift, Document, Commercial (Sale), etc. Supported Shipment Types:  1. GIFT  2. COMMERCIAL  3. SALE  4. SAMPLE  5. REPAIR  6. RETURN  7. OTHER  Default value will vary and based on import country., defaults to None
    :type shipment_type: str, optional
    :param shipment_items: Array of shipment item objects (commodities), that are in a shipment.
    :type shipment_items: List[RequestShipmentItems]
    """

    def __init__(
        self,
        id_: str,
        import_country_code: str,
        export_country_code: str,
        shipment_items: List[RequestShipmentItems],
        import_province: str = None,
        ship_date: str = None,
        incoterms: str = None,
        trans_modes: str = None,
        transport_cost: float = None,
        shipment_type: str = None,
    ):
        self.id_ = id_
        self.import_country_code = import_country_code
        if import_province is not None:
            self.import_province = import_province
        if ship_date is not None:
            self.ship_date = ship_date
        if incoterms is not None:
            self.incoterms = incoterms
        self.export_country_code = export_country_code
        if trans_modes is not None:
            self.trans_modes = trans_modes
        if transport_cost is not None:
            self.transport_cost = transport_cost
        if shipment_type is not None:
            self.shipment_type = shipment_type
        self.shipment_items = self._define_list(shipment_items, RequestShipmentItems)
