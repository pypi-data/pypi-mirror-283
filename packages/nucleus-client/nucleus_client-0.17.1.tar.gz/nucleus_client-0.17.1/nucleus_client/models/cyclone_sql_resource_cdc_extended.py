# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CycloneSqlResourceCDCExtended(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'schema': 'str',
        'table': 'str',
        'table_is_field_source': 'bool'
    }

    attribute_map = {
        'schema': 'schema',
        'table': 'table',
        'table_is_field_source': 'table_is_field_source'
    }

    def __init__(self, schema=None, table=None, table_is_field_source=None):  # noqa: E501
        """CycloneSqlResourceCDCExtended - a model defined in OpenAPI"""  # noqa: E501

        self._schema = None
        self._table = None
        self._table_is_field_source = None
        self.discriminator = None

        if schema is not None:
            self.schema = schema
        if table is not None:
            self.table = table
        if table_is_field_source is not None:
            self.table_is_field_source = table_is_field_source

    @property
    def schema(self):
        """Gets the schema of this CycloneSqlResourceCDCExtended.  # noqa: E501


        :return: The schema of this CycloneSqlResourceCDCExtended.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this CycloneSqlResourceCDCExtended.


        :param schema: The schema of this CycloneSqlResourceCDCExtended.  # noqa: E501
        :type: str
        """

        self._schema = schema

    @property
    def table(self):
        """Gets the table of this CycloneSqlResourceCDCExtended.  # noqa: E501


        :return: The table of this CycloneSqlResourceCDCExtended.  # noqa: E501
        :rtype: str
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this CycloneSqlResourceCDCExtended.


        :param table: The table of this CycloneSqlResourceCDCExtended.  # noqa: E501
        :type: str
        """

        self._table = table

    @property
    def table_is_field_source(self):
        """Gets the table_is_field_source of this CycloneSqlResourceCDCExtended.  # noqa: E501


        :return: The table_is_field_source of this CycloneSqlResourceCDCExtended.  # noqa: E501
        :rtype: bool
        """
        return self._table_is_field_source

    @table_is_field_source.setter
    def table_is_field_source(self, table_is_field_source):
        """Sets the table_is_field_source of this CycloneSqlResourceCDCExtended.


        :param table_is_field_source: The table_is_field_source of this CycloneSqlResourceCDCExtended.  # noqa: E501
        :type: bool
        """

        self._table_is_field_source = table_is_field_source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CycloneSqlResourceCDCExtended):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
