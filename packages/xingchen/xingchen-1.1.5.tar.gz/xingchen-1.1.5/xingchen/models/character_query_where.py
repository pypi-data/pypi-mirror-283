# coding: utf-8

"""
    XingChen 开放接口定义

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class CharacterQueryWhere(BaseModel):
    """
    查询条件  # noqa: E501
    """
    character_name: Optional[StrictStr] = Field(None, alias="characterName", description="角色名称")
    scope: Optional[StrictStr] = Field(None, description="查询范围：my:我创建的角色, public: 平台开放的角色, pre_configured: 预制角色")
    role_types: Optional[conlist(StrictStr)] = Field(None, alias="roleTypes", description="角色类型")
    __properties = ["characterName", "scope", "roleTypes"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CharacterQueryWhere:
        """Create an instance of CharacterQueryWhere from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CharacterQueryWhere:
        """Create an instance of CharacterQueryWhere from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CharacterQueryWhere.parse_obj(obj)

        _obj = CharacterQueryWhere.parse_obj({
            "character_name": obj.get("characterName"),
            "scope": obj.get("scope"),
            "role_types": obj.get("roleTypes")
        })
        return _obj


