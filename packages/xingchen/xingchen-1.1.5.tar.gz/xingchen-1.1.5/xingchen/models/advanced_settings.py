# coding: utf-8

"""
    XingChen 开放接口定义

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist


class AdvancedSettings(BaseModel):
    enable_web_search: Optional[StrictBool] = Field(None, alias="enableWebSearch")
    search_enhanced_keyword: Optional[StrictStr] = Field(None, alias="searchEnhancedKeyword")
    enable_character_kb_search: Optional[StrictBool] = Field(None, alias="enableCharacterKbSearch")
    knowledge_bases: Optional[conlist(StrictStr)] = Field(None, alias="knowledgeBases", description="知识库")
    enable_long_term_memory: Optional[StrictBool] = Field(None, alias="enableLongTermMemory")
    enable_debug: Optional[StrictBool] = Field(None, alias="enableDebug")
    __properties = ["enableWebSearch", "searchEnhancedKeyword", "enableCharacterKbSearch", "enableLongTermMemory", "enableDebug"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AdvancedSettings:
        """Create an instance of AdvancedSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AdvancedSettings:
        """Create an instance of AdvancedSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AdvancedSettings.parse_obj(obj)

        _obj = AdvancedSettings.parse_obj({
            "enable_web_search": obj.get("enableWebSearch"),
            "search_enhanced_keyword": obj.get("searchEnhancedKeyword"),
            "enable_character_kb_search": obj.get("enableCharacterKbSearch"),
            "knowledge_bases":obj.get("knowledgeBases"),
            "enable_long_term_memory": obj.get("enableLongTermMemory"),
            "enable_debug": obj.get("enableDebug")
        })
        return _obj


