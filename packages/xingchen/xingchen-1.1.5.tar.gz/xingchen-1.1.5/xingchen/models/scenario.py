# coding: utf-8

"""
    XingChen 开放接口定义

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr, Field, StrictBool

class Scenario(BaseModel):
    """
    Scenario
    """
    description: Optional[StrictStr] = None
    safety_prompt: Optional[StrictStr] = Field(None, alias="safetyPrompt", description="命中安全风险后，给大模型的提示信息")
    is_real_time: Optional[StrictBool] = Field(None, alias="isRealTime", description="是否为实时场景")
    __properties = ["description", "safetyPrompt", "isRealTime"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Scenario:
        """Create an instance of Scenario from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Scenario:
        """Create an instance of Scenario from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Scenario.parse_obj(obj)

        _obj = Scenario.parse_obj({
            "description": obj.get("description"),
            "is_real_time": obj.get("isRealTime")
        })
        return _obj


