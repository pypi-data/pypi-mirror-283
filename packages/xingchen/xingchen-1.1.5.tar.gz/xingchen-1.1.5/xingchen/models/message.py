# coding: utf-8

"""
    XingChen 开放接口定义

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from xingchen.models.meta import Meta
from xingchen.models.function_call import FunctionCall


class Message(BaseModel):
    """
    Message
    """
    name: Optional[StrictStr] = None
    role: Optional[StrictStr] = None
    content: Optional[StrictStr] = None
    finish_reason: Optional[StrictStr] = Field(None, alias="finishReason")
    meta: Optional[Meta] = None
    function_call: Optional[FunctionCall] = Field(None, alias="functionCall", description="函数调用")
    __properties = ["name", "role", "content", "finishReason", "meta", "functionCall"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Message:
        """Create an instance of Message from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of meta
        if self.meta:
            _dict['meta'] = self.meta.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Message:
        """Create an instance of Message from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Message.parse_obj(obj)

        _obj = Message.parse_obj({
            "name": obj.get("name"),
            "role": obj.get("role"),
            "content": obj.get("content"),
            "finish_reason": obj.get("finishReason"),
            "meta": Meta.from_dict(obj.get("meta")) if obj.get("meta") is not None else None
        })
        return _obj


