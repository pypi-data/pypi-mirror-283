# coding: utf-8

"""
    XingChen 开放接口定义

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from xingchen.models.chat_req_params import ChatReqParams  # noqa: E501

class TestChatReqParams(unittest.TestCase):
    """ChatReqParams unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ChatReqParams:
        """Test ChatReqParams
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ChatReqParams`
        """
        model = ChatReqParams()  # noqa: E501
        if include_optional:
            return ChatReqParams(
                bot_profile = xingchen.models.character_key.CharacterKey(
                    character_id = '', 
                    version = 56, ),
                messages = [
                    xingchen.models.message.Message(
                        name = '', 
                        role = '', 
                        content = '', 
                        finish_reason = '', 
                        meta = xingchen.models.meta.Meta(
                            has_risk = True, 
                            safety_std_answer = '', ), )
                    ],
                advanced_settings = xingchen.models.advanced_settings.AdvancedSettings(
                    enable_web_search = True, 
                    search_enhanced_keyword = '', 
                    enable_character_kb_search = True, 
                    enable_long_term_memory = True, 
                    enable_debug = True, ),
                model_parameters = xingchen.models.model_parameters.ModelParameters(
                    model_name = '', 
                    top_p = 1.337, 
                    top_k = 56, 
                    seed = 56, 
                    max_length = 56, 
                    temperature = 1.337, ),
                user_profile = xingchen.models.user_profile.UserProfile(
                    user_id = '', 
                    user_name = '', 
                    basic_info = '', ),
                scenario = xingchen.models.scenario.Scenario(
                    description = '', ),
                streaming = True,
                context = xingchen.models.context.Context(
                    chat_room_id = 56, 
                    session_id = '', 
                    chat_id = '', 
                    message_id = '', 
                    reply_message_id = '', 
                    enable_data_inspection = True, 
                    is_save = True, 
                    request_id = '', 
                    model_request_id = '', 
                    character_pk = 56, 
                    model_name = '', ),
                source = ''
            )
        else:
            return ChatReqParams(
                bot_profile = xingchen.models.character_key.CharacterKey(
                    character_id = '', 
                    version = 56, ),
                messages = [
                    xingchen.models.message.Message(
                        name = '', 
                        role = '', 
                        content = '', 
                        finish_reason = '', 
                        meta = xingchen.models.meta.Meta(
                            has_risk = True, 
                            safety_std_answer = '', ), )
                    ],
        )
        """

    def testChatReqParams(self):
        """Test ChatReqParams"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
