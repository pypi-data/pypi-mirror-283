# coding: utf-8

"""
    XingChen 开放接口定义

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class ChatHistoryQueryWhere(BaseModel):
    """
    查询条件  # noqa: E501
    """
    character_id: Optional[StrictStr] = Field(None, alias="characterId", description="角色ID")
    session_id: Optional[StrictStr] = Field(None, alias="sessionId", description="会话ID")
    start_time: Optional[datetime] = Field(None, alias="startTime", description="开始时间")
    end_time: Optional[datetime] = Field(None, alias="endTime", description="结束时间")
    message_ids: Optional[conlist(StrictStr)] = Field(None, alias="messageIds", description="消息ID列表")
    biz_user_id: Optional[StrictStr] = Field(None, alias="bizUserId", description="业务系统对话用户ID")
    __properties = ["characterId", "sessionId", "startTime", "endTime", "messageIds", "bizUserId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ChatHistoryQueryWhere:
        """Create an instance of ChatHistoryQueryWhere from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ChatHistoryQueryWhere:
        """Create an instance of ChatHistoryQueryWhere from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ChatHistoryQueryWhere.parse_obj(obj)

        _obj = ChatHistoryQueryWhere.parse_obj({
            "character_id": obj.get("characterId"),
            "session_id": obj.get("sessionId"),
            "start_time": obj.get("startTime"),
            "end_time": obj.get("endTime"),
            "message_ids": obj.get("messageIds"),
            "biz_user_id": obj.get("bizUserId")
        })
        return _obj


