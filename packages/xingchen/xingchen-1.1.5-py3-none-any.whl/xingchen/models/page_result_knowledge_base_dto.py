# coding: utf-8

"""
    XingChen 开放接口定义

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictInt, conlist

from xingchen.models.knowledge_base_dto import KnowledgeBaseDTO


class PageResultKnowledgeBaseDTO(BaseModel):
    """
    PageResultKnowledgeBaseDTO
    """
    list: Optional[conlist(KnowledgeBaseDTO)] = None
    page: Optional[StrictInt] = None
    page_size: Optional[StrictInt] = Field(None, alias="pageSize")
    total: Optional[StrictInt] = None
    page_offset_value: Optional[StrictInt] = Field(None, alias="pageOffsetValue")
    __properties = ["list", "page", "pageSize", "total", "pageOffsetValue"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PageResultKnowledgeBaseDTO:
        """Create an instance of PageResultKnowledgeBaseDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in list (list)
        _items = []
        if self.list:
            for _item in self.list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['list'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PageResultKnowledgeBaseDTO:
        """Create an instance of PageResultKnowledgeBaseDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PageResultKnowledgeBaseDTO.parse_obj(obj)

        _obj = PageResultKnowledgeBaseDTO.parse_obj({
            "list": [KnowledgeBaseDTO.from_dict(_item) for _item in obj.get("list")] if obj.get(
                "list") is not None else None,
            "page": obj.get("page"),
            "page_size": obj.get("pageSize"),
            "total": obj.get("total"),
            "page_offset_value": obj.get("pageOffsetValue")
        })
        return _obj
