# coding: utf-8

"""
    XingChen 开放接口定义

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Optional

from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist

from xingchen.models.character_advanced_config import CharacterAdvancedConfig
from xingchen.models.character_permission_config import CharacterPermissionConfig
from xingchen.models.file_info_vo import FileInfoVO


class CharacterDTO(BaseModel):
    """
    角色信息  # noqa: E501
    """
    name: Optional[StrictStr] = Field(None, description="角色名称(最多20个字符)")
    avatar: Optional[FileInfoVO] = None
    introduction: Optional[StrictStr] = Field(None, description="角色描述")
    basic_information: Optional[StrictStr] = Field(None, alias="basicInformation", description="基本信息")
    opening_line: Optional[StrictStr] = Field(None, alias="openingLine", description="开场白")
    traits: Optional[StrictStr] = Field(None, description="角色特点")
    chat_example: Optional[StrictStr] = Field(None, alias="chatExample", description="聊天示例")
    type: Optional[StrictStr] = Field(None, description="角色类型，virtual:虚拟角色，reproduction:已知角色复刻")
    chat_objective: Optional[StrictStr] = Field(None, alias="chatObjective", description="对话目标")
    advanced_config: Optional[CharacterAdvancedConfig] = Field(None, alias="advancedConfig")
    character_id: Optional[StrictStr] = Field(None, alias="characterId", description="角色唯一ID")
    version: Optional[StrictInt] = Field(None, description="角色版本")
    major_version: Optional[StrictInt] = Field(None, alias="majorVersion", description="主版本")
    gmt_create: Optional[datetime] = Field(None, alias="gmtCreate", description="创建时间")
    gmt_modified: Optional[datetime] = Field(None, alias="gmtModified", description="修改时间")
    user_id: Optional[StrictStr] = Field(None, alias="userId", description="角色创建用户ID")
    modified_by: Optional[StrictStr] = Field(None, alias="modifiedBy", description="角色最后修改人ID")
    tags: Optional[conlist(StrictStr)] = Field(None, description="角色标签")
    bubbles: Optional[conlist(StrictStr)] = Field(None, description="角色气泡")
    background_img_url: Optional[StrictStr] = Field(None, alias="backgroundImgUrl", description="背景图片")
    perm_config: Optional[CharacterPermissionConfig] = Field(None, alias="permConfig")
    versions: Optional[conlist(StrictInt)] = Field(None, description="版本列表")
    manageable: Optional[StrictBool] = Field(None, description="当前用户是否可管理")
    creator: Optional[StrictStr] = Field(None, description="创建者")
    is_pre_configured: Optional[StrictBool] = Field(None, alias="isPreConfigured", description="是否官方创建")
    role_types: Optional[conlist(StrictStr)] = Field(None, alias="roleTypes", description="角色类型")
    audit_status: Optional[StrictStr] = Field(None, alias="auditStatus", description="审核状态")
    config_status: Optional[StrictStr] = Field(None, alias="configStatus", description="上下架状态")
    __properties = ["name", "avatar", "introduction", "basicInformation", "openingLine", "traits", "chatExample",
                    "type", "chatObjective", "advancedConfig", "characterId", "version", "majorVersion", "gmtCreate",
                    "gmtModified", "userId", "modifiedBy", "tags", "bubbles", "backgroundImgUrl", "permConfig",
                    "versions", "manageable", "creator", "isPreConfigured", "roleTypes", "auditStatus", "configStatus"
                    ]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CharacterDTO:
        """Create an instance of CharacterDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of avatar
        if self.avatar:
            _dict['avatar'] = self.avatar.to_dict()
        # override the default output from pydantic by calling `to_dict()` of advanced_config
        if self.advanced_config:
            _dict['advancedConfig'] = self.advanced_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of perm_config
        if self.perm_config:
            _dict['permConfig'] = self.perm_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CharacterDTO:
        """Create an instance of CharacterDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CharacterDTO.parse_obj(obj)

        _obj = CharacterDTO.parse_obj({
            "name": obj.get("name"),
            "avatar": FileInfoVO.from_dict(obj.get("avatar")) if obj.get("avatar") is not None else None,
            "introduction": obj.get("introduction"),
            "basic_information": obj.get("basicInformation"),
            "opening_line": obj.get("openingLine"),
            "traits": obj.get("traits"),
            "chat_example": obj.get("chatExample"),
            "type": obj.get("type"),
            "chat_objective": obj.get("chatObjective"),
            "advanced_config": CharacterAdvancedConfig.from_dict(obj.get("advancedConfig")) if obj.get(
                "advancedConfig") is not None else None,
            "character_id": obj.get("characterId"),
            "version": obj.get("version"),
            "major_version": obj.get("majorVersion"),
            "gmt_create": obj.get("gmtCreate"),
            "gmt_modified": obj.get("gmtModified"),
            "user_id": obj.get("userId"),
            "modified_by": obj.get("modifiedBy"),
            "tags": obj.get("tags"),
            "bubbles": obj.get("bubbles"),
            "background_img_url": obj.get("backgroundImgUrl"),
            "perm_config": CharacterPermissionConfig.from_dict(obj.get("permConfig")) if obj.get(
                "permConfig") is not None else None,
            "versions": obj.get("versions"),
            "manageable": obj.get("manageable"),
            "creator": obj.get("creator"),
            "is_pre_configured": obj.get("isPreConfigured"),
            "role_types": obj.get("roleTypes"),
            "audit_status": obj.get("auditStatus"),
            "config_status": obj.get("configStatus")
        })
        return _obj
