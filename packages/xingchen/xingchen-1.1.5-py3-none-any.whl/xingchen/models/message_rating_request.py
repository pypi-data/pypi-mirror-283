# coding: utf-8

"""
    XingChen 开放接口定义

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, conint
from xingchen.models.gateway_issued_params import GatewayIssuedParams

class MessageRatingRequest(BaseModel):
    """
    MessageRatingRequest
    """
    message_id: StrictStr = Field(..., alias="messageId", description="待评分消息ID")
    rating: conint(strict=True, le=5, ge=-1) = Field(..., description="评分")
    __properties = ["messageId", "rating"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MessageRatingRequest:
        """Create an instance of MessageRatingRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MessageRatingRequest:
        """Create an instance of MessageRatingRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MessageRatingRequest.parse_obj(obj)

        _obj = MessageRatingRequest.parse_obj({
            "message_id": obj.get("messageId"),
            "rating": obj.get("rating")
        })
        return _obj


