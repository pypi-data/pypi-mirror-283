# coding: utf-8

"""
    XingChen 开放接口定义

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class Context(BaseModel):
    """
    Context
    """
    chat_room_id: Optional[StrictInt] = Field(None, alias="chatRoomId")
    session_id: Optional[StrictStr] = Field(None, alias="sessionId")
    chat_id: Optional[StrictStr] = Field(None, alias="chatId")
    message_id: Optional[StrictStr] = Field(None, alias="messageId") # 模型回复消息ID，请使用 answer_id
    reply_message_id: Optional[StrictStr] = Field(None, alias="replyMessageId") # 用户提问消息ID，请使用 query_id
    enable_data_inspection: Optional[StrictBool] = Field(None, alias="enableDataInspection")
    answer_id: Optional[StrictStr] = Field(None, alias="answerId")
    query_id: Optional[StrictStr] = Field(None, alias="queryId")
    is_save: Optional[StrictBool] = Field(None, alias="isSave")
    request_id: Optional[StrictStr] = Field(None, alias="requestId")
    model_request_id: Optional[StrictStr] = Field(None, alias="modelRequestId")
    character_pk: Optional[StrictInt] = Field(None, alias="characterPk")
    model_name: Optional[StrictStr] = Field(None, alias="modelName")
    __properties = ["chatRoomId", "sessionId", "chatId", "messageId", "replyMessageId", "answerId", "queryId", "enableDataInspection", "isSave", "requestId", "modelRequestId", "characterPk", "modelName"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Context:
        """Create an instance of Context from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Context:
        """Create an instance of Context from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Context.parse_obj(obj)

        _obj = Context.parse_obj({
            "chat_room_id": obj.get("chatRoomId"),
            "session_id": obj.get("sessionId"),
            "chat_id": obj.get("chatId"),
            "message_id": obj.get("messageId"),
            "reply_message_id": obj.get("replyMessageId"),
            "answer_id": obj.get("answerId"),
            "query_id": obj.get("queryId"),
            "enable_data_inspection": obj.get("enableDataInspection"),
            "is_save": obj.get("isSave"),
            "request_id": obj.get("requestId"),
            "model_request_id": obj.get("modelRequestId"),
            "character_pk": obj.get("characterPk"),
            "model_name": obj.get("modelName")
        })
        return _obj


