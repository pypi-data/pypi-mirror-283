# coding: utf-8

"""
    XingChen 开放接口定义

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class ChatRoomUserDTO(BaseModel):
    """
    聊天室用户  # noqa: E501
    """
    user_id: Optional[StrictStr] = Field(None, alias="userId", description="用户ID，若为普通用户，则为userId,;若为角色，则为characterId")
    biz_user_id: Optional[StrictStr] = Field(None, alias="bizUserId", description="若为ISV用户，则为ISV用户ID；若为角色，则为空")
    user_name: Optional[StrictStr] = Field(None, alias="userName", description="用户名称，若为普通用户，则为用户名称；若为角色，则为 characterName")
    user_type: Optional[StrictStr] = Field(None, alias="userType", description="用户类型，可以是 user（用户）或character（角色）")
    __properties = ["userId", "bizUserId", "userName", "userType"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ChatRoomUserDTO:
        """Create an instance of ChatRoomUserDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ChatRoomUserDTO:
        """Create an instance of ChatRoomUserDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ChatRoomUserDTO.parse_obj(obj)

        _obj = ChatRoomUserDTO.parse_obj({
            "user_id": obj.get("userId"),
            "biz_user_id": obj.get("bizUserId"),
            "user_name": obj.get("userName"),
            "user_type": obj.get("userType")
        })
        return _obj


