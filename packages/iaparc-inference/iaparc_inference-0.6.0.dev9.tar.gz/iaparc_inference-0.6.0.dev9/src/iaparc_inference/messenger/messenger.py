
# python wrapper for package iap-messaging within overall package messenger
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy build -output=out -vm=python3.12 ./

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _messenger
from . import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from messenger import messenger
# and then refer to everything using messenger. prefix
# packages imported by this package listed below:




# ---- Types ---

# Python type for slice []messenger.DataMsg
class Slice_messenger_DataMsg(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_messenger.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_messenger.IncRef(self.handle)
		else:
			self.handle = _messenger.Slice_messenger_DataMsg_CTor()
			_messenger.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_messenger_DataMsg.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_messenger.DecRef(self.handle)
	def __str__(self):
		s = 'messenger.Slice_messenger_DataMsg len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'messenger.Slice_messenger_DataMsg([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _messenger.Slice_messenger_DataMsg_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _messenger.Slice_messenger_DataMsg_len(self.handle)
				return Slice_messenger_DataMsg(handle=_messenger.Slice_messenger_DataMsg_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return DataMsg(handle=_messenger.Slice_messenger_DataMsg_elem(self.handle, key))
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_messenger.Slice_messenger_DataMsg_set(self.handle, idx, value.handle)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_messenger_DataMsg.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = DataMsg(handle=_messenger.Slice_messenger_DataMsg_elem(self.handle, self.index))
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_messenger.Slice_messenger_DataMsg_append(self.handle, value.handle)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []agent.DataMsg
class Slice_agent_DataMsg(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_messenger.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_messenger.IncRef(self.handle)
		else:
			self.handle = _messenger.Slice_agent_DataMsg_CTor()
			_messenger.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_agent_DataMsg.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_messenger.DecRef(self.handle)
	def __str__(self):
		s = 'messenger.Slice_agent_DataMsg len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'messenger.Slice_agent_DataMsg([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _messenger.Slice_agent_DataMsg_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _messenger.Slice_agent_DataMsg_len(self.handle)
				return Slice_agent_DataMsg(handle=_messenger.Slice_agent_DataMsg_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return go.agent_DataMsg(handle=_messenger.Slice_agent_DataMsg_elem(self.handle, key))
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_messenger.Slice_agent_DataMsg_set(self.handle, idx, value.handle)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_agent_DataMsg.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = go.agent_DataMsg(handle=_messenger.Slice_agent_DataMsg_elem(self.handle, self.index))
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_messenger.Slice_agent_DataMsg_append(self.handle, value.handle)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for map map[string]string
class Map_string_string(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_messenger.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_messenger.IncRef(self.handle)
		else:
			self.handle = _messenger.Map_string_string_CTor()
			_messenger.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Mapping):
					raise TypeError('Map_string_string.__init__ takes a mapping as argument')
				for k, v in args[0].items():
					_messenger.Map_string_string_set(self.handle, k, v)
	def __del__(self):
		_messenger.DecRef(self.handle)
	def __str__(self):
		s = 'messenger.Map_string_string len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' {'
		if len(self) < 120:
			for k, v in self.items():
				s += str(k) + '=' + str(v) + ', '
		return s + '}'
	def __repr__(self):
		s = 'messenger.Map_string_string({'
		for k, v in self.items():
			s += str(k) + '=' + str(v) + ', '
		return s + '})'
	def __len__(self):
		return _messenger.Map_string_string_len(self.handle)
	def __getitem__(self, key):
		return _messenger.Map_string_string_elem(self.handle, key)
	def __setitem__(self, key, value):
		_messenger.Map_string_string_set(self.handle, key, value)
	def __delitem__(self, key):
		return _messenger.Map_string_string_delete(self.handle, key)
	def keys(self):
		return go.Slice_string(handle=_messenger.Map_string_string_keys(self.handle))
	def values(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append(self[k])
		return vls
	def items(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append((k, self[k]))
		return vls
	def __iter__(self):
		return iter(self.items())
	def __contains__(self, key):
		return _messenger.Map_string_string_contains(self.handle, key)


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---


# ---- Global Variables: can only use functions to access ---
def Messenger():
	"""
	Messenger Gets Go Variable: messenger.Messenger
	
	"""
	return go.agent_Dispatcher(handle=_messenger.messenger_Messenger())

def Set_Messenger(value):
	"""
	Set_Messenger Sets Go Variable: messenger.Messenger
	
	"""
	if isinstance(value, go.GoClass):
		_messenger.messenger_Set_Messenger(value.handle)
	else:
		_messenger.messenger_Set_Messenger(value)



# ---- Interfaces ---


# ---- Structs ---

# Python type for struct messenger.DataMsg
class DataMsg(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_messenger.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_messenger.IncRef(self.handle)
		else:
			self.handle = _messenger.messenger_DataMsg_CTor()
			_messenger.IncRef(self.handle)
			if  0 < len(args):
				self.InputName = args[0]
			if "InputName" in kwargs:
				self.InputName = kwargs["InputName"]
			if  1 < len(args):
				self.Uid = args[1]
			if "Uid" in kwargs:
				self.Uid = kwargs["Uid"]
			if  2 < len(args):
				self.Source = args[2]
			if "Source" in kwargs:
				self.Source = kwargs["Source"]
			if  3 < len(args):
				self.Data = args[3]
			if "Data" in kwargs:
				self.Data = kwargs["Data"]
			if  4 < len(args):
				self.Params = args[4]
			if "Params" in kwargs:
				self.Params = kwargs["Params"]
			if  5 < len(args):
				self.ContentType = args[5]
			if "ContentType" in kwargs:
				self.ContentType = kwargs["ContentType"]
	def __del__(self):
		_messenger.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'messenger.DataMsg{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'messenger.DataMsg ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def InputName(self):
		return _messenger.messenger_DataMsg_InputName_Get(self.handle)
	@InputName.setter
	def InputName(self, value):
		if isinstance(value, go.GoClass):
			_messenger.messenger_DataMsg_InputName_Set(self.handle, value.handle)
		else:
			_messenger.messenger_DataMsg_InputName_Set(self.handle, value)
	@property
	def Uid(self):
		return _messenger.messenger_DataMsg_Uid_Get(self.handle)
	@Uid.setter
	def Uid(self, value):
		if isinstance(value, go.GoClass):
			_messenger.messenger_DataMsg_Uid_Set(self.handle, value.handle)
		else:
			_messenger.messenger_DataMsg_Uid_Set(self.handle, value)
	@property
	def Source(self):
		return _messenger.messenger_DataMsg_Source_Get(self.handle)
	@Source.setter
	def Source(self, value):
		if isinstance(value, go.GoClass):
			_messenger.messenger_DataMsg_Source_Set(self.handle, value.handle)
		else:
			_messenger.messenger_DataMsg_Source_Set(self.handle, value)
	@property
	def Data(self):
		return go.Slice_byte(handle=_messenger.messenger_DataMsg_Data_Get(self.handle))
	@Data.setter
	def Data(self, value):
		if isinstance(value, go.GoClass):
			_messenger.messenger_DataMsg_Data_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))
	@property
	def Params(self):
		return Map_string_string(handle=_messenger.messenger_DataMsg_Params_Get(self.handle))
	@Params.setter
	def Params(self, value):
		if isinstance(value, go.GoClass):
			_messenger.messenger_DataMsg_Params_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))
	@property
	def ContentType(self):
		return _messenger.messenger_DataMsg_ContentType_Get(self.handle)
	@ContentType.setter
	def ContentType(self, value):
		if isinstance(value, go.GoClass):
			_messenger.messenger_DataMsg_ContentType_Set(self.handle, value.handle)
		else:
			_messenger.messenger_DataMsg_ContentType_Set(self.handle, value)


# ---- Slices ---

# Python type for slice messenger.StringArray
class StringArray(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_messenger.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_messenger.IncRef(self.handle)
		else:
			self.handle = _messenger.messenger_StringArray_CTor()
			_messenger.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('messenger_StringArray.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_messenger.DecRef(self.handle)
	def __str__(self):
		s = 'messenger.messenger_StringArray len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'messenger.messenger_StringArray([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _messenger.messenger_StringArray_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _messenger.messenger_StringArray_len(self.handle)
				return StringArray(handle=_messenger.messenger_StringArray_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _messenger.messenger_StringArray_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_messenger.messenger_StringArray_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('messenger_StringArray.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _messenger.messenger_StringArray_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_messenger.messenger_StringArray_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]


# ---- Maps ---


# ---- Constructors ---
def GetTest():
	"""GetTest() object"""
	return DataMsg(handle=_messenger.messenger_GetTest())


# ---- Functions ---
def MessengerSendReply(dest, uid, source, data, parameters, content_type, err_str):
	"""MessengerSendReply(str dest, str uid, str source, []int data, object parameters, str content_type, str err_str) str"""
	return _messenger.messenger_MessengerSendReply(dest, uid, source, data.handle, parameters.handle, content_type, err_str)
def MessengerGetMsgs(timeout):
	"""MessengerGetMsgs(int timeout) []object"""
	return Slice_messenger_DataMsg(handle=_messenger.messenger_MessengerGetMsgs(timeout))
def MessengerInit(outputs, inputs, nats_url, queue, batch):
	"""MessengerInit([]str outputs, []str inputs, str nats_url, str queue, int batch) str"""
	return _messenger.messenger_MessengerInit(outputs.handle, inputs.handle, nats_url, queue, batch)


