# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.itineraryrefresh_create_request import ItineraryrefreshCreateRequest


class FlightsLivePricesService(BaseService):

    @cast_models
    def search_create(self, request_body: any = None, x_api_key: str = None):
        """/search/create

        :param request_body: The request body., defaults to None
        :type request_body: any, optional
        :param x_api_key: x_api_key, defaults to None
        :type x_api_key: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).is_optional().validate(x_api_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/apiservices/v3/flights/live/search/create",
                self.get_default_headers(),
            )
            .add_header("x-api-key", x_api_key)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def search_poll(self, session_token: str, x_api_key: str = None):
        """/search/poll

        :param session_token: session_token
        :type session_token: str
        :param x_api_key: x_api_key, defaults to None
        :type x_api_key: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(session_token)
        Validator(str).is_optional().validate(x_api_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/apiservices/v3/flights/live/search/poll/{{sessionToken}}",
                self.get_default_headers(),
            )
            .add_header("x-api-key", x_api_key)
            .add_path("sessionToken", session_token)
            .serialize()
            .set_method("POST")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def itineraryrefresh_create(
        self,
        session_token: str,
        request_body: ItineraryrefreshCreateRequest = None,
        x_api_key: str = None,
    ):
        """/itineraryrefresh/create

        :param request_body: The request body., defaults to None
        :type request_body: ItineraryrefreshCreateRequest, optional
        :param session_token: session_token
        :type session_token: str
        :param x_api_key: x_api_key, defaults to None
        :type x_api_key: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(ItineraryrefreshCreateRequest).is_optional().validate(request_body)
        Validator(str).validate(session_token)
        Validator(str).is_optional().validate(x_api_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/apiservices/v3/flights/live/itineraryrefresh/create/{{sessionToken}}",
                self.get_default_headers(),
            )
            .add_header("x-api-key", x_api_key)
            .add_path("sessionToken", session_token)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def itineraryrefresh_poll(self, refresh_session_token: str, x_api_key: str = None):
        """itineraryrefresh/poll

        :param refresh_session_token: refresh_session_token
        :type refresh_session_token: str
        :param x_api_key: x_api_key, defaults to None
        :type x_api_key: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(refresh_session_token)
        Validator(str).is_optional().validate(x_api_key)

        serialized_request = (
            Serializer(
                f"{self.base_url}/apiservices/v3/flights/live/itineraryrefresh/poll/{{refreshSessionToken}}",
                self.get_default_headers(),
            )
            .add_header("x-api-key", x_api_key)
            .add_path("refreshSessionToken", refresh_session_token)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response
