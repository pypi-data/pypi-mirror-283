[tool.poetry]
name = "gigachain-experimental"
version = "0.0.62"
description = "Building applications with LLMs through composability"
authors = []
license = "MIT"
readme = "README.md"
repository = "https://github.com/ai-forever/gigachain"
packages = [
    {include = "langchain_experimental"}
]

[tool.poetry.dependencies]
python = ">=3.8.1,<4.0"
gigachain-core = "^0.2.10"
gigachain-community = "^0.2.6"

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
ruff = "^0.1.5"

[tool.poetry.group.typing]
optional = true

[tool.poetry.group.typing.dependencies]
mypy = "^0.991"
types-pyyaml = "^6.0.12.2"
types-requests = "^2.28.11.5"
gigachain = { path = "../langchain", develop = true }
gigachain-core = { path = "../core", develop = true }
gigachain-community = { path = "../community", develop = true }

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
jupyter = "^1.0.0"
setuptools = "^67.6.1"
gigachain = { path = "../langchain", develop = true }
gigachain-core = { path = "../core", develop = true }
gigachain-community = { path = "../community", develop = true }

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
# The only dependencies that should be added are
# dependencies used for running tests (e.g., pytest, freezegun, response).
# Any dependencies that do not meet that criteria will be removed.
pytest = "^7.3.0"
pytest-asyncio = "^0.20.3"
gigachain = { path = "../langchain", develop = true }
gigachain-core = { path = "../core", develop = true }
gigachain-community = { path = "../community", develop = true }
gigachain-text-splitters = { path = "../text-splitters", develop = true }
gigachat = "^0.1.31"

# Support Python 3.8 and 3.12+.
# Can be removed once the numpy version is fixed in langchain-community.
numpy = [
  { version = "^1.24.0", python = "<3.12" },
  { version = "^1.26.0", python = ">=3.12" },
]


[tool.poetry.group.test_integration]
optional = true

[tool.poetry.group.test_integration.dependencies]
gigachain = { path = "../langchain", develop = true }
gigachain-core = { path = "../core", develop = true }
gigachain-community = { path = "../community", develop = true }
gigachain-openai = { path = "../partners/openai", develop = true }

[tool.ruff.lint]
select = [
  "E",    # pycodestyle
  "F",    # pyflakes
  "I",    # isort
  "T201", # print
]

[tool.mypy]
ignore_missing_imports = "True"
disallow_untyped_defs = "True"
exclude = ["notebooks", "examples", "example_data"]

[tool.coverage.run]
omit = ["tests/*"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
# --strict-markers will raise errors on unknown marks.
# https://docs.pytest.org/en/7.1.x/how-to/mark.html#raising-errors-on-unknown-marks
#
# https://docs.pytest.org/en/7.1.x/reference/reference.html
# --strict-config       any warnings encountered while parsing the `pytest`
#                       section of the configuration file raise errors.
#
# https://github.com/tophat/syrupy
# --snapshot-warn-unused    Prints a warning on unused snapshots rather than fail the test suite.
addopts = "--strict-markers --strict-config --durations=5"
# Registering custom markers.
# https://docs.pytest.org/en/7.1.x/example/markers.html#registering-markers
markers = [
  "requires: mark tests as requiring a specific library",
  "asyncio: mark tests as requiring asyncio",
  "compile: mark placeholder test used to compile integration tests without running them",
]
asyncio_mode = "auto"
