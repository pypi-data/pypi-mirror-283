Metadata-Version: 2.1
Name: anarchygraph
Version: 0.1.7
Summary: A decentralized graph system to simulate agents in an artificial reality.
Home-page: https://pypi.org/project/anarchygraph/
Author: Chris Mangum
Author-email: csmangum@gmail.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: ipycytoscape
Requires-Dist: hypothesis
Requires-Dist: pytest
Requires-Dist: pyperf

![AnarchyGraph Logo](docs/img/anarchy_graph_logo.png)
![Project Status](https://img.shields.io/badge/status-in%20development-orange)
# Rules of AnarchyGraph

1. Be **independent**
2. Be **simple**
3. Be **optimized**

## Be Independent

A node is independent when it can operate and interact autonomously of other nodes.

In AnarchyGraph, each node is self-contained, having all it needs to interact with other nodes.

This independence promotes the self-organizing and self-sustaining nature of the graph, without centralized control.

## Be Simple

A node is simple when it performs its purpose efficiently and effectively.

This means the code and design should be optimized for speed and simplicity, making it easy to understand and manage any operational complexity within the graph.

While the node itself should remain straightforward, the data it handles can be complex.

## Be Optimized

A node is optimized when it maximizes performance and minimizes resource usage.

In AnarchyGraph, optimization goals:

- Efficient algorithms to handle node interactions and data processing.
- Minimizing memory footprint to allow for scalable implementations.
- Reducing computational overhead to ensure swift operations.

The goal is to ensure each node operates at its best, enabling the entire graph to function seamlessly and efficiently under various load conditions and implementations.
