[project]
requires-python =  ">=3.9,<4.0"

[tool.poetry]
name = "redis-encdec"
version = "0.1.1"
description = "A utility module for encoding and decoding dictionaries with JSON values for use with Redis."
authors = ["Ricardo Carlini <rcarlini@gmail.com>"]
license = "LGPL-2.1"
readme = "README.md"
homepage = "https://github.com/carlinix/redis-encoder-decoder"
repository = "https://github.com/carlinix/redis-encoder-decoder"
keywords = ["redis", "encoder", "decoder", "json", "utility"]

[tool.poetry.dependencies]
python =  ">=3.9,<4.0"
redis = "^4.0.2"

[tool.poetry.dev-dependencies]
poetry = "^1.8.3"
pre-commit = "^3.7.1"
commitizen = "^3.27.0"
ruff = "^0.4.2"
interrogate = "^1.7.0"
codespell = "^2.3.0"
pylint = "^3.2.3"
coverage = "^7.5.3"
pytest = "^8.2.2"
pytest-cov = "^5.0.0"
poetry-plugin-export = "^1.8.0"
poetry-plugin-bundle = "^1.3.0"
mypy = "^1.10.0"
poetry-plugin-up = "^0.7.1"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
package-mode = true

[tool.poetry.group.doc.dependencies]
mkdocs-material = "^9.5.26"
mkdocs-material-extensions = "^1.3.1"
mkdocs-gen-files = "^0.5.0"
mkdocs-literate-nav = "^0.6.1"
mkdocs-charts-plugin = "^0.0.10"
mkdocs-section-index = "^0.3.9"
mkdocs-git-revision-date-localized-plugin = "^1.2.6"
mkdocs-diagrams = "^1.0.0"
mkdocs-mermaid2-plugin = "^1.1.1"
mkdocs-with-pdf = "^0.9.3"
mkdocs-click = "^0.8.1"
mkdocs-awesome-pages-plugin = "^2.9.2"
mkdocs-minify-plugin = "^0.8.0"
mkdocstrings-python = "^1.10.3"
jinja2 = ">=3.1.4"
requests = ">=2.32.3"

[tool.poetry.group.dev.dependencies]
tox = "^4.16.0"

tox-pyenv = "^1.1.0"
twine = "^5.1.1"
[tool.ruff]
line-length = 120  # E501 (line-too-long)
output-format = "full"
unsafe-fixes = true
show-fixes = true
builtins = ["_"]
src = ["redis-encdec", "test"]

[tool.ruff.format]
line-ending = "lf"  # Use UNIX \n line endings for all files
docstring-code-format = true
indent-style = "space"
docstring-code-line-length = "dynamic"
quote-style = "double"
skip-magic-trailing-comma = false
preview = true

[tool.ruff.lint.flake8-type-checking]
strict = true

#[tool.ruff.lint.flake8-import-conventions]
# Declare the banned `from` imports.
#banned-from = ["typing"]

[tool.ruff.lint.flake8-import-conventions.aliases]
# Declare the default aliases.
altair = "alt"
"matplotlib.pyplot" = "plt"
numpy = "np"
pandas = "pd"
seaborn = "sns"
scipy = "sp"

[tool.ruff.lint.flake8-annotations]
suppress-dummy-args = true
suppress-none-returning = true

[tool.ruff.lint.flake8-bandit]
check-typed-exception = true

[tool.ruff.lint.flake8-tidy-imports]
banned-module-level-imports = ["torch", "tensorflow"]

[tool.ruff.lint]
select = [
"F",    # Pyflakes
"E",  # pycodestyle
"W",  # pycodestyle
"C90",  # mccabe
"I",    # isort
"N",    # pep8-naming
"D",    # pydocstyle
"UP",   # pyupgrade
"YTT",  # flake8-2020
"ANN",  # flake8-annotations
"ASYNC",        # flake8-async
"TRIO", # flake8-trio
"S",    # flake8-bandit
"BLE",  # flake8-blind-except
"B",    # flake8-bugbear
"A",    # flake8-builtins
"COM",  # flake8-commas
"CPY",  # flake8-copyright
"C4",   # flake8-comprehensions
"DTZ",  # flake8-datetimez
"T10",  # flake8-debugger
"DJ",   # flake8-django
"EM",   # flake8-errmsg
"EXE",  # flake8-executable
"FA",   # flake8-future-annotations
"ISC",  # flake8-implicit-str-concat
"ICN",  # flake8-import-conventions
"LOG",  # flake8-logging
"G",    # flake8-logging-format
"INP",  # flake8-no-pep420
"PIE",  # flake8-pie
"T20",  # flake8-print
"PYI",  # flake8-pyi
"PT",   # flake8-pytest-style
"Q",    # flake8-quotes
"RSE",  # flake8-raise
"RET",  # flake8-return
"SLF",  # flake8-self
"SLOT", # flake8-slots
"SIM",  # flake8-simplify
"TID",  # flake8-tidy-imports
"TCH",  # flake8-type-checking
"INT",  # flake8-gettext
"ARG",  # flake8-unused-arguments
"PTH",  # flake8-use-pathlib
"TD",   # flake8-todos
"FIX",  # flake8-fixme
"ERA",  # eradicate
"PD",   # pandas-vet
"PGH",  # pygrep-hooks
"PL",   # Pylint
"TRY",  # tryceratops
"FLY",  # flynt
"NPY",  # NumPy-specific
"AIR",  # Airflow
"PERF", # Perflint
"FURB", # refurb
"RUF",  # Ruff-specific
]

ignore = [
     "ANN101",   # missing-type-self
     "ANN102",   # missing-type-cls
     "ANN401",   # Checks that function arguments are annotated with a more specific type than Any
     "CPY001",   # Missing copyright notice at top of file
     "DTZ011",   # Checks for usage of datetime.date.today() whose returns a naive datetime object.
     "PTH109",   # os.getcwd()` should be replaced by `Path.cwd()`
     "PLR6301",  # Checks for the presence of unused self parameter in methods definitions.
     "S404",     # subprocess module is possibly insecure
     "S603",     # subprocess-without-shell-equals-true
     "G004",     # Logging statement uses f-string
     "FBT",      # flake8-boolean-trap
     "D200",     # One-line docstring should fit on one line
     "SIM117",   # Allow nested `with` statements
     "RET504",   # Allow variable assignment and return immediately for readability
]

extend-select = [
#    "D410",  # A blank line after section headings.
]

external = ["V"]
preview = true

[tool.ruff.lint.pycodestyle]
max-doc-length = 120
ignore-overlong-task-comments = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
allow-dunder-method-names = ["__tablename__", "__table_args__"]
max-args = 5
max-bool-expr = 5
max-branches = 12
max-locals = 15
max-nested-blocks = 5
max-positional-args = 5
max-public-methods = 20
max-statements = 50
allow-magic-value-types = ["str", "bytes"]
max-returns = 6

[tool.ruff.lint.mccabe]
max-complexity = 10


[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["D104"]

[tool.ruff.lint.isort]
force-wrap-aliases = true
combine-as-imports = true
lines-between-types = 1
known-first-party = ["redis-encdec"]
split-on-trailing-comma = true
order-by-type = true
lines-after-imports = 2
default-section = "third-party"
from-first = false
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
forced-separate = ["tests"]

[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = false
ignore-semiprivate = false
ignore-private = true
ignore-property-decorators = false
ignore-module = false
ignore-nested-functions = true
ignore-nested-classes = true
ignore-setters = true
fail-under = 80
exclude = ["tests", "docs", "build"]
ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
# possible values: 0 (minimal output), 1 (-v), 2 (-vv)
verbose = 1
quiet = false
whitelist-regex = []
color = true
omit-covered-files = false
generate-badge = "."
badge-format = "svg"

[tool.mypy]
disallow_untyped_defs = true
show_error_codes = true
no_implicit_optional = true
warn_return_any = true
warn_unused_ignores = true
exclude = ["scripts", "docs", "test"]
disable_error_code = "annotation-unchecked"


[tool.vulture]
exclude = ["tests/*.py", "docs/*.py", "build", "*/settings.py"]
ignore_decorators = ["@app.route", "@require_*"]
ignore_names = ["visit_*", "do_*"]
make_whitelist = true
min_confidence = 80
paths = [ "redis-encdec/" ]
sort_by_size = true
verbose = true

[tool.codespell]
quiet-level = 0
skip = "poetry.lock"
ignore-words-list = ""

[tool.coverage.run]
omit = ["*/tests/*", "./redis-encdec/*/__init__.py"]

[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "$version"
version_provider = "poetry"
bump_message = "bump: version $current_version â†’ $new_version"
update_changelog_on_bump = true
annotated_tag = true
version_scheme = "semver"
major_version_zero = true
changelog_file = "CHANGELOG.md"
version_files = [
    "pyproject.toml:^version"
]

