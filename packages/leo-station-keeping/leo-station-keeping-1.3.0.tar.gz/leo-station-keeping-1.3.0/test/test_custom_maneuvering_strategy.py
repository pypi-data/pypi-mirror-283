# coding: utf-8

"""
    LEO Station Keeping API

    This mission allows to estimate the cost of station keeping maneuvers needed  to counter the effects of the atmospheric drag on the semi-major axis of a  spacecraft in low Earth orbit (up to an altitude of 1000 km).   <b>CHANGELOG</b> <ul>   <li><b>1.3.0</b> - 2024-07-08 - Replace <b>missionDateTime</b> by <b>initialDate</b> in <b>NumericalLeoStationKeepingRequest</b> schema</li>    <li><b>1.2.0</b> - 2024-07-03 - Add <b>atmosphericModel</b> to in <b>DragPerturbation</b> schema</li>   <li><b>1.1.0</b> - 2024-06-27 - Map custom maneuvering strategy</li>   <li><b>1.0.0</b> - 2024-06-07 - First version of the API</li> </ul> 

    The version of the OpenAPI document: 1.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from leo_station_keeping.models.custom_maneuvering_strategy import CustomManeuveringStrategy

class TestCustomManeuveringStrategy(unittest.TestCase):
    """CustomManeuveringStrategy unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CustomManeuveringStrategy:
        """Test CustomManeuveringStrategy
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CustomManeuveringStrategy`
        """
        model = CustomManeuveringStrategy()
        if include_optional:
            return CustomManeuveringStrategy(
                thrust_arcs_number = 1,
                thrust_arcs_position = 'ASCENDING_AND_DESCENDING_NODES',
                custom_thrust_arcs_position = leo_station_keeping.models.custom_thrust_arcs_position.CustomThrustArcsPosition(
                    reference = 'ASCENDING_AND_DESCENDING_NODES', 
                    delta_mean_longitude_argument = 1.337, ),
                number_of_thrust_orbits = 56,
                number_of_rest_orbits = 56,
                number_of_shift_orbits = 56,
                thrust_arc_definition = leo_station_keeping.models.thrust_arc_definition.ThrustArcDefinition(),
                thrust_arc_mean_longitude_argument = 1.337,
                stop_thrusting_during_eclipse = True,
                dynamic_duty_cycle = True
            )
        else:
            return CustomManeuveringStrategy(
                thrust_arcs_number = 1,
                number_of_thrust_orbits = 56,
                number_of_rest_orbits = 56,
                number_of_shift_orbits = 56,
                thrust_arc_definition = leo_station_keeping.models.thrust_arc_definition.ThrustArcDefinition(),
        )
        """

    def testCustomManeuveringStrategy(self):
        """Test CustomManeuveringStrategy"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
