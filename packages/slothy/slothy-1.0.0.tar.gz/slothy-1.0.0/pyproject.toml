# This file was generated from scaffops/python@0.0.2rc-238-g68b0ab8.
# Instead of changing this particular file, you might want to alter the template:
# https://github.com/scaffops/python/tree/0.0.2rc-238-g68b0ab8/project/pyproject.toml.jinja

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[project]
name = "slothy"
dynamic = ["version"]

[tool.poetry]
name = "slothy"
version = "1.0.0"
description = "Super-easy lazy importing in Python."
authors = ["bswck <bartoszpiotrslawecki@gmail.com>"]
license = "MIT"
readme = "README.md"
packages = [{ include = "slothy/" }]
homepage = "https://github.com/bswck/slothy"

[tool.poetry.urls]
Documentation = "https://slothy.readthedocs.io/en/latest/"
Issues = "https://github.com/bswck/slothy/issues"
Distribution = "https://pypi.org/project/slothy/"
Coverage = "https://coverage-badge.samuelcolvin.workers.dev/redirect/bswck/slothy"

[tool.poetry.dependencies]
python = ">=3.8"

[tool.poetry.group.dev.dependencies]
pytest-subtests = ">=0.12.1"

[tool.poetry.group.dev-skeleton.dependencies]
# This dependency group was generated from scaffops/python@0.0.2rc-238-g68b0ab8.
# Instead of changing this particular file, you might want to alter the template:
# https://github.com/scaffops/python/tree/0.0.2rc-238-g68b0ab8/project/pyproject.toml.jinja
mypy = ">=1.9.0"
ruff = ">=0.3.4"
towncrier = ">=23.11.0"
coverage = ">=7.4.4"
pytest = ">=8.1.1"
pytest-doctestplus = ">=1.2.1"
pytest-sugar = ">=1.0.0"
covdefaults = ">=2.3.0"
poethepoet = ">=0.25.0"
pre-commit = "<3.6.0"
smokeshow = ">=0.4.0"
keyring = ">=25.0.0"

[tool.pytest.ini_options]
addopts = "--doctest-modules"
testpaths = ["tests/run_tests.py"]

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
markdown-exec = ">=1.3.0"
mkdocs-material = ">=8.2"
mkdocs-git-authors-plugin = ">=0.9.0"
mdx-include = ">=1.4.2"
mkdocstrings = { version = ">=0.19.0", extras = ["python"] }
mike = ">=2.1.1"

[tool.poe.tasks]
test = "pytest -v"
lint = "ruff check ."
check = [{ ref = "test" }, { ref = "lint" }]
release.script = "scripts.release:main"

[tool.poe.tasks.added]
shell = "towncrier create $TICKET.added.md --edit"
args = [{ name = "TICKET", default = "+", positional = true }]

[tool.poe.tasks.changed]
shell = "towncrier create $TICKET.changed.md --edit"
args = [{ name = "TICKET", default = "+", positional = true }]

[tool.poe.tasks.fixed]
shell = "towncrier create $TICKET.fixed.md --edit"
args = [{ name = "TICKET", default = "+", positional = true }]

[tool.poe.tasks.deprecated]
shell = "towncrier create $TICKET.deprecated.md --edit"
args = [{ name = "TICKET", default = "+", positional = true }]

[tool.poe.tasks.removed]
shell = "towncrier create $TICKET.removed.md --edit"
args = [{ name = "TICKET", default = "+", positional = true }]

[tool.poe.tasks.security]
shell = "towncrier create $TICKET.security.md --edit"
args = [{ name = "TICKET", default = "+", positional = true }]

[tool.ruff]
exclude = ["docs/", "scripts/", "tests/leaking_patch/"]

[tool.ruff.lint]
# To discuss the presented rationales, contact the author (bswck).
select = ["ALL"]
ignore = [
    # Description: Missing type annotation for self in method
    # Rationale: It is mostly redundant, as is for ANN102.
    "ANN101",

    # Description: Missing type annotation for cls in method
    # Rationale: It is mostly redundant, as is for ANN101.
    "ANN102",

    # Description: Dynamically typed expressions (typing.Any) are disallowed
    # Rationale:
    #  We use Any to allow user to constrain return types of our functions on their own.
    #  For example, having a function `def foo() -> Any: ...` allows user to write
    #  `my_foo: int = foo()` and have it passed type checking, since `Any` disables
    #  type checking completely.
    "ANN401",

    # Description: 1 blank line required before class docstring
    # Rationale: Remove the warning -- D211 (no-blank-line-before-class) preferred.
    "D203",

    # Description: Multi-line docstring summary should start at the second line
    # Rationale: Remove the warning -- D213 (multi-line-summary-second-line) preferred.
    "D212",

    # Description: Line contains TODO, consider resolving the issue
    # Rationale: Not appropriate for the project.
    "FIX002",

    # Description: Implicitly concatenated string literals on one line
    # Rationale: Allegedly conflicts with the formatter.
    "ISC001",

    # Description: Trailing comma missing
    # Rationale: Allegedly conflicts with the formatter.
    "COM812",
]

[tool.ruff.lint.per-file-ignores]
"tests/tested_layouts/*" = ["ALL"]
"tests/*" = [
    "D",
    "S101",
    "SLF001",
    "B018",
    "FBT001",
    "FBT003",
    "F401",
    "F821",
    "PLR2004",
    "INP001",
]

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]

[tool.mypy]
strict = true
explicit_package_bases = true
mypy_path = ".,tests/tested_layouts/"
exclude = ["docs/snippets/"]

[tool.pyright]
extraPaths = ["tests/tested_layouts/"]

[tool.towncrier]
directory = "news"
package = "slothy"
filename = "CHANGELOG.md"
start_string = "<!-- insertion marker -->\n"
underlines = ["", "", ""]                                                                        # We use Markdown
title_format = "## [{version}](https://github.com/bswck/slothy/tree/{version}) ({project_date})"
issue_format = "[#{issue}](https://github.com/bswck/slothy/issues/{issue})"

[[tool.towncrier.type]]
directory = "security"
name = "Security"
showcontent = true

[[tool.towncrier.type]]
directory = "removed"
name = "Removed"
showcontent = true

[[tool.towncrier.type]]
directory = "deprecated"
name = "Deprecated"
showcontent = true

[[tool.towncrier.type]]
directory = "added"
name = "Added"
showcontent = true

[[tool.towncrier.type]]
directory = "changed"
name = "Changed"
showcontent = true

[[tool.towncrier.type]]
directory = "fixed"
name = "Fixed"
showcontent = true

[tool.coverage.run]
plugins = ["covdefaults"]
source = ["slothy/"]
relative_files = true

[tool.coverage.report]
fail_under = 90
