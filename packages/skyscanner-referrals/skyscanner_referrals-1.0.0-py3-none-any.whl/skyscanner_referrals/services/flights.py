# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models


class FlightsService(BaseService):

    @cast_models
    def flights_home(self, media_partner_id: str = None):
        """Flights Home

        :param media_partner_id: Your Impact partner ID as found at Impact.com., defaults to None
        :type media_partner_id: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).is_optional().validate(media_partner_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/g/referrals/v1/flights/home/",
                self.get_default_headers(),
            )
            .add_query("mediaPartnerId", media_partner_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def flights_day_view(
        self,
        media_partner_id: str = None,
        origin: str = None,
        destination: str = None,
        outbound_date: str = None,
        inbound_date: str = None,
        utm_term: str = None,
        adultsv2: str = None,
        childrenv2: str = None,
        infants: str = None,
        cabinclass: str = None,
        prefer_directs: str = None,
        outboundaltsenabled: str = None,
        inboundaltsenabled: str = None,
        alternativeorigins: str = None,
        alternativedestinations: str = None,
        market: str = None,
        locale: str = None,
        currency: str = None,
        sortby: str = None,
        airlines: str = None,
        alliances: str = None,
        departure_times: str = None,
        duration: str = None,
    ):
        """Flights Day View

        :param media_partner_id: Your Impact partner ID as found on impact.com., defaults to None
        :type media_partner_id: str, optional
        :param origin: IATA code or Entity ID for the origin., defaults to None
        :type origin: str, optional
        :param destination: IATA code or Entity ID  for the destination., defaults to None
        :type destination: str, optional
        :param outbound_date: Outbound date in the format YYYY-MM-DD., defaults to None
        :type outbound_date: str, optional
        :param inbound_date: Inbound date in the format YYYY-MM-DD., defaults to None
        :type inbound_date: str, optional
        :param utm_term: Additional alphanumeric tracking parameter you can add to your text links for additional tracking. This will be reported on Impact as Sub Id 2., defaults to None
        :type utm_term: str, optional
        :param adultsv2: Number of adult passengers. Adults have to be 16 years old or older., defaults to None
        :type adultsv2: str, optional
        :param childrenv2: Number of children passengers. Child age has to be in the 2-15 range. The value must be in the format integer|integer... where each number is the age of the child passenger., defaults to None
        :type childrenv2: str, optional
        :param infants: Number of infant passengers. An infant is 1 year old or younger., defaults to None
        :type infants: str, optional
        :param cabinclass: Cabin class for the flight., defaults to None
        :type cabinclass: str, optional
        :param prefer_directs: When this parameter is set to true, only direct flights results will be shown., defaults to None
        :type prefer_directs: str, optional
        :param outboundaltsenabled: When this parameter is set to true, the results will include nearby airports as an outbound place., defaults to None
        :type outboundaltsenabled: str, optional
        :param inboundaltsenabled: When this parameter is set to true, the results will include nearby airports as an inbound place., defaults to None
        :type inboundaltsenabled: str, optional
        :param alternativeorigins: An array of location codes which will be used as alternative origins., defaults to None
        :type alternativeorigins: str, optional
        :param alternativedestinations: An array of location codes which will be used as alternative destinations., defaults to None
        :type alternativedestinations: str, optional
        :param market: The preferred market for searching results. When unspecified, we use detection logic to determine the market, so it is unlikely you will need to use this parameter., defaults to None
        :type market: str, optional
        :param locale: The preferred locale for the desired page. When unspecified, we use detection logic to determine the locale, so it is unlikely you will need to use this parameter., defaults to None
        :type locale: str, optional
        :param currency: The preferred currency for the desired page. When unspecified, we use detection logic to determine the currency, so it is unlikely you will need to use this parameter., defaults to None
        :type currency: str, optional
        :param sortby: Sets the sorting order for the results. If not specified, results will be sorted by best., defaults to None
        :type sortby: str, optional
        :param airlines: Comma separated list of IATA/ICAO airline codes to be passed to the day-view filters., defaults to None
        :type airlines: str, optional
        :param alliances: Comma separated list of alliance names passed to the day-view filters., defaults to None
        :type alliances: str, optional
        :param departure_times: Sets the day-view departure time filters in minutes., defaults to None
        :type departure_times: str, optional
        :param duration: Sets the day-view duration filters in minutes., defaults to None
        :type duration: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).is_optional().validate(media_partner_id)
        Validator(str).is_optional().validate(origin)
        Validator(str).is_optional().validate(destination)
        Validator(str).is_optional().validate(outbound_date)
        Validator(str).is_optional().validate(inbound_date)
        Validator(str).is_optional().validate(utm_term)
        Validator(str).is_optional().validate(adultsv2)
        Validator(str).is_optional().validate(childrenv2)
        Validator(str).is_optional().validate(infants)
        Validator(str).is_optional().validate(cabinclass)
        Validator(str).is_optional().validate(prefer_directs)
        Validator(str).is_optional().validate(outboundaltsenabled)
        Validator(str).is_optional().validate(inboundaltsenabled)
        Validator(str).is_optional().validate(alternativeorigins)
        Validator(str).is_optional().validate(alternativedestinations)
        Validator(str).is_optional().validate(market)
        Validator(str).is_optional().validate(locale)
        Validator(str).is_optional().validate(currency)
        Validator(str).is_optional().validate(sortby)
        Validator(str).is_optional().validate(airlines)
        Validator(str).is_optional().validate(alliances)
        Validator(str).is_optional().validate(departure_times)
        Validator(str).is_optional().validate(duration)

        serialized_request = (
            Serializer(
                f"{self.base_url}/g/referrals/v1/flights/day-view/",
                self.get_default_headers(),
            )
            .add_query("mediaPartnerId", media_partner_id)
            .add_query("origin", origin)
            .add_query("destination", destination)
            .add_query("outboundDate", outbound_date)
            .add_query("inboundDate", inbound_date)
            .add_query("utm_term", utm_term)
            .add_query("adultsv2", adultsv2)
            .add_query("childrenv2", childrenv2)
            .add_query("infants", infants)
            .add_query("cabinclass", cabinclass)
            .add_query("preferDirects", prefer_directs)
            .add_query("outboundaltsenabled", outboundaltsenabled)
            .add_query("inboundaltsenabled", inboundaltsenabled)
            .add_query("alternativeorigins", alternativeorigins)
            .add_query("alternativedestinations", alternativedestinations)
            .add_query("market", market)
            .add_query("locale", locale)
            .add_query("currency", currency)
            .add_query("sortby", sortby)
            .add_query("airlines", airlines)
            .add_query("alliances", alliances)
            .add_query("departure-times", departure_times)
            .add_query("duration", duration)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def calendar_month_view(
        self,
        media_partner_id: str = None,
        origin: str = None,
        destination: str = None,
        prefer_directs: str = None,
        utm_term: str = None,
    ):
        """Calendar Month View

        :param media_partner_id: Your Impact partner ID as found on impact.com., defaults to None
        :type media_partner_id: str, optional
        :param origin: IATA code or Entity ID for the origin., defaults to None
        :type origin: str, optional
        :param destination: IATA code or Entity ID for the destination., defaults to None
        :type destination: str, optional
        :param prefer_directs: If set to true, only direct flights will be shown as results., defaults to None
        :type prefer_directs: str, optional
        :param utm_term: Additional alphanumeric tracking parameter you can add to your text links for additional tracking. This will be reported on Impact as Sub Id 2., defaults to None
        :type utm_term: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).is_optional().validate(media_partner_id)
        Validator(str).is_optional().validate(origin)
        Validator(str).is_optional().validate(destination)
        Validator(str).is_optional().validate(prefer_directs)
        Validator(str).is_optional().validate(utm_term)

        serialized_request = (
            Serializer(
                f"{self.base_url}/g/referrals/v1/flights/calendar-month-view/",
                self.get_default_headers(),
            )
            .add_query("mediaPartnerId", media_partner_id)
            .add_query("origin", origin)
            .add_query("destination", destination)
            .add_query("preferDirects", prefer_directs)
            .add_query("utm_term", utm_term)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def multi_city(
        self,
        media_partner_id: str = None,
        origin0: str = None,
        date0: str = None,
        destination0: str = None,
        origin1: str = None,
        date1: str = None,
        destination1: str = None,
        origin2: str = None,
        date2: str = None,
        destination2: str = None,
        adultsv2: str = None,
        cabinclass: str = None,
    ):
        """Multi-City

        :param media_partner_id: Your Impact partner ID as found on impact.com., defaults to None
        :type media_partner_id: str, optional
        :param origin0: IATA code or Entity ID for the origin of the first flight., defaults to None
        :type origin0: str, optional
        :param date0: Outbound date of the first flight in the format YYYY-MM-DD., defaults to None
        :type date0: str, optional
        :param destination0: IATA code or Entity ID for the destination of the first flight., defaults to None
        :type destination0: str, optional
        :param origin1: IATA code or Entity ID for the origin of the second flight., defaults to None
        :type origin1: str, optional
        :param date1: Outbound date of the second flight in the format YYYY-MM-DD., defaults to None
        :type date1: str, optional
        :param destination1: IATA code or Entity ID for the destination of the second flight., defaults to None
        :type destination1: str, optional
        :param origin2: IATA code or Entity ID for the origin of the third flight., defaults to None
        :type origin2: str, optional
        :param date2: Outbound date of the third flight in the format YYYY-MM-DD., defaults to None
        :type date2: str, optional
        :param destination2: IATA code or Entity ID for the destination of the third flight., defaults to None
        :type destination2: str, optional
        :param adultsv2: Number of adults., defaults to None
        :type adultsv2: str, optional
        :param cabinclass: The cabin class. Default is economy., defaults to None
        :type cabinclass: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).is_optional().validate(media_partner_id)
        Validator(str).is_optional().validate(origin0)
        Validator(str).is_optional().validate(date0)
        Validator(str).is_optional().validate(destination0)
        Validator(str).is_optional().validate(origin1)
        Validator(str).is_optional().validate(date1)
        Validator(str).is_optional().validate(destination1)
        Validator(str).is_optional().validate(origin2)
        Validator(str).is_optional().validate(date2)
        Validator(str).is_optional().validate(destination2)
        Validator(str).is_optional().validate(adultsv2)
        Validator(str).is_optional().validate(cabinclass)

        serialized_request = (
            Serializer(
                f"{self.base_url}/g/referrals/v1/flights/multicity/",
                self.get_default_headers(),
            )
            .add_query("mediaPartnerId", media_partner_id)
            .add_query("origin0", origin0)
            .add_query("date0", date0)
            .add_query("destination0", destination0)
            .add_query("origin1", origin1)
            .add_query("date1", date1)
            .add_query("destination1", destination1)
            .add_query("origin2", origin2)
            .add_query("date2", date2)
            .add_query("destination2", destination2)
            .add_query("adultsv2", adultsv2)
            .add_query("cabinclass", cabinclass)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def browse_view(
        self,
        media_partner_id: str = None,
        origin: str = None,
        oym: str = None,
        iym: str = None,
        rtn: str = None,
    ):
        """Browse View

        :param media_partner_id: Your Impact partner ID as found on impact.com., defaults to None
        :type media_partner_id: str, optional
        :param origin: Country code for the origin., defaults to None
        :type origin: str, optional
        :param oym: Departure date in YYYY-MM format., defaults to None
        :type oym: str, optional
        :param iym: Arrival date in YYYY-MM format., defaults to None
        :type iym: str, optional
        :param rtn: Type of the trip, e.g. oneway, return or multicity., defaults to None
        :type rtn: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).is_optional().validate(media_partner_id)
        Validator(str).is_optional().validate(origin)
        Validator(str).is_optional().validate(oym)
        Validator(str).is_optional().validate(iym)
        Validator(str).is_optional().validate(rtn)

        serialized_request = (
            Serializer(
                f"{self.base_url}/g/referrals/v1/flights/browse-view/",
                self.get_default_headers(),
            )
            .add_query("mediaPartnerId", media_partner_id)
            .add_query("origin", origin)
            .add_query("oym", oym)
            .add_query("iym", iym)
            .add_query("rtn", rtn)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def cheap_flights_to(self, media_partner_id: str = None, destination: str = None):
        """Cheap Flights To

        :param media_partner_id: Your Impact partner ID as found on impact.com., defaults to None
        :type media_partner_id: str, optional
        :param destination: IATA code or Entity ID for the destination., defaults to None
        :type destination: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).is_optional().validate(media_partner_id)
        Validator(str).is_optional().validate(destination)

        serialized_request = (
            Serializer(
                f"{self.base_url}/g/referrals/v1/flights/cheap-flights-to/",
                self.get_default_headers(),
            )
            .add_query("mediaPartnerId", media_partner_id)
            .add_query("destination", destination)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def flights_airline(
        self,
        media_partner_id: str = None,
        airline_code: str = None,
        airline_name: str = None,
    ):
        """Flights Airline

        :param media_partner_id: Your Impact partner ID as found on impact.com., defaults to None
        :type media_partner_id: str, optional
        :param airline_code: The airline code., defaults to None
        :type airline_code: str, optional
        :param airline_name: The airline name., defaults to None
        :type airline_name: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).is_optional().validate(media_partner_id)
        Validator(str).is_optional().validate(airline_code)
        Validator(str).is_optional().validate(airline_name)

        serialized_request = (
            Serializer(
                f"{self.base_url}/g/referrals/v1/flights/flights-airline/",
                self.get_default_headers(),
            )
            .add_query("mediaPartnerId", media_partner_id)
            .add_query("airlineCode", airline_code)
            .add_query("airlineName", airline_name)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response
