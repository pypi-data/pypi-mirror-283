"use strict";(self.webpackChunkjupyterlab_ws_chat=self.webpackChunkjupyterlab_ws_chat||[]).push([[698],{2698:(e,t,s)=>{s.r(t),s.d(t,{default:()=>g});var n=s(22),i=s(8751),o=s(6110),r=s(6389),a=s(4080),c=s(7635),l=s(6252),d=s(7262);class h extends n.ChatModel{constructor(e={}){var t;super(e),this._userId="",this._socket=null,this._sendResolverQueue=new Map,this._connectionInitialized=new d.PromiseDelegate,this.serverSettings=null!==(t=e.serverSettings)&&void 0!==t?t:l.ServerConnection.makeSettings(),this.name="chat"}get userId(){return this._userId}set userId(e){this._userId=e}async initialize(){this._initialize(),await this._connectionInitialized.promise}addMessage(e){return e.id=d.UUID.uuid4(),new Promise((t=>{var s;null===(s=this._socket)||void 0===s||s.send(JSON.stringify(e)),this._sendResolverQueue.set(e.id,t)}))}async getHistory(){let e={messages:[]};try{e=await async function(e="",t={}){const s=l.ServerConnection.makeSettings(),n=c.URLExt.join(s.baseUrl,"api/chat",e);let i;try{i=await l.ServerConnection.makeRequest(n,t,s)}catch(e){throw new l.ServerConnection.NetworkError(e)}let o=await i.text();if(o.length>0)try{o=JSON.parse(o)}catch(e){console.log("Not a JSON response body.",i)}if(!i.ok)throw new l.ServerConnection.ResponseError(i,o.message||o);return o}("history",{method:"GET"})}catch(e){return Promise.reject(e)}return e}dispose(){super.dispose();const e=this._socket;e&&(this._socket=null,e.onopen=()=>{},e.onerror=()=>{},e.onmessage=()=>{},e.onclose=()=>{},e.close())}messageAdded(e){var t;"msg"===e.type?(e.sender.id===this.userId&&(null===(t=this._sendResolverQueue.get(e.id))||void 0===t||t(!0)),super.messageAdded(e)):"connection"===e.type&&(this.userId=e.client_id,this._connectionInitialized.resolve(!0))}_onClose(e){if(this._connectionInitialized.reject(new Error("Chat UI websocket disconnected")),console.error("Chat UI websocket disconnected"),1006===e.code){const e=1;console.info(`Will try to reconnect in ${e} s.`),setTimeout((async()=>await this.initialize()),1e3*e)}}_initialize(){if(this.isDisposed)return;console.log("Creating a new websocket connection for chat...");const{token:e,WebSocket:t,wsUrl:s}=this.serverSettings,n=c.URLExt.join(s,"api/chat")+(e?`?token=${encodeURIComponent(e)}`:""),i=this._socket=new t(n);i.onclose=e=>this._onClose(e),i.onerror=e=>console.error(e),i.onmessage=e=>e.data&&this.messageAdded(JSON.parse(e.data))}}const u="jupyterlab-ws-chat:chat",g=[{id:"jupyterlab-ws-chat:autocompletionRegistry",description:"An autocompletion registry",autoStart:!0,provides:n.IAutocompletionRegistry,activate:e=>new n.AutocompletionRegistry},{id:u,description:"A chat extension for Jupyterlab",autoStart:!0,requires:[r.IRenderMimeRegistry],optional:[n.IAutocompletionRegistry,i.ILayoutRestorer,a.ISettingRegistry,o.IThemeManager],activate:async(e,t,s,i,o,r)=>{const a=new h({commands:e.commands});let c=!1,l=!0,d=!0;function g(e){c=e.get("sendWithShiftEnter").composite,l=e.get("stackMessages").composite,d=e.get("unreadNotifications").composite,a.config={sendWithShiftEnter:c,stackMessages:l,unreadNotifications:d}}Promise.all([e.restored,null==o?void 0:o.load(u)]).then((([,e])=>{e?(g(e),e.changed.connect(g)):console.warn("The SettingsRegistry is not loaded for the chat extension")})).catch((e=>{console.error(`Something went wrong when reading the settings.\n${e}`)}));let p=null;try{await a.initialize(),p=(0,n.buildChatSidebar)({model:a,themeManager:r,rmRegistry:t,autocompletionRegistry:s})}catch(e){p=(0,n.buildErrorWidget)(r)}e.shell.add(p,"left",{rank:2e3}),i&&i.add(p,"jupyter-chat"),console.log("Chat extension initialized")}}]}}]);