# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.search_over_starcraft_brood_war_matches import (
    SearchOverStarcraftBroodWarMatches,
)
from ..models.range_over_starcraft_brood_war_matches import (
    RangeOverStarcraftBroodWarMatches,
)
from ..models.match import Match
from ..models.get_starcraft_brood_war_matches_upcoming_page import (
    GetStarcraftBroodWarMatchesUpcomingPage,
)
from ..models.get_starcraft_brood_war_matches_running_page import (
    GetStarcraftBroodWarMatchesRunningPage,
)
from ..models.get_starcraft_brood_war_matches_past_page import (
    GetStarcraftBroodWarMatchesPastPage,
)
from ..models.get_starcraft_brood_war_matches_page import (
    GetStarcraftBroodWarMatchesPage,
)
from ..models.filter_over_starcraft_brood_war_matches import (
    FilterOverStarcraftBroodWarMatches,
)


class StarCraftBroodWarMatchesService(BaseService):

    @cast_models
    def get_starcraft_brood_war_matches(
        self,
        filter: FilterOverStarcraftBroodWarMatches = None,
        range: RangeOverStarcraftBroodWarMatches = None,
        sort: List[any] = None,
        search: SearchOverStarcraftBroodWarMatches = None,
        page: GetStarcraftBroodWarMatchesPage = None,
        per_page: int = None,
    ) -> List[Match]:
        """List matches for the StarCraft Brood War videogame

        :param filter: Options to filter results. String fields are case sensitive <br/>For more information on filtering, see [docs](/docs/filtering-and-sorting#filter)., defaults to None
        :type filter: FilterOverStarcraftBroodWarMatches, optional
        :param range: Options to select results within ranges <br/>For more information on ranges, see [docs](/docs/filtering-and-sorting#range)., defaults to None
        :type range: RangeOverStarcraftBroodWarMatches, optional
        :param sort: Options to sort results <br/>For more information on sorting, see [docs](/docs/filtering-and-sorting#sort)., defaults to None
        :type sort: List[any], optional
        :param search: Options to search results <br/>For more information on searching, see [docs](/docs/filtering-and-sorting#search)., defaults to None
        :type search: SearchOverStarcraftBroodWarMatches, optional
        :param page: Pagination in the form of `page=2` or `page[size]=30&page[number]=2`, defaults to None
        :type page: GetStarcraftBroodWarMatchesPage, optional
        :param per_page: Equivalent to `page[size]`, defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: A list of StarCraft Brood War matches
        :rtype: List[Match]
        """

        Validator(FilterOverStarcraftBroodWarMatches).is_optional().validate(filter)
        Validator(RangeOverStarcraftBroodWarMatches).is_optional().validate(range)
        Validator(any).is_array().is_optional().validate(sort)
        Validator(SearchOverStarcraftBroodWarMatches).is_optional().validate(search)
        Validator(GetStarcraftBroodWarMatchesPage).is_optional().validate(page)
        Validator(int).is_optional().min(1).max(100).validate(per_page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/starcraft-brood-war/matches",
                self.get_default_headers(),
            )
            .add_query("filter", filter, style="deepObject")
            .add_query("range", range, style="deepObject")
            .add_query("sort", sort)
            .add_query("search", search, style="deepObject")
            .add_query("page", page)
            .add_query("per_page", per_page)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return [Match._unmap(item) for item in response]

    @cast_models
    def get_starcraft_brood_war_matches_past(
        self,
        filter: FilterOverStarcraftBroodWarMatches = None,
        range: RangeOverStarcraftBroodWarMatches = None,
        sort: List[any] = None,
        search: SearchOverStarcraftBroodWarMatches = None,
        page: GetStarcraftBroodWarMatchesPastPage = None,
        per_page: int = None,
    ) -> List[Match]:
        """List past StarCraft Brood War matches

        :param filter: Options to filter results. String fields are case sensitive <br/>For more information on filtering, see [docs](/docs/filtering-and-sorting#filter)., defaults to None
        :type filter: FilterOverStarcraftBroodWarMatches, optional
        :param range: Options to select results within ranges <br/>For more information on ranges, see [docs](/docs/filtering-and-sorting#range)., defaults to None
        :type range: RangeOverStarcraftBroodWarMatches, optional
        :param sort: Options to sort results <br/>For more information on sorting, see [docs](/docs/filtering-and-sorting#sort)., defaults to None
        :type sort: List[any], optional
        :param search: Options to search results <br/>For more information on searching, see [docs](/docs/filtering-and-sorting#search)., defaults to None
        :type search: SearchOverStarcraftBroodWarMatches, optional
        :param page: Pagination in the form of `page=2` or `page[size]=30&page[number]=2`, defaults to None
        :type page: GetStarcraftBroodWarMatchesPastPage, optional
        :param per_page: Equivalent to `page[size]`, defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: A list of StarCraft Brood War matches
        :rtype: List[Match]
        """

        Validator(FilterOverStarcraftBroodWarMatches).is_optional().validate(filter)
        Validator(RangeOverStarcraftBroodWarMatches).is_optional().validate(range)
        Validator(any).is_array().is_optional().validate(sort)
        Validator(SearchOverStarcraftBroodWarMatches).is_optional().validate(search)
        Validator(GetStarcraftBroodWarMatchesPastPage).is_optional().validate(page)
        Validator(int).is_optional().min(1).max(100).validate(per_page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/starcraft-brood-war/matches/past",
                self.get_default_headers(),
            )
            .add_query("filter", filter, style="deepObject")
            .add_query("range", range, style="deepObject")
            .add_query("sort", sort)
            .add_query("search", search, style="deepObject")
            .add_query("page", page)
            .add_query("per_page", per_page)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return [Match._unmap(item) for item in response]

    @cast_models
    def get_starcraft_brood_war_matches_running(
        self,
        filter: FilterOverStarcraftBroodWarMatches = None,
        range: RangeOverStarcraftBroodWarMatches = None,
        sort: List[any] = None,
        search: SearchOverStarcraftBroodWarMatches = None,
        page: GetStarcraftBroodWarMatchesRunningPage = None,
        per_page: int = None,
    ) -> List[Match]:
        """List running StarCraft Brood War matches

        :param filter: Options to filter results. String fields are case sensitive <br/>For more information on filtering, see [docs](/docs/filtering-and-sorting#filter)., defaults to None
        :type filter: FilterOverStarcraftBroodWarMatches, optional
        :param range: Options to select results within ranges <br/>For more information on ranges, see [docs](/docs/filtering-and-sorting#range)., defaults to None
        :type range: RangeOverStarcraftBroodWarMatches, optional
        :param sort: Options to sort results <br/>For more information on sorting, see [docs](/docs/filtering-and-sorting#sort)., defaults to None
        :type sort: List[any], optional
        :param search: Options to search results <br/>For more information on searching, see [docs](/docs/filtering-and-sorting#search)., defaults to None
        :type search: SearchOverStarcraftBroodWarMatches, optional
        :param page: Pagination in the form of `page=2` or `page[size]=30&page[number]=2`, defaults to None
        :type page: GetStarcraftBroodWarMatchesRunningPage, optional
        :param per_page: Equivalent to `page[size]`, defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: A list of StarCraft Brood War matches
        :rtype: List[Match]
        """

        Validator(FilterOverStarcraftBroodWarMatches).is_optional().validate(filter)
        Validator(RangeOverStarcraftBroodWarMatches).is_optional().validate(range)
        Validator(any).is_array().is_optional().validate(sort)
        Validator(SearchOverStarcraftBroodWarMatches).is_optional().validate(search)
        Validator(GetStarcraftBroodWarMatchesRunningPage).is_optional().validate(page)
        Validator(int).is_optional().min(1).max(100).validate(per_page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/starcraft-brood-war/matches/running",
                self.get_default_headers(),
            )
            .add_query("filter", filter, style="deepObject")
            .add_query("range", range, style="deepObject")
            .add_query("sort", sort)
            .add_query("search", search, style="deepObject")
            .add_query("page", page)
            .add_query("per_page", per_page)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return [Match._unmap(item) for item in response]

    @cast_models
    def get_starcraft_brood_war_matches_upcoming(
        self,
        filter: FilterOverStarcraftBroodWarMatches = None,
        range: RangeOverStarcraftBroodWarMatches = None,
        sort: List[any] = None,
        search: SearchOverStarcraftBroodWarMatches = None,
        page: GetStarcraftBroodWarMatchesUpcomingPage = None,
        per_page: int = None,
    ) -> List[Match]:
        """List upcoming StarCraft Brood War matches

        :param filter: Options to filter results. String fields are case sensitive <br/>For more information on filtering, see [docs](/docs/filtering-and-sorting#filter)., defaults to None
        :type filter: FilterOverStarcraftBroodWarMatches, optional
        :param range: Options to select results within ranges <br/>For more information on ranges, see [docs](/docs/filtering-and-sorting#range)., defaults to None
        :type range: RangeOverStarcraftBroodWarMatches, optional
        :param sort: Options to sort results <br/>For more information on sorting, see [docs](/docs/filtering-and-sorting#sort)., defaults to None
        :type sort: List[any], optional
        :param search: Options to search results <br/>For more information on searching, see [docs](/docs/filtering-and-sorting#search)., defaults to None
        :type search: SearchOverStarcraftBroodWarMatches, optional
        :param page: Pagination in the form of `page=2` or `page[size]=30&page[number]=2`, defaults to None
        :type page: GetStarcraftBroodWarMatchesUpcomingPage, optional
        :param per_page: Equivalent to `page[size]`, defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: A list of StarCraft Brood War matches
        :rtype: List[Match]
        """

        Validator(FilterOverStarcraftBroodWarMatches).is_optional().validate(filter)
        Validator(RangeOverStarcraftBroodWarMatches).is_optional().validate(range)
        Validator(any).is_array().is_optional().validate(sort)
        Validator(SearchOverStarcraftBroodWarMatches).is_optional().validate(search)
        Validator(GetStarcraftBroodWarMatchesUpcomingPage).is_optional().validate(page)
        Validator(int).is_optional().min(1).max(100).validate(per_page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/starcraft-brood-war/matches/upcoming",
                self.get_default_headers(),
            )
            .add_query("filter", filter, style="deepObject")
            .add_query("range", range, style="deepObject")
            .add_query("sort", sort)
            .add_query("search", search, style="deepObject")
            .add_query("page", page)
            .add_query("per_page", per_page)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return [Match._unmap(item) for item in response]
