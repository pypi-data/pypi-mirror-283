# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.short_tournament import ShortTournament
from ..models.serie import Serie
from ..models.search_over_short_tournaments import SearchOverShortTournaments
from ..models.search_over_series import SearchOverSeries
from ..models.search_over_matches import SearchOverMatches
from ..models.search_over_leagues import SearchOverLeagues
from ..models.range_over_short_tournaments import RangeOverShortTournaments
from ..models.range_over_series import RangeOverSeries
from ..models.range_over_matches import RangeOverMatches
from ..models.range_over_leagues import RangeOverLeagues
from ..models.match import Match
from ..models.league_id_or_slug import LeagueIdOrSlug
from ..models.league import League
from ..models.get_leagues_page import GetLeaguesPage
from ..models.get_leagues_league_id_or_slug_tournaments_page import (
    GetLeaguesLeagueIdOrSlugTournamentsPage,
)
from ..models.get_leagues_league_id_or_slug_series_page import (
    GetLeaguesLeagueIdOrSlugSeriesPage,
)
from ..models.get_leagues_league_id_or_slug_matches_upcoming_page import (
    GetLeaguesLeagueIdOrSlugMatchesUpcomingPage,
)
from ..models.get_leagues_league_id_or_slug_matches_running_page import (
    GetLeaguesLeagueIdOrSlugMatchesRunningPage,
)
from ..models.get_leagues_league_id_or_slug_matches_past_page import (
    GetLeaguesLeagueIdOrSlugMatchesPastPage,
)
from ..models.get_leagues_league_id_or_slug_matches_page import (
    GetLeaguesLeagueIdOrSlugMatchesPage,
)
from ..models.filter_over_short_tournaments import FilterOverShortTournaments
from ..models.filter_over_series import FilterOverSeries
from ..models.filter_over_matches import FilterOverMatches
from ..models.filter_over_leagues import FilterOverLeagues


class LeaguesService(BaseService):

    @cast_models
    def get_leagues(
        self,
        filter: FilterOverLeagues = None,
        range: RangeOverLeagues = None,
        sort: List[any] = None,
        search: SearchOverLeagues = None,
        page: GetLeaguesPage = None,
        per_page: int = None,
    ) -> List[League]:
        """List leagues

        :param filter: Options to filter results. String fields are case sensitive <br/>For more information on filtering, see [docs](/docs/filtering-and-sorting#filter)., defaults to None
        :type filter: FilterOverLeagues, optional
        :param range: Options to select results within ranges <br/>For more information on ranges, see [docs](/docs/filtering-and-sorting#range)., defaults to None
        :type range: RangeOverLeagues, optional
        :param sort: Options to sort results <br/>For more information on sorting, see [docs](/docs/filtering-and-sorting#sort)., defaults to None
        :type sort: List[any], optional
        :param search: Options to search results <br/>For more information on searching, see [docs](/docs/filtering-and-sorting#search)., defaults to None
        :type search: SearchOverLeagues, optional
        :param page: Pagination in the form of `page=2` or `page[size]=30&page[number]=2`, defaults to None
        :type page: GetLeaguesPage, optional
        :param per_page: Equivalent to `page[size]`, defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: A list of leagues
        :rtype: List[League]
        """

        Validator(FilterOverLeagues).is_optional().validate(filter)
        Validator(RangeOverLeagues).is_optional().validate(range)
        Validator(any).is_array().is_optional().validate(sort)
        Validator(SearchOverLeagues).is_optional().validate(search)
        Validator(GetLeaguesPage).is_optional().validate(page)
        Validator(int).is_optional().min(1).max(100).validate(per_page)

        serialized_request = (
            Serializer(f"{self.base_url}/leagues", self.get_default_headers())
            .add_query("filter", filter, style="deepObject")
            .add_query("range", range, style="deepObject")
            .add_query("sort", sort)
            .add_query("search", search, style="deepObject")
            .add_query("page", page)
            .add_query("per_page", per_page)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return [League._unmap(item) for item in response]

    @cast_models
    def get_leagues_league_id_or_slug(
        self, league_id_or_slug: LeagueIdOrSlug
    ) -> League:
        """Get a single league by ID or by slug

        :param league_id_or_slug: A league ID or slug
        :type league_id_or_slug: LeagueIdOrSlug
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: A league
        :rtype: League
        """

        Validator(LeagueIdOrSlug).validate(league_id_or_slug)

        serialized_request = (
            Serializer(
                f"{self.base_url}/leagues/{{league_id_or_slug}}",
                self.get_default_headers(),
            )
            .add_path("league_id_or_slug", league_id_or_slug)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return League._unmap(response)

    @cast_models
    def get_leagues_league_id_or_slug_matches(
        self,
        league_id_or_slug: LeagueIdOrSlug,
        filter: FilterOverMatches = None,
        range: RangeOverMatches = None,
        sort: List[any] = None,
        search: SearchOverMatches = None,
        page: GetLeaguesLeagueIdOrSlugMatchesPage = None,
        per_page: int = None,
    ) -> List[Match]:
        """List matches of the given league

        :param league_id_or_slug: A league ID or slug
        :type league_id_or_slug: LeagueIdOrSlug
        :param filter: Options to filter results. String fields are case sensitive <br/>For more information on filtering, see [docs](/docs/filtering-and-sorting#filter)., defaults to None
        :type filter: FilterOverMatches, optional
        :param range: Options to select results within ranges <br/>For more information on ranges, see [docs](/docs/filtering-and-sorting#range)., defaults to None
        :type range: RangeOverMatches, optional
        :param sort: Options to sort results <br/>For more information on sorting, see [docs](/docs/filtering-and-sorting#sort)., defaults to None
        :type sort: List[any], optional
        :param search: Options to search results <br/>For more information on searching, see [docs](/docs/filtering-and-sorting#search)., defaults to None
        :type search: SearchOverMatches, optional
        :param page: Pagination in the form of `page=2` or `page[size]=30&page[number]=2`, defaults to None
        :type page: GetLeaguesLeagueIdOrSlugMatchesPage, optional
        :param per_page: Equivalent to `page[size]`, defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: A list of matches of any e-sport
        :rtype: List[Match]
        """

        Validator(LeagueIdOrSlug).validate(league_id_or_slug)
        Validator(FilterOverMatches).is_optional().validate(filter)
        Validator(RangeOverMatches).is_optional().validate(range)
        Validator(any).is_array().is_optional().validate(sort)
        Validator(SearchOverMatches).is_optional().validate(search)
        Validator(GetLeaguesLeagueIdOrSlugMatchesPage).is_optional().validate(page)
        Validator(int).is_optional().min(1).max(100).validate(per_page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/leagues/{{league_id_or_slug}}/matches",
                self.get_default_headers(),
            )
            .add_path("league_id_or_slug", league_id_or_slug)
            .add_query("filter", filter, style="deepObject")
            .add_query("range", range, style="deepObject")
            .add_query("sort", sort)
            .add_query("search", search, style="deepObject")
            .add_query("page", page)
            .add_query("per_page", per_page)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return [Match._unmap(item) for item in response]

    @cast_models
    def get_leagues_league_id_or_slug_matches_past(
        self,
        league_id_or_slug: LeagueIdOrSlug,
        filter: FilterOverMatches = None,
        range: RangeOverMatches = None,
        sort: List[any] = None,
        search: SearchOverMatches = None,
        page: GetLeaguesLeagueIdOrSlugMatchesPastPage = None,
        per_page: int = None,
    ) -> List[Match]:
        """List past matches for the given league

        :param league_id_or_slug: A league ID or slug
        :type league_id_or_slug: LeagueIdOrSlug
        :param filter: Options to filter results. String fields are case sensitive <br/>For more information on filtering, see [docs](/docs/filtering-and-sorting#filter)., defaults to None
        :type filter: FilterOverMatches, optional
        :param range: Options to select results within ranges <br/>For more information on ranges, see [docs](/docs/filtering-and-sorting#range)., defaults to None
        :type range: RangeOverMatches, optional
        :param sort: Options to sort results <br/>For more information on sorting, see [docs](/docs/filtering-and-sorting#sort)., defaults to None
        :type sort: List[any], optional
        :param search: Options to search results <br/>For more information on searching, see [docs](/docs/filtering-and-sorting#search)., defaults to None
        :type search: SearchOverMatches, optional
        :param page: Pagination in the form of `page=2` or `page[size]=30&page[number]=2`, defaults to None
        :type page: GetLeaguesLeagueIdOrSlugMatchesPastPage, optional
        :param per_page: Equivalent to `page[size]`, defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: A list of matches of any e-sport
        :rtype: List[Match]
        """

        Validator(LeagueIdOrSlug).validate(league_id_or_slug)
        Validator(FilterOverMatches).is_optional().validate(filter)
        Validator(RangeOverMatches).is_optional().validate(range)
        Validator(any).is_array().is_optional().validate(sort)
        Validator(SearchOverMatches).is_optional().validate(search)
        Validator(GetLeaguesLeagueIdOrSlugMatchesPastPage).is_optional().validate(page)
        Validator(int).is_optional().min(1).max(100).validate(per_page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/leagues/{{league_id_or_slug}}/matches/past",
                self.get_default_headers(),
            )
            .add_path("league_id_or_slug", league_id_or_slug)
            .add_query("filter", filter, style="deepObject")
            .add_query("range", range, style="deepObject")
            .add_query("sort", sort)
            .add_query("search", search, style="deepObject")
            .add_query("page", page)
            .add_query("per_page", per_page)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return [Match._unmap(item) for item in response]

    @cast_models
    def get_leagues_league_id_or_slug_matches_running(
        self,
        league_id_or_slug: LeagueIdOrSlug,
        filter: FilterOverMatches = None,
        range: RangeOverMatches = None,
        sort: List[any] = None,
        search: SearchOverMatches = None,
        page: GetLeaguesLeagueIdOrSlugMatchesRunningPage = None,
        per_page: int = None,
    ) -> List[Match]:
        """List currently running matches for the given league

        :param league_id_or_slug: A league ID or slug
        :type league_id_or_slug: LeagueIdOrSlug
        :param filter: Options to filter results. String fields are case sensitive <br/>For more information on filtering, see [docs](/docs/filtering-and-sorting#filter)., defaults to None
        :type filter: FilterOverMatches, optional
        :param range: Options to select results within ranges <br/>For more information on ranges, see [docs](/docs/filtering-and-sorting#range)., defaults to None
        :type range: RangeOverMatches, optional
        :param sort: Options to sort results <br/>For more information on sorting, see [docs](/docs/filtering-and-sorting#sort)., defaults to None
        :type sort: List[any], optional
        :param search: Options to search results <br/>For more information on searching, see [docs](/docs/filtering-and-sorting#search)., defaults to None
        :type search: SearchOverMatches, optional
        :param page: Pagination in the form of `page=2` or `page[size]=30&page[number]=2`, defaults to None
        :type page: GetLeaguesLeagueIdOrSlugMatchesRunningPage, optional
        :param per_page: Equivalent to `page[size]`, defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: A list of matches of any e-sport
        :rtype: List[Match]
        """

        Validator(LeagueIdOrSlug).validate(league_id_or_slug)
        Validator(FilterOverMatches).is_optional().validate(filter)
        Validator(RangeOverMatches).is_optional().validate(range)
        Validator(any).is_array().is_optional().validate(sort)
        Validator(SearchOverMatches).is_optional().validate(search)
        Validator(GetLeaguesLeagueIdOrSlugMatchesRunningPage).is_optional().validate(
            page
        )
        Validator(int).is_optional().min(1).max(100).validate(per_page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/leagues/{{league_id_or_slug}}/matches/running",
                self.get_default_headers(),
            )
            .add_path("league_id_or_slug", league_id_or_slug)
            .add_query("filter", filter, style="deepObject")
            .add_query("range", range, style="deepObject")
            .add_query("sort", sort)
            .add_query("search", search, style="deepObject")
            .add_query("page", page)
            .add_query("per_page", per_page)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return [Match._unmap(item) for item in response]

    @cast_models
    def get_leagues_league_id_or_slug_matches_upcoming(
        self,
        league_id_or_slug: LeagueIdOrSlug,
        filter: FilterOverMatches = None,
        range: RangeOverMatches = None,
        sort: List[any] = None,
        search: SearchOverMatches = None,
        page: GetLeaguesLeagueIdOrSlugMatchesUpcomingPage = None,
        per_page: int = None,
    ) -> List[Match]:
        """List upcoming matches for the given league

        :param league_id_or_slug: A league ID or slug
        :type league_id_or_slug: LeagueIdOrSlug
        :param filter: Options to filter results. String fields are case sensitive <br/>For more information on filtering, see [docs](/docs/filtering-and-sorting#filter)., defaults to None
        :type filter: FilterOverMatches, optional
        :param range: Options to select results within ranges <br/>For more information on ranges, see [docs](/docs/filtering-and-sorting#range)., defaults to None
        :type range: RangeOverMatches, optional
        :param sort: Options to sort results <br/>For more information on sorting, see [docs](/docs/filtering-and-sorting#sort)., defaults to None
        :type sort: List[any], optional
        :param search: Options to search results <br/>For more information on searching, see [docs](/docs/filtering-and-sorting#search)., defaults to None
        :type search: SearchOverMatches, optional
        :param page: Pagination in the form of `page=2` or `page[size]=30&page[number]=2`, defaults to None
        :type page: GetLeaguesLeagueIdOrSlugMatchesUpcomingPage, optional
        :param per_page: Equivalent to `page[size]`, defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: A list of matches of any e-sport
        :rtype: List[Match]
        """

        Validator(LeagueIdOrSlug).validate(league_id_or_slug)
        Validator(FilterOverMatches).is_optional().validate(filter)
        Validator(RangeOverMatches).is_optional().validate(range)
        Validator(any).is_array().is_optional().validate(sort)
        Validator(SearchOverMatches).is_optional().validate(search)
        Validator(GetLeaguesLeagueIdOrSlugMatchesUpcomingPage).is_optional().validate(
            page
        )
        Validator(int).is_optional().min(1).max(100).validate(per_page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/leagues/{{league_id_or_slug}}/matches/upcoming",
                self.get_default_headers(),
            )
            .add_path("league_id_or_slug", league_id_or_slug)
            .add_query("filter", filter, style="deepObject")
            .add_query("range", range, style="deepObject")
            .add_query("sort", sort)
            .add_query("search", search, style="deepObject")
            .add_query("page", page)
            .add_query("per_page", per_page)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return [Match._unmap(item) for item in response]

    @cast_models
    def get_leagues_league_id_or_slug_series(
        self,
        league_id_or_slug: LeagueIdOrSlug,
        filter: FilterOverSeries = None,
        range: RangeOverSeries = None,
        sort: List[any] = None,
        search: SearchOverSeries = None,
        page: GetLeaguesLeagueIdOrSlugSeriesPage = None,
        per_page: int = None,
    ) -> List[Serie]:
        """List series for the given league

        :param league_id_or_slug: A league ID or slug
        :type league_id_or_slug: LeagueIdOrSlug
        :param filter: Options to filter results. String fields are case sensitive <br/>For more information on filtering, see [docs](/docs/filtering-and-sorting#filter)., defaults to None
        :type filter: FilterOverSeries, optional
        :param range: Options to select results within ranges <br/>For more information on ranges, see [docs](/docs/filtering-and-sorting#range)., defaults to None
        :type range: RangeOverSeries, optional
        :param sort: Options to sort results <br/>For more information on sorting, see [docs](/docs/filtering-and-sorting#sort)., defaults to None
        :type sort: List[any], optional
        :param search: Options to search results <br/>For more information on searching, see [docs](/docs/filtering-and-sorting#search)., defaults to None
        :type search: SearchOverSeries, optional
        :param page: Pagination in the form of `page=2` or `page[size]=30&page[number]=2`, defaults to None
        :type page: GetLeaguesLeagueIdOrSlugSeriesPage, optional
        :param per_page: Equivalent to `page[size]`, defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: A list of series
        :rtype: List[Serie]
        """

        Validator(LeagueIdOrSlug).validate(league_id_or_slug)
        Validator(FilterOverSeries).is_optional().validate(filter)
        Validator(RangeOverSeries).is_optional().validate(range)
        Validator(any).is_array().is_optional().validate(sort)
        Validator(SearchOverSeries).is_optional().validate(search)
        Validator(GetLeaguesLeagueIdOrSlugSeriesPage).is_optional().validate(page)
        Validator(int).is_optional().min(1).max(100).validate(per_page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/leagues/{{league_id_or_slug}}/series",
                self.get_default_headers(),
            )
            .add_path("league_id_or_slug", league_id_or_slug)
            .add_query("filter", filter, style="deepObject")
            .add_query("range", range, style="deepObject")
            .add_query("sort", sort)
            .add_query("search", search, style="deepObject")
            .add_query("page", page)
            .add_query("per_page", per_page)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return [Serie._unmap(item) for item in response]

    @cast_models
    def get_leagues_league_id_or_slug_tournaments(
        self,
        league_id_or_slug: LeagueIdOrSlug,
        filter: FilterOverShortTournaments = None,
        range: RangeOverShortTournaments = None,
        sort: List[any] = None,
        search: SearchOverShortTournaments = None,
        page: GetLeaguesLeagueIdOrSlugTournamentsPage = None,
        per_page: int = None,
    ) -> List[ShortTournament]:
        """List tournaments of the given league

        :param league_id_or_slug: A league ID or slug
        :type league_id_or_slug: LeagueIdOrSlug
        :param filter: Options to filter results. String fields are case sensitive <br/>For more information on filtering, see [docs](/docs/filtering-and-sorting#filter)., defaults to None
        :type filter: FilterOverShortTournaments, optional
        :param range: Options to select results within ranges <br/>For more information on ranges, see [docs](/docs/filtering-and-sorting#range)., defaults to None
        :type range: RangeOverShortTournaments, optional
        :param sort: Options to sort results <br/>For more information on sorting, see [docs](/docs/filtering-and-sorting#sort)., defaults to None
        :type sort: List[any], optional
        :param search: Options to search results <br/>For more information on searching, see [docs](/docs/filtering-and-sorting#search)., defaults to None
        :type search: SearchOverShortTournaments, optional
        :param page: Pagination in the form of `page=2` or `page[size]=30&page[number]=2`, defaults to None
        :type page: GetLeaguesLeagueIdOrSlugTournamentsPage, optional
        :param per_page: Equivalent to `page[size]`, defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: A list of tournaments
        :rtype: List[ShortTournament]
        """

        Validator(LeagueIdOrSlug).validate(league_id_or_slug)
        Validator(FilterOverShortTournaments).is_optional().validate(filter)
        Validator(RangeOverShortTournaments).is_optional().validate(range)
        Validator(any).is_array().is_optional().validate(sort)
        Validator(SearchOverShortTournaments).is_optional().validate(search)
        Validator(GetLeaguesLeagueIdOrSlugTournamentsPage).is_optional().validate(page)
        Validator(int).is_optional().min(1).max(100).validate(per_page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/leagues/{{league_id_or_slug}}/tournaments",
                self.get_default_headers(),
            )
            .add_path("league_id_or_slug", league_id_or_slug)
            .add_query("filter", filter, style="deepObject")
            .add_query("range", range, style="deepObject")
            .add_query("sort", sort)
            .add_query("search", search, style="deepObject")
            .add_query("page", page)
            .add_query("per_page", per_page)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return [ShortTournament._unmap(item) for item in response]
