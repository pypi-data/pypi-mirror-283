# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.live import Live
from ..models.get_lives_page import GetLivesPage


class LivesService(BaseService):

    @cast_models
    def get_lives(self, page: GetLivesPage = None, per_page: int = None) -> List[Live]:
        """List currently running live matches, available from pandascore with live websocket data.

        :param page: Pagination in the form of `page=2` or `page[size]=30&page[number]=2`, defaults to None
        :type page: GetLivesPage, optional
        :param per_page: Equivalent to `page[size]`, defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: A list of games being played or about to be played
        :rtype: List[Live]
        """

        Validator(GetLivesPage).is_optional().validate(page)
        Validator(int).is_optional().min(1).max(100).validate(per_page)

        serialized_request = (
            Serializer(f"{self.base_url}/lives", self.get_default_headers())
            .add_query("page", page)
            .add_query("per_page", per_page)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return [Live._unmap(item) for item in response]
