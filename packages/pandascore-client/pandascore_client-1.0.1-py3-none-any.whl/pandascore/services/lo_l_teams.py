# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.team import Team
from ..models.serie_id_or_slug import SerieIdOrSlug
from ..models.search_over_lo_l_teams import SearchOverLoLTeams
from ..models.range_over_lo_l_teams import RangeOverLoLTeams
from ..models.get_lol_teams_page import GetLolTeamsPage
from ..models.get_lol_series_serie_id_or_slug_teams_page import (
    GetLolSeriesSerieIdOrSlugTeamsPage,
)
from ..models.filter_over_lo_l_teams import FilterOverLoLTeams


class LoLTeamsService(BaseService):

    @cast_models
    def get_lol_series_serie_id_or_slug_teams(
        self,
        serie_id_or_slug: SerieIdOrSlug,
        filter: FilterOverLoLTeams = None,
        range: RangeOverLoLTeams = None,
        sort: List[any] = None,
        search: SearchOverLoLTeams = None,
        page: GetLolSeriesSerieIdOrSlugTeamsPage = None,
        per_page: int = None,
    ) -> List[Team]:
        """List teams for the League of Legends videogame for a given serie

        :param serie_id_or_slug: A serie ID or slug
        :type serie_id_or_slug: SerieIdOrSlug
        :param filter: Options to filter results. String fields are case sensitive <br/>For more information on filtering, see [docs](/docs/filtering-and-sorting#filter)., defaults to None
        :type filter: FilterOverLoLTeams, optional
        :param range: Options to select results within ranges <br/>For more information on ranges, see [docs](/docs/filtering-and-sorting#range)., defaults to None
        :type range: RangeOverLoLTeams, optional
        :param sort: Options to sort results <br/>For more information on sorting, see [docs](/docs/filtering-and-sorting#sort)., defaults to None
        :type sort: List[any], optional
        :param search: Options to search results <br/>For more information on searching, see [docs](/docs/filtering-and-sorting#search)., defaults to None
        :type search: SearchOverLoLTeams, optional
        :param page: Pagination in the form of `page=2` or `page[size]=30&page[number]=2`, defaults to None
        :type page: GetLolSeriesSerieIdOrSlugTeamsPage, optional
        :param per_page: Equivalent to `page[size]`, defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: A list of League-of-Legends teams
        :rtype: List[Team]
        """

        Validator(SerieIdOrSlug).validate(serie_id_or_slug)
        Validator(FilterOverLoLTeams).is_optional().validate(filter)
        Validator(RangeOverLoLTeams).is_optional().validate(range)
        Validator(any).is_array().is_optional().validate(sort)
        Validator(SearchOverLoLTeams).is_optional().validate(search)
        Validator(GetLolSeriesSerieIdOrSlugTeamsPage).is_optional().validate(page)
        Validator(int).is_optional().min(1).max(100).validate(per_page)

        serialized_request = (
            Serializer(
                f"{self.base_url}/lol/series/{{serie_id_or_slug}}/teams",
                self.get_default_headers(),
            )
            .add_path("serie_id_or_slug", serie_id_or_slug)
            .add_query("filter", filter, style="deepObject")
            .add_query("range", range, style="deepObject")
            .add_query("sort", sort)
            .add_query("search", search, style="deepObject")
            .add_query("page", page)
            .add_query("per_page", per_page)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return [Team._unmap(item) for item in response]

    @cast_models
    def get_lol_teams(
        self,
        filter: FilterOverLoLTeams = None,
        range: RangeOverLoLTeams = None,
        sort: List[any] = None,
        search: SearchOverLoLTeams = None,
        page: GetLolTeamsPage = None,
        per_page: int = None,
    ) -> List[Team]:
        """List teams for the League of Legends videogame

        :param filter: Options to filter results. String fields are case sensitive <br/>For more information on filtering, see [docs](/docs/filtering-and-sorting#filter)., defaults to None
        :type filter: FilterOverLoLTeams, optional
        :param range: Options to select results within ranges <br/>For more information on ranges, see [docs](/docs/filtering-and-sorting#range)., defaults to None
        :type range: RangeOverLoLTeams, optional
        :param sort: Options to sort results <br/>For more information on sorting, see [docs](/docs/filtering-and-sorting#sort)., defaults to None
        :type sort: List[any], optional
        :param search: Options to search results <br/>For more information on searching, see [docs](/docs/filtering-and-sorting#search)., defaults to None
        :type search: SearchOverLoLTeams, optional
        :param page: Pagination in the form of `page=2` or `page[size]=30&page[number]=2`, defaults to None
        :type page: GetLolTeamsPage, optional
        :param per_page: Equivalent to `page[size]`, defaults to None
        :type per_page: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: A list of League-of-Legends teams
        :rtype: List[Team]
        """

        Validator(FilterOverLoLTeams).is_optional().validate(filter)
        Validator(RangeOverLoLTeams).is_optional().validate(range)
        Validator(any).is_array().is_optional().validate(sort)
        Validator(SearchOverLoLTeams).is_optional().validate(search)
        Validator(GetLolTeamsPage).is_optional().validate(page)
        Validator(int).is_optional().min(1).max(100).validate(per_page)

        serialized_request = (
            Serializer(f"{self.base_url}/lol/teams", self.get_default_headers())
            .add_query("filter", filter, style="deepObject")
            .add_query("range", range, style="deepObject")
            .add_query("sort", sort)
            .add_query("search", search, style="deepObject")
            .add_query("page", page)
            .add_query("per_page", per_page)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return [Team._unmap(item) for item in response]
