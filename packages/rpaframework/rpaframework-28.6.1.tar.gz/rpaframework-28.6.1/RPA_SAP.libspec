<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="RPA.SAP" type="LIBRARY" format="ROBOT" scope="GLOBAL" generated="2024-07-04T11:59:07+00:00" specversion="5" source="./RPA/SAP.py" lineno="27">
<version/>
<doc>This library wraps the upstream [https://frankvanderkuur.github.io/SapGuiLibrary.html|SapGuiLibrary].

Keywords are only available in Windows.</doc>
<tags>
</tags>
<inits>
<init name="__init__" lineno="36">
<arguments repr="*args, **kwargs">
<arg kind="VAR_POSITIONAL" required="false" repr="*args">
<name>args</name>
</arg>
<arg kind="VAR_NAMED" required="false" repr="**kwargs">
<name>kwargs</name>
</arg>
</arguments>
<doc>Initialize self.  See help(type(self)) for accurate signature.</doc>
<shortdoc>Initialize self.  See help(type(self)) for accurate signature.</shortdoc>
</init>
</inits>
<keywords>
<kw name="Focus And Click" lineno="59">
<arguments repr="element_id: str, wait_time: float | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="element_id: str">
<name>element_id</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="wait_time: float | None = None">
<name>wait_time</name>
<type name="Union" union="true">float | None<type name="float" typedoc="float">float</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
</arguments>
<doc>Set focus into the element and click it.

Note. The default library wait time can be adjusted using `Set Explicit Wait`
keyword. Library's `explicit_wait` will be used if `wait_time` parameter
is not set.

:param element_id: locator for the element
:param wait_time: the wait time after the action</doc>
<shortdoc>Set focus into the element and click it.</shortdoc>
</kw>
<kw name="Focus And Input Text" lineno="75">
<arguments repr="element_id: str, text: str, wait_time: float | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="element_id: str">
<name>element_id</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text: str">
<name>text</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="wait_time: float | None = None">
<name>wait_time</name>
<type name="Union" union="true">float | None<type name="float" typedoc="float">float</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
</arguments>
<doc>Set focus into the element and input text into it.

Note. The default library wait time can be adjusted using `Set Explicit Wait`
keyword. Library's `explicit_wait` will be used if `wait_time` parameter
is not set.

:param element_id: locator for the element
:param text: text to be inputted
:param wait_time: the wait time after the action</doc>
<shortdoc>Set focus into the element and input text into it.</shortdoc>
</kw>
<kw name="Generic Click Element" lineno="150">
<arguments repr="element_id, click_type=press">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="element_id">
<name>element_id</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="click_type=press">
<name>click_type</name>
<default>press</default>
</arg>
</arguments>
<doc>Performs a single click on a given element.

Differs from `Click Element` keyword so that element type is ignored, instead
`click_type` (either `press` or `select`) is performed on the element if
possible.

In case you want to change a value of an element like checkboxes of selecting
an option in dropdown lists, use `select checkbox` or
`select from list by label` instead.

:param element_id: locator for the element
:param click_type: either ``press`` (default) or ``select``</doc>
<shortdoc>Performs a single click on a given element.</shortdoc>
</kw>
<kw name="Generic Input Password" lineno="94">
<arguments repr="element_id, password">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="element_id">
<name>element_id</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="password">
<name>password</name>
</arg>
</arguments>
<doc>Inserts the given password into the text field identified by locator.

This keyword does NOT depend on the type of the element. Will set
password to the element's 'text' attribute if possible.

The password is not recorded in the log.

:param element_id: locator for the element
:param password: password to be inputted</doc>
<shortdoc>Inserts the given password into the text field identified by locator.</shortdoc>
</kw>
<kw name="Generic Input Text" lineno="107">
<arguments repr="element_id, text">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="element_id">
<name>element_id</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text">
<name>text</name>
</arg>
</arguments>
<doc>Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.

This keyword does NOT depend on the type of the element. Will set
text to the element's 'text' attribute if possible.

:param element_id: locator for the element
:param text: text to be inputted</doc>
<shortdoc>Inserts the given text into the text field identified by locator. Use keyword `input password` to insert a password in a text field.</shortdoc>
</kw>
<kw name="Get Cell Value" lineno="179">
<arguments repr="table_id, row_num, col_id">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="table_id">
<name>table_id</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="row_num">
<name>row_num</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="col_id">
<name>col_id</name>
</arg>
</arguments>
<doc>Returns the cell value for the specified cell.

:param table_id: locator for the table element
:param row_num: table row number
:param col_id: table cell id
:return: text in the specified cell</doc>
<shortdoc>Returns the cell value for the specified cell.</shortdoc>
</kw>
<kw name="Get Element Type Of Object" lineno="119">
<arguments repr="element">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="element">
<name>element</name>
</arg>
</arguments>
<doc>Returns the Sap element type for the given element.

:param element: SAP element
:return: type of the SAP element</doc>
<shortdoc>Returns the Sap element type for the given element.</shortdoc>
</kw>
<kw name="Get Statusbar Type" lineno="43">
<arguments repr="window: str | None = wnd[0]">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="window: str | None = wnd[0]">
<name>window</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>wnd[0]</default>
</arg>
</arguments>
<doc>Retrieves the messageType in the statusbar the given window.

Takes screenshot on error.

:param window: locator for the statusbar, default 'wnd[0]'
:return: messageType of the /sbar element or empty string</doc>
<shortdoc>Retrieves the messageType in the statusbar the given window.</shortdoc>
</kw>
<kw name="Press F1" lineno="197">
<arguments repr="element_id: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="element_id: str">
<name>element_id</name>
<type name="str" typedoc="string">str</type>
</arg>
</arguments>
<doc>Calls the PressF1 function on the passed element id.
The element can be a textfield or a GridView inside a shell.

:param element_id: id of the SAP element</doc>
<shortdoc>Calls the PressF1 function on the passed element id. The element can be a textfield or a GridView inside a shell.</shortdoc>
</kw>
<kw name="Press F4" lineno="210">
<arguments repr="element_id: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="element_id: str">
<name>element_id</name>
<type name="str" typedoc="string">str</type>
</arg>
</arguments>
<doc>Calls the PressF4 function on the passed element id.
The element can be a textfield or a GridView inside a shell.

:param element_id: id of the SAP element</doc>
<shortdoc>Calls the PressF4 function on the passed element id. The element can be a textfield or a GridView inside a shell.</shortdoc>
</kw>
</keywords>
<datatypes>
</datatypes>
<typedocs>
<type name="float" type="Standard">
<doc>Conversion is done using Python's
[https://docs.python.org/library/functions.html#float|float] built-in function.

Starting from RF 4.1, spaces and underscores can be used as visual separators
for digit grouping purposes.

Examples: ``3.14``, ``2.9979e8``, ``10 000.000 01``
</doc>
<accepts>
<type>string</type>
<type>Real</type>
</accepts>
<usages>
<usage>Focus And Click</usage>
<usage>Focus And Input Text</usage>
</usages>
</type>
<type name="None" type="Standard">
<doc>String ``NONE`` (case-insensitive) is converted to Python ``None`` object.
Other values cause an error.
</doc>
<accepts>
<type>string</type>
</accepts>
<usages>
<usage>Focus And Click</usage>
<usage>Focus And Input Text</usage>
<usage>Get Statusbar Type</usage>
</usages>
</type>
<type name="string" type="Standard">
<doc>All arguments are converted to Unicode strings.</doc>
<accepts>
<type>Any</type>
</accepts>
<usages>
<usage>Focus And Click</usage>
<usage>Focus And Input Text</usage>
<usage>Get Statusbar Type</usage>
<usage>Press F1</usage>
<usage>Press F4</usage>
</usages>
</type>
</typedocs>
</keywordspec>
