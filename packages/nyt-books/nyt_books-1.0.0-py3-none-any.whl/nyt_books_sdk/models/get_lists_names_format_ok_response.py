# This file was generated by liblab | https://liblab.com/

from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel


class Updated(Enum):
    """An enumeration representing different categories.

    :cvar WEEKLY: "WEEKLY"
    :vartype WEEKLY: str
    :cvar MONTHLY: "MONTHLY"
    :vartype MONTHLY: str
    """

    WEEKLY = "WEEKLY"
    MONTHLY = "MONTHLY"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, Updated._member_map_.values()))


@JsonMap({})
class GetListsNamesFormatOkResponseResults(BaseModel):
    """GetListsNamesFormatOkResponseResults

    :param list_name: list_name, defaults to None
    :type list_name: str, optional
    :param display_name: display_name, defaults to None
    :type display_name: str, optional
    :param list_name_encoded: list_name_encoded, defaults to None
    :type list_name_encoded: str, optional
    :param oldest_published_date: oldest_published_date, defaults to None
    :type oldest_published_date: str, optional
    :param newest_published_date: newest_published_date, defaults to None
    :type newest_published_date: str, optional
    :param updated: updated, defaults to None
    :type updated: Updated, optional
    """

    def __init__(
        self,
        list_name: str = None,
        display_name: str = None,
        list_name_encoded: str = None,
        oldest_published_date: str = None,
        newest_published_date: str = None,
        updated: Updated = None,
    ):
        if list_name is not None:
            self.list_name = list_name
        if display_name is not None:
            self.display_name = display_name
        if list_name_encoded is not None:
            self.list_name_encoded = list_name_encoded
        if oldest_published_date is not None:
            self.oldest_published_date = oldest_published_date
        if newest_published_date is not None:
            self.newest_published_date = newest_published_date
        if updated is not None:
            self.updated = self._enum_matching(updated, Updated.list(), "updated")


@JsonMap({})
class GetListsNamesFormatOkResponse(BaseModel):
    """GetListsNamesFormatOkResponse

    :param status: status, defaults to None
    :type status: str, optional
    :param copyright: copyright, defaults to None
    :type copyright: str, optional
    :param num_results: num_results, defaults to None
    :type num_results: int, optional
    :param results: results, defaults to None
    :type results: List[GetListsNamesFormatOkResponseResults], optional
    """

    def __init__(
        self,
        status: str = None,
        copyright: str = None,
        num_results: int = None,
        results: List[GetListsNamesFormatOkResponseResults] = None,
    ):
        if status is not None:
            self.status = status
        if copyright is not None:
            self.copyright = copyright
        if num_results is not None:
            self.num_results = num_results
        if results is not None:
            self.results = self._define_list(
                results, GetListsNamesFormatOkResponseResults
            )
