# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel


@JsonMap({})
class BooksIsbns(BaseModel):
    """BooksIsbns

    :param isbn10: isbn10, defaults to None
    :type isbn10: str, optional
    :param isbn13: isbn13, defaults to None
    :type isbn13: str, optional
    """

    def __init__(self, isbn10: str = None, isbn13: str = None):
        if isbn10 is not None:
            self.isbn10 = isbn10
        if isbn13 is not None:
            self.isbn13 = isbn13


@JsonMap({})
class BooksBuyLinks1(BaseModel):
    """BooksBuyLinks1

    :param name: name, defaults to None
    :type name: str, optional
    :param url: url, defaults to None
    :type url: str, optional
    """

    def __init__(self, name: str = None, url: str = None):
        if name is not None:
            self.name = name
        if url is not None:
            self.url = url


@JsonMap({})
class ResultsBooks(BaseModel):
    """ResultsBooks

    :param rank: rank, defaults to None
    :type rank: int, optional
    :param rank_last_week: rank_last_week, defaults to None
    :type rank_last_week: int, optional
    :param weeks_on_list: weeks_on_list, defaults to None
    :type weeks_on_list: int, optional
    :param asterisk: asterisk, defaults to None
    :type asterisk: int, optional
    :param dagger: dagger, defaults to None
    :type dagger: int, optional
    :param primary_isbn10: primary_isbn10, defaults to None
    :type primary_isbn10: str, optional
    :param primary_isbn13: primary_isbn13, defaults to None
    :type primary_isbn13: str, optional
    :param publisher: publisher, defaults to None
    :type publisher: str, optional
    :param description: description, defaults to None
    :type description: str, optional
    :param price: price, defaults to None
    :type price: str, optional
    :param title: title, defaults to None
    :type title: str, optional
    :param author: author, defaults to None
    :type author: str, optional
    :param contributor: contributor, defaults to None
    :type contributor: str, optional
    :param contributor_note: contributor_note, defaults to None
    :type contributor_note: str, optional
    :param book_image: book_image, defaults to None
    :type book_image: str, optional
    :param book_image_width: book_image_width, defaults to None
    :type book_image_width: int, optional
    :param book_image_height: book_image_height, defaults to None
    :type book_image_height: int, optional
    :param amazon_product_url: amazon_product_url, defaults to None
    :type amazon_product_url: str, optional
    :param age_group: age_group, defaults to None
    :type age_group: str, optional
    :param book_review_link: book_review_link, defaults to None
    :type book_review_link: str, optional
    :param first_chapter_link: first_chapter_link, defaults to None
    :type first_chapter_link: str, optional
    :param sunday_review_link: sunday_review_link, defaults to None
    :type sunday_review_link: str, optional
    :param article_chapter_link: article_chapter_link, defaults to None
    :type article_chapter_link: str, optional
    :param isbns: isbns, defaults to None
    :type isbns: List[BooksIsbns], optional
    :param buy_links: buy_links, defaults to None
    :type buy_links: List[BooksBuyLinks1], optional
    :param book_uri: book_uri, defaults to None
    :type book_uri: str, optional
    """

    def __init__(
        self,
        rank: int = None,
        rank_last_week: int = None,
        weeks_on_list: int = None,
        asterisk: int = None,
        dagger: int = None,
        primary_isbn10: str = None,
        primary_isbn13: str = None,
        publisher: str = None,
        description: str = None,
        price: str = None,
        title: str = None,
        author: str = None,
        contributor: str = None,
        contributor_note: str = None,
        book_image: str = None,
        book_image_width: int = None,
        book_image_height: int = None,
        amazon_product_url: str = None,
        age_group: str = None,
        book_review_link: str = None,
        first_chapter_link: str = None,
        sunday_review_link: str = None,
        article_chapter_link: str = None,
        isbns: List[BooksIsbns] = None,
        buy_links: List[BooksBuyLinks1] = None,
        book_uri: str = None,
    ):
        if rank is not None:
            self.rank = rank
        if rank_last_week is not None:
            self.rank_last_week = rank_last_week
        if weeks_on_list is not None:
            self.weeks_on_list = weeks_on_list
        if asterisk is not None:
            self.asterisk = asterisk
        if dagger is not None:
            self.dagger = dagger
        if primary_isbn10 is not None:
            self.primary_isbn10 = primary_isbn10
        if primary_isbn13 is not None:
            self.primary_isbn13 = primary_isbn13
        if publisher is not None:
            self.publisher = publisher
        if description is not None:
            self.description = description
        if price is not None:
            self.price = price
        if title is not None:
            self.title = title
        if author is not None:
            self.author = author
        if contributor is not None:
            self.contributor = contributor
        if contributor_note is not None:
            self.contributor_note = contributor_note
        if book_image is not None:
            self.book_image = book_image
        if book_image_width is not None:
            self.book_image_width = book_image_width
        if book_image_height is not None:
            self.book_image_height = book_image_height
        if amazon_product_url is not None:
            self.amazon_product_url = amazon_product_url
        if age_group is not None:
            self.age_group = age_group
        if book_review_link is not None:
            self.book_review_link = book_review_link
        if first_chapter_link is not None:
            self.first_chapter_link = first_chapter_link
        if sunday_review_link is not None:
            self.sunday_review_link = sunday_review_link
        if article_chapter_link is not None:
            self.article_chapter_link = article_chapter_link
        if isbns is not None:
            self.isbns = self._define_list(isbns, BooksIsbns)
        if buy_links is not None:
            self.buy_links = self._define_list(buy_links, BooksBuyLinks1)
        if book_uri is not None:
            self.book_uri = book_uri


@JsonMap({})
class GetListsDateListJsonOkResponseResults(BaseModel):
    """GetListsDateListJsonOkResponseResults

    :param list_name: list_name, defaults to None
    :type list_name: str, optional
    :param list_name_encoded: list_name_encoded, defaults to None
    :type list_name_encoded: str, optional
    :param bestsellers_date: bestsellers_date, defaults to None
    :type bestsellers_date: str, optional
    :param bestsellers_date_description: bestsellers_date_description, defaults to None
    :type bestsellers_date_description: str, optional
    :param published_date: published_date, defaults to None
    :type published_date: str, optional
    :param previous_published_date: previous_published_date, defaults to None
    :type previous_published_date: str, optional
    :param display_name: display_name, defaults to None
    :type display_name: str, optional
    :param normal_list_ends_at: normal_list_ends_at, defaults to None
    :type normal_list_ends_at: int, optional
    :param updated: updated, defaults to None
    :type updated: str, optional
    :param books: books, defaults to None
    :type books: List[ResultsBooks], optional
    """

    def __init__(
        self,
        list_name: str = None,
        list_name_encoded: str = None,
        bestsellers_date: str = None,
        bestsellers_date_description: str = None,
        published_date: str = None,
        previous_published_date: str = None,
        display_name: str = None,
        normal_list_ends_at: int = None,
        updated: str = None,
        books: List[ResultsBooks] = None,
    ):
        if list_name is not None:
            self.list_name = list_name
        if list_name_encoded is not None:
            self.list_name_encoded = list_name_encoded
        if bestsellers_date is not None:
            self.bestsellers_date = bestsellers_date
        if bestsellers_date_description is not None:
            self.bestsellers_date_description = bestsellers_date_description
        if published_date is not None:
            self.published_date = published_date
        if previous_published_date is not None:
            self.previous_published_date = previous_published_date
        if display_name is not None:
            self.display_name = display_name
        if normal_list_ends_at is not None:
            self.normal_list_ends_at = normal_list_ends_at
        if updated is not None:
            self.updated = updated
        if books is not None:
            self.books = self._define_list(books, ResultsBooks)


@JsonMap({})
class GetListsDateListJsonOkResponse(BaseModel):
    """GetListsDateListJsonOkResponse

    :param status: status, defaults to None
    :type status: str, optional
    :param copyright: copyright, defaults to None
    :type copyright: str, optional
    :param num_results: num_results, defaults to None
    :type num_results: int, optional
    :param last_modified: last_modified, defaults to None
    :type last_modified: str, optional
    :param results: results, defaults to None
    :type results: List[GetListsDateListJsonOkResponseResults], optional
    """

    def __init__(
        self,
        status: str = None,
        copyright: str = None,
        num_results: int = None,
        last_modified: str = None,
        results: List[GetListsDateListJsonOkResponseResults] = None,
    ):
        if status is not None:
            self.status = status
        if copyright is not None:
            self.copyright = copyright
        if num_results is not None:
            self.num_results = num_results
        if last_modified is not None:
            self.last_modified = last_modified
        if results is not None:
            self.results = self._define_list(
                results, GetListsDateListJsonOkResponseResults
            )
