# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.get_reviews_format_ok_response import GetReviewsFormatOkResponse


class ReviewsJsonService(BaseService):

    @cast_models
    def get_reviews_format(
        self, isbn: int = None, title: str = None, author: str = None
    ) -> GetReviewsFormatOkResponse:
        """Get book reviews.

        :param isbn: Searching by ISBN is the recommended method. You can enter 10- or 13-digit ISBNs., defaults to None
        :type isbn: int, optional
        :param title: You’ll need to enter the full title of the book. Spaces in the title will be converted into the characters %20., defaults to None
        :type title: str, optional
        :param author: You’ll need to enter the author’s first and last name, separated by a space. This space will be converted into the characters %20., defaults to None
        :type author: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Book reviews.
        :rtype: GetReviewsFormatOkResponse
        """

        Validator(int).is_optional().validate(isbn)
        Validator(str).is_optional().validate(title)
        Validator(str).is_optional().validate(author)

        serialized_request = (
            Serializer(f"{self.base_url}/reviews.json", self.get_default_headers())
            .add_query("isbn", isbn)
            .add_query("title", title)
            .add_query("author", author)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return GetReviewsFormatOkResponse._unmap(response)
