# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.overview_response import OverviewResponse
from ..models.get_lists_names_format_ok_response import GetListsNamesFormatOkResponse
from ..models.get_lists_date_list_json_ok_response import GetListsDateListJsonOkResponse
from ..models.get_lists_best_sellers_history_json_ok_response import (
    GetListsBestSellersHistoryJsonOkResponse,
)


class ListsService(BaseService):

    @cast_models
    def get_lists_date_list_json(
        self, date_: str, list: str, offset: int = None
    ) -> GetListsDateListJsonOkResponse:
        """Get Best Sellers list by date.

        :param date_: YYYY-MM-DD or "current"

        The date the best sellers list was published on NYTimes.com.  Use "current" to get latest list.
        :type date_: str
        :param list: Name of the Best Sellers List (e.g. hardcover-fiction). You can get the full list of names from the /lists/names.json service.
        :type list: str
        :param offset: Sets the starting point of the result set (0, 20, ...).  Used to paginate thru books if list has more than 20. Defaults to 0.  The num_results field indicates how many books are in the list., defaults to None
        :type offset: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Best Sellers list books.
        :rtype: GetListsDateListJsonOkResponse
        """

        Validator(str).pattern("^(\d{4}-\d{2}-\d{2}|current)$").validate(date_)
        Validator(str).validate(list)
        Validator(int).is_optional().validate(offset)

        serialized_request = (
            Serializer(
                f"{self.base_url}/lists/{{date}}/{{list}}.json",
                self.get_default_headers(),
            )
            .add_path("date", date_)
            .add_path("list", list)
            .add_query("offset", offset)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return GetListsDateListJsonOkResponse._unmap(response)

    @cast_models
    def get_lists_full_overview_format(
        self, published_date: str = None
    ) -> OverviewResponse:
        """Get all books for all the Best Sellers lists for specified date.

        :param published_date: YYYY-MM-DD

        The best-seller list publication date.
        You do not have to specify the exact date the list was published. The service will search forward (into the future) for the closest publication date to the date you specify. For example, a request for lists/overview/2013-05-22 will retrieve the list that was published on 05-26.

        If you do not include a published date, the current week's best sellers lists will be returned., defaults to None
        :type published_date: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Full overview of Best Sellers lists.
        :rtype: OverviewResponse
        """

        Validator(str).is_optional().pattern("^\d{4}-\d{2}-\d{2}$").validate(
            published_date
        )

        serialized_request = (
            Serializer(
                f"{self.base_url}/lists/full-overview.json", self.get_default_headers()
            )
            .add_query("published_date", published_date)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return OverviewResponse._unmap(response)

    @cast_models
    def get_lists_overview_format(self, published_date: str = None) -> OverviewResponse:
        """Get top 5 books for all the Best Sellers lists for specified date.

        :param published_date: YYYY-MM-DD

        The best-seller list publication date.
        You do not have to specify the exact date the list was published. The service will search forward (into the future) for the closest publication date to the date you specify. For example, a request for lists/overview/2013-05-22 will retrieve the list that was published on 05-26.

        If you do not include a published date, the current week's best sellers lists will be returned., defaults to None
        :type published_date: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Overview of Best Sellers lists.
        :rtype: OverviewResponse
        """

        Validator(str).is_optional().pattern("^\d{4}-\d{2}-\d{2}$").validate(
            published_date
        )

        serialized_request = (
            Serializer(
                f"{self.base_url}/lists/overview.json", self.get_default_headers()
            )
            .add_query("published_date", published_date)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return OverviewResponse._unmap(response)

    @cast_models
    def get_lists_names_format(self) -> GetListsNamesFormatOkResponse:
        """Get Best Sellers list names.

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Get Best Sellers list names.
        :rtype: GetListsNamesFormatOkResponse
        """

        serialized_request = (
            Serializer(f"{self.base_url}/lists/names.json", self.get_default_headers())
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return GetListsNamesFormatOkResponse._unmap(response)

    @cast_models
    def get_lists_best_sellers_history_json(
        self,
        age_group: str = None,
        author: str = None,
        contributor: str = None,
        isbn: str = None,
        offset: int = None,
        price: str = None,
        publisher: str = None,
        title: str = None,
    ) -> GetListsBestSellersHistoryJsonOkResponse:
        """Get Best Sellers list history.

        :param age_group: The target age group for the best seller., defaults to None
        :type age_group: str, optional
        :param author: The author of the best seller. The author field does not include additional contributors (see Data Structure for more details about the author and contributor fields).

        When searching the author field, you can specify any combination of first, middle and last names.

        When sort-by is set to author, the results will be sorted by author's first name., defaults to None
        :type author: str, optional
        :param contributor: The author of the best seller, as well as other contributors such as the illustrator (to search or sort by author name only, use author instead).

        When searching, you can specify any combination of first, middle and last names of any of the contributors.

        When sort-by is set to contributor, the results will be sorted by the first name of the first contributor listed., defaults to None
        :type contributor: str, optional
        :param isbn: International Standard Book Number, 10 or 13 digits

        A best seller may have both 10-digit and 13-digit ISBNs, and may have multiple ISBNs of each type. To search on multiple ISBNs, separate the ISBNs with semicolons (example: 9780446579933;0061374229)., defaults to None
        :type isbn: str, optional
        :param offset: Sets the starting point of the result set (0, 20, ...).  Used to paginate thru results if there are more than 20. Defaults to 0. The num_results field indicates how many results there are total., defaults to None
        :type offset: int, optional
        :param price: The publisher's list price of the best seller, including decimal point., defaults to None
        :type price: str, optional
        :param publisher: The standardized name of the publisher, defaults to None
        :type publisher: str, optional
        :param title: The title of the best seller

        When searching, you can specify a portion of a title or a full title., defaults to None
        :type title: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Best Sellers list history
        :rtype: GetListsBestSellersHistoryJsonOkResponse
        """

        Validator(str).is_optional().validate(age_group)
        Validator(str).is_optional().validate(author)
        Validator(str).is_optional().validate(contributor)
        Validator(str).is_optional().validate(isbn)
        Validator(int).is_optional().validate(offset)
        Validator(str).is_optional().validate(price)
        Validator(str).is_optional().validate(publisher)
        Validator(str).is_optional().validate(title)

        serialized_request = (
            Serializer(
                f"{self.base_url}/lists/best-sellers/history.json",
                self.get_default_headers(),
            )
            .add_query("age-group", age_group)
            .add_query("author", author)
            .add_query("contributor", contributor)
            .add_query("isbn", isbn)
            .add_query("offset", offset)
            .add_query("price", price)
            .add_query("publisher", publisher)
            .add_query("title", title)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return GetListsBestSellersHistoryJsonOkResponse._unmap(response)
