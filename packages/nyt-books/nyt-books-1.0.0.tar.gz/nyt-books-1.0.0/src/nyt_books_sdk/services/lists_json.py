# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.get_lists_format_ok_response import GetListsFormatOkResponse


class ListsJsonService(BaseService):

    @cast_models
    def get_lists_format(
        self,
        list: str,
        bestsellers_date: str = None,
        published_date: str = None,
        offset: int = None,
    ) -> GetListsFormatOkResponse:
        """Get Best Sellers list.  If no date is provided returns the latest list.

        :param list: The name of the Times best sellers list (hardcover-fiction, paperback-nonfiction, ...).
        The /lists/names service returns all the list names.
        The encoded list names are lower case with hyphens instead of spaces (e.g. e-book-fiction, instead of E-Book Fiction).
        :type list: str
        :param bestsellers_date: YYYY-MM-DD

        The week-ending date for the sales reflected on list-name. Times best sellers lists are compiled using available book sale data. The bestsellers-date may be significantly earlier than published-date. For additional information, see the explanation at the bottom of any best-seller list page on NYTimes.com (example: Hardcover Fiction, published Dec. 5 but reflecting sales to Nov. 29)., defaults to None
        :type bestsellers_date: str, optional
        :param published_date: YYYY-MM-DD

        The date the best sellers list was published on NYTimes.com (different than bestsellers-date).  Use "current" for latest list., defaults to None
        :type published_date: str, optional
        :param offset: Sets the starting point of the result set (0, 20, ...).  Used to paginate thru books if list has more than 20. Defaults to 0.  The num_results field indicates how many books are in the list., defaults to None
        :type offset: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Best Sellers list books
        :rtype: GetListsFormatOkResponse
        """

        Validator(str).validate(list)
        Validator(str).is_optional().pattern("^\d{4}-\d{2}-\d{2}$").validate(
            bestsellers_date
        )
        Validator(str).is_optional().pattern("^\d{4}-\d{2}-\d{2}$").validate(
            published_date
        )
        Validator(int).is_optional().validate(offset)

        serialized_request = (
            Serializer(f"{self.base_url}/lists.json", self.get_default_headers())
            .add_query("list", list)
            .add_query("bestsellers-date", bestsellers_date)
            .add_query("published-date", published_date)
            .add_query("offset", offset)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return GetListsFormatOkResponse._unmap(response)
