stages:
#  - setup
  - build
  - test
  - tag
  - release
  - deploy

#variables:
#  ENVIRONMENT: production

before_script:
  - echo "Setting up environment..."

pages:
  stage: deploy
  image: python:latest
  before_script:
    - pip install -r requirements-doc.txt
  script:
    - mkdocs build --strict
  artifacts:
    paths:
      - public
  rules:
    - changes:
        - docs/*.*
        - docs_overrides/*.*
        - mkdocs.yml


pytest_job:
  stage: test
  image: python:latest
  before_script:
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - pip install -e .
  script:
    - pytest --noconftest --cov=pyvisjs --cov-report xml:coverage.xml --cov-report term
  coverage: '/Total coverage: (\d+.\d+\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  rules:
    - changes:
        - pyvisjs/[^_]*.py
        - tests/*.py

tagging_job:
  stage: tag
  image: python:latest
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_COMMIT_TITLE =~ /Merge branch.*/'
#  only:
#    - main
  script:
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - tag=$(python -c "exec(open('./pyvisjs/_version.py').read()); print(__version__)")
    - git tag -a "$tag" -m "Release version $tag"
    - git push https://api:$ACCESS_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git "$tag"


release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo "running release_job"
  release:
    name: "Release $CI_COMMIT_TAG"
    tag_name: "$CI_COMMIT_TAG"
    description: "Release for version $CI_COMMIT_TAG"


deploy_to_pages_job:
  stage: deploy
  image: python:latest
  before_script:
    - pip install --upgrade pip
    - pip install --upgrade setuptools
    - pip install --upgrade build
    - pip install --upgrade twine
    - pip install -r requirements.txt
  script:
    - python -m build
    - python -m twine upload --repository pypi --username $TWINE_USERNAME --password $TWINE_PASSWORD dist/*
  only:
    - tags



after_script:
  - echo "Cleaning up..."
