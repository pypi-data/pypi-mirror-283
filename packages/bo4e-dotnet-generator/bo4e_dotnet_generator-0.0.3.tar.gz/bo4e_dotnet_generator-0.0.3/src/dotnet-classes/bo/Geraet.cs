// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var geraet = Geraet.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Mit diesem BO werden alle Geräte modelliert, die keine Zähler sind.
    ///
    /// .. raw:: html
    ///
    /// <object data="../_static/images/bo4e/bo/Geraet.svg" type="image/svg+xml"></object>
    ///
    /// .. HINT::
    /// `Geraet JSON Schema
    /// <https://json-schema.app/view/%23?url=https://raw.githubusercontent.com/BO4E/BO4E-Schemas/v202401.2.1/src/bo4e_schemas/bo/Geraet.json>`_
    /// </summary>
    public partial class Geraet
    {
        /// <summary>
        /// Hier können IDs anderer Systeme hinterlegt werden (z.B. eine SAP-GP-Nummer oder eine GUID)
        /// </summary>
        [JsonProperty("_id")]
        public string Id { get; set; }

        /// <summary>
        /// Die auf dem Gerät aufgedruckte Nummer, die vom MSB vergeben wird.
        /// </summary>
        [JsonProperty("_typ")]
        public Typ? Typ { get; set; }

        /// <summary>
        /// Version der BO-Struktur aka "fachliche Versionierung"
        /// </summary>
        [JsonProperty("_version")]
        public string Version { get; set; }

        /// <summary>
        /// Bezeichnung des Geräts
        /// </summary>
        [JsonProperty("bezeichnung")]
        public string Bezeichnung { get; set; }

        /// <summary>
        /// Die übergreifende Klasse eines Geräts, beispielsweise Wandler
        /// </summary>
        [JsonProperty("geraeteklasse")]
        public Geraeteklasse? Geraeteklasse { get; set; }

        /// <summary>
        /// Die auf dem Gerät aufgedruckte Nummer, die vom MSB vergeben wird.
        /// </summary>
        [JsonProperty("geraetenummer")]
        public string Geraetenummer { get; set; }

        /// <summary>
        /// Der speziellere Typ eines Gerätes, beispielsweise Stromwandler
        /// </summary>
        [JsonProperty("geraetetyp")]
        public Geraetetyp? Geraetetyp { get; set; }

        [JsonProperty("zusatzAttribute")]
        public ZusatzAttribut[] ZusatzAttribute { get; set; }
    }

    /// <summary>
    /// Viele Datenobjekte weisen in unterschiedlichen Systemen eine eindeutige ID (Kundennummer,
    /// GP-Nummer etc.) auf.
    /// Beim Austausch von Datenobjekten zwischen verschiedenen Systemen ist es daher hilfreich,
    /// sich die eindeutigen IDs der anzubindenden Systeme zu merken.
    ///
    /// .. raw:: html
    ///
    /// <object data="../_static/images/bo4e/com/ZusatzAttribut.svg"
    /// type="image/svg+xml"></object>
    ///
    /// .. HINT::
    /// `ZusatzAttribut JSON Schema
    /// <https://json-schema.app/view/%23?url=https://raw.githubusercontent.com/BO4E/BO4E-Schemas/v202401.2.1/src/bo4e_schemas/ZusatzAttribut.json>`_
    /// </summary>
    public partial class ZusatzAttribut
    {
        /// <summary>
        /// Bezeichnung der externen Referenz (z.B. "microservice xyz" oder "SAP CRM GP-Nummer")
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>
        /// Bezeichnung der externen Referenz (z.B. "microservice xyz" oder "SAP CRM GP-Nummer")
        /// </summary>
        [JsonProperty("wert")]
        public object Wert { get; set; }
    }

    /// <summary>
    /// Auflistung möglicher übergreifenden Geräteklassen.
    /// </summary>
    public enum Geraeteklasse { Kommunikationseinrichtung, Mengenumwerter, SmartmeterGateway, Steuerbox, TechnischeSteuereinrichtung, Wandler, Zaehleinrichtung };

    /// <summary>
    /// Auflistung möglicher abzurechnender Gerätetypen.
    /// </summary>
    public enum Geraetetyp { Blockstromwandler, Datenlogger, DslKom, Edl21, Edl40, Edl40_Zaehleraufsatz, EthernetKom, HoechstbelastungsAnzeiger, Impulsgeber, IntelligentesMessystem, Kombimesswandler, KombimesswandlerImsMme, Kommunikationsanschluss, KompaktMu, LteKom, Mengenumwerter, MesswandlersatzImsMme, Modem, ModemFestnetz, ModemFunk, ModemGprs, ModemGprsMLg, ModemGsm, ModemGsmMLg, ModemGsmOLg, ModerneMesseinrichtung, Multiplexanlage, OptionaleZusZaehleinrichtung, Pauschalanlage, PlcKom, Rundsteuerempfaenger, RundsteuerempfaengerImsMme, SonstigesGeraet, Spannungswandler, Steuereinrichtung, Stromwandler, Summationsgeraet, SystemMu, Tarifschaltgeraet, TarifschaltgeraetImsMme, Telefonanschluss, Telekommunikationseinrichtung, TemperaturKompensation, TemperaturMu, Verstaerkeranlage, ZustandsMu };

    /// <summary>
    /// Auflistung sämtlicher existierender Geschäftsobjekte.
    /// </summary>
    public enum Typ { Angebot, Ausschreibung, Buendelvertrag, Energiemenge, Fremdkosten, Geraet, Geschaeftsobjekt, Geschaeftspartner, Kosten, Lastgang, Marktlokation, Marktteilnehmer, Messlokation, Netznutzungsrechnung, Person, Preisblatt, Preisblattdienstleistung, Preisblatthardware, Preisblattkonzessionsabgabe, Preisblattmessung, Preisblattnetznutzung, Preisblattumlagen, Rechnung, Region, Regionaltarif, Standorteigenschaften, Tarif, Tarifinfo, Tarifkosten, Tarifpreisblatt, Vertrag, Zaehler, Zeitreihe };

    public partial class Geraet
    {
        public static Geraet FromJson(string json) => JsonConvert.DeserializeObject<Geraet>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Geraet self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                TypConverter.Singleton,
                GeraeteklasseConverter.Singleton,
                GeraetetypConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class TypConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Typ) || t == typeof(Typ?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ANGEBOT":
                    return Typ.Angebot;
                case "AUSSCHREIBUNG":
                    return Typ.Ausschreibung;
                case "BUENDELVERTRAG":
                    return Typ.Buendelvertrag;
                case "ENERGIEMENGE":
                    return Typ.Energiemenge;
                case "FREMDKOSTEN":
                    return Typ.Fremdkosten;
                case "GERAET":
                    return Typ.Geraet;
                case "GESCHAEFTSOBJEKT":
                    return Typ.Geschaeftsobjekt;
                case "GESCHAEFTSPARTNER":
                    return Typ.Geschaeftspartner;
                case "KOSTEN":
                    return Typ.Kosten;
                case "LASTGANG":
                    return Typ.Lastgang;
                case "MARKTLOKATION":
                    return Typ.Marktlokation;
                case "MARKTTEILNEHMER":
                    return Typ.Marktteilnehmer;
                case "MESSLOKATION":
                    return Typ.Messlokation;
                case "NETZNUTZUNGSRECHNUNG":
                    return Typ.Netznutzungsrechnung;
                case "PERSON":
                    return Typ.Person;
                case "PREISBLATT":
                    return Typ.Preisblatt;
                case "PREISBLATTDIENSTLEISTUNG":
                    return Typ.Preisblattdienstleistung;
                case "PREISBLATTHARDWARE":
                    return Typ.Preisblatthardware;
                case "PREISBLATTKONZESSIONSABGABE":
                    return Typ.Preisblattkonzessionsabgabe;
                case "PREISBLATTMESSUNG":
                    return Typ.Preisblattmessung;
                case "PREISBLATTNETZNUTZUNG":
                    return Typ.Preisblattnetznutzung;
                case "PREISBLATTUMLAGEN":
                    return Typ.Preisblattumlagen;
                case "RECHNUNG":
                    return Typ.Rechnung;
                case "REGION":
                    return Typ.Region;
                case "REGIONALTARIF":
                    return Typ.Regionaltarif;
                case "STANDORTEIGENSCHAFTEN":
                    return Typ.Standorteigenschaften;
                case "TARIF":
                    return Typ.Tarif;
                case "TARIFINFO":
                    return Typ.Tarifinfo;
                case "TARIFKOSTEN":
                    return Typ.Tarifkosten;
                case "TARIFPREISBLATT":
                    return Typ.Tarifpreisblatt;
                case "VERTRAG":
                    return Typ.Vertrag;
                case "ZAEHLER":
                    return Typ.Zaehler;
                case "ZEITREIHE":
                    return Typ.Zeitreihe;
            }
            throw new Exception("Cannot unmarshal type Typ");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Typ)untypedValue;
            switch (value)
            {
                case Typ.Angebot:
                    serializer.Serialize(writer, "ANGEBOT");
                    return;
                case Typ.Ausschreibung:
                    serializer.Serialize(writer, "AUSSCHREIBUNG");
                    return;
                case Typ.Buendelvertrag:
                    serializer.Serialize(writer, "BUENDELVERTRAG");
                    return;
                case Typ.Energiemenge:
                    serializer.Serialize(writer, "ENERGIEMENGE");
                    return;
                case Typ.Fremdkosten:
                    serializer.Serialize(writer, "FREMDKOSTEN");
                    return;
                case Typ.Geraet:
                    serializer.Serialize(writer, "GERAET");
                    return;
                case Typ.Geschaeftsobjekt:
                    serializer.Serialize(writer, "GESCHAEFTSOBJEKT");
                    return;
                case Typ.Geschaeftspartner:
                    serializer.Serialize(writer, "GESCHAEFTSPARTNER");
                    return;
                case Typ.Kosten:
                    serializer.Serialize(writer, "KOSTEN");
                    return;
                case Typ.Lastgang:
                    serializer.Serialize(writer, "LASTGANG");
                    return;
                case Typ.Marktlokation:
                    serializer.Serialize(writer, "MARKTLOKATION");
                    return;
                case Typ.Marktteilnehmer:
                    serializer.Serialize(writer, "MARKTTEILNEHMER");
                    return;
                case Typ.Messlokation:
                    serializer.Serialize(writer, "MESSLOKATION");
                    return;
                case Typ.Netznutzungsrechnung:
                    serializer.Serialize(writer, "NETZNUTZUNGSRECHNUNG");
                    return;
                case Typ.Person:
                    serializer.Serialize(writer, "PERSON");
                    return;
                case Typ.Preisblatt:
                    serializer.Serialize(writer, "PREISBLATT");
                    return;
                case Typ.Preisblattdienstleistung:
                    serializer.Serialize(writer, "PREISBLATTDIENSTLEISTUNG");
                    return;
                case Typ.Preisblatthardware:
                    serializer.Serialize(writer, "PREISBLATTHARDWARE");
                    return;
                case Typ.Preisblattkonzessionsabgabe:
                    serializer.Serialize(writer, "PREISBLATTKONZESSIONSABGABE");
                    return;
                case Typ.Preisblattmessung:
                    serializer.Serialize(writer, "PREISBLATTMESSUNG");
                    return;
                case Typ.Preisblattnetznutzung:
                    serializer.Serialize(writer, "PREISBLATTNETZNUTZUNG");
                    return;
                case Typ.Preisblattumlagen:
                    serializer.Serialize(writer, "PREISBLATTUMLAGEN");
                    return;
                case Typ.Rechnung:
                    serializer.Serialize(writer, "RECHNUNG");
                    return;
                case Typ.Region:
                    serializer.Serialize(writer, "REGION");
                    return;
                case Typ.Regionaltarif:
                    serializer.Serialize(writer, "REGIONALTARIF");
                    return;
                case Typ.Standorteigenschaften:
                    serializer.Serialize(writer, "STANDORTEIGENSCHAFTEN");
                    return;
                case Typ.Tarif:
                    serializer.Serialize(writer, "TARIF");
                    return;
                case Typ.Tarifinfo:
                    serializer.Serialize(writer, "TARIFINFO");
                    return;
                case Typ.Tarifkosten:
                    serializer.Serialize(writer, "TARIFKOSTEN");
                    return;
                case Typ.Tarifpreisblatt:
                    serializer.Serialize(writer, "TARIFPREISBLATT");
                    return;
                case Typ.Vertrag:
                    serializer.Serialize(writer, "VERTRAG");
                    return;
                case Typ.Zaehler:
                    serializer.Serialize(writer, "ZAEHLER");
                    return;
                case Typ.Zeitreihe:
                    serializer.Serialize(writer, "ZEITREIHE");
                    return;
            }
            throw new Exception("Cannot marshal type Typ");
        }

        public static readonly TypConverter Singleton = new TypConverter();
    }

    internal class GeraeteklasseConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Geraeteklasse) || t == typeof(Geraeteklasse?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "KOMMUNIKATIONSEINRICHTUNG":
                    return Geraeteklasse.Kommunikationseinrichtung;
                case "MENGENUMWERTER":
                    return Geraeteklasse.Mengenumwerter;
                case "SMARTMETER_GATEWAY":
                    return Geraeteklasse.SmartmeterGateway;
                case "STEUERBOX":
                    return Geraeteklasse.Steuerbox;
                case "TECHNISCHE_STEUEREINRICHTUNG":
                    return Geraeteklasse.TechnischeSteuereinrichtung;
                case "WANDLER":
                    return Geraeteklasse.Wandler;
                case "ZAEHLEINRICHTUNG":
                    return Geraeteklasse.Zaehleinrichtung;
            }
            throw new Exception("Cannot unmarshal type Geraeteklasse");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Geraeteklasse)untypedValue;
            switch (value)
            {
                case Geraeteklasse.Kommunikationseinrichtung:
                    serializer.Serialize(writer, "KOMMUNIKATIONSEINRICHTUNG");
                    return;
                case Geraeteklasse.Mengenumwerter:
                    serializer.Serialize(writer, "MENGENUMWERTER");
                    return;
                case Geraeteklasse.SmartmeterGateway:
                    serializer.Serialize(writer, "SMARTMETER_GATEWAY");
                    return;
                case Geraeteklasse.Steuerbox:
                    serializer.Serialize(writer, "STEUERBOX");
                    return;
                case Geraeteklasse.TechnischeSteuereinrichtung:
                    serializer.Serialize(writer, "TECHNISCHE_STEUEREINRICHTUNG");
                    return;
                case Geraeteklasse.Wandler:
                    serializer.Serialize(writer, "WANDLER");
                    return;
                case Geraeteklasse.Zaehleinrichtung:
                    serializer.Serialize(writer, "ZAEHLEINRICHTUNG");
                    return;
            }
            throw new Exception("Cannot marshal type Geraeteklasse");
        }

        public static readonly GeraeteklasseConverter Singleton = new GeraeteklasseConverter();
    }

    internal class GeraetetypConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Geraetetyp) || t == typeof(Geraetetyp?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "BLOCKSTROMWANDLER":
                    return Geraetetyp.Blockstromwandler;
                case "DATENLOGGER":
                    return Geraetetyp.Datenlogger;
                case "DSL_KOM":
                    return Geraetetyp.DslKom;
                case "EDL_21":
                    return Geraetetyp.Edl21;
                case "EDL_40":
                    return Geraetetyp.Edl40;
                case "EDL_40_ZAEHLERAUFSATZ":
                    return Geraetetyp.Edl40_Zaehleraufsatz;
                case "ETHERNET_KOM":
                    return Geraetetyp.EthernetKom;
                case "HOECHSTBELASTUNGS_ANZEIGER":
                    return Geraetetyp.HoechstbelastungsAnzeiger;
                case "IMPULSGEBER":
                    return Geraetetyp.Impulsgeber;
                case "INTELLIGENTES_MESSYSTEM":
                    return Geraetetyp.IntelligentesMessystem;
                case "KOMBIMESSWANDLER":
                    return Geraetetyp.Kombimesswandler;
                case "KOMBIMESSWANDLER_IMS_MME":
                    return Geraetetyp.KombimesswandlerImsMme;
                case "KOMMUNIKATIONSANSCHLUSS":
                    return Geraetetyp.Kommunikationsanschluss;
                case "KOMPAKT_MU":
                    return Geraetetyp.KompaktMu;
                case "LTE_KOM":
                    return Geraetetyp.LteKom;
                case "MENGENUMWERTER":
                    return Geraetetyp.Mengenumwerter;
                case "MESSWANDLERSATZ_IMS_MME":
                    return Geraetetyp.MesswandlersatzImsMme;
                case "MODEM":
                    return Geraetetyp.Modem;
                case "MODEM_FESTNETZ":
                    return Geraetetyp.ModemFestnetz;
                case "MODEM_FUNK":
                    return Geraetetyp.ModemFunk;
                case "MODEM_GPRS":
                    return Geraetetyp.ModemGprs;
                case "MODEM_GPRS_M_LG":
                    return Geraetetyp.ModemGprsMLg;
                case "MODEM_GSM":
                    return Geraetetyp.ModemGsm;
                case "MODEM_GSM_M_LG":
                    return Geraetetyp.ModemGsmMLg;
                case "MODEM_GSM_O_LG":
                    return Geraetetyp.ModemGsmOLg;
                case "MODERNE_MESSEINRICHTUNG":
                    return Geraetetyp.ModerneMesseinrichtung;
                case "MULTIPLEXANLAGE":
                    return Geraetetyp.Multiplexanlage;
                case "OPTIONALE_ZUS_ZAEHLEINRICHTUNG":
                    return Geraetetyp.OptionaleZusZaehleinrichtung;
                case "PAUSCHALANLAGE":
                    return Geraetetyp.Pauschalanlage;
                case "PLC_KOM":
                    return Geraetetyp.PlcKom;
                case "RUNDSTEUEREMPFAENGER":
                    return Geraetetyp.Rundsteuerempfaenger;
                case "RUNDSTEUEREMPFAENGER_IMS_MME":
                    return Geraetetyp.RundsteuerempfaengerImsMme;
                case "SONSTIGES_GERAET":
                    return Geraetetyp.SonstigesGeraet;
                case "SPANNUNGSWANDLER":
                    return Geraetetyp.Spannungswandler;
                case "STEUEREINRICHTUNG":
                    return Geraetetyp.Steuereinrichtung;
                case "STROMWANDLER":
                    return Geraetetyp.Stromwandler;
                case "SUMMATIONSGERAET":
                    return Geraetetyp.Summationsgeraet;
                case "SYSTEM_MU":
                    return Geraetetyp.SystemMu;
                case "TARIFSCHALTGERAET":
                    return Geraetetyp.Tarifschaltgeraet;
                case "TARIFSCHALTGERAET_IMS_MME":
                    return Geraetetyp.TarifschaltgeraetImsMme;
                case "TELEFONANSCHLUSS":
                    return Geraetetyp.Telefonanschluss;
                case "TELEKOMMUNIKATIONSEINRICHTUNG":
                    return Geraetetyp.Telekommunikationseinrichtung;
                case "TEMPERATUR_KOMPENSATION":
                    return Geraetetyp.TemperaturKompensation;
                case "TEMPERATUR_MU":
                    return Geraetetyp.TemperaturMu;
                case "VERSTAERKERANLAGE":
                    return Geraetetyp.Verstaerkeranlage;
                case "ZUSTANDS_MU":
                    return Geraetetyp.ZustandsMu;
            }
            throw new Exception("Cannot unmarshal type Geraetetyp");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Geraetetyp)untypedValue;
            switch (value)
            {
                case Geraetetyp.Blockstromwandler:
                    serializer.Serialize(writer, "BLOCKSTROMWANDLER");
                    return;
                case Geraetetyp.Datenlogger:
                    serializer.Serialize(writer, "DATENLOGGER");
                    return;
                case Geraetetyp.DslKom:
                    serializer.Serialize(writer, "DSL_KOM");
                    return;
                case Geraetetyp.Edl21:
                    serializer.Serialize(writer, "EDL_21");
                    return;
                case Geraetetyp.Edl40:
                    serializer.Serialize(writer, "EDL_40");
                    return;
                case Geraetetyp.Edl40_Zaehleraufsatz:
                    serializer.Serialize(writer, "EDL_40_ZAEHLERAUFSATZ");
                    return;
                case Geraetetyp.EthernetKom:
                    serializer.Serialize(writer, "ETHERNET_KOM");
                    return;
                case Geraetetyp.HoechstbelastungsAnzeiger:
                    serializer.Serialize(writer, "HOECHSTBELASTUNGS_ANZEIGER");
                    return;
                case Geraetetyp.Impulsgeber:
                    serializer.Serialize(writer, "IMPULSGEBER");
                    return;
                case Geraetetyp.IntelligentesMessystem:
                    serializer.Serialize(writer, "INTELLIGENTES_MESSYSTEM");
                    return;
                case Geraetetyp.Kombimesswandler:
                    serializer.Serialize(writer, "KOMBIMESSWANDLER");
                    return;
                case Geraetetyp.KombimesswandlerImsMme:
                    serializer.Serialize(writer, "KOMBIMESSWANDLER_IMS_MME");
                    return;
                case Geraetetyp.Kommunikationsanschluss:
                    serializer.Serialize(writer, "KOMMUNIKATIONSANSCHLUSS");
                    return;
                case Geraetetyp.KompaktMu:
                    serializer.Serialize(writer, "KOMPAKT_MU");
                    return;
                case Geraetetyp.LteKom:
                    serializer.Serialize(writer, "LTE_KOM");
                    return;
                case Geraetetyp.Mengenumwerter:
                    serializer.Serialize(writer, "MENGENUMWERTER");
                    return;
                case Geraetetyp.MesswandlersatzImsMme:
                    serializer.Serialize(writer, "MESSWANDLERSATZ_IMS_MME");
                    return;
                case Geraetetyp.Modem:
                    serializer.Serialize(writer, "MODEM");
                    return;
                case Geraetetyp.ModemFestnetz:
                    serializer.Serialize(writer, "MODEM_FESTNETZ");
                    return;
                case Geraetetyp.ModemFunk:
                    serializer.Serialize(writer, "MODEM_FUNK");
                    return;
                case Geraetetyp.ModemGprs:
                    serializer.Serialize(writer, "MODEM_GPRS");
                    return;
                case Geraetetyp.ModemGprsMLg:
                    serializer.Serialize(writer, "MODEM_GPRS_M_LG");
                    return;
                case Geraetetyp.ModemGsm:
                    serializer.Serialize(writer, "MODEM_GSM");
                    return;
                case Geraetetyp.ModemGsmMLg:
                    serializer.Serialize(writer, "MODEM_GSM_M_LG");
                    return;
                case Geraetetyp.ModemGsmOLg:
                    serializer.Serialize(writer, "MODEM_GSM_O_LG");
                    return;
                case Geraetetyp.ModerneMesseinrichtung:
                    serializer.Serialize(writer, "MODERNE_MESSEINRICHTUNG");
                    return;
                case Geraetetyp.Multiplexanlage:
                    serializer.Serialize(writer, "MULTIPLEXANLAGE");
                    return;
                case Geraetetyp.OptionaleZusZaehleinrichtung:
                    serializer.Serialize(writer, "OPTIONALE_ZUS_ZAEHLEINRICHTUNG");
                    return;
                case Geraetetyp.Pauschalanlage:
                    serializer.Serialize(writer, "PAUSCHALANLAGE");
                    return;
                case Geraetetyp.PlcKom:
                    serializer.Serialize(writer, "PLC_KOM");
                    return;
                case Geraetetyp.Rundsteuerempfaenger:
                    serializer.Serialize(writer, "RUNDSTEUEREMPFAENGER");
                    return;
                case Geraetetyp.RundsteuerempfaengerImsMme:
                    serializer.Serialize(writer, "RUNDSTEUEREMPFAENGER_IMS_MME");
                    return;
                case Geraetetyp.SonstigesGeraet:
                    serializer.Serialize(writer, "SONSTIGES_GERAET");
                    return;
                case Geraetetyp.Spannungswandler:
                    serializer.Serialize(writer, "SPANNUNGSWANDLER");
                    return;
                case Geraetetyp.Steuereinrichtung:
                    serializer.Serialize(writer, "STEUEREINRICHTUNG");
                    return;
                case Geraetetyp.Stromwandler:
                    serializer.Serialize(writer, "STROMWANDLER");
                    return;
                case Geraetetyp.Summationsgeraet:
                    serializer.Serialize(writer, "SUMMATIONSGERAET");
                    return;
                case Geraetetyp.SystemMu:
                    serializer.Serialize(writer, "SYSTEM_MU");
                    return;
                case Geraetetyp.Tarifschaltgeraet:
                    serializer.Serialize(writer, "TARIFSCHALTGERAET");
                    return;
                case Geraetetyp.TarifschaltgeraetImsMme:
                    serializer.Serialize(writer, "TARIFSCHALTGERAET_IMS_MME");
                    return;
                case Geraetetyp.Telefonanschluss:
                    serializer.Serialize(writer, "TELEFONANSCHLUSS");
                    return;
                case Geraetetyp.Telekommunikationseinrichtung:
                    serializer.Serialize(writer, "TELEKOMMUNIKATIONSEINRICHTUNG");
                    return;
                case Geraetetyp.TemperaturKompensation:
                    serializer.Serialize(writer, "TEMPERATUR_KOMPENSATION");
                    return;
                case Geraetetyp.TemperaturMu:
                    serializer.Serialize(writer, "TEMPERATUR_MU");
                    return;
                case Geraetetyp.Verstaerkeranlage:
                    serializer.Serialize(writer, "VERSTAERKERANLAGE");
                    return;
                case Geraetetyp.ZustandsMu:
                    serializer.Serialize(writer, "ZUSTANDS_MU");
                    return;
            }
            throw new Exception("Cannot marshal type Geraetetyp");
        }

        public static readonly GeraetetypConverter Singleton = new GeraetetypConverter();
    }
}
