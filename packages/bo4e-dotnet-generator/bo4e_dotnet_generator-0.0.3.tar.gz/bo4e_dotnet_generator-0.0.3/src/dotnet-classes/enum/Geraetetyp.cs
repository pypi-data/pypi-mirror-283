// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var geraetetyp = Geraetetyp.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Auflistung möglicher abzurechnender Gerätetypen.
    /// </summary>
    public enum GeraetetypEnum { Blockstromwandler, Datenlogger, DslKom, Edl21, Edl40, Edl40_Zaehleraufsatz, EthernetKom, HoechstbelastungsAnzeiger, Impulsgeber, IntelligentesMessystem, Kombimesswandler, KombimesswandlerImsMme, Kommunikationsanschluss, KompaktMu, LteKom, Mengenumwerter, MesswandlersatzImsMme, Modem, ModemFestnetz, ModemFunk, ModemGprs, ModemGprsMLg, ModemGsm, ModemGsmMLg, ModemGsmOLg, ModerneMesseinrichtung, Multiplexanlage, OptionaleZusZaehleinrichtung, Pauschalanlage, PlcKom, Rundsteuerempfaenger, RundsteuerempfaengerImsMme, SonstigesGeraet, Spannungswandler, Steuereinrichtung, Stromwandler, Summationsgeraet, SystemMu, Tarifschaltgeraet, TarifschaltgeraetImsMme, Telefonanschluss, Telekommunikationseinrichtung, TemperaturKompensation, TemperaturMu, Verstaerkeranlage, ZustandsMu };

    public class Geraetetyp
    {
        public static GeraetetypEnum FromJson(string json) => JsonConvert.DeserializeObject<GeraetetypEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this GeraetetypEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                GeraetetypEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class GeraetetypEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(GeraetetypEnum) || t == typeof(GeraetetypEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "BLOCKSTROMWANDLER":
                    return GeraetetypEnum.Blockstromwandler;
                case "DATENLOGGER":
                    return GeraetetypEnum.Datenlogger;
                case "DSL_KOM":
                    return GeraetetypEnum.DslKom;
                case "EDL_21":
                    return GeraetetypEnum.Edl21;
                case "EDL_40":
                    return GeraetetypEnum.Edl40;
                case "EDL_40_ZAEHLERAUFSATZ":
                    return GeraetetypEnum.Edl40_Zaehleraufsatz;
                case "ETHERNET_KOM":
                    return GeraetetypEnum.EthernetKom;
                case "HOECHSTBELASTUNGS_ANZEIGER":
                    return GeraetetypEnum.HoechstbelastungsAnzeiger;
                case "IMPULSGEBER":
                    return GeraetetypEnum.Impulsgeber;
                case "INTELLIGENTES_MESSYSTEM":
                    return GeraetetypEnum.IntelligentesMessystem;
                case "KOMBIMESSWANDLER":
                    return GeraetetypEnum.Kombimesswandler;
                case "KOMBIMESSWANDLER_IMS_MME":
                    return GeraetetypEnum.KombimesswandlerImsMme;
                case "KOMMUNIKATIONSANSCHLUSS":
                    return GeraetetypEnum.Kommunikationsanschluss;
                case "KOMPAKT_MU":
                    return GeraetetypEnum.KompaktMu;
                case "LTE_KOM":
                    return GeraetetypEnum.LteKom;
                case "MENGENUMWERTER":
                    return GeraetetypEnum.Mengenumwerter;
                case "MESSWANDLERSATZ_IMS_MME":
                    return GeraetetypEnum.MesswandlersatzImsMme;
                case "MODEM":
                    return GeraetetypEnum.Modem;
                case "MODEM_FESTNETZ":
                    return GeraetetypEnum.ModemFestnetz;
                case "MODEM_FUNK":
                    return GeraetetypEnum.ModemFunk;
                case "MODEM_GPRS":
                    return GeraetetypEnum.ModemGprs;
                case "MODEM_GPRS_M_LG":
                    return GeraetetypEnum.ModemGprsMLg;
                case "MODEM_GSM":
                    return GeraetetypEnum.ModemGsm;
                case "MODEM_GSM_M_LG":
                    return GeraetetypEnum.ModemGsmMLg;
                case "MODEM_GSM_O_LG":
                    return GeraetetypEnum.ModemGsmOLg;
                case "MODERNE_MESSEINRICHTUNG":
                    return GeraetetypEnum.ModerneMesseinrichtung;
                case "MULTIPLEXANLAGE":
                    return GeraetetypEnum.Multiplexanlage;
                case "OPTIONALE_ZUS_ZAEHLEINRICHTUNG":
                    return GeraetetypEnum.OptionaleZusZaehleinrichtung;
                case "PAUSCHALANLAGE":
                    return GeraetetypEnum.Pauschalanlage;
                case "PLC_KOM":
                    return GeraetetypEnum.PlcKom;
                case "RUNDSTEUEREMPFAENGER":
                    return GeraetetypEnum.Rundsteuerempfaenger;
                case "RUNDSTEUEREMPFAENGER_IMS_MME":
                    return GeraetetypEnum.RundsteuerempfaengerImsMme;
                case "SONSTIGES_GERAET":
                    return GeraetetypEnum.SonstigesGeraet;
                case "SPANNUNGSWANDLER":
                    return GeraetetypEnum.Spannungswandler;
                case "STEUEREINRICHTUNG":
                    return GeraetetypEnum.Steuereinrichtung;
                case "STROMWANDLER":
                    return GeraetetypEnum.Stromwandler;
                case "SUMMATIONSGERAET":
                    return GeraetetypEnum.Summationsgeraet;
                case "SYSTEM_MU":
                    return GeraetetypEnum.SystemMu;
                case "TARIFSCHALTGERAET":
                    return GeraetetypEnum.Tarifschaltgeraet;
                case "TARIFSCHALTGERAET_IMS_MME":
                    return GeraetetypEnum.TarifschaltgeraetImsMme;
                case "TELEFONANSCHLUSS":
                    return GeraetetypEnum.Telefonanschluss;
                case "TELEKOMMUNIKATIONSEINRICHTUNG":
                    return GeraetetypEnum.Telekommunikationseinrichtung;
                case "TEMPERATUR_KOMPENSATION":
                    return GeraetetypEnum.TemperaturKompensation;
                case "TEMPERATUR_MU":
                    return GeraetetypEnum.TemperaturMu;
                case "VERSTAERKERANLAGE":
                    return GeraetetypEnum.Verstaerkeranlage;
                case "ZUSTANDS_MU":
                    return GeraetetypEnum.ZustandsMu;
            }
            throw new Exception("Cannot unmarshal type GeraetetypEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (GeraetetypEnum)untypedValue;
            switch (value)
            {
                case GeraetetypEnum.Blockstromwandler:
                    serializer.Serialize(writer, "BLOCKSTROMWANDLER");
                    return;
                case GeraetetypEnum.Datenlogger:
                    serializer.Serialize(writer, "DATENLOGGER");
                    return;
                case GeraetetypEnum.DslKom:
                    serializer.Serialize(writer, "DSL_KOM");
                    return;
                case GeraetetypEnum.Edl21:
                    serializer.Serialize(writer, "EDL_21");
                    return;
                case GeraetetypEnum.Edl40:
                    serializer.Serialize(writer, "EDL_40");
                    return;
                case GeraetetypEnum.Edl40_Zaehleraufsatz:
                    serializer.Serialize(writer, "EDL_40_ZAEHLERAUFSATZ");
                    return;
                case GeraetetypEnum.EthernetKom:
                    serializer.Serialize(writer, "ETHERNET_KOM");
                    return;
                case GeraetetypEnum.HoechstbelastungsAnzeiger:
                    serializer.Serialize(writer, "HOECHSTBELASTUNGS_ANZEIGER");
                    return;
                case GeraetetypEnum.Impulsgeber:
                    serializer.Serialize(writer, "IMPULSGEBER");
                    return;
                case GeraetetypEnum.IntelligentesMessystem:
                    serializer.Serialize(writer, "INTELLIGENTES_MESSYSTEM");
                    return;
                case GeraetetypEnum.Kombimesswandler:
                    serializer.Serialize(writer, "KOMBIMESSWANDLER");
                    return;
                case GeraetetypEnum.KombimesswandlerImsMme:
                    serializer.Serialize(writer, "KOMBIMESSWANDLER_IMS_MME");
                    return;
                case GeraetetypEnum.Kommunikationsanschluss:
                    serializer.Serialize(writer, "KOMMUNIKATIONSANSCHLUSS");
                    return;
                case GeraetetypEnum.KompaktMu:
                    serializer.Serialize(writer, "KOMPAKT_MU");
                    return;
                case GeraetetypEnum.LteKom:
                    serializer.Serialize(writer, "LTE_KOM");
                    return;
                case GeraetetypEnum.Mengenumwerter:
                    serializer.Serialize(writer, "MENGENUMWERTER");
                    return;
                case GeraetetypEnum.MesswandlersatzImsMme:
                    serializer.Serialize(writer, "MESSWANDLERSATZ_IMS_MME");
                    return;
                case GeraetetypEnum.Modem:
                    serializer.Serialize(writer, "MODEM");
                    return;
                case GeraetetypEnum.ModemFestnetz:
                    serializer.Serialize(writer, "MODEM_FESTNETZ");
                    return;
                case GeraetetypEnum.ModemFunk:
                    serializer.Serialize(writer, "MODEM_FUNK");
                    return;
                case GeraetetypEnum.ModemGprs:
                    serializer.Serialize(writer, "MODEM_GPRS");
                    return;
                case GeraetetypEnum.ModemGprsMLg:
                    serializer.Serialize(writer, "MODEM_GPRS_M_LG");
                    return;
                case GeraetetypEnum.ModemGsm:
                    serializer.Serialize(writer, "MODEM_GSM");
                    return;
                case GeraetetypEnum.ModemGsmMLg:
                    serializer.Serialize(writer, "MODEM_GSM_M_LG");
                    return;
                case GeraetetypEnum.ModemGsmOLg:
                    serializer.Serialize(writer, "MODEM_GSM_O_LG");
                    return;
                case GeraetetypEnum.ModerneMesseinrichtung:
                    serializer.Serialize(writer, "MODERNE_MESSEINRICHTUNG");
                    return;
                case GeraetetypEnum.Multiplexanlage:
                    serializer.Serialize(writer, "MULTIPLEXANLAGE");
                    return;
                case GeraetetypEnum.OptionaleZusZaehleinrichtung:
                    serializer.Serialize(writer, "OPTIONALE_ZUS_ZAEHLEINRICHTUNG");
                    return;
                case GeraetetypEnum.Pauschalanlage:
                    serializer.Serialize(writer, "PAUSCHALANLAGE");
                    return;
                case GeraetetypEnum.PlcKom:
                    serializer.Serialize(writer, "PLC_KOM");
                    return;
                case GeraetetypEnum.Rundsteuerempfaenger:
                    serializer.Serialize(writer, "RUNDSTEUEREMPFAENGER");
                    return;
                case GeraetetypEnum.RundsteuerempfaengerImsMme:
                    serializer.Serialize(writer, "RUNDSTEUEREMPFAENGER_IMS_MME");
                    return;
                case GeraetetypEnum.SonstigesGeraet:
                    serializer.Serialize(writer, "SONSTIGES_GERAET");
                    return;
                case GeraetetypEnum.Spannungswandler:
                    serializer.Serialize(writer, "SPANNUNGSWANDLER");
                    return;
                case GeraetetypEnum.Steuereinrichtung:
                    serializer.Serialize(writer, "STEUEREINRICHTUNG");
                    return;
                case GeraetetypEnum.Stromwandler:
                    serializer.Serialize(writer, "STROMWANDLER");
                    return;
                case GeraetetypEnum.Summationsgeraet:
                    serializer.Serialize(writer, "SUMMATIONSGERAET");
                    return;
                case GeraetetypEnum.SystemMu:
                    serializer.Serialize(writer, "SYSTEM_MU");
                    return;
                case GeraetetypEnum.Tarifschaltgeraet:
                    serializer.Serialize(writer, "TARIFSCHALTGERAET");
                    return;
                case GeraetetypEnum.TarifschaltgeraetImsMme:
                    serializer.Serialize(writer, "TARIFSCHALTGERAET_IMS_MME");
                    return;
                case GeraetetypEnum.Telefonanschluss:
                    serializer.Serialize(writer, "TELEFONANSCHLUSS");
                    return;
                case GeraetetypEnum.Telekommunikationseinrichtung:
                    serializer.Serialize(writer, "TELEKOMMUNIKATIONSEINRICHTUNG");
                    return;
                case GeraetetypEnum.TemperaturKompensation:
                    serializer.Serialize(writer, "TEMPERATUR_KOMPENSATION");
                    return;
                case GeraetetypEnum.TemperaturMu:
                    serializer.Serialize(writer, "TEMPERATUR_MU");
                    return;
                case GeraetetypEnum.Verstaerkeranlage:
                    serializer.Serialize(writer, "VERSTAERKERANLAGE");
                    return;
                case GeraetetypEnum.ZustandsMu:
                    serializer.Serialize(writer, "ZUSTANDS_MU");
                    return;
            }
            throw new Exception("Cannot marshal type GeraetetypEnum");
        }

        public static readonly GeraetetypEnumConverter Singleton = new GeraetetypEnumConverter();
    }
}
