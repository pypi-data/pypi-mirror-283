// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var voraussetzungen = Voraussetzungen.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Voraussetzungen, die erfüllt sein müssen, damit dieser Tarif zur Anwendung kommen kann.
    /// </summary>
    public enum VoraussetzungenEnum { AlterKundenanlage, Altvertrag, Anlagebeschaffenheit, Anschlussart, Anschlusswert, AusschlussGrossverbraucher, BesondereVerbrauchsstelle, BestimmteVertragsformalitaeten, BestimmterAbnahmefall, Betriebsstundenbegrenzung, Direktvertrieb, Einzugsermaechtigung, Familienstruktur, Freigabezeiten, Gewerbe, KombiBoni, Lastprofil, LieferanbindungAlle, LieferanbindungEine, LieferungsbeschraenkungGasart, MaxZaehlerLieferstellen, MehrereZaehlerAbnahmestellen, Mindestumsatz, Mitgliedschaft, NachweisZahlungsfaehigkeit, Neukunde, NeukundeMitVoraussetzungen, Niedrigenergie, Onlinevoraussetzung, OrtsteileLiefergebiet, Selbstablesung, StaatlicheFoerderung, UmstellungEnergieart, VorgeschriebeneZusatzanlage, WaermebedarfErdgas, ZaehlertypGroesse, Zeitpunkt, Zusatzmodalitaet, Zusatzprodukt };

    public class Voraussetzungen
    {
        public static VoraussetzungenEnum FromJson(string json) => JsonConvert.DeserializeObject<VoraussetzungenEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this VoraussetzungenEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                VoraussetzungenEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class VoraussetzungenEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(VoraussetzungenEnum) || t == typeof(VoraussetzungenEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ALTER_KUNDENANLAGE":
                    return VoraussetzungenEnum.AlterKundenanlage;
                case "ALTVERTRAG":
                    return VoraussetzungenEnum.Altvertrag;
                case "ANLAGEBESCHAFFENHEIT":
                    return VoraussetzungenEnum.Anlagebeschaffenheit;
                case "ANSCHLUSSART":
                    return VoraussetzungenEnum.Anschlussart;
                case "ANSCHLUSSWERT":
                    return VoraussetzungenEnum.Anschlusswert;
                case "AUSSCHLUSS_GROSSVERBRAUCHER":
                    return VoraussetzungenEnum.AusschlussGrossverbraucher;
                case "BESONDERE_VERBRAUCHSSTELLE":
                    return VoraussetzungenEnum.BesondereVerbrauchsstelle;
                case "BESTIMMTER_ABNAHMEFALL":
                    return VoraussetzungenEnum.BestimmterAbnahmefall;
                case "BESTIMMTE_VERTRAGSFORMALITAETEN":
                    return VoraussetzungenEnum.BestimmteVertragsformalitaeten;
                case "BETRIEBSSTUNDENBEGRENZUNG":
                    return VoraussetzungenEnum.Betriebsstundenbegrenzung;
                case "DIREKTVERTRIEB":
                    return VoraussetzungenEnum.Direktvertrieb;
                case "EINZUGSERMAECHTIGUNG":
                    return VoraussetzungenEnum.Einzugsermaechtigung;
                case "FAMILIENSTRUKTUR":
                    return VoraussetzungenEnum.Familienstruktur;
                case "FREIGABEZEITEN":
                    return VoraussetzungenEnum.Freigabezeiten;
                case "GEWERBE":
                    return VoraussetzungenEnum.Gewerbe;
                case "KOMBI_BONI":
                    return VoraussetzungenEnum.KombiBoni;
                case "LASTPROFIL":
                    return VoraussetzungenEnum.Lastprofil;
                case "LIEFERANBINDUNG_ALLE":
                    return VoraussetzungenEnum.LieferanbindungAlle;
                case "LIEFERANBINDUNG_EINE":
                    return VoraussetzungenEnum.LieferanbindungEine;
                case "LIEFERUNGSBESCHRAENKUNG_GASART":
                    return VoraussetzungenEnum.LieferungsbeschraenkungGasart;
                case "MAX_ZAEHLER_LIEFERSTELLEN":
                    return VoraussetzungenEnum.MaxZaehlerLieferstellen;
                case "MEHRERE_ZAEHLER_ABNAHMESTELLEN":
                    return VoraussetzungenEnum.MehrereZaehlerAbnahmestellen;
                case "MINDESTUMSATZ":
                    return VoraussetzungenEnum.Mindestumsatz;
                case "MITGLIEDSCHAFT":
                    return VoraussetzungenEnum.Mitgliedschaft;
                case "NACHWEIS_ZAHLUNGSFAEHIGKEIT":
                    return VoraussetzungenEnum.NachweisZahlungsfaehigkeit;
                case "NEUKUNDE":
                    return VoraussetzungenEnum.Neukunde;
                case "NEUKUNDE_MIT_VORAUSSETZUNGEN":
                    return VoraussetzungenEnum.NeukundeMitVoraussetzungen;
                case "NIEDRIGENERGIE":
                    return VoraussetzungenEnum.Niedrigenergie;
                case "ONLINEVORAUSSETZUNG":
                    return VoraussetzungenEnum.Onlinevoraussetzung;
                case "ORTSTEILE_LIEFERGEBIET":
                    return VoraussetzungenEnum.OrtsteileLiefergebiet;
                case "SELBSTABLESUNG":
                    return VoraussetzungenEnum.Selbstablesung;
                case "STAATLICHE_FOERDERUNG":
                    return VoraussetzungenEnum.StaatlicheFoerderung;
                case "UMSTELLUNG_ENERGIEART":
                    return VoraussetzungenEnum.UmstellungEnergieart;
                case "VORGESCHRIEBENE_ZUSATZANLAGE":
                    return VoraussetzungenEnum.VorgeschriebeneZusatzanlage;
                case "WAERMEBEDARF_ERDGAS":
                    return VoraussetzungenEnum.WaermebedarfErdgas;
                case "ZAEHLERTYP_GROESSE":
                    return VoraussetzungenEnum.ZaehlertypGroesse;
                case "ZEITPUNKT":
                    return VoraussetzungenEnum.Zeitpunkt;
                case "ZUSATZMODALITAET":
                    return VoraussetzungenEnum.Zusatzmodalitaet;
                case "ZUSATZPRODUKT":
                    return VoraussetzungenEnum.Zusatzprodukt;
            }
            throw new Exception("Cannot unmarshal type VoraussetzungenEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (VoraussetzungenEnum)untypedValue;
            switch (value)
            {
                case VoraussetzungenEnum.AlterKundenanlage:
                    serializer.Serialize(writer, "ALTER_KUNDENANLAGE");
                    return;
                case VoraussetzungenEnum.Altvertrag:
                    serializer.Serialize(writer, "ALTVERTRAG");
                    return;
                case VoraussetzungenEnum.Anlagebeschaffenheit:
                    serializer.Serialize(writer, "ANLAGEBESCHAFFENHEIT");
                    return;
                case VoraussetzungenEnum.Anschlussart:
                    serializer.Serialize(writer, "ANSCHLUSSART");
                    return;
                case VoraussetzungenEnum.Anschlusswert:
                    serializer.Serialize(writer, "ANSCHLUSSWERT");
                    return;
                case VoraussetzungenEnum.AusschlussGrossverbraucher:
                    serializer.Serialize(writer, "AUSSCHLUSS_GROSSVERBRAUCHER");
                    return;
                case VoraussetzungenEnum.BesondereVerbrauchsstelle:
                    serializer.Serialize(writer, "BESONDERE_VERBRAUCHSSTELLE");
                    return;
                case VoraussetzungenEnum.BestimmterAbnahmefall:
                    serializer.Serialize(writer, "BESTIMMTER_ABNAHMEFALL");
                    return;
                case VoraussetzungenEnum.BestimmteVertragsformalitaeten:
                    serializer.Serialize(writer, "BESTIMMTE_VERTRAGSFORMALITAETEN");
                    return;
                case VoraussetzungenEnum.Betriebsstundenbegrenzung:
                    serializer.Serialize(writer, "BETRIEBSSTUNDENBEGRENZUNG");
                    return;
                case VoraussetzungenEnum.Direktvertrieb:
                    serializer.Serialize(writer, "DIREKTVERTRIEB");
                    return;
                case VoraussetzungenEnum.Einzugsermaechtigung:
                    serializer.Serialize(writer, "EINZUGSERMAECHTIGUNG");
                    return;
                case VoraussetzungenEnum.Familienstruktur:
                    serializer.Serialize(writer, "FAMILIENSTRUKTUR");
                    return;
                case VoraussetzungenEnum.Freigabezeiten:
                    serializer.Serialize(writer, "FREIGABEZEITEN");
                    return;
                case VoraussetzungenEnum.Gewerbe:
                    serializer.Serialize(writer, "GEWERBE");
                    return;
                case VoraussetzungenEnum.KombiBoni:
                    serializer.Serialize(writer, "KOMBI_BONI");
                    return;
                case VoraussetzungenEnum.Lastprofil:
                    serializer.Serialize(writer, "LASTPROFIL");
                    return;
                case VoraussetzungenEnum.LieferanbindungAlle:
                    serializer.Serialize(writer, "LIEFERANBINDUNG_ALLE");
                    return;
                case VoraussetzungenEnum.LieferanbindungEine:
                    serializer.Serialize(writer, "LIEFERANBINDUNG_EINE");
                    return;
                case VoraussetzungenEnum.LieferungsbeschraenkungGasart:
                    serializer.Serialize(writer, "LIEFERUNGSBESCHRAENKUNG_GASART");
                    return;
                case VoraussetzungenEnum.MaxZaehlerLieferstellen:
                    serializer.Serialize(writer, "MAX_ZAEHLER_LIEFERSTELLEN");
                    return;
                case VoraussetzungenEnum.MehrereZaehlerAbnahmestellen:
                    serializer.Serialize(writer, "MEHRERE_ZAEHLER_ABNAHMESTELLEN");
                    return;
                case VoraussetzungenEnum.Mindestumsatz:
                    serializer.Serialize(writer, "MINDESTUMSATZ");
                    return;
                case VoraussetzungenEnum.Mitgliedschaft:
                    serializer.Serialize(writer, "MITGLIEDSCHAFT");
                    return;
                case VoraussetzungenEnum.NachweisZahlungsfaehigkeit:
                    serializer.Serialize(writer, "NACHWEIS_ZAHLUNGSFAEHIGKEIT");
                    return;
                case VoraussetzungenEnum.Neukunde:
                    serializer.Serialize(writer, "NEUKUNDE");
                    return;
                case VoraussetzungenEnum.NeukundeMitVoraussetzungen:
                    serializer.Serialize(writer, "NEUKUNDE_MIT_VORAUSSETZUNGEN");
                    return;
                case VoraussetzungenEnum.Niedrigenergie:
                    serializer.Serialize(writer, "NIEDRIGENERGIE");
                    return;
                case VoraussetzungenEnum.Onlinevoraussetzung:
                    serializer.Serialize(writer, "ONLINEVORAUSSETZUNG");
                    return;
                case VoraussetzungenEnum.OrtsteileLiefergebiet:
                    serializer.Serialize(writer, "ORTSTEILE_LIEFERGEBIET");
                    return;
                case VoraussetzungenEnum.Selbstablesung:
                    serializer.Serialize(writer, "SELBSTABLESUNG");
                    return;
                case VoraussetzungenEnum.StaatlicheFoerderung:
                    serializer.Serialize(writer, "STAATLICHE_FOERDERUNG");
                    return;
                case VoraussetzungenEnum.UmstellungEnergieart:
                    serializer.Serialize(writer, "UMSTELLUNG_ENERGIEART");
                    return;
                case VoraussetzungenEnum.VorgeschriebeneZusatzanlage:
                    serializer.Serialize(writer, "VORGESCHRIEBENE_ZUSATZANLAGE");
                    return;
                case VoraussetzungenEnum.WaermebedarfErdgas:
                    serializer.Serialize(writer, "WAERMEBEDARF_ERDGAS");
                    return;
                case VoraussetzungenEnum.ZaehlertypGroesse:
                    serializer.Serialize(writer, "ZAEHLERTYP_GROESSE");
                    return;
                case VoraussetzungenEnum.Zeitpunkt:
                    serializer.Serialize(writer, "ZEITPUNKT");
                    return;
                case VoraussetzungenEnum.Zusatzmodalitaet:
                    serializer.Serialize(writer, "ZUSATZMODALITAET");
                    return;
                case VoraussetzungenEnum.Zusatzprodukt:
                    serializer.Serialize(writer, "ZUSATZPRODUKT");
                    return;
            }
            throw new Exception("Cannot marshal type VoraussetzungenEnum");
        }

        public static readonly VoraussetzungenEnumConverter Singleton = new VoraussetzungenEnumConverter();
    }
}
