// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var gasqualitaet = Gasqualitaet.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Unterscheidung f√ºr hoch- und niedrig-kalorisches Gas.
    /// </summary>
    public enum GasqualitaetEnum { HGas, LGas };

    public class Gasqualitaet
    {
        public static GasqualitaetEnum FromJson(string json) => JsonConvert.DeserializeObject<GasqualitaetEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this GasqualitaetEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                GasqualitaetEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class GasqualitaetEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(GasqualitaetEnum) || t == typeof(GasqualitaetEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "H_GAS":
                    return GasqualitaetEnum.HGas;
                case "L_GAS":
                    return GasqualitaetEnum.LGas;
            }
            throw new Exception("Cannot unmarshal type GasqualitaetEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (GasqualitaetEnum)untypedValue;
            switch (value)
            {
                case GasqualitaetEnum.HGas:
                    serializer.Serialize(writer, "H_GAS");
                    return;
                case GasqualitaetEnum.LGas:
                    serializer.Serialize(writer, "L_GAS");
                    return;
            }
            throw new Exception("Cannot marshal type GasqualitaetEnum");
        }

        public static readonly GasqualitaetEnumConverter Singleton = new GasqualitaetEnumConverter();
    }
}
