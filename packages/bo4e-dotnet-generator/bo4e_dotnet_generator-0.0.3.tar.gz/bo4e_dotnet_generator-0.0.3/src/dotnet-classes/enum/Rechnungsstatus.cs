// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var rechnungsstatus = Rechnungsstatus.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Abbildung verschiedener Zust√§nde, die im Rahmen der Rechnungsbearbeitung durchlaufen
    /// werden.
    /// </summary>
    public enum RechnungsstatusEnum { Bezahlt, Gebucht, GeprueftFehlerhaft, GeprueftOk, Ungeprueft };

    public class Rechnungsstatus
    {
        public static RechnungsstatusEnum FromJson(string json) => JsonConvert.DeserializeObject<RechnungsstatusEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this RechnungsstatusEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                RechnungsstatusEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class RechnungsstatusEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(RechnungsstatusEnum) || t == typeof(RechnungsstatusEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "BEZAHLT":
                    return RechnungsstatusEnum.Bezahlt;
                case "GEBUCHT":
                    return RechnungsstatusEnum.Gebucht;
                case "GEPRUEFT_FEHLERHAFT":
                    return RechnungsstatusEnum.GeprueftFehlerhaft;
                case "GEPRUEFT_OK":
                    return RechnungsstatusEnum.GeprueftOk;
                case "UNGEPRUEFT":
                    return RechnungsstatusEnum.Ungeprueft;
            }
            throw new Exception("Cannot unmarshal type RechnungsstatusEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (RechnungsstatusEnum)untypedValue;
            switch (value)
            {
                case RechnungsstatusEnum.Bezahlt:
                    serializer.Serialize(writer, "BEZAHLT");
                    return;
                case RechnungsstatusEnum.Gebucht:
                    serializer.Serialize(writer, "GEBUCHT");
                    return;
                case RechnungsstatusEnum.GeprueftFehlerhaft:
                    serializer.Serialize(writer, "GEPRUEFT_FEHLERHAFT");
                    return;
                case RechnungsstatusEnum.GeprueftOk:
                    serializer.Serialize(writer, "GEPRUEFT_OK");
                    return;
                case RechnungsstatusEnum.Ungeprueft:
                    serializer.Serialize(writer, "UNGEPRUEFT");
                    return;
            }
            throw new Exception("Cannot marshal type RechnungsstatusEnum");
        }

        public static readonly RechnungsstatusEnumConverter Singleton = new RechnungsstatusEnumConverter();
    }
}
