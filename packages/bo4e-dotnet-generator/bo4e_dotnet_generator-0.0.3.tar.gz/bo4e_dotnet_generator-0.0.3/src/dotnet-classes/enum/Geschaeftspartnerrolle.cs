// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var geschaeftspartnerrolle = Geschaeftspartnerrolle.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Diese Rollen kann ein Gesch√§ftspartner einnehmen.
    /// </summary>
    public enum GeschaeftspartnerrolleEnum { Dienstleister, Interessent, Kunde, Lieferant, Marktpartner };

    public class Geschaeftspartnerrolle
    {
        public static GeschaeftspartnerrolleEnum FromJson(string json) => JsonConvert.DeserializeObject<GeschaeftspartnerrolleEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this GeschaeftspartnerrolleEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                GeschaeftspartnerrolleEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class GeschaeftspartnerrolleEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(GeschaeftspartnerrolleEnum) || t == typeof(GeschaeftspartnerrolleEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "DIENSTLEISTER":
                    return GeschaeftspartnerrolleEnum.Dienstleister;
                case "INTERESSENT":
                    return GeschaeftspartnerrolleEnum.Interessent;
                case "KUNDE":
                    return GeschaeftspartnerrolleEnum.Kunde;
                case "LIEFERANT":
                    return GeschaeftspartnerrolleEnum.Lieferant;
                case "MARKTPARTNER":
                    return GeschaeftspartnerrolleEnum.Marktpartner;
            }
            throw new Exception("Cannot unmarshal type GeschaeftspartnerrolleEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (GeschaeftspartnerrolleEnum)untypedValue;
            switch (value)
            {
                case GeschaeftspartnerrolleEnum.Dienstleister:
                    serializer.Serialize(writer, "DIENSTLEISTER");
                    return;
                case GeschaeftspartnerrolleEnum.Interessent:
                    serializer.Serialize(writer, "INTERESSENT");
                    return;
                case GeschaeftspartnerrolleEnum.Kunde:
                    serializer.Serialize(writer, "KUNDE");
                    return;
                case GeschaeftspartnerrolleEnum.Lieferant:
                    serializer.Serialize(writer, "LIEFERANT");
                    return;
                case GeschaeftspartnerrolleEnum.Marktpartner:
                    serializer.Serialize(writer, "MARKTPARTNER");
                    return;
            }
            throw new Exception("Cannot marshal type GeschaeftspartnerrolleEnum");
        }

        public static readonly GeschaeftspartnerrolleEnumConverter Singleton = new GeschaeftspartnerrolleEnumConverter();
    }
}
