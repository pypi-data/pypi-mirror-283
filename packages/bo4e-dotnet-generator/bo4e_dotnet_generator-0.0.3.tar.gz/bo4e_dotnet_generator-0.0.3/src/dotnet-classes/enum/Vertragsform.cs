// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var vertragsform = Vertragsform.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Aufzählung der Möglichkeiten zu Vertragsformen in Ausschreibungen.
    /// </summary>
    public enum VertragsformEnum { Direkt, Fax, Online };

    public class Vertragsform
    {
        public static VertragsformEnum FromJson(string json) => JsonConvert.DeserializeObject<VertragsformEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this VertragsformEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                VertragsformEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class VertragsformEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(VertragsformEnum) || t == typeof(VertragsformEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "DIREKT":
                    return VertragsformEnum.Direkt;
                case "FAX":
                    return VertragsformEnum.Fax;
                case "ONLINE":
                    return VertragsformEnum.Online;
            }
            throw new Exception("Cannot unmarshal type VertragsformEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (VertragsformEnum)untypedValue;
            switch (value)
            {
                case VertragsformEnum.Direkt:
                    serializer.Serialize(writer, "DIREKT");
                    return;
                case VertragsformEnum.Fax:
                    serializer.Serialize(writer, "FAX");
                    return;
                case VertragsformEnum.Online:
                    serializer.Serialize(writer, "ONLINE");
                    return;
            }
            throw new Exception("Cannot marshal type VertragsformEnum");
        }

        public static readonly VertragsformEnumConverter Singleton = new VertragsformEnumConverter();
    }
}
