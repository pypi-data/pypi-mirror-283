// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var vertragsstatus = Vertragsstatus.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Abbildung einer Statusinformation für Verträge.
    /// </summary>
    public enum VertragsstatusEnum { Abgelehnt, Aktiv, Angenommen, Beendet, Gekuendigt, InArbeit, Storniert, Uebermittelt, Widerrufen };

    public class Vertragsstatus
    {
        public static VertragsstatusEnum FromJson(string json) => JsonConvert.DeserializeObject<VertragsstatusEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this VertragsstatusEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                VertragsstatusEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class VertragsstatusEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(VertragsstatusEnum) || t == typeof(VertragsstatusEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ABGELEHNT":
                    return VertragsstatusEnum.Abgelehnt;
                case "AKTIV":
                    return VertragsstatusEnum.Aktiv;
                case "ANGENOMMEN":
                    return VertragsstatusEnum.Angenommen;
                case "BEENDET":
                    return VertragsstatusEnum.Beendet;
                case "GEKUENDIGT":
                    return VertragsstatusEnum.Gekuendigt;
                case "IN_ARBEIT":
                    return VertragsstatusEnum.InArbeit;
                case "STORNIERT":
                    return VertragsstatusEnum.Storniert;
                case "UEBERMITTELT":
                    return VertragsstatusEnum.Uebermittelt;
                case "WIDERRUFEN":
                    return VertragsstatusEnum.Widerrufen;
            }
            throw new Exception("Cannot unmarshal type VertragsstatusEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (VertragsstatusEnum)untypedValue;
            switch (value)
            {
                case VertragsstatusEnum.Abgelehnt:
                    serializer.Serialize(writer, "ABGELEHNT");
                    return;
                case VertragsstatusEnum.Aktiv:
                    serializer.Serialize(writer, "AKTIV");
                    return;
                case VertragsstatusEnum.Angenommen:
                    serializer.Serialize(writer, "ANGENOMMEN");
                    return;
                case VertragsstatusEnum.Beendet:
                    serializer.Serialize(writer, "BEENDET");
                    return;
                case VertragsstatusEnum.Gekuendigt:
                    serializer.Serialize(writer, "GEKUENDIGT");
                    return;
                case VertragsstatusEnum.InArbeit:
                    serializer.Serialize(writer, "IN_ARBEIT");
                    return;
                case VertragsstatusEnum.Storniert:
                    serializer.Serialize(writer, "STORNIERT");
                    return;
                case VertragsstatusEnum.Uebermittelt:
                    serializer.Serialize(writer, "UEBERMITTELT");
                    return;
                case VertragsstatusEnum.Widerrufen:
                    serializer.Serialize(writer, "WIDERRUFEN");
                    return;
            }
            throw new Exception("Cannot marshal type VertragsstatusEnum");
        }

        public static readonly VertragsstatusEnumConverter Singleton = new VertragsstatusEnumConverter();
    }
}
