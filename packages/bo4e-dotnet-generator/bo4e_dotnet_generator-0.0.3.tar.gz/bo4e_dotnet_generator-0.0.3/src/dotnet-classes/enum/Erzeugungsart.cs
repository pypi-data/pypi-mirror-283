// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var erzeugungsart = Erzeugungsart.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Auflistung der Erzeugungsarten von Energie.
    /// </summary>
    public enum ErzeugungsartEnum { Biogas, Biomasse, Fossil, Gas, Geothermie, Kernkraft, KlimaneutralesGas, Kohle, Kwk, Solar, Sonstige, SonstigeEeg, Wasser, Wind };

    public class Erzeugungsart
    {
        public static ErzeugungsartEnum FromJson(string json) => JsonConvert.DeserializeObject<ErzeugungsartEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ErzeugungsartEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ErzeugungsartEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ErzeugungsartEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ErzeugungsartEnum) || t == typeof(ErzeugungsartEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "BIOGAS":
                    return ErzeugungsartEnum.Biogas;
                case "BIOMASSE":
                    return ErzeugungsartEnum.Biomasse;
                case "FOSSIL":
                    return ErzeugungsartEnum.Fossil;
                case "GAS":
                    return ErzeugungsartEnum.Gas;
                case "GEOTHERMIE":
                    return ErzeugungsartEnum.Geothermie;
                case "KERNKRAFT":
                    return ErzeugungsartEnum.Kernkraft;
                case "KLIMANEUTRALES_GAS":
                    return ErzeugungsartEnum.KlimaneutralesGas;
                case "KOHLE":
                    return ErzeugungsartEnum.Kohle;
                case "KWK":
                    return ErzeugungsartEnum.Kwk;
                case "SOLAR":
                    return ErzeugungsartEnum.Solar;
                case "SONSTIGE":
                    return ErzeugungsartEnum.Sonstige;
                case "SONSTIGE_EEG":
                    return ErzeugungsartEnum.SonstigeEeg;
                case "WASSER":
                    return ErzeugungsartEnum.Wasser;
                case "WIND":
                    return ErzeugungsartEnum.Wind;
            }
            throw new Exception("Cannot unmarshal type ErzeugungsartEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ErzeugungsartEnum)untypedValue;
            switch (value)
            {
                case ErzeugungsartEnum.Biogas:
                    serializer.Serialize(writer, "BIOGAS");
                    return;
                case ErzeugungsartEnum.Biomasse:
                    serializer.Serialize(writer, "BIOMASSE");
                    return;
                case ErzeugungsartEnum.Fossil:
                    serializer.Serialize(writer, "FOSSIL");
                    return;
                case ErzeugungsartEnum.Gas:
                    serializer.Serialize(writer, "GAS");
                    return;
                case ErzeugungsartEnum.Geothermie:
                    serializer.Serialize(writer, "GEOTHERMIE");
                    return;
                case ErzeugungsartEnum.Kernkraft:
                    serializer.Serialize(writer, "KERNKRAFT");
                    return;
                case ErzeugungsartEnum.KlimaneutralesGas:
                    serializer.Serialize(writer, "KLIMANEUTRALES_GAS");
                    return;
                case ErzeugungsartEnum.Kohle:
                    serializer.Serialize(writer, "KOHLE");
                    return;
                case ErzeugungsartEnum.Kwk:
                    serializer.Serialize(writer, "KWK");
                    return;
                case ErzeugungsartEnum.Solar:
                    serializer.Serialize(writer, "SOLAR");
                    return;
                case ErzeugungsartEnum.Sonstige:
                    serializer.Serialize(writer, "SONSTIGE");
                    return;
                case ErzeugungsartEnum.SonstigeEeg:
                    serializer.Serialize(writer, "SONSTIGE_EEG");
                    return;
                case ErzeugungsartEnum.Wasser:
                    serializer.Serialize(writer, "WASSER");
                    return;
                case ErzeugungsartEnum.Wind:
                    serializer.Serialize(writer, "WIND");
                    return;
            }
            throw new Exception("Cannot marshal type ErzeugungsartEnum");
        }

        public static readonly ErzeugungsartEnumConverter Singleton = new ErzeugungsartEnumConverter();
    }
}
