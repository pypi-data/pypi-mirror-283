// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var bilanzierungsmethode = Bilanzierungsmethode.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Mit dieser Aufz√§hlung kann zwischen den Bilanzierungsmethoden bzw. -grundlagen
    /// unterschieden werden.
    /// </summary>
    public enum BilanzierungsmethodeEnum { Pauschal, Rlm, Slp, TlpGemeinsam, TlpGetrennt };

    public class Bilanzierungsmethode
    {
        public static BilanzierungsmethodeEnum FromJson(string json) => JsonConvert.DeserializeObject<BilanzierungsmethodeEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this BilanzierungsmethodeEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                BilanzierungsmethodeEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class BilanzierungsmethodeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(BilanzierungsmethodeEnum) || t == typeof(BilanzierungsmethodeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "PAUSCHAL":
                    return BilanzierungsmethodeEnum.Pauschal;
                case "RLM":
                    return BilanzierungsmethodeEnum.Rlm;
                case "SLP":
                    return BilanzierungsmethodeEnum.Slp;
                case "TLP_GEMEINSAM":
                    return BilanzierungsmethodeEnum.TlpGemeinsam;
                case "TLP_GETRENNT":
                    return BilanzierungsmethodeEnum.TlpGetrennt;
            }
            throw new Exception("Cannot unmarshal type BilanzierungsmethodeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (BilanzierungsmethodeEnum)untypedValue;
            switch (value)
            {
                case BilanzierungsmethodeEnum.Pauschal:
                    serializer.Serialize(writer, "PAUSCHAL");
                    return;
                case BilanzierungsmethodeEnum.Rlm:
                    serializer.Serialize(writer, "RLM");
                    return;
                case BilanzierungsmethodeEnum.Slp:
                    serializer.Serialize(writer, "SLP");
                    return;
                case BilanzierungsmethodeEnum.TlpGemeinsam:
                    serializer.Serialize(writer, "TLP_GEMEINSAM");
                    return;
                case BilanzierungsmethodeEnum.TlpGetrennt:
                    serializer.Serialize(writer, "TLP_GETRENNT");
                    return;
            }
            throw new Exception("Cannot marshal type BilanzierungsmethodeEnum");
        }

        public static readonly BilanzierungsmethodeEnumConverter Singleton = new BilanzierungsmethodeEnumConverter();
    }
}
