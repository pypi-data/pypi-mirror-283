// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var preisgarantietyp = Preisgarantietyp.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Aufzählung der Möglichkeiten für die Vergabe von Preisgarantien
    /// </summary>
    public enum PreisgarantietypEnum { AllePreisbestandteileBrutto, AllePreisbestandteileNetto, NurEnergiepreis, PreisbestandteileOhneAbgaben };

    public class Preisgarantietyp
    {
        public static PreisgarantietypEnum FromJson(string json) => JsonConvert.DeserializeObject<PreisgarantietypEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this PreisgarantietypEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                PreisgarantietypEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class PreisgarantietypEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PreisgarantietypEnum) || t == typeof(PreisgarantietypEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ALLE_PREISBESTANDTEILE_BRUTTO":
                    return PreisgarantietypEnum.AllePreisbestandteileBrutto;
                case "ALLE_PREISBESTANDTEILE_NETTO":
                    return PreisgarantietypEnum.AllePreisbestandteileNetto;
                case "NUR_ENERGIEPREIS":
                    return PreisgarantietypEnum.NurEnergiepreis;
                case "PREISBESTANDTEILE_OHNE_ABGABEN":
                    return PreisgarantietypEnum.PreisbestandteileOhneAbgaben;
            }
            throw new Exception("Cannot unmarshal type PreisgarantietypEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PreisgarantietypEnum)untypedValue;
            switch (value)
            {
                case PreisgarantietypEnum.AllePreisbestandteileBrutto:
                    serializer.Serialize(writer, "ALLE_PREISBESTANDTEILE_BRUTTO");
                    return;
                case PreisgarantietypEnum.AllePreisbestandteileNetto:
                    serializer.Serialize(writer, "ALLE_PREISBESTANDTEILE_NETTO");
                    return;
                case PreisgarantietypEnum.NurEnergiepreis:
                    serializer.Serialize(writer, "NUR_ENERGIEPREIS");
                    return;
                case PreisgarantietypEnum.PreisbestandteileOhneAbgaben:
                    serializer.Serialize(writer, "PREISBESTANDTEILE_OHNE_ABGABEN");
                    return;
            }
            throw new Exception("Cannot marshal type PreisgarantietypEnum");
        }

        public static readonly PreisgarantietypEnumConverter Singleton = new PreisgarantietypEnumConverter();
    }
}
