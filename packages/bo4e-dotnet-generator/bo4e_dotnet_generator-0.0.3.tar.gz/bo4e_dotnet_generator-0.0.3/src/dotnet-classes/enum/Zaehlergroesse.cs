// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var zaehlergroesse = Zaehlergroesse.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Auflistung möglicher Größen von Zählern
    /// </summary>
    public enum ZaehlergroesseEnum { G10, G100, G1000, G10000, G12500, G16, G160, G1600, G16000, G25, G250, G2500, G2Komma5, G4, G40, G400, G4000, G6, G65, G650, G6500 };

    public class Zaehlergroesse
    {
        public static ZaehlergroesseEnum FromJson(string json) => JsonConvert.DeserializeObject<ZaehlergroesseEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ZaehlergroesseEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ZaehlergroesseEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ZaehlergroesseEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ZaehlergroesseEnum) || t == typeof(ZaehlergroesseEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "G10":
                    return ZaehlergroesseEnum.G10;
                case "G100":
                    return ZaehlergroesseEnum.G100;
                case "G1000":
                    return ZaehlergroesseEnum.G1000;
                case "G10000":
                    return ZaehlergroesseEnum.G10000;
                case "G12500":
                    return ZaehlergroesseEnum.G12500;
                case "G16":
                    return ZaehlergroesseEnum.G16;
                case "G160":
                    return ZaehlergroesseEnum.G160;
                case "G1600":
                    return ZaehlergroesseEnum.G1600;
                case "G16000":
                    return ZaehlergroesseEnum.G16000;
                case "G25":
                    return ZaehlergroesseEnum.G25;
                case "G250":
                    return ZaehlergroesseEnum.G250;
                case "G2500":
                    return ZaehlergroesseEnum.G2500;
                case "G2KOMMA5":
                    return ZaehlergroesseEnum.G2Komma5;
                case "G4":
                    return ZaehlergroesseEnum.G4;
                case "G40":
                    return ZaehlergroesseEnum.G40;
                case "G400":
                    return ZaehlergroesseEnum.G400;
                case "G4000":
                    return ZaehlergroesseEnum.G4000;
                case "G6":
                    return ZaehlergroesseEnum.G6;
                case "G65":
                    return ZaehlergroesseEnum.G65;
                case "G650":
                    return ZaehlergroesseEnum.G650;
                case "G6500":
                    return ZaehlergroesseEnum.G6500;
            }
            throw new Exception("Cannot unmarshal type ZaehlergroesseEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ZaehlergroesseEnum)untypedValue;
            switch (value)
            {
                case ZaehlergroesseEnum.G10:
                    serializer.Serialize(writer, "G10");
                    return;
                case ZaehlergroesseEnum.G100:
                    serializer.Serialize(writer, "G100");
                    return;
                case ZaehlergroesseEnum.G1000:
                    serializer.Serialize(writer, "G1000");
                    return;
                case ZaehlergroesseEnum.G10000:
                    serializer.Serialize(writer, "G10000");
                    return;
                case ZaehlergroesseEnum.G12500:
                    serializer.Serialize(writer, "G12500");
                    return;
                case ZaehlergroesseEnum.G16:
                    serializer.Serialize(writer, "G16");
                    return;
                case ZaehlergroesseEnum.G160:
                    serializer.Serialize(writer, "G160");
                    return;
                case ZaehlergroesseEnum.G1600:
                    serializer.Serialize(writer, "G1600");
                    return;
                case ZaehlergroesseEnum.G16000:
                    serializer.Serialize(writer, "G16000");
                    return;
                case ZaehlergroesseEnum.G25:
                    serializer.Serialize(writer, "G25");
                    return;
                case ZaehlergroesseEnum.G250:
                    serializer.Serialize(writer, "G250");
                    return;
                case ZaehlergroesseEnum.G2500:
                    serializer.Serialize(writer, "G2500");
                    return;
                case ZaehlergroesseEnum.G2Komma5:
                    serializer.Serialize(writer, "G2KOMMA5");
                    return;
                case ZaehlergroesseEnum.G4:
                    serializer.Serialize(writer, "G4");
                    return;
                case ZaehlergroesseEnum.G40:
                    serializer.Serialize(writer, "G40");
                    return;
                case ZaehlergroesseEnum.G400:
                    serializer.Serialize(writer, "G400");
                    return;
                case ZaehlergroesseEnum.G4000:
                    serializer.Serialize(writer, "G4000");
                    return;
                case ZaehlergroesseEnum.G6:
                    serializer.Serialize(writer, "G6");
                    return;
                case ZaehlergroesseEnum.G65:
                    serializer.Serialize(writer, "G65");
                    return;
                case ZaehlergroesseEnum.G650:
                    serializer.Serialize(writer, "G650");
                    return;
                case ZaehlergroesseEnum.G6500:
                    serializer.Serialize(writer, "G6500");
                    return;
            }
            throw new Exception("Cannot marshal type ZaehlergroesseEnum");
        }

        public static readonly ZaehlergroesseEnumConverter Singleton = new ZaehlergroesseEnumConverter();
    }
}
