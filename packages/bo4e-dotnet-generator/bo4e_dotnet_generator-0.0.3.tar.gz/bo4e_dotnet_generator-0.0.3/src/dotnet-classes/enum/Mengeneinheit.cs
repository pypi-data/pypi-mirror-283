// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var mengeneinheit = Mengeneinheit.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Einheit: Messgrößen, die per Messung oder Vorgabe ermittelt werden können.
    /// </summary>
    public enum MengeneinheitEnum { Halbjahr, Jahr, Kubikmeter, Kvar, Kvarh, Kw, Kwh, Kwhk, Minute, Monat, Mw, Mwh, Prozent, Quartal, Sekunde, Stueck, Stunde, Tag, Var, Varh, ViertelStunde, W, Wh, Woche };

    public class Mengeneinheit
    {
        public static MengeneinheitEnum FromJson(string json) => JsonConvert.DeserializeObject<MengeneinheitEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this MengeneinheitEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                MengeneinheitEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class MengeneinheitEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(MengeneinheitEnum) || t == typeof(MengeneinheitEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "HALBJAHR":
                    return MengeneinheitEnum.Halbjahr;
                case "JAHR":
                    return MengeneinheitEnum.Jahr;
                case "KUBIKMETER":
                    return MengeneinheitEnum.Kubikmeter;
                case "KVAR":
                    return MengeneinheitEnum.Kvar;
                case "KVARH":
                    return MengeneinheitEnum.Kvarh;
                case "KW":
                    return MengeneinheitEnum.Kw;
                case "KWH":
                    return MengeneinheitEnum.Kwh;
                case "KWHK":
                    return MengeneinheitEnum.Kwhk;
                case "MINUTE":
                    return MengeneinheitEnum.Minute;
                case "MONAT":
                    return MengeneinheitEnum.Monat;
                case "MW":
                    return MengeneinheitEnum.Mw;
                case "MWH":
                    return MengeneinheitEnum.Mwh;
                case "PROZENT":
                    return MengeneinheitEnum.Prozent;
                case "QUARTAL":
                    return MengeneinheitEnum.Quartal;
                case "SEKUNDE":
                    return MengeneinheitEnum.Sekunde;
                case "STUECK":
                    return MengeneinheitEnum.Stueck;
                case "STUNDE":
                    return MengeneinheitEnum.Stunde;
                case "TAG":
                    return MengeneinheitEnum.Tag;
                case "VAR":
                    return MengeneinheitEnum.Var;
                case "VARH":
                    return MengeneinheitEnum.Varh;
                case "VIERTEL_STUNDE":
                    return MengeneinheitEnum.ViertelStunde;
                case "W":
                    return MengeneinheitEnum.W;
                case "WH":
                    return MengeneinheitEnum.Wh;
                case "WOCHE":
                    return MengeneinheitEnum.Woche;
            }
            throw new Exception("Cannot unmarshal type MengeneinheitEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (MengeneinheitEnum)untypedValue;
            switch (value)
            {
                case MengeneinheitEnum.Halbjahr:
                    serializer.Serialize(writer, "HALBJAHR");
                    return;
                case MengeneinheitEnum.Jahr:
                    serializer.Serialize(writer, "JAHR");
                    return;
                case MengeneinheitEnum.Kubikmeter:
                    serializer.Serialize(writer, "KUBIKMETER");
                    return;
                case MengeneinheitEnum.Kvar:
                    serializer.Serialize(writer, "KVAR");
                    return;
                case MengeneinheitEnum.Kvarh:
                    serializer.Serialize(writer, "KVARH");
                    return;
                case MengeneinheitEnum.Kw:
                    serializer.Serialize(writer, "KW");
                    return;
                case MengeneinheitEnum.Kwh:
                    serializer.Serialize(writer, "KWH");
                    return;
                case MengeneinheitEnum.Kwhk:
                    serializer.Serialize(writer, "KWHK");
                    return;
                case MengeneinheitEnum.Minute:
                    serializer.Serialize(writer, "MINUTE");
                    return;
                case MengeneinheitEnum.Monat:
                    serializer.Serialize(writer, "MONAT");
                    return;
                case MengeneinheitEnum.Mw:
                    serializer.Serialize(writer, "MW");
                    return;
                case MengeneinheitEnum.Mwh:
                    serializer.Serialize(writer, "MWH");
                    return;
                case MengeneinheitEnum.Prozent:
                    serializer.Serialize(writer, "PROZENT");
                    return;
                case MengeneinheitEnum.Quartal:
                    serializer.Serialize(writer, "QUARTAL");
                    return;
                case MengeneinheitEnum.Sekunde:
                    serializer.Serialize(writer, "SEKUNDE");
                    return;
                case MengeneinheitEnum.Stueck:
                    serializer.Serialize(writer, "STUECK");
                    return;
                case MengeneinheitEnum.Stunde:
                    serializer.Serialize(writer, "STUNDE");
                    return;
                case MengeneinheitEnum.Tag:
                    serializer.Serialize(writer, "TAG");
                    return;
                case MengeneinheitEnum.Var:
                    serializer.Serialize(writer, "VAR");
                    return;
                case MengeneinheitEnum.Varh:
                    serializer.Serialize(writer, "VARH");
                    return;
                case MengeneinheitEnum.ViertelStunde:
                    serializer.Serialize(writer, "VIERTEL_STUNDE");
                    return;
                case MengeneinheitEnum.W:
                    serializer.Serialize(writer, "W");
                    return;
                case MengeneinheitEnum.Wh:
                    serializer.Serialize(writer, "WH");
                    return;
                case MengeneinheitEnum.Woche:
                    serializer.Serialize(writer, "WOCHE");
                    return;
            }
            throw new Exception("Cannot marshal type MengeneinheitEnum");
        }

        public static readonly MengeneinheitEnumConverter Singleton = new MengeneinheitEnumConverter();
    }
}
