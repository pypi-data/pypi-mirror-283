// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var anrede = Anrede.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Übersicht möglicher Anreden, z.B. eines Geschäftspartners.
    /// </summary>
    public enum AnredeEnum { Eheleute, Erbengemeinschaft, Familie, Firma, Frau, Grundstuecksgemeinschaft, Herr };

    public class Anrede
    {
        public static AnredeEnum FromJson(string json) => JsonConvert.DeserializeObject<AnredeEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this AnredeEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                AnredeEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class AnredeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AnredeEnum) || t == typeof(AnredeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "EHELEUTE":
                    return AnredeEnum.Eheleute;
                case "ERBENGEMEINSCHAFT":
                    return AnredeEnum.Erbengemeinschaft;
                case "FAMILIE":
                    return AnredeEnum.Familie;
                case "FIRMA":
                    return AnredeEnum.Firma;
                case "FRAU":
                    return AnredeEnum.Frau;
                case "GRUNDSTUECKSGEMEINSCHAFT":
                    return AnredeEnum.Grundstuecksgemeinschaft;
                case "HERR":
                    return AnredeEnum.Herr;
            }
            throw new Exception("Cannot unmarshal type AnredeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AnredeEnum)untypedValue;
            switch (value)
            {
                case AnredeEnum.Eheleute:
                    serializer.Serialize(writer, "EHELEUTE");
                    return;
                case AnredeEnum.Erbengemeinschaft:
                    serializer.Serialize(writer, "ERBENGEMEINSCHAFT");
                    return;
                case AnredeEnum.Familie:
                    serializer.Serialize(writer, "FAMILIE");
                    return;
                case AnredeEnum.Firma:
                    serializer.Serialize(writer, "FIRMA");
                    return;
                case AnredeEnum.Frau:
                    serializer.Serialize(writer, "FRAU");
                    return;
                case AnredeEnum.Grundstuecksgemeinschaft:
                    serializer.Serialize(writer, "GRUNDSTUECKSGEMEINSCHAFT");
                    return;
                case AnredeEnum.Herr:
                    serializer.Serialize(writer, "HERR");
                    return;
            }
            throw new Exception("Cannot marshal type AnredeEnum");
        }

        public static readonly AnredeEnumConverter Singleton = new AnredeEnumConverter();
    }
}
