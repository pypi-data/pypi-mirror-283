// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var rechnungslegung = Rechnungslegung.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Aufzählung der Möglichkeiten zur Rechnungslegung in Ausschreibungen.
    /// </summary>
    public enum RechnungslegungEnum { AbschlJahresrechn, AbschlMonatsrechn, Monatsrechn, MonatsrechnJahresrechn, Vorkasse };

    public class Rechnungslegung
    {
        public static RechnungslegungEnum FromJson(string json) => JsonConvert.DeserializeObject<RechnungslegungEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this RechnungslegungEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                RechnungslegungEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class RechnungslegungEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(RechnungslegungEnum) || t == typeof(RechnungslegungEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ABSCHL_JAHRESRECHN":
                    return RechnungslegungEnum.AbschlJahresrechn;
                case "ABSCHL_MONATSRECHN":
                    return RechnungslegungEnum.AbschlMonatsrechn;
                case "MONATSRECHN":
                    return RechnungslegungEnum.Monatsrechn;
                case "MONATSRECHN_JAHRESRECHN":
                    return RechnungslegungEnum.MonatsrechnJahresrechn;
                case "VORKASSE":
                    return RechnungslegungEnum.Vorkasse;
            }
            throw new Exception("Cannot unmarshal type RechnungslegungEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (RechnungslegungEnum)untypedValue;
            switch (value)
            {
                case RechnungslegungEnum.AbschlJahresrechn:
                    serializer.Serialize(writer, "ABSCHL_JAHRESRECHN");
                    return;
                case RechnungslegungEnum.AbschlMonatsrechn:
                    serializer.Serialize(writer, "ABSCHL_MONATSRECHN");
                    return;
                case RechnungslegungEnum.Monatsrechn:
                    serializer.Serialize(writer, "MONATSRECHN");
                    return;
                case RechnungslegungEnum.MonatsrechnJahresrechn:
                    serializer.Serialize(writer, "MONATSRECHN_JAHRESRECHN");
                    return;
                case RechnungslegungEnum.Vorkasse:
                    serializer.Serialize(writer, "VORKASSE");
                    return;
            }
            throw new Exception("Cannot marshal type RechnungslegungEnum");
        }

        public static readonly RechnungslegungEnumConverter Singleton = new RechnungslegungEnumConverter();
    }
}
