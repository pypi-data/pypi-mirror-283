// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var organisationstyp = Organisationstyp.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Hier wird festgelegt, ob der Gesch√§ftspartner eine Person, eine Firma oder etwas anderes
    /// ist.
    /// </summary>
    public enum OrganisationstypEnum { KommunaleEinrichtung, Privatperson, StaatlicheBehoerde, Unternehmen };

    public class Organisationstyp
    {
        public static OrganisationstypEnum FromJson(string json) => JsonConvert.DeserializeObject<OrganisationstypEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this OrganisationstypEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                OrganisationstypEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class OrganisationstypEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(OrganisationstypEnum) || t == typeof(OrganisationstypEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "KOMMUNALE_EINRICHTUNG":
                    return OrganisationstypEnum.KommunaleEinrichtung;
                case "PRIVATPERSON":
                    return OrganisationstypEnum.Privatperson;
                case "STAATLICHE_BEHOERDE":
                    return OrganisationstypEnum.StaatlicheBehoerde;
                case "UNTERNEHMEN":
                    return OrganisationstypEnum.Unternehmen;
            }
            throw new Exception("Cannot unmarshal type OrganisationstypEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (OrganisationstypEnum)untypedValue;
            switch (value)
            {
                case OrganisationstypEnum.KommunaleEinrichtung:
                    serializer.Serialize(writer, "KOMMUNALE_EINRICHTUNG");
                    return;
                case OrganisationstypEnum.Privatperson:
                    serializer.Serialize(writer, "PRIVATPERSON");
                    return;
                case OrganisationstypEnum.StaatlicheBehoerde:
                    serializer.Serialize(writer, "STAATLICHE_BEHOERDE");
                    return;
                case OrganisationstypEnum.Unternehmen:
                    serializer.Serialize(writer, "UNTERNEHMEN");
                    return;
            }
            throw new Exception("Cannot marshal type OrganisationstypEnum");
        }

        public static readonly OrganisationstypEnumConverter Singleton = new OrganisationstypEnumConverter();
    }
}
