// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var dienstleistungstyp = Dienstleistungstyp.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Auflistung m√∂glicher abzurechnender Dienstleistungen.
    /// </summary>
    public enum DienstleistungstypEnum { AblesungHalbjaehrlich, AblesungJaehrlich, AblesungMonatlich, AblesungVierteljaehrlich, AblesungZusaetzlichKunde, AblesungZusaetzlichMsb, Auslesung2XTaeglichFernauslesung, AuslesungFernauslesung, AuslesungFernauslesungZusaetzlichMsb, AuslesungJaehrlichFernauslesung, AuslesungKompaktmengenumwerter, AuslesungManuellMsb, AuslesungMde, AuslesungMoatlichFernauslesung, AuslesungMonatlichFernauslesung, AuslesungStuendlichFernauslesung, AuslesungSystemmengenumwerter, AuslesungTaeglichFernauslesung, AuslesungTemperaturmengenumwerter, AuslesungVorgang, AuslesungZustandsmengenumwerter, DatenbereitstellungEinmalig, DatenbereitstellungHalbjaehrlich, DatenbereitstellungHistorischeLg, DatenbereitstellungJaehrlich, DatenbereitstellungMonatlich, DatenbereitstellungMonatlichZusaetzlich, DatenbereitstellungStuendlich, DatenbereitstellungTaeglich, DatenbereitstellungVierteljaehrlich, DatenbereitstellungWoechentlich, Entsperrung, Inkassokosten, Mahnkosten, Sperrung };

    public class Dienstleistungstyp
    {
        public static DienstleistungstypEnum FromJson(string json) => JsonConvert.DeserializeObject<DienstleistungstypEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this DienstleistungstypEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                DienstleistungstypEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class DienstleistungstypEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(DienstleistungstypEnum) || t == typeof(DienstleistungstypEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ABLESUNG_HALBJAEHRLICH":
                    return DienstleistungstypEnum.AblesungHalbjaehrlich;
                case "ABLESUNG_JAEHRLICH":
                    return DienstleistungstypEnum.AblesungJaehrlich;
                case "ABLESUNG_MONATLICH":
                    return DienstleistungstypEnum.AblesungMonatlich;
                case "ABLESUNG_VIERTELJAEHRLICH":
                    return DienstleistungstypEnum.AblesungVierteljaehrlich;
                case "ABLESUNG_ZUSAETZLICH_KUNDE":
                    return DienstleistungstypEnum.AblesungZusaetzlichKunde;
                case "ABLESUNG_ZUSAETZLICH_MSB":
                    return DienstleistungstypEnum.AblesungZusaetzlichMsb;
                case "AUSLESUNG_2X_TAEGLICH_FERNAUSLESUNG":
                    return DienstleistungstypEnum.Auslesung2XTaeglichFernauslesung;
                case "AUSLESUNG_FERNAUSLESUNG":
                    return DienstleistungstypEnum.AuslesungFernauslesung;
                case "AUSLESUNG_FERNAUSLESUNG_ZUSAETZLICH_MSB":
                    return DienstleistungstypEnum.AuslesungFernauslesungZusaetzlichMsb;
                case "AUSLESUNG_JAEHRLICH_FERNAUSLESUNG":
                    return DienstleistungstypEnum.AuslesungJaehrlichFernauslesung;
                case "AUSLESUNG_KOMPAKTMENGENUMWERTER":
                    return DienstleistungstypEnum.AuslesungKompaktmengenumwerter;
                case "AUSLESUNG_MANUELL_MSB":
                    return DienstleistungstypEnum.AuslesungManuellMsb;
                case "AUSLESUNG_MDE":
                    return DienstleistungstypEnum.AuslesungMde;
                case "AUSLESUNG_MOATLICH_FERNAUSLESUNG":
                    return DienstleistungstypEnum.AuslesungMoatlichFernauslesung;
                case "AUSLESUNG_MONATLICH_FERNAUSLESUNG":
                    return DienstleistungstypEnum.AuslesungMonatlichFernauslesung;
                case "AUSLESUNG_STUENDLICH_FERNAUSLESUNG":
                    return DienstleistungstypEnum.AuslesungStuendlichFernauslesung;
                case "AUSLESUNG_SYSTEMMENGENUMWERTER":
                    return DienstleistungstypEnum.AuslesungSystemmengenumwerter;
                case "AUSLESUNG_TAEGLICH_FERNAUSLESUNG":
                    return DienstleistungstypEnum.AuslesungTaeglichFernauslesung;
                case "AUSLESUNG_TEMPERATURMENGENUMWERTER":
                    return DienstleistungstypEnum.AuslesungTemperaturmengenumwerter;
                case "AUSLESUNG_VORGANG":
                    return DienstleistungstypEnum.AuslesungVorgang;
                case "AUSLESUNG_ZUSTANDSMENGENUMWERTER":
                    return DienstleistungstypEnum.AuslesungZustandsmengenumwerter;
                case "DATENBEREITSTELLUNG_EINMALIG":
                    return DienstleistungstypEnum.DatenbereitstellungEinmalig;
                case "DATENBEREITSTELLUNG_HALBJAEHRLICH":
                    return DienstleistungstypEnum.DatenbereitstellungHalbjaehrlich;
                case "DATENBEREITSTELLUNG_HISTORISCHE_LG":
                    return DienstleistungstypEnum.DatenbereitstellungHistorischeLg;
                case "DATENBEREITSTELLUNG_JAEHRLICH":
                    return DienstleistungstypEnum.DatenbereitstellungJaehrlich;
                case "DATENBEREITSTELLUNG_MONATLICH":
                    return DienstleistungstypEnum.DatenbereitstellungMonatlich;
                case "DATENBEREITSTELLUNG_MONATLICH_ZUSAETZLICH":
                    return DienstleistungstypEnum.DatenbereitstellungMonatlichZusaetzlich;
                case "DATENBEREITSTELLUNG_STUENDLICH":
                    return DienstleistungstypEnum.DatenbereitstellungStuendlich;
                case "DATENBEREITSTELLUNG_TAEGLICH":
                    return DienstleistungstypEnum.DatenbereitstellungTaeglich;
                case "DATENBEREITSTELLUNG_VIERTELJAEHRLICH":
                    return DienstleistungstypEnum.DatenbereitstellungVierteljaehrlich;
                case "DATENBEREITSTELLUNG_WOECHENTLICH":
                    return DienstleistungstypEnum.DatenbereitstellungWoechentlich;
                case "ENTSPERRUNG":
                    return DienstleistungstypEnum.Entsperrung;
                case "INKASSOKOSTEN":
                    return DienstleistungstypEnum.Inkassokosten;
                case "MAHNKOSTEN":
                    return DienstleistungstypEnum.Mahnkosten;
                case "SPERRUNG":
                    return DienstleistungstypEnum.Sperrung;
            }
            throw new Exception("Cannot unmarshal type DienstleistungstypEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (DienstleistungstypEnum)untypedValue;
            switch (value)
            {
                case DienstleistungstypEnum.AblesungHalbjaehrlich:
                    serializer.Serialize(writer, "ABLESUNG_HALBJAEHRLICH");
                    return;
                case DienstleistungstypEnum.AblesungJaehrlich:
                    serializer.Serialize(writer, "ABLESUNG_JAEHRLICH");
                    return;
                case DienstleistungstypEnum.AblesungMonatlich:
                    serializer.Serialize(writer, "ABLESUNG_MONATLICH");
                    return;
                case DienstleistungstypEnum.AblesungVierteljaehrlich:
                    serializer.Serialize(writer, "ABLESUNG_VIERTELJAEHRLICH");
                    return;
                case DienstleistungstypEnum.AblesungZusaetzlichKunde:
                    serializer.Serialize(writer, "ABLESUNG_ZUSAETZLICH_KUNDE");
                    return;
                case DienstleistungstypEnum.AblesungZusaetzlichMsb:
                    serializer.Serialize(writer, "ABLESUNG_ZUSAETZLICH_MSB");
                    return;
                case DienstleistungstypEnum.Auslesung2XTaeglichFernauslesung:
                    serializer.Serialize(writer, "AUSLESUNG_2X_TAEGLICH_FERNAUSLESUNG");
                    return;
                case DienstleistungstypEnum.AuslesungFernauslesung:
                    serializer.Serialize(writer, "AUSLESUNG_FERNAUSLESUNG");
                    return;
                case DienstleistungstypEnum.AuslesungFernauslesungZusaetzlichMsb:
                    serializer.Serialize(writer, "AUSLESUNG_FERNAUSLESUNG_ZUSAETZLICH_MSB");
                    return;
                case DienstleistungstypEnum.AuslesungJaehrlichFernauslesung:
                    serializer.Serialize(writer, "AUSLESUNG_JAEHRLICH_FERNAUSLESUNG");
                    return;
                case DienstleistungstypEnum.AuslesungKompaktmengenumwerter:
                    serializer.Serialize(writer, "AUSLESUNG_KOMPAKTMENGENUMWERTER");
                    return;
                case DienstleistungstypEnum.AuslesungManuellMsb:
                    serializer.Serialize(writer, "AUSLESUNG_MANUELL_MSB");
                    return;
                case DienstleistungstypEnum.AuslesungMde:
                    serializer.Serialize(writer, "AUSLESUNG_MDE");
                    return;
                case DienstleistungstypEnum.AuslesungMoatlichFernauslesung:
                    serializer.Serialize(writer, "AUSLESUNG_MOATLICH_FERNAUSLESUNG");
                    return;
                case DienstleistungstypEnum.AuslesungMonatlichFernauslesung:
                    serializer.Serialize(writer, "AUSLESUNG_MONATLICH_FERNAUSLESUNG");
                    return;
                case DienstleistungstypEnum.AuslesungStuendlichFernauslesung:
                    serializer.Serialize(writer, "AUSLESUNG_STUENDLICH_FERNAUSLESUNG");
                    return;
                case DienstleistungstypEnum.AuslesungSystemmengenumwerter:
                    serializer.Serialize(writer, "AUSLESUNG_SYSTEMMENGENUMWERTER");
                    return;
                case DienstleistungstypEnum.AuslesungTaeglichFernauslesung:
                    serializer.Serialize(writer, "AUSLESUNG_TAEGLICH_FERNAUSLESUNG");
                    return;
                case DienstleistungstypEnum.AuslesungTemperaturmengenumwerter:
                    serializer.Serialize(writer, "AUSLESUNG_TEMPERATURMENGENUMWERTER");
                    return;
                case DienstleistungstypEnum.AuslesungVorgang:
                    serializer.Serialize(writer, "AUSLESUNG_VORGANG");
                    return;
                case DienstleistungstypEnum.AuslesungZustandsmengenumwerter:
                    serializer.Serialize(writer, "AUSLESUNG_ZUSTANDSMENGENUMWERTER");
                    return;
                case DienstleistungstypEnum.DatenbereitstellungEinmalig:
                    serializer.Serialize(writer, "DATENBEREITSTELLUNG_EINMALIG");
                    return;
                case DienstleistungstypEnum.DatenbereitstellungHalbjaehrlich:
                    serializer.Serialize(writer, "DATENBEREITSTELLUNG_HALBJAEHRLICH");
                    return;
                case DienstleistungstypEnum.DatenbereitstellungHistorischeLg:
                    serializer.Serialize(writer, "DATENBEREITSTELLUNG_HISTORISCHE_LG");
                    return;
                case DienstleistungstypEnum.DatenbereitstellungJaehrlich:
                    serializer.Serialize(writer, "DATENBEREITSTELLUNG_JAEHRLICH");
                    return;
                case DienstleistungstypEnum.DatenbereitstellungMonatlich:
                    serializer.Serialize(writer, "DATENBEREITSTELLUNG_MONATLICH");
                    return;
                case DienstleistungstypEnum.DatenbereitstellungMonatlichZusaetzlich:
                    serializer.Serialize(writer, "DATENBEREITSTELLUNG_MONATLICH_ZUSAETZLICH");
                    return;
                case DienstleistungstypEnum.DatenbereitstellungStuendlich:
                    serializer.Serialize(writer, "DATENBEREITSTELLUNG_STUENDLICH");
                    return;
                case DienstleistungstypEnum.DatenbereitstellungTaeglich:
                    serializer.Serialize(writer, "DATENBEREITSTELLUNG_TAEGLICH");
                    return;
                case DienstleistungstypEnum.DatenbereitstellungVierteljaehrlich:
                    serializer.Serialize(writer, "DATENBEREITSTELLUNG_VIERTELJAEHRLICH");
                    return;
                case DienstleistungstypEnum.DatenbereitstellungWoechentlich:
                    serializer.Serialize(writer, "DATENBEREITSTELLUNG_WOECHENTLICH");
                    return;
                case DienstleistungstypEnum.Entsperrung:
                    serializer.Serialize(writer, "ENTSPERRUNG");
                    return;
                case DienstleistungstypEnum.Inkassokosten:
                    serializer.Serialize(writer, "INKASSOKOSTEN");
                    return;
                case DienstleistungstypEnum.Mahnkosten:
                    serializer.Serialize(writer, "MAHNKOSTEN");
                    return;
                case DienstleistungstypEnum.Sperrung:
                    serializer.Serialize(writer, "SPERRUNG");
                    return;
            }
            throw new Exception("Cannot marshal type DienstleistungstypEnum");
        }

        public static readonly DienstleistungstypEnumConverter Singleton = new DienstleistungstypEnumConverter();
    }
}
