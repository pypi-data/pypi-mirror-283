// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var positionsAufAbschlag = PositionsAufAbschlag.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Differenzierung der zu betrachtenden Produkte anhand der preiserhöhenden (Aufschlag)
    /// bzw. preisvermindernden (Abschlag) Zusatzvereinbarungen,
    /// die individuell zu einem neuen oder bestehenden Liefervertrag abgeschlossen werden
    /// können.
    /// Es können mehrere Auf-/Abschläge gleichzeitig ausgewählt werden.
    ///
    /// .. raw:: html
    ///
    /// <object data="../_static/images/bo4e/com/PositionsAufAbschlag.svg"
    /// type="image/svg+xml"></object>
    ///
    /// .. HINT::
    /// `PositionsAufAbschlag JSON Schema
    /// <https://json-schema.app/view/%23?url=https://raw.githubusercontent.com/BO4E/BO4E-Schemas/v202401.2.1/src/bo4e_schemas/com/PositionsAufAbschlag.json>`_
    /// </summary>
    public partial class PositionsAufAbschlag
    {
        /// <summary>
        /// zusatz_attribute: Optional[list["ZusatzAttribut"]] = None
        ///
        /// # pylint: disable=duplicate-code
        /// model_config = ConfigDict(
        /// alias_generator=camelize,
        /// populate_by_name=True,
        /// extra="allow",
        /// # json_encoders is deprecated, but there is no easy-to-use alternative. The best way
        /// would be to create
        /// # an annotated version of Decimal, but you would have to use it everywhere in the
        /// pydantic models.
        /// # See this issue for more info: https://github.com/pydantic/pydantic/issues/6375
        /// json_encoders={Decimal: str},
        /// )
        /// </summary>
        [JsonProperty("_id")]
        public string Id { get; set; }

        /// <summary>
        /// Version der BO-Struktur aka "fachliche Versionierung"
        /// </summary>
        [JsonProperty("_version")]
        public string Version { get; set; }

        /// <summary>
        /// Typ des AufAbschlages
        /// </summary>
        [JsonProperty("aufAbschlagstyp")]
        public AufAbschlagstyp? AufAbschlagstyp { get; set; }

        /// <summary>
        /// Einheit, in der der Auf-/Abschlag angegeben ist (z.B. ct/kWh).
        /// </summary>
        [JsonProperty("aufAbschlagswaehrung")]
        public Waehrungseinheit? AufAbschlagswaehrung { get; set; }

        /// <summary>
        /// Höhe des Auf-/Abschlages
        /// </summary>
        [JsonProperty("aufAbschlagswert")]
        public double? AufAbschlagswert { get; set; }

        /// <summary>
        /// Beschreibung zum Auf-/Abschlag
        /// </summary>
        [JsonProperty("beschreibung")]
        public string Beschreibung { get; set; }

        /// <summary>
        /// Bezeichnung des Auf-/Abschlags
        /// </summary>
        [JsonProperty("bezeichnung")]
        public string Bezeichnung { get; set; }

        [JsonProperty("zusatzAttribute")]
        public ZusatzAttribut[] ZusatzAttribute { get; set; }
    }

    /// <summary>
    /// Viele Datenobjekte weisen in unterschiedlichen Systemen eine eindeutige ID (Kundennummer,
    /// GP-Nummer etc.) auf.
    /// Beim Austausch von Datenobjekten zwischen verschiedenen Systemen ist es daher hilfreich,
    /// sich die eindeutigen IDs der anzubindenden Systeme zu merken.
    ///
    /// .. raw:: html
    ///
    /// <object data="../_static/images/bo4e/com/ZusatzAttribut.svg"
    /// type="image/svg+xml"></object>
    ///
    /// .. HINT::
    /// `ZusatzAttribut JSON Schema
    /// <https://json-schema.app/view/%23?url=https://raw.githubusercontent.com/BO4E/BO4E-Schemas/v202401.2.1/src/bo4e_schemas/ZusatzAttribut.json>`_
    /// </summary>
    public partial class ZusatzAttribut
    {
        /// <summary>
        /// Bezeichnung der externen Referenz (z.B. "microservice xyz" oder "SAP CRM GP-Nummer")
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>
        /// Bezeichnung der externen Referenz (z.B. "microservice xyz" oder "SAP CRM GP-Nummer")
        /// </summary>
        [JsonProperty("wert")]
        public object Wert { get; set; }
    }

    /// <summary>
    /// Festlegung, ob der Auf- oder Abschlag mit relativen oder absoluten Werten erfolgt.
    /// </summary>
    public enum AufAbschlagstyp { Absolut, Relativ };

    /// <summary>
    /// In diesem Enum werden die Währungen und ihre Untereinheiten definiert, beispielsweise für
    /// die Verwendung in Preisen.
    /// </summary>
    public enum Waehrungseinheit { Ct, Eur };

    public partial class PositionsAufAbschlag
    {
        public static PositionsAufAbschlag FromJson(string json) => JsonConvert.DeserializeObject<PositionsAufAbschlag>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this PositionsAufAbschlag self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                AufAbschlagstypConverter.Singleton,
                WaehrungseinheitConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class AufAbschlagstypConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AufAbschlagstyp) || t == typeof(AufAbschlagstyp?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ABSOLUT":
                    return AufAbschlagstyp.Absolut;
                case "RELATIV":
                    return AufAbschlagstyp.Relativ;
            }
            throw new Exception("Cannot unmarshal type AufAbschlagstyp");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AufAbschlagstyp)untypedValue;
            switch (value)
            {
                case AufAbschlagstyp.Absolut:
                    serializer.Serialize(writer, "ABSOLUT");
                    return;
                case AufAbschlagstyp.Relativ:
                    serializer.Serialize(writer, "RELATIV");
                    return;
            }
            throw new Exception("Cannot marshal type AufAbschlagstyp");
        }

        public static readonly AufAbschlagstypConverter Singleton = new AufAbschlagstypConverter();
    }

    internal class WaehrungseinheitConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Waehrungseinheit) || t == typeof(Waehrungseinheit?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "CT":
                    return Waehrungseinheit.Ct;
                case "EUR":
                    return Waehrungseinheit.Eur;
            }
            throw new Exception("Cannot unmarshal type Waehrungseinheit");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Waehrungseinheit)untypedValue;
            switch (value)
            {
                case Waehrungseinheit.Ct:
                    serializer.Serialize(writer, "CT");
                    return;
                case Waehrungseinheit.Eur:
                    serializer.Serialize(writer, "EUR");
                    return;
            }
            throw new Exception("Cannot marshal type Waehrungseinheit");
        }

        public static readonly WaehrungseinheitConverter Singleton = new WaehrungseinheitConverter();
    }
}
