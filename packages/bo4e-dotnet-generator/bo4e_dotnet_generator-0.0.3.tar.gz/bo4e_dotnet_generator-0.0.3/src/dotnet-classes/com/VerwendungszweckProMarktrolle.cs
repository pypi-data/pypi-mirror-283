// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var verwendungszweckProMarktrolle = VerwendungszweckProMarktrolle.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Dient zur Identifizierung des Verwendungszwecks der Marktrolle an der Marktlokation, der
    /// die Werte zu Ã¼bermitteln sind.
    ///
    /// .. raw:: html
    ///
    /// <object data="../_static/images/bo4e/com/Verwendungszweck.svg"
    /// type="image/svg+xml"></object>
    ///
    /// .. HINT::
    /// `Verwendungszweck JSON Schema
    /// <https://json-schema.app/view/%23?url=https://raw.githubusercontent.com/BO4E/BO4E-Schemas/v202401.2.1/src/bo4e_schemas/com/Verwendungszweck.json>`_
    /// </summary>
    public partial class VerwendungszweckProMarktrolle
    {
        /// <summary>
        /// zusatz_attribute: Optional[list["ZusatzAttribut"]] = None
        ///
        /// # pylint: disable=duplicate-code
        /// model_config = ConfigDict(
        /// alias_generator=camelize,
        /// populate_by_name=True,
        /// extra="allow",
        /// # json_encoders is deprecated, but there is no easy-to-use alternative. The best way
        /// would be to create
        /// # an annotated version of Decimal, but you would have to use it everywhere in the
        /// pydantic models.
        /// # See this issue for more info: https://github.com/pydantic/pydantic/issues/6375
        /// json_encoders={Decimal: str},
        /// )
        /// </summary>
        [JsonProperty("_id")]
        public string Id { get; set; }

        /// <summary>
        /// Version der BO-Struktur aka "fachliche Versionierung"
        /// </summary>
        [JsonProperty("_version")]
        public string Version { get; set; }

        /// <summary>
        /// Zwecke: Optional[list["Verwendungszweck"]] = None
        /// </summary>
        [JsonProperty("marktrolle")]
        public Marktrolle? Marktrolle { get; set; }

        [JsonProperty("zusatzAttribute")]
        public ZusatzAttribut[] ZusatzAttribute { get; set; }

        /// <summary>
        /// Verwendungszwecke
        /// </summary>
        [JsonProperty("zwecke")]
        public string[] Zwecke { get; set; }
    }

    /// <summary>
    /// Viele Datenobjekte weisen in unterschiedlichen Systemen eine eindeutige ID (Kundennummer,
    /// GP-Nummer etc.) auf.
    /// Beim Austausch von Datenobjekten zwischen verschiedenen Systemen ist es daher hilfreich,
    /// sich die eindeutigen IDs der anzubindenden Systeme zu merken.
    ///
    /// .. raw:: html
    ///
    /// <object data="../_static/images/bo4e/com/ZusatzAttribut.svg"
    /// type="image/svg+xml"></object>
    ///
    /// .. HINT::
    /// `ZusatzAttribut JSON Schema
    /// <https://json-schema.app/view/%23?url=https://raw.githubusercontent.com/BO4E/BO4E-Schemas/v202401.2.1/src/bo4e_schemas/ZusatzAttribut.json>`_
    /// </summary>
    public partial class ZusatzAttribut
    {
        /// <summary>
        /// Bezeichnung der externen Referenz (z.B. "microservice xyz" oder "SAP CRM GP-Nummer")
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>
        /// Bezeichnung der externen Referenz (z.B. "microservice xyz" oder "SAP CRM GP-Nummer")
        /// </summary>
        [JsonProperty("wert")]
        public object Wert { get; set; }
    }

    /// <summary>
    /// Diese Rollen kann ein Marktteilnehmer einnehmen.
    /// </summary>
    public enum Marktrolle { Biko, Bkv, Btr, Dp, Eiv, Esa, Kn, Lf, Mgv, Msb, Nb, Rb, Uenb };

    /// <summary>
    /// Verwendungszweck der Werte Marktlokation
    /// </summary>
    public enum Verwendungszweck { Bilanzkreisabrechnung, Endkundenabrechnung, ErmittlungAusgeglichenheitBilanzkreis, Mehrmindermengenabrechnung, Netznutzungsabrechnung, UebermittlungAnDasHknr };

    public partial class VerwendungszweckProMarktrolle
    {
        public static VerwendungszweckProMarktrolle FromJson(string json) => JsonConvert.DeserializeObject<VerwendungszweckProMarktrolle>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this VerwendungszweckProMarktrolle self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                MarktrolleConverter.Singleton,
                VerwendungszweckConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class MarktrolleConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Marktrolle) || t == typeof(Marktrolle?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "BIKO":
                    return Marktrolle.Biko;
                case "BKV":
                    return Marktrolle.Bkv;
                case "BTR":
                    return Marktrolle.Btr;
                case "DP":
                    return Marktrolle.Dp;
                case "EIV":
                    return Marktrolle.Eiv;
                case "ESA":
                    return Marktrolle.Esa;
                case "KN":
                    return Marktrolle.Kn;
                case "LF":
                    return Marktrolle.Lf;
                case "MGV":
                    return Marktrolle.Mgv;
                case "MSB":
                    return Marktrolle.Msb;
                case "NB":
                    return Marktrolle.Nb;
                case "RB":
                    return Marktrolle.Rb;
                case "UENB":
                    return Marktrolle.Uenb;
            }
            throw new Exception("Cannot unmarshal type Marktrolle");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Marktrolle)untypedValue;
            switch (value)
            {
                case Marktrolle.Biko:
                    serializer.Serialize(writer, "BIKO");
                    return;
                case Marktrolle.Bkv:
                    serializer.Serialize(writer, "BKV");
                    return;
                case Marktrolle.Btr:
                    serializer.Serialize(writer, "BTR");
                    return;
                case Marktrolle.Dp:
                    serializer.Serialize(writer, "DP");
                    return;
                case Marktrolle.Eiv:
                    serializer.Serialize(writer, "EIV");
                    return;
                case Marktrolle.Esa:
                    serializer.Serialize(writer, "ESA");
                    return;
                case Marktrolle.Kn:
                    serializer.Serialize(writer, "KN");
                    return;
                case Marktrolle.Lf:
                    serializer.Serialize(writer, "LF");
                    return;
                case Marktrolle.Mgv:
                    serializer.Serialize(writer, "MGV");
                    return;
                case Marktrolle.Msb:
                    serializer.Serialize(writer, "MSB");
                    return;
                case Marktrolle.Nb:
                    serializer.Serialize(writer, "NB");
                    return;
                case Marktrolle.Rb:
                    serializer.Serialize(writer, "RB");
                    return;
                case Marktrolle.Uenb:
                    serializer.Serialize(writer, "UENB");
                    return;
            }
            throw new Exception("Cannot marshal type Marktrolle");
        }

        public static readonly MarktrolleConverter Singleton = new MarktrolleConverter();
    }

    internal class VerwendungszweckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Verwendungszweck) || t == typeof(Verwendungszweck?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "BILANZKREISABRECHNUNG":
                    return Verwendungszweck.Bilanzkreisabrechnung;
                case "ENDKUNDENABRECHNUNG":
                    return Verwendungszweck.Endkundenabrechnung;
                case "ERMITTLUNG_AUSGEGLICHENHEIT_BILANZKREIS":
                    return Verwendungszweck.ErmittlungAusgeglichenheitBilanzkreis;
                case "MEHRMINDERMENGENABRECHNUNG":
                    return Verwendungszweck.Mehrmindermengenabrechnung;
                case "NETZNUTZUNGSABRECHNUNG":
                    return Verwendungszweck.Netznutzungsabrechnung;
                case "UEBERMITTLUNG_AN_DAS_HKNR":
                    return Verwendungszweck.UebermittlungAnDasHknr;
            }
            throw new Exception("Cannot unmarshal type Verwendungszweck");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Verwendungszweck)untypedValue;
            switch (value)
            {
                case Verwendungszweck.Bilanzkreisabrechnung:
                    serializer.Serialize(writer, "BILANZKREISABRECHNUNG");
                    return;
                case Verwendungszweck.Endkundenabrechnung:
                    serializer.Serialize(writer, "ENDKUNDENABRECHNUNG");
                    return;
                case Verwendungszweck.ErmittlungAusgeglichenheitBilanzkreis:
                    serializer.Serialize(writer, "ERMITTLUNG_AUSGEGLICHENHEIT_BILANZKREIS");
                    return;
                case Verwendungszweck.Mehrmindermengenabrechnung:
                    serializer.Serialize(writer, "MEHRMINDERMENGENABRECHNUNG");
                    return;
                case Verwendungszweck.Netznutzungsabrechnung:
                    serializer.Serialize(writer, "NETZNUTZUNGSABRECHNUNG");
                    return;
                case Verwendungszweck.UebermittlungAnDasHknr:
                    serializer.Serialize(writer, "UEBERMITTLUNG_AN_DAS_HKNR");
                    return;
            }
            throw new Exception("Cannot marshal type Verwendungszweck");
        }

        public static readonly VerwendungszweckConverter Singleton = new VerwendungszweckConverter();
    }
}
