// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var preisposition = Preisposition.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Preis für eine definierte Lieferung oder Leistung innerhalb eines Preisblattes
    ///
    /// .. raw:: html
    ///
    /// <object data="../_static/images/bo4e/com/Preisposition.svg"
    /// type="image/svg+xml"></object>
    ///
    /// .. HINT::
    /// `Preisposition JSON Schema
    /// <https://json-schema.app/view/%23?url=https://raw.githubusercontent.com/BO4E/BO4E-Schemas/v202401.2.1/src/bo4e_schemas/com/Preisposition.json>`_
    /// </summary>
    public partial class Preisposition
    {
        /// <summary>
        /// zusatz_attribute: Optional[list["ZusatzAttribut"]] = None
        ///
        /// # pylint: disable=duplicate-code
        /// model_config = ConfigDict(
        /// alias_generator=camelize,
        /// populate_by_name=True,
        /// extra="allow",
        /// # json_encoders is deprecated, but there is no easy-to-use alternative. The best way
        /// would be to create
        /// # an annotated version of Decimal, but you would have to use it everywhere in the
        /// pydantic models.
        /// # See this issue for more info: https://github.com/pydantic/pydantic/issues/6375
        /// json_encoders={Decimal: str},
        /// )
        /// </summary>
        [JsonProperty("_id")]
        public string Id { get; set; }

        /// <summary>
        /// Version der BO-Struktur aka "fachliche Versionierung"
        /// </summary>
        [JsonProperty("_version")]
        public string Version { get; set; }

        /// <summary>
        /// Mit der Menge der hier angegebenen Größe wird die Staffelung/Zonung durchgeführt. Z.B.
        /// Vollbenutzungsstunden
        /// </summary>
        [JsonProperty("bdewArtikelnummer")]
        public BdewArtikelnummer? BdewArtikelnummer { get; set; }

        /// <summary>
        /// Das Modell, das der Preisbildung zugrunde liegt
        /// </summary>
        [JsonProperty("berechnungsmethode")]
        public Kalkulationsmethode? Berechnungsmethode { get; set; }

        /// <summary>
        /// Hier wird festgelegt, auf welche Bezugsgrösse sich der Preis bezieht, z.B. kWh oder Stück
        /// </summary>
        [JsonProperty("bezugsgroesse")]
        public Mengeneinheit? Bezugsgroesse { get; set; }

        /// <summary>
        /// Der Anteil der Menge der Blindarbeit in Prozent von der Wirkarbeit, für die keine
        /// Abrechnung erfolgt
        /// </summary>
        [JsonProperty("freimengeBlindarbeit")]
        public double? FreimengeBlindarbeit { get; set; }

        /// <summary>
        /// gruppenartikel_id: Optional[str] = None
        /// </summary>
        [JsonProperty("freimengeLeistungsfaktor")]
        public double? FreimengeLeistungsfaktor { get; set; }

        /// <summary>
        /// Übergeordnete Gruppen-ID, die sich ggf. auf die Artikel-ID in der Preisstaffel bezieht
        /// </summary>
        [JsonProperty("gruppenartikelId")]
        public string GruppenartikelId { get; set; }

        /// <summary>
        /// Bezeichnung für die in der Position abgebildete Leistungserbringung
        /// </summary>
        [JsonProperty("leistungsbezeichnung")]
        public string Leistungsbezeichnung { get; set; }

        /// <summary>
        /// Standardisierte Bezeichnung für die abgerechnete Leistungserbringung
        /// </summary>
        [JsonProperty("leistungstyp")]
        public Leistungstyp? Leistungstyp { get; set; }

        /// <summary>
        /// Festlegung, mit welcher Preiseinheit abgerechnet wird, z.B. Ct. oder €
        /// </summary>
        [JsonProperty("preiseinheit")]
        public Waehrungseinheit? Preiseinheit { get; set; }

        /// <summary>
        /// Preisstaffeln, die zu dieser Preisposition gehören
        /// </summary>
        [JsonProperty("preisstaffeln")]
        public Preisstaffel[] Preisstaffeln { get; set; }

        /// <summary>
        /// Festlegung, für welche Tarifzeit der Preis hier festgelegt ist
        /// </summary>
        [JsonProperty("tarifzeit")]
        public Tarifzeit? Tarifzeit { get; set; }

        /// <summary>
        /// Festlegung, für welche Tarifzeit der Preis hier festgelegt ist
        /// </summary>
        [JsonProperty("zeitbasis")]
        public Mengeneinheit? Zeitbasis { get; set; }

        /// <summary>
        /// Mit der Menge der hier angegebenen Größe wird die Staffelung/Zonung durchgeführt. Z.B.
        /// Vollbenutzungsstunden
        /// </summary>
        [JsonProperty("zonungsgroesse")]
        public Bemessungsgroesse? Zonungsgroesse { get; set; }

        [JsonProperty("zusatzAttribute")]
        public ZusatzAttribut[] ZusatzAttribute { get; set; }
    }



    /// <summary>
    /// Viele Datenobjekte weisen in unterschiedlichen Systemen eine eindeutige ID (Kundennummer,
    /// GP-Nummer etc.) auf.
    /// Beim Austausch von Datenobjekten zwischen verschiedenen Systemen ist es daher hilfreich,
    /// sich die eindeutigen IDs der anzubindenden Systeme zu merken.
    ///
    /// .. raw:: html
    ///
    /// <object data="../_static/images/bo4e/com/ZusatzAttribut.svg"
    /// type="image/svg+xml"></object>
    ///
    /// .. HINT::
    /// `ZusatzAttribut JSON Schema
    /// <https://json-schema.app/view/%23?url=https://raw.githubusercontent.com/BO4E/BO4E-Schemas/v202401.2.1/src/bo4e_schemas/ZusatzAttribut.json>`_
    /// </summary>
    public partial class ZusatzAttribut
    {
        /// <summary>
        /// Bezeichnung der externen Referenz (z.B. "microservice xyz" oder "SAP CRM GP-Nummer")
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>
        /// Bezeichnung der externen Referenz (z.B. "microservice xyz" oder "SAP CRM GP-Nummer")
        /// </summary>
        [JsonProperty("wert")]
        public object Wert { get; set; }
    }

    /// <summary>
    /// BDEW Artikelnummern
    /// </summary>
    public enum BdewArtikelnummer { AbgabeKwkg, Abschlag, Ausgleichsenergie, AusgleichsenergieUnterdeckung, Befestigungseinrichtung, Blindmehrarbeit, Blindmehrleistung, Energiesteuer, EntgeltAbrechnung, EntgeltEinbauBetriebWartungMesstechnik, EntgeltFernauslesung, EntgeltMessungAblesung, Entsperrkosten, FixeArbeitsentgeltkomponente, FixeLeistungsentgeltkomponente, Grundpreis, Inkassokosten, Kommunikationseinrichtung, Konzessionsabgabe, Leistung, LeistungPauschal, Mahnkosten, MehrMindermengen, Mehrmenge, Mindermenge, MsbInklMessung, NotstromlieferungArbeit, NotstromlieferungLeistung, OffshoreHaftungsumlage, Paragraf19_StromNevUmlage, PruefgebuehrenAusserplanmaessig, RegelenergieArbeit, RegelenergieLeistung, Reserveleistung, Reservenetzkapazitaet, SingulaerGenutzteBetriebsmittel, SmartmeterGateway, Sperrkosten, Steuerbox, TechnischeSteuereinrichtung, UmlageAbschaltbareLasten, Untermessung, WandlerMengenumwerter, Wirkarbeit, Zaehleinrichtung, ZusaetzlicheAblesung };

    /// <summary>
    /// Auflistung der verschiedenen Berechnungsmethoden für ein Preisblatt.
    /// </summary>
    public enum Kalkulationsmethode { ApGpZonen, ApTransportOderVerteilnetz, ApTransportOderVerteilnetzOrtsverteilnetzSigmoid, BlindarbeitGt40_Prozent, BlindarbeitGt50_Prozent, BlindarbeitMitFreimenge, Funktionen, LpInstallLeistung, LpJahresverbrauch, LpTransportOderVerteilnetz, LpTransportOderVerteilnetzOrtsverteilnetzSigmoid, Sigmoid, Stufen, VerbrauchUeberSlpGrenzeFunktionsbezogenWeitereBerechnungAlsLgk, VorzonenGp, Zonen };

    /// <summary>
    /// Einheit: Messgrößen, die per Messung oder Vorgabe ermittelt werden können.
    /// </summary>
    public enum Mengeneinheit { Halbjahr, Jahr, Kubikmeter, Kvar, Kvarh, Kw, Kwh, Kwhk, Minute, Monat, Mw, Mwh, Prozent, Quartal, Sekunde, Stueck, Stunde, Tag, Var, Varh, ViertelStunde, W, Wh, Woche };

    public enum Leistungstyp { AblavUmlage, AblesungZusaetzlich, Abrechnung, AbrechnungZusaetzlich, ArbeitspreisBlindarbeitInd, ArbeitspreisBlindarbeitKap, ArbeitspreisWirkarbeit, AuslesungZusaetzlich, BilanzierungUmlage, Dienstleistung, EegUmlage, Energiesteuer, Entsperrung, Grundpreis, GrundpreisArbeit, GrundpreisLeistung, Inkassokosten, KonzessionsAbgabe, KwkUmlage, LeistungspreisWirkleistung, Mahnkosten, Mehrmindermenge, Messdienstleistung, MessdienstleistungInklMessung, Messpreis, Messstellenbetrieb, Netzpreis, OffshoreUmlage, RegelenergieUmlage, SonderkundenUmlage, SonstigerPreis, Sperrung };

    /// <summary>
    /// In diesem Enum werden die Währungen und ihre Untereinheiten definiert, beispielsweise für
    /// die Verwendung in Preisen.
    /// </summary>
    public enum Waehrungseinheit { Ct, Eur };

    /// <summary>
    /// Zur Kennzeichnung verschiedener Tarifzeiten, beispielsweise zur Bepreisung oder zur
    /// Verbrauchsermittlung.
    /// </summary>
    public enum Tarifzeit { TzHt, TzNt, TzStandard };

    /// <summary>
    /// Zur Abbildung von Messgrössen und zur Verwendung in energiewirtschaftlichen Berechnungen.
    /// </summary>
    public enum Bemessungsgroesse { Anzahl, Benutzungsdauer, BlindarbeitInd, BlindarbeitKap, BlindleistungInd, BlindleistungKap, LeistungEl, LeistungTh, Volumen, Volumenstrom, WirkarbeitEl, WirkarbeitTh };

    public partial class Preisposition
    {
        public static Preisposition FromJson(string json) => JsonConvert.DeserializeObject<Preisposition>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Preisposition self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                BdewArtikelnummerConverter.Singleton,
                KalkulationsmethodeConverter.Singleton,
                MengeneinheitConverter.Singleton,
                LeistungstypConverter.Singleton,
                WaehrungseinheitConverter.Singleton,
                TarifzeitConverter.Singleton,
                BemessungsgroesseConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class BdewArtikelnummerConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(BdewArtikelnummer) || t == typeof(BdewArtikelnummer?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ABGABE_KWKG":
                    return BdewArtikelnummer.AbgabeKwkg;
                case "ABSCHLAG":
                    return BdewArtikelnummer.Abschlag;
                case "AUSGLEICHSENERGIE":
                    return BdewArtikelnummer.Ausgleichsenergie;
                case "AUSGLEICHSENERGIE_UNTERDECKUNG":
                    return BdewArtikelnummer.AusgleichsenergieUnterdeckung;
                case "BEFESTIGUNGSEINRICHTUNG":
                    return BdewArtikelnummer.Befestigungseinrichtung;
                case "BLINDMEHRARBEIT":
                    return BdewArtikelnummer.Blindmehrarbeit;
                case "BLINDMEHRLEISTUNG":
                    return BdewArtikelnummer.Blindmehrleistung;
                case "ENERGIESTEUER":
                    return BdewArtikelnummer.Energiesteuer;
                case "ENTGELT_ABRECHNUNG":
                    return BdewArtikelnummer.EntgeltAbrechnung;
                case "ENTGELT_EINBAU_BETRIEB_WARTUNG_MESSTECHNIK":
                    return BdewArtikelnummer.EntgeltEinbauBetriebWartungMesstechnik;
                case "ENTGELT_FERNAUSLESUNG":
                    return BdewArtikelnummer.EntgeltFernauslesung;
                case "ENTGELT_MESSUNG_ABLESUNG":
                    return BdewArtikelnummer.EntgeltMessungAblesung;
                case "ENTSPERRKOSTEN":
                    return BdewArtikelnummer.Entsperrkosten;
                case "FIXE_ARBEITSENTGELTKOMPONENTE":
                    return BdewArtikelnummer.FixeArbeitsentgeltkomponente;
                case "FIXE_LEISTUNGSENTGELTKOMPONENTE":
                    return BdewArtikelnummer.FixeLeistungsentgeltkomponente;
                case "GRUNDPREIS":
                    return BdewArtikelnummer.Grundpreis;
                case "INKASSOKOSTEN":
                    return BdewArtikelnummer.Inkassokosten;
                case "KOMMUNIKATIONSEINRICHTUNG":
                    return BdewArtikelnummer.Kommunikationseinrichtung;
                case "KONZESSIONSABGABE":
                    return BdewArtikelnummer.Konzessionsabgabe;
                case "LEISTUNG":
                    return BdewArtikelnummer.Leistung;
                case "LEISTUNG_PAUSCHAL":
                    return BdewArtikelnummer.LeistungPauschal;
                case "MAHNKOSTEN":
                    return BdewArtikelnummer.Mahnkosten;
                case "MEHRMENGE":
                    return BdewArtikelnummer.Mehrmenge;
                case "MEHR_MINDERMENGEN":
                    return BdewArtikelnummer.MehrMindermengen;
                case "MINDERMENGE":
                    return BdewArtikelnummer.Mindermenge;
                case "MSB_INKL_MESSUNG":
                    return BdewArtikelnummer.MsbInklMessung;
                case "NOTSTROMLIEFERUNG_ARBEIT":
                    return BdewArtikelnummer.NotstromlieferungArbeit;
                case "NOTSTROMLIEFERUNG_LEISTUNG":
                    return BdewArtikelnummer.NotstromlieferungLeistung;
                case "OFFSHORE_HAFTUNGSUMLAGE":
                    return BdewArtikelnummer.OffshoreHaftungsumlage;
                case "PARAGRAF_19_STROM_NEV_UMLAGE":
                    return BdewArtikelnummer.Paragraf19_StromNevUmlage;
                case "PRUEFGEBUEHREN_AUSSERPLANMAESSIG":
                    return BdewArtikelnummer.PruefgebuehrenAusserplanmaessig;
                case "REGELENERGIE_ARBEIT":
                    return BdewArtikelnummer.RegelenergieArbeit;
                case "REGELENERGIE_LEISTUNG":
                    return BdewArtikelnummer.RegelenergieLeistung;
                case "RESERVELEISTUNG":
                    return BdewArtikelnummer.Reserveleistung;
                case "RESERVENETZKAPAZITAET":
                    return BdewArtikelnummer.Reservenetzkapazitaet;
                case "SINGULAER_GENUTZTE_BETRIEBSMITTEL":
                    return BdewArtikelnummer.SingulaerGenutzteBetriebsmittel;
                case "SMARTMETER_GATEWAY":
                    return BdewArtikelnummer.SmartmeterGateway;
                case "SPERRKOSTEN":
                    return BdewArtikelnummer.Sperrkosten;
                case "STEUERBOX":
                    return BdewArtikelnummer.Steuerbox;
                case "TECHNISCHE_STEUEREINRICHTUNG":
                    return BdewArtikelnummer.TechnischeSteuereinrichtung;
                case "UMLAGE_ABSCHALTBARE_LASTEN":
                    return BdewArtikelnummer.UmlageAbschaltbareLasten;
                case "UNTERMESSUNG":
                    return BdewArtikelnummer.Untermessung;
                case "WANDLER_MENGENUMWERTER":
                    return BdewArtikelnummer.WandlerMengenumwerter;
                case "WIRKARBEIT":
                    return BdewArtikelnummer.Wirkarbeit;
                case "ZAEHLEINRICHTUNG":
                    return BdewArtikelnummer.Zaehleinrichtung;
                case "ZUSAETZLICHE_ABLESUNG":
                    return BdewArtikelnummer.ZusaetzlicheAblesung;
            }
            throw new Exception("Cannot unmarshal type BdewArtikelnummer");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (BdewArtikelnummer)untypedValue;
            switch (value)
            {
                case BdewArtikelnummer.AbgabeKwkg:
                    serializer.Serialize(writer, "ABGABE_KWKG");
                    return;
                case BdewArtikelnummer.Abschlag:
                    serializer.Serialize(writer, "ABSCHLAG");
                    return;
                case BdewArtikelnummer.Ausgleichsenergie:
                    serializer.Serialize(writer, "AUSGLEICHSENERGIE");
                    return;
                case BdewArtikelnummer.AusgleichsenergieUnterdeckung:
                    serializer.Serialize(writer, "AUSGLEICHSENERGIE_UNTERDECKUNG");
                    return;
                case BdewArtikelnummer.Befestigungseinrichtung:
                    serializer.Serialize(writer, "BEFESTIGUNGSEINRICHTUNG");
                    return;
                case BdewArtikelnummer.Blindmehrarbeit:
                    serializer.Serialize(writer, "BLINDMEHRARBEIT");
                    return;
                case BdewArtikelnummer.Blindmehrleistung:
                    serializer.Serialize(writer, "BLINDMEHRLEISTUNG");
                    return;
                case BdewArtikelnummer.Energiesteuer:
                    serializer.Serialize(writer, "ENERGIESTEUER");
                    return;
                case BdewArtikelnummer.EntgeltAbrechnung:
                    serializer.Serialize(writer, "ENTGELT_ABRECHNUNG");
                    return;
                case BdewArtikelnummer.EntgeltEinbauBetriebWartungMesstechnik:
                    serializer.Serialize(writer, "ENTGELT_EINBAU_BETRIEB_WARTUNG_MESSTECHNIK");
                    return;
                case BdewArtikelnummer.EntgeltFernauslesung:
                    serializer.Serialize(writer, "ENTGELT_FERNAUSLESUNG");
                    return;
                case BdewArtikelnummer.EntgeltMessungAblesung:
                    serializer.Serialize(writer, "ENTGELT_MESSUNG_ABLESUNG");
                    return;
                case BdewArtikelnummer.Entsperrkosten:
                    serializer.Serialize(writer, "ENTSPERRKOSTEN");
                    return;
                case BdewArtikelnummer.FixeArbeitsentgeltkomponente:
                    serializer.Serialize(writer, "FIXE_ARBEITSENTGELTKOMPONENTE");
                    return;
                case BdewArtikelnummer.FixeLeistungsentgeltkomponente:
                    serializer.Serialize(writer, "FIXE_LEISTUNGSENTGELTKOMPONENTE");
                    return;
                case BdewArtikelnummer.Grundpreis:
                    serializer.Serialize(writer, "GRUNDPREIS");
                    return;
                case BdewArtikelnummer.Inkassokosten:
                    serializer.Serialize(writer, "INKASSOKOSTEN");
                    return;
                case BdewArtikelnummer.Kommunikationseinrichtung:
                    serializer.Serialize(writer, "KOMMUNIKATIONSEINRICHTUNG");
                    return;
                case BdewArtikelnummer.Konzessionsabgabe:
                    serializer.Serialize(writer, "KONZESSIONSABGABE");
                    return;
                case BdewArtikelnummer.Leistung:
                    serializer.Serialize(writer, "LEISTUNG");
                    return;
                case BdewArtikelnummer.LeistungPauschal:
                    serializer.Serialize(writer, "LEISTUNG_PAUSCHAL");
                    return;
                case BdewArtikelnummer.Mahnkosten:
                    serializer.Serialize(writer, "MAHNKOSTEN");
                    return;
                case BdewArtikelnummer.Mehrmenge:
                    serializer.Serialize(writer, "MEHRMENGE");
                    return;
                case BdewArtikelnummer.MehrMindermengen:
                    serializer.Serialize(writer, "MEHR_MINDERMENGEN");
                    return;
                case BdewArtikelnummer.Mindermenge:
                    serializer.Serialize(writer, "MINDERMENGE");
                    return;
                case BdewArtikelnummer.MsbInklMessung:
                    serializer.Serialize(writer, "MSB_INKL_MESSUNG");
                    return;
                case BdewArtikelnummer.NotstromlieferungArbeit:
                    serializer.Serialize(writer, "NOTSTROMLIEFERUNG_ARBEIT");
                    return;
                case BdewArtikelnummer.NotstromlieferungLeistung:
                    serializer.Serialize(writer, "NOTSTROMLIEFERUNG_LEISTUNG");
                    return;
                case BdewArtikelnummer.OffshoreHaftungsumlage:
                    serializer.Serialize(writer, "OFFSHORE_HAFTUNGSUMLAGE");
                    return;
                case BdewArtikelnummer.Paragraf19_StromNevUmlage:
                    serializer.Serialize(writer, "PARAGRAF_19_STROM_NEV_UMLAGE");
                    return;
                case BdewArtikelnummer.PruefgebuehrenAusserplanmaessig:
                    serializer.Serialize(writer, "PRUEFGEBUEHREN_AUSSERPLANMAESSIG");
                    return;
                case BdewArtikelnummer.RegelenergieArbeit:
                    serializer.Serialize(writer, "REGELENERGIE_ARBEIT");
                    return;
                case BdewArtikelnummer.RegelenergieLeistung:
                    serializer.Serialize(writer, "REGELENERGIE_LEISTUNG");
                    return;
                case BdewArtikelnummer.Reserveleistung:
                    serializer.Serialize(writer, "RESERVELEISTUNG");
                    return;
                case BdewArtikelnummer.Reservenetzkapazitaet:
                    serializer.Serialize(writer, "RESERVENETZKAPAZITAET");
                    return;
                case BdewArtikelnummer.SingulaerGenutzteBetriebsmittel:
                    serializer.Serialize(writer, "SINGULAER_GENUTZTE_BETRIEBSMITTEL");
                    return;
                case BdewArtikelnummer.SmartmeterGateway:
                    serializer.Serialize(writer, "SMARTMETER_GATEWAY");
                    return;
                case BdewArtikelnummer.Sperrkosten:
                    serializer.Serialize(writer, "SPERRKOSTEN");
                    return;
                case BdewArtikelnummer.Steuerbox:
                    serializer.Serialize(writer, "STEUERBOX");
                    return;
                case BdewArtikelnummer.TechnischeSteuereinrichtung:
                    serializer.Serialize(writer, "TECHNISCHE_STEUEREINRICHTUNG");
                    return;
                case BdewArtikelnummer.UmlageAbschaltbareLasten:
                    serializer.Serialize(writer, "UMLAGE_ABSCHALTBARE_LASTEN");
                    return;
                case BdewArtikelnummer.Untermessung:
                    serializer.Serialize(writer, "UNTERMESSUNG");
                    return;
                case BdewArtikelnummer.WandlerMengenumwerter:
                    serializer.Serialize(writer, "WANDLER_MENGENUMWERTER");
                    return;
                case BdewArtikelnummer.Wirkarbeit:
                    serializer.Serialize(writer, "WIRKARBEIT");
                    return;
                case BdewArtikelnummer.Zaehleinrichtung:
                    serializer.Serialize(writer, "ZAEHLEINRICHTUNG");
                    return;
                case BdewArtikelnummer.ZusaetzlicheAblesung:
                    serializer.Serialize(writer, "ZUSAETZLICHE_ABLESUNG");
                    return;
            }
            throw new Exception("Cannot marshal type BdewArtikelnummer");
        }

        public static readonly BdewArtikelnummerConverter Singleton = new BdewArtikelnummerConverter();
    }

    internal class KalkulationsmethodeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Kalkulationsmethode) || t == typeof(Kalkulationsmethode?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "AP_GP_ZONEN":
                    return Kalkulationsmethode.ApGpZonen;
                case "AP_TRANSPORT_ODER_VERTEILNETZ":
                    return Kalkulationsmethode.ApTransportOderVerteilnetz;
                case "AP_TRANSPORT_ODER_VERTEILNETZ_ORTSVERTEILNETZ_SIGMOID":
                    return Kalkulationsmethode.ApTransportOderVerteilnetzOrtsverteilnetzSigmoid;
                case "BLINDARBEIT_GT_40_PROZENT":
                    return Kalkulationsmethode.BlindarbeitGt40_Prozent;
                case "BLINDARBEIT_GT_50_PROZENT":
                    return Kalkulationsmethode.BlindarbeitGt50_Prozent;
                case "BLINDARBEIT_MIT_FREIMENGE":
                    return Kalkulationsmethode.BlindarbeitMitFreimenge;
                case "FUNKTIONEN":
                    return Kalkulationsmethode.Funktionen;
                case "LP_INSTALL_LEISTUNG":
                    return Kalkulationsmethode.LpInstallLeistung;
                case "LP_JAHRESVERBRAUCH":
                    return Kalkulationsmethode.LpJahresverbrauch;
                case "LP_TRANSPORT_ODER_VERTEILNETZ":
                    return Kalkulationsmethode.LpTransportOderVerteilnetz;
                case "LP_TRANSPORT_ODER_VERTEILNETZ_ORTSVERTEILNETZ_SIGMOID":
                    return Kalkulationsmethode.LpTransportOderVerteilnetzOrtsverteilnetzSigmoid;
                case "SIGMOID":
                    return Kalkulationsmethode.Sigmoid;
                case "STUFEN":
                    return Kalkulationsmethode.Stufen;
                case "VERBRAUCH_UEBER_SLP_GRENZE_FUNKTIONSBEZOGEN_WEITERE_BERECHNUNG_ALS_LGK":
                    return Kalkulationsmethode.VerbrauchUeberSlpGrenzeFunktionsbezogenWeitereBerechnungAlsLgk;
                case "VORZONEN_GP":
                    return Kalkulationsmethode.VorzonenGp;
                case "ZONEN":
                    return Kalkulationsmethode.Zonen;
            }
            throw new Exception("Cannot unmarshal type Kalkulationsmethode");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Kalkulationsmethode)untypedValue;
            switch (value)
            {
                case Kalkulationsmethode.ApGpZonen:
                    serializer.Serialize(writer, "AP_GP_ZONEN");
                    return;
                case Kalkulationsmethode.ApTransportOderVerteilnetz:
                    serializer.Serialize(writer, "AP_TRANSPORT_ODER_VERTEILNETZ");
                    return;
                case Kalkulationsmethode.ApTransportOderVerteilnetzOrtsverteilnetzSigmoid:
                    serializer.Serialize(writer, "AP_TRANSPORT_ODER_VERTEILNETZ_ORTSVERTEILNETZ_SIGMOID");
                    return;
                case Kalkulationsmethode.BlindarbeitGt40_Prozent:
                    serializer.Serialize(writer, "BLINDARBEIT_GT_40_PROZENT");
                    return;
                case Kalkulationsmethode.BlindarbeitGt50_Prozent:
                    serializer.Serialize(writer, "BLINDARBEIT_GT_50_PROZENT");
                    return;
                case Kalkulationsmethode.BlindarbeitMitFreimenge:
                    serializer.Serialize(writer, "BLINDARBEIT_MIT_FREIMENGE");
                    return;
                case Kalkulationsmethode.Funktionen:
                    serializer.Serialize(writer, "FUNKTIONEN");
                    return;
                case Kalkulationsmethode.LpInstallLeistung:
                    serializer.Serialize(writer, "LP_INSTALL_LEISTUNG");
                    return;
                case Kalkulationsmethode.LpJahresverbrauch:
                    serializer.Serialize(writer, "LP_JAHRESVERBRAUCH");
                    return;
                case Kalkulationsmethode.LpTransportOderVerteilnetz:
                    serializer.Serialize(writer, "LP_TRANSPORT_ODER_VERTEILNETZ");
                    return;
                case Kalkulationsmethode.LpTransportOderVerteilnetzOrtsverteilnetzSigmoid:
                    serializer.Serialize(writer, "LP_TRANSPORT_ODER_VERTEILNETZ_ORTSVERTEILNETZ_SIGMOID");
                    return;
                case Kalkulationsmethode.Sigmoid:
                    serializer.Serialize(writer, "SIGMOID");
                    return;
                case Kalkulationsmethode.Stufen:
                    serializer.Serialize(writer, "STUFEN");
                    return;
                case Kalkulationsmethode.VerbrauchUeberSlpGrenzeFunktionsbezogenWeitereBerechnungAlsLgk:
                    serializer.Serialize(writer, "VERBRAUCH_UEBER_SLP_GRENZE_FUNKTIONSBEZOGEN_WEITERE_BERECHNUNG_ALS_LGK");
                    return;
                case Kalkulationsmethode.VorzonenGp:
                    serializer.Serialize(writer, "VORZONEN_GP");
                    return;
                case Kalkulationsmethode.Zonen:
                    serializer.Serialize(writer, "ZONEN");
                    return;
            }
            throw new Exception("Cannot marshal type Kalkulationsmethode");
        }

        public static readonly KalkulationsmethodeConverter Singleton = new KalkulationsmethodeConverter();
    }

    internal class MengeneinheitConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Mengeneinheit) || t == typeof(Mengeneinheit?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "HALBJAHR":
                    return Mengeneinheit.Halbjahr;
                case "JAHR":
                    return Mengeneinheit.Jahr;
                case "KUBIKMETER":
                    return Mengeneinheit.Kubikmeter;
                case "KVAR":
                    return Mengeneinheit.Kvar;
                case "KVARH":
                    return Mengeneinheit.Kvarh;
                case "KW":
                    return Mengeneinheit.Kw;
                case "KWH":
                    return Mengeneinheit.Kwh;
                case "KWHK":
                    return Mengeneinheit.Kwhk;
                case "MINUTE":
                    return Mengeneinheit.Minute;
                case "MONAT":
                    return Mengeneinheit.Monat;
                case "MW":
                    return Mengeneinheit.Mw;
                case "MWH":
                    return Mengeneinheit.Mwh;
                case "PROZENT":
                    return Mengeneinheit.Prozent;
                case "QUARTAL":
                    return Mengeneinheit.Quartal;
                case "SEKUNDE":
                    return Mengeneinheit.Sekunde;
                case "STUECK":
                    return Mengeneinheit.Stueck;
                case "STUNDE":
                    return Mengeneinheit.Stunde;
                case "TAG":
                    return Mengeneinheit.Tag;
                case "VAR":
                    return Mengeneinheit.Var;
                case "VARH":
                    return Mengeneinheit.Varh;
                case "VIERTEL_STUNDE":
                    return Mengeneinheit.ViertelStunde;
                case "W":
                    return Mengeneinheit.W;
                case "WH":
                    return Mengeneinheit.Wh;
                case "WOCHE":
                    return Mengeneinheit.Woche;
            }
            throw new Exception("Cannot unmarshal type Mengeneinheit");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Mengeneinheit)untypedValue;
            switch (value)
            {
                case Mengeneinheit.Halbjahr:
                    serializer.Serialize(writer, "HALBJAHR");
                    return;
                case Mengeneinheit.Jahr:
                    serializer.Serialize(writer, "JAHR");
                    return;
                case Mengeneinheit.Kubikmeter:
                    serializer.Serialize(writer, "KUBIKMETER");
                    return;
                case Mengeneinheit.Kvar:
                    serializer.Serialize(writer, "KVAR");
                    return;
                case Mengeneinheit.Kvarh:
                    serializer.Serialize(writer, "KVARH");
                    return;
                case Mengeneinheit.Kw:
                    serializer.Serialize(writer, "KW");
                    return;
                case Mengeneinheit.Kwh:
                    serializer.Serialize(writer, "KWH");
                    return;
                case Mengeneinheit.Kwhk:
                    serializer.Serialize(writer, "KWHK");
                    return;
                case Mengeneinheit.Minute:
                    serializer.Serialize(writer, "MINUTE");
                    return;
                case Mengeneinheit.Monat:
                    serializer.Serialize(writer, "MONAT");
                    return;
                case Mengeneinheit.Mw:
                    serializer.Serialize(writer, "MW");
                    return;
                case Mengeneinheit.Mwh:
                    serializer.Serialize(writer, "MWH");
                    return;
                case Mengeneinheit.Prozent:
                    serializer.Serialize(writer, "PROZENT");
                    return;
                case Mengeneinheit.Quartal:
                    serializer.Serialize(writer, "QUARTAL");
                    return;
                case Mengeneinheit.Sekunde:
                    serializer.Serialize(writer, "SEKUNDE");
                    return;
                case Mengeneinheit.Stueck:
                    serializer.Serialize(writer, "STUECK");
                    return;
                case Mengeneinheit.Stunde:
                    serializer.Serialize(writer, "STUNDE");
                    return;
                case Mengeneinheit.Tag:
                    serializer.Serialize(writer, "TAG");
                    return;
                case Mengeneinheit.Var:
                    serializer.Serialize(writer, "VAR");
                    return;
                case Mengeneinheit.Varh:
                    serializer.Serialize(writer, "VARH");
                    return;
                case Mengeneinheit.ViertelStunde:
                    serializer.Serialize(writer, "VIERTEL_STUNDE");
                    return;
                case Mengeneinheit.W:
                    serializer.Serialize(writer, "W");
                    return;
                case Mengeneinheit.Wh:
                    serializer.Serialize(writer, "WH");
                    return;
                case Mengeneinheit.Woche:
                    serializer.Serialize(writer, "WOCHE");
                    return;
            }
            throw new Exception("Cannot marshal type Mengeneinheit");
        }

        public static readonly MengeneinheitConverter Singleton = new MengeneinheitConverter();
    }

    internal class LeistungstypConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Leistungstyp) || t == typeof(Leistungstyp?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ABLAV_UMLAGE":
                    return Leistungstyp.AblavUmlage;
                case "ABLESUNG_ZUSAETZLICH":
                    return Leistungstyp.AblesungZusaetzlich;
                case "ABRECHNUNG":
                    return Leistungstyp.Abrechnung;
                case "ABRECHNUNG_ZUSAETZLICH":
                    return Leistungstyp.AbrechnungZusaetzlich;
                case "ARBEITSPREIS_BLINDARBEIT_IND":
                    return Leistungstyp.ArbeitspreisBlindarbeitInd;
                case "ARBEITSPREIS_BLINDARBEIT_KAP":
                    return Leistungstyp.ArbeitspreisBlindarbeitKap;
                case "ARBEITSPREIS_WIRKARBEIT":
                    return Leistungstyp.ArbeitspreisWirkarbeit;
                case "AUSLESUNG_ZUSAETZLICH":
                    return Leistungstyp.AuslesungZusaetzlich;
                case "BILANZIERUNG_UMLAGE":
                    return Leistungstyp.BilanzierungUmlage;
                case "DIENSTLEISTUNG":
                    return Leistungstyp.Dienstleistung;
                case "EEG_UMLAGE":
                    return Leistungstyp.EegUmlage;
                case "ENERGIESTEUER":
                    return Leistungstyp.Energiesteuer;
                case "ENTSPERRUNG":
                    return Leistungstyp.Entsperrung;
                case "GRUNDPREIS":
                    return Leistungstyp.Grundpreis;
                case "GRUNDPREIS_ARBEIT":
                    return Leistungstyp.GrundpreisArbeit;
                case "GRUNDPREIS_LEISTUNG":
                    return Leistungstyp.GrundpreisLeistung;
                case "INKASSOKOSTEN":
                    return Leistungstyp.Inkassokosten;
                case "KONZESSIONS_ABGABE":
                    return Leistungstyp.KonzessionsAbgabe;
                case "KWK_UMLAGE":
                    return Leistungstyp.KwkUmlage;
                case "LEISTUNGSPREIS_WIRKLEISTUNG":
                    return Leistungstyp.LeistungspreisWirkleistung;
                case "MAHNKOSTEN":
                    return Leistungstyp.Mahnkosten;
                case "MEHRMINDERMENGE":
                    return Leistungstyp.Mehrmindermenge;
                case "MESSDIENSTLEISTUNG":
                    return Leistungstyp.Messdienstleistung;
                case "MESSDIENSTLEISTUNG_INKL_MESSUNG":
                    return Leistungstyp.MessdienstleistungInklMessung;
                case "MESSPREIS":
                    return Leistungstyp.Messpreis;
                case "MESSSTELLENBETRIEB":
                    return Leistungstyp.Messstellenbetrieb;
                case "NETZPREIS":
                    return Leistungstyp.Netzpreis;
                case "OFFSHORE_UMLAGE":
                    return Leistungstyp.OffshoreUmlage;
                case "REGELENERGIE_UMLAGE":
                    return Leistungstyp.RegelenergieUmlage;
                case "SONDERKUNDEN_UMLAGE":
                    return Leistungstyp.SonderkundenUmlage;
                case "SONSTIGER_PREIS":
                    return Leistungstyp.SonstigerPreis;
                case "SPERRUNG":
                    return Leistungstyp.Sperrung;
            }
            throw new Exception("Cannot unmarshal type Leistungstyp");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Leistungstyp)untypedValue;
            switch (value)
            {
                case Leistungstyp.AblavUmlage:
                    serializer.Serialize(writer, "ABLAV_UMLAGE");
                    return;
                case Leistungstyp.AblesungZusaetzlich:
                    serializer.Serialize(writer, "ABLESUNG_ZUSAETZLICH");
                    return;
                case Leistungstyp.Abrechnung:
                    serializer.Serialize(writer, "ABRECHNUNG");
                    return;
                case Leistungstyp.AbrechnungZusaetzlich:
                    serializer.Serialize(writer, "ABRECHNUNG_ZUSAETZLICH");
                    return;
                case Leistungstyp.ArbeitspreisBlindarbeitInd:
                    serializer.Serialize(writer, "ARBEITSPREIS_BLINDARBEIT_IND");
                    return;
                case Leistungstyp.ArbeitspreisBlindarbeitKap:
                    serializer.Serialize(writer, "ARBEITSPREIS_BLINDARBEIT_KAP");
                    return;
                case Leistungstyp.ArbeitspreisWirkarbeit:
                    serializer.Serialize(writer, "ARBEITSPREIS_WIRKARBEIT");
                    return;
                case Leistungstyp.AuslesungZusaetzlich:
                    serializer.Serialize(writer, "AUSLESUNG_ZUSAETZLICH");
                    return;
                case Leistungstyp.BilanzierungUmlage:
                    serializer.Serialize(writer, "BILANZIERUNG_UMLAGE");
                    return;
                case Leistungstyp.Dienstleistung:
                    serializer.Serialize(writer, "DIENSTLEISTUNG");
                    return;
                case Leistungstyp.EegUmlage:
                    serializer.Serialize(writer, "EEG_UMLAGE");
                    return;
                case Leistungstyp.Energiesteuer:
                    serializer.Serialize(writer, "ENERGIESTEUER");
                    return;
                case Leistungstyp.Entsperrung:
                    serializer.Serialize(writer, "ENTSPERRUNG");
                    return;
                case Leistungstyp.Grundpreis:
                    serializer.Serialize(writer, "GRUNDPREIS");
                    return;
                case Leistungstyp.GrundpreisArbeit:
                    serializer.Serialize(writer, "GRUNDPREIS_ARBEIT");
                    return;
                case Leistungstyp.GrundpreisLeistung:
                    serializer.Serialize(writer, "GRUNDPREIS_LEISTUNG");
                    return;
                case Leistungstyp.Inkassokosten:
                    serializer.Serialize(writer, "INKASSOKOSTEN");
                    return;
                case Leistungstyp.KonzessionsAbgabe:
                    serializer.Serialize(writer, "KONZESSIONS_ABGABE");
                    return;
                case Leistungstyp.KwkUmlage:
                    serializer.Serialize(writer, "KWK_UMLAGE");
                    return;
                case Leistungstyp.LeistungspreisWirkleistung:
                    serializer.Serialize(writer, "LEISTUNGSPREIS_WIRKLEISTUNG");
                    return;
                case Leistungstyp.Mahnkosten:
                    serializer.Serialize(writer, "MAHNKOSTEN");
                    return;
                case Leistungstyp.Mehrmindermenge:
                    serializer.Serialize(writer, "MEHRMINDERMENGE");
                    return;
                case Leistungstyp.Messdienstleistung:
                    serializer.Serialize(writer, "MESSDIENSTLEISTUNG");
                    return;
                case Leistungstyp.MessdienstleistungInklMessung:
                    serializer.Serialize(writer, "MESSDIENSTLEISTUNG_INKL_MESSUNG");
                    return;
                case Leistungstyp.Messpreis:
                    serializer.Serialize(writer, "MESSPREIS");
                    return;
                case Leistungstyp.Messstellenbetrieb:
                    serializer.Serialize(writer, "MESSSTELLENBETRIEB");
                    return;
                case Leistungstyp.Netzpreis:
                    serializer.Serialize(writer, "NETZPREIS");
                    return;
                case Leistungstyp.OffshoreUmlage:
                    serializer.Serialize(writer, "OFFSHORE_UMLAGE");
                    return;
                case Leistungstyp.RegelenergieUmlage:
                    serializer.Serialize(writer, "REGELENERGIE_UMLAGE");
                    return;
                case Leistungstyp.SonderkundenUmlage:
                    serializer.Serialize(writer, "SONDERKUNDEN_UMLAGE");
                    return;
                case Leistungstyp.SonstigerPreis:
                    serializer.Serialize(writer, "SONSTIGER_PREIS");
                    return;
                case Leistungstyp.Sperrung:
                    serializer.Serialize(writer, "SPERRUNG");
                    return;
            }
            throw new Exception("Cannot marshal type Leistungstyp");
        }

        public static readonly LeistungstypConverter Singleton = new LeistungstypConverter();
    }

    internal class WaehrungseinheitConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Waehrungseinheit) || t == typeof(Waehrungseinheit?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "CT":
                    return Waehrungseinheit.Ct;
                case "EUR":
                    return Waehrungseinheit.Eur;
            }
            throw new Exception("Cannot unmarshal type Waehrungseinheit");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Waehrungseinheit)untypedValue;
            switch (value)
            {
                case Waehrungseinheit.Ct:
                    serializer.Serialize(writer, "CT");
                    return;
                case Waehrungseinheit.Eur:
                    serializer.Serialize(writer, "EUR");
                    return;
            }
            throw new Exception("Cannot marshal type Waehrungseinheit");
        }

        public static readonly WaehrungseinheitConverter Singleton = new WaehrungseinheitConverter();
    }

    internal class TarifzeitConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Tarifzeit) || t == typeof(Tarifzeit?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "TZ_HT":
                    return Tarifzeit.TzHt;
                case "TZ_NT":
                    return Tarifzeit.TzNt;
                case "TZ_STANDARD":
                    return Tarifzeit.TzStandard;
            }
            throw new Exception("Cannot unmarshal type Tarifzeit");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Tarifzeit)untypedValue;
            switch (value)
            {
                case Tarifzeit.TzHt:
                    serializer.Serialize(writer, "TZ_HT");
                    return;
                case Tarifzeit.TzNt:
                    serializer.Serialize(writer, "TZ_NT");
                    return;
                case Tarifzeit.TzStandard:
                    serializer.Serialize(writer, "TZ_STANDARD");
                    return;
            }
            throw new Exception("Cannot marshal type Tarifzeit");
        }

        public static readonly TarifzeitConverter Singleton = new TarifzeitConverter();
    }

    internal class BemessungsgroesseConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Bemessungsgroesse) || t == typeof(Bemessungsgroesse?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ANZAHL":
                    return Bemessungsgroesse.Anzahl;
                case "BENUTZUNGSDAUER":
                    return Bemessungsgroesse.Benutzungsdauer;
                case "BLINDARBEIT_IND":
                    return Bemessungsgroesse.BlindarbeitInd;
                case "BLINDARBEIT_KAP":
                    return Bemessungsgroesse.BlindarbeitKap;
                case "BLINDLEISTUNG_IND":
                    return Bemessungsgroesse.BlindleistungInd;
                case "BLINDLEISTUNG_KAP":
                    return Bemessungsgroesse.BlindleistungKap;
                case "LEISTUNG_EL":
                    return Bemessungsgroesse.LeistungEl;
                case "LEISTUNG_TH":
                    return Bemessungsgroesse.LeistungTh;
                case "VOLUMEN":
                    return Bemessungsgroesse.Volumen;
                case "VOLUMENSTROM":
                    return Bemessungsgroesse.Volumenstrom;
                case "WIRKARBEIT_EL":
                    return Bemessungsgroesse.WirkarbeitEl;
                case "WIRKARBEIT_TH":
                    return Bemessungsgroesse.WirkarbeitTh;
            }
            throw new Exception("Cannot unmarshal type Bemessungsgroesse");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Bemessungsgroesse)untypedValue;
            switch (value)
            {
                case Bemessungsgroesse.Anzahl:
                    serializer.Serialize(writer, "ANZAHL");
                    return;
                case Bemessungsgroesse.Benutzungsdauer:
                    serializer.Serialize(writer, "BENUTZUNGSDAUER");
                    return;
                case Bemessungsgroesse.BlindarbeitInd:
                    serializer.Serialize(writer, "BLINDARBEIT_IND");
                    return;
                case Bemessungsgroesse.BlindarbeitKap:
                    serializer.Serialize(writer, "BLINDARBEIT_KAP");
                    return;
                case Bemessungsgroesse.BlindleistungInd:
                    serializer.Serialize(writer, "BLINDLEISTUNG_IND");
                    return;
                case Bemessungsgroesse.BlindleistungKap:
                    serializer.Serialize(writer, "BLINDLEISTUNG_KAP");
                    return;
                case Bemessungsgroesse.LeistungEl:
                    serializer.Serialize(writer, "LEISTUNG_EL");
                    return;
                case Bemessungsgroesse.LeistungTh:
                    serializer.Serialize(writer, "LEISTUNG_TH");
                    return;
                case Bemessungsgroesse.Volumen:
                    serializer.Serialize(writer, "VOLUMEN");
                    return;
                case Bemessungsgroesse.Volumenstrom:
                    serializer.Serialize(writer, "VOLUMENSTROM");
                    return;
                case Bemessungsgroesse.WirkarbeitEl:
                    serializer.Serialize(writer, "WIRKARBEIT_EL");
                    return;
                case Bemessungsgroesse.WirkarbeitTh:
                    serializer.Serialize(writer, "WIRKARBEIT_TH");
                    return;
            }
            throw new Exception("Cannot marshal type Bemessungsgroesse");
        }

        public static readonly BemessungsgroesseConverter Singleton = new BemessungsgroesseConverter();
    }
}
