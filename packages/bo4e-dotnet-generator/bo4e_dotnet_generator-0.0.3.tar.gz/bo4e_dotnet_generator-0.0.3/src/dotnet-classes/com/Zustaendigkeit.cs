// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var zustaendigkeit = Zustaendigkeit.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Enthält die zeitliche Zuordnung eines Ansprechpartners zu Abteilungen und
    /// Zuständigkeiten.
    ///
    /// .. raw:: html
    ///
    /// <object data="../_static/images/bo4e/com/Zustaendigkeit.svg"
    /// type="image/svg+xml"></object>
    ///
    /// .. HINT::
    /// `Zustaendigkeit JSON Schema
    /// <https://json-schema.app/view/%23?url=https://raw.githubusercontent.com/BO4E/BO4E-Schemas/v202401.2.1/src/bo4e_schemas/com/Zustaendigkeit.json>`_
    /// </summary>
    public partial class Zustaendigkeit
    {
        /// <summary>
        /// zusatz_attribute: Optional[list["ZusatzAttribut"]] = None
        ///
        /// # pylint: disable=duplicate-code
        /// model_config = ConfigDict(
        /// alias_generator=camelize,
        /// populate_by_name=True,
        /// extra="allow",
        /// # json_encoders is deprecated, but there is no easy-to-use alternative. The best way
        /// would be to create
        /// # an annotated version of Decimal, but you would have to use it everywhere in the
        /// pydantic models.
        /// # See this issue for more info: https://github.com/pydantic/pydantic/issues/6375
        /// json_encoders={Decimal: str},
        /// )
        /// </summary>
        [JsonProperty("_id")]
        public string Id { get; set; }

        /// <summary>
        /// Version der BO-Struktur aka "fachliche Versionierung"
        /// </summary>
        [JsonProperty("_version")]
        public string Version { get; set; }

        /// <summary>
        /// Berufliche Rolle des Ansprechpartners/ der Person
        /// </summary>
        [JsonProperty("abteilung")]
        public string Abteilung { get; set; }

        /// <summary>
        /// Berufliche Rolle des Ansprechpartners/ der Person
        /// </summary>
        [JsonProperty("position")]
        public string Position { get; set; }

        /// <summary>
        /// Hier kann eine thematische Zuordnung des Ansprechpartners bzw. der Person angegeben werden
        /// </summary>
        [JsonProperty("themengebiet")]
        public Themengebiet? Themengebiet { get; set; }

        [JsonProperty("zusatzAttribute")]
        public ZusatzAttribut[] ZusatzAttribute { get; set; }
    }

    /// <summary>
    /// Viele Datenobjekte weisen in unterschiedlichen Systemen eine eindeutige ID (Kundennummer,
    /// GP-Nummer etc.) auf.
    /// Beim Austausch von Datenobjekten zwischen verschiedenen Systemen ist es daher hilfreich,
    /// sich die eindeutigen IDs der anzubindenden Systeme zu merken.
    ///
    /// .. raw:: html
    ///
    /// <object data="../_static/images/bo4e/com/ZusatzAttribut.svg"
    /// type="image/svg+xml"></object>
    ///
    /// .. HINT::
    /// `ZusatzAttribut JSON Schema
    /// <https://json-schema.app/view/%23?url=https://raw.githubusercontent.com/BO4E/BO4E-Schemas/v202401.2.1/src/bo4e_schemas/ZusatzAttribut.json>`_
    /// </summary>
    public partial class ZusatzAttribut
    {
        /// <summary>
        /// Bezeichnung der externen Referenz (z.B. "microservice xyz" oder "SAP CRM GP-Nummer")
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>
        /// Bezeichnung der externen Referenz (z.B. "microservice xyz" oder "SAP CRM GP-Nummer")
        /// </summary>
        [JsonProperty("wert")]
        public object Wert { get; set; }
    }

    /// <summary>
    /// Über dieses ENUM kann eine thematische Zuordnung, beispielsweise eines Ansprechpartners,
    /// vorgenommen werden.
    /// </summary>
    public enum Themengebiet { AllgemeinerInformationsaustausch, Alocat, AnUndAbmeldung, AnsprechpartnerAllgemein, AnsprechpartnerBdewDvgw, AnsprechpartnerItTechnik, Aperak, Bewegungsdaten, Bilanzierung, Bilanzkreiskoordinator, Bilanzkreisverantwortlicher, Contrl, DatenformateZertifikateVerschluesselungen, Debitorenmanagement, DemandSideManagement, EdiVereinbarung, Edifact, Einspeisung, Energiedatenmanagement, Fahrplanmanagement, Gabi, Geli, Geraeterueckgabe, Geraetewechsel, Gpke, Inbetriebnahme, Invoic, Kapazitaetsmanagement, Klaerfaelle, LastgaengeRlm, Lieferantenrahmenvertrag, Lieferantenwechsel, Mabis, Mahnwesen, Marktgebietsverantwortlicher, Marktkommunikation, MehrMindermengen, MsbMdl, Mscons, Netzabrechnung, Netzentgelte, Netzmanagement, Orders, Ordersp, Recht, Regulierungsmanagement, Reklamationen, Remadv, SperrenEntsperrenInkasso, Stammdaten, Stoerungsfaelle, TechnischeFragen, UmstellungInvoic, Utilmd, VerschluesselungSignatur, Vertragsmanagement, Vertrieb, Wim, ZaehlerstaendeSlp, Zahlungsverkehr, Zuordnungsvereinbarung };

    public partial class Zustaendigkeit
    {
        public static Zustaendigkeit FromJson(string json) => JsonConvert.DeserializeObject<Zustaendigkeit>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Zustaendigkeit self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ThemengebietConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ThemengebietConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Themengebiet) || t == typeof(Themengebiet?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ALLGEMEINER_INFORMATIONSAUSTAUSCH":
                    return Themengebiet.AllgemeinerInformationsaustausch;
                case "ALOCAT":
                    return Themengebiet.Alocat;
                case "ANSPRECHPARTNER_ALLGEMEIN":
                    return Themengebiet.AnsprechpartnerAllgemein;
                case "ANSPRECHPARTNER_BDEW_DVGW":
                    return Themengebiet.AnsprechpartnerBdewDvgw;
                case "ANSPRECHPARTNER_IT_TECHNIK":
                    return Themengebiet.AnsprechpartnerItTechnik;
                case "AN_UND_ABMELDUNG":
                    return Themengebiet.AnUndAbmeldung;
                case "APERAK":
                    return Themengebiet.Aperak;
                case "BEWEGUNGSDATEN":
                    return Themengebiet.Bewegungsdaten;
                case "BILANZIERUNG":
                    return Themengebiet.Bilanzierung;
                case "BILANZKREISKOORDINATOR":
                    return Themengebiet.Bilanzkreiskoordinator;
                case "BILANZKREISVERANTWORTLICHER":
                    return Themengebiet.Bilanzkreisverantwortlicher;
                case "CONTRL":
                    return Themengebiet.Contrl;
                case "DATENFORMATE_ZERTIFIKATE_VERSCHLUESSELUNGEN":
                    return Themengebiet.DatenformateZertifikateVerschluesselungen;
                case "DEBITORENMANAGEMENT":
                    return Themengebiet.Debitorenmanagement;
                case "DEMAND_SIDE_MANAGEMENT":
                    return Themengebiet.DemandSideManagement;
                case "EDIFACT":
                    return Themengebiet.Edifact;
                case "EDI_VEREINBARUNG":
                    return Themengebiet.EdiVereinbarung;
                case "EINSPEISUNG":
                    return Themengebiet.Einspeisung;
                case "ENERGIEDATENMANAGEMENT":
                    return Themengebiet.Energiedatenmanagement;
                case "FAHRPLANMANAGEMENT":
                    return Themengebiet.Fahrplanmanagement;
                case "GABI":
                    return Themengebiet.Gabi;
                case "GELI":
                    return Themengebiet.Geli;
                case "GERAETERUECKGABE":
                    return Themengebiet.Geraeterueckgabe;
                case "GERAETEWECHSEL":
                    return Themengebiet.Geraetewechsel;
                case "GPKE":
                    return Themengebiet.Gpke;
                case "INBETRIEBNAHME":
                    return Themengebiet.Inbetriebnahme;
                case "INVOIC":
                    return Themengebiet.Invoic;
                case "KAPAZITAETSMANAGEMENT":
                    return Themengebiet.Kapazitaetsmanagement;
                case "KLAERFAELLE":
                    return Themengebiet.Klaerfaelle;
                case "LASTGAENGE_RLM":
                    return Themengebiet.LastgaengeRlm;
                case "LIEFERANTENRAHMENVERTRAG":
                    return Themengebiet.Lieferantenrahmenvertrag;
                case "LIEFERANTENWECHSEL":
                    return Themengebiet.Lieferantenwechsel;
                case "MABIS":
                    return Themengebiet.Mabis;
                case "MAHNWESEN":
                    return Themengebiet.Mahnwesen;
                case "MARKTGEBIETSVERANTWORTLICHER":
                    return Themengebiet.Marktgebietsverantwortlicher;
                case "MARKTKOMMUNIKATION":
                    return Themengebiet.Marktkommunikation;
                case "MEHR_MINDERMENGEN":
                    return Themengebiet.MehrMindermengen;
                case "MSB_MDL":
                    return Themengebiet.MsbMdl;
                case "MSCONS":
                    return Themengebiet.Mscons;
                case "NETZABRECHNUNG":
                    return Themengebiet.Netzabrechnung;
                case "NETZENTGELTE":
                    return Themengebiet.Netzentgelte;
                case "NETZMANAGEMENT":
                    return Themengebiet.Netzmanagement;
                case "ORDERS":
                    return Themengebiet.Orders;
                case "ORDERSP":
                    return Themengebiet.Ordersp;
                case "RECHT":
                    return Themengebiet.Recht;
                case "REGULIERUNGSMANAGEMENT":
                    return Themengebiet.Regulierungsmanagement;
                case "REKLAMATIONEN":
                    return Themengebiet.Reklamationen;
                case "REMADV":
                    return Themengebiet.Remadv;
                case "SPERREN_ENTSPERREN_INKASSO":
                    return Themengebiet.SperrenEntsperrenInkasso;
                case "STAMMDATEN":
                    return Themengebiet.Stammdaten;
                case "STOERUNGSFAELLE":
                    return Themengebiet.Stoerungsfaelle;
                case "TECHNISCHE_FRAGEN":
                    return Themengebiet.TechnischeFragen;
                case "UMSTELLUNG_INVOIC":
                    return Themengebiet.UmstellungInvoic;
                case "UTILMD":
                    return Themengebiet.Utilmd;
                case "VERSCHLUESSELUNG_SIGNATUR":
                    return Themengebiet.VerschluesselungSignatur;
                case "VERTRAGSMANAGEMENT":
                    return Themengebiet.Vertragsmanagement;
                case "VERTRIEB":
                    return Themengebiet.Vertrieb;
                case "WIM":
                    return Themengebiet.Wim;
                case "ZAEHLERSTAENDE_SLP":
                    return Themengebiet.ZaehlerstaendeSlp;
                case "ZAHLUNGSVERKEHR":
                    return Themengebiet.Zahlungsverkehr;
                case "ZUORDNUNGSVEREINBARUNG":
                    return Themengebiet.Zuordnungsvereinbarung;
            }
            throw new Exception("Cannot unmarshal type Themengebiet");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Themengebiet)untypedValue;
            switch (value)
            {
                case Themengebiet.AllgemeinerInformationsaustausch:
                    serializer.Serialize(writer, "ALLGEMEINER_INFORMATIONSAUSTAUSCH");
                    return;
                case Themengebiet.Alocat:
                    serializer.Serialize(writer, "ALOCAT");
                    return;
                case Themengebiet.AnsprechpartnerAllgemein:
                    serializer.Serialize(writer, "ANSPRECHPARTNER_ALLGEMEIN");
                    return;
                case Themengebiet.AnsprechpartnerBdewDvgw:
                    serializer.Serialize(writer, "ANSPRECHPARTNER_BDEW_DVGW");
                    return;
                case Themengebiet.AnsprechpartnerItTechnik:
                    serializer.Serialize(writer, "ANSPRECHPARTNER_IT_TECHNIK");
                    return;
                case Themengebiet.AnUndAbmeldung:
                    serializer.Serialize(writer, "AN_UND_ABMELDUNG");
                    return;
                case Themengebiet.Aperak:
                    serializer.Serialize(writer, "APERAK");
                    return;
                case Themengebiet.Bewegungsdaten:
                    serializer.Serialize(writer, "BEWEGUNGSDATEN");
                    return;
                case Themengebiet.Bilanzierung:
                    serializer.Serialize(writer, "BILANZIERUNG");
                    return;
                case Themengebiet.Bilanzkreiskoordinator:
                    serializer.Serialize(writer, "BILANZKREISKOORDINATOR");
                    return;
                case Themengebiet.Bilanzkreisverantwortlicher:
                    serializer.Serialize(writer, "BILANZKREISVERANTWORTLICHER");
                    return;
                case Themengebiet.Contrl:
                    serializer.Serialize(writer, "CONTRL");
                    return;
                case Themengebiet.DatenformateZertifikateVerschluesselungen:
                    serializer.Serialize(writer, "DATENFORMATE_ZERTIFIKATE_VERSCHLUESSELUNGEN");
                    return;
                case Themengebiet.Debitorenmanagement:
                    serializer.Serialize(writer, "DEBITORENMANAGEMENT");
                    return;
                case Themengebiet.DemandSideManagement:
                    serializer.Serialize(writer, "DEMAND_SIDE_MANAGEMENT");
                    return;
                case Themengebiet.Edifact:
                    serializer.Serialize(writer, "EDIFACT");
                    return;
                case Themengebiet.EdiVereinbarung:
                    serializer.Serialize(writer, "EDI_VEREINBARUNG");
                    return;
                case Themengebiet.Einspeisung:
                    serializer.Serialize(writer, "EINSPEISUNG");
                    return;
                case Themengebiet.Energiedatenmanagement:
                    serializer.Serialize(writer, "ENERGIEDATENMANAGEMENT");
                    return;
                case Themengebiet.Fahrplanmanagement:
                    serializer.Serialize(writer, "FAHRPLANMANAGEMENT");
                    return;
                case Themengebiet.Gabi:
                    serializer.Serialize(writer, "GABI");
                    return;
                case Themengebiet.Geli:
                    serializer.Serialize(writer, "GELI");
                    return;
                case Themengebiet.Geraeterueckgabe:
                    serializer.Serialize(writer, "GERAETERUECKGABE");
                    return;
                case Themengebiet.Geraetewechsel:
                    serializer.Serialize(writer, "GERAETEWECHSEL");
                    return;
                case Themengebiet.Gpke:
                    serializer.Serialize(writer, "GPKE");
                    return;
                case Themengebiet.Inbetriebnahme:
                    serializer.Serialize(writer, "INBETRIEBNAHME");
                    return;
                case Themengebiet.Invoic:
                    serializer.Serialize(writer, "INVOIC");
                    return;
                case Themengebiet.Kapazitaetsmanagement:
                    serializer.Serialize(writer, "KAPAZITAETSMANAGEMENT");
                    return;
                case Themengebiet.Klaerfaelle:
                    serializer.Serialize(writer, "KLAERFAELLE");
                    return;
                case Themengebiet.LastgaengeRlm:
                    serializer.Serialize(writer, "LASTGAENGE_RLM");
                    return;
                case Themengebiet.Lieferantenrahmenvertrag:
                    serializer.Serialize(writer, "LIEFERANTENRAHMENVERTRAG");
                    return;
                case Themengebiet.Lieferantenwechsel:
                    serializer.Serialize(writer, "LIEFERANTENWECHSEL");
                    return;
                case Themengebiet.Mabis:
                    serializer.Serialize(writer, "MABIS");
                    return;
                case Themengebiet.Mahnwesen:
                    serializer.Serialize(writer, "MAHNWESEN");
                    return;
                case Themengebiet.Marktgebietsverantwortlicher:
                    serializer.Serialize(writer, "MARKTGEBIETSVERANTWORTLICHER");
                    return;
                case Themengebiet.Marktkommunikation:
                    serializer.Serialize(writer, "MARKTKOMMUNIKATION");
                    return;
                case Themengebiet.MehrMindermengen:
                    serializer.Serialize(writer, "MEHR_MINDERMENGEN");
                    return;
                case Themengebiet.MsbMdl:
                    serializer.Serialize(writer, "MSB_MDL");
                    return;
                case Themengebiet.Mscons:
                    serializer.Serialize(writer, "MSCONS");
                    return;
                case Themengebiet.Netzabrechnung:
                    serializer.Serialize(writer, "NETZABRECHNUNG");
                    return;
                case Themengebiet.Netzentgelte:
                    serializer.Serialize(writer, "NETZENTGELTE");
                    return;
                case Themengebiet.Netzmanagement:
                    serializer.Serialize(writer, "NETZMANAGEMENT");
                    return;
                case Themengebiet.Orders:
                    serializer.Serialize(writer, "ORDERS");
                    return;
                case Themengebiet.Ordersp:
                    serializer.Serialize(writer, "ORDERSP");
                    return;
                case Themengebiet.Recht:
                    serializer.Serialize(writer, "RECHT");
                    return;
                case Themengebiet.Regulierungsmanagement:
                    serializer.Serialize(writer, "REGULIERUNGSMANAGEMENT");
                    return;
                case Themengebiet.Reklamationen:
                    serializer.Serialize(writer, "REKLAMATIONEN");
                    return;
                case Themengebiet.Remadv:
                    serializer.Serialize(writer, "REMADV");
                    return;
                case Themengebiet.SperrenEntsperrenInkasso:
                    serializer.Serialize(writer, "SPERREN_ENTSPERREN_INKASSO");
                    return;
                case Themengebiet.Stammdaten:
                    serializer.Serialize(writer, "STAMMDATEN");
                    return;
                case Themengebiet.Stoerungsfaelle:
                    serializer.Serialize(writer, "STOERUNGSFAELLE");
                    return;
                case Themengebiet.TechnischeFragen:
                    serializer.Serialize(writer, "TECHNISCHE_FRAGEN");
                    return;
                case Themengebiet.UmstellungInvoic:
                    serializer.Serialize(writer, "UMSTELLUNG_INVOIC");
                    return;
                case Themengebiet.Utilmd:
                    serializer.Serialize(writer, "UTILMD");
                    return;
                case Themengebiet.VerschluesselungSignatur:
                    serializer.Serialize(writer, "VERSCHLUESSELUNG_SIGNATUR");
                    return;
                case Themengebiet.Vertragsmanagement:
                    serializer.Serialize(writer, "VERTRAGSMANAGEMENT");
                    return;
                case Themengebiet.Vertrieb:
                    serializer.Serialize(writer, "VERTRIEB");
                    return;
                case Themengebiet.Wim:
                    serializer.Serialize(writer, "WIM");
                    return;
                case Themengebiet.ZaehlerstaendeSlp:
                    serializer.Serialize(writer, "ZAEHLERSTAENDE_SLP");
                    return;
                case Themengebiet.Zahlungsverkehr:
                    serializer.Serialize(writer, "ZAHLUNGSVERKEHR");
                    return;
                case Themengebiet.Zuordnungsvereinbarung:
                    serializer.Serialize(writer, "ZUORDNUNGSVEREINBARUNG");
                    return;
            }
            throw new Exception("Cannot marshal type Themengebiet");
        }

        public static readonly ThemengebietConverter Singleton = new ThemengebietConverter();
    }
}
