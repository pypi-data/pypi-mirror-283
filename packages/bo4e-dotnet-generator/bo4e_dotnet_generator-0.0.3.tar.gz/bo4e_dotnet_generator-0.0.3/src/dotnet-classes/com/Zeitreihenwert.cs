// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var zeitreihenwert = Zeitreihenwert.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Abbildung eines Zeitreihenwertes bestehend aus Zeitraum, Wert und Statusinformationen.
    ///
    /// .. raw:: html
    ///
    /// <object data="../_static/images/bo4e/com/Zeitreihenwert.svg"
    /// type="image/svg+xml"></object>
    ///
    /// .. HINT::
    /// `Zeitreihenwert JSON Schema
    /// <https://json-schema.app/view/%23?url=https://raw.githubusercontent.com/BO4E/BO4E-Schemas/v202401.2.1/src/bo4e_schemas/com/Zeitreihenwert.json>`_
    /// </summary>
    public partial class Zeitreihenwert
    {
        /// <summary>
        /// zusatz_attribute: Optional[list["ZusatzAttribut"]] = None
        ///
        /// # pylint: disable=duplicate-code
        /// model_config = ConfigDict(
        /// alias_generator=camelize,
        /// populate_by_name=True,
        /// extra="allow",
        /// # json_encoders is deprecated, but there is no easy-to-use alternative. The best way
        /// would be to create
        /// # an annotated version of Decimal, but you would have to use it everywhere in the
        /// pydantic models.
        /// # See this issue for more info: https://github.com/pydantic/pydantic/issues/6375
        /// json_encoders={Decimal: str},
        /// )
        /// </summary>
        [JsonProperty("_id")]
        public string Id { get; set; }

        /// <summary>
        /// Version der BO-Struktur aka "fachliche Versionierung"
        /// </summary>
        [JsonProperty("_version")]
        public string Version { get; set; }

        /// <summary>
        /// Der Status gibt an, wie der Wert zu interpretieren ist, z.B. in Berechnungen.
        /// </summary>
        [JsonProperty("status")]
        public Messwertstatus? Status { get; set; }

        /// <summary>
        /// Eine Zusatzinformation zum Status, beispielsweise ein Grund für einen fehlenden Wert.
        /// </summary>
        [JsonProperty("statuszusatz")]
        public Messwertstatuszusatz? Statuszusatz { get; set; }

        /// <summary>
        /// Zeitespanne für das Messintervall
        /// </summary>
        [JsonProperty("wert")]
        public double? Wert { get; set; }

        /// <summary>
        /// Zeitespanne für das Messintervall
        /// </summary>
        [JsonProperty("zeitspanne")]
        public Zeitspanne Zeitspanne { get; set; }

        [JsonProperty("zusatzAttribute")]
        public ZusatzAttribut[] ZusatzAttribute { get; set; }
    }


    /// <summary>
    /// Viele Datenobjekte weisen in unterschiedlichen Systemen eine eindeutige ID (Kundennummer,
    /// GP-Nummer etc.) auf.
    /// Beim Austausch von Datenobjekten zwischen verschiedenen Systemen ist es daher hilfreich,
    /// sich die eindeutigen IDs der anzubindenden Systeme zu merken.
    ///
    /// .. raw:: html
    ///
    /// <object data="../_static/images/bo4e/com/ZusatzAttribut.svg"
    /// type="image/svg+xml"></object>
    ///
    /// .. HINT::
    /// `ZusatzAttribut JSON Schema
    /// <https://json-schema.app/view/%23?url=https://raw.githubusercontent.com/BO4E/BO4E-Schemas/v202401.2.1/src/bo4e_schemas/ZusatzAttribut.json>`_
    /// </summary>
    public partial class ZusatzAttribut
    {
        /// <summary>
        /// Bezeichnung der externen Referenz (z.B. "microservice xyz" oder "SAP CRM GP-Nummer")
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>
        /// Bezeichnung der externen Referenz (z.B. "microservice xyz" oder "SAP CRM GP-Nummer")
        /// </summary>
        [JsonProperty("wert")]
        public object Wert { get; set; }
    }

    /// <summary>
    /// Der Status eines Zählerstandes
    /// </summary>
    public enum Messwertstatus { Abgelesen, AngabeFuerLieferschein, Energiemengesummiert, Ersatzwert, Fehlt, NichtVerwendbar, Prognosewert, Vorlaeufigerwert, Vorschlagswert };

    /// <summary>
    /// Aufzählung von zusätzlichen Informationen zum Status, beispielsweise in Lastgängen oder
    /// Zählwerkständen.
    /// </summary>
    public enum Messwertstatuszusatz { Z74Keinzugang, Z75Kommunikationsstoerung, Z76Netzausfall, Z77Spannungsausfall, Z78Geraetewechsel, Z79Kalibrierung, Z80Geraetarbeitetausserhalbderbetriebsbedingungen, Z81MesseinrichtunggestoertDefekt, Z82Unsicherheitmessung, Z84Leerstand, Z85Realerzaehlerueberlaufgeprueft, Z86Plausibelwgkontrollablesung, Z87Plausibelwgkundenhinweis, Z88VergleichsmessungGeeicht, Z89VergleichsmessungNichtgeeicht, Z90Messwertnachbildungausgeeichtenwerten, Z91Messwertnachbildungausnichtgeeichtenwerten, Z92Interpolation, Z93Haltewert, Z94Bilanzierungnetzabschnitt, Z95Historischemesswerte, Z98Beruecksichtigungstoermengenzaehlwerk, Z99Mengenumwertungunvollstaendig, Za0UhrzeitgestelltSynchronisation, Za1Messwertunplausibel, Za3Falscherwandlerfaktor, Za4Fehlerhafteablesung, Za5Aenderungderberechnung, Za6Umbaudermesslokation, Za7Datenbearbeitungsfehler, Za8Brennwertkorrektur, Za9ZZahlKorrektur, Zb0StoerungDefektmesseinrichtung, Zb9Aenderungtarifschaltzeiten, Zc2Tarifschaltgeraetdefekt, Zc3Austauschdesersatzwertes, Zc4Impulswertigkeitnichtausreichend, Zg3Umstellunggasqualitaet, Zj2Statistischemethode };

    public partial class Zeitreihenwert
    {
        public static Zeitreihenwert FromJson(string json) => JsonConvert.DeserializeObject<Zeitreihenwert>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Zeitreihenwert self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                MesswertstatusConverter.Singleton,
                MesswertstatuszusatzConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class MesswertstatusConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Messwertstatus) || t == typeof(Messwertstatus?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ABGELESEN":
                    return Messwertstatus.Abgelesen;
                case "ANGABE_FUER_LIEFERSCHEIN":
                    return Messwertstatus.AngabeFuerLieferschein;
                case "ENERGIEMENGESUMMIERT":
                    return Messwertstatus.Energiemengesummiert;
                case "ERSATZWERT":
                    return Messwertstatus.Ersatzwert;
                case "FEHLT":
                    return Messwertstatus.Fehlt;
                case "NICHT_VERWENDBAR":
                    return Messwertstatus.NichtVerwendbar;
                case "PROGNOSEWERT":
                    return Messwertstatus.Prognosewert;
                case "VORLAEUFIGERWERT":
                    return Messwertstatus.Vorlaeufigerwert;
                case "VORSCHLAGSWERT":
                    return Messwertstatus.Vorschlagswert;
            }
            throw new Exception("Cannot unmarshal type Messwertstatus");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Messwertstatus)untypedValue;
            switch (value)
            {
                case Messwertstatus.Abgelesen:
                    serializer.Serialize(writer, "ABGELESEN");
                    return;
                case Messwertstatus.AngabeFuerLieferschein:
                    serializer.Serialize(writer, "ANGABE_FUER_LIEFERSCHEIN");
                    return;
                case Messwertstatus.Energiemengesummiert:
                    serializer.Serialize(writer, "ENERGIEMENGESUMMIERT");
                    return;
                case Messwertstatus.Ersatzwert:
                    serializer.Serialize(writer, "ERSATZWERT");
                    return;
                case Messwertstatus.Fehlt:
                    serializer.Serialize(writer, "FEHLT");
                    return;
                case Messwertstatus.NichtVerwendbar:
                    serializer.Serialize(writer, "NICHT_VERWENDBAR");
                    return;
                case Messwertstatus.Prognosewert:
                    serializer.Serialize(writer, "PROGNOSEWERT");
                    return;
                case Messwertstatus.Vorlaeufigerwert:
                    serializer.Serialize(writer, "VORLAEUFIGERWERT");
                    return;
                case Messwertstatus.Vorschlagswert:
                    serializer.Serialize(writer, "VORSCHLAGSWERT");
                    return;
            }
            throw new Exception("Cannot marshal type Messwertstatus");
        }

        public static readonly MesswertstatusConverter Singleton = new MesswertstatusConverter();
    }

    internal class MesswertstatuszusatzConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Messwertstatuszusatz) || t == typeof(Messwertstatuszusatz?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Z74_KEINZUGANG":
                    return Messwertstatuszusatz.Z74Keinzugang;
                case "Z75_KOMMUNIKATIONSSTOERUNG":
                    return Messwertstatuszusatz.Z75Kommunikationsstoerung;
                case "Z76_NETZAUSFALL":
                    return Messwertstatuszusatz.Z76Netzausfall;
                case "Z77_SPANNUNGSAUSFALL":
                    return Messwertstatuszusatz.Z77Spannungsausfall;
                case "Z78_GERAETEWECHSEL":
                    return Messwertstatuszusatz.Z78Geraetewechsel;
                case "Z79_KALIBRIERUNG":
                    return Messwertstatuszusatz.Z79Kalibrierung;
                case "Z80_GERAETARBEITETAUSSERHALBDERBETRIEBSBEDINGUNGEN":
                    return Messwertstatuszusatz.Z80Geraetarbeitetausserhalbderbetriebsbedingungen;
                case "Z81_MESSEINRICHTUNGGESTOERT_DEFEKT":
                    return Messwertstatuszusatz.Z81MesseinrichtunggestoertDefekt;
                case "Z82_UNSICHERHEITMESSUNG":
                    return Messwertstatuszusatz.Z82Unsicherheitmessung;
                case "Z84_LEERSTAND":
                    return Messwertstatuszusatz.Z84Leerstand;
                case "Z85_REALERZAEHLERUEBERLAUFGEPRUEFT":
                    return Messwertstatuszusatz.Z85Realerzaehlerueberlaufgeprueft;
                case "Z86_PLAUSIBELWGKONTROLLABLESUNG":
                    return Messwertstatuszusatz.Z86Plausibelwgkontrollablesung;
                case "Z87_PLAUSIBELWGKUNDENHINWEIS":
                    return Messwertstatuszusatz.Z87Plausibelwgkundenhinweis;
                case "Z88_VERGLEICHSMESSUNG(GEEICHT)":
                    return Messwertstatuszusatz.Z88VergleichsmessungGeeicht;
                case "Z89_VERGLEICHSMESSUNG(NICHTGEEICHT)":
                    return Messwertstatuszusatz.Z89VergleichsmessungNichtgeeicht;
                case "Z90_MESSWERTNACHBILDUNGAUSGEEICHTENWERTEN":
                    return Messwertstatuszusatz.Z90Messwertnachbildungausgeeichtenwerten;
                case "Z91_MESSWERTNACHBILDUNGAUSNICHTGEEICHTENWERTEN":
                    return Messwertstatuszusatz.Z91Messwertnachbildungausnichtgeeichtenwerten;
                case "Z92_INTERPOLATION":
                    return Messwertstatuszusatz.Z92Interpolation;
                case "Z93_HALTEWERT":
                    return Messwertstatuszusatz.Z93Haltewert;
                case "Z94_BILANZIERUNGNETZABSCHNITT":
                    return Messwertstatuszusatz.Z94Bilanzierungnetzabschnitt;
                case "Z95_HISTORISCHEMESSWERTE":
                    return Messwertstatuszusatz.Z95Historischemesswerte;
                case "Z98_BERUECKSICHTIGUNGSTOERMENGENZAEHLWERK":
                    return Messwertstatuszusatz.Z98Beruecksichtigungstoermengenzaehlwerk;
                case "Z99_MENGENUMWERTUNGUNVOLLSTAENDIG":
                    return Messwertstatuszusatz.Z99Mengenumwertungunvollstaendig;
                case "ZA0_UHRZEITGESTELLT_SYNCHRONISATION":
                    return Messwertstatuszusatz.Za0UhrzeitgestelltSynchronisation;
                case "ZA1_MESSWERTUNPLAUSIBEL":
                    return Messwertstatuszusatz.Za1Messwertunplausibel;
                case "ZA3_FALSCHERWANDLERFAKTOR":
                    return Messwertstatuszusatz.Za3Falscherwandlerfaktor;
                case "ZA4_FEHLERHAFTEABLESUNG":
                    return Messwertstatuszusatz.Za4Fehlerhafteablesung;
                case "ZA5_AENDERUNGDERBERECHNUNG":
                    return Messwertstatuszusatz.Za5Aenderungderberechnung;
                case "ZA6_UMBAUDERMESSLOKATION":
                    return Messwertstatuszusatz.Za6Umbaudermesslokation;
                case "ZA7_DATENBEARBEITUNGSFEHLER":
                    return Messwertstatuszusatz.Za7Datenbearbeitungsfehler;
                case "ZA8_BRENNWERTKORREKTUR":
                    return Messwertstatuszusatz.Za8Brennwertkorrektur;
                case "ZA9_Z-ZAHL-KORREKTUR":
                    return Messwertstatuszusatz.Za9ZZahlKorrektur;
                case "ZB0_STOERUNG_DEFEKTMESSEINRICHTUNG":
                    return Messwertstatuszusatz.Zb0StoerungDefektmesseinrichtung;
                case "ZB9_AENDERUNGTARIFSCHALTZEITEN":
                    return Messwertstatuszusatz.Zb9Aenderungtarifschaltzeiten;
                case "ZC2_TARIFSCHALTGERAETDEFEKT":
                    return Messwertstatuszusatz.Zc2Tarifschaltgeraetdefekt;
                case "ZC3_AUSTAUSCHDESERSATZWERTES":
                    return Messwertstatuszusatz.Zc3Austauschdesersatzwertes;
                case "ZC4_IMPULSWERTIGKEITNICHTAUSREICHEND":
                    return Messwertstatuszusatz.Zc4Impulswertigkeitnichtausreichend;
                case "ZG3_UMSTELLUNGGASQUALITAET":
                    return Messwertstatuszusatz.Zg3Umstellunggasqualitaet;
                case "ZJ2_STATISTISCHEMETHODE":
                    return Messwertstatuszusatz.Zj2Statistischemethode;
            }
            throw new Exception("Cannot unmarshal type Messwertstatuszusatz");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Messwertstatuszusatz)untypedValue;
            switch (value)
            {
                case Messwertstatuszusatz.Z74Keinzugang:
                    serializer.Serialize(writer, "Z74_KEINZUGANG");
                    return;
                case Messwertstatuszusatz.Z75Kommunikationsstoerung:
                    serializer.Serialize(writer, "Z75_KOMMUNIKATIONSSTOERUNG");
                    return;
                case Messwertstatuszusatz.Z76Netzausfall:
                    serializer.Serialize(writer, "Z76_NETZAUSFALL");
                    return;
                case Messwertstatuszusatz.Z77Spannungsausfall:
                    serializer.Serialize(writer, "Z77_SPANNUNGSAUSFALL");
                    return;
                case Messwertstatuszusatz.Z78Geraetewechsel:
                    serializer.Serialize(writer, "Z78_GERAETEWECHSEL");
                    return;
                case Messwertstatuszusatz.Z79Kalibrierung:
                    serializer.Serialize(writer, "Z79_KALIBRIERUNG");
                    return;
                case Messwertstatuszusatz.Z80Geraetarbeitetausserhalbderbetriebsbedingungen:
                    serializer.Serialize(writer, "Z80_GERAETARBEITETAUSSERHALBDERBETRIEBSBEDINGUNGEN");
                    return;
                case Messwertstatuszusatz.Z81MesseinrichtunggestoertDefekt:
                    serializer.Serialize(writer, "Z81_MESSEINRICHTUNGGESTOERT_DEFEKT");
                    return;
                case Messwertstatuszusatz.Z82Unsicherheitmessung:
                    serializer.Serialize(writer, "Z82_UNSICHERHEITMESSUNG");
                    return;
                case Messwertstatuszusatz.Z84Leerstand:
                    serializer.Serialize(writer, "Z84_LEERSTAND");
                    return;
                case Messwertstatuszusatz.Z85Realerzaehlerueberlaufgeprueft:
                    serializer.Serialize(writer, "Z85_REALERZAEHLERUEBERLAUFGEPRUEFT");
                    return;
                case Messwertstatuszusatz.Z86Plausibelwgkontrollablesung:
                    serializer.Serialize(writer, "Z86_PLAUSIBELWGKONTROLLABLESUNG");
                    return;
                case Messwertstatuszusatz.Z87Plausibelwgkundenhinweis:
                    serializer.Serialize(writer, "Z87_PLAUSIBELWGKUNDENHINWEIS");
                    return;
                case Messwertstatuszusatz.Z88VergleichsmessungGeeicht:
                    serializer.Serialize(writer, "Z88_VERGLEICHSMESSUNG(GEEICHT)");
                    return;
                case Messwertstatuszusatz.Z89VergleichsmessungNichtgeeicht:
                    serializer.Serialize(writer, "Z89_VERGLEICHSMESSUNG(NICHTGEEICHT)");
                    return;
                case Messwertstatuszusatz.Z90Messwertnachbildungausgeeichtenwerten:
                    serializer.Serialize(writer, "Z90_MESSWERTNACHBILDUNGAUSGEEICHTENWERTEN");
                    return;
                case Messwertstatuszusatz.Z91Messwertnachbildungausnichtgeeichtenwerten:
                    serializer.Serialize(writer, "Z91_MESSWERTNACHBILDUNGAUSNICHTGEEICHTENWERTEN");
                    return;
                case Messwertstatuszusatz.Z92Interpolation:
                    serializer.Serialize(writer, "Z92_INTERPOLATION");
                    return;
                case Messwertstatuszusatz.Z93Haltewert:
                    serializer.Serialize(writer, "Z93_HALTEWERT");
                    return;
                case Messwertstatuszusatz.Z94Bilanzierungnetzabschnitt:
                    serializer.Serialize(writer, "Z94_BILANZIERUNGNETZABSCHNITT");
                    return;
                case Messwertstatuszusatz.Z95Historischemesswerte:
                    serializer.Serialize(writer, "Z95_HISTORISCHEMESSWERTE");
                    return;
                case Messwertstatuszusatz.Z98Beruecksichtigungstoermengenzaehlwerk:
                    serializer.Serialize(writer, "Z98_BERUECKSICHTIGUNGSTOERMENGENZAEHLWERK");
                    return;
                case Messwertstatuszusatz.Z99Mengenumwertungunvollstaendig:
                    serializer.Serialize(writer, "Z99_MENGENUMWERTUNGUNVOLLSTAENDIG");
                    return;
                case Messwertstatuszusatz.Za0UhrzeitgestelltSynchronisation:
                    serializer.Serialize(writer, "ZA0_UHRZEITGESTELLT_SYNCHRONISATION");
                    return;
                case Messwertstatuszusatz.Za1Messwertunplausibel:
                    serializer.Serialize(writer, "ZA1_MESSWERTUNPLAUSIBEL");
                    return;
                case Messwertstatuszusatz.Za3Falscherwandlerfaktor:
                    serializer.Serialize(writer, "ZA3_FALSCHERWANDLERFAKTOR");
                    return;
                case Messwertstatuszusatz.Za4Fehlerhafteablesung:
                    serializer.Serialize(writer, "ZA4_FEHLERHAFTEABLESUNG");
                    return;
                case Messwertstatuszusatz.Za5Aenderungderberechnung:
                    serializer.Serialize(writer, "ZA5_AENDERUNGDERBERECHNUNG");
                    return;
                case Messwertstatuszusatz.Za6Umbaudermesslokation:
                    serializer.Serialize(writer, "ZA6_UMBAUDERMESSLOKATION");
                    return;
                case Messwertstatuszusatz.Za7Datenbearbeitungsfehler:
                    serializer.Serialize(writer, "ZA7_DATENBEARBEITUNGSFEHLER");
                    return;
                case Messwertstatuszusatz.Za8Brennwertkorrektur:
                    serializer.Serialize(writer, "ZA8_BRENNWERTKORREKTUR");
                    return;
                case Messwertstatuszusatz.Za9ZZahlKorrektur:
                    serializer.Serialize(writer, "ZA9_Z-ZAHL-KORREKTUR");
                    return;
                case Messwertstatuszusatz.Zb0StoerungDefektmesseinrichtung:
                    serializer.Serialize(writer, "ZB0_STOERUNG_DEFEKTMESSEINRICHTUNG");
                    return;
                case Messwertstatuszusatz.Zb9Aenderungtarifschaltzeiten:
                    serializer.Serialize(writer, "ZB9_AENDERUNGTARIFSCHALTZEITEN");
                    return;
                case Messwertstatuszusatz.Zc2Tarifschaltgeraetdefekt:
                    serializer.Serialize(writer, "ZC2_TARIFSCHALTGERAETDEFEKT");
                    return;
                case Messwertstatuszusatz.Zc3Austauschdesersatzwertes:
                    serializer.Serialize(writer, "ZC3_AUSTAUSCHDESERSATZWERTES");
                    return;
                case Messwertstatuszusatz.Zc4Impulswertigkeitnichtausreichend:
                    serializer.Serialize(writer, "ZC4_IMPULSWERTIGKEITNICHTAUSREICHEND");
                    return;
                case Messwertstatuszusatz.Zg3Umstellunggasqualitaet:
                    serializer.Serialize(writer, "ZG3_UMSTELLUNGGASQUALITAET");
                    return;
                case Messwertstatuszusatz.Zj2Statistischemethode:
                    serializer.Serialize(writer, "ZJ2_STATISTISCHEMETHODE");
                    return;
            }
            throw new Exception("Cannot marshal type Messwertstatuszusatz");
        }

        public static readonly MesswertstatuszusatzConverter Singleton = new MesswertstatuszusatzConverter();
    }
}
