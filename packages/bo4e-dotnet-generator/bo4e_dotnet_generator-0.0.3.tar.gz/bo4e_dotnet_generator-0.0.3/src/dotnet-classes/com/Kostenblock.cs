// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var kostenblock = Kostenblock.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Mit dieser Komponente werden mehrere Kostenpositionen zusammengefasst.
    ///
    /// .. raw:: html
    ///
    /// <object data="../_static/images/bo4e/com/Kostenblock.svg" type="image/svg+xml"></object>
    ///
    /// .. HINT::
    /// `Kostenblock JSON Schema
    /// <https://json-schema.app/view/%23?url=https://raw.githubusercontent.com/BO4E/BO4E-Schemas/v202401.2.1/src/bo4e_schemas/com/Kostenblock.json>`_
    /// </summary>
    public partial class Kostenblock
    {
        /// <summary>
        /// zusatz_attribute: Optional[list["ZusatzAttribut"]] = None
        ///
        /// # pylint: disable=duplicate-code
        /// model_config = ConfigDict(
        /// alias_generator=camelize,
        /// populate_by_name=True,
        /// extra="allow",
        /// # json_encoders is deprecated, but there is no easy-to-use alternative. The best way
        /// would be to create
        /// # an annotated version of Decimal, but you would have to use it everywhere in the
        /// pydantic models.
        /// # See this issue for more info: https://github.com/pydantic/pydantic/issues/6375
        /// json_encoders={Decimal: str},
        /// )
        /// </summary>
        [JsonProperty("_id")]
        public string Id { get; set; }

        /// <summary>
        /// Version der BO-Struktur aka "fachliche Versionierung"
        /// </summary>
        [JsonProperty("_version")]
        public string Version { get; set; }

        /// <summary>
        /// Bezeichnung für einen Kostenblock. Z.B. Netzkosten, Messkosten, Umlagen, etc.
        /// </summary>
        [JsonProperty("kostenblockbezeichnung")]
        public string Kostenblockbezeichnung { get; set; }

        /// <summary>
        /// Hier sind die Details zu einer Kostenposition aufgeführt. Z.B.:
        /// Alliander Netz Heinsberg GmbH, 01.02.2018, 31.12.2018, Arbeitspreis HT, 3.660 kWh, 5,8200
        /// ct/kWh, 213,01 €
        /// </summary>
        [JsonProperty("kostenpositionen")]
        public Kostenposition[] Kostenpositionen { get; set; }

        /// <summary>
        /// Die Summe aller Kostenpositionen dieses Blocks
        /// </summary>
        [JsonProperty("summeKostenblock")]
        public Betrag SummeKostenblock { get; set; }

        [JsonProperty("zusatzAttribute")]
        public ZusatzAttribut[] ZusatzAttribute { get; set; }
    }



    /// <summary>
    /// Viele Datenobjekte weisen in unterschiedlichen Systemen eine eindeutige ID (Kundennummer,
    /// GP-Nummer etc.) auf.
    /// Beim Austausch von Datenobjekten zwischen verschiedenen Systemen ist es daher hilfreich,
    /// sich die eindeutigen IDs der anzubindenden Systeme zu merken.
    ///
    /// .. raw:: html
    ///
    /// <object data="../_static/images/bo4e/com/ZusatzAttribut.svg"
    /// type="image/svg+xml"></object>
    ///
    /// .. HINT::
    /// `ZusatzAttribut JSON Schema
    /// <https://json-schema.app/view/%23?url=https://raw.githubusercontent.com/BO4E/BO4E-Schemas/v202401.2.1/src/bo4e_schemas/ZusatzAttribut.json>`_
    /// </summary>
    public partial class ZusatzAttribut
    {
        /// <summary>
        /// Bezeichnung der externen Referenz (z.B. "microservice xyz" oder "SAP CRM GP-Nummer")
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>
        /// Bezeichnung der externen Referenz (z.B. "microservice xyz" oder "SAP CRM GP-Nummer")
        /// </summary>
        [JsonProperty("wert")]
        public object Wert { get; set; }
    }



    /// <summary>
    /// Aufzählung der Währungscodes.
    /// </summary>
    public enum Waehrungscode { Aed, Afn, All, Amd, Ang, Aoa, Ars, Aud, Awg, Azn, Bam, Bbd, Bdt, Bgn, Bhd, Bif, Bmd, Bnd, Bob, Bov, Brl, Bsd, Btn, Bwp, Byn, Byr, Bzd, Cad, Cdf, Che, Chf, Chw, Clf, Clp, Cny, Cop, Cou, Crc, Cuc, Cup, Cve, Czk, Djf, Dkk, Dop, Dzd, Egp, Ern, Etb, Eur, Fjd, Fkp, Gbp, Gel, Ghs, Gip, Gmd, Gnf, Gtq, Gyd, Hkd, Hnl, Hrk, Htg, Huf, Idr, Ils, Inr, Iqd, Irr, Isk, Jmd, Jod, Jpy, Kes, Kgs, Khr, Kmf, Kpw, Krw, Kwd, Kyd, Kzt, Lak, Lbp, Lkr, Lrd, Lsl, Ltl, Lyd, Mad, Mdl, Mga, Mkd, Mmk, Mnt, Mop, Mro, Mur, Mvr, Mwk, Mxn, Mxv, Myr, Mzn, Nad, Ngn, Nio, Nok, Npr, Nzd, Omr, Pab, Pen, Pgk, Php, Pkr, Pln, Pyg, Qar, Ron, Rsd, Rub, Rur, Rwf, Sar, Sbd, Scr, Sdg, Sek, Sgd, Shp, Sll, Sos, Srd, Ssp, Std, Svc, Syp, Szl, Thb, Tjs, Tmt, Tnd, Top, Try, Ttd, Twd, Tzs, Uah, Ugx, Usd, Usn, Uss, Uyi, Uyu, Uzs, Vef, Vnd, Vuv, Wst, Xaf, Xag, Xau, Xba, Xbb, Xbc, Xbd, Xcd, Xdr, Xof, Xpd, Xpf, Xpt, Xsu, Xts, Xua, Xxx, Yer, Zar, Zmw, Zwl };

    /// <summary>
    /// Einheit: Messgrößen, die per Messung oder Vorgabe ermittelt werden können.
    /// </summary>
    public enum Mengeneinheit { Halbjahr, Jahr, Kubikmeter, Kvar, Kvarh, Kw, Kwh, Kwhk, Minute, Monat, Mw, Mwh, Prozent, Quartal, Sekunde, Stueck, Stunde, Tag, Var, Varh, ViertelStunde, W, Wh, Woche };

    /// <summary>
    /// In diesem Enum werden die Währungen und ihre Untereinheiten definiert, beispielsweise für
    /// die Verwendung in Preisen.
    /// </summary>
    public enum Waehrungseinheit { Ct, Eur };

    /// <summary>
    /// Statusinformation für Preise
    /// </summary>
    public enum Preisstatus { Endgueltig, Vorlaeufig };

    public partial class Kostenblock
    {
        public static Kostenblock FromJson(string json) => JsonConvert.DeserializeObject<Kostenblock>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Kostenblock self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                WaehrungscodeConverter.Singleton,
                MengeneinheitConverter.Singleton,
                WaehrungseinheitConverter.Singleton,
                PreisstatusConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class WaehrungscodeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Waehrungscode) || t == typeof(Waehrungscode?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "AED":
                    return Waehrungscode.Aed;
                case "AFN":
                    return Waehrungscode.Afn;
                case "ALL":
                    return Waehrungscode.All;
                case "AMD":
                    return Waehrungscode.Amd;
                case "ANG":
                    return Waehrungscode.Ang;
                case "AOA":
                    return Waehrungscode.Aoa;
                case "ARS":
                    return Waehrungscode.Ars;
                case "AUD":
                    return Waehrungscode.Aud;
                case "AWG":
                    return Waehrungscode.Awg;
                case "AZN":
                    return Waehrungscode.Azn;
                case "BAM":
                    return Waehrungscode.Bam;
                case "BBD":
                    return Waehrungscode.Bbd;
                case "BDT":
                    return Waehrungscode.Bdt;
                case "BGN":
                    return Waehrungscode.Bgn;
                case "BHD":
                    return Waehrungscode.Bhd;
                case "BIF":
                    return Waehrungscode.Bif;
                case "BMD":
                    return Waehrungscode.Bmd;
                case "BND":
                    return Waehrungscode.Bnd;
                case "BOB":
                    return Waehrungscode.Bob;
                case "BOV":
                    return Waehrungscode.Bov;
                case "BRL":
                    return Waehrungscode.Brl;
                case "BSD":
                    return Waehrungscode.Bsd;
                case "BTN":
                    return Waehrungscode.Btn;
                case "BWP":
                    return Waehrungscode.Bwp;
                case "BYN":
                    return Waehrungscode.Byn;
                case "BYR":
                    return Waehrungscode.Byr;
                case "BZD":
                    return Waehrungscode.Bzd;
                case "CAD":
                    return Waehrungscode.Cad;
                case "CDF":
                    return Waehrungscode.Cdf;
                case "CHE":
                    return Waehrungscode.Che;
                case "CHF":
                    return Waehrungscode.Chf;
                case "CHW":
                    return Waehrungscode.Chw;
                case "CLF":
                    return Waehrungscode.Clf;
                case "CLP":
                    return Waehrungscode.Clp;
                case "CNY":
                    return Waehrungscode.Cny;
                case "COP":
                    return Waehrungscode.Cop;
                case "COU":
                    return Waehrungscode.Cou;
                case "CRC":
                    return Waehrungscode.Crc;
                case "CUC":
                    return Waehrungscode.Cuc;
                case "CUP":
                    return Waehrungscode.Cup;
                case "CVE":
                    return Waehrungscode.Cve;
                case "CZK":
                    return Waehrungscode.Czk;
                case "DJF":
                    return Waehrungscode.Djf;
                case "DKK":
                    return Waehrungscode.Dkk;
                case "DOP":
                    return Waehrungscode.Dop;
                case "DZD":
                    return Waehrungscode.Dzd;
                case "EGP":
                    return Waehrungscode.Egp;
                case "ERN":
                    return Waehrungscode.Ern;
                case "ETB":
                    return Waehrungscode.Etb;
                case "EUR":
                    return Waehrungscode.Eur;
                case "FJD":
                    return Waehrungscode.Fjd;
                case "FKP":
                    return Waehrungscode.Fkp;
                case "GBP":
                    return Waehrungscode.Gbp;
                case "GEL":
                    return Waehrungscode.Gel;
                case "GHS":
                    return Waehrungscode.Ghs;
                case "GIP":
                    return Waehrungscode.Gip;
                case "GMD":
                    return Waehrungscode.Gmd;
                case "GNF":
                    return Waehrungscode.Gnf;
                case "GTQ":
                    return Waehrungscode.Gtq;
                case "GYD":
                    return Waehrungscode.Gyd;
                case "HKD":
                    return Waehrungscode.Hkd;
                case "HNL":
                    return Waehrungscode.Hnl;
                case "HRK":
                    return Waehrungscode.Hrk;
                case "HTG":
                    return Waehrungscode.Htg;
                case "HUF":
                    return Waehrungscode.Huf;
                case "IDR":
                    return Waehrungscode.Idr;
                case "ILS":
                    return Waehrungscode.Ils;
                case "INR":
                    return Waehrungscode.Inr;
                case "IQD":
                    return Waehrungscode.Iqd;
                case "IRR":
                    return Waehrungscode.Irr;
                case "ISK":
                    return Waehrungscode.Isk;
                case "JMD":
                    return Waehrungscode.Jmd;
                case "JOD":
                    return Waehrungscode.Jod;
                case "JPY":
                    return Waehrungscode.Jpy;
                case "KES":
                    return Waehrungscode.Kes;
                case "KGS":
                    return Waehrungscode.Kgs;
                case "KHR":
                    return Waehrungscode.Khr;
                case "KMF":
                    return Waehrungscode.Kmf;
                case "KPW":
                    return Waehrungscode.Kpw;
                case "KRW":
                    return Waehrungscode.Krw;
                case "KWD":
                    return Waehrungscode.Kwd;
                case "KYD":
                    return Waehrungscode.Kyd;
                case "KZT":
                    return Waehrungscode.Kzt;
                case "LAK":
                    return Waehrungscode.Lak;
                case "LBP":
                    return Waehrungscode.Lbp;
                case "LKR":
                    return Waehrungscode.Lkr;
                case "LRD":
                    return Waehrungscode.Lrd;
                case "LSL":
                    return Waehrungscode.Lsl;
                case "LTL":
                    return Waehrungscode.Ltl;
                case "LYD":
                    return Waehrungscode.Lyd;
                case "MAD":
                    return Waehrungscode.Mad;
                case "MDL":
                    return Waehrungscode.Mdl;
                case "MGA":
                    return Waehrungscode.Mga;
                case "MKD":
                    return Waehrungscode.Mkd;
                case "MMK":
                    return Waehrungscode.Mmk;
                case "MNT":
                    return Waehrungscode.Mnt;
                case "MOP":
                    return Waehrungscode.Mop;
                case "MRO":
                    return Waehrungscode.Mro;
                case "MUR":
                    return Waehrungscode.Mur;
                case "MVR":
                    return Waehrungscode.Mvr;
                case "MWK":
                    return Waehrungscode.Mwk;
                case "MXN":
                    return Waehrungscode.Mxn;
                case "MXV":
                    return Waehrungscode.Mxv;
                case "MYR":
                    return Waehrungscode.Myr;
                case "MZN":
                    return Waehrungscode.Mzn;
                case "NAD":
                    return Waehrungscode.Nad;
                case "NGN":
                    return Waehrungscode.Ngn;
                case "NIO":
                    return Waehrungscode.Nio;
                case "NOK":
                    return Waehrungscode.Nok;
                case "NPR":
                    return Waehrungscode.Npr;
                case "NZD":
                    return Waehrungscode.Nzd;
                case "OMR":
                    return Waehrungscode.Omr;
                case "PAB":
                    return Waehrungscode.Pab;
                case "PEN":
                    return Waehrungscode.Pen;
                case "PGK":
                    return Waehrungscode.Pgk;
                case "PHP":
                    return Waehrungscode.Php;
                case "PKR":
                    return Waehrungscode.Pkr;
                case "PLN":
                    return Waehrungscode.Pln;
                case "PYG":
                    return Waehrungscode.Pyg;
                case "QAR":
                    return Waehrungscode.Qar;
                case "RON":
                    return Waehrungscode.Ron;
                case "RSD":
                    return Waehrungscode.Rsd;
                case "RUB":
                    return Waehrungscode.Rub;
                case "RUR":
                    return Waehrungscode.Rur;
                case "RWF":
                    return Waehrungscode.Rwf;
                case "SAR":
                    return Waehrungscode.Sar;
                case "SBD":
                    return Waehrungscode.Sbd;
                case "SCR":
                    return Waehrungscode.Scr;
                case "SDG":
                    return Waehrungscode.Sdg;
                case "SEK":
                    return Waehrungscode.Sek;
                case "SGD":
                    return Waehrungscode.Sgd;
                case "SHP":
                    return Waehrungscode.Shp;
                case "SLL":
                    return Waehrungscode.Sll;
                case "SOS":
                    return Waehrungscode.Sos;
                case "SRD":
                    return Waehrungscode.Srd;
                case "SSP":
                    return Waehrungscode.Ssp;
                case "STD":
                    return Waehrungscode.Std;
                case "SVC":
                    return Waehrungscode.Svc;
                case "SYP":
                    return Waehrungscode.Syp;
                case "SZL":
                    return Waehrungscode.Szl;
                case "THB":
                    return Waehrungscode.Thb;
                case "TJS":
                    return Waehrungscode.Tjs;
                case "TMT":
                    return Waehrungscode.Tmt;
                case "TND":
                    return Waehrungscode.Tnd;
                case "TOP":
                    return Waehrungscode.Top;
                case "TRY":
                    return Waehrungscode.Try;
                case "TTD":
                    return Waehrungscode.Ttd;
                case "TWD":
                    return Waehrungscode.Twd;
                case "TZS":
                    return Waehrungscode.Tzs;
                case "UAH":
                    return Waehrungscode.Uah;
                case "UGX":
                    return Waehrungscode.Ugx;
                case "USD":
                    return Waehrungscode.Usd;
                case "USN":
                    return Waehrungscode.Usn;
                case "USS":
                    return Waehrungscode.Uss;
                case "UYI":
                    return Waehrungscode.Uyi;
                case "UYU":
                    return Waehrungscode.Uyu;
                case "UZS":
                    return Waehrungscode.Uzs;
                case "VEF":
                    return Waehrungscode.Vef;
                case "VND":
                    return Waehrungscode.Vnd;
                case "VUV":
                    return Waehrungscode.Vuv;
                case "WST":
                    return Waehrungscode.Wst;
                case "XAF":
                    return Waehrungscode.Xaf;
                case "XAG":
                    return Waehrungscode.Xag;
                case "XAU":
                    return Waehrungscode.Xau;
                case "XBA":
                    return Waehrungscode.Xba;
                case "XBB":
                    return Waehrungscode.Xbb;
                case "XBC":
                    return Waehrungscode.Xbc;
                case "XBD":
                    return Waehrungscode.Xbd;
                case "XCD":
                    return Waehrungscode.Xcd;
                case "XDR":
                    return Waehrungscode.Xdr;
                case "XOF":
                    return Waehrungscode.Xof;
                case "XPD":
                    return Waehrungscode.Xpd;
                case "XPF":
                    return Waehrungscode.Xpf;
                case "XPT":
                    return Waehrungscode.Xpt;
                case "XSU":
                    return Waehrungscode.Xsu;
                case "XTS":
                    return Waehrungscode.Xts;
                case "XUA":
                    return Waehrungscode.Xua;
                case "XXX":
                    return Waehrungscode.Xxx;
                case "YER":
                    return Waehrungscode.Yer;
                case "ZAR":
                    return Waehrungscode.Zar;
                case "ZMW":
                    return Waehrungscode.Zmw;
                case "ZWL":
                    return Waehrungscode.Zwl;
            }
            throw new Exception("Cannot unmarshal type Waehrungscode");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Waehrungscode)untypedValue;
            switch (value)
            {
                case Waehrungscode.Aed:
                    serializer.Serialize(writer, "AED");
                    return;
                case Waehrungscode.Afn:
                    serializer.Serialize(writer, "AFN");
                    return;
                case Waehrungscode.All:
                    serializer.Serialize(writer, "ALL");
                    return;
                case Waehrungscode.Amd:
                    serializer.Serialize(writer, "AMD");
                    return;
                case Waehrungscode.Ang:
                    serializer.Serialize(writer, "ANG");
                    return;
                case Waehrungscode.Aoa:
                    serializer.Serialize(writer, "AOA");
                    return;
                case Waehrungscode.Ars:
                    serializer.Serialize(writer, "ARS");
                    return;
                case Waehrungscode.Aud:
                    serializer.Serialize(writer, "AUD");
                    return;
                case Waehrungscode.Awg:
                    serializer.Serialize(writer, "AWG");
                    return;
                case Waehrungscode.Azn:
                    serializer.Serialize(writer, "AZN");
                    return;
                case Waehrungscode.Bam:
                    serializer.Serialize(writer, "BAM");
                    return;
                case Waehrungscode.Bbd:
                    serializer.Serialize(writer, "BBD");
                    return;
                case Waehrungscode.Bdt:
                    serializer.Serialize(writer, "BDT");
                    return;
                case Waehrungscode.Bgn:
                    serializer.Serialize(writer, "BGN");
                    return;
                case Waehrungscode.Bhd:
                    serializer.Serialize(writer, "BHD");
                    return;
                case Waehrungscode.Bif:
                    serializer.Serialize(writer, "BIF");
                    return;
                case Waehrungscode.Bmd:
                    serializer.Serialize(writer, "BMD");
                    return;
                case Waehrungscode.Bnd:
                    serializer.Serialize(writer, "BND");
                    return;
                case Waehrungscode.Bob:
                    serializer.Serialize(writer, "BOB");
                    return;
                case Waehrungscode.Bov:
                    serializer.Serialize(writer, "BOV");
                    return;
                case Waehrungscode.Brl:
                    serializer.Serialize(writer, "BRL");
                    return;
                case Waehrungscode.Bsd:
                    serializer.Serialize(writer, "BSD");
                    return;
                case Waehrungscode.Btn:
                    serializer.Serialize(writer, "BTN");
                    return;
                case Waehrungscode.Bwp:
                    serializer.Serialize(writer, "BWP");
                    return;
                case Waehrungscode.Byn:
                    serializer.Serialize(writer, "BYN");
                    return;
                case Waehrungscode.Byr:
                    serializer.Serialize(writer, "BYR");
                    return;
                case Waehrungscode.Bzd:
                    serializer.Serialize(writer, "BZD");
                    return;
                case Waehrungscode.Cad:
                    serializer.Serialize(writer, "CAD");
                    return;
                case Waehrungscode.Cdf:
                    serializer.Serialize(writer, "CDF");
                    return;
                case Waehrungscode.Che:
                    serializer.Serialize(writer, "CHE");
                    return;
                case Waehrungscode.Chf:
                    serializer.Serialize(writer, "CHF");
                    return;
                case Waehrungscode.Chw:
                    serializer.Serialize(writer, "CHW");
                    return;
                case Waehrungscode.Clf:
                    serializer.Serialize(writer, "CLF");
                    return;
                case Waehrungscode.Clp:
                    serializer.Serialize(writer, "CLP");
                    return;
                case Waehrungscode.Cny:
                    serializer.Serialize(writer, "CNY");
                    return;
                case Waehrungscode.Cop:
                    serializer.Serialize(writer, "COP");
                    return;
                case Waehrungscode.Cou:
                    serializer.Serialize(writer, "COU");
                    return;
                case Waehrungscode.Crc:
                    serializer.Serialize(writer, "CRC");
                    return;
                case Waehrungscode.Cuc:
                    serializer.Serialize(writer, "CUC");
                    return;
                case Waehrungscode.Cup:
                    serializer.Serialize(writer, "CUP");
                    return;
                case Waehrungscode.Cve:
                    serializer.Serialize(writer, "CVE");
                    return;
                case Waehrungscode.Czk:
                    serializer.Serialize(writer, "CZK");
                    return;
                case Waehrungscode.Djf:
                    serializer.Serialize(writer, "DJF");
                    return;
                case Waehrungscode.Dkk:
                    serializer.Serialize(writer, "DKK");
                    return;
                case Waehrungscode.Dop:
                    serializer.Serialize(writer, "DOP");
                    return;
                case Waehrungscode.Dzd:
                    serializer.Serialize(writer, "DZD");
                    return;
                case Waehrungscode.Egp:
                    serializer.Serialize(writer, "EGP");
                    return;
                case Waehrungscode.Ern:
                    serializer.Serialize(writer, "ERN");
                    return;
                case Waehrungscode.Etb:
                    serializer.Serialize(writer, "ETB");
                    return;
                case Waehrungscode.Eur:
                    serializer.Serialize(writer, "EUR");
                    return;
                case Waehrungscode.Fjd:
                    serializer.Serialize(writer, "FJD");
                    return;
                case Waehrungscode.Fkp:
                    serializer.Serialize(writer, "FKP");
                    return;
                case Waehrungscode.Gbp:
                    serializer.Serialize(writer, "GBP");
                    return;
                case Waehrungscode.Gel:
                    serializer.Serialize(writer, "GEL");
                    return;
                case Waehrungscode.Ghs:
                    serializer.Serialize(writer, "GHS");
                    return;
                case Waehrungscode.Gip:
                    serializer.Serialize(writer, "GIP");
                    return;
                case Waehrungscode.Gmd:
                    serializer.Serialize(writer, "GMD");
                    return;
                case Waehrungscode.Gnf:
                    serializer.Serialize(writer, "GNF");
                    return;
                case Waehrungscode.Gtq:
                    serializer.Serialize(writer, "GTQ");
                    return;
                case Waehrungscode.Gyd:
                    serializer.Serialize(writer, "GYD");
                    return;
                case Waehrungscode.Hkd:
                    serializer.Serialize(writer, "HKD");
                    return;
                case Waehrungscode.Hnl:
                    serializer.Serialize(writer, "HNL");
                    return;
                case Waehrungscode.Hrk:
                    serializer.Serialize(writer, "HRK");
                    return;
                case Waehrungscode.Htg:
                    serializer.Serialize(writer, "HTG");
                    return;
                case Waehrungscode.Huf:
                    serializer.Serialize(writer, "HUF");
                    return;
                case Waehrungscode.Idr:
                    serializer.Serialize(writer, "IDR");
                    return;
                case Waehrungscode.Ils:
                    serializer.Serialize(writer, "ILS");
                    return;
                case Waehrungscode.Inr:
                    serializer.Serialize(writer, "INR");
                    return;
                case Waehrungscode.Iqd:
                    serializer.Serialize(writer, "IQD");
                    return;
                case Waehrungscode.Irr:
                    serializer.Serialize(writer, "IRR");
                    return;
                case Waehrungscode.Isk:
                    serializer.Serialize(writer, "ISK");
                    return;
                case Waehrungscode.Jmd:
                    serializer.Serialize(writer, "JMD");
                    return;
                case Waehrungscode.Jod:
                    serializer.Serialize(writer, "JOD");
                    return;
                case Waehrungscode.Jpy:
                    serializer.Serialize(writer, "JPY");
                    return;
                case Waehrungscode.Kes:
                    serializer.Serialize(writer, "KES");
                    return;
                case Waehrungscode.Kgs:
                    serializer.Serialize(writer, "KGS");
                    return;
                case Waehrungscode.Khr:
                    serializer.Serialize(writer, "KHR");
                    return;
                case Waehrungscode.Kmf:
                    serializer.Serialize(writer, "KMF");
                    return;
                case Waehrungscode.Kpw:
                    serializer.Serialize(writer, "KPW");
                    return;
                case Waehrungscode.Krw:
                    serializer.Serialize(writer, "KRW");
                    return;
                case Waehrungscode.Kwd:
                    serializer.Serialize(writer, "KWD");
                    return;
                case Waehrungscode.Kyd:
                    serializer.Serialize(writer, "KYD");
                    return;
                case Waehrungscode.Kzt:
                    serializer.Serialize(writer, "KZT");
                    return;
                case Waehrungscode.Lak:
                    serializer.Serialize(writer, "LAK");
                    return;
                case Waehrungscode.Lbp:
                    serializer.Serialize(writer, "LBP");
                    return;
                case Waehrungscode.Lkr:
                    serializer.Serialize(writer, "LKR");
                    return;
                case Waehrungscode.Lrd:
                    serializer.Serialize(writer, "LRD");
                    return;
                case Waehrungscode.Lsl:
                    serializer.Serialize(writer, "LSL");
                    return;
                case Waehrungscode.Ltl:
                    serializer.Serialize(writer, "LTL");
                    return;
                case Waehrungscode.Lyd:
                    serializer.Serialize(writer, "LYD");
                    return;
                case Waehrungscode.Mad:
                    serializer.Serialize(writer, "MAD");
                    return;
                case Waehrungscode.Mdl:
                    serializer.Serialize(writer, "MDL");
                    return;
                case Waehrungscode.Mga:
                    serializer.Serialize(writer, "MGA");
                    return;
                case Waehrungscode.Mkd:
                    serializer.Serialize(writer, "MKD");
                    return;
                case Waehrungscode.Mmk:
                    serializer.Serialize(writer, "MMK");
                    return;
                case Waehrungscode.Mnt:
                    serializer.Serialize(writer, "MNT");
                    return;
                case Waehrungscode.Mop:
                    serializer.Serialize(writer, "MOP");
                    return;
                case Waehrungscode.Mro:
                    serializer.Serialize(writer, "MRO");
                    return;
                case Waehrungscode.Mur:
                    serializer.Serialize(writer, "MUR");
                    return;
                case Waehrungscode.Mvr:
                    serializer.Serialize(writer, "MVR");
                    return;
                case Waehrungscode.Mwk:
                    serializer.Serialize(writer, "MWK");
                    return;
                case Waehrungscode.Mxn:
                    serializer.Serialize(writer, "MXN");
                    return;
                case Waehrungscode.Mxv:
                    serializer.Serialize(writer, "MXV");
                    return;
                case Waehrungscode.Myr:
                    serializer.Serialize(writer, "MYR");
                    return;
                case Waehrungscode.Mzn:
                    serializer.Serialize(writer, "MZN");
                    return;
                case Waehrungscode.Nad:
                    serializer.Serialize(writer, "NAD");
                    return;
                case Waehrungscode.Ngn:
                    serializer.Serialize(writer, "NGN");
                    return;
                case Waehrungscode.Nio:
                    serializer.Serialize(writer, "NIO");
                    return;
                case Waehrungscode.Nok:
                    serializer.Serialize(writer, "NOK");
                    return;
                case Waehrungscode.Npr:
                    serializer.Serialize(writer, "NPR");
                    return;
                case Waehrungscode.Nzd:
                    serializer.Serialize(writer, "NZD");
                    return;
                case Waehrungscode.Omr:
                    serializer.Serialize(writer, "OMR");
                    return;
                case Waehrungscode.Pab:
                    serializer.Serialize(writer, "PAB");
                    return;
                case Waehrungscode.Pen:
                    serializer.Serialize(writer, "PEN");
                    return;
                case Waehrungscode.Pgk:
                    serializer.Serialize(writer, "PGK");
                    return;
                case Waehrungscode.Php:
                    serializer.Serialize(writer, "PHP");
                    return;
                case Waehrungscode.Pkr:
                    serializer.Serialize(writer, "PKR");
                    return;
                case Waehrungscode.Pln:
                    serializer.Serialize(writer, "PLN");
                    return;
                case Waehrungscode.Pyg:
                    serializer.Serialize(writer, "PYG");
                    return;
                case Waehrungscode.Qar:
                    serializer.Serialize(writer, "QAR");
                    return;
                case Waehrungscode.Ron:
                    serializer.Serialize(writer, "RON");
                    return;
                case Waehrungscode.Rsd:
                    serializer.Serialize(writer, "RSD");
                    return;
                case Waehrungscode.Rub:
                    serializer.Serialize(writer, "RUB");
                    return;
                case Waehrungscode.Rur:
                    serializer.Serialize(writer, "RUR");
                    return;
                case Waehrungscode.Rwf:
                    serializer.Serialize(writer, "RWF");
                    return;
                case Waehrungscode.Sar:
                    serializer.Serialize(writer, "SAR");
                    return;
                case Waehrungscode.Sbd:
                    serializer.Serialize(writer, "SBD");
                    return;
                case Waehrungscode.Scr:
                    serializer.Serialize(writer, "SCR");
                    return;
                case Waehrungscode.Sdg:
                    serializer.Serialize(writer, "SDG");
                    return;
                case Waehrungscode.Sek:
                    serializer.Serialize(writer, "SEK");
                    return;
                case Waehrungscode.Sgd:
                    serializer.Serialize(writer, "SGD");
                    return;
                case Waehrungscode.Shp:
                    serializer.Serialize(writer, "SHP");
                    return;
                case Waehrungscode.Sll:
                    serializer.Serialize(writer, "SLL");
                    return;
                case Waehrungscode.Sos:
                    serializer.Serialize(writer, "SOS");
                    return;
                case Waehrungscode.Srd:
                    serializer.Serialize(writer, "SRD");
                    return;
                case Waehrungscode.Ssp:
                    serializer.Serialize(writer, "SSP");
                    return;
                case Waehrungscode.Std:
                    serializer.Serialize(writer, "STD");
                    return;
                case Waehrungscode.Svc:
                    serializer.Serialize(writer, "SVC");
                    return;
                case Waehrungscode.Syp:
                    serializer.Serialize(writer, "SYP");
                    return;
                case Waehrungscode.Szl:
                    serializer.Serialize(writer, "SZL");
                    return;
                case Waehrungscode.Thb:
                    serializer.Serialize(writer, "THB");
                    return;
                case Waehrungscode.Tjs:
                    serializer.Serialize(writer, "TJS");
                    return;
                case Waehrungscode.Tmt:
                    serializer.Serialize(writer, "TMT");
                    return;
                case Waehrungscode.Tnd:
                    serializer.Serialize(writer, "TND");
                    return;
                case Waehrungscode.Top:
                    serializer.Serialize(writer, "TOP");
                    return;
                case Waehrungscode.Try:
                    serializer.Serialize(writer, "TRY");
                    return;
                case Waehrungscode.Ttd:
                    serializer.Serialize(writer, "TTD");
                    return;
                case Waehrungscode.Twd:
                    serializer.Serialize(writer, "TWD");
                    return;
                case Waehrungscode.Tzs:
                    serializer.Serialize(writer, "TZS");
                    return;
                case Waehrungscode.Uah:
                    serializer.Serialize(writer, "UAH");
                    return;
                case Waehrungscode.Ugx:
                    serializer.Serialize(writer, "UGX");
                    return;
                case Waehrungscode.Usd:
                    serializer.Serialize(writer, "USD");
                    return;
                case Waehrungscode.Usn:
                    serializer.Serialize(writer, "USN");
                    return;
                case Waehrungscode.Uss:
                    serializer.Serialize(writer, "USS");
                    return;
                case Waehrungscode.Uyi:
                    serializer.Serialize(writer, "UYI");
                    return;
                case Waehrungscode.Uyu:
                    serializer.Serialize(writer, "UYU");
                    return;
                case Waehrungscode.Uzs:
                    serializer.Serialize(writer, "UZS");
                    return;
                case Waehrungscode.Vef:
                    serializer.Serialize(writer, "VEF");
                    return;
                case Waehrungscode.Vnd:
                    serializer.Serialize(writer, "VND");
                    return;
                case Waehrungscode.Vuv:
                    serializer.Serialize(writer, "VUV");
                    return;
                case Waehrungscode.Wst:
                    serializer.Serialize(writer, "WST");
                    return;
                case Waehrungscode.Xaf:
                    serializer.Serialize(writer, "XAF");
                    return;
                case Waehrungscode.Xag:
                    serializer.Serialize(writer, "XAG");
                    return;
                case Waehrungscode.Xau:
                    serializer.Serialize(writer, "XAU");
                    return;
                case Waehrungscode.Xba:
                    serializer.Serialize(writer, "XBA");
                    return;
                case Waehrungscode.Xbb:
                    serializer.Serialize(writer, "XBB");
                    return;
                case Waehrungscode.Xbc:
                    serializer.Serialize(writer, "XBC");
                    return;
                case Waehrungscode.Xbd:
                    serializer.Serialize(writer, "XBD");
                    return;
                case Waehrungscode.Xcd:
                    serializer.Serialize(writer, "XCD");
                    return;
                case Waehrungscode.Xdr:
                    serializer.Serialize(writer, "XDR");
                    return;
                case Waehrungscode.Xof:
                    serializer.Serialize(writer, "XOF");
                    return;
                case Waehrungscode.Xpd:
                    serializer.Serialize(writer, "XPD");
                    return;
                case Waehrungscode.Xpf:
                    serializer.Serialize(writer, "XPF");
                    return;
                case Waehrungscode.Xpt:
                    serializer.Serialize(writer, "XPT");
                    return;
                case Waehrungscode.Xsu:
                    serializer.Serialize(writer, "XSU");
                    return;
                case Waehrungscode.Xts:
                    serializer.Serialize(writer, "XTS");
                    return;
                case Waehrungscode.Xua:
                    serializer.Serialize(writer, "XUA");
                    return;
                case Waehrungscode.Xxx:
                    serializer.Serialize(writer, "XXX");
                    return;
                case Waehrungscode.Yer:
                    serializer.Serialize(writer, "YER");
                    return;
                case Waehrungscode.Zar:
                    serializer.Serialize(writer, "ZAR");
                    return;
                case Waehrungscode.Zmw:
                    serializer.Serialize(writer, "ZMW");
                    return;
                case Waehrungscode.Zwl:
                    serializer.Serialize(writer, "ZWL");
                    return;
            }
            throw new Exception("Cannot marshal type Waehrungscode");
        }

        public static readonly WaehrungscodeConverter Singleton = new WaehrungscodeConverter();
    }

    internal class MengeneinheitConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Mengeneinheit) || t == typeof(Mengeneinheit?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "HALBJAHR":
                    return Mengeneinheit.Halbjahr;
                case "JAHR":
                    return Mengeneinheit.Jahr;
                case "KUBIKMETER":
                    return Mengeneinheit.Kubikmeter;
                case "KVAR":
                    return Mengeneinheit.Kvar;
                case "KVARH":
                    return Mengeneinheit.Kvarh;
                case "KW":
                    return Mengeneinheit.Kw;
                case "KWH":
                    return Mengeneinheit.Kwh;
                case "KWHK":
                    return Mengeneinheit.Kwhk;
                case "MINUTE":
                    return Mengeneinheit.Minute;
                case "MONAT":
                    return Mengeneinheit.Monat;
                case "MW":
                    return Mengeneinheit.Mw;
                case "MWH":
                    return Mengeneinheit.Mwh;
                case "PROZENT":
                    return Mengeneinheit.Prozent;
                case "QUARTAL":
                    return Mengeneinheit.Quartal;
                case "SEKUNDE":
                    return Mengeneinheit.Sekunde;
                case "STUECK":
                    return Mengeneinheit.Stueck;
                case "STUNDE":
                    return Mengeneinheit.Stunde;
                case "TAG":
                    return Mengeneinheit.Tag;
                case "VAR":
                    return Mengeneinheit.Var;
                case "VARH":
                    return Mengeneinheit.Varh;
                case "VIERTEL_STUNDE":
                    return Mengeneinheit.ViertelStunde;
                case "W":
                    return Mengeneinheit.W;
                case "WH":
                    return Mengeneinheit.Wh;
                case "WOCHE":
                    return Mengeneinheit.Woche;
            }
            throw new Exception("Cannot unmarshal type Mengeneinheit");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Mengeneinheit)untypedValue;
            switch (value)
            {
                case Mengeneinheit.Halbjahr:
                    serializer.Serialize(writer, "HALBJAHR");
                    return;
                case Mengeneinheit.Jahr:
                    serializer.Serialize(writer, "JAHR");
                    return;
                case Mengeneinheit.Kubikmeter:
                    serializer.Serialize(writer, "KUBIKMETER");
                    return;
                case Mengeneinheit.Kvar:
                    serializer.Serialize(writer, "KVAR");
                    return;
                case Mengeneinheit.Kvarh:
                    serializer.Serialize(writer, "KVARH");
                    return;
                case Mengeneinheit.Kw:
                    serializer.Serialize(writer, "KW");
                    return;
                case Mengeneinheit.Kwh:
                    serializer.Serialize(writer, "KWH");
                    return;
                case Mengeneinheit.Kwhk:
                    serializer.Serialize(writer, "KWHK");
                    return;
                case Mengeneinheit.Minute:
                    serializer.Serialize(writer, "MINUTE");
                    return;
                case Mengeneinheit.Monat:
                    serializer.Serialize(writer, "MONAT");
                    return;
                case Mengeneinheit.Mw:
                    serializer.Serialize(writer, "MW");
                    return;
                case Mengeneinheit.Mwh:
                    serializer.Serialize(writer, "MWH");
                    return;
                case Mengeneinheit.Prozent:
                    serializer.Serialize(writer, "PROZENT");
                    return;
                case Mengeneinheit.Quartal:
                    serializer.Serialize(writer, "QUARTAL");
                    return;
                case Mengeneinheit.Sekunde:
                    serializer.Serialize(writer, "SEKUNDE");
                    return;
                case Mengeneinheit.Stueck:
                    serializer.Serialize(writer, "STUECK");
                    return;
                case Mengeneinheit.Stunde:
                    serializer.Serialize(writer, "STUNDE");
                    return;
                case Mengeneinheit.Tag:
                    serializer.Serialize(writer, "TAG");
                    return;
                case Mengeneinheit.Var:
                    serializer.Serialize(writer, "VAR");
                    return;
                case Mengeneinheit.Varh:
                    serializer.Serialize(writer, "VARH");
                    return;
                case Mengeneinheit.ViertelStunde:
                    serializer.Serialize(writer, "VIERTEL_STUNDE");
                    return;
                case Mengeneinheit.W:
                    serializer.Serialize(writer, "W");
                    return;
                case Mengeneinheit.Wh:
                    serializer.Serialize(writer, "WH");
                    return;
                case Mengeneinheit.Woche:
                    serializer.Serialize(writer, "WOCHE");
                    return;
            }
            throw new Exception("Cannot marshal type Mengeneinheit");
        }

        public static readonly MengeneinheitConverter Singleton = new MengeneinheitConverter();
    }

    internal class WaehrungseinheitConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Waehrungseinheit) || t == typeof(Waehrungseinheit?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "CT":
                    return Waehrungseinheit.Ct;
                case "EUR":
                    return Waehrungseinheit.Eur;
            }
            throw new Exception("Cannot unmarshal type Waehrungseinheit");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Waehrungseinheit)untypedValue;
            switch (value)
            {
                case Waehrungseinheit.Ct:
                    serializer.Serialize(writer, "CT");
                    return;
                case Waehrungseinheit.Eur:
                    serializer.Serialize(writer, "EUR");
                    return;
            }
            throw new Exception("Cannot marshal type Waehrungseinheit");
        }

        public static readonly WaehrungseinheitConverter Singleton = new WaehrungseinheitConverter();
    }

    internal class PreisstatusConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Preisstatus) || t == typeof(Preisstatus?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ENDGUELTIG":
                    return Preisstatus.Endgueltig;
                case "VORLAEUFIG":
                    return Preisstatus.Vorlaeufig;
            }
            throw new Exception("Cannot unmarshal type Preisstatus");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Preisstatus)untypedValue;
            switch (value)
            {
                case Preisstatus.Endgueltig:
                    serializer.Serialize(writer, "ENDGUELTIG");
                    return;
                case Preisstatus.Vorlaeufig:
                    serializer.Serialize(writer, "VORLAEUFIG");
                    return;
            }
            throw new Exception("Cannot marshal type Preisstatus");
        }

        public static readonly PreisstatusConverter Singleton = new PreisstatusConverter();
    }
}
