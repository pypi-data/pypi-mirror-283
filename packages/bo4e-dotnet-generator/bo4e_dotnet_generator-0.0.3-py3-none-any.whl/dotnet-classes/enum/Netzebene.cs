// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var netzebene = Netzebene.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Auflistung m√∂glicher Netzebenen innerhalb der Energiearten Strom und Gas.
    /// </summary>
    public enum NetzebeneEnum { Hd, Hsp, HspMspUmsp, Hss, HssHspUmsp, Md, Msp, MspNspUmsp, Nd, Nsp };

    public class Netzebene
    {
        public static NetzebeneEnum FromJson(string json) => JsonConvert.DeserializeObject<NetzebeneEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this NetzebeneEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                NetzebeneEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class NetzebeneEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(NetzebeneEnum) || t == typeof(NetzebeneEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "HD":
                    return NetzebeneEnum.Hd;
                case "HSP":
                    return NetzebeneEnum.Hsp;
                case "HSP_MSP_UMSP":
                    return NetzebeneEnum.HspMspUmsp;
                case "HSS":
                    return NetzebeneEnum.Hss;
                case "HSS_HSP_UMSP":
                    return NetzebeneEnum.HssHspUmsp;
                case "MD":
                    return NetzebeneEnum.Md;
                case "MSP":
                    return NetzebeneEnum.Msp;
                case "MSP_NSP_UMSP":
                    return NetzebeneEnum.MspNspUmsp;
                case "ND":
                    return NetzebeneEnum.Nd;
                case "NSP":
                    return NetzebeneEnum.Nsp;
            }
            throw new Exception("Cannot unmarshal type NetzebeneEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (NetzebeneEnum)untypedValue;
            switch (value)
            {
                case NetzebeneEnum.Hd:
                    serializer.Serialize(writer, "HD");
                    return;
                case NetzebeneEnum.Hsp:
                    serializer.Serialize(writer, "HSP");
                    return;
                case NetzebeneEnum.HspMspUmsp:
                    serializer.Serialize(writer, "HSP_MSP_UMSP");
                    return;
                case NetzebeneEnum.Hss:
                    serializer.Serialize(writer, "HSS");
                    return;
                case NetzebeneEnum.HssHspUmsp:
                    serializer.Serialize(writer, "HSS_HSP_UMSP");
                    return;
                case NetzebeneEnum.Md:
                    serializer.Serialize(writer, "MD");
                    return;
                case NetzebeneEnum.Msp:
                    serializer.Serialize(writer, "MSP");
                    return;
                case NetzebeneEnum.MspNspUmsp:
                    serializer.Serialize(writer, "MSP_NSP_UMSP");
                    return;
                case NetzebeneEnum.Nd:
                    serializer.Serialize(writer, "ND");
                    return;
                case NetzebeneEnum.Nsp:
                    serializer.Serialize(writer, "NSP");
                    return;
            }
            throw new Exception("Cannot marshal type NetzebeneEnum");
        }

        public static readonly NetzebeneEnumConverter Singleton = new NetzebeneEnumConverter();
    }
}
