// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var landescode = Landescode.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public enum LandescodeEnum { Ad, Ae, Af, Ag, Ai, Al, Am, Ao, Aq, Ar, As, At, Au, Aw, Ax, Az, Ba, Bb, Bd, Be, Bf, Bg, Bh, Bi, Bj, Bl, Bm, Bn, Bo, Bq, Br, Bs, Bt, Bv, Bw, By, Bz, Ca, Cc, Cd, Cf, Cg, Ch, Ci, Ck, Cl, Cm, Cn, Co, Cr, Cu, Cv, Cw, Cx, Cy, Cz, De, Dj, Dk, Dm, Do, Dz, Ec, Ee, Eg, Eh, Er, Es, Et, Fi, Fj, Fk, Fm, Fo, Fr, Ga, Gb, Gd, Ge, Gf, Gg, Gh, Gi, Gl, Gm, Gn, Gp, Gq, Gr, Gs, Gt, Gu, Gw, Gy, Hk, Hm, Hn, Hr, Ht, Hu, Id, Ie, Il, Im, In, Io, Iq, Ir, Is, It, Je, Jm, Jo, Jp, Ke, Kg, Kh, Ki, Km, Kn, Kp, Kr, Kw, Ky, Kz, La, Lb, Lc, Li, Lk, Lr, Ls, Lt, Lu, Lv, Ly, Ma, Mc, Md, Me, Mf, Mg, Mh, Mk, Ml, Mm, Mn, Mo, Mp, Mq, Mr, Ms, Mt, Mu, Mv, Mw, Mx, My, Mz, Na, Nc, Ne, Nf, Ng, Ni, Nl, No, Np, Nr, Nu, Nz, Om, Pa, Pe, Pf, Pg, Ph, Pk, Pl, Pm, Pn, Pr, Ps, Pt, Pw, Py, Qa, Re, Ro, Rs, Ru, Rw, Sa, Sb, Sc, Sd, Se, Sg, Sh, Si, Sj, Sk, Sl, Sm, Sn, So, Sr, Ss, St, Sv, Sx, Sy, Sz, Tc, Td, Tf, Tg, Th, Tj, Tk, Tl, Tm, Tn, To, Tr, Tt, Tv, Tw, Tz, Ua, Ug, Um, Us, Uy, Uz, Va, Vc, Ve, Vg, Vi, Vn, Vu, Wf, Ws, Xk, Ye, Yt, Za, Zm, Zw };

    public class Landescode
    {
        public static LandescodeEnum FromJson(string json) => JsonConvert.DeserializeObject<LandescodeEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this LandescodeEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                LandescodeEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class LandescodeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(LandescodeEnum) || t == typeof(LandescodeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "AD":
                    return LandescodeEnum.Ad;
                case "AE":
                    return LandescodeEnum.Ae;
                case "AF":
                    return LandescodeEnum.Af;
                case "AG":
                    return LandescodeEnum.Ag;
                case "AI":
                    return LandescodeEnum.Ai;
                case "AL":
                    return LandescodeEnum.Al;
                case "AM":
                    return LandescodeEnum.Am;
                case "AO":
                    return LandescodeEnum.Ao;
                case "AQ":
                    return LandescodeEnum.Aq;
                case "AR":
                    return LandescodeEnum.Ar;
                case "AS":
                    return LandescodeEnum.As;
                case "AT":
                    return LandescodeEnum.At;
                case "AU":
                    return LandescodeEnum.Au;
                case "AW":
                    return LandescodeEnum.Aw;
                case "AX":
                    return LandescodeEnum.Ax;
                case "AZ":
                    return LandescodeEnum.Az;
                case "BA":
                    return LandescodeEnum.Ba;
                case "BB":
                    return LandescodeEnum.Bb;
                case "BD":
                    return LandescodeEnum.Bd;
                case "BE":
                    return LandescodeEnum.Be;
                case "BF":
                    return LandescodeEnum.Bf;
                case "BG":
                    return LandescodeEnum.Bg;
                case "BH":
                    return LandescodeEnum.Bh;
                case "BI":
                    return LandescodeEnum.Bi;
                case "BJ":
                    return LandescodeEnum.Bj;
                case "BL":
                    return LandescodeEnum.Bl;
                case "BM":
                    return LandescodeEnum.Bm;
                case "BN":
                    return LandescodeEnum.Bn;
                case "BO":
                    return LandescodeEnum.Bo;
                case "BQ":
                    return LandescodeEnum.Bq;
                case "BR":
                    return LandescodeEnum.Br;
                case "BS":
                    return LandescodeEnum.Bs;
                case "BT":
                    return LandescodeEnum.Bt;
                case "BV":
                    return LandescodeEnum.Bv;
                case "BW":
                    return LandescodeEnum.Bw;
                case "BY":
                    return LandescodeEnum.By;
                case "BZ":
                    return LandescodeEnum.Bz;
                case "CA":
                    return LandescodeEnum.Ca;
                case "CC":
                    return LandescodeEnum.Cc;
                case "CD":
                    return LandescodeEnum.Cd;
                case "CF":
                    return LandescodeEnum.Cf;
                case "CG":
                    return LandescodeEnum.Cg;
                case "CH":
                    return LandescodeEnum.Ch;
                case "CI":
                    return LandescodeEnum.Ci;
                case "CK":
                    return LandescodeEnum.Ck;
                case "CL":
                    return LandescodeEnum.Cl;
                case "CM":
                    return LandescodeEnum.Cm;
                case "CN":
                    return LandescodeEnum.Cn;
                case "CO":
                    return LandescodeEnum.Co;
                case "CR":
                    return LandescodeEnum.Cr;
                case "CU":
                    return LandescodeEnum.Cu;
                case "CV":
                    return LandescodeEnum.Cv;
                case "CW":
                    return LandescodeEnum.Cw;
                case "CX":
                    return LandescodeEnum.Cx;
                case "CY":
                    return LandescodeEnum.Cy;
                case "CZ":
                    return LandescodeEnum.Cz;
                case "DE":
                    return LandescodeEnum.De;
                case "DJ":
                    return LandescodeEnum.Dj;
                case "DK":
                    return LandescodeEnum.Dk;
                case "DM":
                    return LandescodeEnum.Dm;
                case "DO":
                    return LandescodeEnum.Do;
                case "DZ":
                    return LandescodeEnum.Dz;
                case "EC":
                    return LandescodeEnum.Ec;
                case "EE":
                    return LandescodeEnum.Ee;
                case "EG":
                    return LandescodeEnum.Eg;
                case "EH":
                    return LandescodeEnum.Eh;
                case "ER":
                    return LandescodeEnum.Er;
                case "ES":
                    return LandescodeEnum.Es;
                case "ET":
                    return LandescodeEnum.Et;
                case "FI":
                    return LandescodeEnum.Fi;
                case "FJ":
                    return LandescodeEnum.Fj;
                case "FK":
                    return LandescodeEnum.Fk;
                case "FM":
                    return LandescodeEnum.Fm;
                case "FO":
                    return LandescodeEnum.Fo;
                case "FR":
                    return LandescodeEnum.Fr;
                case "GA":
                    return LandescodeEnum.Ga;
                case "GB":
                    return LandescodeEnum.Gb;
                case "GD":
                    return LandescodeEnum.Gd;
                case "GE":
                    return LandescodeEnum.Ge;
                case "GF":
                    return LandescodeEnum.Gf;
                case "GG":
                    return LandescodeEnum.Gg;
                case "GH":
                    return LandescodeEnum.Gh;
                case "GI":
                    return LandescodeEnum.Gi;
                case "GL":
                    return LandescodeEnum.Gl;
                case "GM":
                    return LandescodeEnum.Gm;
                case "GN":
                    return LandescodeEnum.Gn;
                case "GP":
                    return LandescodeEnum.Gp;
                case "GQ":
                    return LandescodeEnum.Gq;
                case "GR":
                    return LandescodeEnum.Gr;
                case "GS":
                    return LandescodeEnum.Gs;
                case "GT":
                    return LandescodeEnum.Gt;
                case "GU":
                    return LandescodeEnum.Gu;
                case "GW":
                    return LandescodeEnum.Gw;
                case "GY":
                    return LandescodeEnum.Gy;
                case "HK":
                    return LandescodeEnum.Hk;
                case "HM":
                    return LandescodeEnum.Hm;
                case "HN":
                    return LandescodeEnum.Hn;
                case "HR":
                    return LandescodeEnum.Hr;
                case "HT":
                    return LandescodeEnum.Ht;
                case "HU":
                    return LandescodeEnum.Hu;
                case "ID":
                    return LandescodeEnum.Id;
                case "IE":
                    return LandescodeEnum.Ie;
                case "IL":
                    return LandescodeEnum.Il;
                case "IM":
                    return LandescodeEnum.Im;
                case "IN":
                    return LandescodeEnum.In;
                case "IO":
                    return LandescodeEnum.Io;
                case "IQ":
                    return LandescodeEnum.Iq;
                case "IR":
                    return LandescodeEnum.Ir;
                case "IS":
                    return LandescodeEnum.Is;
                case "IT":
                    return LandescodeEnum.It;
                case "JE":
                    return LandescodeEnum.Je;
                case "JM":
                    return LandescodeEnum.Jm;
                case "JO":
                    return LandescodeEnum.Jo;
                case "JP":
                    return LandescodeEnum.Jp;
                case "KE":
                    return LandescodeEnum.Ke;
                case "KG":
                    return LandescodeEnum.Kg;
                case "KH":
                    return LandescodeEnum.Kh;
                case "KI":
                    return LandescodeEnum.Ki;
                case "KM":
                    return LandescodeEnum.Km;
                case "KN":
                    return LandescodeEnum.Kn;
                case "KP":
                    return LandescodeEnum.Kp;
                case "KR":
                    return LandescodeEnum.Kr;
                case "KW":
                    return LandescodeEnum.Kw;
                case "KY":
                    return LandescodeEnum.Ky;
                case "KZ":
                    return LandescodeEnum.Kz;
                case "LA":
                    return LandescodeEnum.La;
                case "LB":
                    return LandescodeEnum.Lb;
                case "LC":
                    return LandescodeEnum.Lc;
                case "LI":
                    return LandescodeEnum.Li;
                case "LK":
                    return LandescodeEnum.Lk;
                case "LR":
                    return LandescodeEnum.Lr;
                case "LS":
                    return LandescodeEnum.Ls;
                case "LT":
                    return LandescodeEnum.Lt;
                case "LU":
                    return LandescodeEnum.Lu;
                case "LV":
                    return LandescodeEnum.Lv;
                case "LY":
                    return LandescodeEnum.Ly;
                case "MA":
                    return LandescodeEnum.Ma;
                case "MC":
                    return LandescodeEnum.Mc;
                case "MD":
                    return LandescodeEnum.Md;
                case "ME":
                    return LandescodeEnum.Me;
                case "MF":
                    return LandescodeEnum.Mf;
                case "MG":
                    return LandescodeEnum.Mg;
                case "MH":
                    return LandescodeEnum.Mh;
                case "MK":
                    return LandescodeEnum.Mk;
                case "ML":
                    return LandescodeEnum.Ml;
                case "MM":
                    return LandescodeEnum.Mm;
                case "MN":
                    return LandescodeEnum.Mn;
                case "MO":
                    return LandescodeEnum.Mo;
                case "MP":
                    return LandescodeEnum.Mp;
                case "MQ":
                    return LandescodeEnum.Mq;
                case "MR":
                    return LandescodeEnum.Mr;
                case "MS":
                    return LandescodeEnum.Ms;
                case "MT":
                    return LandescodeEnum.Mt;
                case "MU":
                    return LandescodeEnum.Mu;
                case "MV":
                    return LandescodeEnum.Mv;
                case "MW":
                    return LandescodeEnum.Mw;
                case "MX":
                    return LandescodeEnum.Mx;
                case "MY":
                    return LandescodeEnum.My;
                case "MZ":
                    return LandescodeEnum.Mz;
                case "NA":
                    return LandescodeEnum.Na;
                case "NC":
                    return LandescodeEnum.Nc;
                case "NE":
                    return LandescodeEnum.Ne;
                case "NF":
                    return LandescodeEnum.Nf;
                case "NG":
                    return LandescodeEnum.Ng;
                case "NI":
                    return LandescodeEnum.Ni;
                case "NL":
                    return LandescodeEnum.Nl;
                case "NO":
                    return LandescodeEnum.No;
                case "NP":
                    return LandescodeEnum.Np;
                case "NR":
                    return LandescodeEnum.Nr;
                case "NU":
                    return LandescodeEnum.Nu;
                case "NZ":
                    return LandescodeEnum.Nz;
                case "OM":
                    return LandescodeEnum.Om;
                case "PA":
                    return LandescodeEnum.Pa;
                case "PE":
                    return LandescodeEnum.Pe;
                case "PF":
                    return LandescodeEnum.Pf;
                case "PG":
                    return LandescodeEnum.Pg;
                case "PH":
                    return LandescodeEnum.Ph;
                case "PK":
                    return LandescodeEnum.Pk;
                case "PL":
                    return LandescodeEnum.Pl;
                case "PM":
                    return LandescodeEnum.Pm;
                case "PN":
                    return LandescodeEnum.Pn;
                case "PR":
                    return LandescodeEnum.Pr;
                case "PS":
                    return LandescodeEnum.Ps;
                case "PT":
                    return LandescodeEnum.Pt;
                case "PW":
                    return LandescodeEnum.Pw;
                case "PY":
                    return LandescodeEnum.Py;
                case "QA":
                    return LandescodeEnum.Qa;
                case "RE":
                    return LandescodeEnum.Re;
                case "RO":
                    return LandescodeEnum.Ro;
                case "RS":
                    return LandescodeEnum.Rs;
                case "RU":
                    return LandescodeEnum.Ru;
                case "RW":
                    return LandescodeEnum.Rw;
                case "SA":
                    return LandescodeEnum.Sa;
                case "SB":
                    return LandescodeEnum.Sb;
                case "SC":
                    return LandescodeEnum.Sc;
                case "SD":
                    return LandescodeEnum.Sd;
                case "SE":
                    return LandescodeEnum.Se;
                case "SG":
                    return LandescodeEnum.Sg;
                case "SH":
                    return LandescodeEnum.Sh;
                case "SI":
                    return LandescodeEnum.Si;
                case "SJ":
                    return LandescodeEnum.Sj;
                case "SK":
                    return LandescodeEnum.Sk;
                case "SL":
                    return LandescodeEnum.Sl;
                case "SM":
                    return LandescodeEnum.Sm;
                case "SN":
                    return LandescodeEnum.Sn;
                case "SO":
                    return LandescodeEnum.So;
                case "SR":
                    return LandescodeEnum.Sr;
                case "SS":
                    return LandescodeEnum.Ss;
                case "ST":
                    return LandescodeEnum.St;
                case "SV":
                    return LandescodeEnum.Sv;
                case "SX":
                    return LandescodeEnum.Sx;
                case "SY":
                    return LandescodeEnum.Sy;
                case "SZ":
                    return LandescodeEnum.Sz;
                case "TC":
                    return LandescodeEnum.Tc;
                case "TD":
                    return LandescodeEnum.Td;
                case "TF":
                    return LandescodeEnum.Tf;
                case "TG":
                    return LandescodeEnum.Tg;
                case "TH":
                    return LandescodeEnum.Th;
                case "TJ":
                    return LandescodeEnum.Tj;
                case "TK":
                    return LandescodeEnum.Tk;
                case "TL":
                    return LandescodeEnum.Tl;
                case "TM":
                    return LandescodeEnum.Tm;
                case "TN":
                    return LandescodeEnum.Tn;
                case "TO":
                    return LandescodeEnum.To;
                case "TR":
                    return LandescodeEnum.Tr;
                case "TT":
                    return LandescodeEnum.Tt;
                case "TV":
                    return LandescodeEnum.Tv;
                case "TW":
                    return LandescodeEnum.Tw;
                case "TZ":
                    return LandescodeEnum.Tz;
                case "UA":
                    return LandescodeEnum.Ua;
                case "UG":
                    return LandescodeEnum.Ug;
                case "UM":
                    return LandescodeEnum.Um;
                case "US":
                    return LandescodeEnum.Us;
                case "UY":
                    return LandescodeEnum.Uy;
                case "UZ":
                    return LandescodeEnum.Uz;
                case "VA":
                    return LandescodeEnum.Va;
                case "VC":
                    return LandescodeEnum.Vc;
                case "VE":
                    return LandescodeEnum.Ve;
                case "VG":
                    return LandescodeEnum.Vg;
                case "VI":
                    return LandescodeEnum.Vi;
                case "VN":
                    return LandescodeEnum.Vn;
                case "VU":
                    return LandescodeEnum.Vu;
                case "WF":
                    return LandescodeEnum.Wf;
                case "WS":
                    return LandescodeEnum.Ws;
                case "XK":
                    return LandescodeEnum.Xk;
                case "YE":
                    return LandescodeEnum.Ye;
                case "YT":
                    return LandescodeEnum.Yt;
                case "ZA":
                    return LandescodeEnum.Za;
                case "ZM":
                    return LandescodeEnum.Zm;
                case "ZW":
                    return LandescodeEnum.Zw;
            }
            throw new Exception("Cannot unmarshal type LandescodeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (LandescodeEnum)untypedValue;
            switch (value)
            {
                case LandescodeEnum.Ad:
                    serializer.Serialize(writer, "AD");
                    return;
                case LandescodeEnum.Ae:
                    serializer.Serialize(writer, "AE");
                    return;
                case LandescodeEnum.Af:
                    serializer.Serialize(writer, "AF");
                    return;
                case LandescodeEnum.Ag:
                    serializer.Serialize(writer, "AG");
                    return;
                case LandescodeEnum.Ai:
                    serializer.Serialize(writer, "AI");
                    return;
                case LandescodeEnum.Al:
                    serializer.Serialize(writer, "AL");
                    return;
                case LandescodeEnum.Am:
                    serializer.Serialize(writer, "AM");
                    return;
                case LandescodeEnum.Ao:
                    serializer.Serialize(writer, "AO");
                    return;
                case LandescodeEnum.Aq:
                    serializer.Serialize(writer, "AQ");
                    return;
                case LandescodeEnum.Ar:
                    serializer.Serialize(writer, "AR");
                    return;
                case LandescodeEnum.As:
                    serializer.Serialize(writer, "AS");
                    return;
                case LandescodeEnum.At:
                    serializer.Serialize(writer, "AT");
                    return;
                case LandescodeEnum.Au:
                    serializer.Serialize(writer, "AU");
                    return;
                case LandescodeEnum.Aw:
                    serializer.Serialize(writer, "AW");
                    return;
                case LandescodeEnum.Ax:
                    serializer.Serialize(writer, "AX");
                    return;
                case LandescodeEnum.Az:
                    serializer.Serialize(writer, "AZ");
                    return;
                case LandescodeEnum.Ba:
                    serializer.Serialize(writer, "BA");
                    return;
                case LandescodeEnum.Bb:
                    serializer.Serialize(writer, "BB");
                    return;
                case LandescodeEnum.Bd:
                    serializer.Serialize(writer, "BD");
                    return;
                case LandescodeEnum.Be:
                    serializer.Serialize(writer, "BE");
                    return;
                case LandescodeEnum.Bf:
                    serializer.Serialize(writer, "BF");
                    return;
                case LandescodeEnum.Bg:
                    serializer.Serialize(writer, "BG");
                    return;
                case LandescodeEnum.Bh:
                    serializer.Serialize(writer, "BH");
                    return;
                case LandescodeEnum.Bi:
                    serializer.Serialize(writer, "BI");
                    return;
                case LandescodeEnum.Bj:
                    serializer.Serialize(writer, "BJ");
                    return;
                case LandescodeEnum.Bl:
                    serializer.Serialize(writer, "BL");
                    return;
                case LandescodeEnum.Bm:
                    serializer.Serialize(writer, "BM");
                    return;
                case LandescodeEnum.Bn:
                    serializer.Serialize(writer, "BN");
                    return;
                case LandescodeEnum.Bo:
                    serializer.Serialize(writer, "BO");
                    return;
                case LandescodeEnum.Bq:
                    serializer.Serialize(writer, "BQ");
                    return;
                case LandescodeEnum.Br:
                    serializer.Serialize(writer, "BR");
                    return;
                case LandescodeEnum.Bs:
                    serializer.Serialize(writer, "BS");
                    return;
                case LandescodeEnum.Bt:
                    serializer.Serialize(writer, "BT");
                    return;
                case LandescodeEnum.Bv:
                    serializer.Serialize(writer, "BV");
                    return;
                case LandescodeEnum.Bw:
                    serializer.Serialize(writer, "BW");
                    return;
                case LandescodeEnum.By:
                    serializer.Serialize(writer, "BY");
                    return;
                case LandescodeEnum.Bz:
                    serializer.Serialize(writer, "BZ");
                    return;
                case LandescodeEnum.Ca:
                    serializer.Serialize(writer, "CA");
                    return;
                case LandescodeEnum.Cc:
                    serializer.Serialize(writer, "CC");
                    return;
                case LandescodeEnum.Cd:
                    serializer.Serialize(writer, "CD");
                    return;
                case LandescodeEnum.Cf:
                    serializer.Serialize(writer, "CF");
                    return;
                case LandescodeEnum.Cg:
                    serializer.Serialize(writer, "CG");
                    return;
                case LandescodeEnum.Ch:
                    serializer.Serialize(writer, "CH");
                    return;
                case LandescodeEnum.Ci:
                    serializer.Serialize(writer, "CI");
                    return;
                case LandescodeEnum.Ck:
                    serializer.Serialize(writer, "CK");
                    return;
                case LandescodeEnum.Cl:
                    serializer.Serialize(writer, "CL");
                    return;
                case LandescodeEnum.Cm:
                    serializer.Serialize(writer, "CM");
                    return;
                case LandescodeEnum.Cn:
                    serializer.Serialize(writer, "CN");
                    return;
                case LandescodeEnum.Co:
                    serializer.Serialize(writer, "CO");
                    return;
                case LandescodeEnum.Cr:
                    serializer.Serialize(writer, "CR");
                    return;
                case LandescodeEnum.Cu:
                    serializer.Serialize(writer, "CU");
                    return;
                case LandescodeEnum.Cv:
                    serializer.Serialize(writer, "CV");
                    return;
                case LandescodeEnum.Cw:
                    serializer.Serialize(writer, "CW");
                    return;
                case LandescodeEnum.Cx:
                    serializer.Serialize(writer, "CX");
                    return;
                case LandescodeEnum.Cy:
                    serializer.Serialize(writer, "CY");
                    return;
                case LandescodeEnum.Cz:
                    serializer.Serialize(writer, "CZ");
                    return;
                case LandescodeEnum.De:
                    serializer.Serialize(writer, "DE");
                    return;
                case LandescodeEnum.Dj:
                    serializer.Serialize(writer, "DJ");
                    return;
                case LandescodeEnum.Dk:
                    serializer.Serialize(writer, "DK");
                    return;
                case LandescodeEnum.Dm:
                    serializer.Serialize(writer, "DM");
                    return;
                case LandescodeEnum.Do:
                    serializer.Serialize(writer, "DO");
                    return;
                case LandescodeEnum.Dz:
                    serializer.Serialize(writer, "DZ");
                    return;
                case LandescodeEnum.Ec:
                    serializer.Serialize(writer, "EC");
                    return;
                case LandescodeEnum.Ee:
                    serializer.Serialize(writer, "EE");
                    return;
                case LandescodeEnum.Eg:
                    serializer.Serialize(writer, "EG");
                    return;
                case LandescodeEnum.Eh:
                    serializer.Serialize(writer, "EH");
                    return;
                case LandescodeEnum.Er:
                    serializer.Serialize(writer, "ER");
                    return;
                case LandescodeEnum.Es:
                    serializer.Serialize(writer, "ES");
                    return;
                case LandescodeEnum.Et:
                    serializer.Serialize(writer, "ET");
                    return;
                case LandescodeEnum.Fi:
                    serializer.Serialize(writer, "FI");
                    return;
                case LandescodeEnum.Fj:
                    serializer.Serialize(writer, "FJ");
                    return;
                case LandescodeEnum.Fk:
                    serializer.Serialize(writer, "FK");
                    return;
                case LandescodeEnum.Fm:
                    serializer.Serialize(writer, "FM");
                    return;
                case LandescodeEnum.Fo:
                    serializer.Serialize(writer, "FO");
                    return;
                case LandescodeEnum.Fr:
                    serializer.Serialize(writer, "FR");
                    return;
                case LandescodeEnum.Ga:
                    serializer.Serialize(writer, "GA");
                    return;
                case LandescodeEnum.Gb:
                    serializer.Serialize(writer, "GB");
                    return;
                case LandescodeEnum.Gd:
                    serializer.Serialize(writer, "GD");
                    return;
                case LandescodeEnum.Ge:
                    serializer.Serialize(writer, "GE");
                    return;
                case LandescodeEnum.Gf:
                    serializer.Serialize(writer, "GF");
                    return;
                case LandescodeEnum.Gg:
                    serializer.Serialize(writer, "GG");
                    return;
                case LandescodeEnum.Gh:
                    serializer.Serialize(writer, "GH");
                    return;
                case LandescodeEnum.Gi:
                    serializer.Serialize(writer, "GI");
                    return;
                case LandescodeEnum.Gl:
                    serializer.Serialize(writer, "GL");
                    return;
                case LandescodeEnum.Gm:
                    serializer.Serialize(writer, "GM");
                    return;
                case LandescodeEnum.Gn:
                    serializer.Serialize(writer, "GN");
                    return;
                case LandescodeEnum.Gp:
                    serializer.Serialize(writer, "GP");
                    return;
                case LandescodeEnum.Gq:
                    serializer.Serialize(writer, "GQ");
                    return;
                case LandescodeEnum.Gr:
                    serializer.Serialize(writer, "GR");
                    return;
                case LandescodeEnum.Gs:
                    serializer.Serialize(writer, "GS");
                    return;
                case LandescodeEnum.Gt:
                    serializer.Serialize(writer, "GT");
                    return;
                case LandescodeEnum.Gu:
                    serializer.Serialize(writer, "GU");
                    return;
                case LandescodeEnum.Gw:
                    serializer.Serialize(writer, "GW");
                    return;
                case LandescodeEnum.Gy:
                    serializer.Serialize(writer, "GY");
                    return;
                case LandescodeEnum.Hk:
                    serializer.Serialize(writer, "HK");
                    return;
                case LandescodeEnum.Hm:
                    serializer.Serialize(writer, "HM");
                    return;
                case LandescodeEnum.Hn:
                    serializer.Serialize(writer, "HN");
                    return;
                case LandescodeEnum.Hr:
                    serializer.Serialize(writer, "HR");
                    return;
                case LandescodeEnum.Ht:
                    serializer.Serialize(writer, "HT");
                    return;
                case LandescodeEnum.Hu:
                    serializer.Serialize(writer, "HU");
                    return;
                case LandescodeEnum.Id:
                    serializer.Serialize(writer, "ID");
                    return;
                case LandescodeEnum.Ie:
                    serializer.Serialize(writer, "IE");
                    return;
                case LandescodeEnum.Il:
                    serializer.Serialize(writer, "IL");
                    return;
                case LandescodeEnum.Im:
                    serializer.Serialize(writer, "IM");
                    return;
                case LandescodeEnum.In:
                    serializer.Serialize(writer, "IN");
                    return;
                case LandescodeEnum.Io:
                    serializer.Serialize(writer, "IO");
                    return;
                case LandescodeEnum.Iq:
                    serializer.Serialize(writer, "IQ");
                    return;
                case LandescodeEnum.Ir:
                    serializer.Serialize(writer, "IR");
                    return;
                case LandescodeEnum.Is:
                    serializer.Serialize(writer, "IS");
                    return;
                case LandescodeEnum.It:
                    serializer.Serialize(writer, "IT");
                    return;
                case LandescodeEnum.Je:
                    serializer.Serialize(writer, "JE");
                    return;
                case LandescodeEnum.Jm:
                    serializer.Serialize(writer, "JM");
                    return;
                case LandescodeEnum.Jo:
                    serializer.Serialize(writer, "JO");
                    return;
                case LandescodeEnum.Jp:
                    serializer.Serialize(writer, "JP");
                    return;
                case LandescodeEnum.Ke:
                    serializer.Serialize(writer, "KE");
                    return;
                case LandescodeEnum.Kg:
                    serializer.Serialize(writer, "KG");
                    return;
                case LandescodeEnum.Kh:
                    serializer.Serialize(writer, "KH");
                    return;
                case LandescodeEnum.Ki:
                    serializer.Serialize(writer, "KI");
                    return;
                case LandescodeEnum.Km:
                    serializer.Serialize(writer, "KM");
                    return;
                case LandescodeEnum.Kn:
                    serializer.Serialize(writer, "KN");
                    return;
                case LandescodeEnum.Kp:
                    serializer.Serialize(writer, "KP");
                    return;
                case LandescodeEnum.Kr:
                    serializer.Serialize(writer, "KR");
                    return;
                case LandescodeEnum.Kw:
                    serializer.Serialize(writer, "KW");
                    return;
                case LandescodeEnum.Ky:
                    serializer.Serialize(writer, "KY");
                    return;
                case LandescodeEnum.Kz:
                    serializer.Serialize(writer, "KZ");
                    return;
                case LandescodeEnum.La:
                    serializer.Serialize(writer, "LA");
                    return;
                case LandescodeEnum.Lb:
                    serializer.Serialize(writer, "LB");
                    return;
                case LandescodeEnum.Lc:
                    serializer.Serialize(writer, "LC");
                    return;
                case LandescodeEnum.Li:
                    serializer.Serialize(writer, "LI");
                    return;
                case LandescodeEnum.Lk:
                    serializer.Serialize(writer, "LK");
                    return;
                case LandescodeEnum.Lr:
                    serializer.Serialize(writer, "LR");
                    return;
                case LandescodeEnum.Ls:
                    serializer.Serialize(writer, "LS");
                    return;
                case LandescodeEnum.Lt:
                    serializer.Serialize(writer, "LT");
                    return;
                case LandescodeEnum.Lu:
                    serializer.Serialize(writer, "LU");
                    return;
                case LandescodeEnum.Lv:
                    serializer.Serialize(writer, "LV");
                    return;
                case LandescodeEnum.Ly:
                    serializer.Serialize(writer, "LY");
                    return;
                case LandescodeEnum.Ma:
                    serializer.Serialize(writer, "MA");
                    return;
                case LandescodeEnum.Mc:
                    serializer.Serialize(writer, "MC");
                    return;
                case LandescodeEnum.Md:
                    serializer.Serialize(writer, "MD");
                    return;
                case LandescodeEnum.Me:
                    serializer.Serialize(writer, "ME");
                    return;
                case LandescodeEnum.Mf:
                    serializer.Serialize(writer, "MF");
                    return;
                case LandescodeEnum.Mg:
                    serializer.Serialize(writer, "MG");
                    return;
                case LandescodeEnum.Mh:
                    serializer.Serialize(writer, "MH");
                    return;
                case LandescodeEnum.Mk:
                    serializer.Serialize(writer, "MK");
                    return;
                case LandescodeEnum.Ml:
                    serializer.Serialize(writer, "ML");
                    return;
                case LandescodeEnum.Mm:
                    serializer.Serialize(writer, "MM");
                    return;
                case LandescodeEnum.Mn:
                    serializer.Serialize(writer, "MN");
                    return;
                case LandescodeEnum.Mo:
                    serializer.Serialize(writer, "MO");
                    return;
                case LandescodeEnum.Mp:
                    serializer.Serialize(writer, "MP");
                    return;
                case LandescodeEnum.Mq:
                    serializer.Serialize(writer, "MQ");
                    return;
                case LandescodeEnum.Mr:
                    serializer.Serialize(writer, "MR");
                    return;
                case LandescodeEnum.Ms:
                    serializer.Serialize(writer, "MS");
                    return;
                case LandescodeEnum.Mt:
                    serializer.Serialize(writer, "MT");
                    return;
                case LandescodeEnum.Mu:
                    serializer.Serialize(writer, "MU");
                    return;
                case LandescodeEnum.Mv:
                    serializer.Serialize(writer, "MV");
                    return;
                case LandescodeEnum.Mw:
                    serializer.Serialize(writer, "MW");
                    return;
                case LandescodeEnum.Mx:
                    serializer.Serialize(writer, "MX");
                    return;
                case LandescodeEnum.My:
                    serializer.Serialize(writer, "MY");
                    return;
                case LandescodeEnum.Mz:
                    serializer.Serialize(writer, "MZ");
                    return;
                case LandescodeEnum.Na:
                    serializer.Serialize(writer, "NA");
                    return;
                case LandescodeEnum.Nc:
                    serializer.Serialize(writer, "NC");
                    return;
                case LandescodeEnum.Ne:
                    serializer.Serialize(writer, "NE");
                    return;
                case LandescodeEnum.Nf:
                    serializer.Serialize(writer, "NF");
                    return;
                case LandescodeEnum.Ng:
                    serializer.Serialize(writer, "NG");
                    return;
                case LandescodeEnum.Ni:
                    serializer.Serialize(writer, "NI");
                    return;
                case LandescodeEnum.Nl:
                    serializer.Serialize(writer, "NL");
                    return;
                case LandescodeEnum.No:
                    serializer.Serialize(writer, "NO");
                    return;
                case LandescodeEnum.Np:
                    serializer.Serialize(writer, "NP");
                    return;
                case LandescodeEnum.Nr:
                    serializer.Serialize(writer, "NR");
                    return;
                case LandescodeEnum.Nu:
                    serializer.Serialize(writer, "NU");
                    return;
                case LandescodeEnum.Nz:
                    serializer.Serialize(writer, "NZ");
                    return;
                case LandescodeEnum.Om:
                    serializer.Serialize(writer, "OM");
                    return;
                case LandescodeEnum.Pa:
                    serializer.Serialize(writer, "PA");
                    return;
                case LandescodeEnum.Pe:
                    serializer.Serialize(writer, "PE");
                    return;
                case LandescodeEnum.Pf:
                    serializer.Serialize(writer, "PF");
                    return;
                case LandescodeEnum.Pg:
                    serializer.Serialize(writer, "PG");
                    return;
                case LandescodeEnum.Ph:
                    serializer.Serialize(writer, "PH");
                    return;
                case LandescodeEnum.Pk:
                    serializer.Serialize(writer, "PK");
                    return;
                case LandescodeEnum.Pl:
                    serializer.Serialize(writer, "PL");
                    return;
                case LandescodeEnum.Pm:
                    serializer.Serialize(writer, "PM");
                    return;
                case LandescodeEnum.Pn:
                    serializer.Serialize(writer, "PN");
                    return;
                case LandescodeEnum.Pr:
                    serializer.Serialize(writer, "PR");
                    return;
                case LandescodeEnum.Ps:
                    serializer.Serialize(writer, "PS");
                    return;
                case LandescodeEnum.Pt:
                    serializer.Serialize(writer, "PT");
                    return;
                case LandescodeEnum.Pw:
                    serializer.Serialize(writer, "PW");
                    return;
                case LandescodeEnum.Py:
                    serializer.Serialize(writer, "PY");
                    return;
                case LandescodeEnum.Qa:
                    serializer.Serialize(writer, "QA");
                    return;
                case LandescodeEnum.Re:
                    serializer.Serialize(writer, "RE");
                    return;
                case LandescodeEnum.Ro:
                    serializer.Serialize(writer, "RO");
                    return;
                case LandescodeEnum.Rs:
                    serializer.Serialize(writer, "RS");
                    return;
                case LandescodeEnum.Ru:
                    serializer.Serialize(writer, "RU");
                    return;
                case LandescodeEnum.Rw:
                    serializer.Serialize(writer, "RW");
                    return;
                case LandescodeEnum.Sa:
                    serializer.Serialize(writer, "SA");
                    return;
                case LandescodeEnum.Sb:
                    serializer.Serialize(writer, "SB");
                    return;
                case LandescodeEnum.Sc:
                    serializer.Serialize(writer, "SC");
                    return;
                case LandescodeEnum.Sd:
                    serializer.Serialize(writer, "SD");
                    return;
                case LandescodeEnum.Se:
                    serializer.Serialize(writer, "SE");
                    return;
                case LandescodeEnum.Sg:
                    serializer.Serialize(writer, "SG");
                    return;
                case LandescodeEnum.Sh:
                    serializer.Serialize(writer, "SH");
                    return;
                case LandescodeEnum.Si:
                    serializer.Serialize(writer, "SI");
                    return;
                case LandescodeEnum.Sj:
                    serializer.Serialize(writer, "SJ");
                    return;
                case LandescodeEnum.Sk:
                    serializer.Serialize(writer, "SK");
                    return;
                case LandescodeEnum.Sl:
                    serializer.Serialize(writer, "SL");
                    return;
                case LandescodeEnum.Sm:
                    serializer.Serialize(writer, "SM");
                    return;
                case LandescodeEnum.Sn:
                    serializer.Serialize(writer, "SN");
                    return;
                case LandescodeEnum.So:
                    serializer.Serialize(writer, "SO");
                    return;
                case LandescodeEnum.Sr:
                    serializer.Serialize(writer, "SR");
                    return;
                case LandescodeEnum.Ss:
                    serializer.Serialize(writer, "SS");
                    return;
                case LandescodeEnum.St:
                    serializer.Serialize(writer, "ST");
                    return;
                case LandescodeEnum.Sv:
                    serializer.Serialize(writer, "SV");
                    return;
                case LandescodeEnum.Sx:
                    serializer.Serialize(writer, "SX");
                    return;
                case LandescodeEnum.Sy:
                    serializer.Serialize(writer, "SY");
                    return;
                case LandescodeEnum.Sz:
                    serializer.Serialize(writer, "SZ");
                    return;
                case LandescodeEnum.Tc:
                    serializer.Serialize(writer, "TC");
                    return;
                case LandescodeEnum.Td:
                    serializer.Serialize(writer, "TD");
                    return;
                case LandescodeEnum.Tf:
                    serializer.Serialize(writer, "TF");
                    return;
                case LandescodeEnum.Tg:
                    serializer.Serialize(writer, "TG");
                    return;
                case LandescodeEnum.Th:
                    serializer.Serialize(writer, "TH");
                    return;
                case LandescodeEnum.Tj:
                    serializer.Serialize(writer, "TJ");
                    return;
                case LandescodeEnum.Tk:
                    serializer.Serialize(writer, "TK");
                    return;
                case LandescodeEnum.Tl:
                    serializer.Serialize(writer, "TL");
                    return;
                case LandescodeEnum.Tm:
                    serializer.Serialize(writer, "TM");
                    return;
                case LandescodeEnum.Tn:
                    serializer.Serialize(writer, "TN");
                    return;
                case LandescodeEnum.To:
                    serializer.Serialize(writer, "TO");
                    return;
                case LandescodeEnum.Tr:
                    serializer.Serialize(writer, "TR");
                    return;
                case LandescodeEnum.Tt:
                    serializer.Serialize(writer, "TT");
                    return;
                case LandescodeEnum.Tv:
                    serializer.Serialize(writer, "TV");
                    return;
                case LandescodeEnum.Tw:
                    serializer.Serialize(writer, "TW");
                    return;
                case LandescodeEnum.Tz:
                    serializer.Serialize(writer, "TZ");
                    return;
                case LandescodeEnum.Ua:
                    serializer.Serialize(writer, "UA");
                    return;
                case LandescodeEnum.Ug:
                    serializer.Serialize(writer, "UG");
                    return;
                case LandescodeEnum.Um:
                    serializer.Serialize(writer, "UM");
                    return;
                case LandescodeEnum.Us:
                    serializer.Serialize(writer, "US");
                    return;
                case LandescodeEnum.Uy:
                    serializer.Serialize(writer, "UY");
                    return;
                case LandescodeEnum.Uz:
                    serializer.Serialize(writer, "UZ");
                    return;
                case LandescodeEnum.Va:
                    serializer.Serialize(writer, "VA");
                    return;
                case LandescodeEnum.Vc:
                    serializer.Serialize(writer, "VC");
                    return;
                case LandescodeEnum.Ve:
                    serializer.Serialize(writer, "VE");
                    return;
                case LandescodeEnum.Vg:
                    serializer.Serialize(writer, "VG");
                    return;
                case LandescodeEnum.Vi:
                    serializer.Serialize(writer, "VI");
                    return;
                case LandescodeEnum.Vn:
                    serializer.Serialize(writer, "VN");
                    return;
                case LandescodeEnum.Vu:
                    serializer.Serialize(writer, "VU");
                    return;
                case LandescodeEnum.Wf:
                    serializer.Serialize(writer, "WF");
                    return;
                case LandescodeEnum.Ws:
                    serializer.Serialize(writer, "WS");
                    return;
                case LandescodeEnum.Xk:
                    serializer.Serialize(writer, "XK");
                    return;
                case LandescodeEnum.Ye:
                    serializer.Serialize(writer, "YE");
                    return;
                case LandescodeEnum.Yt:
                    serializer.Serialize(writer, "YT");
                    return;
                case LandescodeEnum.Za:
                    serializer.Serialize(writer, "ZA");
                    return;
                case LandescodeEnum.Zm:
                    serializer.Serialize(writer, "ZM");
                    return;
                case LandescodeEnum.Zw:
                    serializer.Serialize(writer, "ZW");
                    return;
            }
            throw new Exception("Cannot marshal type LandescodeEnum");
        }

        public static readonly LandescodeEnumConverter Singleton = new LandescodeEnumConverter();
    }
}
