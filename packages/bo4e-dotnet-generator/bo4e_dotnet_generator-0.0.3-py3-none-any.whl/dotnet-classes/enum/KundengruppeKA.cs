// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var kundengruppeKa = KundengruppeKa.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Eine Aufzählung zur Einordnung für die Höhe der Konzessionsabgabe.
    /// </summary>
    public enum KundengruppeKaEnum { GKowa100000, GKowa25000, GKowa500000, GKowaG500000, GSonderkunde, GTarif100000, GTarif25000, GTarif500000, GTarifG500000, SSchwachlast, SSonderkunde, STarif100000, STarif25000, STarif500000, STarifG500000, SonderKas, SonderSas, SonderTas, SonderTks, SonderTss };

    public class KundengruppeKa
    {
        public static KundengruppeKaEnum FromJson(string json) => JsonConvert.DeserializeObject<KundengruppeKaEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this KundengruppeKaEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                KundengruppeKaEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class KundengruppeKaEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(KundengruppeKaEnum) || t == typeof(KundengruppeKaEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "G_KOWA_100000":
                    return KundengruppeKaEnum.GKowa100000;
                case "G_KOWA_25000":
                    return KundengruppeKaEnum.GKowa25000;
                case "G_KOWA_500000":
                    return KundengruppeKaEnum.GKowa500000;
                case "G_KOWA_G_500000":
                    return KundengruppeKaEnum.GKowaG500000;
                case "G_SONDERKUNDE":
                    return KundengruppeKaEnum.GSonderkunde;
                case "G_TARIF_100000":
                    return KundengruppeKaEnum.GTarif100000;
                case "G_TARIF_25000":
                    return KundengruppeKaEnum.GTarif25000;
                case "G_TARIF_500000":
                    return KundengruppeKaEnum.GTarif500000;
                case "G_TARIF_G_500000":
                    return KundengruppeKaEnum.GTarifG500000;
                case "SONDER_KAS":
                    return KundengruppeKaEnum.SonderKas;
                case "SONDER_SAS":
                    return KundengruppeKaEnum.SonderSas;
                case "SONDER_TAS":
                    return KundengruppeKaEnum.SonderTas;
                case "SONDER_TKS":
                    return KundengruppeKaEnum.SonderTks;
                case "SONDER_TSS":
                    return KundengruppeKaEnum.SonderTss;
                case "S_SCHWACHLAST":
                    return KundengruppeKaEnum.SSchwachlast;
                case "S_SONDERKUNDE":
                    return KundengruppeKaEnum.SSonderkunde;
                case "S_TARIF_100000":
                    return KundengruppeKaEnum.STarif100000;
                case "S_TARIF_25000":
                    return KundengruppeKaEnum.STarif25000;
                case "S_TARIF_500000":
                    return KundengruppeKaEnum.STarif500000;
                case "S_TARIF_G_500000":
                    return KundengruppeKaEnum.STarifG500000;
            }
            throw new Exception("Cannot unmarshal type KundengruppeKaEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (KundengruppeKaEnum)untypedValue;
            switch (value)
            {
                case KundengruppeKaEnum.GKowa100000:
                    serializer.Serialize(writer, "G_KOWA_100000");
                    return;
                case KundengruppeKaEnum.GKowa25000:
                    serializer.Serialize(writer, "G_KOWA_25000");
                    return;
                case KundengruppeKaEnum.GKowa500000:
                    serializer.Serialize(writer, "G_KOWA_500000");
                    return;
                case KundengruppeKaEnum.GKowaG500000:
                    serializer.Serialize(writer, "G_KOWA_G_500000");
                    return;
                case KundengruppeKaEnum.GSonderkunde:
                    serializer.Serialize(writer, "G_SONDERKUNDE");
                    return;
                case KundengruppeKaEnum.GTarif100000:
                    serializer.Serialize(writer, "G_TARIF_100000");
                    return;
                case KundengruppeKaEnum.GTarif25000:
                    serializer.Serialize(writer, "G_TARIF_25000");
                    return;
                case KundengruppeKaEnum.GTarif500000:
                    serializer.Serialize(writer, "G_TARIF_500000");
                    return;
                case KundengruppeKaEnum.GTarifG500000:
                    serializer.Serialize(writer, "G_TARIF_G_500000");
                    return;
                case KundengruppeKaEnum.SonderKas:
                    serializer.Serialize(writer, "SONDER_KAS");
                    return;
                case KundengruppeKaEnum.SonderSas:
                    serializer.Serialize(writer, "SONDER_SAS");
                    return;
                case KundengruppeKaEnum.SonderTas:
                    serializer.Serialize(writer, "SONDER_TAS");
                    return;
                case KundengruppeKaEnum.SonderTks:
                    serializer.Serialize(writer, "SONDER_TKS");
                    return;
                case KundengruppeKaEnum.SonderTss:
                    serializer.Serialize(writer, "SONDER_TSS");
                    return;
                case KundengruppeKaEnum.SSchwachlast:
                    serializer.Serialize(writer, "S_SCHWACHLAST");
                    return;
                case KundengruppeKaEnum.SSonderkunde:
                    serializer.Serialize(writer, "S_SONDERKUNDE");
                    return;
                case KundengruppeKaEnum.STarif100000:
                    serializer.Serialize(writer, "S_TARIF_100000");
                    return;
                case KundengruppeKaEnum.STarif25000:
                    serializer.Serialize(writer, "S_TARIF_25000");
                    return;
                case KundengruppeKaEnum.STarif500000:
                    serializer.Serialize(writer, "S_TARIF_500000");
                    return;
                case KundengruppeKaEnum.STarifG500000:
                    serializer.Serialize(writer, "S_TARIF_G_500000");
                    return;
            }
            throw new Exception("Cannot marshal type KundengruppeKaEnum");
        }

        public static readonly KundengruppeKaEnumConverter Singleton = new KundengruppeKaEnumConverter();
    }
}
