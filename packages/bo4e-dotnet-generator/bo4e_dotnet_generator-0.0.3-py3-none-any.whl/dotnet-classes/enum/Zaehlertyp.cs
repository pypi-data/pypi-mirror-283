// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var zaehlertyp = Zaehlertyp.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Bei diesem Enum handelt es sich um die Abbildung von ZÃ¤hlertypen der Sparten Strom und
    /// Gas.
    /// </summary>
    public enum ZaehlertypEnum { Balgengaszaehler, Drehkolbenzaehler, Drehstromzaehler, ElektronischerZaehler, IntelligentesMesssystem, Leistungszaehler, Maximumzaehler, ModerneMesseinrichtung, Turbinenradgaszaehler, Ultraschallgaszaehler, Wechselstromzaehler, Wirbelgaszaehler };

    public class Zaehlertyp
    {
        public static ZaehlertypEnum FromJson(string json) => JsonConvert.DeserializeObject<ZaehlertypEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ZaehlertypEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ZaehlertypEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ZaehlertypEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ZaehlertypEnum) || t == typeof(ZaehlertypEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "BALGENGASZAEHLER":
                    return ZaehlertypEnum.Balgengaszaehler;
                case "DREHKOLBENZAEHLER":
                    return ZaehlertypEnum.Drehkolbenzaehler;
                case "DREHSTROMZAEHLER":
                    return ZaehlertypEnum.Drehstromzaehler;
                case "ELEKTRONISCHER_ZAEHLER":
                    return ZaehlertypEnum.ElektronischerZaehler;
                case "INTELLIGENTES_MESSSYSTEM":
                    return ZaehlertypEnum.IntelligentesMesssystem;
                case "LEISTUNGSZAEHLER":
                    return ZaehlertypEnum.Leistungszaehler;
                case "MAXIMUMZAEHLER":
                    return ZaehlertypEnum.Maximumzaehler;
                case "MODERNE_MESSEINRICHTUNG":
                    return ZaehlertypEnum.ModerneMesseinrichtung;
                case "TURBINENRADGASZAEHLER":
                    return ZaehlertypEnum.Turbinenradgaszaehler;
                case "ULTRASCHALLGASZAEHLER":
                    return ZaehlertypEnum.Ultraschallgaszaehler;
                case "WECHSELSTROMZAEHLER":
                    return ZaehlertypEnum.Wechselstromzaehler;
                case "WIRBELGASZAEHLER":
                    return ZaehlertypEnum.Wirbelgaszaehler;
            }
            throw new Exception("Cannot unmarshal type ZaehlertypEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ZaehlertypEnum)untypedValue;
            switch (value)
            {
                case ZaehlertypEnum.Balgengaszaehler:
                    serializer.Serialize(writer, "BALGENGASZAEHLER");
                    return;
                case ZaehlertypEnum.Drehkolbenzaehler:
                    serializer.Serialize(writer, "DREHKOLBENZAEHLER");
                    return;
                case ZaehlertypEnum.Drehstromzaehler:
                    serializer.Serialize(writer, "DREHSTROMZAEHLER");
                    return;
                case ZaehlertypEnum.ElektronischerZaehler:
                    serializer.Serialize(writer, "ELEKTRONISCHER_ZAEHLER");
                    return;
                case ZaehlertypEnum.IntelligentesMesssystem:
                    serializer.Serialize(writer, "INTELLIGENTES_MESSSYSTEM");
                    return;
                case ZaehlertypEnum.Leistungszaehler:
                    serializer.Serialize(writer, "LEISTUNGSZAEHLER");
                    return;
                case ZaehlertypEnum.Maximumzaehler:
                    serializer.Serialize(writer, "MAXIMUMZAEHLER");
                    return;
                case ZaehlertypEnum.ModerneMesseinrichtung:
                    serializer.Serialize(writer, "MODERNE_MESSEINRICHTUNG");
                    return;
                case ZaehlertypEnum.Turbinenradgaszaehler:
                    serializer.Serialize(writer, "TURBINENRADGASZAEHLER");
                    return;
                case ZaehlertypEnum.Ultraschallgaszaehler:
                    serializer.Serialize(writer, "ULTRASCHALLGASZAEHLER");
                    return;
                case ZaehlertypEnum.Wechselstromzaehler:
                    serializer.Serialize(writer, "WECHSELSTROMZAEHLER");
                    return;
                case ZaehlertypEnum.Wirbelgaszaehler:
                    serializer.Serialize(writer, "WIRBELGASZAEHLER");
                    return;
            }
            throw new Exception("Cannot marshal type ZaehlertypEnum");
        }

        public static readonly ZaehlertypEnumConverter Singleton = new ZaehlertypEnumConverter();
    }
}
