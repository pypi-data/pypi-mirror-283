// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var aufAbschlagsziel = AufAbschlagsziel.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Der Preis, auf den sich ein Auf- oder Abschlag bezieht.
    /// </summary>
    public enum AufAbschlagszielEnum { ArbeitspreisEintarif, ArbeitspreisHt, ArbeitspreisHtNt, ArbeitspreisNt, Gesamtpreis, Grundpreis };

    public class AufAbschlagsziel
    {
        public static AufAbschlagszielEnum FromJson(string json) => JsonConvert.DeserializeObject<AufAbschlagszielEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this AufAbschlagszielEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                AufAbschlagszielEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class AufAbschlagszielEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AufAbschlagszielEnum) || t == typeof(AufAbschlagszielEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ARBEITSPREIS_EINTARIF":
                    return AufAbschlagszielEnum.ArbeitspreisEintarif;
                case "ARBEITSPREIS_HT":
                    return AufAbschlagszielEnum.ArbeitspreisHt;
                case "ARBEITSPREIS_HT_NT":
                    return AufAbschlagszielEnum.ArbeitspreisHtNt;
                case "ARBEITSPREIS_NT":
                    return AufAbschlagszielEnum.ArbeitspreisNt;
                case "GESAMTPREIS":
                    return AufAbschlagszielEnum.Gesamtpreis;
                case "GRUNDPREIS":
                    return AufAbschlagszielEnum.Grundpreis;
            }
            throw new Exception("Cannot unmarshal type AufAbschlagszielEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AufAbschlagszielEnum)untypedValue;
            switch (value)
            {
                case AufAbschlagszielEnum.ArbeitspreisEintarif:
                    serializer.Serialize(writer, "ARBEITSPREIS_EINTARIF");
                    return;
                case AufAbschlagszielEnum.ArbeitspreisHt:
                    serializer.Serialize(writer, "ARBEITSPREIS_HT");
                    return;
                case AufAbschlagszielEnum.ArbeitspreisHtNt:
                    serializer.Serialize(writer, "ARBEITSPREIS_HT_NT");
                    return;
                case AufAbschlagszielEnum.ArbeitspreisNt:
                    serializer.Serialize(writer, "ARBEITSPREIS_NT");
                    return;
                case AufAbschlagszielEnum.Gesamtpreis:
                    serializer.Serialize(writer, "GESAMTPREIS");
                    return;
                case AufAbschlagszielEnum.Grundpreis:
                    serializer.Serialize(writer, "GRUNDPREIS");
                    return;
            }
            throw new Exception("Cannot marshal type AufAbschlagszielEnum");
        }

        public static readonly AufAbschlagszielEnumConverter Singleton = new AufAbschlagszielEnumConverter();
    }
}
