// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var kostenklasse = Kostenklasse.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Kostenklassen bilden die oberste Ebene der verschiedenen Kosten.
    /// In der Regel werden die Gesamtkosten einer Kostenklasse in einer App berechnet.
    /// </summary>
    public enum KostenklasseEnum { Beschaffung, Energieversorgungskosten, Fremdkosten, Margen, Selbstkosten };

    public class Kostenklasse
    {
        public static KostenklasseEnum FromJson(string json) => JsonConvert.DeserializeObject<KostenklasseEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this KostenklasseEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                KostenklasseEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class KostenklasseEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(KostenklasseEnum) || t == typeof(KostenklasseEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "BESCHAFFUNG":
                    return KostenklasseEnum.Beschaffung;
                case "ENERGIEVERSORGUNGSKOSTEN":
                    return KostenklasseEnum.Energieversorgungskosten;
                case "FREMDKOSTEN":
                    return KostenklasseEnum.Fremdkosten;
                case "MARGEN":
                    return KostenklasseEnum.Margen;
                case "SELBSTKOSTEN":
                    return KostenklasseEnum.Selbstkosten;
            }
            throw new Exception("Cannot unmarshal type KostenklasseEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (KostenklasseEnum)untypedValue;
            switch (value)
            {
                case KostenklasseEnum.Beschaffung:
                    serializer.Serialize(writer, "BESCHAFFUNG");
                    return;
                case KostenklasseEnum.Energieversorgungskosten:
                    serializer.Serialize(writer, "ENERGIEVERSORGUNGSKOSTEN");
                    return;
                case KostenklasseEnum.Fremdkosten:
                    serializer.Serialize(writer, "FREMDKOSTEN");
                    return;
                case KostenklasseEnum.Margen:
                    serializer.Serialize(writer, "MARGEN");
                    return;
                case KostenklasseEnum.Selbstkosten:
                    serializer.Serialize(writer, "SELBSTKOSTEN");
                    return;
            }
            throw new Exception("Cannot marshal type KostenklasseEnum");
        }

        public static readonly KostenklasseEnumConverter Singleton = new KostenklasseEnumConverter();
    }
}
