// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var kontaktart = Kontaktart.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Gibt an, auf welchem Weg die Person oder der Gesch√§ftspartner kontaktiert werden kann.
    /// </summary>
    public enum KontaktartEnum { EMail, Fax, Postweg, Sms, Telefon };

    public class Kontaktart
    {
        public static KontaktartEnum FromJson(string json) => JsonConvert.DeserializeObject<KontaktartEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this KontaktartEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                KontaktartEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class KontaktartEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(KontaktartEnum) || t == typeof(KontaktartEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "E_MAIL":
                    return KontaktartEnum.EMail;
                case "FAX":
                    return KontaktartEnum.Fax;
                case "POSTWEG":
                    return KontaktartEnum.Postweg;
                case "SMS":
                    return KontaktartEnum.Sms;
                case "TELEFON":
                    return KontaktartEnum.Telefon;
            }
            throw new Exception("Cannot unmarshal type KontaktartEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (KontaktartEnum)untypedValue;
            switch (value)
            {
                case KontaktartEnum.EMail:
                    serializer.Serialize(writer, "E_MAIL");
                    return;
                case KontaktartEnum.Fax:
                    serializer.Serialize(writer, "FAX");
                    return;
                case KontaktartEnum.Postweg:
                    serializer.Serialize(writer, "POSTWEG");
                    return;
                case KontaktartEnum.Sms:
                    serializer.Serialize(writer, "SMS");
                    return;
                case KontaktartEnum.Telefon:
                    serializer.Serialize(writer, "TELEFON");
                    return;
            }
            throw new Exception("Cannot marshal type KontaktartEnum");
        }

        public static readonly KontaktartEnumConverter Singleton = new KontaktartEnumConverter();
    }
}
