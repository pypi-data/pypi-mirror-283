// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var registeranzahl = Registeranzahl.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Die Registeranzahl wird verwendet zur Charakterisierung von ZÃ¤hlern und daraus
    /// resultierenden Tarifen.
    /// </summary>
    public enum RegisteranzahlEnum { Eintarif, Mehrtarif, Zweitarif };

    public class Registeranzahl
    {
        public static RegisteranzahlEnum FromJson(string json) => JsonConvert.DeserializeObject<RegisteranzahlEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this RegisteranzahlEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                RegisteranzahlEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class RegisteranzahlEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(RegisteranzahlEnum) || t == typeof(RegisteranzahlEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "EINTARIF":
                    return RegisteranzahlEnum.Eintarif;
                case "MEHRTARIF":
                    return RegisteranzahlEnum.Mehrtarif;
                case "ZWEITARIF":
                    return RegisteranzahlEnum.Zweitarif;
            }
            throw new Exception("Cannot unmarshal type RegisteranzahlEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (RegisteranzahlEnum)untypedValue;
            switch (value)
            {
                case RegisteranzahlEnum.Eintarif:
                    serializer.Serialize(writer, "EINTARIF");
                    return;
                case RegisteranzahlEnum.Mehrtarif:
                    serializer.Serialize(writer, "MEHRTARIF");
                    return;
                case RegisteranzahlEnum.Zweitarif:
                    serializer.Serialize(writer, "ZWEITARIF");
                    return;
            }
            throw new Exception("Cannot marshal type RegisteranzahlEnum");
        }

        public static readonly RegisteranzahlEnumConverter Singleton = new RegisteranzahlEnumConverter();
    }
}
