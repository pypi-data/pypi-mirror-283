// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var kundengruppe = Kundengruppe.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Kundengruppe f√ºr eine Marktlokation (orientiert sich an den Standard-Lastprofilen).
    /// </summary>
    public enum KundengruppeEnum { Rlm, RlmKommunal, SlpGGba, SlpGGbd, SlpGGbh, SlpGGga, SlpGGgb, SlpGGha, SlpGGko, SlpGGmf, SlpGGmk, SlpGGpd, SlpGGwa, SlpGHef, SlpGHko, SlpGHmf, SlpGStandard, SlpKommunal, SlpSEm, SlpSG0, SlpSG1, SlpSG2, SlpSG3, SlpSG4, SlpSG5, SlpSG6, SlpSG7, SlpSH0, SlpSHz, SlpSHzGem, SlpSL0, SlpSL1, SlpSL2, SlpSSb, SlpSWp };

    public class Kundengruppe
    {
        public static KundengruppeEnum FromJson(string json) => JsonConvert.DeserializeObject<KundengruppeEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this KundengruppeEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                KundengruppeEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class KundengruppeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(KundengruppeEnum) || t == typeof(KundengruppeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "RLM":
                    return KundengruppeEnum.Rlm;
                case "RLM_KOMMUNAL":
                    return KundengruppeEnum.RlmKommunal;
                case "SLP_G_GBA":
                    return KundengruppeEnum.SlpGGba;
                case "SLP_G_GBD":
                    return KundengruppeEnum.SlpGGbd;
                case "SLP_G_GBH":
                    return KundengruppeEnum.SlpGGbh;
                case "SLP_G_GGA":
                    return KundengruppeEnum.SlpGGga;
                case "SLP_G_GGB":
                    return KundengruppeEnum.SlpGGgb;
                case "SLP_G_GHA":
                    return KundengruppeEnum.SlpGGha;
                case "SLP_G_GKO":
                    return KundengruppeEnum.SlpGGko;
                case "SLP_G_GMF":
                    return KundengruppeEnum.SlpGGmf;
                case "SLP_G_GMK":
                    return KundengruppeEnum.SlpGGmk;
                case "SLP_G_GPD":
                    return KundengruppeEnum.SlpGGpd;
                case "SLP_G_GWA":
                    return KundengruppeEnum.SlpGGwa;
                case "SLP_G_HEF":
                    return KundengruppeEnum.SlpGHef;
                case "SLP_G_HKO":
                    return KundengruppeEnum.SlpGHko;
                case "SLP_G_HMF":
                    return KundengruppeEnum.SlpGHmf;
                case "SLP_G_STANDARD":
                    return KundengruppeEnum.SlpGStandard;
                case "SLP_KOMMUNAL":
                    return KundengruppeEnum.SlpKommunal;
                case "SLP_S_EM":
                    return KundengruppeEnum.SlpSEm;
                case "SLP_S_G0":
                    return KundengruppeEnum.SlpSG0;
                case "SLP_S_G1":
                    return KundengruppeEnum.SlpSG1;
                case "SLP_S_G2":
                    return KundengruppeEnum.SlpSG2;
                case "SLP_S_G3":
                    return KundengruppeEnum.SlpSG3;
                case "SLP_S_G4":
                    return KundengruppeEnum.SlpSG4;
                case "SLP_S_G5":
                    return KundengruppeEnum.SlpSG5;
                case "SLP_S_G6":
                    return KundengruppeEnum.SlpSG6;
                case "SLP_S_G7":
                    return KundengruppeEnum.SlpSG7;
                case "SLP_S_H0":
                    return KundengruppeEnum.SlpSH0;
                case "SLP_S_HZ":
                    return KundengruppeEnum.SlpSHz;
                case "SLP_S_HZ_GEM":
                    return KundengruppeEnum.SlpSHzGem;
                case "SLP_S_L0":
                    return KundengruppeEnum.SlpSL0;
                case "SLP_S_L1":
                    return KundengruppeEnum.SlpSL1;
                case "SLP_S_L2":
                    return KundengruppeEnum.SlpSL2;
                case "SLP_S_SB":
                    return KundengruppeEnum.SlpSSb;
                case "SLP_S_WP":
                    return KundengruppeEnum.SlpSWp;
            }
            throw new Exception("Cannot unmarshal type KundengruppeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (KundengruppeEnum)untypedValue;
            switch (value)
            {
                case KundengruppeEnum.Rlm:
                    serializer.Serialize(writer, "RLM");
                    return;
                case KundengruppeEnum.RlmKommunal:
                    serializer.Serialize(writer, "RLM_KOMMUNAL");
                    return;
                case KundengruppeEnum.SlpGGba:
                    serializer.Serialize(writer, "SLP_G_GBA");
                    return;
                case KundengruppeEnum.SlpGGbd:
                    serializer.Serialize(writer, "SLP_G_GBD");
                    return;
                case KundengruppeEnum.SlpGGbh:
                    serializer.Serialize(writer, "SLP_G_GBH");
                    return;
                case KundengruppeEnum.SlpGGga:
                    serializer.Serialize(writer, "SLP_G_GGA");
                    return;
                case KundengruppeEnum.SlpGGgb:
                    serializer.Serialize(writer, "SLP_G_GGB");
                    return;
                case KundengruppeEnum.SlpGGha:
                    serializer.Serialize(writer, "SLP_G_GHA");
                    return;
                case KundengruppeEnum.SlpGGko:
                    serializer.Serialize(writer, "SLP_G_GKO");
                    return;
                case KundengruppeEnum.SlpGGmf:
                    serializer.Serialize(writer, "SLP_G_GMF");
                    return;
                case KundengruppeEnum.SlpGGmk:
                    serializer.Serialize(writer, "SLP_G_GMK");
                    return;
                case KundengruppeEnum.SlpGGpd:
                    serializer.Serialize(writer, "SLP_G_GPD");
                    return;
                case KundengruppeEnum.SlpGGwa:
                    serializer.Serialize(writer, "SLP_G_GWA");
                    return;
                case KundengruppeEnum.SlpGHef:
                    serializer.Serialize(writer, "SLP_G_HEF");
                    return;
                case KundengruppeEnum.SlpGHko:
                    serializer.Serialize(writer, "SLP_G_HKO");
                    return;
                case KundengruppeEnum.SlpGHmf:
                    serializer.Serialize(writer, "SLP_G_HMF");
                    return;
                case KundengruppeEnum.SlpGStandard:
                    serializer.Serialize(writer, "SLP_G_STANDARD");
                    return;
                case KundengruppeEnum.SlpKommunal:
                    serializer.Serialize(writer, "SLP_KOMMUNAL");
                    return;
                case KundengruppeEnum.SlpSEm:
                    serializer.Serialize(writer, "SLP_S_EM");
                    return;
                case KundengruppeEnum.SlpSG0:
                    serializer.Serialize(writer, "SLP_S_G0");
                    return;
                case KundengruppeEnum.SlpSG1:
                    serializer.Serialize(writer, "SLP_S_G1");
                    return;
                case KundengruppeEnum.SlpSG2:
                    serializer.Serialize(writer, "SLP_S_G2");
                    return;
                case KundengruppeEnum.SlpSG3:
                    serializer.Serialize(writer, "SLP_S_G3");
                    return;
                case KundengruppeEnum.SlpSG4:
                    serializer.Serialize(writer, "SLP_S_G4");
                    return;
                case KundengruppeEnum.SlpSG5:
                    serializer.Serialize(writer, "SLP_S_G5");
                    return;
                case KundengruppeEnum.SlpSG6:
                    serializer.Serialize(writer, "SLP_S_G6");
                    return;
                case KundengruppeEnum.SlpSG7:
                    serializer.Serialize(writer, "SLP_S_G7");
                    return;
                case KundengruppeEnum.SlpSH0:
                    serializer.Serialize(writer, "SLP_S_H0");
                    return;
                case KundengruppeEnum.SlpSHz:
                    serializer.Serialize(writer, "SLP_S_HZ");
                    return;
                case KundengruppeEnum.SlpSHzGem:
                    serializer.Serialize(writer, "SLP_S_HZ_GEM");
                    return;
                case KundengruppeEnum.SlpSL0:
                    serializer.Serialize(writer, "SLP_S_L0");
                    return;
                case KundengruppeEnum.SlpSL1:
                    serializer.Serialize(writer, "SLP_S_L1");
                    return;
                case KundengruppeEnum.SlpSL2:
                    serializer.Serialize(writer, "SLP_S_L2");
                    return;
                case KundengruppeEnum.SlpSSb:
                    serializer.Serialize(writer, "SLP_S_SB");
                    return;
                case KundengruppeEnum.SlpSWp:
                    serializer.Serialize(writer, "SLP_S_WP");
                    return;
            }
            throw new Exception("Cannot marshal type KundengruppeEnum");
        }

        public static readonly KundengruppeEnumConverter Singleton = new KundengruppeEnumConverter();
    }
}
