// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var artikelId = ArtikelId.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Liste von Artikel-IDs, z.B. für standardisierte vom BDEW herausgegebene Artikel,
    /// die im Strommarkt die BDEW-Artikelnummer ablösen
    /// </summary>
    public enum ArtikelIdEnum { The2017001, The2017002, The2017003, The2017004, The2017005, The2017006, The2020001, The2020002 };

    public class ArtikelId
    {
        public static ArtikelIdEnum FromJson(string json) => JsonConvert.DeserializeObject<ArtikelIdEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ArtikelIdEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ArtikelIdEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ArtikelIdEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ArtikelIdEnum) || t == typeof(ArtikelIdEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "2-01-7-001":
                    return ArtikelIdEnum.The2017001;
                case "2-01-7-002":
                    return ArtikelIdEnum.The2017002;
                case "2-01-7-003":
                    return ArtikelIdEnum.The2017003;
                case "2-01-7-004":
                    return ArtikelIdEnum.The2017004;
                case "2-01-7-005":
                    return ArtikelIdEnum.The2017005;
                case "2-01-7-006":
                    return ArtikelIdEnum.The2017006;
                case "2-02-0-001":
                    return ArtikelIdEnum.The2020001;
                case "2-02-0-002":
                    return ArtikelIdEnum.The2020002;
            }
            throw new Exception("Cannot unmarshal type ArtikelIdEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ArtikelIdEnum)untypedValue;
            switch (value)
            {
                case ArtikelIdEnum.The2017001:
                    serializer.Serialize(writer, "2-01-7-001");
                    return;
                case ArtikelIdEnum.The2017002:
                    serializer.Serialize(writer, "2-01-7-002");
                    return;
                case ArtikelIdEnum.The2017003:
                    serializer.Serialize(writer, "2-01-7-003");
                    return;
                case ArtikelIdEnum.The2017004:
                    serializer.Serialize(writer, "2-01-7-004");
                    return;
                case ArtikelIdEnum.The2017005:
                    serializer.Serialize(writer, "2-01-7-005");
                    return;
                case ArtikelIdEnum.The2017006:
                    serializer.Serialize(writer, "2-01-7-006");
                    return;
                case ArtikelIdEnum.The2020001:
                    serializer.Serialize(writer, "2-02-0-001");
                    return;
                case ArtikelIdEnum.The2020002:
                    serializer.Serialize(writer, "2-02-0-002");
                    return;
            }
            throw new Exception("Cannot marshal type ArtikelIdEnum");
        }

        public static readonly ArtikelIdEnumConverter Singleton = new ArtikelIdEnumConverter();
    }
}
