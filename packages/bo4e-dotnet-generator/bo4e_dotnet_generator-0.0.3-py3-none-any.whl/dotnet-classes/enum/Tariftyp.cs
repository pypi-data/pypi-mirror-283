// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var tariftyp = Tariftyp.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Zur Differenzierung von Grund/Ersatzversorgungstarifen und sonstigen angebotenen Tarifen.
    /// </summary>
    public enum TariftypEnum { Ersatzversorgung, GrundErsatzversorgung, Grundversorgung, Sondertarif };

    public class Tariftyp
    {
        public static TariftypEnum FromJson(string json) => JsonConvert.DeserializeObject<TariftypEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this TariftypEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                TariftypEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class TariftypEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TariftypEnum) || t == typeof(TariftypEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ERSATZVERSORGUNG":
                    return TariftypEnum.Ersatzversorgung;
                case "GRUNDVERSORGUNG":
                    return TariftypEnum.Grundversorgung;
                case "GRUND_ERSATZVERSORGUNG":
                    return TariftypEnum.GrundErsatzversorgung;
                case "SONDERTARIF":
                    return TariftypEnum.Sondertarif;
            }
            throw new Exception("Cannot unmarshal type TariftypEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TariftypEnum)untypedValue;
            switch (value)
            {
                case TariftypEnum.Ersatzversorgung:
                    serializer.Serialize(writer, "ERSATZVERSORGUNG");
                    return;
                case TariftypEnum.Grundversorgung:
                    serializer.Serialize(writer, "GRUNDVERSORGUNG");
                    return;
                case TariftypEnum.GrundErsatzversorgung:
                    serializer.Serialize(writer, "GRUND_ERSATZVERSORGUNG");
                    return;
                case TariftypEnum.Sondertarif:
                    serializer.Serialize(writer, "SONDERTARIF");
                    return;
            }
            throw new Exception("Cannot marshal type TariftypEnum");
        }

        public static readonly TariftypEnumConverter Singleton = new TariftypEnumConverter();
    }
}
