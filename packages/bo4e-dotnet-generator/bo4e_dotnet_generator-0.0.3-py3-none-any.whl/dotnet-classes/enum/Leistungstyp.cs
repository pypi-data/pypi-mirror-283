// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var leistungstyp = Leistungstyp.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public enum LeistungstypEnum { AblavUmlage, AblesungZusaetzlich, Abrechnung, AbrechnungZusaetzlich, ArbeitspreisBlindarbeitInd, ArbeitspreisBlindarbeitKap, ArbeitspreisWirkarbeit, AuslesungZusaetzlich, BilanzierungUmlage, Dienstleistung, EegUmlage, Energiesteuer, Entsperrung, Grundpreis, GrundpreisArbeit, GrundpreisLeistung, Inkassokosten, KonzessionsAbgabe, KwkUmlage, LeistungspreisWirkleistung, Mahnkosten, Mehrmindermenge, Messdienstleistung, MessdienstleistungInklMessung, Messpreis, Messstellenbetrieb, Netzpreis, OffshoreUmlage, RegelenergieUmlage, SonderkundenUmlage, SonstigerPreis, Sperrung };

    public class Leistungstyp
    {
        public static LeistungstypEnum FromJson(string json) => JsonConvert.DeserializeObject<LeistungstypEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this LeistungstypEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                LeistungstypEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class LeistungstypEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(LeistungstypEnum) || t == typeof(LeistungstypEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ABLAV_UMLAGE":
                    return LeistungstypEnum.AblavUmlage;
                case "ABLESUNG_ZUSAETZLICH":
                    return LeistungstypEnum.AblesungZusaetzlich;
                case "ABRECHNUNG":
                    return LeistungstypEnum.Abrechnung;
                case "ABRECHNUNG_ZUSAETZLICH":
                    return LeistungstypEnum.AbrechnungZusaetzlich;
                case "ARBEITSPREIS_BLINDARBEIT_IND":
                    return LeistungstypEnum.ArbeitspreisBlindarbeitInd;
                case "ARBEITSPREIS_BLINDARBEIT_KAP":
                    return LeistungstypEnum.ArbeitspreisBlindarbeitKap;
                case "ARBEITSPREIS_WIRKARBEIT":
                    return LeistungstypEnum.ArbeitspreisWirkarbeit;
                case "AUSLESUNG_ZUSAETZLICH":
                    return LeistungstypEnum.AuslesungZusaetzlich;
                case "BILANZIERUNG_UMLAGE":
                    return LeistungstypEnum.BilanzierungUmlage;
                case "DIENSTLEISTUNG":
                    return LeistungstypEnum.Dienstleistung;
                case "EEG_UMLAGE":
                    return LeistungstypEnum.EegUmlage;
                case "ENERGIESTEUER":
                    return LeistungstypEnum.Energiesteuer;
                case "ENTSPERRUNG":
                    return LeistungstypEnum.Entsperrung;
                case "GRUNDPREIS":
                    return LeistungstypEnum.Grundpreis;
                case "GRUNDPREIS_ARBEIT":
                    return LeistungstypEnum.GrundpreisArbeit;
                case "GRUNDPREIS_LEISTUNG":
                    return LeistungstypEnum.GrundpreisLeistung;
                case "INKASSOKOSTEN":
                    return LeistungstypEnum.Inkassokosten;
                case "KONZESSIONS_ABGABE":
                    return LeistungstypEnum.KonzessionsAbgabe;
                case "KWK_UMLAGE":
                    return LeistungstypEnum.KwkUmlage;
                case "LEISTUNGSPREIS_WIRKLEISTUNG":
                    return LeistungstypEnum.LeistungspreisWirkleistung;
                case "MAHNKOSTEN":
                    return LeistungstypEnum.Mahnkosten;
                case "MEHRMINDERMENGE":
                    return LeistungstypEnum.Mehrmindermenge;
                case "MESSDIENSTLEISTUNG":
                    return LeistungstypEnum.Messdienstleistung;
                case "MESSDIENSTLEISTUNG_INKL_MESSUNG":
                    return LeistungstypEnum.MessdienstleistungInklMessung;
                case "MESSPREIS":
                    return LeistungstypEnum.Messpreis;
                case "MESSSTELLENBETRIEB":
                    return LeistungstypEnum.Messstellenbetrieb;
                case "NETZPREIS":
                    return LeistungstypEnum.Netzpreis;
                case "OFFSHORE_UMLAGE":
                    return LeistungstypEnum.OffshoreUmlage;
                case "REGELENERGIE_UMLAGE":
                    return LeistungstypEnum.RegelenergieUmlage;
                case "SONDERKUNDEN_UMLAGE":
                    return LeistungstypEnum.SonderkundenUmlage;
                case "SONSTIGER_PREIS":
                    return LeistungstypEnum.SonstigerPreis;
                case "SPERRUNG":
                    return LeistungstypEnum.Sperrung;
            }
            throw new Exception("Cannot unmarshal type LeistungstypEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (LeistungstypEnum)untypedValue;
            switch (value)
            {
                case LeistungstypEnum.AblavUmlage:
                    serializer.Serialize(writer, "ABLAV_UMLAGE");
                    return;
                case LeistungstypEnum.AblesungZusaetzlich:
                    serializer.Serialize(writer, "ABLESUNG_ZUSAETZLICH");
                    return;
                case LeistungstypEnum.Abrechnung:
                    serializer.Serialize(writer, "ABRECHNUNG");
                    return;
                case LeistungstypEnum.AbrechnungZusaetzlich:
                    serializer.Serialize(writer, "ABRECHNUNG_ZUSAETZLICH");
                    return;
                case LeistungstypEnum.ArbeitspreisBlindarbeitInd:
                    serializer.Serialize(writer, "ARBEITSPREIS_BLINDARBEIT_IND");
                    return;
                case LeistungstypEnum.ArbeitspreisBlindarbeitKap:
                    serializer.Serialize(writer, "ARBEITSPREIS_BLINDARBEIT_KAP");
                    return;
                case LeistungstypEnum.ArbeitspreisWirkarbeit:
                    serializer.Serialize(writer, "ARBEITSPREIS_WIRKARBEIT");
                    return;
                case LeistungstypEnum.AuslesungZusaetzlich:
                    serializer.Serialize(writer, "AUSLESUNG_ZUSAETZLICH");
                    return;
                case LeistungstypEnum.BilanzierungUmlage:
                    serializer.Serialize(writer, "BILANZIERUNG_UMLAGE");
                    return;
                case LeistungstypEnum.Dienstleistung:
                    serializer.Serialize(writer, "DIENSTLEISTUNG");
                    return;
                case LeistungstypEnum.EegUmlage:
                    serializer.Serialize(writer, "EEG_UMLAGE");
                    return;
                case LeistungstypEnum.Energiesteuer:
                    serializer.Serialize(writer, "ENERGIESTEUER");
                    return;
                case LeistungstypEnum.Entsperrung:
                    serializer.Serialize(writer, "ENTSPERRUNG");
                    return;
                case LeistungstypEnum.Grundpreis:
                    serializer.Serialize(writer, "GRUNDPREIS");
                    return;
                case LeistungstypEnum.GrundpreisArbeit:
                    serializer.Serialize(writer, "GRUNDPREIS_ARBEIT");
                    return;
                case LeistungstypEnum.GrundpreisLeistung:
                    serializer.Serialize(writer, "GRUNDPREIS_LEISTUNG");
                    return;
                case LeistungstypEnum.Inkassokosten:
                    serializer.Serialize(writer, "INKASSOKOSTEN");
                    return;
                case LeistungstypEnum.KonzessionsAbgabe:
                    serializer.Serialize(writer, "KONZESSIONS_ABGABE");
                    return;
                case LeistungstypEnum.KwkUmlage:
                    serializer.Serialize(writer, "KWK_UMLAGE");
                    return;
                case LeistungstypEnum.LeistungspreisWirkleistung:
                    serializer.Serialize(writer, "LEISTUNGSPREIS_WIRKLEISTUNG");
                    return;
                case LeistungstypEnum.Mahnkosten:
                    serializer.Serialize(writer, "MAHNKOSTEN");
                    return;
                case LeistungstypEnum.Mehrmindermenge:
                    serializer.Serialize(writer, "MEHRMINDERMENGE");
                    return;
                case LeistungstypEnum.Messdienstleistung:
                    serializer.Serialize(writer, "MESSDIENSTLEISTUNG");
                    return;
                case LeistungstypEnum.MessdienstleistungInklMessung:
                    serializer.Serialize(writer, "MESSDIENSTLEISTUNG_INKL_MESSUNG");
                    return;
                case LeistungstypEnum.Messpreis:
                    serializer.Serialize(writer, "MESSPREIS");
                    return;
                case LeistungstypEnum.Messstellenbetrieb:
                    serializer.Serialize(writer, "MESSSTELLENBETRIEB");
                    return;
                case LeistungstypEnum.Netzpreis:
                    serializer.Serialize(writer, "NETZPREIS");
                    return;
                case LeistungstypEnum.OffshoreUmlage:
                    serializer.Serialize(writer, "OFFSHORE_UMLAGE");
                    return;
                case LeistungstypEnum.RegelenergieUmlage:
                    serializer.Serialize(writer, "REGELENERGIE_UMLAGE");
                    return;
                case LeistungstypEnum.SonderkundenUmlage:
                    serializer.Serialize(writer, "SONDERKUNDEN_UMLAGE");
                    return;
                case LeistungstypEnum.SonstigerPreis:
                    serializer.Serialize(writer, "SONSTIGER_PREIS");
                    return;
                case LeistungstypEnum.Sperrung:
                    serializer.Serialize(writer, "SPERRUNG");
                    return;
            }
            throw new Exception("Cannot marshal type LeistungstypEnum");
        }

        public static readonly LeistungstypEnumConverter Singleton = new LeistungstypEnumConverter();
    }
}
