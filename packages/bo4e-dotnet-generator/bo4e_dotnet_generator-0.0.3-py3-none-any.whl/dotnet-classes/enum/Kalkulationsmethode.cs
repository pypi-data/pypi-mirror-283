// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var kalkulationsmethode = Kalkulationsmethode.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Auflistung der verschiedenen Berechnungsmethoden f√ºr ein Preisblatt.
    /// </summary>
    public enum KalkulationsmethodeEnum { ApGpZonen, ApTransportOderVerteilnetz, ApTransportOderVerteilnetzOrtsverteilnetzSigmoid, BlindarbeitGt40_Prozent, BlindarbeitGt50_Prozent, BlindarbeitMitFreimenge, Funktionen, LpInstallLeistung, LpJahresverbrauch, LpTransportOderVerteilnetz, LpTransportOderVerteilnetzOrtsverteilnetzSigmoid, Sigmoid, Stufen, VerbrauchUeberSlpGrenzeFunktionsbezogenWeitereBerechnungAlsLgk, VorzonenGp, Zonen };

    public class Kalkulationsmethode
    {
        public static KalkulationsmethodeEnum FromJson(string json) => JsonConvert.DeserializeObject<KalkulationsmethodeEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this KalkulationsmethodeEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                KalkulationsmethodeEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class KalkulationsmethodeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(KalkulationsmethodeEnum) || t == typeof(KalkulationsmethodeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "AP_GP_ZONEN":
                    return KalkulationsmethodeEnum.ApGpZonen;
                case "AP_TRANSPORT_ODER_VERTEILNETZ":
                    return KalkulationsmethodeEnum.ApTransportOderVerteilnetz;
                case "AP_TRANSPORT_ODER_VERTEILNETZ_ORTSVERTEILNETZ_SIGMOID":
                    return KalkulationsmethodeEnum.ApTransportOderVerteilnetzOrtsverteilnetzSigmoid;
                case "BLINDARBEIT_GT_40_PROZENT":
                    return KalkulationsmethodeEnum.BlindarbeitGt40_Prozent;
                case "BLINDARBEIT_GT_50_PROZENT":
                    return KalkulationsmethodeEnum.BlindarbeitGt50_Prozent;
                case "BLINDARBEIT_MIT_FREIMENGE":
                    return KalkulationsmethodeEnum.BlindarbeitMitFreimenge;
                case "FUNKTIONEN":
                    return KalkulationsmethodeEnum.Funktionen;
                case "LP_INSTALL_LEISTUNG":
                    return KalkulationsmethodeEnum.LpInstallLeistung;
                case "LP_JAHRESVERBRAUCH":
                    return KalkulationsmethodeEnum.LpJahresverbrauch;
                case "LP_TRANSPORT_ODER_VERTEILNETZ":
                    return KalkulationsmethodeEnum.LpTransportOderVerteilnetz;
                case "LP_TRANSPORT_ODER_VERTEILNETZ_ORTSVERTEILNETZ_SIGMOID":
                    return KalkulationsmethodeEnum.LpTransportOderVerteilnetzOrtsverteilnetzSigmoid;
                case "SIGMOID":
                    return KalkulationsmethodeEnum.Sigmoid;
                case "STUFEN":
                    return KalkulationsmethodeEnum.Stufen;
                case "VERBRAUCH_UEBER_SLP_GRENZE_FUNKTIONSBEZOGEN_WEITERE_BERECHNUNG_ALS_LGK":
                    return KalkulationsmethodeEnum.VerbrauchUeberSlpGrenzeFunktionsbezogenWeitereBerechnungAlsLgk;
                case "VORZONEN_GP":
                    return KalkulationsmethodeEnum.VorzonenGp;
                case "ZONEN":
                    return KalkulationsmethodeEnum.Zonen;
            }
            throw new Exception("Cannot unmarshal type KalkulationsmethodeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (KalkulationsmethodeEnum)untypedValue;
            switch (value)
            {
                case KalkulationsmethodeEnum.ApGpZonen:
                    serializer.Serialize(writer, "AP_GP_ZONEN");
                    return;
                case KalkulationsmethodeEnum.ApTransportOderVerteilnetz:
                    serializer.Serialize(writer, "AP_TRANSPORT_ODER_VERTEILNETZ");
                    return;
                case KalkulationsmethodeEnum.ApTransportOderVerteilnetzOrtsverteilnetzSigmoid:
                    serializer.Serialize(writer, "AP_TRANSPORT_ODER_VERTEILNETZ_ORTSVERTEILNETZ_SIGMOID");
                    return;
                case KalkulationsmethodeEnum.BlindarbeitGt40_Prozent:
                    serializer.Serialize(writer, "BLINDARBEIT_GT_40_PROZENT");
                    return;
                case KalkulationsmethodeEnum.BlindarbeitGt50_Prozent:
                    serializer.Serialize(writer, "BLINDARBEIT_GT_50_PROZENT");
                    return;
                case KalkulationsmethodeEnum.BlindarbeitMitFreimenge:
                    serializer.Serialize(writer, "BLINDARBEIT_MIT_FREIMENGE");
                    return;
                case KalkulationsmethodeEnum.Funktionen:
                    serializer.Serialize(writer, "FUNKTIONEN");
                    return;
                case KalkulationsmethodeEnum.LpInstallLeistung:
                    serializer.Serialize(writer, "LP_INSTALL_LEISTUNG");
                    return;
                case KalkulationsmethodeEnum.LpJahresverbrauch:
                    serializer.Serialize(writer, "LP_JAHRESVERBRAUCH");
                    return;
                case KalkulationsmethodeEnum.LpTransportOderVerteilnetz:
                    serializer.Serialize(writer, "LP_TRANSPORT_ODER_VERTEILNETZ");
                    return;
                case KalkulationsmethodeEnum.LpTransportOderVerteilnetzOrtsverteilnetzSigmoid:
                    serializer.Serialize(writer, "LP_TRANSPORT_ODER_VERTEILNETZ_ORTSVERTEILNETZ_SIGMOID");
                    return;
                case KalkulationsmethodeEnum.Sigmoid:
                    serializer.Serialize(writer, "SIGMOID");
                    return;
                case KalkulationsmethodeEnum.Stufen:
                    serializer.Serialize(writer, "STUFEN");
                    return;
                case KalkulationsmethodeEnum.VerbrauchUeberSlpGrenzeFunktionsbezogenWeitereBerechnungAlsLgk:
                    serializer.Serialize(writer, "VERBRAUCH_UEBER_SLP_GRENZE_FUNKTIONSBEZOGEN_WEITERE_BERECHNUNG_ALS_LGK");
                    return;
                case KalkulationsmethodeEnum.VorzonenGp:
                    serializer.Serialize(writer, "VORZONEN_GP");
                    return;
                case KalkulationsmethodeEnum.Zonen:
                    serializer.Serialize(writer, "ZONEN");
                    return;
            }
            throw new Exception("Cannot marshal type KalkulationsmethodeEnum");
        }

        public static readonly KalkulationsmethodeEnumConverter Singleton = new KalkulationsmethodeEnumConverter();
    }
}
