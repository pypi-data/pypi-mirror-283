// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var netznutzungRechnungstyp = NetznutzungRechnungstyp.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Abbildung verschiedener in der INVOIC angegebenen Rechnungstypen.
    /// </summary>
    public enum NetznutzungRechnungstypEnum { Abschlagsrechnung, Abschlussrechnung, Integrierte13TeRechnung, Mehrmindermengenrechnung, Monatsrechnung, Turnusrechnung, Wimrechnung, Zusaetzliche13TeRechnung, Zwischenrechnung };

    public class NetznutzungRechnungstyp
    {
        public static NetznutzungRechnungstypEnum FromJson(string json) => JsonConvert.DeserializeObject<NetznutzungRechnungstypEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this NetznutzungRechnungstypEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                NetznutzungRechnungstypEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class NetznutzungRechnungstypEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(NetznutzungRechnungstypEnum) || t == typeof(NetznutzungRechnungstypEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ABSCHLAGSRECHNUNG":
                    return NetznutzungRechnungstypEnum.Abschlagsrechnung;
                case "ABSCHLUSSRECHNUNG":
                    return NetznutzungRechnungstypEnum.Abschlussrechnung;
                case "INTEGRIERTE_13TE_RECHNUNG":
                    return NetznutzungRechnungstypEnum.Integrierte13TeRechnung;
                case "MEHRMINDERMENGENRECHNUNG":
                    return NetznutzungRechnungstypEnum.Mehrmindermengenrechnung;
                case "MONATSRECHNUNG":
                    return NetznutzungRechnungstypEnum.Monatsrechnung;
                case "TURNUSRECHNUNG":
                    return NetznutzungRechnungstypEnum.Turnusrechnung;
                case "WIMRECHNUNG":
                    return NetznutzungRechnungstypEnum.Wimrechnung;
                case "ZUSAETZLICHE_13TE_RECHNUNG":
                    return NetznutzungRechnungstypEnum.Zusaetzliche13TeRechnung;
                case "ZWISCHENRECHNUNG":
                    return NetznutzungRechnungstypEnum.Zwischenrechnung;
            }
            throw new Exception("Cannot unmarshal type NetznutzungRechnungstypEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (NetznutzungRechnungstypEnum)untypedValue;
            switch (value)
            {
                case NetznutzungRechnungstypEnum.Abschlagsrechnung:
                    serializer.Serialize(writer, "ABSCHLAGSRECHNUNG");
                    return;
                case NetznutzungRechnungstypEnum.Abschlussrechnung:
                    serializer.Serialize(writer, "ABSCHLUSSRECHNUNG");
                    return;
                case NetznutzungRechnungstypEnum.Integrierte13TeRechnung:
                    serializer.Serialize(writer, "INTEGRIERTE_13TE_RECHNUNG");
                    return;
                case NetznutzungRechnungstypEnum.Mehrmindermengenrechnung:
                    serializer.Serialize(writer, "MEHRMINDERMENGENRECHNUNG");
                    return;
                case NetznutzungRechnungstypEnum.Monatsrechnung:
                    serializer.Serialize(writer, "MONATSRECHNUNG");
                    return;
                case NetznutzungRechnungstypEnum.Turnusrechnung:
                    serializer.Serialize(writer, "TURNUSRECHNUNG");
                    return;
                case NetznutzungRechnungstypEnum.Wimrechnung:
                    serializer.Serialize(writer, "WIMRECHNUNG");
                    return;
                case NetznutzungRechnungstypEnum.Zusaetzliche13TeRechnung:
                    serializer.Serialize(writer, "ZUSAETZLICHE_13TE_RECHNUNG");
                    return;
                case NetznutzungRechnungstypEnum.Zwischenrechnung:
                    serializer.Serialize(writer, "ZWISCHENRECHNUNG");
                    return;
            }
            throw new Exception("Cannot marshal type NetznutzungRechnungstypEnum");
        }

        public static readonly NetznutzungRechnungstypEnumConverter Singleton = new NetznutzungRechnungstypEnumConverter();
    }
}
