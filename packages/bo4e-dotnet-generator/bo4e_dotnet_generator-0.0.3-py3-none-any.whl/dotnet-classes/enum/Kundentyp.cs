// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var kundentyp = Kundentyp.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Auflistung der Typen von Endkunden. Daraus kann das Verbrauchsprofil abgeleitet werden.
    /// </summary>
    public enum KundentypEnum { BeleuchtungOeffentlich, BeleuchtungStrasse, Direktheizung, GemeinschaftMfh, Gewerbe, Haushalt, Kirche, Kwk, Ladesaeule, Landwirt, Privat, Sonstige, Speicherheizung, UnterbrEinrichtung, Waermepumpe };

    public class Kundentyp
    {
        public static KundentypEnum FromJson(string json) => JsonConvert.DeserializeObject<KundentypEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this KundentypEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                KundentypEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class KundentypEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(KundentypEnum) || t == typeof(KundentypEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "BELEUCHTUNG_OEFFENTLICH":
                    return KundentypEnum.BeleuchtungOeffentlich;
                case "BELEUCHTUNG_STRASSE":
                    return KundentypEnum.BeleuchtungStrasse;
                case "DIREKTHEIZUNG":
                    return KundentypEnum.Direktheizung;
                case "GEMEINSCHAFT_MFH":
                    return KundentypEnum.GemeinschaftMfh;
                case "GEWERBE":
                    return KundentypEnum.Gewerbe;
                case "HAUSHALT":
                    return KundentypEnum.Haushalt;
                case "KIRCHE":
                    return KundentypEnum.Kirche;
                case "KWK":
                    return KundentypEnum.Kwk;
                case "LADESAEULE":
                    return KundentypEnum.Ladesaeule;
                case "LANDWIRT":
                    return KundentypEnum.Landwirt;
                case "PRIVAT":
                    return KundentypEnum.Privat;
                case "SONSTIGE":
                    return KundentypEnum.Sonstige;
                case "SPEICHERHEIZUNG":
                    return KundentypEnum.Speicherheizung;
                case "UNTERBR_EINRICHTUNG":
                    return KundentypEnum.UnterbrEinrichtung;
                case "WAERMEPUMPE":
                    return KundentypEnum.Waermepumpe;
            }
            throw new Exception("Cannot unmarshal type KundentypEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (KundentypEnum)untypedValue;
            switch (value)
            {
                case KundentypEnum.BeleuchtungOeffentlich:
                    serializer.Serialize(writer, "BELEUCHTUNG_OEFFENTLICH");
                    return;
                case KundentypEnum.BeleuchtungStrasse:
                    serializer.Serialize(writer, "BELEUCHTUNG_STRASSE");
                    return;
                case KundentypEnum.Direktheizung:
                    serializer.Serialize(writer, "DIREKTHEIZUNG");
                    return;
                case KundentypEnum.GemeinschaftMfh:
                    serializer.Serialize(writer, "GEMEINSCHAFT_MFH");
                    return;
                case KundentypEnum.Gewerbe:
                    serializer.Serialize(writer, "GEWERBE");
                    return;
                case KundentypEnum.Haushalt:
                    serializer.Serialize(writer, "HAUSHALT");
                    return;
                case KundentypEnum.Kirche:
                    serializer.Serialize(writer, "KIRCHE");
                    return;
                case KundentypEnum.Kwk:
                    serializer.Serialize(writer, "KWK");
                    return;
                case KundentypEnum.Ladesaeule:
                    serializer.Serialize(writer, "LADESAEULE");
                    return;
                case KundentypEnum.Landwirt:
                    serializer.Serialize(writer, "LANDWIRT");
                    return;
                case KundentypEnum.Privat:
                    serializer.Serialize(writer, "PRIVAT");
                    return;
                case KundentypEnum.Sonstige:
                    serializer.Serialize(writer, "SONSTIGE");
                    return;
                case KundentypEnum.Speicherheizung:
                    serializer.Serialize(writer, "SPEICHERHEIZUNG");
                    return;
                case KundentypEnum.UnterbrEinrichtung:
                    serializer.Serialize(writer, "UNTERBR_EINRICHTUNG");
                    return;
                case KundentypEnum.Waermepumpe:
                    serializer.Serialize(writer, "WAERMEPUMPE");
                    return;
            }
            throw new Exception("Cannot marshal type KundentypEnum");
        }

        public static readonly KundentypEnumConverter Singleton = new KundentypEnumConverter();
    }
}
