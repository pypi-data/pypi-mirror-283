// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var tarifregionskriterium = Tarifregionskriterium.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Mit diesen Kriterien k√∂nnen regionale Bereiche definiert werden.
    /// </summary>
    public enum TarifregionskriteriumEnum { GrundversorgerNummer, NetzNummer, Ort, Postleitzahl, Region };

    public class Tarifregionskriterium
    {
        public static TarifregionskriteriumEnum FromJson(string json) => JsonConvert.DeserializeObject<TarifregionskriteriumEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this TarifregionskriteriumEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                TarifregionskriteriumEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class TarifregionskriteriumEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TarifregionskriteriumEnum) || t == typeof(TarifregionskriteriumEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "GRUNDVERSORGER_NUMMER":
                    return TarifregionskriteriumEnum.GrundversorgerNummer;
                case "NETZ_NUMMER":
                    return TarifregionskriteriumEnum.NetzNummer;
                case "ORT":
                    return TarifregionskriteriumEnum.Ort;
                case "POSTLEITZAHL":
                    return TarifregionskriteriumEnum.Postleitzahl;
                case "REGION":
                    return TarifregionskriteriumEnum.Region;
            }
            throw new Exception("Cannot unmarshal type TarifregionskriteriumEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TarifregionskriteriumEnum)untypedValue;
            switch (value)
            {
                case TarifregionskriteriumEnum.GrundversorgerNummer:
                    serializer.Serialize(writer, "GRUNDVERSORGER_NUMMER");
                    return;
                case TarifregionskriteriumEnum.NetzNummer:
                    serializer.Serialize(writer, "NETZ_NUMMER");
                    return;
                case TarifregionskriteriumEnum.Ort:
                    serializer.Serialize(writer, "ORT");
                    return;
                case TarifregionskriteriumEnum.Postleitzahl:
                    serializer.Serialize(writer, "POSTLEITZAHL");
                    return;
                case TarifregionskriteriumEnum.Region:
                    serializer.Serialize(writer, "REGION");
                    return;
            }
            throw new Exception("Cannot marshal type TarifregionskriteriumEnum");
        }

        public static readonly TarifregionskriteriumEnumConverter Singleton = new TarifregionskriteriumEnumConverter();
    }
}
