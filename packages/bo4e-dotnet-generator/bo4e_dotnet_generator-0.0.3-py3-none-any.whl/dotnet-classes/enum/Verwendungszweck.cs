// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var verwendungszweck = Verwendungszweck.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Verwendungszweck der Werte Marktlokation
    /// </summary>
    public enum VerwendungszweckEnum { Bilanzkreisabrechnung, Endkundenabrechnung, ErmittlungAusgeglichenheitBilanzkreis, Mehrmindermengenabrechnung, Netznutzungsabrechnung, UebermittlungAnDasHknr };

    public class Verwendungszweck
    {
        public static VerwendungszweckEnum FromJson(string json) => JsonConvert.DeserializeObject<VerwendungszweckEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this VerwendungszweckEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                VerwendungszweckEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class VerwendungszweckEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(VerwendungszweckEnum) || t == typeof(VerwendungszweckEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "BILANZKREISABRECHNUNG":
                    return VerwendungszweckEnum.Bilanzkreisabrechnung;
                case "ENDKUNDENABRECHNUNG":
                    return VerwendungszweckEnum.Endkundenabrechnung;
                case "ERMITTLUNG_AUSGEGLICHENHEIT_BILANZKREIS":
                    return VerwendungszweckEnum.ErmittlungAusgeglichenheitBilanzkreis;
                case "MEHRMINDERMENGENABRECHNUNG":
                    return VerwendungszweckEnum.Mehrmindermengenabrechnung;
                case "NETZNUTZUNGSABRECHNUNG":
                    return VerwendungszweckEnum.Netznutzungsabrechnung;
                case "UEBERMITTLUNG_AN_DAS_HKNR":
                    return VerwendungszweckEnum.UebermittlungAnDasHknr;
            }
            throw new Exception("Cannot unmarshal type VerwendungszweckEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (VerwendungszweckEnum)untypedValue;
            switch (value)
            {
                case VerwendungszweckEnum.Bilanzkreisabrechnung:
                    serializer.Serialize(writer, "BILANZKREISABRECHNUNG");
                    return;
                case VerwendungszweckEnum.Endkundenabrechnung:
                    serializer.Serialize(writer, "ENDKUNDENABRECHNUNG");
                    return;
                case VerwendungszweckEnum.ErmittlungAusgeglichenheitBilanzkreis:
                    serializer.Serialize(writer, "ERMITTLUNG_AUSGEGLICHENHEIT_BILANZKREIS");
                    return;
                case VerwendungszweckEnum.Mehrmindermengenabrechnung:
                    serializer.Serialize(writer, "MEHRMINDERMENGENABRECHNUNG");
                    return;
                case VerwendungszweckEnum.Netznutzungsabrechnung:
                    serializer.Serialize(writer, "NETZNUTZUNGSABRECHNUNG");
                    return;
                case VerwendungszweckEnum.UebermittlungAnDasHknr:
                    serializer.Serialize(writer, "UEBERMITTLUNG_AN_DAS_HKNR");
                    return;
            }
            throw new Exception("Cannot marshal type VerwendungszweckEnum");
        }

        public static readonly VerwendungszweckEnumConverter Singleton = new VerwendungszweckEnumConverter();
    }
}
