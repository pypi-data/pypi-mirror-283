// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var ausschreibungsportal = Ausschreibungsportal.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Aufzählung der unterstützten Ausschreibungsportale.
    /// </summary>
    public enum AusschreibungsportalEnum { Bmwi, Bund, Dtad, EnergieAgentur, EnergieHandelsplatz, Energiemarktplatz, Enportal, Evergabe, Ispex, VeraOnline };

    public class Ausschreibungsportal
    {
        public static AusschreibungsportalEnum FromJson(string json) => JsonConvert.DeserializeObject<AusschreibungsportalEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this AusschreibungsportalEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                AusschreibungsportalEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class AusschreibungsportalEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AusschreibungsportalEnum) || t == typeof(AusschreibungsportalEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "BMWI":
                    return AusschreibungsportalEnum.Bmwi;
                case "BUND":
                    return AusschreibungsportalEnum.Bund;
                case "DTAD":
                    return AusschreibungsportalEnum.Dtad;
                case "ENERGIEMARKTPLATZ":
                    return AusschreibungsportalEnum.Energiemarktplatz;
                case "ENERGIE_AGENTUR":
                    return AusschreibungsportalEnum.EnergieAgentur;
                case "ENERGIE_HANDELSPLATZ":
                    return AusschreibungsportalEnum.EnergieHandelsplatz;
                case "ENPORTAL":
                    return AusschreibungsportalEnum.Enportal;
                case "EVERGABE":
                    return AusschreibungsportalEnum.Evergabe;
                case "ISPEX":
                    return AusschreibungsportalEnum.Ispex;
                case "VERA_ONLINE":
                    return AusschreibungsportalEnum.VeraOnline;
            }
            throw new Exception("Cannot unmarshal type AusschreibungsportalEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AusschreibungsportalEnum)untypedValue;
            switch (value)
            {
                case AusschreibungsportalEnum.Bmwi:
                    serializer.Serialize(writer, "BMWI");
                    return;
                case AusschreibungsportalEnum.Bund:
                    serializer.Serialize(writer, "BUND");
                    return;
                case AusschreibungsportalEnum.Dtad:
                    serializer.Serialize(writer, "DTAD");
                    return;
                case AusschreibungsportalEnum.Energiemarktplatz:
                    serializer.Serialize(writer, "ENERGIEMARKTPLATZ");
                    return;
                case AusschreibungsportalEnum.EnergieAgentur:
                    serializer.Serialize(writer, "ENERGIE_AGENTUR");
                    return;
                case AusschreibungsportalEnum.EnergieHandelsplatz:
                    serializer.Serialize(writer, "ENERGIE_HANDELSPLATZ");
                    return;
                case AusschreibungsportalEnum.Enportal:
                    serializer.Serialize(writer, "ENPORTAL");
                    return;
                case AusschreibungsportalEnum.Evergabe:
                    serializer.Serialize(writer, "EVERGABE");
                    return;
                case AusschreibungsportalEnum.Ispex:
                    serializer.Serialize(writer, "ISPEX");
                    return;
                case AusschreibungsportalEnum.VeraOnline:
                    serializer.Serialize(writer, "VERA_ONLINE");
                    return;
            }
            throw new Exception("Cannot marshal type AusschreibungsportalEnum");
        }

        public static readonly AusschreibungsportalEnumConverter Singleton = new AusschreibungsportalEnumConverter();
    }
}
