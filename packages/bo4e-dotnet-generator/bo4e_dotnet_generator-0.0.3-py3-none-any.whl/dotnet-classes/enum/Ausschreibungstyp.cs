// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var ausschreibungstyp = Ausschreibungstyp.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Aufzählung für die Typisierung von Ausschreibungen.
    /// </summary>
    public enum AusschreibungstypEnum { Europaweit, Oeffentlichrechtlich, Privatrechtlich };

    public class Ausschreibungstyp
    {
        public static AusschreibungstypEnum FromJson(string json) => JsonConvert.DeserializeObject<AusschreibungstypEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this AusschreibungstypEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                AusschreibungstypEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class AusschreibungstypEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AusschreibungstypEnum) || t == typeof(AusschreibungstypEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "EUROPAWEIT":
                    return AusschreibungstypEnum.Europaweit;
                case "OEFFENTLICHRECHTLICH":
                    return AusschreibungstypEnum.Oeffentlichrechtlich;
                case "PRIVATRECHTLICH":
                    return AusschreibungstypEnum.Privatrechtlich;
            }
            throw new Exception("Cannot unmarshal type AusschreibungstypEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AusschreibungstypEnum)untypedValue;
            switch (value)
            {
                case AusschreibungstypEnum.Europaweit:
                    serializer.Serialize(writer, "EUROPAWEIT");
                    return;
                case AusschreibungstypEnum.Oeffentlichrechtlich:
                    serializer.Serialize(writer, "OEFFENTLICHRECHTLICH");
                    return;
                case AusschreibungstypEnum.Privatrechtlich:
                    serializer.Serialize(writer, "PRIVATRECHTLICH");
                    return;
            }
            throw new Exception("Cannot marshal type AusschreibungstypEnum");
        }

        public static readonly AusschreibungstypEnumConverter Singleton = new AusschreibungstypEnumConverter();
    }
}
