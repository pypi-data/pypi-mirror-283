// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var marktrolle = Marktrolle.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Diese Rollen kann ein Marktteilnehmer einnehmen.
    /// </summary>
    public enum MarktrolleEnum { Biko, Bkv, Btr, Dp, Eiv, Esa, Kn, Lf, Mgv, Msb, Nb, Rb, Uenb };

    public class Marktrolle
    {
        public static MarktrolleEnum FromJson(string json) => JsonConvert.DeserializeObject<MarktrolleEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this MarktrolleEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                MarktrolleEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class MarktrolleEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(MarktrolleEnum) || t == typeof(MarktrolleEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "BIKO":
                    return MarktrolleEnum.Biko;
                case "BKV":
                    return MarktrolleEnum.Bkv;
                case "BTR":
                    return MarktrolleEnum.Btr;
                case "DP":
                    return MarktrolleEnum.Dp;
                case "EIV":
                    return MarktrolleEnum.Eiv;
                case "ESA":
                    return MarktrolleEnum.Esa;
                case "KN":
                    return MarktrolleEnum.Kn;
                case "LF":
                    return MarktrolleEnum.Lf;
                case "MGV":
                    return MarktrolleEnum.Mgv;
                case "MSB":
                    return MarktrolleEnum.Msb;
                case "NB":
                    return MarktrolleEnum.Nb;
                case "RB":
                    return MarktrolleEnum.Rb;
                case "UENB":
                    return MarktrolleEnum.Uenb;
            }
            throw new Exception("Cannot unmarshal type MarktrolleEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (MarktrolleEnum)untypedValue;
            switch (value)
            {
                case MarktrolleEnum.Biko:
                    serializer.Serialize(writer, "BIKO");
                    return;
                case MarktrolleEnum.Bkv:
                    serializer.Serialize(writer, "BKV");
                    return;
                case MarktrolleEnum.Btr:
                    serializer.Serialize(writer, "BTR");
                    return;
                case MarktrolleEnum.Dp:
                    serializer.Serialize(writer, "DP");
                    return;
                case MarktrolleEnum.Eiv:
                    serializer.Serialize(writer, "EIV");
                    return;
                case MarktrolleEnum.Esa:
                    serializer.Serialize(writer, "ESA");
                    return;
                case MarktrolleEnum.Kn:
                    serializer.Serialize(writer, "KN");
                    return;
                case MarktrolleEnum.Lf:
                    serializer.Serialize(writer, "LF");
                    return;
                case MarktrolleEnum.Mgv:
                    serializer.Serialize(writer, "MGV");
                    return;
                case MarktrolleEnum.Msb:
                    serializer.Serialize(writer, "MSB");
                    return;
                case MarktrolleEnum.Nb:
                    serializer.Serialize(writer, "NB");
                    return;
                case MarktrolleEnum.Rb:
                    serializer.Serialize(writer, "RB");
                    return;
                case MarktrolleEnum.Uenb:
                    serializer.Serialize(writer, "UENB");
                    return;
            }
            throw new Exception("Cannot marshal type MarktrolleEnum");
        }

        public static readonly MarktrolleEnumConverter Singleton = new MarktrolleEnumConverter();
    }
}
