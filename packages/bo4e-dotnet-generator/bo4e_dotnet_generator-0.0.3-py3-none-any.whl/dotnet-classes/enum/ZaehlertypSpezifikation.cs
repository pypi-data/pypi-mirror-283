// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var zaehlertypSpezifikation = ZaehlertypSpezifikation.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Bei diesem Enum handelt es sich um die Abbildung von besonderen ZÃ¤hlertyp-Spezifikationen
    /// der Sparten Strom und Gas.
    /// </summary>
    public enum ZaehlertypSpezifikationEnum { Edl21, Edl40, MmeMeda, MmeStandard, SonstigerEhz };

    public class ZaehlertypSpezifikation
    {
        public static ZaehlertypSpezifikationEnum FromJson(string json) => JsonConvert.DeserializeObject<ZaehlertypSpezifikationEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ZaehlertypSpezifikationEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ZaehlertypSpezifikationEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ZaehlertypSpezifikationEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ZaehlertypSpezifikationEnum) || t == typeof(ZaehlertypSpezifikationEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "EDL21":
                    return ZaehlertypSpezifikationEnum.Edl21;
                case "EDL40":
                    return ZaehlertypSpezifikationEnum.Edl40;
                case "MME_MEDA":
                    return ZaehlertypSpezifikationEnum.MmeMeda;
                case "MME_STANDARD":
                    return ZaehlertypSpezifikationEnum.MmeStandard;
                case "SONSTIGER_EHZ":
                    return ZaehlertypSpezifikationEnum.SonstigerEhz;
            }
            throw new Exception("Cannot unmarshal type ZaehlertypSpezifikationEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ZaehlertypSpezifikationEnum)untypedValue;
            switch (value)
            {
                case ZaehlertypSpezifikationEnum.Edl21:
                    serializer.Serialize(writer, "EDL21");
                    return;
                case ZaehlertypSpezifikationEnum.Edl40:
                    serializer.Serialize(writer, "EDL40");
                    return;
                case ZaehlertypSpezifikationEnum.MmeMeda:
                    serializer.Serialize(writer, "MME_MEDA");
                    return;
                case ZaehlertypSpezifikationEnum.MmeStandard:
                    serializer.Serialize(writer, "MME_STANDARD");
                    return;
                case ZaehlertypSpezifikationEnum.SonstigerEhz:
                    serializer.Serialize(writer, "SONSTIGER_EHZ");
                    return;
            }
            throw new Exception("Cannot marshal type ZaehlertypSpezifikationEnum");
        }

        public static readonly ZaehlertypSpezifikationEnumConverter Singleton = new ZaehlertypSpezifikationEnumConverter();
    }
}
