// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var regionskriteriumtyp = Regionskriteriumtyp.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Klassifizierung der Kriterien f√ºr eine regionale Eingrenzung.
    /// </summary>
    public enum RegionskriteriumtypEnum { BilanzierungsGebietNummer, BundeslandName, Bundeslandkennziffer, Bundesweit, EinwohnerzahlGemeinde, EinwohnerzahlOrt, GemeindeName, Gemeindekennziffer, GrundversorgerNameGas, GrundversorgerNameStrom, GrundversorgerNummerGas, GrundversorgerNummerStrom, KmUmkreis, KreisName, Kreiskennziffer, MarktgebietName, MarktgebietNummer, MsbName, MsbNummer, NetzGas, NetzStrom, NetzbetreiberNameGas, NetzbetreiberNameStrom, NetzbetreiberNummerGas, NetzbetreiberNummerStrom, Ort, PlzBereich, Postleitzahl, Postort, RegelgebietName, RegelgebietNummer, VersorgerName, VersorgerNummer };

    public class Regionskriteriumtyp
    {
        public static RegionskriteriumtypEnum FromJson(string json) => JsonConvert.DeserializeObject<RegionskriteriumtypEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this RegionskriteriumtypEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                RegionskriteriumtypEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class RegionskriteriumtypEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(RegionskriteriumtypEnum) || t == typeof(RegionskriteriumtypEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "BILANZIERUNGS_GEBIET_NUMMER":
                    return RegionskriteriumtypEnum.BilanzierungsGebietNummer;
                case "BUNDESLANDKENNZIFFER":
                    return RegionskriteriumtypEnum.Bundeslandkennziffer;
                case "BUNDESLAND_NAME":
                    return RegionskriteriumtypEnum.BundeslandName;
                case "BUNDESWEIT":
                    return RegionskriteriumtypEnum.Bundesweit;
                case "EINWOHNERZAHL_GEMEINDE":
                    return RegionskriteriumtypEnum.EinwohnerzahlGemeinde;
                case "EINWOHNERZAHL_ORT":
                    return RegionskriteriumtypEnum.EinwohnerzahlOrt;
                case "GEMEINDEKENNZIFFER":
                    return RegionskriteriumtypEnum.Gemeindekennziffer;
                case "GEMEINDE_NAME":
                    return RegionskriteriumtypEnum.GemeindeName;
                case "GRUNDVERSORGER_NAME_GAS":
                    return RegionskriteriumtypEnum.GrundversorgerNameGas;
                case "GRUNDVERSORGER_NAME_STROM":
                    return RegionskriteriumtypEnum.GrundversorgerNameStrom;
                case "GRUNDVERSORGER_NUMMER_GAS":
                    return RegionskriteriumtypEnum.GrundversorgerNummerGas;
                case "GRUNDVERSORGER_NUMMER_STROM":
                    return RegionskriteriumtypEnum.GrundversorgerNummerStrom;
                case "KM_UMKREIS":
                    return RegionskriteriumtypEnum.KmUmkreis;
                case "KREISKENNZIFFER":
                    return RegionskriteriumtypEnum.Kreiskennziffer;
                case "KREIS_NAME":
                    return RegionskriteriumtypEnum.KreisName;
                case "MARKTGEBIET_NAME":
                    return RegionskriteriumtypEnum.MarktgebietName;
                case "MARKTGEBIET_NUMMER":
                    return RegionskriteriumtypEnum.MarktgebietNummer;
                case "MSB_NAME":
                    return RegionskriteriumtypEnum.MsbName;
                case "MSB_NUMMER":
                    return RegionskriteriumtypEnum.MsbNummer;
                case "NETZBETREIBER_NAME_GAS":
                    return RegionskriteriumtypEnum.NetzbetreiberNameGas;
                case "NETZBETREIBER_NAME_STROM":
                    return RegionskriteriumtypEnum.NetzbetreiberNameStrom;
                case "NETZBETREIBER_NUMMER_GAS":
                    return RegionskriteriumtypEnum.NetzbetreiberNummerGas;
                case "NETZBETREIBER_NUMMER_STROM":
                    return RegionskriteriumtypEnum.NetzbetreiberNummerStrom;
                case "NETZ_GAS":
                    return RegionskriteriumtypEnum.NetzGas;
                case "NETZ_STROM":
                    return RegionskriteriumtypEnum.NetzStrom;
                case "ORT":
                    return RegionskriteriumtypEnum.Ort;
                case "PLZ_BEREICH":
                    return RegionskriteriumtypEnum.PlzBereich;
                case "POSTLEITZAHL":
                    return RegionskriteriumtypEnum.Postleitzahl;
                case "POSTORT":
                    return RegionskriteriumtypEnum.Postort;
                case "REGELGEBIET_NAME":
                    return RegionskriteriumtypEnum.RegelgebietName;
                case "REGELGEBIET_NUMMER":
                    return RegionskriteriumtypEnum.RegelgebietNummer;
                case "VERSORGER_NAME":
                    return RegionskriteriumtypEnum.VersorgerName;
                case "VERSORGER_NUMMER":
                    return RegionskriteriumtypEnum.VersorgerNummer;
            }
            throw new Exception("Cannot unmarshal type RegionskriteriumtypEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (RegionskriteriumtypEnum)untypedValue;
            switch (value)
            {
                case RegionskriteriumtypEnum.BilanzierungsGebietNummer:
                    serializer.Serialize(writer, "BILANZIERUNGS_GEBIET_NUMMER");
                    return;
                case RegionskriteriumtypEnum.Bundeslandkennziffer:
                    serializer.Serialize(writer, "BUNDESLANDKENNZIFFER");
                    return;
                case RegionskriteriumtypEnum.BundeslandName:
                    serializer.Serialize(writer, "BUNDESLAND_NAME");
                    return;
                case RegionskriteriumtypEnum.Bundesweit:
                    serializer.Serialize(writer, "BUNDESWEIT");
                    return;
                case RegionskriteriumtypEnum.EinwohnerzahlGemeinde:
                    serializer.Serialize(writer, "EINWOHNERZAHL_GEMEINDE");
                    return;
                case RegionskriteriumtypEnum.EinwohnerzahlOrt:
                    serializer.Serialize(writer, "EINWOHNERZAHL_ORT");
                    return;
                case RegionskriteriumtypEnum.Gemeindekennziffer:
                    serializer.Serialize(writer, "GEMEINDEKENNZIFFER");
                    return;
                case RegionskriteriumtypEnum.GemeindeName:
                    serializer.Serialize(writer, "GEMEINDE_NAME");
                    return;
                case RegionskriteriumtypEnum.GrundversorgerNameGas:
                    serializer.Serialize(writer, "GRUNDVERSORGER_NAME_GAS");
                    return;
                case RegionskriteriumtypEnum.GrundversorgerNameStrom:
                    serializer.Serialize(writer, "GRUNDVERSORGER_NAME_STROM");
                    return;
                case RegionskriteriumtypEnum.GrundversorgerNummerGas:
                    serializer.Serialize(writer, "GRUNDVERSORGER_NUMMER_GAS");
                    return;
                case RegionskriteriumtypEnum.GrundversorgerNummerStrom:
                    serializer.Serialize(writer, "GRUNDVERSORGER_NUMMER_STROM");
                    return;
                case RegionskriteriumtypEnum.KmUmkreis:
                    serializer.Serialize(writer, "KM_UMKREIS");
                    return;
                case RegionskriteriumtypEnum.Kreiskennziffer:
                    serializer.Serialize(writer, "KREISKENNZIFFER");
                    return;
                case RegionskriteriumtypEnum.KreisName:
                    serializer.Serialize(writer, "KREIS_NAME");
                    return;
                case RegionskriteriumtypEnum.MarktgebietName:
                    serializer.Serialize(writer, "MARKTGEBIET_NAME");
                    return;
                case RegionskriteriumtypEnum.MarktgebietNummer:
                    serializer.Serialize(writer, "MARKTGEBIET_NUMMER");
                    return;
                case RegionskriteriumtypEnum.MsbName:
                    serializer.Serialize(writer, "MSB_NAME");
                    return;
                case RegionskriteriumtypEnum.MsbNummer:
                    serializer.Serialize(writer, "MSB_NUMMER");
                    return;
                case RegionskriteriumtypEnum.NetzbetreiberNameGas:
                    serializer.Serialize(writer, "NETZBETREIBER_NAME_GAS");
                    return;
                case RegionskriteriumtypEnum.NetzbetreiberNameStrom:
                    serializer.Serialize(writer, "NETZBETREIBER_NAME_STROM");
                    return;
                case RegionskriteriumtypEnum.NetzbetreiberNummerGas:
                    serializer.Serialize(writer, "NETZBETREIBER_NUMMER_GAS");
                    return;
                case RegionskriteriumtypEnum.NetzbetreiberNummerStrom:
                    serializer.Serialize(writer, "NETZBETREIBER_NUMMER_STROM");
                    return;
                case RegionskriteriumtypEnum.NetzGas:
                    serializer.Serialize(writer, "NETZ_GAS");
                    return;
                case RegionskriteriumtypEnum.NetzStrom:
                    serializer.Serialize(writer, "NETZ_STROM");
                    return;
                case RegionskriteriumtypEnum.Ort:
                    serializer.Serialize(writer, "ORT");
                    return;
                case RegionskriteriumtypEnum.PlzBereich:
                    serializer.Serialize(writer, "PLZ_BEREICH");
                    return;
                case RegionskriteriumtypEnum.Postleitzahl:
                    serializer.Serialize(writer, "POSTLEITZAHL");
                    return;
                case RegionskriteriumtypEnum.Postort:
                    serializer.Serialize(writer, "POSTORT");
                    return;
                case RegionskriteriumtypEnum.RegelgebietName:
                    serializer.Serialize(writer, "REGELGEBIET_NAME");
                    return;
                case RegionskriteriumtypEnum.RegelgebietNummer:
                    serializer.Serialize(writer, "REGELGEBIET_NUMMER");
                    return;
                case RegionskriteriumtypEnum.VersorgerName:
                    serializer.Serialize(writer, "VERSORGER_NAME");
                    return;
                case RegionskriteriumtypEnum.VersorgerNummer:
                    serializer.Serialize(writer, "VERSORGER_NUMMER");
                    return;
            }
            throw new Exception("Cannot marshal type RegionskriteriumtypEnum");
        }

        public static readonly RegionskriteriumtypEnumConverter Singleton = new RegionskriteriumtypEnumConverter();
    }
}
