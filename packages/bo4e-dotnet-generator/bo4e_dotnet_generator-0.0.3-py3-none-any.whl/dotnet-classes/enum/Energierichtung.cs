// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var energierichtung = Energierichtung.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Spezifiziert die Energierichtung einer Markt- und/oder Messlokation
    /// </summary>
    public enum EnergierichtungEnum { Aussp, Einsp };

    public class Energierichtung
    {
        public static EnergierichtungEnum FromJson(string json) => JsonConvert.DeserializeObject<EnergierichtungEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this EnergierichtungEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                EnergierichtungEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class EnergierichtungEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(EnergierichtungEnum) || t == typeof(EnergierichtungEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "AUSSP":
                    return EnergierichtungEnum.Aussp;
                case "EINSP":
                    return EnergierichtungEnum.Einsp;
            }
            throw new Exception("Cannot unmarshal type EnergierichtungEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (EnergierichtungEnum)untypedValue;
            switch (value)
            {
                case EnergierichtungEnum.Aussp:
                    serializer.Serialize(writer, "AUSSP");
                    return;
                case EnergierichtungEnum.Einsp:
                    serializer.Serialize(writer, "EINSP");
                    return;
            }
            throw new Exception("Cannot marshal type EnergierichtungEnum");
        }

        public static readonly EnergierichtungEnumConverter Singleton = new EnergierichtungEnumConverter();
    }
}
