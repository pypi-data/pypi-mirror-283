// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var steuerkennzeichen = Steuerkennzeichen.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Zur Kennzeichnung verschiedener Steuers√§tze und Verfahren.
    /// </summary>
    public enum SteuerkennzeichenEnum { Rcv, Ust0, Ust16, Ust19, Ust7, Vst0, Vst16, Vst19, Vst7 };

    public class Steuerkennzeichen
    {
        public static SteuerkennzeichenEnum FromJson(string json) => JsonConvert.DeserializeObject<SteuerkennzeichenEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this SteuerkennzeichenEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                SteuerkennzeichenEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class SteuerkennzeichenEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SteuerkennzeichenEnum) || t == typeof(SteuerkennzeichenEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "RCV":
                    return SteuerkennzeichenEnum.Rcv;
                case "UST_0":
                    return SteuerkennzeichenEnum.Ust0;
                case "UST_16":
                    return SteuerkennzeichenEnum.Ust16;
                case "UST_19":
                    return SteuerkennzeichenEnum.Ust19;
                case "UST_7":
                    return SteuerkennzeichenEnum.Ust7;
                case "VST_0":
                    return SteuerkennzeichenEnum.Vst0;
                case "VST_16":
                    return SteuerkennzeichenEnum.Vst16;
                case "VST_19":
                    return SteuerkennzeichenEnum.Vst19;
                case "VST_7":
                    return SteuerkennzeichenEnum.Vst7;
            }
            throw new Exception("Cannot unmarshal type SteuerkennzeichenEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (SteuerkennzeichenEnum)untypedValue;
            switch (value)
            {
                case SteuerkennzeichenEnum.Rcv:
                    serializer.Serialize(writer, "RCV");
                    return;
                case SteuerkennzeichenEnum.Ust0:
                    serializer.Serialize(writer, "UST_0");
                    return;
                case SteuerkennzeichenEnum.Ust16:
                    serializer.Serialize(writer, "UST_16");
                    return;
                case SteuerkennzeichenEnum.Ust19:
                    serializer.Serialize(writer, "UST_19");
                    return;
                case SteuerkennzeichenEnum.Ust7:
                    serializer.Serialize(writer, "UST_7");
                    return;
                case SteuerkennzeichenEnum.Vst0:
                    serializer.Serialize(writer, "VST_0");
                    return;
                case SteuerkennzeichenEnum.Vst16:
                    serializer.Serialize(writer, "VST_16");
                    return;
                case SteuerkennzeichenEnum.Vst19:
                    serializer.Serialize(writer, "VST_19");
                    return;
                case SteuerkennzeichenEnum.Vst7:
                    serializer.Serialize(writer, "VST_7");
                    return;
            }
            throw new Exception("Cannot marshal type SteuerkennzeichenEnum");
        }

        public static readonly SteuerkennzeichenEnumConverter Singleton = new SteuerkennzeichenEnumConverter();
    }
}
