// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var tarifmerkmal = Tarifmerkmal.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Produktmerkmale im Zusammenhang mit der Tarifdefinition.
    /// </summary>
    public enum TarifmerkmalEnum { Baustrom, Festpreis, Hauslicht, Heizstrom, Kombi, Online, Paket, Standard, Vorkasse };

    public class Tarifmerkmal
    {
        public static TarifmerkmalEnum FromJson(string json) => JsonConvert.DeserializeObject<TarifmerkmalEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this TarifmerkmalEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                TarifmerkmalEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class TarifmerkmalEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TarifmerkmalEnum) || t == typeof(TarifmerkmalEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "BAUSTROM":
                    return TarifmerkmalEnum.Baustrom;
                case "FESTPREIS":
                    return TarifmerkmalEnum.Festpreis;
                case "HAUSLICHT":
                    return TarifmerkmalEnum.Hauslicht;
                case "HEIZSTROM":
                    return TarifmerkmalEnum.Heizstrom;
                case "KOMBI":
                    return TarifmerkmalEnum.Kombi;
                case "ONLINE":
                    return TarifmerkmalEnum.Online;
                case "PAKET":
                    return TarifmerkmalEnum.Paket;
                case "STANDARD":
                    return TarifmerkmalEnum.Standard;
                case "VORKASSE":
                    return TarifmerkmalEnum.Vorkasse;
            }
            throw new Exception("Cannot unmarshal type TarifmerkmalEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TarifmerkmalEnum)untypedValue;
            switch (value)
            {
                case TarifmerkmalEnum.Baustrom:
                    serializer.Serialize(writer, "BAUSTROM");
                    return;
                case TarifmerkmalEnum.Festpreis:
                    serializer.Serialize(writer, "FESTPREIS");
                    return;
                case TarifmerkmalEnum.Hauslicht:
                    serializer.Serialize(writer, "HAUSLICHT");
                    return;
                case TarifmerkmalEnum.Heizstrom:
                    serializer.Serialize(writer, "HEIZSTROM");
                    return;
                case TarifmerkmalEnum.Kombi:
                    serializer.Serialize(writer, "KOMBI");
                    return;
                case TarifmerkmalEnum.Online:
                    serializer.Serialize(writer, "ONLINE");
                    return;
                case TarifmerkmalEnum.Paket:
                    serializer.Serialize(writer, "PAKET");
                    return;
                case TarifmerkmalEnum.Standard:
                    serializer.Serialize(writer, "STANDARD");
                    return;
                case TarifmerkmalEnum.Vorkasse:
                    serializer.Serialize(writer, "VORKASSE");
                    return;
            }
            throw new Exception("Cannot marshal type TarifmerkmalEnum");
        }

        public static readonly TarifmerkmalEnumConverter Singleton = new TarifmerkmalEnumConverter();
    }
}
