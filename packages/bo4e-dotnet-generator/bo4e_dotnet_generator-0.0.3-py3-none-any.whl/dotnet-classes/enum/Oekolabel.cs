// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var oekolabel = Oekolabel.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Aufzählung der Labels für Öko-Strom von verschiedenen Herausgebern.
    /// </summary>
    public enum OekolabelEnum { Energreen, Gasgreen, GasgreenGruenerStrom, GruenerStrom, GruenerStromGold, GruenerStromSilber, GruenesGas, NaturwattStrom, OkPower, RenewablePlus, Watergreen, WatergreenPlus };

    public class Oekolabel
    {
        public static OekolabelEnum FromJson(string json) => JsonConvert.DeserializeObject<OekolabelEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this OekolabelEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                OekolabelEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class OekolabelEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(OekolabelEnum) || t == typeof(OekolabelEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ENERGREEN":
                    return OekolabelEnum.Energreen;
                case "GASGREEN":
                    return OekolabelEnum.Gasgreen;
                case "GASGREEN_GRUENER_STROM":
                    return OekolabelEnum.GasgreenGruenerStrom;
                case "GRUENER_STROM":
                    return OekolabelEnum.GruenerStrom;
                case "GRUENER_STROM_GOLD":
                    return OekolabelEnum.GruenerStromGold;
                case "GRUENER_STROM_SILBER":
                    return OekolabelEnum.GruenerStromSilber;
                case "GRUENES_GAS":
                    return OekolabelEnum.GruenesGas;
                case "NATURWATT_STROM":
                    return OekolabelEnum.NaturwattStrom;
                case "OK_POWER":
                    return OekolabelEnum.OkPower;
                case "RENEWABLE_PLUS":
                    return OekolabelEnum.RenewablePlus;
                case "WATERGREEN":
                    return OekolabelEnum.Watergreen;
                case "WATERGREEN_PLUS":
                    return OekolabelEnum.WatergreenPlus;
            }
            throw new Exception("Cannot unmarshal type OekolabelEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (OekolabelEnum)untypedValue;
            switch (value)
            {
                case OekolabelEnum.Energreen:
                    serializer.Serialize(writer, "ENERGREEN");
                    return;
                case OekolabelEnum.Gasgreen:
                    serializer.Serialize(writer, "GASGREEN");
                    return;
                case OekolabelEnum.GasgreenGruenerStrom:
                    serializer.Serialize(writer, "GASGREEN_GRUENER_STROM");
                    return;
                case OekolabelEnum.GruenerStrom:
                    serializer.Serialize(writer, "GRUENER_STROM");
                    return;
                case OekolabelEnum.GruenerStromGold:
                    serializer.Serialize(writer, "GRUENER_STROM_GOLD");
                    return;
                case OekolabelEnum.GruenerStromSilber:
                    serializer.Serialize(writer, "GRUENER_STROM_SILBER");
                    return;
                case OekolabelEnum.GruenesGas:
                    serializer.Serialize(writer, "GRUENES_GAS");
                    return;
                case OekolabelEnum.NaturwattStrom:
                    serializer.Serialize(writer, "NATURWATT_STROM");
                    return;
                case OekolabelEnum.OkPower:
                    serializer.Serialize(writer, "OK_POWER");
                    return;
                case OekolabelEnum.RenewablePlus:
                    serializer.Serialize(writer, "RENEWABLE_PLUS");
                    return;
                case OekolabelEnum.Watergreen:
                    serializer.Serialize(writer, "WATERGREEN");
                    return;
                case OekolabelEnum.WatergreenPlus:
                    serializer.Serialize(writer, "WATERGREEN_PLUS");
                    return;
            }
            throw new Exception("Cannot marshal type OekolabelEnum");
        }

        public static readonly OekolabelEnumConverter Singleton = new OekolabelEnumConverter();
    }
}
