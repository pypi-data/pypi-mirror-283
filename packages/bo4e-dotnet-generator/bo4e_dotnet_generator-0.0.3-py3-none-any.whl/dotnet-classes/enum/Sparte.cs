// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var sparte = Sparte.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Unterscheidungsmöglichkeiten für die Sparte.
    /// </summary>
    public enum SparteEnum { Abwasser, Fernwaerme, Gas, Nahwaerme, Strom, StromUndGas, Wasser };

    public class Sparte
    {
        public static SparteEnum FromJson(string json) => JsonConvert.DeserializeObject<SparteEnum>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this SparteEnum self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                SparteEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class SparteEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SparteEnum) || t == typeof(SparteEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ABWASSER":
                    return SparteEnum.Abwasser;
                case "FERNWAERME":
                    return SparteEnum.Fernwaerme;
                case "GAS":
                    return SparteEnum.Gas;
                case "NAHWAERME":
                    return SparteEnum.Nahwaerme;
                case "STROM":
                    return SparteEnum.Strom;
                case "STROM_UND_GAS":
                    return SparteEnum.StromUndGas;
                case "WASSER":
                    return SparteEnum.Wasser;
            }
            throw new Exception("Cannot unmarshal type SparteEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (SparteEnum)untypedValue;
            switch (value)
            {
                case SparteEnum.Abwasser:
                    serializer.Serialize(writer, "ABWASSER");
                    return;
                case SparteEnum.Fernwaerme:
                    serializer.Serialize(writer, "FERNWAERME");
                    return;
                case SparteEnum.Gas:
                    serializer.Serialize(writer, "GAS");
                    return;
                case SparteEnum.Nahwaerme:
                    serializer.Serialize(writer, "NAHWAERME");
                    return;
                case SparteEnum.Strom:
                    serializer.Serialize(writer, "STROM");
                    return;
                case SparteEnum.StromUndGas:
                    serializer.Serialize(writer, "STROM_UND_GAS");
                    return;
                case SparteEnum.Wasser:
                    serializer.Serialize(writer, "WASSER");
                    return;
            }
            throw new Exception("Cannot marshal type SparteEnum");
        }

        public static readonly SparteEnumConverter Singleton = new SparteEnumConverter();
    }
}
