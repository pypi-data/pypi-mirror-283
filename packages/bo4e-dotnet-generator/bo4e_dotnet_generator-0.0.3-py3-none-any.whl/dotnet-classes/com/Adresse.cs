// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var adresse = Adresse.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Contains an address that can be used for most purposes.
    ///
    /// .. raw:: html
    ///
    /// <object data="../_static/images/bo4e/com/Adresse.svg" type="image/svg+xml"></object>
    ///
    /// .. HINT::
    /// `Adresse JSON Schema
    /// <https://json-schema.app/view/%23?url=https://raw.githubusercontent.com/BO4E/BO4E-Schemas/v202401.2.1/src/bo4e_schemas/com/Adresse.json>`_
    /// </summary>
    public partial class Adresse
    {
        /// <summary>
        /// zusatz_attribute: Optional[list["ZusatzAttribut"]] = None
        ///
        /// # pylint: disable=duplicate-code
        /// model_config = ConfigDict(
        /// alias_generator=camelize,
        /// populate_by_name=True,
        /// extra="allow",
        /// # json_encoders is deprecated, but there is no easy-to-use alternative. The best way
        /// would be to create
        /// # an annotated version of Decimal, but you would have to use it everywhere in the
        /// pydantic models.
        /// # See this issue for more info: https://github.com/pydantic/pydantic/issues/6375
        /// json_encoders={Decimal: str},
        /// )
        /// </summary>
        [JsonProperty("_id")]
        public string Id { get; set; }

        /// <summary>
        /// Version der BO-Struktur aka "fachliche Versionierung"
        /// </summary>
        [JsonProperty("_version")]
        public string Version { get; set; }

        /// <summary>
        /// Zusatzhinweis zum Auffinden der Adresse, z.B. "3. Stock linke Wohnung"
        /// </summary>
        [JsonProperty("adresszusatz")]
        public string Adresszusatz { get; set; }

        /// <summary>
        /// Im Falle einer c/o-Adresse steht in diesem Attribut die Anrede. Z.B. "c/o Veronica
        /// Hauptmieterin"
        /// </summary>
        [JsonProperty("coErgaenzung")]
        public string CoErgaenzung { get; set; }

        /// <summary>
        /// Hausnummer inkl. Zusatz; z.B. "3", "4a"
        /// </summary>
        [JsonProperty("hausnummer")]
        public string Hausnummer { get; set; }

        /// <summary>
        /// Offizieller ISO-Landescode
        /// </summary>
        [JsonProperty("landescode")]
        public Landescode? Landescode { get; set; }

        /// <summary>
        /// Bezeichnung der Stadt; z.B. "Hückelhoven"
        /// </summary>
        [JsonProperty("ort")]
        public string Ort { get; set; }

        /// <summary>
        /// Bezeichnung des Ortsteils; z.B. "Mitte"
        /// </summary>
        [JsonProperty("ortsteil")]
        public string Ortsteil { get; set; }

        /// <summary>
        /// Im Falle einer Postfachadresse das Postfach; Damit werden Straße und Hausnummer nicht
        /// berücksichtigt
        /// </summary>
        [JsonProperty("postfach")]
        public string Postfach { get; set; }

        /// <summary>
        /// Die Postleitzahl; z.B: "41836"
        /// </summary>
        [JsonProperty("postleitzahl")]
        public string Postleitzahl { get; set; }

        /// <summary>
        /// Bezeichnung der Straße; z.B. "Weserstraße"
        /// </summary>
        [JsonProperty("strasse")]
        public string Strasse { get; set; }

        [JsonProperty("zusatzAttribute")]
        public ZusatzAttribut[] ZusatzAttribute { get; set; }
    }

    /// <summary>
    /// Viele Datenobjekte weisen in unterschiedlichen Systemen eine eindeutige ID (Kundennummer,
    /// GP-Nummer etc.) auf.
    /// Beim Austausch von Datenobjekten zwischen verschiedenen Systemen ist es daher hilfreich,
    /// sich die eindeutigen IDs der anzubindenden Systeme zu merken.
    ///
    /// .. raw:: html
    ///
    /// <object data="../_static/images/bo4e/com/ZusatzAttribut.svg"
    /// type="image/svg+xml"></object>
    ///
    /// .. HINT::
    /// `ZusatzAttribut JSON Schema
    /// <https://json-schema.app/view/%23?url=https://raw.githubusercontent.com/BO4E/BO4E-Schemas/v202401.2.1/src/bo4e_schemas/ZusatzAttribut.json>`_
    /// </summary>
    public partial class ZusatzAttribut
    {
        /// <summary>
        /// Bezeichnung der externen Referenz (z.B. "microservice xyz" oder "SAP CRM GP-Nummer")
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>
        /// Bezeichnung der externen Referenz (z.B. "microservice xyz" oder "SAP CRM GP-Nummer")
        /// </summary>
        [JsonProperty("wert")]
        public object Wert { get; set; }
    }

    public enum Landescode { Ad, Ae, Af, Ag, Ai, Al, Am, Ao, Aq, Ar, As, At, Au, Aw, Ax, Az, Ba, Bb, Bd, Be, Bf, Bg, Bh, Bi, Bj, Bl, Bm, Bn, Bo, Bq, Br, Bs, Bt, Bv, Bw, By, Bz, Ca, Cc, Cd, Cf, Cg, Ch, Ci, Ck, Cl, Cm, Cn, Co, Cr, Cu, Cv, Cw, Cx, Cy, Cz, De, Dj, Dk, Dm, Do, Dz, Ec, Ee, Eg, Eh, Er, Es, Et, Fi, Fj, Fk, Fm, Fo, Fr, Ga, Gb, Gd, Ge, Gf, Gg, Gh, Gi, Gl, Gm, Gn, Gp, Gq, Gr, Gs, Gt, Gu, Gw, Gy, Hk, Hm, Hn, Hr, Ht, Hu, Id, Ie, Il, Im, In, Io, Iq, Ir, Is, It, Je, Jm, Jo, Jp, Ke, Kg, Kh, Ki, Km, Kn, Kp, Kr, Kw, Ky, Kz, La, Lb, Lc, Li, Lk, Lr, Ls, Lt, Lu, Lv, Ly, Ma, Mc, Md, Me, Mf, Mg, Mh, Mk, Ml, Mm, Mn, Mo, Mp, Mq, Mr, Ms, Mt, Mu, Mv, Mw, Mx, My, Mz, Na, Nc, Ne, Nf, Ng, Ni, Nl, No, Np, Nr, Nu, Nz, Om, Pa, Pe, Pf, Pg, Ph, Pk, Pl, Pm, Pn, Pr, Ps, Pt, Pw, Py, Qa, Re, Ro, Rs, Ru, Rw, Sa, Sb, Sc, Sd, Se, Sg, Sh, Si, Sj, Sk, Sl, Sm, Sn, So, Sr, Ss, St, Sv, Sx, Sy, Sz, Tc, Td, Tf, Tg, Th, Tj, Tk, Tl, Tm, Tn, To, Tr, Tt, Tv, Tw, Tz, Ua, Ug, Um, Us, Uy, Uz, Va, Vc, Ve, Vg, Vi, Vn, Vu, Wf, Ws, Xk, Ye, Yt, Za, Zm, Zw };

    public partial class Adresse
    {
        public static Adresse FromJson(string json) => JsonConvert.DeserializeObject<Adresse>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Adresse self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                LandescodeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class LandescodeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Landescode) || t == typeof(Landescode?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "AD":
                    return Landescode.Ad;
                case "AE":
                    return Landescode.Ae;
                case "AF":
                    return Landescode.Af;
                case "AG":
                    return Landescode.Ag;
                case "AI":
                    return Landescode.Ai;
                case "AL":
                    return Landescode.Al;
                case "AM":
                    return Landescode.Am;
                case "AO":
                    return Landescode.Ao;
                case "AQ":
                    return Landescode.Aq;
                case "AR":
                    return Landescode.Ar;
                case "AS":
                    return Landescode.As;
                case "AT":
                    return Landescode.At;
                case "AU":
                    return Landescode.Au;
                case "AW":
                    return Landescode.Aw;
                case "AX":
                    return Landescode.Ax;
                case "AZ":
                    return Landescode.Az;
                case "BA":
                    return Landescode.Ba;
                case "BB":
                    return Landescode.Bb;
                case "BD":
                    return Landescode.Bd;
                case "BE":
                    return Landescode.Be;
                case "BF":
                    return Landescode.Bf;
                case "BG":
                    return Landescode.Bg;
                case "BH":
                    return Landescode.Bh;
                case "BI":
                    return Landescode.Bi;
                case "BJ":
                    return Landescode.Bj;
                case "BL":
                    return Landescode.Bl;
                case "BM":
                    return Landescode.Bm;
                case "BN":
                    return Landescode.Bn;
                case "BO":
                    return Landescode.Bo;
                case "BQ":
                    return Landescode.Bq;
                case "BR":
                    return Landescode.Br;
                case "BS":
                    return Landescode.Bs;
                case "BT":
                    return Landescode.Bt;
                case "BV":
                    return Landescode.Bv;
                case "BW":
                    return Landescode.Bw;
                case "BY":
                    return Landescode.By;
                case "BZ":
                    return Landescode.Bz;
                case "CA":
                    return Landescode.Ca;
                case "CC":
                    return Landescode.Cc;
                case "CD":
                    return Landescode.Cd;
                case "CF":
                    return Landescode.Cf;
                case "CG":
                    return Landescode.Cg;
                case "CH":
                    return Landescode.Ch;
                case "CI":
                    return Landescode.Ci;
                case "CK":
                    return Landescode.Ck;
                case "CL":
                    return Landescode.Cl;
                case "CM":
                    return Landescode.Cm;
                case "CN":
                    return Landescode.Cn;
                case "CO":
                    return Landescode.Co;
                case "CR":
                    return Landescode.Cr;
                case "CU":
                    return Landescode.Cu;
                case "CV":
                    return Landescode.Cv;
                case "CW":
                    return Landescode.Cw;
                case "CX":
                    return Landescode.Cx;
                case "CY":
                    return Landescode.Cy;
                case "CZ":
                    return Landescode.Cz;
                case "DE":
                    return Landescode.De;
                case "DJ":
                    return Landescode.Dj;
                case "DK":
                    return Landescode.Dk;
                case "DM":
                    return Landescode.Dm;
                case "DO":
                    return Landescode.Do;
                case "DZ":
                    return Landescode.Dz;
                case "EC":
                    return Landescode.Ec;
                case "EE":
                    return Landescode.Ee;
                case "EG":
                    return Landescode.Eg;
                case "EH":
                    return Landescode.Eh;
                case "ER":
                    return Landescode.Er;
                case "ES":
                    return Landescode.Es;
                case "ET":
                    return Landescode.Et;
                case "FI":
                    return Landescode.Fi;
                case "FJ":
                    return Landescode.Fj;
                case "FK":
                    return Landescode.Fk;
                case "FM":
                    return Landescode.Fm;
                case "FO":
                    return Landescode.Fo;
                case "FR":
                    return Landescode.Fr;
                case "GA":
                    return Landescode.Ga;
                case "GB":
                    return Landescode.Gb;
                case "GD":
                    return Landescode.Gd;
                case "GE":
                    return Landescode.Ge;
                case "GF":
                    return Landescode.Gf;
                case "GG":
                    return Landescode.Gg;
                case "GH":
                    return Landescode.Gh;
                case "GI":
                    return Landescode.Gi;
                case "GL":
                    return Landescode.Gl;
                case "GM":
                    return Landescode.Gm;
                case "GN":
                    return Landescode.Gn;
                case "GP":
                    return Landescode.Gp;
                case "GQ":
                    return Landescode.Gq;
                case "GR":
                    return Landescode.Gr;
                case "GS":
                    return Landescode.Gs;
                case "GT":
                    return Landescode.Gt;
                case "GU":
                    return Landescode.Gu;
                case "GW":
                    return Landescode.Gw;
                case "GY":
                    return Landescode.Gy;
                case "HK":
                    return Landescode.Hk;
                case "HM":
                    return Landescode.Hm;
                case "HN":
                    return Landescode.Hn;
                case "HR":
                    return Landescode.Hr;
                case "HT":
                    return Landescode.Ht;
                case "HU":
                    return Landescode.Hu;
                case "ID":
                    return Landescode.Id;
                case "IE":
                    return Landescode.Ie;
                case "IL":
                    return Landescode.Il;
                case "IM":
                    return Landescode.Im;
                case "IN":
                    return Landescode.In;
                case "IO":
                    return Landescode.Io;
                case "IQ":
                    return Landescode.Iq;
                case "IR":
                    return Landescode.Ir;
                case "IS":
                    return Landescode.Is;
                case "IT":
                    return Landescode.It;
                case "JE":
                    return Landescode.Je;
                case "JM":
                    return Landescode.Jm;
                case "JO":
                    return Landescode.Jo;
                case "JP":
                    return Landescode.Jp;
                case "KE":
                    return Landescode.Ke;
                case "KG":
                    return Landescode.Kg;
                case "KH":
                    return Landescode.Kh;
                case "KI":
                    return Landescode.Ki;
                case "KM":
                    return Landescode.Km;
                case "KN":
                    return Landescode.Kn;
                case "KP":
                    return Landescode.Kp;
                case "KR":
                    return Landescode.Kr;
                case "KW":
                    return Landescode.Kw;
                case "KY":
                    return Landescode.Ky;
                case "KZ":
                    return Landescode.Kz;
                case "LA":
                    return Landescode.La;
                case "LB":
                    return Landescode.Lb;
                case "LC":
                    return Landescode.Lc;
                case "LI":
                    return Landescode.Li;
                case "LK":
                    return Landescode.Lk;
                case "LR":
                    return Landescode.Lr;
                case "LS":
                    return Landescode.Ls;
                case "LT":
                    return Landescode.Lt;
                case "LU":
                    return Landescode.Lu;
                case "LV":
                    return Landescode.Lv;
                case "LY":
                    return Landescode.Ly;
                case "MA":
                    return Landescode.Ma;
                case "MC":
                    return Landescode.Mc;
                case "MD":
                    return Landescode.Md;
                case "ME":
                    return Landescode.Me;
                case "MF":
                    return Landescode.Mf;
                case "MG":
                    return Landescode.Mg;
                case "MH":
                    return Landescode.Mh;
                case "MK":
                    return Landescode.Mk;
                case "ML":
                    return Landescode.Ml;
                case "MM":
                    return Landescode.Mm;
                case "MN":
                    return Landescode.Mn;
                case "MO":
                    return Landescode.Mo;
                case "MP":
                    return Landescode.Mp;
                case "MQ":
                    return Landescode.Mq;
                case "MR":
                    return Landescode.Mr;
                case "MS":
                    return Landescode.Ms;
                case "MT":
                    return Landescode.Mt;
                case "MU":
                    return Landescode.Mu;
                case "MV":
                    return Landescode.Mv;
                case "MW":
                    return Landescode.Mw;
                case "MX":
                    return Landescode.Mx;
                case "MY":
                    return Landescode.My;
                case "MZ":
                    return Landescode.Mz;
                case "NA":
                    return Landescode.Na;
                case "NC":
                    return Landescode.Nc;
                case "NE":
                    return Landescode.Ne;
                case "NF":
                    return Landescode.Nf;
                case "NG":
                    return Landescode.Ng;
                case "NI":
                    return Landescode.Ni;
                case "NL":
                    return Landescode.Nl;
                case "NO":
                    return Landescode.No;
                case "NP":
                    return Landescode.Np;
                case "NR":
                    return Landescode.Nr;
                case "NU":
                    return Landescode.Nu;
                case "NZ":
                    return Landescode.Nz;
                case "OM":
                    return Landescode.Om;
                case "PA":
                    return Landescode.Pa;
                case "PE":
                    return Landescode.Pe;
                case "PF":
                    return Landescode.Pf;
                case "PG":
                    return Landescode.Pg;
                case "PH":
                    return Landescode.Ph;
                case "PK":
                    return Landescode.Pk;
                case "PL":
                    return Landescode.Pl;
                case "PM":
                    return Landescode.Pm;
                case "PN":
                    return Landescode.Pn;
                case "PR":
                    return Landescode.Pr;
                case "PS":
                    return Landescode.Ps;
                case "PT":
                    return Landescode.Pt;
                case "PW":
                    return Landescode.Pw;
                case "PY":
                    return Landescode.Py;
                case "QA":
                    return Landescode.Qa;
                case "RE":
                    return Landescode.Re;
                case "RO":
                    return Landescode.Ro;
                case "RS":
                    return Landescode.Rs;
                case "RU":
                    return Landescode.Ru;
                case "RW":
                    return Landescode.Rw;
                case "SA":
                    return Landescode.Sa;
                case "SB":
                    return Landescode.Sb;
                case "SC":
                    return Landescode.Sc;
                case "SD":
                    return Landescode.Sd;
                case "SE":
                    return Landescode.Se;
                case "SG":
                    return Landescode.Sg;
                case "SH":
                    return Landescode.Sh;
                case "SI":
                    return Landescode.Si;
                case "SJ":
                    return Landescode.Sj;
                case "SK":
                    return Landescode.Sk;
                case "SL":
                    return Landescode.Sl;
                case "SM":
                    return Landescode.Sm;
                case "SN":
                    return Landescode.Sn;
                case "SO":
                    return Landescode.So;
                case "SR":
                    return Landescode.Sr;
                case "SS":
                    return Landescode.Ss;
                case "ST":
                    return Landescode.St;
                case "SV":
                    return Landescode.Sv;
                case "SX":
                    return Landescode.Sx;
                case "SY":
                    return Landescode.Sy;
                case "SZ":
                    return Landescode.Sz;
                case "TC":
                    return Landescode.Tc;
                case "TD":
                    return Landescode.Td;
                case "TF":
                    return Landescode.Tf;
                case "TG":
                    return Landescode.Tg;
                case "TH":
                    return Landescode.Th;
                case "TJ":
                    return Landescode.Tj;
                case "TK":
                    return Landescode.Tk;
                case "TL":
                    return Landescode.Tl;
                case "TM":
                    return Landescode.Tm;
                case "TN":
                    return Landescode.Tn;
                case "TO":
                    return Landescode.To;
                case "TR":
                    return Landescode.Tr;
                case "TT":
                    return Landescode.Tt;
                case "TV":
                    return Landescode.Tv;
                case "TW":
                    return Landescode.Tw;
                case "TZ":
                    return Landescode.Tz;
                case "UA":
                    return Landescode.Ua;
                case "UG":
                    return Landescode.Ug;
                case "UM":
                    return Landescode.Um;
                case "US":
                    return Landescode.Us;
                case "UY":
                    return Landescode.Uy;
                case "UZ":
                    return Landescode.Uz;
                case "VA":
                    return Landescode.Va;
                case "VC":
                    return Landescode.Vc;
                case "VE":
                    return Landescode.Ve;
                case "VG":
                    return Landescode.Vg;
                case "VI":
                    return Landescode.Vi;
                case "VN":
                    return Landescode.Vn;
                case "VU":
                    return Landescode.Vu;
                case "WF":
                    return Landescode.Wf;
                case "WS":
                    return Landescode.Ws;
                case "XK":
                    return Landescode.Xk;
                case "YE":
                    return Landescode.Ye;
                case "YT":
                    return Landescode.Yt;
                case "ZA":
                    return Landescode.Za;
                case "ZM":
                    return Landescode.Zm;
                case "ZW":
                    return Landescode.Zw;
            }
            throw new Exception("Cannot unmarshal type Landescode");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Landescode)untypedValue;
            switch (value)
            {
                case Landescode.Ad:
                    serializer.Serialize(writer, "AD");
                    return;
                case Landescode.Ae:
                    serializer.Serialize(writer, "AE");
                    return;
                case Landescode.Af:
                    serializer.Serialize(writer, "AF");
                    return;
                case Landescode.Ag:
                    serializer.Serialize(writer, "AG");
                    return;
                case Landescode.Ai:
                    serializer.Serialize(writer, "AI");
                    return;
                case Landescode.Al:
                    serializer.Serialize(writer, "AL");
                    return;
                case Landescode.Am:
                    serializer.Serialize(writer, "AM");
                    return;
                case Landescode.Ao:
                    serializer.Serialize(writer, "AO");
                    return;
                case Landescode.Aq:
                    serializer.Serialize(writer, "AQ");
                    return;
                case Landescode.Ar:
                    serializer.Serialize(writer, "AR");
                    return;
                case Landescode.As:
                    serializer.Serialize(writer, "AS");
                    return;
                case Landescode.At:
                    serializer.Serialize(writer, "AT");
                    return;
                case Landescode.Au:
                    serializer.Serialize(writer, "AU");
                    return;
                case Landescode.Aw:
                    serializer.Serialize(writer, "AW");
                    return;
                case Landescode.Ax:
                    serializer.Serialize(writer, "AX");
                    return;
                case Landescode.Az:
                    serializer.Serialize(writer, "AZ");
                    return;
                case Landescode.Ba:
                    serializer.Serialize(writer, "BA");
                    return;
                case Landescode.Bb:
                    serializer.Serialize(writer, "BB");
                    return;
                case Landescode.Bd:
                    serializer.Serialize(writer, "BD");
                    return;
                case Landescode.Be:
                    serializer.Serialize(writer, "BE");
                    return;
                case Landescode.Bf:
                    serializer.Serialize(writer, "BF");
                    return;
                case Landescode.Bg:
                    serializer.Serialize(writer, "BG");
                    return;
                case Landescode.Bh:
                    serializer.Serialize(writer, "BH");
                    return;
                case Landescode.Bi:
                    serializer.Serialize(writer, "BI");
                    return;
                case Landescode.Bj:
                    serializer.Serialize(writer, "BJ");
                    return;
                case Landescode.Bl:
                    serializer.Serialize(writer, "BL");
                    return;
                case Landescode.Bm:
                    serializer.Serialize(writer, "BM");
                    return;
                case Landescode.Bn:
                    serializer.Serialize(writer, "BN");
                    return;
                case Landescode.Bo:
                    serializer.Serialize(writer, "BO");
                    return;
                case Landescode.Bq:
                    serializer.Serialize(writer, "BQ");
                    return;
                case Landescode.Br:
                    serializer.Serialize(writer, "BR");
                    return;
                case Landescode.Bs:
                    serializer.Serialize(writer, "BS");
                    return;
                case Landescode.Bt:
                    serializer.Serialize(writer, "BT");
                    return;
                case Landescode.Bv:
                    serializer.Serialize(writer, "BV");
                    return;
                case Landescode.Bw:
                    serializer.Serialize(writer, "BW");
                    return;
                case Landescode.By:
                    serializer.Serialize(writer, "BY");
                    return;
                case Landescode.Bz:
                    serializer.Serialize(writer, "BZ");
                    return;
                case Landescode.Ca:
                    serializer.Serialize(writer, "CA");
                    return;
                case Landescode.Cc:
                    serializer.Serialize(writer, "CC");
                    return;
                case Landescode.Cd:
                    serializer.Serialize(writer, "CD");
                    return;
                case Landescode.Cf:
                    serializer.Serialize(writer, "CF");
                    return;
                case Landescode.Cg:
                    serializer.Serialize(writer, "CG");
                    return;
                case Landescode.Ch:
                    serializer.Serialize(writer, "CH");
                    return;
                case Landescode.Ci:
                    serializer.Serialize(writer, "CI");
                    return;
                case Landescode.Ck:
                    serializer.Serialize(writer, "CK");
                    return;
                case Landescode.Cl:
                    serializer.Serialize(writer, "CL");
                    return;
                case Landescode.Cm:
                    serializer.Serialize(writer, "CM");
                    return;
                case Landescode.Cn:
                    serializer.Serialize(writer, "CN");
                    return;
                case Landescode.Co:
                    serializer.Serialize(writer, "CO");
                    return;
                case Landescode.Cr:
                    serializer.Serialize(writer, "CR");
                    return;
                case Landescode.Cu:
                    serializer.Serialize(writer, "CU");
                    return;
                case Landescode.Cv:
                    serializer.Serialize(writer, "CV");
                    return;
                case Landescode.Cw:
                    serializer.Serialize(writer, "CW");
                    return;
                case Landescode.Cx:
                    serializer.Serialize(writer, "CX");
                    return;
                case Landescode.Cy:
                    serializer.Serialize(writer, "CY");
                    return;
                case Landescode.Cz:
                    serializer.Serialize(writer, "CZ");
                    return;
                case Landescode.De:
                    serializer.Serialize(writer, "DE");
                    return;
                case Landescode.Dj:
                    serializer.Serialize(writer, "DJ");
                    return;
                case Landescode.Dk:
                    serializer.Serialize(writer, "DK");
                    return;
                case Landescode.Dm:
                    serializer.Serialize(writer, "DM");
                    return;
                case Landescode.Do:
                    serializer.Serialize(writer, "DO");
                    return;
                case Landescode.Dz:
                    serializer.Serialize(writer, "DZ");
                    return;
                case Landescode.Ec:
                    serializer.Serialize(writer, "EC");
                    return;
                case Landescode.Ee:
                    serializer.Serialize(writer, "EE");
                    return;
                case Landescode.Eg:
                    serializer.Serialize(writer, "EG");
                    return;
                case Landescode.Eh:
                    serializer.Serialize(writer, "EH");
                    return;
                case Landescode.Er:
                    serializer.Serialize(writer, "ER");
                    return;
                case Landescode.Es:
                    serializer.Serialize(writer, "ES");
                    return;
                case Landescode.Et:
                    serializer.Serialize(writer, "ET");
                    return;
                case Landescode.Fi:
                    serializer.Serialize(writer, "FI");
                    return;
                case Landescode.Fj:
                    serializer.Serialize(writer, "FJ");
                    return;
                case Landescode.Fk:
                    serializer.Serialize(writer, "FK");
                    return;
                case Landescode.Fm:
                    serializer.Serialize(writer, "FM");
                    return;
                case Landescode.Fo:
                    serializer.Serialize(writer, "FO");
                    return;
                case Landescode.Fr:
                    serializer.Serialize(writer, "FR");
                    return;
                case Landescode.Ga:
                    serializer.Serialize(writer, "GA");
                    return;
                case Landescode.Gb:
                    serializer.Serialize(writer, "GB");
                    return;
                case Landescode.Gd:
                    serializer.Serialize(writer, "GD");
                    return;
                case Landescode.Ge:
                    serializer.Serialize(writer, "GE");
                    return;
                case Landescode.Gf:
                    serializer.Serialize(writer, "GF");
                    return;
                case Landescode.Gg:
                    serializer.Serialize(writer, "GG");
                    return;
                case Landescode.Gh:
                    serializer.Serialize(writer, "GH");
                    return;
                case Landescode.Gi:
                    serializer.Serialize(writer, "GI");
                    return;
                case Landescode.Gl:
                    serializer.Serialize(writer, "GL");
                    return;
                case Landescode.Gm:
                    serializer.Serialize(writer, "GM");
                    return;
                case Landescode.Gn:
                    serializer.Serialize(writer, "GN");
                    return;
                case Landescode.Gp:
                    serializer.Serialize(writer, "GP");
                    return;
                case Landescode.Gq:
                    serializer.Serialize(writer, "GQ");
                    return;
                case Landescode.Gr:
                    serializer.Serialize(writer, "GR");
                    return;
                case Landescode.Gs:
                    serializer.Serialize(writer, "GS");
                    return;
                case Landescode.Gt:
                    serializer.Serialize(writer, "GT");
                    return;
                case Landescode.Gu:
                    serializer.Serialize(writer, "GU");
                    return;
                case Landescode.Gw:
                    serializer.Serialize(writer, "GW");
                    return;
                case Landescode.Gy:
                    serializer.Serialize(writer, "GY");
                    return;
                case Landescode.Hk:
                    serializer.Serialize(writer, "HK");
                    return;
                case Landescode.Hm:
                    serializer.Serialize(writer, "HM");
                    return;
                case Landescode.Hn:
                    serializer.Serialize(writer, "HN");
                    return;
                case Landescode.Hr:
                    serializer.Serialize(writer, "HR");
                    return;
                case Landescode.Ht:
                    serializer.Serialize(writer, "HT");
                    return;
                case Landescode.Hu:
                    serializer.Serialize(writer, "HU");
                    return;
                case Landescode.Id:
                    serializer.Serialize(writer, "ID");
                    return;
                case Landescode.Ie:
                    serializer.Serialize(writer, "IE");
                    return;
                case Landescode.Il:
                    serializer.Serialize(writer, "IL");
                    return;
                case Landescode.Im:
                    serializer.Serialize(writer, "IM");
                    return;
                case Landescode.In:
                    serializer.Serialize(writer, "IN");
                    return;
                case Landescode.Io:
                    serializer.Serialize(writer, "IO");
                    return;
                case Landescode.Iq:
                    serializer.Serialize(writer, "IQ");
                    return;
                case Landescode.Ir:
                    serializer.Serialize(writer, "IR");
                    return;
                case Landescode.Is:
                    serializer.Serialize(writer, "IS");
                    return;
                case Landescode.It:
                    serializer.Serialize(writer, "IT");
                    return;
                case Landescode.Je:
                    serializer.Serialize(writer, "JE");
                    return;
                case Landescode.Jm:
                    serializer.Serialize(writer, "JM");
                    return;
                case Landescode.Jo:
                    serializer.Serialize(writer, "JO");
                    return;
                case Landescode.Jp:
                    serializer.Serialize(writer, "JP");
                    return;
                case Landescode.Ke:
                    serializer.Serialize(writer, "KE");
                    return;
                case Landescode.Kg:
                    serializer.Serialize(writer, "KG");
                    return;
                case Landescode.Kh:
                    serializer.Serialize(writer, "KH");
                    return;
                case Landescode.Ki:
                    serializer.Serialize(writer, "KI");
                    return;
                case Landescode.Km:
                    serializer.Serialize(writer, "KM");
                    return;
                case Landescode.Kn:
                    serializer.Serialize(writer, "KN");
                    return;
                case Landescode.Kp:
                    serializer.Serialize(writer, "KP");
                    return;
                case Landescode.Kr:
                    serializer.Serialize(writer, "KR");
                    return;
                case Landescode.Kw:
                    serializer.Serialize(writer, "KW");
                    return;
                case Landescode.Ky:
                    serializer.Serialize(writer, "KY");
                    return;
                case Landescode.Kz:
                    serializer.Serialize(writer, "KZ");
                    return;
                case Landescode.La:
                    serializer.Serialize(writer, "LA");
                    return;
                case Landescode.Lb:
                    serializer.Serialize(writer, "LB");
                    return;
                case Landescode.Lc:
                    serializer.Serialize(writer, "LC");
                    return;
                case Landescode.Li:
                    serializer.Serialize(writer, "LI");
                    return;
                case Landescode.Lk:
                    serializer.Serialize(writer, "LK");
                    return;
                case Landescode.Lr:
                    serializer.Serialize(writer, "LR");
                    return;
                case Landescode.Ls:
                    serializer.Serialize(writer, "LS");
                    return;
                case Landescode.Lt:
                    serializer.Serialize(writer, "LT");
                    return;
                case Landescode.Lu:
                    serializer.Serialize(writer, "LU");
                    return;
                case Landescode.Lv:
                    serializer.Serialize(writer, "LV");
                    return;
                case Landescode.Ly:
                    serializer.Serialize(writer, "LY");
                    return;
                case Landescode.Ma:
                    serializer.Serialize(writer, "MA");
                    return;
                case Landescode.Mc:
                    serializer.Serialize(writer, "MC");
                    return;
                case Landescode.Md:
                    serializer.Serialize(writer, "MD");
                    return;
                case Landescode.Me:
                    serializer.Serialize(writer, "ME");
                    return;
                case Landescode.Mf:
                    serializer.Serialize(writer, "MF");
                    return;
                case Landescode.Mg:
                    serializer.Serialize(writer, "MG");
                    return;
                case Landescode.Mh:
                    serializer.Serialize(writer, "MH");
                    return;
                case Landescode.Mk:
                    serializer.Serialize(writer, "MK");
                    return;
                case Landescode.Ml:
                    serializer.Serialize(writer, "ML");
                    return;
                case Landescode.Mm:
                    serializer.Serialize(writer, "MM");
                    return;
                case Landescode.Mn:
                    serializer.Serialize(writer, "MN");
                    return;
                case Landescode.Mo:
                    serializer.Serialize(writer, "MO");
                    return;
                case Landescode.Mp:
                    serializer.Serialize(writer, "MP");
                    return;
                case Landescode.Mq:
                    serializer.Serialize(writer, "MQ");
                    return;
                case Landescode.Mr:
                    serializer.Serialize(writer, "MR");
                    return;
                case Landescode.Ms:
                    serializer.Serialize(writer, "MS");
                    return;
                case Landescode.Mt:
                    serializer.Serialize(writer, "MT");
                    return;
                case Landescode.Mu:
                    serializer.Serialize(writer, "MU");
                    return;
                case Landescode.Mv:
                    serializer.Serialize(writer, "MV");
                    return;
                case Landescode.Mw:
                    serializer.Serialize(writer, "MW");
                    return;
                case Landescode.Mx:
                    serializer.Serialize(writer, "MX");
                    return;
                case Landescode.My:
                    serializer.Serialize(writer, "MY");
                    return;
                case Landescode.Mz:
                    serializer.Serialize(writer, "MZ");
                    return;
                case Landescode.Na:
                    serializer.Serialize(writer, "NA");
                    return;
                case Landescode.Nc:
                    serializer.Serialize(writer, "NC");
                    return;
                case Landescode.Ne:
                    serializer.Serialize(writer, "NE");
                    return;
                case Landescode.Nf:
                    serializer.Serialize(writer, "NF");
                    return;
                case Landescode.Ng:
                    serializer.Serialize(writer, "NG");
                    return;
                case Landescode.Ni:
                    serializer.Serialize(writer, "NI");
                    return;
                case Landescode.Nl:
                    serializer.Serialize(writer, "NL");
                    return;
                case Landescode.No:
                    serializer.Serialize(writer, "NO");
                    return;
                case Landescode.Np:
                    serializer.Serialize(writer, "NP");
                    return;
                case Landescode.Nr:
                    serializer.Serialize(writer, "NR");
                    return;
                case Landescode.Nu:
                    serializer.Serialize(writer, "NU");
                    return;
                case Landescode.Nz:
                    serializer.Serialize(writer, "NZ");
                    return;
                case Landescode.Om:
                    serializer.Serialize(writer, "OM");
                    return;
                case Landescode.Pa:
                    serializer.Serialize(writer, "PA");
                    return;
                case Landescode.Pe:
                    serializer.Serialize(writer, "PE");
                    return;
                case Landescode.Pf:
                    serializer.Serialize(writer, "PF");
                    return;
                case Landescode.Pg:
                    serializer.Serialize(writer, "PG");
                    return;
                case Landescode.Ph:
                    serializer.Serialize(writer, "PH");
                    return;
                case Landescode.Pk:
                    serializer.Serialize(writer, "PK");
                    return;
                case Landescode.Pl:
                    serializer.Serialize(writer, "PL");
                    return;
                case Landescode.Pm:
                    serializer.Serialize(writer, "PM");
                    return;
                case Landescode.Pn:
                    serializer.Serialize(writer, "PN");
                    return;
                case Landescode.Pr:
                    serializer.Serialize(writer, "PR");
                    return;
                case Landescode.Ps:
                    serializer.Serialize(writer, "PS");
                    return;
                case Landescode.Pt:
                    serializer.Serialize(writer, "PT");
                    return;
                case Landescode.Pw:
                    serializer.Serialize(writer, "PW");
                    return;
                case Landescode.Py:
                    serializer.Serialize(writer, "PY");
                    return;
                case Landescode.Qa:
                    serializer.Serialize(writer, "QA");
                    return;
                case Landescode.Re:
                    serializer.Serialize(writer, "RE");
                    return;
                case Landescode.Ro:
                    serializer.Serialize(writer, "RO");
                    return;
                case Landescode.Rs:
                    serializer.Serialize(writer, "RS");
                    return;
                case Landescode.Ru:
                    serializer.Serialize(writer, "RU");
                    return;
                case Landescode.Rw:
                    serializer.Serialize(writer, "RW");
                    return;
                case Landescode.Sa:
                    serializer.Serialize(writer, "SA");
                    return;
                case Landescode.Sb:
                    serializer.Serialize(writer, "SB");
                    return;
                case Landescode.Sc:
                    serializer.Serialize(writer, "SC");
                    return;
                case Landescode.Sd:
                    serializer.Serialize(writer, "SD");
                    return;
                case Landescode.Se:
                    serializer.Serialize(writer, "SE");
                    return;
                case Landescode.Sg:
                    serializer.Serialize(writer, "SG");
                    return;
                case Landescode.Sh:
                    serializer.Serialize(writer, "SH");
                    return;
                case Landescode.Si:
                    serializer.Serialize(writer, "SI");
                    return;
                case Landescode.Sj:
                    serializer.Serialize(writer, "SJ");
                    return;
                case Landescode.Sk:
                    serializer.Serialize(writer, "SK");
                    return;
                case Landescode.Sl:
                    serializer.Serialize(writer, "SL");
                    return;
                case Landescode.Sm:
                    serializer.Serialize(writer, "SM");
                    return;
                case Landescode.Sn:
                    serializer.Serialize(writer, "SN");
                    return;
                case Landescode.So:
                    serializer.Serialize(writer, "SO");
                    return;
                case Landescode.Sr:
                    serializer.Serialize(writer, "SR");
                    return;
                case Landescode.Ss:
                    serializer.Serialize(writer, "SS");
                    return;
                case Landescode.St:
                    serializer.Serialize(writer, "ST");
                    return;
                case Landescode.Sv:
                    serializer.Serialize(writer, "SV");
                    return;
                case Landescode.Sx:
                    serializer.Serialize(writer, "SX");
                    return;
                case Landescode.Sy:
                    serializer.Serialize(writer, "SY");
                    return;
                case Landescode.Sz:
                    serializer.Serialize(writer, "SZ");
                    return;
                case Landescode.Tc:
                    serializer.Serialize(writer, "TC");
                    return;
                case Landescode.Td:
                    serializer.Serialize(writer, "TD");
                    return;
                case Landescode.Tf:
                    serializer.Serialize(writer, "TF");
                    return;
                case Landescode.Tg:
                    serializer.Serialize(writer, "TG");
                    return;
                case Landescode.Th:
                    serializer.Serialize(writer, "TH");
                    return;
                case Landescode.Tj:
                    serializer.Serialize(writer, "TJ");
                    return;
                case Landescode.Tk:
                    serializer.Serialize(writer, "TK");
                    return;
                case Landescode.Tl:
                    serializer.Serialize(writer, "TL");
                    return;
                case Landescode.Tm:
                    serializer.Serialize(writer, "TM");
                    return;
                case Landescode.Tn:
                    serializer.Serialize(writer, "TN");
                    return;
                case Landescode.To:
                    serializer.Serialize(writer, "TO");
                    return;
                case Landescode.Tr:
                    serializer.Serialize(writer, "TR");
                    return;
                case Landescode.Tt:
                    serializer.Serialize(writer, "TT");
                    return;
                case Landescode.Tv:
                    serializer.Serialize(writer, "TV");
                    return;
                case Landescode.Tw:
                    serializer.Serialize(writer, "TW");
                    return;
                case Landescode.Tz:
                    serializer.Serialize(writer, "TZ");
                    return;
                case Landescode.Ua:
                    serializer.Serialize(writer, "UA");
                    return;
                case Landescode.Ug:
                    serializer.Serialize(writer, "UG");
                    return;
                case Landescode.Um:
                    serializer.Serialize(writer, "UM");
                    return;
                case Landescode.Us:
                    serializer.Serialize(writer, "US");
                    return;
                case Landescode.Uy:
                    serializer.Serialize(writer, "UY");
                    return;
                case Landescode.Uz:
                    serializer.Serialize(writer, "UZ");
                    return;
                case Landescode.Va:
                    serializer.Serialize(writer, "VA");
                    return;
                case Landescode.Vc:
                    serializer.Serialize(writer, "VC");
                    return;
                case Landescode.Ve:
                    serializer.Serialize(writer, "VE");
                    return;
                case Landescode.Vg:
                    serializer.Serialize(writer, "VG");
                    return;
                case Landescode.Vi:
                    serializer.Serialize(writer, "VI");
                    return;
                case Landescode.Vn:
                    serializer.Serialize(writer, "VN");
                    return;
                case Landescode.Vu:
                    serializer.Serialize(writer, "VU");
                    return;
                case Landescode.Wf:
                    serializer.Serialize(writer, "WF");
                    return;
                case Landescode.Ws:
                    serializer.Serialize(writer, "WS");
                    return;
                case Landescode.Xk:
                    serializer.Serialize(writer, "XK");
                    return;
                case Landescode.Ye:
                    serializer.Serialize(writer, "YE");
                    return;
                case Landescode.Yt:
                    serializer.Serialize(writer, "YT");
                    return;
                case Landescode.Za:
                    serializer.Serialize(writer, "ZA");
                    return;
                case Landescode.Zm:
                    serializer.Serialize(writer, "ZM");
                    return;
                case Landescode.Zw:
                    serializer.Serialize(writer, "ZW");
                    return;
            }
            throw new Exception("Cannot marshal type Landescode");
        }

        public static readonly LandescodeConverter Singleton = new LandescodeConverter();
    }
}
