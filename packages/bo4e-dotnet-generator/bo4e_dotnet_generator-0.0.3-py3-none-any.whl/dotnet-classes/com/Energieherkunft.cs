// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var energieherkunft = Energieherkunft.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Abbildung einer Energieherkunft
    ///
    /// .. raw:: html
    ///
    /// <object data="../_static/images/bo4e/com/Energieherkunft.svg"
    /// type="image/svg+xml"></object>
    ///
    /// .. HINT::
    /// `Energieherkunft JSON Schema
    /// <https://json-schema.app/view/%23?url=https://raw.githubusercontent.com/BO4E/BO4E-Schemas/v202401.2.1/src/bo4e_schemas/com/Energieherkunft.json>`_
    /// </summary>
    public partial class Energieherkunft
    {
        /// <summary>
        /// zusatz_attribute: Optional[list["ZusatzAttribut"]] = None
        ///
        /// # pylint: disable=duplicate-code
        /// model_config = ConfigDict(
        /// alias_generator=camelize,
        /// populate_by_name=True,
        /// extra="allow",
        /// # json_encoders is deprecated, but there is no easy-to-use alternative. The best way
        /// would be to create
        /// # an annotated version of Decimal, but you would have to use it everywhere in the
        /// pydantic models.
        /// # See this issue for more info: https://github.com/pydantic/pydantic/issues/6375
        /// json_encoders={Decimal: str},
        /// )
        /// </summary>
        [JsonProperty("_id")]
        public string Id { get; set; }

        /// <summary>
        /// Version der BO-Struktur aka "fachliche Versionierung"
        /// </summary>
        [JsonProperty("_version")]
        public string Version { get; set; }

        /// <summary>
        /// Prozentualer Anteil der jeweiligen Erzeugungsart.
        /// </summary>
        [JsonProperty("anteilProzent")]
        public double? AnteilProzent { get; set; }

        /// <summary>
        /// Art der Erzeugung der Energie.
        /// </summary>
        [JsonProperty("erzeugungsart")]
        public Erzeugungsart? Erzeugungsart { get; set; }

        [JsonProperty("zusatzAttribute")]
        public ZusatzAttribut[] ZusatzAttribute { get; set; }
    }

    /// <summary>
    /// Viele Datenobjekte weisen in unterschiedlichen Systemen eine eindeutige ID (Kundennummer,
    /// GP-Nummer etc.) auf.
    /// Beim Austausch von Datenobjekten zwischen verschiedenen Systemen ist es daher hilfreich,
    /// sich die eindeutigen IDs der anzubindenden Systeme zu merken.
    ///
    /// .. raw:: html
    ///
    /// <object data="../_static/images/bo4e/com/ZusatzAttribut.svg"
    /// type="image/svg+xml"></object>
    ///
    /// .. HINT::
    /// `ZusatzAttribut JSON Schema
    /// <https://json-schema.app/view/%23?url=https://raw.githubusercontent.com/BO4E/BO4E-Schemas/v202401.2.1/src/bo4e_schemas/ZusatzAttribut.json>`_
    /// </summary>
    public partial class ZusatzAttribut
    {
        /// <summary>
        /// Bezeichnung der externen Referenz (z.B. "microservice xyz" oder "SAP CRM GP-Nummer")
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>
        /// Bezeichnung der externen Referenz (z.B. "microservice xyz" oder "SAP CRM GP-Nummer")
        /// </summary>
        [JsonProperty("wert")]
        public object Wert { get; set; }
    }

    /// <summary>
    /// Auflistung der Erzeugungsarten von Energie.
    /// </summary>
    public enum Erzeugungsart { Biogas, Biomasse, Fossil, Gas, Geothermie, Kernkraft, KlimaneutralesGas, Kohle, Kwk, Solar, Sonstige, SonstigeEeg, Wasser, Wind };

    public partial class Energieherkunft
    {
        public static Energieherkunft FromJson(string json) => JsonConvert.DeserializeObject<Energieherkunft>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Energieherkunft self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ErzeugungsartConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ErzeugungsartConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Erzeugungsart) || t == typeof(Erzeugungsart?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "BIOGAS":
                    return Erzeugungsart.Biogas;
                case "BIOMASSE":
                    return Erzeugungsart.Biomasse;
                case "FOSSIL":
                    return Erzeugungsart.Fossil;
                case "GAS":
                    return Erzeugungsart.Gas;
                case "GEOTHERMIE":
                    return Erzeugungsart.Geothermie;
                case "KERNKRAFT":
                    return Erzeugungsart.Kernkraft;
                case "KLIMANEUTRALES_GAS":
                    return Erzeugungsart.KlimaneutralesGas;
                case "KOHLE":
                    return Erzeugungsart.Kohle;
                case "KWK":
                    return Erzeugungsart.Kwk;
                case "SOLAR":
                    return Erzeugungsart.Solar;
                case "SONSTIGE":
                    return Erzeugungsart.Sonstige;
                case "SONSTIGE_EEG":
                    return Erzeugungsart.SonstigeEeg;
                case "WASSER":
                    return Erzeugungsart.Wasser;
                case "WIND":
                    return Erzeugungsart.Wind;
            }
            throw new Exception("Cannot unmarshal type Erzeugungsart");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Erzeugungsart)untypedValue;
            switch (value)
            {
                case Erzeugungsart.Biogas:
                    serializer.Serialize(writer, "BIOGAS");
                    return;
                case Erzeugungsart.Biomasse:
                    serializer.Serialize(writer, "BIOMASSE");
                    return;
                case Erzeugungsart.Fossil:
                    serializer.Serialize(writer, "FOSSIL");
                    return;
                case Erzeugungsart.Gas:
                    serializer.Serialize(writer, "GAS");
                    return;
                case Erzeugungsart.Geothermie:
                    serializer.Serialize(writer, "GEOTHERMIE");
                    return;
                case Erzeugungsart.Kernkraft:
                    serializer.Serialize(writer, "KERNKRAFT");
                    return;
                case Erzeugungsart.KlimaneutralesGas:
                    serializer.Serialize(writer, "KLIMANEUTRALES_GAS");
                    return;
                case Erzeugungsart.Kohle:
                    serializer.Serialize(writer, "KOHLE");
                    return;
                case Erzeugungsart.Kwk:
                    serializer.Serialize(writer, "KWK");
                    return;
                case Erzeugungsart.Solar:
                    serializer.Serialize(writer, "SOLAR");
                    return;
                case Erzeugungsart.Sonstige:
                    serializer.Serialize(writer, "SONSTIGE");
                    return;
                case Erzeugungsart.SonstigeEeg:
                    serializer.Serialize(writer, "SONSTIGE_EEG");
                    return;
                case Erzeugungsart.Wasser:
                    serializer.Serialize(writer, "WASSER");
                    return;
                case Erzeugungsart.Wind:
                    serializer.Serialize(writer, "WIND");
                    return;
            }
            throw new Exception("Cannot marshal type Erzeugungsart");
        }

        public static readonly ErzeugungsartConverter Singleton = new ErzeugungsartConverter();
    }
}
