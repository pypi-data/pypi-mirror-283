// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BO4EDotNet;
//
//    var tarifpreisblatt = Tarifpreisblatt.FromJson(jsonString);

namespace BO4EDotNet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Tarifinformation mit Preisen, Aufschlägen und Berechnungssystematik
    ///
    /// .. raw:: html
    ///
    /// <object data="../_static/images/bo4e/bo/Tarifpreisblatt.svg"
    /// type="image/svg+xml"></object>
    ///
    /// .. HINT::
    /// `Tarifpreisblatt JSON Schema
    /// <https://json-schema.app/view/%23?url=https://raw.githubusercontent.com/BO4E/BO4E-Schemas/v202401.2.1/src/bo4e_schemas/bo/Tarifpreisblatt.json>`_
    /// </summary>
    public partial class Tarifpreisblatt
    {
        /// <summary>
        /// Hier können IDs anderer Systeme hinterlegt werden (z.B. eine SAP-GP-Nummer oder eine GUID)
        /// </summary>
        [JsonProperty("_id")]
        public string Id { get; set; }

        /// <summary>
        /// Gibt an, wann der Preis zuletzt angepasst wurde
        /// </summary>
        [JsonProperty("_typ")]
        public Typ? Typ { get; set; }

        /// <summary>
        /// Version der BO-Struktur aka "fachliche Versionierung"
        /// </summary>
        [JsonProperty("_version")]
        public string Version { get; set; }

        /// <summary>
        /// Der Marktteilnehmer (Lieferant), der diesen Tarif anbietet
        /// </summary>
        [JsonProperty("anbieter")]
        public Marktteilnehmer Anbieter { get; set; }

        /// <summary>
        /// Der Name des Marktpartners, der den Tarif anbietet
        /// </summary>
        [JsonProperty("anbietername")]
        public string Anbietername { get; set; }

        /// <summary>
        /// Angabe des inklusiven Zeitpunkts, ab dem der Tarif bzw. der Preis angewendet und
        /// abgerechnet wird,
        /// z.B. "2021-07-20T18:31:48Z"
        /// </summary>
        [JsonProperty("anwendungVon")]
        public DateTimeOffset? AnwendungVon { get; set; }

        /// <summary>
        /// Freitext
        /// </summary>
        [JsonProperty("bemerkung")]
        public string Bemerkung { get; set; }

        /// <summary>
        /// Für die Berechnung der Kosten sind die hier abgebildeten Parameter heranzuziehen
        /// </summary>
        [JsonProperty("berechnungsparameter")]
        public Tarifberechnungsparameter Berechnungsparameter { get; set; }

        /// <summary>
        /// Name des Tarifs
        /// </summary>
        [JsonProperty("bezeichnung")]
        public string Bezeichnung { get; set; }

        /// <summary>
        /// Der Energiemix, der für diesen Tarif gilt
        /// </summary>
        [JsonProperty("energiemix")]
        public Energiemix Energiemix { get; set; }

        /// <summary>
        /// Kundentypen für den der Tarif gilt, z.B. Privatkunden
        /// </summary>
        [JsonProperty("kundentypen")]
        public string[] Kundentypen { get; set; }

        /// <summary>
        /// Festlegung von Garantien für bestimmte Preisanteile
        /// </summary>
        [JsonProperty("preisgarantie")]
        public Preisgarantie Preisgarantie { get; set; }

        /// <summary>
        /// Gibt an, wann der Preis zuletzt angepasst wurde
        /// </summary>
        [JsonProperty("preisstand")]
        public DateTimeOffset? Preisstand { get; set; }

        /// <summary>
        /// Die Art des Tarifes, z.B. Eintarif oder Mehrtarif
        /// </summary>
        [JsonProperty("registeranzahl")]
        public Registeranzahl? Registeranzahl { get; set; }

        /// <summary>
        /// Strom oder Gas, etc.
        /// </summary>
        [JsonProperty("sparte")]
        public Sparte? Sparte { get; set; }

        /// <summary>
        /// Auf- und Abschläge auf die Preise oder Kosten
        /// </summary>
        [JsonProperty("tarifAufAbschlaege")]
        public AufAbschlag[] TarifAufAbschlaege { get; set; }

        /// <summary>
        /// Die Bedingungen und Einschränkungen unter denen ein Tarif angewendet werden kann
        /// </summary>
        [JsonProperty("tarifeinschraenkung")]
        public Tarifeinschraenkung Tarifeinschraenkung { get; set; }

        /// <summary>
        /// Weitere Merkmale des Tarifs, z.B. Festpreis oder Vorkasse
        /// </summary>
        [JsonProperty("tarifmerkmale")]
        public string[] Tarifmerkmale { get; set; }

        /// <summary>
        /// Die festgelegten Preise, z.B. für Arbeitspreis, Grundpreis etc.
        /// </summary>
        [JsonProperty("tarifpreise")]
        public Tarifpreisposition[] Tarifpreise { get; set; }

        /// <summary>
        /// Hinweis auf den Tariftyp, z.B. Grundversorgung oder Sondertarif
        /// </summary>
        [JsonProperty("tariftyp")]
        public Tariftyp? Tariftyp { get; set; }

        /// <summary>
        /// Mindestlaufzeiten und Kündigungsfristen zusammengefasst
        /// </summary>
        [JsonProperty("vertragskonditionen")]
        public Vertragskonditionen Vertragskonditionen { get; set; }

        /// <summary>
        /// Internetseite auf dem der Tarif zu finden ist
        /// </summary>
        [JsonProperty("website")]
        public string Website { get; set; }

        /// <summary>
        /// Angabe, in welchem Zeitraum der Tarif gültig ist
        /// </summary>
        [JsonProperty("zeitlicheGueltigkeit")]
        public Zeitraum ZeitlicheGueltigkeit { get; set; }

        [JsonProperty("zusatzAttribute")]
        public ZusatzAttribut[] ZusatzAttribute { get; set; }
    }




    /// <summary>
    /// Viele Datenobjekte weisen in unterschiedlichen Systemen eine eindeutige ID (Kundennummer,
    /// GP-Nummer etc.) auf.
    /// Beim Austausch von Datenobjekten zwischen verschiedenen Systemen ist es daher hilfreich,
    /// sich die eindeutigen IDs der anzubindenden Systeme zu merken.
    ///
    /// .. raw:: html
    ///
    /// <object data="../_static/images/bo4e/com/ZusatzAttribut.svg"
    /// type="image/svg+xml"></object>
    ///
    /// .. HINT::
    /// `ZusatzAttribut JSON Schema
    /// <https://json-schema.app/view/%23?url=https://raw.githubusercontent.com/BO4E/BO4E-Schemas/v202401.2.1/src/bo4e_schemas/ZusatzAttribut.json>`_
    /// </summary>
    public partial class ZusatzAttribut
    {
        /// <summary>
        /// Bezeichnung der externen Referenz (z.B. "microservice xyz" oder "SAP CRM GP-Nummer")
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>
        /// Bezeichnung der externen Referenz (z.B. "microservice xyz" oder "SAP CRM GP-Nummer")
        /// </summary>
        [JsonProperty("wert")]
        public object Wert { get; set; }
    }



















    public enum Landescode { Ad, Ae, Af, Ag, Ai, Al, Am, Ao, Aq, Ar, As, At, Au, Aw, Ax, Az, Ba, Bb, Bd, Be, Bf, Bg, Bh, Bi, Bj, Bl, Bm, Bn, Bo, Bq, Br, Bs, Bt, Bv, Bw, By, Bz, Ca, Cc, Cd, Cf, Cg, Ch, Ci, Ck, Cl, Cm, Cn, Co, Cr, Cu, Cv, Cw, Cx, Cy, Cz, De, Dj, Dk, Dm, Do, Dz, Ec, Ee, Eg, Eh, Er, Es, Et, Fi, Fj, Fk, Fm, Fo, Fr, Ga, Gb, Gd, Ge, Gf, Gg, Gh, Gi, Gl, Gm, Gn, Gp, Gq, Gr, Gs, Gt, Gu, Gw, Gy, Hk, Hm, Hn, Hr, Ht, Hu, Id, Ie, Il, Im, In, Io, Iq, Ir, Is, It, Je, Jm, Jo, Jp, Ke, Kg, Kh, Ki, Km, Kn, Kp, Kr, Kw, Ky, Kz, La, Lb, Lc, Li, Lk, Lr, Ls, Lt, Lu, Lv, Ly, Ma, Mc, Md, Me, Mf, Mg, Mh, Mk, Ml, Mm, Mn, Mo, Mp, Mq, Mr, Ms, Mt, Mu, Mv, Mw, Mx, My, Mz, Na, Nc, Ne, Nf, Ng, Ni, Nl, No, Np, Nr, Nu, Nz, Om, Pa, Pe, Pf, Pg, Ph, Pk, Pl, Pm, Pn, Pr, Ps, Pt, Pw, Py, Qa, Re, Ro, Rs, Ru, Rw, Sa, Sb, Sc, Sd, Se, Sg, Sh, Si, Sj, Sk, Sl, Sm, Sn, So, Sr, Ss, St, Sv, Sx, Sy, Sz, Tc, Td, Tf, Tg, Th, Tj, Tk, Tl, Tm, Tn, To, Tr, Tt, Tv, Tw, Tz, Ua, Ug, Um, Us, Uy, Uz, Va, Vc, Ve, Vg, Vi, Vn, Vu, Wf, Ws, Xk, Ye, Yt, Za, Zm, Zw };

    /// <summary>
    /// Übersicht möglicher Anreden, z.B. eines Geschäftspartners.
    /// </summary>
    public enum Anrede { Eheleute, Erbengemeinschaft, Familie, Firma, Frau, Grundstuecksgemeinschaft, Herr };

    /// <summary>
    /// Gibt an, auf welchem Weg die Person oder der Geschäftspartner kontaktiert werden kann.
    /// </summary>
    public enum Kontaktart { EMail, Fax, Postweg, Sms, Telefon };

    /// <summary>
    /// Übersicht möglicher Titel, z.B. eines Geschäftspartners.
    /// </summary>
    public enum Titel { Dr, Prof, ProfDr };

    /// <summary>
    /// Auflistung sämtlicher existierender Geschäftsobjekte.
    /// </summary>
    public enum Typ { Angebot, Ausschreibung, Buendelvertrag, Energiemenge, Fremdkosten, Geraet, Geschaeftsobjekt, Geschaeftspartner, Kosten, Lastgang, Marktlokation, Marktteilnehmer, Messlokation, Netznutzungsrechnung, Person, Preisblatt, Preisblattdienstleistung, Preisblatthardware, Preisblattkonzessionsabgabe, Preisblattmessung, Preisblattnetznutzung, Preisblattumlagen, Rechnung, Region, Regionaltarif, Standorteigenschaften, Tarif, Tarifinfo, Tarifkosten, Tarifpreisblatt, Vertrag, Zaehler, Zeitreihe };

    /// <summary>
    /// Über dieses ENUM kann eine thematische Zuordnung, beispielsweise eines Ansprechpartners,
    /// vorgenommen werden.
    /// </summary>
    public enum Themengebiet { AllgemeinerInformationsaustausch, Alocat, AnUndAbmeldung, AnsprechpartnerAllgemein, AnsprechpartnerBdewDvgw, AnsprechpartnerItTechnik, Aperak, Bewegungsdaten, Bilanzierung, Bilanzkreiskoordinator, Bilanzkreisverantwortlicher, Contrl, DatenformateZertifikateVerschluesselungen, Debitorenmanagement, DemandSideManagement, EdiVereinbarung, Edifact, Einspeisung, Energiedatenmanagement, Fahrplanmanagement, Gabi, Geli, Geraeterueckgabe, Geraetewechsel, Gpke, Inbetriebnahme, Invoic, Kapazitaetsmanagement, Klaerfaelle, LastgaengeRlm, Lieferantenrahmenvertrag, Lieferantenwechsel, Mabis, Mahnwesen, Marktgebietsverantwortlicher, Marktkommunikation, MehrMindermengen, MsbMdl, Mscons, Netzabrechnung, Netzentgelte, Netzmanagement, Orders, Ordersp, Recht, Regulierungsmanagement, Reklamationen, Remadv, SperrenEntsperrenInkasso, Stammdaten, Stoerungsfaelle, TechnischeFragen, UmstellungInvoic, Utilmd, VerschluesselungSignatur, Vertragsmanagement, Vertrieb, Wim, ZaehlerstaendeSlp, Zahlungsverkehr, Zuordnungsvereinbarung };

    /// <summary>
    /// Diese Rollen kann ein Geschäftspartner einnehmen.
    /// </summary>
    public enum Geschaeftspartnerrolle { Dienstleister, Interessent, Kunde, Lieferant, Marktpartner };

    /// <summary>
    /// Hier wird festgelegt, ob der Geschäftspartner eine Person, eine Firma oder etwas anderes
    /// ist.
    /// </summary>
    public enum Organisationstyp { KommunaleEinrichtung, Privatperson, StaatlicheBehoerde, Unternehmen };

    /// <summary>
    /// Diese Rollen kann ein Marktteilnehmer einnehmen.
    /// </summary>
    public enum Marktrolle { Biko, Bkv, Btr, Dp, Eiv, Esa, Kn, Lf, Mgv, Msb, Nb, Rb, Uenb };

    /// <summary>
    /// Gibt den Codetyp einer Rolle, beispielsweise einer Marktrolle, an.
    /// </summary>
    public enum Rollencodetyp { Bdew, Dvgw, Gln };

    /// <summary>
    /// Unterscheidungsmöglichkeiten für die Sparte.
    /// </summary>
    public enum Sparte { Abwasser, Fernwaerme, Gas, Nahwaerme, Strom, StromUndGas, Wasser };

    /// <summary>
    /// Auflistung der verschiedenen Berechnungsmethoden für ein Preisblatt.
    /// </summary>
    public enum Tarifkalkulationsmethode { BestabrechnungStaffel, Keine, Paketpreis, Staffeln, Zonen };

    /// <summary>
    /// Einheit: Messgrößen, die per Messung oder Vorgabe ermittelt werden können.
    /// </summary>
    public enum Mengeneinheit { Halbjahr, Jahr, Kubikmeter, Kvar, Kvarh, Kw, Kwh, Kwhk, Minute, Monat, Mw, Mwh, Prozent, Quartal, Sekunde, Stueck, Stunde, Tag, Var, Varh, ViertelStunde, W, Wh, Woche };

    /// <summary>
    /// In diesem Enum werden die Währungen und ihre Untereinheiten definiert, beispielsweise für
    /// die Verwendung in Preisen.
    /// </summary>
    public enum Waehrungseinheit { Ct, Eur };

    /// <summary>
    /// Statusinformation für Preise
    /// </summary>
    public enum Preisstatus { Endgueltig, Vorlaeufig };

    /// <summary>
    /// Festlegung, welcher Typ von Messung mit einem Preis belegt wird
    /// </summary>
    public enum Messpreistyp { AufschlagTarifschaltung, AufschlagWandler, ElektronischerAufsatz, MesspreisG10, MesspreisG16, MesspreisG25, MesspreisG4, MesspreisG40, MesspreisG6, MesspreistypMesspreisG25, MesspreistypSmartMeterMesspreisG25, SmartMeterMesspreisG10, SmartMeterMesspreisG16, SmartMeterMesspreisG25, SmartMeterMesspreisG4, SmartMeterMesspreisG40, SmartMeterMesspreisG6, VerrechnungspreisEtDreh, VerrechnungspreisEtWechsel, VerrechnungspreisLEt, VerrechnungspreisLZt, VerrechnungspreisSm, VerrechnungspreisZtDreh, VerrechnungspreisZtWechsel };

    /// <summary>
    /// Aufschlüsselung der Preistypen in Tarifen.
    /// </summary>
    public enum Preistyp { ArbeitspreisEintarif, ArbeitspreisHt, ArbeitspreisNt, EntgeltAblesung, EntgeltAbrechnung, EntgeltMsb, Grundpreis, Leistungspreis, Messpreis, Provision };

    /// <summary>
    /// Auflistung der Erzeugungsarten von Energie.
    /// </summary>
    public enum Erzeugungsart { Biogas, Biomasse, Fossil, Gas, Geothermie, Kernkraft, KlimaneutralesGas, Kohle, Kwk, Solar, Sonstige, SonstigeEeg, Wasser, Wind };

    /// <summary>
    /// Aufzählung der Labels für Öko-Strom von verschiedenen Herausgebern.
    /// </summary>
    public enum Oekolabel { Energreen, Gasgreen, GasgreenGruenerStrom, GruenerStrom, GruenerStromGold, GruenerStromSilber, GruenesGas, NaturwattStrom, OkPower, RenewablePlus, Watergreen, WatergreenPlus };

    /// <summary>
    /// Zertifikate für Ökostrom von verschiedenen Herausgebern.
    /// </summary>
    public enum Oekozertifikat { Bet, CmsEe01, CmsEe02, Eecs, Fraunhofer, Freiberg, KlimaInvest, Lga, Recs, RegsEgl, Tuev, TuevHessen, TuevNord, TuevRheinland, TuevSued, TuevSuedEe01, TuevSuedEe02 };

    /// <summary>
    /// Auflistung der Typen von Endkunden. Daraus kann das Verbrauchsprofil abgeleitet werden.
    /// </summary>
    public enum Kundentyp { BeleuchtungOeffentlich, BeleuchtungStrasse, Direktheizung, GemeinschaftMfh, Gewerbe, Haushalt, Kirche, Kwk, Ladesaeule, Landwirt, Privat, Sonstige, Speicherheizung, UnterbrEinrichtung, Waermepumpe };

    /// <summary>
    /// Aufzählung der Möglichkeiten für die Vergabe von Preisgarantien
    /// </summary>
    public enum Preisgarantietyp { AllePreisbestandteileBrutto, AllePreisbestandteileNetto, NurEnergiepreis, PreisbestandteileOhneAbgaben };

    /// <summary>
    /// Die Registeranzahl wird verwendet zur Charakterisierung von Zählern und daraus
    /// resultierenden Tarifen.
    /// </summary>
    public enum Registeranzahl { Eintarif, Mehrtarif, Zweitarif };

    /// <summary>
    /// Festlegung, ob der Auf- oder Abschlag mit relativen oder absoluten Werten erfolgt.
    /// </summary>
    public enum AufAbschlagstyp { Absolut, Relativ };

    /// <summary>
    /// Der Preis, auf den sich ein Auf- oder Abschlag bezieht.
    /// </summary>
    public enum AufAbschlagsziel { ArbeitspreisEintarif, ArbeitspreisHt, ArbeitspreisHtNt, ArbeitspreisNt, Gesamtpreis, Grundpreis };

    /// <summary>
    /// Auflistung möglicher übergreifenden Geräteklassen.
    /// </summary>
    public enum Geraeteklasse { Kommunikationseinrichtung, Mengenumwerter, SmartmeterGateway, Steuerbox, TechnischeSteuereinrichtung, Wandler, Zaehleinrichtung };

    /// <summary>
    /// Auflistung möglicher abzurechnender Gerätetypen.
    /// </summary>
    public enum Geraetetyp { Blockstromwandler, Datenlogger, DslKom, Edl21, Edl40, Edl40_Zaehleraufsatz, EthernetKom, HoechstbelastungsAnzeiger, Impulsgeber, IntelligentesMessystem, Kombimesswandler, KombimesswandlerImsMme, Kommunikationsanschluss, KompaktMu, LteKom, Mengenumwerter, MesswandlersatzImsMme, Modem, ModemFestnetz, ModemFunk, ModemGprs, ModemGprsMLg, ModemGsm, ModemGsmMLg, ModemGsmOLg, ModerneMesseinrichtung, Multiplexanlage, OptionaleZusZaehleinrichtung, Pauschalanlage, PlcKom, Rundsteuerempfaenger, RundsteuerempfaengerImsMme, SonstigesGeraet, Spannungswandler, Steuereinrichtung, Stromwandler, Summationsgeraet, SystemMu, Tarifschaltgeraet, TarifschaltgeraetImsMme, Telefonanschluss, Telekommunikationseinrichtung, TemperaturKompensation, TemperaturMu, Verstaerkeranlage, ZustandsMu };

    /// <summary>
    /// Voraussetzungen, die erfüllt sein müssen, damit dieser Tarif zur Anwendung kommen kann.
    /// </summary>
    public enum Voraussetzungen { AlterKundenanlage, Altvertrag, Anlagebeschaffenheit, Anschlussart, Anschlusswert, AusschlussGrossverbraucher, BesondereVerbrauchsstelle, BestimmteVertragsformalitaeten, BestimmterAbnahmefall, Betriebsstundenbegrenzung, Direktvertrieb, Einzugsermaechtigung, Familienstruktur, Freigabezeiten, Gewerbe, KombiBoni, Lastprofil, LieferanbindungAlle, LieferanbindungEine, LieferungsbeschraenkungGasart, MaxZaehlerLieferstellen, MehrereZaehlerAbnahmestellen, Mindestumsatz, Mitgliedschaft, NachweisZahlungsfaehigkeit, Neukunde, NeukundeMitVoraussetzungen, Niedrigenergie, Onlinevoraussetzung, OrtsteileLiefergebiet, Selbstablesung, StaatlicheFoerderung, UmstellungEnergieart, VorgeschriebeneZusatzanlage, WaermebedarfErdgas, ZaehlertypGroesse, Zeitpunkt, Zusatzmodalitaet, Zusatzprodukt };

    /// <summary>
    /// Produktmerkmale im Zusammenhang mit der Tarifdefinition.
    /// </summary>
    public enum Tarifmerkmal { Baustrom, Festpreis, Hauslicht, Heizstrom, Kombi, Online, Paket, Standard, Vorkasse };

    /// <summary>
    /// Zur Differenzierung von Grund/Ersatzversorgungstarifen und sonstigen angebotenen Tarifen.
    /// </summary>
    public enum Tariftyp { Ersatzversorgung, GrundErsatzversorgung, Grundversorgung, Sondertarif };

    public partial class Tarifpreisblatt
    {
        public static Tarifpreisblatt FromJson(string json) => JsonConvert.DeserializeObject<Tarifpreisblatt>(json, BO4EDotNet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Tarifpreisblatt self) => JsonConvert.SerializeObject(self, BO4EDotNet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                TypConverter.Singleton,
                LandescodeConverter.Singleton,
                AnredeConverter.Singleton,
                KontaktartConverter.Singleton,
                TitelConverter.Singleton,
                ThemengebietConverter.Singleton,
                GeschaeftspartnerrolleConverter.Singleton,
                OrganisationstypConverter.Singleton,
                MarktrolleConverter.Singleton,
                RollencodetypConverter.Singleton,
                SparteConverter.Singleton,
                TarifkalkulationsmethodeConverter.Singleton,
                MengeneinheitConverter.Singleton,
                WaehrungseinheitConverter.Singleton,
                PreisstatusConverter.Singleton,
                MesspreistypConverter.Singleton,
                PreistypConverter.Singleton,
                ErzeugungsartConverter.Singleton,
                OekolabelConverter.Singleton,
                OekozertifikatConverter.Singleton,
                KundentypConverter.Singleton,
                PreisgarantietypConverter.Singleton,
                RegisteranzahlConverter.Singleton,
                AufAbschlagstypConverter.Singleton,
                AufAbschlagszielConverter.Singleton,
                GeraeteklasseConverter.Singleton,
                GeraetetypConverter.Singleton,
                VoraussetzungenConverter.Singleton,
                TarifmerkmalConverter.Singleton,
                TariftypConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class TypConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Typ) || t == typeof(Typ?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ANGEBOT":
                    return Typ.Angebot;
                case "AUSSCHREIBUNG":
                    return Typ.Ausschreibung;
                case "BUENDELVERTRAG":
                    return Typ.Buendelvertrag;
                case "ENERGIEMENGE":
                    return Typ.Energiemenge;
                case "FREMDKOSTEN":
                    return Typ.Fremdkosten;
                case "GERAET":
                    return Typ.Geraet;
                case "GESCHAEFTSOBJEKT":
                    return Typ.Geschaeftsobjekt;
                case "GESCHAEFTSPARTNER":
                    return Typ.Geschaeftspartner;
                case "KOSTEN":
                    return Typ.Kosten;
                case "LASTGANG":
                    return Typ.Lastgang;
                case "MARKTLOKATION":
                    return Typ.Marktlokation;
                case "MARKTTEILNEHMER":
                    return Typ.Marktteilnehmer;
                case "MESSLOKATION":
                    return Typ.Messlokation;
                case "NETZNUTZUNGSRECHNUNG":
                    return Typ.Netznutzungsrechnung;
                case "PERSON":
                    return Typ.Person;
                case "PREISBLATT":
                    return Typ.Preisblatt;
                case "PREISBLATTDIENSTLEISTUNG":
                    return Typ.Preisblattdienstleistung;
                case "PREISBLATTHARDWARE":
                    return Typ.Preisblatthardware;
                case "PREISBLATTKONZESSIONSABGABE":
                    return Typ.Preisblattkonzessionsabgabe;
                case "PREISBLATTMESSUNG":
                    return Typ.Preisblattmessung;
                case "PREISBLATTNETZNUTZUNG":
                    return Typ.Preisblattnetznutzung;
                case "PREISBLATTUMLAGEN":
                    return Typ.Preisblattumlagen;
                case "RECHNUNG":
                    return Typ.Rechnung;
                case "REGION":
                    return Typ.Region;
                case "REGIONALTARIF":
                    return Typ.Regionaltarif;
                case "STANDORTEIGENSCHAFTEN":
                    return Typ.Standorteigenschaften;
                case "TARIF":
                    return Typ.Tarif;
                case "TARIFINFO":
                    return Typ.Tarifinfo;
                case "TARIFKOSTEN":
                    return Typ.Tarifkosten;
                case "TARIFPREISBLATT":
                    return Typ.Tarifpreisblatt;
                case "VERTRAG":
                    return Typ.Vertrag;
                case "ZAEHLER":
                    return Typ.Zaehler;
                case "ZEITREIHE":
                    return Typ.Zeitreihe;
            }
            throw new Exception("Cannot unmarshal type Typ");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Typ)untypedValue;
            switch (value)
            {
                case Typ.Angebot:
                    serializer.Serialize(writer, "ANGEBOT");
                    return;
                case Typ.Ausschreibung:
                    serializer.Serialize(writer, "AUSSCHREIBUNG");
                    return;
                case Typ.Buendelvertrag:
                    serializer.Serialize(writer, "BUENDELVERTRAG");
                    return;
                case Typ.Energiemenge:
                    serializer.Serialize(writer, "ENERGIEMENGE");
                    return;
                case Typ.Fremdkosten:
                    serializer.Serialize(writer, "FREMDKOSTEN");
                    return;
                case Typ.Geraet:
                    serializer.Serialize(writer, "GERAET");
                    return;
                case Typ.Geschaeftsobjekt:
                    serializer.Serialize(writer, "GESCHAEFTSOBJEKT");
                    return;
                case Typ.Geschaeftspartner:
                    serializer.Serialize(writer, "GESCHAEFTSPARTNER");
                    return;
                case Typ.Kosten:
                    serializer.Serialize(writer, "KOSTEN");
                    return;
                case Typ.Lastgang:
                    serializer.Serialize(writer, "LASTGANG");
                    return;
                case Typ.Marktlokation:
                    serializer.Serialize(writer, "MARKTLOKATION");
                    return;
                case Typ.Marktteilnehmer:
                    serializer.Serialize(writer, "MARKTTEILNEHMER");
                    return;
                case Typ.Messlokation:
                    serializer.Serialize(writer, "MESSLOKATION");
                    return;
                case Typ.Netznutzungsrechnung:
                    serializer.Serialize(writer, "NETZNUTZUNGSRECHNUNG");
                    return;
                case Typ.Person:
                    serializer.Serialize(writer, "PERSON");
                    return;
                case Typ.Preisblatt:
                    serializer.Serialize(writer, "PREISBLATT");
                    return;
                case Typ.Preisblattdienstleistung:
                    serializer.Serialize(writer, "PREISBLATTDIENSTLEISTUNG");
                    return;
                case Typ.Preisblatthardware:
                    serializer.Serialize(writer, "PREISBLATTHARDWARE");
                    return;
                case Typ.Preisblattkonzessionsabgabe:
                    serializer.Serialize(writer, "PREISBLATTKONZESSIONSABGABE");
                    return;
                case Typ.Preisblattmessung:
                    serializer.Serialize(writer, "PREISBLATTMESSUNG");
                    return;
                case Typ.Preisblattnetznutzung:
                    serializer.Serialize(writer, "PREISBLATTNETZNUTZUNG");
                    return;
                case Typ.Preisblattumlagen:
                    serializer.Serialize(writer, "PREISBLATTUMLAGEN");
                    return;
                case Typ.Rechnung:
                    serializer.Serialize(writer, "RECHNUNG");
                    return;
                case Typ.Region:
                    serializer.Serialize(writer, "REGION");
                    return;
                case Typ.Regionaltarif:
                    serializer.Serialize(writer, "REGIONALTARIF");
                    return;
                case Typ.Standorteigenschaften:
                    serializer.Serialize(writer, "STANDORTEIGENSCHAFTEN");
                    return;
                case Typ.Tarif:
                    serializer.Serialize(writer, "TARIF");
                    return;
                case Typ.Tarifinfo:
                    serializer.Serialize(writer, "TARIFINFO");
                    return;
                case Typ.Tarifkosten:
                    serializer.Serialize(writer, "TARIFKOSTEN");
                    return;
                case Typ.Tarifpreisblatt:
                    serializer.Serialize(writer, "TARIFPREISBLATT");
                    return;
                case Typ.Vertrag:
                    serializer.Serialize(writer, "VERTRAG");
                    return;
                case Typ.Zaehler:
                    serializer.Serialize(writer, "ZAEHLER");
                    return;
                case Typ.Zeitreihe:
                    serializer.Serialize(writer, "ZEITREIHE");
                    return;
            }
            throw new Exception("Cannot marshal type Typ");
        }

        public static readonly TypConverter Singleton = new TypConverter();
    }

    internal class LandescodeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Landescode) || t == typeof(Landescode?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "AD":
                    return Landescode.Ad;
                case "AE":
                    return Landescode.Ae;
                case "AF":
                    return Landescode.Af;
                case "AG":
                    return Landescode.Ag;
                case "AI":
                    return Landescode.Ai;
                case "AL":
                    return Landescode.Al;
                case "AM":
                    return Landescode.Am;
                case "AO":
                    return Landescode.Ao;
                case "AQ":
                    return Landescode.Aq;
                case "AR":
                    return Landescode.Ar;
                case "AS":
                    return Landescode.As;
                case "AT":
                    return Landescode.At;
                case "AU":
                    return Landescode.Au;
                case "AW":
                    return Landescode.Aw;
                case "AX":
                    return Landescode.Ax;
                case "AZ":
                    return Landescode.Az;
                case "BA":
                    return Landescode.Ba;
                case "BB":
                    return Landescode.Bb;
                case "BD":
                    return Landescode.Bd;
                case "BE":
                    return Landescode.Be;
                case "BF":
                    return Landescode.Bf;
                case "BG":
                    return Landescode.Bg;
                case "BH":
                    return Landescode.Bh;
                case "BI":
                    return Landescode.Bi;
                case "BJ":
                    return Landescode.Bj;
                case "BL":
                    return Landescode.Bl;
                case "BM":
                    return Landescode.Bm;
                case "BN":
                    return Landescode.Bn;
                case "BO":
                    return Landescode.Bo;
                case "BQ":
                    return Landescode.Bq;
                case "BR":
                    return Landescode.Br;
                case "BS":
                    return Landescode.Bs;
                case "BT":
                    return Landescode.Bt;
                case "BV":
                    return Landescode.Bv;
                case "BW":
                    return Landescode.Bw;
                case "BY":
                    return Landescode.By;
                case "BZ":
                    return Landescode.Bz;
                case "CA":
                    return Landescode.Ca;
                case "CC":
                    return Landescode.Cc;
                case "CD":
                    return Landescode.Cd;
                case "CF":
                    return Landescode.Cf;
                case "CG":
                    return Landescode.Cg;
                case "CH":
                    return Landescode.Ch;
                case "CI":
                    return Landescode.Ci;
                case "CK":
                    return Landescode.Ck;
                case "CL":
                    return Landescode.Cl;
                case "CM":
                    return Landescode.Cm;
                case "CN":
                    return Landescode.Cn;
                case "CO":
                    return Landescode.Co;
                case "CR":
                    return Landescode.Cr;
                case "CU":
                    return Landescode.Cu;
                case "CV":
                    return Landescode.Cv;
                case "CW":
                    return Landescode.Cw;
                case "CX":
                    return Landescode.Cx;
                case "CY":
                    return Landescode.Cy;
                case "CZ":
                    return Landescode.Cz;
                case "DE":
                    return Landescode.De;
                case "DJ":
                    return Landescode.Dj;
                case "DK":
                    return Landescode.Dk;
                case "DM":
                    return Landescode.Dm;
                case "DO":
                    return Landescode.Do;
                case "DZ":
                    return Landescode.Dz;
                case "EC":
                    return Landescode.Ec;
                case "EE":
                    return Landescode.Ee;
                case "EG":
                    return Landescode.Eg;
                case "EH":
                    return Landescode.Eh;
                case "ER":
                    return Landescode.Er;
                case "ES":
                    return Landescode.Es;
                case "ET":
                    return Landescode.Et;
                case "FI":
                    return Landescode.Fi;
                case "FJ":
                    return Landescode.Fj;
                case "FK":
                    return Landescode.Fk;
                case "FM":
                    return Landescode.Fm;
                case "FO":
                    return Landescode.Fo;
                case "FR":
                    return Landescode.Fr;
                case "GA":
                    return Landescode.Ga;
                case "GB":
                    return Landescode.Gb;
                case "GD":
                    return Landescode.Gd;
                case "GE":
                    return Landescode.Ge;
                case "GF":
                    return Landescode.Gf;
                case "GG":
                    return Landescode.Gg;
                case "GH":
                    return Landescode.Gh;
                case "GI":
                    return Landescode.Gi;
                case "GL":
                    return Landescode.Gl;
                case "GM":
                    return Landescode.Gm;
                case "GN":
                    return Landescode.Gn;
                case "GP":
                    return Landescode.Gp;
                case "GQ":
                    return Landescode.Gq;
                case "GR":
                    return Landescode.Gr;
                case "GS":
                    return Landescode.Gs;
                case "GT":
                    return Landescode.Gt;
                case "GU":
                    return Landescode.Gu;
                case "GW":
                    return Landescode.Gw;
                case "GY":
                    return Landescode.Gy;
                case "HK":
                    return Landescode.Hk;
                case "HM":
                    return Landescode.Hm;
                case "HN":
                    return Landescode.Hn;
                case "HR":
                    return Landescode.Hr;
                case "HT":
                    return Landescode.Ht;
                case "HU":
                    return Landescode.Hu;
                case "ID":
                    return Landescode.Id;
                case "IE":
                    return Landescode.Ie;
                case "IL":
                    return Landescode.Il;
                case "IM":
                    return Landescode.Im;
                case "IN":
                    return Landescode.In;
                case "IO":
                    return Landescode.Io;
                case "IQ":
                    return Landescode.Iq;
                case "IR":
                    return Landescode.Ir;
                case "IS":
                    return Landescode.Is;
                case "IT":
                    return Landescode.It;
                case "JE":
                    return Landescode.Je;
                case "JM":
                    return Landescode.Jm;
                case "JO":
                    return Landescode.Jo;
                case "JP":
                    return Landescode.Jp;
                case "KE":
                    return Landescode.Ke;
                case "KG":
                    return Landescode.Kg;
                case "KH":
                    return Landescode.Kh;
                case "KI":
                    return Landescode.Ki;
                case "KM":
                    return Landescode.Km;
                case "KN":
                    return Landescode.Kn;
                case "KP":
                    return Landescode.Kp;
                case "KR":
                    return Landescode.Kr;
                case "KW":
                    return Landescode.Kw;
                case "KY":
                    return Landescode.Ky;
                case "KZ":
                    return Landescode.Kz;
                case "LA":
                    return Landescode.La;
                case "LB":
                    return Landescode.Lb;
                case "LC":
                    return Landescode.Lc;
                case "LI":
                    return Landescode.Li;
                case "LK":
                    return Landescode.Lk;
                case "LR":
                    return Landescode.Lr;
                case "LS":
                    return Landescode.Ls;
                case "LT":
                    return Landescode.Lt;
                case "LU":
                    return Landescode.Lu;
                case "LV":
                    return Landescode.Lv;
                case "LY":
                    return Landescode.Ly;
                case "MA":
                    return Landescode.Ma;
                case "MC":
                    return Landescode.Mc;
                case "MD":
                    return Landescode.Md;
                case "ME":
                    return Landescode.Me;
                case "MF":
                    return Landescode.Mf;
                case "MG":
                    return Landescode.Mg;
                case "MH":
                    return Landescode.Mh;
                case "MK":
                    return Landescode.Mk;
                case "ML":
                    return Landescode.Ml;
                case "MM":
                    return Landescode.Mm;
                case "MN":
                    return Landescode.Mn;
                case "MO":
                    return Landescode.Mo;
                case "MP":
                    return Landescode.Mp;
                case "MQ":
                    return Landescode.Mq;
                case "MR":
                    return Landescode.Mr;
                case "MS":
                    return Landescode.Ms;
                case "MT":
                    return Landescode.Mt;
                case "MU":
                    return Landescode.Mu;
                case "MV":
                    return Landescode.Mv;
                case "MW":
                    return Landescode.Mw;
                case "MX":
                    return Landescode.Mx;
                case "MY":
                    return Landescode.My;
                case "MZ":
                    return Landescode.Mz;
                case "NA":
                    return Landescode.Na;
                case "NC":
                    return Landescode.Nc;
                case "NE":
                    return Landescode.Ne;
                case "NF":
                    return Landescode.Nf;
                case "NG":
                    return Landescode.Ng;
                case "NI":
                    return Landescode.Ni;
                case "NL":
                    return Landescode.Nl;
                case "NO":
                    return Landescode.No;
                case "NP":
                    return Landescode.Np;
                case "NR":
                    return Landescode.Nr;
                case "NU":
                    return Landescode.Nu;
                case "NZ":
                    return Landescode.Nz;
                case "OM":
                    return Landescode.Om;
                case "PA":
                    return Landescode.Pa;
                case "PE":
                    return Landescode.Pe;
                case "PF":
                    return Landescode.Pf;
                case "PG":
                    return Landescode.Pg;
                case "PH":
                    return Landescode.Ph;
                case "PK":
                    return Landescode.Pk;
                case "PL":
                    return Landescode.Pl;
                case "PM":
                    return Landescode.Pm;
                case "PN":
                    return Landescode.Pn;
                case "PR":
                    return Landescode.Pr;
                case "PS":
                    return Landescode.Ps;
                case "PT":
                    return Landescode.Pt;
                case "PW":
                    return Landescode.Pw;
                case "PY":
                    return Landescode.Py;
                case "QA":
                    return Landescode.Qa;
                case "RE":
                    return Landescode.Re;
                case "RO":
                    return Landescode.Ro;
                case "RS":
                    return Landescode.Rs;
                case "RU":
                    return Landescode.Ru;
                case "RW":
                    return Landescode.Rw;
                case "SA":
                    return Landescode.Sa;
                case "SB":
                    return Landescode.Sb;
                case "SC":
                    return Landescode.Sc;
                case "SD":
                    return Landescode.Sd;
                case "SE":
                    return Landescode.Se;
                case "SG":
                    return Landescode.Sg;
                case "SH":
                    return Landescode.Sh;
                case "SI":
                    return Landescode.Si;
                case "SJ":
                    return Landescode.Sj;
                case "SK":
                    return Landescode.Sk;
                case "SL":
                    return Landescode.Sl;
                case "SM":
                    return Landescode.Sm;
                case "SN":
                    return Landescode.Sn;
                case "SO":
                    return Landescode.So;
                case "SR":
                    return Landescode.Sr;
                case "SS":
                    return Landescode.Ss;
                case "ST":
                    return Landescode.St;
                case "SV":
                    return Landescode.Sv;
                case "SX":
                    return Landescode.Sx;
                case "SY":
                    return Landescode.Sy;
                case "SZ":
                    return Landescode.Sz;
                case "TC":
                    return Landescode.Tc;
                case "TD":
                    return Landescode.Td;
                case "TF":
                    return Landescode.Tf;
                case "TG":
                    return Landescode.Tg;
                case "TH":
                    return Landescode.Th;
                case "TJ":
                    return Landescode.Tj;
                case "TK":
                    return Landescode.Tk;
                case "TL":
                    return Landescode.Tl;
                case "TM":
                    return Landescode.Tm;
                case "TN":
                    return Landescode.Tn;
                case "TO":
                    return Landescode.To;
                case "TR":
                    return Landescode.Tr;
                case "TT":
                    return Landescode.Tt;
                case "TV":
                    return Landescode.Tv;
                case "TW":
                    return Landescode.Tw;
                case "TZ":
                    return Landescode.Tz;
                case "UA":
                    return Landescode.Ua;
                case "UG":
                    return Landescode.Ug;
                case "UM":
                    return Landescode.Um;
                case "US":
                    return Landescode.Us;
                case "UY":
                    return Landescode.Uy;
                case "UZ":
                    return Landescode.Uz;
                case "VA":
                    return Landescode.Va;
                case "VC":
                    return Landescode.Vc;
                case "VE":
                    return Landescode.Ve;
                case "VG":
                    return Landescode.Vg;
                case "VI":
                    return Landescode.Vi;
                case "VN":
                    return Landescode.Vn;
                case "VU":
                    return Landescode.Vu;
                case "WF":
                    return Landescode.Wf;
                case "WS":
                    return Landescode.Ws;
                case "XK":
                    return Landescode.Xk;
                case "YE":
                    return Landescode.Ye;
                case "YT":
                    return Landescode.Yt;
                case "ZA":
                    return Landescode.Za;
                case "ZM":
                    return Landescode.Zm;
                case "ZW":
                    return Landescode.Zw;
            }
            throw new Exception("Cannot unmarshal type Landescode");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Landescode)untypedValue;
            switch (value)
            {
                case Landescode.Ad:
                    serializer.Serialize(writer, "AD");
                    return;
                case Landescode.Ae:
                    serializer.Serialize(writer, "AE");
                    return;
                case Landescode.Af:
                    serializer.Serialize(writer, "AF");
                    return;
                case Landescode.Ag:
                    serializer.Serialize(writer, "AG");
                    return;
                case Landescode.Ai:
                    serializer.Serialize(writer, "AI");
                    return;
                case Landescode.Al:
                    serializer.Serialize(writer, "AL");
                    return;
                case Landescode.Am:
                    serializer.Serialize(writer, "AM");
                    return;
                case Landescode.Ao:
                    serializer.Serialize(writer, "AO");
                    return;
                case Landescode.Aq:
                    serializer.Serialize(writer, "AQ");
                    return;
                case Landescode.Ar:
                    serializer.Serialize(writer, "AR");
                    return;
                case Landescode.As:
                    serializer.Serialize(writer, "AS");
                    return;
                case Landescode.At:
                    serializer.Serialize(writer, "AT");
                    return;
                case Landescode.Au:
                    serializer.Serialize(writer, "AU");
                    return;
                case Landescode.Aw:
                    serializer.Serialize(writer, "AW");
                    return;
                case Landescode.Ax:
                    serializer.Serialize(writer, "AX");
                    return;
                case Landescode.Az:
                    serializer.Serialize(writer, "AZ");
                    return;
                case Landescode.Ba:
                    serializer.Serialize(writer, "BA");
                    return;
                case Landescode.Bb:
                    serializer.Serialize(writer, "BB");
                    return;
                case Landescode.Bd:
                    serializer.Serialize(writer, "BD");
                    return;
                case Landescode.Be:
                    serializer.Serialize(writer, "BE");
                    return;
                case Landescode.Bf:
                    serializer.Serialize(writer, "BF");
                    return;
                case Landescode.Bg:
                    serializer.Serialize(writer, "BG");
                    return;
                case Landescode.Bh:
                    serializer.Serialize(writer, "BH");
                    return;
                case Landescode.Bi:
                    serializer.Serialize(writer, "BI");
                    return;
                case Landescode.Bj:
                    serializer.Serialize(writer, "BJ");
                    return;
                case Landescode.Bl:
                    serializer.Serialize(writer, "BL");
                    return;
                case Landescode.Bm:
                    serializer.Serialize(writer, "BM");
                    return;
                case Landescode.Bn:
                    serializer.Serialize(writer, "BN");
                    return;
                case Landescode.Bo:
                    serializer.Serialize(writer, "BO");
                    return;
                case Landescode.Bq:
                    serializer.Serialize(writer, "BQ");
                    return;
                case Landescode.Br:
                    serializer.Serialize(writer, "BR");
                    return;
                case Landescode.Bs:
                    serializer.Serialize(writer, "BS");
                    return;
                case Landescode.Bt:
                    serializer.Serialize(writer, "BT");
                    return;
                case Landescode.Bv:
                    serializer.Serialize(writer, "BV");
                    return;
                case Landescode.Bw:
                    serializer.Serialize(writer, "BW");
                    return;
                case Landescode.By:
                    serializer.Serialize(writer, "BY");
                    return;
                case Landescode.Bz:
                    serializer.Serialize(writer, "BZ");
                    return;
                case Landescode.Ca:
                    serializer.Serialize(writer, "CA");
                    return;
                case Landescode.Cc:
                    serializer.Serialize(writer, "CC");
                    return;
                case Landescode.Cd:
                    serializer.Serialize(writer, "CD");
                    return;
                case Landescode.Cf:
                    serializer.Serialize(writer, "CF");
                    return;
                case Landescode.Cg:
                    serializer.Serialize(writer, "CG");
                    return;
                case Landescode.Ch:
                    serializer.Serialize(writer, "CH");
                    return;
                case Landescode.Ci:
                    serializer.Serialize(writer, "CI");
                    return;
                case Landescode.Ck:
                    serializer.Serialize(writer, "CK");
                    return;
                case Landescode.Cl:
                    serializer.Serialize(writer, "CL");
                    return;
                case Landescode.Cm:
                    serializer.Serialize(writer, "CM");
                    return;
                case Landescode.Cn:
                    serializer.Serialize(writer, "CN");
                    return;
                case Landescode.Co:
                    serializer.Serialize(writer, "CO");
                    return;
                case Landescode.Cr:
                    serializer.Serialize(writer, "CR");
                    return;
                case Landescode.Cu:
                    serializer.Serialize(writer, "CU");
                    return;
                case Landescode.Cv:
                    serializer.Serialize(writer, "CV");
                    return;
                case Landescode.Cw:
                    serializer.Serialize(writer, "CW");
                    return;
                case Landescode.Cx:
                    serializer.Serialize(writer, "CX");
                    return;
                case Landescode.Cy:
                    serializer.Serialize(writer, "CY");
                    return;
                case Landescode.Cz:
                    serializer.Serialize(writer, "CZ");
                    return;
                case Landescode.De:
                    serializer.Serialize(writer, "DE");
                    return;
                case Landescode.Dj:
                    serializer.Serialize(writer, "DJ");
                    return;
                case Landescode.Dk:
                    serializer.Serialize(writer, "DK");
                    return;
                case Landescode.Dm:
                    serializer.Serialize(writer, "DM");
                    return;
                case Landescode.Do:
                    serializer.Serialize(writer, "DO");
                    return;
                case Landescode.Dz:
                    serializer.Serialize(writer, "DZ");
                    return;
                case Landescode.Ec:
                    serializer.Serialize(writer, "EC");
                    return;
                case Landescode.Ee:
                    serializer.Serialize(writer, "EE");
                    return;
                case Landescode.Eg:
                    serializer.Serialize(writer, "EG");
                    return;
                case Landescode.Eh:
                    serializer.Serialize(writer, "EH");
                    return;
                case Landescode.Er:
                    serializer.Serialize(writer, "ER");
                    return;
                case Landescode.Es:
                    serializer.Serialize(writer, "ES");
                    return;
                case Landescode.Et:
                    serializer.Serialize(writer, "ET");
                    return;
                case Landescode.Fi:
                    serializer.Serialize(writer, "FI");
                    return;
                case Landescode.Fj:
                    serializer.Serialize(writer, "FJ");
                    return;
                case Landescode.Fk:
                    serializer.Serialize(writer, "FK");
                    return;
                case Landescode.Fm:
                    serializer.Serialize(writer, "FM");
                    return;
                case Landescode.Fo:
                    serializer.Serialize(writer, "FO");
                    return;
                case Landescode.Fr:
                    serializer.Serialize(writer, "FR");
                    return;
                case Landescode.Ga:
                    serializer.Serialize(writer, "GA");
                    return;
                case Landescode.Gb:
                    serializer.Serialize(writer, "GB");
                    return;
                case Landescode.Gd:
                    serializer.Serialize(writer, "GD");
                    return;
                case Landescode.Ge:
                    serializer.Serialize(writer, "GE");
                    return;
                case Landescode.Gf:
                    serializer.Serialize(writer, "GF");
                    return;
                case Landescode.Gg:
                    serializer.Serialize(writer, "GG");
                    return;
                case Landescode.Gh:
                    serializer.Serialize(writer, "GH");
                    return;
                case Landescode.Gi:
                    serializer.Serialize(writer, "GI");
                    return;
                case Landescode.Gl:
                    serializer.Serialize(writer, "GL");
                    return;
                case Landescode.Gm:
                    serializer.Serialize(writer, "GM");
                    return;
                case Landescode.Gn:
                    serializer.Serialize(writer, "GN");
                    return;
                case Landescode.Gp:
                    serializer.Serialize(writer, "GP");
                    return;
                case Landescode.Gq:
                    serializer.Serialize(writer, "GQ");
                    return;
                case Landescode.Gr:
                    serializer.Serialize(writer, "GR");
                    return;
                case Landescode.Gs:
                    serializer.Serialize(writer, "GS");
                    return;
                case Landescode.Gt:
                    serializer.Serialize(writer, "GT");
                    return;
                case Landescode.Gu:
                    serializer.Serialize(writer, "GU");
                    return;
                case Landescode.Gw:
                    serializer.Serialize(writer, "GW");
                    return;
                case Landescode.Gy:
                    serializer.Serialize(writer, "GY");
                    return;
                case Landescode.Hk:
                    serializer.Serialize(writer, "HK");
                    return;
                case Landescode.Hm:
                    serializer.Serialize(writer, "HM");
                    return;
                case Landescode.Hn:
                    serializer.Serialize(writer, "HN");
                    return;
                case Landescode.Hr:
                    serializer.Serialize(writer, "HR");
                    return;
                case Landescode.Ht:
                    serializer.Serialize(writer, "HT");
                    return;
                case Landescode.Hu:
                    serializer.Serialize(writer, "HU");
                    return;
                case Landescode.Id:
                    serializer.Serialize(writer, "ID");
                    return;
                case Landescode.Ie:
                    serializer.Serialize(writer, "IE");
                    return;
                case Landescode.Il:
                    serializer.Serialize(writer, "IL");
                    return;
                case Landescode.Im:
                    serializer.Serialize(writer, "IM");
                    return;
                case Landescode.In:
                    serializer.Serialize(writer, "IN");
                    return;
                case Landescode.Io:
                    serializer.Serialize(writer, "IO");
                    return;
                case Landescode.Iq:
                    serializer.Serialize(writer, "IQ");
                    return;
                case Landescode.Ir:
                    serializer.Serialize(writer, "IR");
                    return;
                case Landescode.Is:
                    serializer.Serialize(writer, "IS");
                    return;
                case Landescode.It:
                    serializer.Serialize(writer, "IT");
                    return;
                case Landescode.Je:
                    serializer.Serialize(writer, "JE");
                    return;
                case Landescode.Jm:
                    serializer.Serialize(writer, "JM");
                    return;
                case Landescode.Jo:
                    serializer.Serialize(writer, "JO");
                    return;
                case Landescode.Jp:
                    serializer.Serialize(writer, "JP");
                    return;
                case Landescode.Ke:
                    serializer.Serialize(writer, "KE");
                    return;
                case Landescode.Kg:
                    serializer.Serialize(writer, "KG");
                    return;
                case Landescode.Kh:
                    serializer.Serialize(writer, "KH");
                    return;
                case Landescode.Ki:
                    serializer.Serialize(writer, "KI");
                    return;
                case Landescode.Km:
                    serializer.Serialize(writer, "KM");
                    return;
                case Landescode.Kn:
                    serializer.Serialize(writer, "KN");
                    return;
                case Landescode.Kp:
                    serializer.Serialize(writer, "KP");
                    return;
                case Landescode.Kr:
                    serializer.Serialize(writer, "KR");
                    return;
                case Landescode.Kw:
                    serializer.Serialize(writer, "KW");
                    return;
                case Landescode.Ky:
                    serializer.Serialize(writer, "KY");
                    return;
                case Landescode.Kz:
                    serializer.Serialize(writer, "KZ");
                    return;
                case Landescode.La:
                    serializer.Serialize(writer, "LA");
                    return;
                case Landescode.Lb:
                    serializer.Serialize(writer, "LB");
                    return;
                case Landescode.Lc:
                    serializer.Serialize(writer, "LC");
                    return;
                case Landescode.Li:
                    serializer.Serialize(writer, "LI");
                    return;
                case Landescode.Lk:
                    serializer.Serialize(writer, "LK");
                    return;
                case Landescode.Lr:
                    serializer.Serialize(writer, "LR");
                    return;
                case Landescode.Ls:
                    serializer.Serialize(writer, "LS");
                    return;
                case Landescode.Lt:
                    serializer.Serialize(writer, "LT");
                    return;
                case Landescode.Lu:
                    serializer.Serialize(writer, "LU");
                    return;
                case Landescode.Lv:
                    serializer.Serialize(writer, "LV");
                    return;
                case Landescode.Ly:
                    serializer.Serialize(writer, "LY");
                    return;
                case Landescode.Ma:
                    serializer.Serialize(writer, "MA");
                    return;
                case Landescode.Mc:
                    serializer.Serialize(writer, "MC");
                    return;
                case Landescode.Md:
                    serializer.Serialize(writer, "MD");
                    return;
                case Landescode.Me:
                    serializer.Serialize(writer, "ME");
                    return;
                case Landescode.Mf:
                    serializer.Serialize(writer, "MF");
                    return;
                case Landescode.Mg:
                    serializer.Serialize(writer, "MG");
                    return;
                case Landescode.Mh:
                    serializer.Serialize(writer, "MH");
                    return;
                case Landescode.Mk:
                    serializer.Serialize(writer, "MK");
                    return;
                case Landescode.Ml:
                    serializer.Serialize(writer, "ML");
                    return;
                case Landescode.Mm:
                    serializer.Serialize(writer, "MM");
                    return;
                case Landescode.Mn:
                    serializer.Serialize(writer, "MN");
                    return;
                case Landescode.Mo:
                    serializer.Serialize(writer, "MO");
                    return;
                case Landescode.Mp:
                    serializer.Serialize(writer, "MP");
                    return;
                case Landescode.Mq:
                    serializer.Serialize(writer, "MQ");
                    return;
                case Landescode.Mr:
                    serializer.Serialize(writer, "MR");
                    return;
                case Landescode.Ms:
                    serializer.Serialize(writer, "MS");
                    return;
                case Landescode.Mt:
                    serializer.Serialize(writer, "MT");
                    return;
                case Landescode.Mu:
                    serializer.Serialize(writer, "MU");
                    return;
                case Landescode.Mv:
                    serializer.Serialize(writer, "MV");
                    return;
                case Landescode.Mw:
                    serializer.Serialize(writer, "MW");
                    return;
                case Landescode.Mx:
                    serializer.Serialize(writer, "MX");
                    return;
                case Landescode.My:
                    serializer.Serialize(writer, "MY");
                    return;
                case Landescode.Mz:
                    serializer.Serialize(writer, "MZ");
                    return;
                case Landescode.Na:
                    serializer.Serialize(writer, "NA");
                    return;
                case Landescode.Nc:
                    serializer.Serialize(writer, "NC");
                    return;
                case Landescode.Ne:
                    serializer.Serialize(writer, "NE");
                    return;
                case Landescode.Nf:
                    serializer.Serialize(writer, "NF");
                    return;
                case Landescode.Ng:
                    serializer.Serialize(writer, "NG");
                    return;
                case Landescode.Ni:
                    serializer.Serialize(writer, "NI");
                    return;
                case Landescode.Nl:
                    serializer.Serialize(writer, "NL");
                    return;
                case Landescode.No:
                    serializer.Serialize(writer, "NO");
                    return;
                case Landescode.Np:
                    serializer.Serialize(writer, "NP");
                    return;
                case Landescode.Nr:
                    serializer.Serialize(writer, "NR");
                    return;
                case Landescode.Nu:
                    serializer.Serialize(writer, "NU");
                    return;
                case Landescode.Nz:
                    serializer.Serialize(writer, "NZ");
                    return;
                case Landescode.Om:
                    serializer.Serialize(writer, "OM");
                    return;
                case Landescode.Pa:
                    serializer.Serialize(writer, "PA");
                    return;
                case Landescode.Pe:
                    serializer.Serialize(writer, "PE");
                    return;
                case Landescode.Pf:
                    serializer.Serialize(writer, "PF");
                    return;
                case Landescode.Pg:
                    serializer.Serialize(writer, "PG");
                    return;
                case Landescode.Ph:
                    serializer.Serialize(writer, "PH");
                    return;
                case Landescode.Pk:
                    serializer.Serialize(writer, "PK");
                    return;
                case Landescode.Pl:
                    serializer.Serialize(writer, "PL");
                    return;
                case Landescode.Pm:
                    serializer.Serialize(writer, "PM");
                    return;
                case Landescode.Pn:
                    serializer.Serialize(writer, "PN");
                    return;
                case Landescode.Pr:
                    serializer.Serialize(writer, "PR");
                    return;
                case Landescode.Ps:
                    serializer.Serialize(writer, "PS");
                    return;
                case Landescode.Pt:
                    serializer.Serialize(writer, "PT");
                    return;
                case Landescode.Pw:
                    serializer.Serialize(writer, "PW");
                    return;
                case Landescode.Py:
                    serializer.Serialize(writer, "PY");
                    return;
                case Landescode.Qa:
                    serializer.Serialize(writer, "QA");
                    return;
                case Landescode.Re:
                    serializer.Serialize(writer, "RE");
                    return;
                case Landescode.Ro:
                    serializer.Serialize(writer, "RO");
                    return;
                case Landescode.Rs:
                    serializer.Serialize(writer, "RS");
                    return;
                case Landescode.Ru:
                    serializer.Serialize(writer, "RU");
                    return;
                case Landescode.Rw:
                    serializer.Serialize(writer, "RW");
                    return;
                case Landescode.Sa:
                    serializer.Serialize(writer, "SA");
                    return;
                case Landescode.Sb:
                    serializer.Serialize(writer, "SB");
                    return;
                case Landescode.Sc:
                    serializer.Serialize(writer, "SC");
                    return;
                case Landescode.Sd:
                    serializer.Serialize(writer, "SD");
                    return;
                case Landescode.Se:
                    serializer.Serialize(writer, "SE");
                    return;
                case Landescode.Sg:
                    serializer.Serialize(writer, "SG");
                    return;
                case Landescode.Sh:
                    serializer.Serialize(writer, "SH");
                    return;
                case Landescode.Si:
                    serializer.Serialize(writer, "SI");
                    return;
                case Landescode.Sj:
                    serializer.Serialize(writer, "SJ");
                    return;
                case Landescode.Sk:
                    serializer.Serialize(writer, "SK");
                    return;
                case Landescode.Sl:
                    serializer.Serialize(writer, "SL");
                    return;
                case Landescode.Sm:
                    serializer.Serialize(writer, "SM");
                    return;
                case Landescode.Sn:
                    serializer.Serialize(writer, "SN");
                    return;
                case Landescode.So:
                    serializer.Serialize(writer, "SO");
                    return;
                case Landescode.Sr:
                    serializer.Serialize(writer, "SR");
                    return;
                case Landescode.Ss:
                    serializer.Serialize(writer, "SS");
                    return;
                case Landescode.St:
                    serializer.Serialize(writer, "ST");
                    return;
                case Landescode.Sv:
                    serializer.Serialize(writer, "SV");
                    return;
                case Landescode.Sx:
                    serializer.Serialize(writer, "SX");
                    return;
                case Landescode.Sy:
                    serializer.Serialize(writer, "SY");
                    return;
                case Landescode.Sz:
                    serializer.Serialize(writer, "SZ");
                    return;
                case Landescode.Tc:
                    serializer.Serialize(writer, "TC");
                    return;
                case Landescode.Td:
                    serializer.Serialize(writer, "TD");
                    return;
                case Landescode.Tf:
                    serializer.Serialize(writer, "TF");
                    return;
                case Landescode.Tg:
                    serializer.Serialize(writer, "TG");
                    return;
                case Landescode.Th:
                    serializer.Serialize(writer, "TH");
                    return;
                case Landescode.Tj:
                    serializer.Serialize(writer, "TJ");
                    return;
                case Landescode.Tk:
                    serializer.Serialize(writer, "TK");
                    return;
                case Landescode.Tl:
                    serializer.Serialize(writer, "TL");
                    return;
                case Landescode.Tm:
                    serializer.Serialize(writer, "TM");
                    return;
                case Landescode.Tn:
                    serializer.Serialize(writer, "TN");
                    return;
                case Landescode.To:
                    serializer.Serialize(writer, "TO");
                    return;
                case Landescode.Tr:
                    serializer.Serialize(writer, "TR");
                    return;
                case Landescode.Tt:
                    serializer.Serialize(writer, "TT");
                    return;
                case Landescode.Tv:
                    serializer.Serialize(writer, "TV");
                    return;
                case Landescode.Tw:
                    serializer.Serialize(writer, "TW");
                    return;
                case Landescode.Tz:
                    serializer.Serialize(writer, "TZ");
                    return;
                case Landescode.Ua:
                    serializer.Serialize(writer, "UA");
                    return;
                case Landescode.Ug:
                    serializer.Serialize(writer, "UG");
                    return;
                case Landescode.Um:
                    serializer.Serialize(writer, "UM");
                    return;
                case Landescode.Us:
                    serializer.Serialize(writer, "US");
                    return;
                case Landescode.Uy:
                    serializer.Serialize(writer, "UY");
                    return;
                case Landescode.Uz:
                    serializer.Serialize(writer, "UZ");
                    return;
                case Landescode.Va:
                    serializer.Serialize(writer, "VA");
                    return;
                case Landescode.Vc:
                    serializer.Serialize(writer, "VC");
                    return;
                case Landescode.Ve:
                    serializer.Serialize(writer, "VE");
                    return;
                case Landescode.Vg:
                    serializer.Serialize(writer, "VG");
                    return;
                case Landescode.Vi:
                    serializer.Serialize(writer, "VI");
                    return;
                case Landescode.Vn:
                    serializer.Serialize(writer, "VN");
                    return;
                case Landescode.Vu:
                    serializer.Serialize(writer, "VU");
                    return;
                case Landescode.Wf:
                    serializer.Serialize(writer, "WF");
                    return;
                case Landescode.Ws:
                    serializer.Serialize(writer, "WS");
                    return;
                case Landescode.Xk:
                    serializer.Serialize(writer, "XK");
                    return;
                case Landescode.Ye:
                    serializer.Serialize(writer, "YE");
                    return;
                case Landescode.Yt:
                    serializer.Serialize(writer, "YT");
                    return;
                case Landescode.Za:
                    serializer.Serialize(writer, "ZA");
                    return;
                case Landescode.Zm:
                    serializer.Serialize(writer, "ZM");
                    return;
                case Landescode.Zw:
                    serializer.Serialize(writer, "ZW");
                    return;
            }
            throw new Exception("Cannot marshal type Landescode");
        }

        public static readonly LandescodeConverter Singleton = new LandescodeConverter();
    }

    internal class AnredeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Anrede) || t == typeof(Anrede?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "EHELEUTE":
                    return Anrede.Eheleute;
                case "ERBENGEMEINSCHAFT":
                    return Anrede.Erbengemeinschaft;
                case "FAMILIE":
                    return Anrede.Familie;
                case "FIRMA":
                    return Anrede.Firma;
                case "FRAU":
                    return Anrede.Frau;
                case "GRUNDSTUECKSGEMEINSCHAFT":
                    return Anrede.Grundstuecksgemeinschaft;
                case "HERR":
                    return Anrede.Herr;
            }
            throw new Exception("Cannot unmarshal type Anrede");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Anrede)untypedValue;
            switch (value)
            {
                case Anrede.Eheleute:
                    serializer.Serialize(writer, "EHELEUTE");
                    return;
                case Anrede.Erbengemeinschaft:
                    serializer.Serialize(writer, "ERBENGEMEINSCHAFT");
                    return;
                case Anrede.Familie:
                    serializer.Serialize(writer, "FAMILIE");
                    return;
                case Anrede.Firma:
                    serializer.Serialize(writer, "FIRMA");
                    return;
                case Anrede.Frau:
                    serializer.Serialize(writer, "FRAU");
                    return;
                case Anrede.Grundstuecksgemeinschaft:
                    serializer.Serialize(writer, "GRUNDSTUECKSGEMEINSCHAFT");
                    return;
                case Anrede.Herr:
                    serializer.Serialize(writer, "HERR");
                    return;
            }
            throw new Exception("Cannot marshal type Anrede");
        }

        public static readonly AnredeConverter Singleton = new AnredeConverter();
    }

    internal class KontaktartConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Kontaktart) || t == typeof(Kontaktart?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "E_MAIL":
                    return Kontaktart.EMail;
                case "FAX":
                    return Kontaktart.Fax;
                case "POSTWEG":
                    return Kontaktart.Postweg;
                case "SMS":
                    return Kontaktart.Sms;
                case "TELEFON":
                    return Kontaktart.Telefon;
            }
            throw new Exception("Cannot unmarshal type Kontaktart");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Kontaktart)untypedValue;
            switch (value)
            {
                case Kontaktart.EMail:
                    serializer.Serialize(writer, "E_MAIL");
                    return;
                case Kontaktart.Fax:
                    serializer.Serialize(writer, "FAX");
                    return;
                case Kontaktart.Postweg:
                    serializer.Serialize(writer, "POSTWEG");
                    return;
                case Kontaktart.Sms:
                    serializer.Serialize(writer, "SMS");
                    return;
                case Kontaktart.Telefon:
                    serializer.Serialize(writer, "TELEFON");
                    return;
            }
            throw new Exception("Cannot marshal type Kontaktart");
        }

        public static readonly KontaktartConverter Singleton = new KontaktartConverter();
    }

    internal class TitelConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Titel) || t == typeof(Titel?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "DR":
                    return Titel.Dr;
                case "PROF":
                    return Titel.Prof;
                case "PROF_DR":
                    return Titel.ProfDr;
            }
            throw new Exception("Cannot unmarshal type Titel");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Titel)untypedValue;
            switch (value)
            {
                case Titel.Dr:
                    serializer.Serialize(writer, "DR");
                    return;
                case Titel.Prof:
                    serializer.Serialize(writer, "PROF");
                    return;
                case Titel.ProfDr:
                    serializer.Serialize(writer, "PROF_DR");
                    return;
            }
            throw new Exception("Cannot marshal type Titel");
        }

        public static readonly TitelConverter Singleton = new TitelConverter();
    }

    internal class ThemengebietConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Themengebiet) || t == typeof(Themengebiet?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ALLGEMEINER_INFORMATIONSAUSTAUSCH":
                    return Themengebiet.AllgemeinerInformationsaustausch;
                case "ALOCAT":
                    return Themengebiet.Alocat;
                case "ANSPRECHPARTNER_ALLGEMEIN":
                    return Themengebiet.AnsprechpartnerAllgemein;
                case "ANSPRECHPARTNER_BDEW_DVGW":
                    return Themengebiet.AnsprechpartnerBdewDvgw;
                case "ANSPRECHPARTNER_IT_TECHNIK":
                    return Themengebiet.AnsprechpartnerItTechnik;
                case "AN_UND_ABMELDUNG":
                    return Themengebiet.AnUndAbmeldung;
                case "APERAK":
                    return Themengebiet.Aperak;
                case "BEWEGUNGSDATEN":
                    return Themengebiet.Bewegungsdaten;
                case "BILANZIERUNG":
                    return Themengebiet.Bilanzierung;
                case "BILANZKREISKOORDINATOR":
                    return Themengebiet.Bilanzkreiskoordinator;
                case "BILANZKREISVERANTWORTLICHER":
                    return Themengebiet.Bilanzkreisverantwortlicher;
                case "CONTRL":
                    return Themengebiet.Contrl;
                case "DATENFORMATE_ZERTIFIKATE_VERSCHLUESSELUNGEN":
                    return Themengebiet.DatenformateZertifikateVerschluesselungen;
                case "DEBITORENMANAGEMENT":
                    return Themengebiet.Debitorenmanagement;
                case "DEMAND_SIDE_MANAGEMENT":
                    return Themengebiet.DemandSideManagement;
                case "EDIFACT":
                    return Themengebiet.Edifact;
                case "EDI_VEREINBARUNG":
                    return Themengebiet.EdiVereinbarung;
                case "EINSPEISUNG":
                    return Themengebiet.Einspeisung;
                case "ENERGIEDATENMANAGEMENT":
                    return Themengebiet.Energiedatenmanagement;
                case "FAHRPLANMANAGEMENT":
                    return Themengebiet.Fahrplanmanagement;
                case "GABI":
                    return Themengebiet.Gabi;
                case "GELI":
                    return Themengebiet.Geli;
                case "GERAETERUECKGABE":
                    return Themengebiet.Geraeterueckgabe;
                case "GERAETEWECHSEL":
                    return Themengebiet.Geraetewechsel;
                case "GPKE":
                    return Themengebiet.Gpke;
                case "INBETRIEBNAHME":
                    return Themengebiet.Inbetriebnahme;
                case "INVOIC":
                    return Themengebiet.Invoic;
                case "KAPAZITAETSMANAGEMENT":
                    return Themengebiet.Kapazitaetsmanagement;
                case "KLAERFAELLE":
                    return Themengebiet.Klaerfaelle;
                case "LASTGAENGE_RLM":
                    return Themengebiet.LastgaengeRlm;
                case "LIEFERANTENRAHMENVERTRAG":
                    return Themengebiet.Lieferantenrahmenvertrag;
                case "LIEFERANTENWECHSEL":
                    return Themengebiet.Lieferantenwechsel;
                case "MABIS":
                    return Themengebiet.Mabis;
                case "MAHNWESEN":
                    return Themengebiet.Mahnwesen;
                case "MARKTGEBIETSVERANTWORTLICHER":
                    return Themengebiet.Marktgebietsverantwortlicher;
                case "MARKTKOMMUNIKATION":
                    return Themengebiet.Marktkommunikation;
                case "MEHR_MINDERMENGEN":
                    return Themengebiet.MehrMindermengen;
                case "MSB_MDL":
                    return Themengebiet.MsbMdl;
                case "MSCONS":
                    return Themengebiet.Mscons;
                case "NETZABRECHNUNG":
                    return Themengebiet.Netzabrechnung;
                case "NETZENTGELTE":
                    return Themengebiet.Netzentgelte;
                case "NETZMANAGEMENT":
                    return Themengebiet.Netzmanagement;
                case "ORDERS":
                    return Themengebiet.Orders;
                case "ORDERSP":
                    return Themengebiet.Ordersp;
                case "RECHT":
                    return Themengebiet.Recht;
                case "REGULIERUNGSMANAGEMENT":
                    return Themengebiet.Regulierungsmanagement;
                case "REKLAMATIONEN":
                    return Themengebiet.Reklamationen;
                case "REMADV":
                    return Themengebiet.Remadv;
                case "SPERREN_ENTSPERREN_INKASSO":
                    return Themengebiet.SperrenEntsperrenInkasso;
                case "STAMMDATEN":
                    return Themengebiet.Stammdaten;
                case "STOERUNGSFAELLE":
                    return Themengebiet.Stoerungsfaelle;
                case "TECHNISCHE_FRAGEN":
                    return Themengebiet.TechnischeFragen;
                case "UMSTELLUNG_INVOIC":
                    return Themengebiet.UmstellungInvoic;
                case "UTILMD":
                    return Themengebiet.Utilmd;
                case "VERSCHLUESSELUNG_SIGNATUR":
                    return Themengebiet.VerschluesselungSignatur;
                case "VERTRAGSMANAGEMENT":
                    return Themengebiet.Vertragsmanagement;
                case "VERTRIEB":
                    return Themengebiet.Vertrieb;
                case "WIM":
                    return Themengebiet.Wim;
                case "ZAEHLERSTAENDE_SLP":
                    return Themengebiet.ZaehlerstaendeSlp;
                case "ZAHLUNGSVERKEHR":
                    return Themengebiet.Zahlungsverkehr;
                case "ZUORDNUNGSVEREINBARUNG":
                    return Themengebiet.Zuordnungsvereinbarung;
            }
            throw new Exception("Cannot unmarshal type Themengebiet");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Themengebiet)untypedValue;
            switch (value)
            {
                case Themengebiet.AllgemeinerInformationsaustausch:
                    serializer.Serialize(writer, "ALLGEMEINER_INFORMATIONSAUSTAUSCH");
                    return;
                case Themengebiet.Alocat:
                    serializer.Serialize(writer, "ALOCAT");
                    return;
                case Themengebiet.AnsprechpartnerAllgemein:
                    serializer.Serialize(writer, "ANSPRECHPARTNER_ALLGEMEIN");
                    return;
                case Themengebiet.AnsprechpartnerBdewDvgw:
                    serializer.Serialize(writer, "ANSPRECHPARTNER_BDEW_DVGW");
                    return;
                case Themengebiet.AnsprechpartnerItTechnik:
                    serializer.Serialize(writer, "ANSPRECHPARTNER_IT_TECHNIK");
                    return;
                case Themengebiet.AnUndAbmeldung:
                    serializer.Serialize(writer, "AN_UND_ABMELDUNG");
                    return;
                case Themengebiet.Aperak:
                    serializer.Serialize(writer, "APERAK");
                    return;
                case Themengebiet.Bewegungsdaten:
                    serializer.Serialize(writer, "BEWEGUNGSDATEN");
                    return;
                case Themengebiet.Bilanzierung:
                    serializer.Serialize(writer, "BILANZIERUNG");
                    return;
                case Themengebiet.Bilanzkreiskoordinator:
                    serializer.Serialize(writer, "BILANZKREISKOORDINATOR");
                    return;
                case Themengebiet.Bilanzkreisverantwortlicher:
                    serializer.Serialize(writer, "BILANZKREISVERANTWORTLICHER");
                    return;
                case Themengebiet.Contrl:
                    serializer.Serialize(writer, "CONTRL");
                    return;
                case Themengebiet.DatenformateZertifikateVerschluesselungen:
                    serializer.Serialize(writer, "DATENFORMATE_ZERTIFIKATE_VERSCHLUESSELUNGEN");
                    return;
                case Themengebiet.Debitorenmanagement:
                    serializer.Serialize(writer, "DEBITORENMANAGEMENT");
                    return;
                case Themengebiet.DemandSideManagement:
                    serializer.Serialize(writer, "DEMAND_SIDE_MANAGEMENT");
                    return;
                case Themengebiet.Edifact:
                    serializer.Serialize(writer, "EDIFACT");
                    return;
                case Themengebiet.EdiVereinbarung:
                    serializer.Serialize(writer, "EDI_VEREINBARUNG");
                    return;
                case Themengebiet.Einspeisung:
                    serializer.Serialize(writer, "EINSPEISUNG");
                    return;
                case Themengebiet.Energiedatenmanagement:
                    serializer.Serialize(writer, "ENERGIEDATENMANAGEMENT");
                    return;
                case Themengebiet.Fahrplanmanagement:
                    serializer.Serialize(writer, "FAHRPLANMANAGEMENT");
                    return;
                case Themengebiet.Gabi:
                    serializer.Serialize(writer, "GABI");
                    return;
                case Themengebiet.Geli:
                    serializer.Serialize(writer, "GELI");
                    return;
                case Themengebiet.Geraeterueckgabe:
                    serializer.Serialize(writer, "GERAETERUECKGABE");
                    return;
                case Themengebiet.Geraetewechsel:
                    serializer.Serialize(writer, "GERAETEWECHSEL");
                    return;
                case Themengebiet.Gpke:
                    serializer.Serialize(writer, "GPKE");
                    return;
                case Themengebiet.Inbetriebnahme:
                    serializer.Serialize(writer, "INBETRIEBNAHME");
                    return;
                case Themengebiet.Invoic:
                    serializer.Serialize(writer, "INVOIC");
                    return;
                case Themengebiet.Kapazitaetsmanagement:
                    serializer.Serialize(writer, "KAPAZITAETSMANAGEMENT");
                    return;
                case Themengebiet.Klaerfaelle:
                    serializer.Serialize(writer, "KLAERFAELLE");
                    return;
                case Themengebiet.LastgaengeRlm:
                    serializer.Serialize(writer, "LASTGAENGE_RLM");
                    return;
                case Themengebiet.Lieferantenrahmenvertrag:
                    serializer.Serialize(writer, "LIEFERANTENRAHMENVERTRAG");
                    return;
                case Themengebiet.Lieferantenwechsel:
                    serializer.Serialize(writer, "LIEFERANTENWECHSEL");
                    return;
                case Themengebiet.Mabis:
                    serializer.Serialize(writer, "MABIS");
                    return;
                case Themengebiet.Mahnwesen:
                    serializer.Serialize(writer, "MAHNWESEN");
                    return;
                case Themengebiet.Marktgebietsverantwortlicher:
                    serializer.Serialize(writer, "MARKTGEBIETSVERANTWORTLICHER");
                    return;
                case Themengebiet.Marktkommunikation:
                    serializer.Serialize(writer, "MARKTKOMMUNIKATION");
                    return;
                case Themengebiet.MehrMindermengen:
                    serializer.Serialize(writer, "MEHR_MINDERMENGEN");
                    return;
                case Themengebiet.MsbMdl:
                    serializer.Serialize(writer, "MSB_MDL");
                    return;
                case Themengebiet.Mscons:
                    serializer.Serialize(writer, "MSCONS");
                    return;
                case Themengebiet.Netzabrechnung:
                    serializer.Serialize(writer, "NETZABRECHNUNG");
                    return;
                case Themengebiet.Netzentgelte:
                    serializer.Serialize(writer, "NETZENTGELTE");
                    return;
                case Themengebiet.Netzmanagement:
                    serializer.Serialize(writer, "NETZMANAGEMENT");
                    return;
                case Themengebiet.Orders:
                    serializer.Serialize(writer, "ORDERS");
                    return;
                case Themengebiet.Ordersp:
                    serializer.Serialize(writer, "ORDERSP");
                    return;
                case Themengebiet.Recht:
                    serializer.Serialize(writer, "RECHT");
                    return;
                case Themengebiet.Regulierungsmanagement:
                    serializer.Serialize(writer, "REGULIERUNGSMANAGEMENT");
                    return;
                case Themengebiet.Reklamationen:
                    serializer.Serialize(writer, "REKLAMATIONEN");
                    return;
                case Themengebiet.Remadv:
                    serializer.Serialize(writer, "REMADV");
                    return;
                case Themengebiet.SperrenEntsperrenInkasso:
                    serializer.Serialize(writer, "SPERREN_ENTSPERREN_INKASSO");
                    return;
                case Themengebiet.Stammdaten:
                    serializer.Serialize(writer, "STAMMDATEN");
                    return;
                case Themengebiet.Stoerungsfaelle:
                    serializer.Serialize(writer, "STOERUNGSFAELLE");
                    return;
                case Themengebiet.TechnischeFragen:
                    serializer.Serialize(writer, "TECHNISCHE_FRAGEN");
                    return;
                case Themengebiet.UmstellungInvoic:
                    serializer.Serialize(writer, "UMSTELLUNG_INVOIC");
                    return;
                case Themengebiet.Utilmd:
                    serializer.Serialize(writer, "UTILMD");
                    return;
                case Themengebiet.VerschluesselungSignatur:
                    serializer.Serialize(writer, "VERSCHLUESSELUNG_SIGNATUR");
                    return;
                case Themengebiet.Vertragsmanagement:
                    serializer.Serialize(writer, "VERTRAGSMANAGEMENT");
                    return;
                case Themengebiet.Vertrieb:
                    serializer.Serialize(writer, "VERTRIEB");
                    return;
                case Themengebiet.Wim:
                    serializer.Serialize(writer, "WIM");
                    return;
                case Themengebiet.ZaehlerstaendeSlp:
                    serializer.Serialize(writer, "ZAEHLERSTAENDE_SLP");
                    return;
                case Themengebiet.Zahlungsverkehr:
                    serializer.Serialize(writer, "ZAHLUNGSVERKEHR");
                    return;
                case Themengebiet.Zuordnungsvereinbarung:
                    serializer.Serialize(writer, "ZUORDNUNGSVEREINBARUNG");
                    return;
            }
            throw new Exception("Cannot marshal type Themengebiet");
        }

        public static readonly ThemengebietConverter Singleton = new ThemengebietConverter();
    }

    internal class GeschaeftspartnerrolleConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Geschaeftspartnerrolle) || t == typeof(Geschaeftspartnerrolle?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "DIENSTLEISTER":
                    return Geschaeftspartnerrolle.Dienstleister;
                case "INTERESSENT":
                    return Geschaeftspartnerrolle.Interessent;
                case "KUNDE":
                    return Geschaeftspartnerrolle.Kunde;
                case "LIEFERANT":
                    return Geschaeftspartnerrolle.Lieferant;
                case "MARKTPARTNER":
                    return Geschaeftspartnerrolle.Marktpartner;
            }
            throw new Exception("Cannot unmarshal type Geschaeftspartnerrolle");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Geschaeftspartnerrolle)untypedValue;
            switch (value)
            {
                case Geschaeftspartnerrolle.Dienstleister:
                    serializer.Serialize(writer, "DIENSTLEISTER");
                    return;
                case Geschaeftspartnerrolle.Interessent:
                    serializer.Serialize(writer, "INTERESSENT");
                    return;
                case Geschaeftspartnerrolle.Kunde:
                    serializer.Serialize(writer, "KUNDE");
                    return;
                case Geschaeftspartnerrolle.Lieferant:
                    serializer.Serialize(writer, "LIEFERANT");
                    return;
                case Geschaeftspartnerrolle.Marktpartner:
                    serializer.Serialize(writer, "MARKTPARTNER");
                    return;
            }
            throw new Exception("Cannot marshal type Geschaeftspartnerrolle");
        }

        public static readonly GeschaeftspartnerrolleConverter Singleton = new GeschaeftspartnerrolleConverter();
    }

    internal class OrganisationstypConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Organisationstyp) || t == typeof(Organisationstyp?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "KOMMUNALE_EINRICHTUNG":
                    return Organisationstyp.KommunaleEinrichtung;
                case "PRIVATPERSON":
                    return Organisationstyp.Privatperson;
                case "STAATLICHE_BEHOERDE":
                    return Organisationstyp.StaatlicheBehoerde;
                case "UNTERNEHMEN":
                    return Organisationstyp.Unternehmen;
            }
            throw new Exception("Cannot unmarshal type Organisationstyp");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Organisationstyp)untypedValue;
            switch (value)
            {
                case Organisationstyp.KommunaleEinrichtung:
                    serializer.Serialize(writer, "KOMMUNALE_EINRICHTUNG");
                    return;
                case Organisationstyp.Privatperson:
                    serializer.Serialize(writer, "PRIVATPERSON");
                    return;
                case Organisationstyp.StaatlicheBehoerde:
                    serializer.Serialize(writer, "STAATLICHE_BEHOERDE");
                    return;
                case Organisationstyp.Unternehmen:
                    serializer.Serialize(writer, "UNTERNEHMEN");
                    return;
            }
            throw new Exception("Cannot marshal type Organisationstyp");
        }

        public static readonly OrganisationstypConverter Singleton = new OrganisationstypConverter();
    }

    internal class MarktrolleConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Marktrolle) || t == typeof(Marktrolle?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "BIKO":
                    return Marktrolle.Biko;
                case "BKV":
                    return Marktrolle.Bkv;
                case "BTR":
                    return Marktrolle.Btr;
                case "DP":
                    return Marktrolle.Dp;
                case "EIV":
                    return Marktrolle.Eiv;
                case "ESA":
                    return Marktrolle.Esa;
                case "KN":
                    return Marktrolle.Kn;
                case "LF":
                    return Marktrolle.Lf;
                case "MGV":
                    return Marktrolle.Mgv;
                case "MSB":
                    return Marktrolle.Msb;
                case "NB":
                    return Marktrolle.Nb;
                case "RB":
                    return Marktrolle.Rb;
                case "UENB":
                    return Marktrolle.Uenb;
            }
            throw new Exception("Cannot unmarshal type Marktrolle");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Marktrolle)untypedValue;
            switch (value)
            {
                case Marktrolle.Biko:
                    serializer.Serialize(writer, "BIKO");
                    return;
                case Marktrolle.Bkv:
                    serializer.Serialize(writer, "BKV");
                    return;
                case Marktrolle.Btr:
                    serializer.Serialize(writer, "BTR");
                    return;
                case Marktrolle.Dp:
                    serializer.Serialize(writer, "DP");
                    return;
                case Marktrolle.Eiv:
                    serializer.Serialize(writer, "EIV");
                    return;
                case Marktrolle.Esa:
                    serializer.Serialize(writer, "ESA");
                    return;
                case Marktrolle.Kn:
                    serializer.Serialize(writer, "KN");
                    return;
                case Marktrolle.Lf:
                    serializer.Serialize(writer, "LF");
                    return;
                case Marktrolle.Mgv:
                    serializer.Serialize(writer, "MGV");
                    return;
                case Marktrolle.Msb:
                    serializer.Serialize(writer, "MSB");
                    return;
                case Marktrolle.Nb:
                    serializer.Serialize(writer, "NB");
                    return;
                case Marktrolle.Rb:
                    serializer.Serialize(writer, "RB");
                    return;
                case Marktrolle.Uenb:
                    serializer.Serialize(writer, "UENB");
                    return;
            }
            throw new Exception("Cannot marshal type Marktrolle");
        }

        public static readonly MarktrolleConverter Singleton = new MarktrolleConverter();
    }

    internal class RollencodetypConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Rollencodetyp) || t == typeof(Rollencodetyp?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "BDEW":
                    return Rollencodetyp.Bdew;
                case "DVGW":
                    return Rollencodetyp.Dvgw;
                case "GLN":
                    return Rollencodetyp.Gln;
            }
            throw new Exception("Cannot unmarshal type Rollencodetyp");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Rollencodetyp)untypedValue;
            switch (value)
            {
                case Rollencodetyp.Bdew:
                    serializer.Serialize(writer, "BDEW");
                    return;
                case Rollencodetyp.Dvgw:
                    serializer.Serialize(writer, "DVGW");
                    return;
                case Rollencodetyp.Gln:
                    serializer.Serialize(writer, "GLN");
                    return;
            }
            throw new Exception("Cannot marshal type Rollencodetyp");
        }

        public static readonly RollencodetypConverter Singleton = new RollencodetypConverter();
    }

    internal class SparteConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Sparte) || t == typeof(Sparte?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ABWASSER":
                    return Sparte.Abwasser;
                case "FERNWAERME":
                    return Sparte.Fernwaerme;
                case "GAS":
                    return Sparte.Gas;
                case "NAHWAERME":
                    return Sparte.Nahwaerme;
                case "STROM":
                    return Sparte.Strom;
                case "STROM_UND_GAS":
                    return Sparte.StromUndGas;
                case "WASSER":
                    return Sparte.Wasser;
            }
            throw new Exception("Cannot unmarshal type Sparte");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Sparte)untypedValue;
            switch (value)
            {
                case Sparte.Abwasser:
                    serializer.Serialize(writer, "ABWASSER");
                    return;
                case Sparte.Fernwaerme:
                    serializer.Serialize(writer, "FERNWAERME");
                    return;
                case Sparte.Gas:
                    serializer.Serialize(writer, "GAS");
                    return;
                case Sparte.Nahwaerme:
                    serializer.Serialize(writer, "NAHWAERME");
                    return;
                case Sparte.Strom:
                    serializer.Serialize(writer, "STROM");
                    return;
                case Sparte.StromUndGas:
                    serializer.Serialize(writer, "STROM_UND_GAS");
                    return;
                case Sparte.Wasser:
                    serializer.Serialize(writer, "WASSER");
                    return;
            }
            throw new Exception("Cannot marshal type Sparte");
        }

        public static readonly SparteConverter Singleton = new SparteConverter();
    }

    internal class TarifkalkulationsmethodeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Tarifkalkulationsmethode) || t == typeof(Tarifkalkulationsmethode?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "BESTABRECHNUNG_STAFFEL":
                    return Tarifkalkulationsmethode.BestabrechnungStaffel;
                case "KEINE":
                    return Tarifkalkulationsmethode.Keine;
                case "PAKETPREIS":
                    return Tarifkalkulationsmethode.Paketpreis;
                case "STAFFELN":
                    return Tarifkalkulationsmethode.Staffeln;
                case "ZONEN":
                    return Tarifkalkulationsmethode.Zonen;
            }
            throw new Exception("Cannot unmarshal type Tarifkalkulationsmethode");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Tarifkalkulationsmethode)untypedValue;
            switch (value)
            {
                case Tarifkalkulationsmethode.BestabrechnungStaffel:
                    serializer.Serialize(writer, "BESTABRECHNUNG_STAFFEL");
                    return;
                case Tarifkalkulationsmethode.Keine:
                    serializer.Serialize(writer, "KEINE");
                    return;
                case Tarifkalkulationsmethode.Paketpreis:
                    serializer.Serialize(writer, "PAKETPREIS");
                    return;
                case Tarifkalkulationsmethode.Staffeln:
                    serializer.Serialize(writer, "STAFFELN");
                    return;
                case Tarifkalkulationsmethode.Zonen:
                    serializer.Serialize(writer, "ZONEN");
                    return;
            }
            throw new Exception("Cannot marshal type Tarifkalkulationsmethode");
        }

        public static readonly TarifkalkulationsmethodeConverter Singleton = new TarifkalkulationsmethodeConverter();
    }

    internal class MengeneinheitConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Mengeneinheit) || t == typeof(Mengeneinheit?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "HALBJAHR":
                    return Mengeneinheit.Halbjahr;
                case "JAHR":
                    return Mengeneinheit.Jahr;
                case "KUBIKMETER":
                    return Mengeneinheit.Kubikmeter;
                case "KVAR":
                    return Mengeneinheit.Kvar;
                case "KVARH":
                    return Mengeneinheit.Kvarh;
                case "KW":
                    return Mengeneinheit.Kw;
                case "KWH":
                    return Mengeneinheit.Kwh;
                case "KWHK":
                    return Mengeneinheit.Kwhk;
                case "MINUTE":
                    return Mengeneinheit.Minute;
                case "MONAT":
                    return Mengeneinheit.Monat;
                case "MW":
                    return Mengeneinheit.Mw;
                case "MWH":
                    return Mengeneinheit.Mwh;
                case "PROZENT":
                    return Mengeneinheit.Prozent;
                case "QUARTAL":
                    return Mengeneinheit.Quartal;
                case "SEKUNDE":
                    return Mengeneinheit.Sekunde;
                case "STUECK":
                    return Mengeneinheit.Stueck;
                case "STUNDE":
                    return Mengeneinheit.Stunde;
                case "TAG":
                    return Mengeneinheit.Tag;
                case "VAR":
                    return Mengeneinheit.Var;
                case "VARH":
                    return Mengeneinheit.Varh;
                case "VIERTEL_STUNDE":
                    return Mengeneinheit.ViertelStunde;
                case "W":
                    return Mengeneinheit.W;
                case "WH":
                    return Mengeneinheit.Wh;
                case "WOCHE":
                    return Mengeneinheit.Woche;
            }
            throw new Exception("Cannot unmarshal type Mengeneinheit");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Mengeneinheit)untypedValue;
            switch (value)
            {
                case Mengeneinheit.Halbjahr:
                    serializer.Serialize(writer, "HALBJAHR");
                    return;
                case Mengeneinheit.Jahr:
                    serializer.Serialize(writer, "JAHR");
                    return;
                case Mengeneinheit.Kubikmeter:
                    serializer.Serialize(writer, "KUBIKMETER");
                    return;
                case Mengeneinheit.Kvar:
                    serializer.Serialize(writer, "KVAR");
                    return;
                case Mengeneinheit.Kvarh:
                    serializer.Serialize(writer, "KVARH");
                    return;
                case Mengeneinheit.Kw:
                    serializer.Serialize(writer, "KW");
                    return;
                case Mengeneinheit.Kwh:
                    serializer.Serialize(writer, "KWH");
                    return;
                case Mengeneinheit.Kwhk:
                    serializer.Serialize(writer, "KWHK");
                    return;
                case Mengeneinheit.Minute:
                    serializer.Serialize(writer, "MINUTE");
                    return;
                case Mengeneinheit.Monat:
                    serializer.Serialize(writer, "MONAT");
                    return;
                case Mengeneinheit.Mw:
                    serializer.Serialize(writer, "MW");
                    return;
                case Mengeneinheit.Mwh:
                    serializer.Serialize(writer, "MWH");
                    return;
                case Mengeneinheit.Prozent:
                    serializer.Serialize(writer, "PROZENT");
                    return;
                case Mengeneinheit.Quartal:
                    serializer.Serialize(writer, "QUARTAL");
                    return;
                case Mengeneinheit.Sekunde:
                    serializer.Serialize(writer, "SEKUNDE");
                    return;
                case Mengeneinheit.Stueck:
                    serializer.Serialize(writer, "STUECK");
                    return;
                case Mengeneinheit.Stunde:
                    serializer.Serialize(writer, "STUNDE");
                    return;
                case Mengeneinheit.Tag:
                    serializer.Serialize(writer, "TAG");
                    return;
                case Mengeneinheit.Var:
                    serializer.Serialize(writer, "VAR");
                    return;
                case Mengeneinheit.Varh:
                    serializer.Serialize(writer, "VARH");
                    return;
                case Mengeneinheit.ViertelStunde:
                    serializer.Serialize(writer, "VIERTEL_STUNDE");
                    return;
                case Mengeneinheit.W:
                    serializer.Serialize(writer, "W");
                    return;
                case Mengeneinheit.Wh:
                    serializer.Serialize(writer, "WH");
                    return;
                case Mengeneinheit.Woche:
                    serializer.Serialize(writer, "WOCHE");
                    return;
            }
            throw new Exception("Cannot marshal type Mengeneinheit");
        }

        public static readonly MengeneinheitConverter Singleton = new MengeneinheitConverter();
    }

    internal class WaehrungseinheitConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Waehrungseinheit) || t == typeof(Waehrungseinheit?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "CT":
                    return Waehrungseinheit.Ct;
                case "EUR":
                    return Waehrungseinheit.Eur;
            }
            throw new Exception("Cannot unmarshal type Waehrungseinheit");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Waehrungseinheit)untypedValue;
            switch (value)
            {
                case Waehrungseinheit.Ct:
                    serializer.Serialize(writer, "CT");
                    return;
                case Waehrungseinheit.Eur:
                    serializer.Serialize(writer, "EUR");
                    return;
            }
            throw new Exception("Cannot marshal type Waehrungseinheit");
        }

        public static readonly WaehrungseinheitConverter Singleton = new WaehrungseinheitConverter();
    }

    internal class PreisstatusConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Preisstatus) || t == typeof(Preisstatus?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ENDGUELTIG":
                    return Preisstatus.Endgueltig;
                case "VORLAEUFIG":
                    return Preisstatus.Vorlaeufig;
            }
            throw new Exception("Cannot unmarshal type Preisstatus");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Preisstatus)untypedValue;
            switch (value)
            {
                case Preisstatus.Endgueltig:
                    serializer.Serialize(writer, "ENDGUELTIG");
                    return;
                case Preisstatus.Vorlaeufig:
                    serializer.Serialize(writer, "VORLAEUFIG");
                    return;
            }
            throw new Exception("Cannot marshal type Preisstatus");
        }

        public static readonly PreisstatusConverter Singleton = new PreisstatusConverter();
    }

    internal class MesspreistypConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Messpreistyp) || t == typeof(Messpreistyp?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "AUFSCHLAG_TARIFSCHALTUNG":
                    return Messpreistyp.AufschlagTarifschaltung;
                case "AUFSCHLAG_WANDLER":
                    return Messpreistyp.AufschlagWandler;
                case "ELEKTRONISCHER_AUFSATZ":
                    return Messpreistyp.ElektronischerAufsatz;
                case "MESSPREIS_G10":
                    return Messpreistyp.MesspreisG10;
                case "MESSPREIS_G16":
                    return Messpreistyp.MesspreisG16;
                case "MESSPREIS_G25":
                    return Messpreistyp.MesspreistypMesspreisG25;
                case "MESSPREIS_G2_5":
                    return Messpreistyp.MesspreisG25;
                case "MESSPREIS_G4":
                    return Messpreistyp.MesspreisG4;
                case "MESSPREIS_G40":
                    return Messpreistyp.MesspreisG40;
                case "MESSPREIS_G6":
                    return Messpreistyp.MesspreisG6;
                case "SMART_METER_MESSPREIS_G10":
                    return Messpreistyp.SmartMeterMesspreisG10;
                case "SMART_METER_MESSPREIS_G16":
                    return Messpreistyp.SmartMeterMesspreisG16;
                case "SMART_METER_MESSPREIS_G25":
                    return Messpreistyp.MesspreistypSmartMeterMesspreisG25;
                case "SMART_METER_MESSPREIS_G2_5":
                    return Messpreistyp.SmartMeterMesspreisG25;
                case "SMART_METER_MESSPREIS_G4":
                    return Messpreistyp.SmartMeterMesspreisG4;
                case "SMART_METER_MESSPREIS_G40":
                    return Messpreistyp.SmartMeterMesspreisG40;
                case "SMART_METER_MESSPREIS_G6":
                    return Messpreistyp.SmartMeterMesspreisG6;
                case "VERRECHNUNGSPREIS_ET_DREH":
                    return Messpreistyp.VerrechnungspreisEtDreh;
                case "VERRECHNUNGSPREIS_ET_WECHSEL":
                    return Messpreistyp.VerrechnungspreisEtWechsel;
                case "VERRECHNUNGSPREIS_L_ET":
                    return Messpreistyp.VerrechnungspreisLEt;
                case "VERRECHNUNGSPREIS_L_ZT":
                    return Messpreistyp.VerrechnungspreisLZt;
                case "VERRECHNUNGSPREIS_SM":
                    return Messpreistyp.VerrechnungspreisSm;
                case "VERRECHNUNGSPREIS_ZT_DREH":
                    return Messpreistyp.VerrechnungspreisZtDreh;
                case "VERRECHNUNGSPREIS_ZT_WECHSEL":
                    return Messpreistyp.VerrechnungspreisZtWechsel;
            }
            throw new Exception("Cannot unmarshal type Messpreistyp");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Messpreistyp)untypedValue;
            switch (value)
            {
                case Messpreistyp.AufschlagTarifschaltung:
                    serializer.Serialize(writer, "AUFSCHLAG_TARIFSCHALTUNG");
                    return;
                case Messpreistyp.AufschlagWandler:
                    serializer.Serialize(writer, "AUFSCHLAG_WANDLER");
                    return;
                case Messpreistyp.ElektronischerAufsatz:
                    serializer.Serialize(writer, "ELEKTRONISCHER_AUFSATZ");
                    return;
                case Messpreistyp.MesspreisG10:
                    serializer.Serialize(writer, "MESSPREIS_G10");
                    return;
                case Messpreistyp.MesspreisG16:
                    serializer.Serialize(writer, "MESSPREIS_G16");
                    return;
                case Messpreistyp.MesspreistypMesspreisG25:
                    serializer.Serialize(writer, "MESSPREIS_G25");
                    return;
                case Messpreistyp.MesspreisG25:
                    serializer.Serialize(writer, "MESSPREIS_G2_5");
                    return;
                case Messpreistyp.MesspreisG4:
                    serializer.Serialize(writer, "MESSPREIS_G4");
                    return;
                case Messpreistyp.MesspreisG40:
                    serializer.Serialize(writer, "MESSPREIS_G40");
                    return;
                case Messpreistyp.MesspreisG6:
                    serializer.Serialize(writer, "MESSPREIS_G6");
                    return;
                case Messpreistyp.SmartMeterMesspreisG10:
                    serializer.Serialize(writer, "SMART_METER_MESSPREIS_G10");
                    return;
                case Messpreistyp.SmartMeterMesspreisG16:
                    serializer.Serialize(writer, "SMART_METER_MESSPREIS_G16");
                    return;
                case Messpreistyp.MesspreistypSmartMeterMesspreisG25:
                    serializer.Serialize(writer, "SMART_METER_MESSPREIS_G25");
                    return;
                case Messpreistyp.SmartMeterMesspreisG25:
                    serializer.Serialize(writer, "SMART_METER_MESSPREIS_G2_5");
                    return;
                case Messpreistyp.SmartMeterMesspreisG4:
                    serializer.Serialize(writer, "SMART_METER_MESSPREIS_G4");
                    return;
                case Messpreistyp.SmartMeterMesspreisG40:
                    serializer.Serialize(writer, "SMART_METER_MESSPREIS_G40");
                    return;
                case Messpreistyp.SmartMeterMesspreisG6:
                    serializer.Serialize(writer, "SMART_METER_MESSPREIS_G6");
                    return;
                case Messpreistyp.VerrechnungspreisEtDreh:
                    serializer.Serialize(writer, "VERRECHNUNGSPREIS_ET_DREH");
                    return;
                case Messpreistyp.VerrechnungspreisEtWechsel:
                    serializer.Serialize(writer, "VERRECHNUNGSPREIS_ET_WECHSEL");
                    return;
                case Messpreistyp.VerrechnungspreisLEt:
                    serializer.Serialize(writer, "VERRECHNUNGSPREIS_L_ET");
                    return;
                case Messpreistyp.VerrechnungspreisLZt:
                    serializer.Serialize(writer, "VERRECHNUNGSPREIS_L_ZT");
                    return;
                case Messpreistyp.VerrechnungspreisSm:
                    serializer.Serialize(writer, "VERRECHNUNGSPREIS_SM");
                    return;
                case Messpreistyp.VerrechnungspreisZtDreh:
                    serializer.Serialize(writer, "VERRECHNUNGSPREIS_ZT_DREH");
                    return;
                case Messpreistyp.VerrechnungspreisZtWechsel:
                    serializer.Serialize(writer, "VERRECHNUNGSPREIS_ZT_WECHSEL");
                    return;
            }
            throw new Exception("Cannot marshal type Messpreistyp");
        }

        public static readonly MesspreistypConverter Singleton = new MesspreistypConverter();
    }

    internal class PreistypConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Preistyp) || t == typeof(Preistyp?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ARBEITSPREIS_EINTARIF":
                    return Preistyp.ArbeitspreisEintarif;
                case "ARBEITSPREIS_HT":
                    return Preistyp.ArbeitspreisHt;
                case "ARBEITSPREIS_NT":
                    return Preistyp.ArbeitspreisNt;
                case "ENTGELT_ABLESUNG":
                    return Preistyp.EntgeltAblesung;
                case "ENTGELT_ABRECHNUNG":
                    return Preistyp.EntgeltAbrechnung;
                case "ENTGELT_MSB":
                    return Preistyp.EntgeltMsb;
                case "GRUNDPREIS":
                    return Preistyp.Grundpreis;
                case "LEISTUNGSPREIS":
                    return Preistyp.Leistungspreis;
                case "MESSPREIS":
                    return Preistyp.Messpreis;
                case "PROVISION":
                    return Preistyp.Provision;
            }
            throw new Exception("Cannot unmarshal type Preistyp");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Preistyp)untypedValue;
            switch (value)
            {
                case Preistyp.ArbeitspreisEintarif:
                    serializer.Serialize(writer, "ARBEITSPREIS_EINTARIF");
                    return;
                case Preistyp.ArbeitspreisHt:
                    serializer.Serialize(writer, "ARBEITSPREIS_HT");
                    return;
                case Preistyp.ArbeitspreisNt:
                    serializer.Serialize(writer, "ARBEITSPREIS_NT");
                    return;
                case Preistyp.EntgeltAblesung:
                    serializer.Serialize(writer, "ENTGELT_ABLESUNG");
                    return;
                case Preistyp.EntgeltAbrechnung:
                    serializer.Serialize(writer, "ENTGELT_ABRECHNUNG");
                    return;
                case Preistyp.EntgeltMsb:
                    serializer.Serialize(writer, "ENTGELT_MSB");
                    return;
                case Preistyp.Grundpreis:
                    serializer.Serialize(writer, "GRUNDPREIS");
                    return;
                case Preistyp.Leistungspreis:
                    serializer.Serialize(writer, "LEISTUNGSPREIS");
                    return;
                case Preistyp.Messpreis:
                    serializer.Serialize(writer, "MESSPREIS");
                    return;
                case Preistyp.Provision:
                    serializer.Serialize(writer, "PROVISION");
                    return;
            }
            throw new Exception("Cannot marshal type Preistyp");
        }

        public static readonly PreistypConverter Singleton = new PreistypConverter();
    }

    internal class ErzeugungsartConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Erzeugungsart) || t == typeof(Erzeugungsart?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "BIOGAS":
                    return Erzeugungsart.Biogas;
                case "BIOMASSE":
                    return Erzeugungsart.Biomasse;
                case "FOSSIL":
                    return Erzeugungsart.Fossil;
                case "GAS":
                    return Erzeugungsart.Gas;
                case "GEOTHERMIE":
                    return Erzeugungsart.Geothermie;
                case "KERNKRAFT":
                    return Erzeugungsart.Kernkraft;
                case "KLIMANEUTRALES_GAS":
                    return Erzeugungsart.KlimaneutralesGas;
                case "KOHLE":
                    return Erzeugungsart.Kohle;
                case "KWK":
                    return Erzeugungsart.Kwk;
                case "SOLAR":
                    return Erzeugungsart.Solar;
                case "SONSTIGE":
                    return Erzeugungsart.Sonstige;
                case "SONSTIGE_EEG":
                    return Erzeugungsart.SonstigeEeg;
                case "WASSER":
                    return Erzeugungsart.Wasser;
                case "WIND":
                    return Erzeugungsart.Wind;
            }
            throw new Exception("Cannot unmarshal type Erzeugungsart");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Erzeugungsart)untypedValue;
            switch (value)
            {
                case Erzeugungsart.Biogas:
                    serializer.Serialize(writer, "BIOGAS");
                    return;
                case Erzeugungsart.Biomasse:
                    serializer.Serialize(writer, "BIOMASSE");
                    return;
                case Erzeugungsart.Fossil:
                    serializer.Serialize(writer, "FOSSIL");
                    return;
                case Erzeugungsart.Gas:
                    serializer.Serialize(writer, "GAS");
                    return;
                case Erzeugungsart.Geothermie:
                    serializer.Serialize(writer, "GEOTHERMIE");
                    return;
                case Erzeugungsart.Kernkraft:
                    serializer.Serialize(writer, "KERNKRAFT");
                    return;
                case Erzeugungsart.KlimaneutralesGas:
                    serializer.Serialize(writer, "KLIMANEUTRALES_GAS");
                    return;
                case Erzeugungsart.Kohle:
                    serializer.Serialize(writer, "KOHLE");
                    return;
                case Erzeugungsart.Kwk:
                    serializer.Serialize(writer, "KWK");
                    return;
                case Erzeugungsart.Solar:
                    serializer.Serialize(writer, "SOLAR");
                    return;
                case Erzeugungsart.Sonstige:
                    serializer.Serialize(writer, "SONSTIGE");
                    return;
                case Erzeugungsart.SonstigeEeg:
                    serializer.Serialize(writer, "SONSTIGE_EEG");
                    return;
                case Erzeugungsart.Wasser:
                    serializer.Serialize(writer, "WASSER");
                    return;
                case Erzeugungsart.Wind:
                    serializer.Serialize(writer, "WIND");
                    return;
            }
            throw new Exception("Cannot marshal type Erzeugungsart");
        }

        public static readonly ErzeugungsartConverter Singleton = new ErzeugungsartConverter();
    }

    internal class OekolabelConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Oekolabel) || t == typeof(Oekolabel?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ENERGREEN":
                    return Oekolabel.Energreen;
                case "GASGREEN":
                    return Oekolabel.Gasgreen;
                case "GASGREEN_GRUENER_STROM":
                    return Oekolabel.GasgreenGruenerStrom;
                case "GRUENER_STROM":
                    return Oekolabel.GruenerStrom;
                case "GRUENER_STROM_GOLD":
                    return Oekolabel.GruenerStromGold;
                case "GRUENER_STROM_SILBER":
                    return Oekolabel.GruenerStromSilber;
                case "GRUENES_GAS":
                    return Oekolabel.GruenesGas;
                case "NATURWATT_STROM":
                    return Oekolabel.NaturwattStrom;
                case "OK_POWER":
                    return Oekolabel.OkPower;
                case "RENEWABLE_PLUS":
                    return Oekolabel.RenewablePlus;
                case "WATERGREEN":
                    return Oekolabel.Watergreen;
                case "WATERGREEN_PLUS":
                    return Oekolabel.WatergreenPlus;
            }
            throw new Exception("Cannot unmarshal type Oekolabel");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Oekolabel)untypedValue;
            switch (value)
            {
                case Oekolabel.Energreen:
                    serializer.Serialize(writer, "ENERGREEN");
                    return;
                case Oekolabel.Gasgreen:
                    serializer.Serialize(writer, "GASGREEN");
                    return;
                case Oekolabel.GasgreenGruenerStrom:
                    serializer.Serialize(writer, "GASGREEN_GRUENER_STROM");
                    return;
                case Oekolabel.GruenerStrom:
                    serializer.Serialize(writer, "GRUENER_STROM");
                    return;
                case Oekolabel.GruenerStromGold:
                    serializer.Serialize(writer, "GRUENER_STROM_GOLD");
                    return;
                case Oekolabel.GruenerStromSilber:
                    serializer.Serialize(writer, "GRUENER_STROM_SILBER");
                    return;
                case Oekolabel.GruenesGas:
                    serializer.Serialize(writer, "GRUENES_GAS");
                    return;
                case Oekolabel.NaturwattStrom:
                    serializer.Serialize(writer, "NATURWATT_STROM");
                    return;
                case Oekolabel.OkPower:
                    serializer.Serialize(writer, "OK_POWER");
                    return;
                case Oekolabel.RenewablePlus:
                    serializer.Serialize(writer, "RENEWABLE_PLUS");
                    return;
                case Oekolabel.Watergreen:
                    serializer.Serialize(writer, "WATERGREEN");
                    return;
                case Oekolabel.WatergreenPlus:
                    serializer.Serialize(writer, "WATERGREEN_PLUS");
                    return;
            }
            throw new Exception("Cannot marshal type Oekolabel");
        }

        public static readonly OekolabelConverter Singleton = new OekolabelConverter();
    }

    internal class OekozertifikatConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Oekozertifikat) || t == typeof(Oekozertifikat?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "BET":
                    return Oekozertifikat.Bet;
                case "CMS_EE01":
                    return Oekozertifikat.CmsEe01;
                case "CMS_EE02":
                    return Oekozertifikat.CmsEe02;
                case "EECS":
                    return Oekozertifikat.Eecs;
                case "FRAUNHOFER":
                    return Oekozertifikat.Fraunhofer;
                case "FREIBERG":
                    return Oekozertifikat.Freiberg;
                case "KLIMA_INVEST":
                    return Oekozertifikat.KlimaInvest;
                case "LGA":
                    return Oekozertifikat.Lga;
                case "RECS":
                    return Oekozertifikat.Recs;
                case "REGS_EGL":
                    return Oekozertifikat.RegsEgl;
                case "TUEV":
                    return Oekozertifikat.Tuev;
                case "TUEV_HESSEN":
                    return Oekozertifikat.TuevHessen;
                case "TUEV_NORD":
                    return Oekozertifikat.TuevNord;
                case "TUEV_RHEINLAND":
                    return Oekozertifikat.TuevRheinland;
                case "TUEV_SUED":
                    return Oekozertifikat.TuevSued;
                case "TUEV_SUED_EE01":
                    return Oekozertifikat.TuevSuedEe01;
                case "TUEV_SUED_EE02":
                    return Oekozertifikat.TuevSuedEe02;
            }
            throw new Exception("Cannot unmarshal type Oekozertifikat");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Oekozertifikat)untypedValue;
            switch (value)
            {
                case Oekozertifikat.Bet:
                    serializer.Serialize(writer, "BET");
                    return;
                case Oekozertifikat.CmsEe01:
                    serializer.Serialize(writer, "CMS_EE01");
                    return;
                case Oekozertifikat.CmsEe02:
                    serializer.Serialize(writer, "CMS_EE02");
                    return;
                case Oekozertifikat.Eecs:
                    serializer.Serialize(writer, "EECS");
                    return;
                case Oekozertifikat.Fraunhofer:
                    serializer.Serialize(writer, "FRAUNHOFER");
                    return;
                case Oekozertifikat.Freiberg:
                    serializer.Serialize(writer, "FREIBERG");
                    return;
                case Oekozertifikat.KlimaInvest:
                    serializer.Serialize(writer, "KLIMA_INVEST");
                    return;
                case Oekozertifikat.Lga:
                    serializer.Serialize(writer, "LGA");
                    return;
                case Oekozertifikat.Recs:
                    serializer.Serialize(writer, "RECS");
                    return;
                case Oekozertifikat.RegsEgl:
                    serializer.Serialize(writer, "REGS_EGL");
                    return;
                case Oekozertifikat.Tuev:
                    serializer.Serialize(writer, "TUEV");
                    return;
                case Oekozertifikat.TuevHessen:
                    serializer.Serialize(writer, "TUEV_HESSEN");
                    return;
                case Oekozertifikat.TuevNord:
                    serializer.Serialize(writer, "TUEV_NORD");
                    return;
                case Oekozertifikat.TuevRheinland:
                    serializer.Serialize(writer, "TUEV_RHEINLAND");
                    return;
                case Oekozertifikat.TuevSued:
                    serializer.Serialize(writer, "TUEV_SUED");
                    return;
                case Oekozertifikat.TuevSuedEe01:
                    serializer.Serialize(writer, "TUEV_SUED_EE01");
                    return;
                case Oekozertifikat.TuevSuedEe02:
                    serializer.Serialize(writer, "TUEV_SUED_EE02");
                    return;
            }
            throw new Exception("Cannot marshal type Oekozertifikat");
        }

        public static readonly OekozertifikatConverter Singleton = new OekozertifikatConverter();
    }

    internal class KundentypConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Kundentyp) || t == typeof(Kundentyp?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "BELEUCHTUNG_OEFFENTLICH":
                    return Kundentyp.BeleuchtungOeffentlich;
                case "BELEUCHTUNG_STRASSE":
                    return Kundentyp.BeleuchtungStrasse;
                case "DIREKTHEIZUNG":
                    return Kundentyp.Direktheizung;
                case "GEMEINSCHAFT_MFH":
                    return Kundentyp.GemeinschaftMfh;
                case "GEWERBE":
                    return Kundentyp.Gewerbe;
                case "HAUSHALT":
                    return Kundentyp.Haushalt;
                case "KIRCHE":
                    return Kundentyp.Kirche;
                case "KWK":
                    return Kundentyp.Kwk;
                case "LADESAEULE":
                    return Kundentyp.Ladesaeule;
                case "LANDWIRT":
                    return Kundentyp.Landwirt;
                case "PRIVAT":
                    return Kundentyp.Privat;
                case "SONSTIGE":
                    return Kundentyp.Sonstige;
                case "SPEICHERHEIZUNG":
                    return Kundentyp.Speicherheizung;
                case "UNTERBR_EINRICHTUNG":
                    return Kundentyp.UnterbrEinrichtung;
                case "WAERMEPUMPE":
                    return Kundentyp.Waermepumpe;
            }
            throw new Exception("Cannot unmarshal type Kundentyp");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Kundentyp)untypedValue;
            switch (value)
            {
                case Kundentyp.BeleuchtungOeffentlich:
                    serializer.Serialize(writer, "BELEUCHTUNG_OEFFENTLICH");
                    return;
                case Kundentyp.BeleuchtungStrasse:
                    serializer.Serialize(writer, "BELEUCHTUNG_STRASSE");
                    return;
                case Kundentyp.Direktheizung:
                    serializer.Serialize(writer, "DIREKTHEIZUNG");
                    return;
                case Kundentyp.GemeinschaftMfh:
                    serializer.Serialize(writer, "GEMEINSCHAFT_MFH");
                    return;
                case Kundentyp.Gewerbe:
                    serializer.Serialize(writer, "GEWERBE");
                    return;
                case Kundentyp.Haushalt:
                    serializer.Serialize(writer, "HAUSHALT");
                    return;
                case Kundentyp.Kirche:
                    serializer.Serialize(writer, "KIRCHE");
                    return;
                case Kundentyp.Kwk:
                    serializer.Serialize(writer, "KWK");
                    return;
                case Kundentyp.Ladesaeule:
                    serializer.Serialize(writer, "LADESAEULE");
                    return;
                case Kundentyp.Landwirt:
                    serializer.Serialize(writer, "LANDWIRT");
                    return;
                case Kundentyp.Privat:
                    serializer.Serialize(writer, "PRIVAT");
                    return;
                case Kundentyp.Sonstige:
                    serializer.Serialize(writer, "SONSTIGE");
                    return;
                case Kundentyp.Speicherheizung:
                    serializer.Serialize(writer, "SPEICHERHEIZUNG");
                    return;
                case Kundentyp.UnterbrEinrichtung:
                    serializer.Serialize(writer, "UNTERBR_EINRICHTUNG");
                    return;
                case Kundentyp.Waermepumpe:
                    serializer.Serialize(writer, "WAERMEPUMPE");
                    return;
            }
            throw new Exception("Cannot marshal type Kundentyp");
        }

        public static readonly KundentypConverter Singleton = new KundentypConverter();
    }

    internal class PreisgarantietypConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Preisgarantietyp) || t == typeof(Preisgarantietyp?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ALLE_PREISBESTANDTEILE_BRUTTO":
                    return Preisgarantietyp.AllePreisbestandteileBrutto;
                case "ALLE_PREISBESTANDTEILE_NETTO":
                    return Preisgarantietyp.AllePreisbestandteileNetto;
                case "NUR_ENERGIEPREIS":
                    return Preisgarantietyp.NurEnergiepreis;
                case "PREISBESTANDTEILE_OHNE_ABGABEN":
                    return Preisgarantietyp.PreisbestandteileOhneAbgaben;
            }
            throw new Exception("Cannot unmarshal type Preisgarantietyp");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Preisgarantietyp)untypedValue;
            switch (value)
            {
                case Preisgarantietyp.AllePreisbestandteileBrutto:
                    serializer.Serialize(writer, "ALLE_PREISBESTANDTEILE_BRUTTO");
                    return;
                case Preisgarantietyp.AllePreisbestandteileNetto:
                    serializer.Serialize(writer, "ALLE_PREISBESTANDTEILE_NETTO");
                    return;
                case Preisgarantietyp.NurEnergiepreis:
                    serializer.Serialize(writer, "NUR_ENERGIEPREIS");
                    return;
                case Preisgarantietyp.PreisbestandteileOhneAbgaben:
                    serializer.Serialize(writer, "PREISBESTANDTEILE_OHNE_ABGABEN");
                    return;
            }
            throw new Exception("Cannot marshal type Preisgarantietyp");
        }

        public static readonly PreisgarantietypConverter Singleton = new PreisgarantietypConverter();
    }

    internal class RegisteranzahlConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Registeranzahl) || t == typeof(Registeranzahl?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "EINTARIF":
                    return Registeranzahl.Eintarif;
                case "MEHRTARIF":
                    return Registeranzahl.Mehrtarif;
                case "ZWEITARIF":
                    return Registeranzahl.Zweitarif;
            }
            throw new Exception("Cannot unmarshal type Registeranzahl");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Registeranzahl)untypedValue;
            switch (value)
            {
                case Registeranzahl.Eintarif:
                    serializer.Serialize(writer, "EINTARIF");
                    return;
                case Registeranzahl.Mehrtarif:
                    serializer.Serialize(writer, "MEHRTARIF");
                    return;
                case Registeranzahl.Zweitarif:
                    serializer.Serialize(writer, "ZWEITARIF");
                    return;
            }
            throw new Exception("Cannot marshal type Registeranzahl");
        }

        public static readonly RegisteranzahlConverter Singleton = new RegisteranzahlConverter();
    }

    internal class AufAbschlagstypConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AufAbschlagstyp) || t == typeof(AufAbschlagstyp?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ABSOLUT":
                    return AufAbschlagstyp.Absolut;
                case "RELATIV":
                    return AufAbschlagstyp.Relativ;
            }
            throw new Exception("Cannot unmarshal type AufAbschlagstyp");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AufAbschlagstyp)untypedValue;
            switch (value)
            {
                case AufAbschlagstyp.Absolut:
                    serializer.Serialize(writer, "ABSOLUT");
                    return;
                case AufAbschlagstyp.Relativ:
                    serializer.Serialize(writer, "RELATIV");
                    return;
            }
            throw new Exception("Cannot marshal type AufAbschlagstyp");
        }

        public static readonly AufAbschlagstypConverter Singleton = new AufAbschlagstypConverter();
    }

    internal class AufAbschlagszielConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AufAbschlagsziel) || t == typeof(AufAbschlagsziel?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ARBEITSPREIS_EINTARIF":
                    return AufAbschlagsziel.ArbeitspreisEintarif;
                case "ARBEITSPREIS_HT":
                    return AufAbschlagsziel.ArbeitspreisHt;
                case "ARBEITSPREIS_HT_NT":
                    return AufAbschlagsziel.ArbeitspreisHtNt;
                case "ARBEITSPREIS_NT":
                    return AufAbschlagsziel.ArbeitspreisNt;
                case "GESAMTPREIS":
                    return AufAbschlagsziel.Gesamtpreis;
                case "GRUNDPREIS":
                    return AufAbschlagsziel.Grundpreis;
            }
            throw new Exception("Cannot unmarshal type AufAbschlagsziel");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AufAbschlagsziel)untypedValue;
            switch (value)
            {
                case AufAbschlagsziel.ArbeitspreisEintarif:
                    serializer.Serialize(writer, "ARBEITSPREIS_EINTARIF");
                    return;
                case AufAbschlagsziel.ArbeitspreisHt:
                    serializer.Serialize(writer, "ARBEITSPREIS_HT");
                    return;
                case AufAbschlagsziel.ArbeitspreisHtNt:
                    serializer.Serialize(writer, "ARBEITSPREIS_HT_NT");
                    return;
                case AufAbschlagsziel.ArbeitspreisNt:
                    serializer.Serialize(writer, "ARBEITSPREIS_NT");
                    return;
                case AufAbschlagsziel.Gesamtpreis:
                    serializer.Serialize(writer, "GESAMTPREIS");
                    return;
                case AufAbschlagsziel.Grundpreis:
                    serializer.Serialize(writer, "GRUNDPREIS");
                    return;
            }
            throw new Exception("Cannot marshal type AufAbschlagsziel");
        }

        public static readonly AufAbschlagszielConverter Singleton = new AufAbschlagszielConverter();
    }

    internal class GeraeteklasseConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Geraeteklasse) || t == typeof(Geraeteklasse?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "KOMMUNIKATIONSEINRICHTUNG":
                    return Geraeteklasse.Kommunikationseinrichtung;
                case "MENGENUMWERTER":
                    return Geraeteklasse.Mengenumwerter;
                case "SMARTMETER_GATEWAY":
                    return Geraeteklasse.SmartmeterGateway;
                case "STEUERBOX":
                    return Geraeteklasse.Steuerbox;
                case "TECHNISCHE_STEUEREINRICHTUNG":
                    return Geraeteklasse.TechnischeSteuereinrichtung;
                case "WANDLER":
                    return Geraeteklasse.Wandler;
                case "ZAEHLEINRICHTUNG":
                    return Geraeteklasse.Zaehleinrichtung;
            }
            throw new Exception("Cannot unmarshal type Geraeteklasse");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Geraeteklasse)untypedValue;
            switch (value)
            {
                case Geraeteklasse.Kommunikationseinrichtung:
                    serializer.Serialize(writer, "KOMMUNIKATIONSEINRICHTUNG");
                    return;
                case Geraeteklasse.Mengenumwerter:
                    serializer.Serialize(writer, "MENGENUMWERTER");
                    return;
                case Geraeteklasse.SmartmeterGateway:
                    serializer.Serialize(writer, "SMARTMETER_GATEWAY");
                    return;
                case Geraeteklasse.Steuerbox:
                    serializer.Serialize(writer, "STEUERBOX");
                    return;
                case Geraeteklasse.TechnischeSteuereinrichtung:
                    serializer.Serialize(writer, "TECHNISCHE_STEUEREINRICHTUNG");
                    return;
                case Geraeteklasse.Wandler:
                    serializer.Serialize(writer, "WANDLER");
                    return;
                case Geraeteklasse.Zaehleinrichtung:
                    serializer.Serialize(writer, "ZAEHLEINRICHTUNG");
                    return;
            }
            throw new Exception("Cannot marshal type Geraeteklasse");
        }

        public static readonly GeraeteklasseConverter Singleton = new GeraeteklasseConverter();
    }

    internal class GeraetetypConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Geraetetyp) || t == typeof(Geraetetyp?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "BLOCKSTROMWANDLER":
                    return Geraetetyp.Blockstromwandler;
                case "DATENLOGGER":
                    return Geraetetyp.Datenlogger;
                case "DSL_KOM":
                    return Geraetetyp.DslKom;
                case "EDL_21":
                    return Geraetetyp.Edl21;
                case "EDL_40":
                    return Geraetetyp.Edl40;
                case "EDL_40_ZAEHLERAUFSATZ":
                    return Geraetetyp.Edl40_Zaehleraufsatz;
                case "ETHERNET_KOM":
                    return Geraetetyp.EthernetKom;
                case "HOECHSTBELASTUNGS_ANZEIGER":
                    return Geraetetyp.HoechstbelastungsAnzeiger;
                case "IMPULSGEBER":
                    return Geraetetyp.Impulsgeber;
                case "INTELLIGENTES_MESSYSTEM":
                    return Geraetetyp.IntelligentesMessystem;
                case "KOMBIMESSWANDLER":
                    return Geraetetyp.Kombimesswandler;
                case "KOMBIMESSWANDLER_IMS_MME":
                    return Geraetetyp.KombimesswandlerImsMme;
                case "KOMMUNIKATIONSANSCHLUSS":
                    return Geraetetyp.Kommunikationsanschluss;
                case "KOMPAKT_MU":
                    return Geraetetyp.KompaktMu;
                case "LTE_KOM":
                    return Geraetetyp.LteKom;
                case "MENGENUMWERTER":
                    return Geraetetyp.Mengenumwerter;
                case "MESSWANDLERSATZ_IMS_MME":
                    return Geraetetyp.MesswandlersatzImsMme;
                case "MODEM":
                    return Geraetetyp.Modem;
                case "MODEM_FESTNETZ":
                    return Geraetetyp.ModemFestnetz;
                case "MODEM_FUNK":
                    return Geraetetyp.ModemFunk;
                case "MODEM_GPRS":
                    return Geraetetyp.ModemGprs;
                case "MODEM_GPRS_M_LG":
                    return Geraetetyp.ModemGprsMLg;
                case "MODEM_GSM":
                    return Geraetetyp.ModemGsm;
                case "MODEM_GSM_M_LG":
                    return Geraetetyp.ModemGsmMLg;
                case "MODEM_GSM_O_LG":
                    return Geraetetyp.ModemGsmOLg;
                case "MODERNE_MESSEINRICHTUNG":
                    return Geraetetyp.ModerneMesseinrichtung;
                case "MULTIPLEXANLAGE":
                    return Geraetetyp.Multiplexanlage;
                case "OPTIONALE_ZUS_ZAEHLEINRICHTUNG":
                    return Geraetetyp.OptionaleZusZaehleinrichtung;
                case "PAUSCHALANLAGE":
                    return Geraetetyp.Pauschalanlage;
                case "PLC_KOM":
                    return Geraetetyp.PlcKom;
                case "RUNDSTEUEREMPFAENGER":
                    return Geraetetyp.Rundsteuerempfaenger;
                case "RUNDSTEUEREMPFAENGER_IMS_MME":
                    return Geraetetyp.RundsteuerempfaengerImsMme;
                case "SONSTIGES_GERAET":
                    return Geraetetyp.SonstigesGeraet;
                case "SPANNUNGSWANDLER":
                    return Geraetetyp.Spannungswandler;
                case "STEUEREINRICHTUNG":
                    return Geraetetyp.Steuereinrichtung;
                case "STROMWANDLER":
                    return Geraetetyp.Stromwandler;
                case "SUMMATIONSGERAET":
                    return Geraetetyp.Summationsgeraet;
                case "SYSTEM_MU":
                    return Geraetetyp.SystemMu;
                case "TARIFSCHALTGERAET":
                    return Geraetetyp.Tarifschaltgeraet;
                case "TARIFSCHALTGERAET_IMS_MME":
                    return Geraetetyp.TarifschaltgeraetImsMme;
                case "TELEFONANSCHLUSS":
                    return Geraetetyp.Telefonanschluss;
                case "TELEKOMMUNIKATIONSEINRICHTUNG":
                    return Geraetetyp.Telekommunikationseinrichtung;
                case "TEMPERATUR_KOMPENSATION":
                    return Geraetetyp.TemperaturKompensation;
                case "TEMPERATUR_MU":
                    return Geraetetyp.TemperaturMu;
                case "VERSTAERKERANLAGE":
                    return Geraetetyp.Verstaerkeranlage;
                case "ZUSTANDS_MU":
                    return Geraetetyp.ZustandsMu;
            }
            throw new Exception("Cannot unmarshal type Geraetetyp");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Geraetetyp)untypedValue;
            switch (value)
            {
                case Geraetetyp.Blockstromwandler:
                    serializer.Serialize(writer, "BLOCKSTROMWANDLER");
                    return;
                case Geraetetyp.Datenlogger:
                    serializer.Serialize(writer, "DATENLOGGER");
                    return;
                case Geraetetyp.DslKom:
                    serializer.Serialize(writer, "DSL_KOM");
                    return;
                case Geraetetyp.Edl21:
                    serializer.Serialize(writer, "EDL_21");
                    return;
                case Geraetetyp.Edl40:
                    serializer.Serialize(writer, "EDL_40");
                    return;
                case Geraetetyp.Edl40_Zaehleraufsatz:
                    serializer.Serialize(writer, "EDL_40_ZAEHLERAUFSATZ");
                    return;
                case Geraetetyp.EthernetKom:
                    serializer.Serialize(writer, "ETHERNET_KOM");
                    return;
                case Geraetetyp.HoechstbelastungsAnzeiger:
                    serializer.Serialize(writer, "HOECHSTBELASTUNGS_ANZEIGER");
                    return;
                case Geraetetyp.Impulsgeber:
                    serializer.Serialize(writer, "IMPULSGEBER");
                    return;
                case Geraetetyp.IntelligentesMessystem:
                    serializer.Serialize(writer, "INTELLIGENTES_MESSYSTEM");
                    return;
                case Geraetetyp.Kombimesswandler:
                    serializer.Serialize(writer, "KOMBIMESSWANDLER");
                    return;
                case Geraetetyp.KombimesswandlerImsMme:
                    serializer.Serialize(writer, "KOMBIMESSWANDLER_IMS_MME");
                    return;
                case Geraetetyp.Kommunikationsanschluss:
                    serializer.Serialize(writer, "KOMMUNIKATIONSANSCHLUSS");
                    return;
                case Geraetetyp.KompaktMu:
                    serializer.Serialize(writer, "KOMPAKT_MU");
                    return;
                case Geraetetyp.LteKom:
                    serializer.Serialize(writer, "LTE_KOM");
                    return;
                case Geraetetyp.Mengenumwerter:
                    serializer.Serialize(writer, "MENGENUMWERTER");
                    return;
                case Geraetetyp.MesswandlersatzImsMme:
                    serializer.Serialize(writer, "MESSWANDLERSATZ_IMS_MME");
                    return;
                case Geraetetyp.Modem:
                    serializer.Serialize(writer, "MODEM");
                    return;
                case Geraetetyp.ModemFestnetz:
                    serializer.Serialize(writer, "MODEM_FESTNETZ");
                    return;
                case Geraetetyp.ModemFunk:
                    serializer.Serialize(writer, "MODEM_FUNK");
                    return;
                case Geraetetyp.ModemGprs:
                    serializer.Serialize(writer, "MODEM_GPRS");
                    return;
                case Geraetetyp.ModemGprsMLg:
                    serializer.Serialize(writer, "MODEM_GPRS_M_LG");
                    return;
                case Geraetetyp.ModemGsm:
                    serializer.Serialize(writer, "MODEM_GSM");
                    return;
                case Geraetetyp.ModemGsmMLg:
                    serializer.Serialize(writer, "MODEM_GSM_M_LG");
                    return;
                case Geraetetyp.ModemGsmOLg:
                    serializer.Serialize(writer, "MODEM_GSM_O_LG");
                    return;
                case Geraetetyp.ModerneMesseinrichtung:
                    serializer.Serialize(writer, "MODERNE_MESSEINRICHTUNG");
                    return;
                case Geraetetyp.Multiplexanlage:
                    serializer.Serialize(writer, "MULTIPLEXANLAGE");
                    return;
                case Geraetetyp.OptionaleZusZaehleinrichtung:
                    serializer.Serialize(writer, "OPTIONALE_ZUS_ZAEHLEINRICHTUNG");
                    return;
                case Geraetetyp.Pauschalanlage:
                    serializer.Serialize(writer, "PAUSCHALANLAGE");
                    return;
                case Geraetetyp.PlcKom:
                    serializer.Serialize(writer, "PLC_KOM");
                    return;
                case Geraetetyp.Rundsteuerempfaenger:
                    serializer.Serialize(writer, "RUNDSTEUEREMPFAENGER");
                    return;
                case Geraetetyp.RundsteuerempfaengerImsMme:
                    serializer.Serialize(writer, "RUNDSTEUEREMPFAENGER_IMS_MME");
                    return;
                case Geraetetyp.SonstigesGeraet:
                    serializer.Serialize(writer, "SONSTIGES_GERAET");
                    return;
                case Geraetetyp.Spannungswandler:
                    serializer.Serialize(writer, "SPANNUNGSWANDLER");
                    return;
                case Geraetetyp.Steuereinrichtung:
                    serializer.Serialize(writer, "STEUEREINRICHTUNG");
                    return;
                case Geraetetyp.Stromwandler:
                    serializer.Serialize(writer, "STROMWANDLER");
                    return;
                case Geraetetyp.Summationsgeraet:
                    serializer.Serialize(writer, "SUMMATIONSGERAET");
                    return;
                case Geraetetyp.SystemMu:
                    serializer.Serialize(writer, "SYSTEM_MU");
                    return;
                case Geraetetyp.Tarifschaltgeraet:
                    serializer.Serialize(writer, "TARIFSCHALTGERAET");
                    return;
                case Geraetetyp.TarifschaltgeraetImsMme:
                    serializer.Serialize(writer, "TARIFSCHALTGERAET_IMS_MME");
                    return;
                case Geraetetyp.Telefonanschluss:
                    serializer.Serialize(writer, "TELEFONANSCHLUSS");
                    return;
                case Geraetetyp.Telekommunikationseinrichtung:
                    serializer.Serialize(writer, "TELEKOMMUNIKATIONSEINRICHTUNG");
                    return;
                case Geraetetyp.TemperaturKompensation:
                    serializer.Serialize(writer, "TEMPERATUR_KOMPENSATION");
                    return;
                case Geraetetyp.TemperaturMu:
                    serializer.Serialize(writer, "TEMPERATUR_MU");
                    return;
                case Geraetetyp.Verstaerkeranlage:
                    serializer.Serialize(writer, "VERSTAERKERANLAGE");
                    return;
                case Geraetetyp.ZustandsMu:
                    serializer.Serialize(writer, "ZUSTANDS_MU");
                    return;
            }
            throw new Exception("Cannot marshal type Geraetetyp");
        }

        public static readonly GeraetetypConverter Singleton = new GeraetetypConverter();
    }

    internal class VoraussetzungenConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Voraussetzungen) || t == typeof(Voraussetzungen?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ALTER_KUNDENANLAGE":
                    return Voraussetzungen.AlterKundenanlage;
                case "ALTVERTRAG":
                    return Voraussetzungen.Altvertrag;
                case "ANLAGEBESCHAFFENHEIT":
                    return Voraussetzungen.Anlagebeschaffenheit;
                case "ANSCHLUSSART":
                    return Voraussetzungen.Anschlussart;
                case "ANSCHLUSSWERT":
                    return Voraussetzungen.Anschlusswert;
                case "AUSSCHLUSS_GROSSVERBRAUCHER":
                    return Voraussetzungen.AusschlussGrossverbraucher;
                case "BESONDERE_VERBRAUCHSSTELLE":
                    return Voraussetzungen.BesondereVerbrauchsstelle;
                case "BESTIMMTER_ABNAHMEFALL":
                    return Voraussetzungen.BestimmterAbnahmefall;
                case "BESTIMMTE_VERTRAGSFORMALITAETEN":
                    return Voraussetzungen.BestimmteVertragsformalitaeten;
                case "BETRIEBSSTUNDENBEGRENZUNG":
                    return Voraussetzungen.Betriebsstundenbegrenzung;
                case "DIREKTVERTRIEB":
                    return Voraussetzungen.Direktvertrieb;
                case "EINZUGSERMAECHTIGUNG":
                    return Voraussetzungen.Einzugsermaechtigung;
                case "FAMILIENSTRUKTUR":
                    return Voraussetzungen.Familienstruktur;
                case "FREIGABEZEITEN":
                    return Voraussetzungen.Freigabezeiten;
                case "GEWERBE":
                    return Voraussetzungen.Gewerbe;
                case "KOMBI_BONI":
                    return Voraussetzungen.KombiBoni;
                case "LASTPROFIL":
                    return Voraussetzungen.Lastprofil;
                case "LIEFERANBINDUNG_ALLE":
                    return Voraussetzungen.LieferanbindungAlle;
                case "LIEFERANBINDUNG_EINE":
                    return Voraussetzungen.LieferanbindungEine;
                case "LIEFERUNGSBESCHRAENKUNG_GASART":
                    return Voraussetzungen.LieferungsbeschraenkungGasart;
                case "MAX_ZAEHLER_LIEFERSTELLEN":
                    return Voraussetzungen.MaxZaehlerLieferstellen;
                case "MEHRERE_ZAEHLER_ABNAHMESTELLEN":
                    return Voraussetzungen.MehrereZaehlerAbnahmestellen;
                case "MINDESTUMSATZ":
                    return Voraussetzungen.Mindestumsatz;
                case "MITGLIEDSCHAFT":
                    return Voraussetzungen.Mitgliedschaft;
                case "NACHWEIS_ZAHLUNGSFAEHIGKEIT":
                    return Voraussetzungen.NachweisZahlungsfaehigkeit;
                case "NEUKUNDE":
                    return Voraussetzungen.Neukunde;
                case "NEUKUNDE_MIT_VORAUSSETZUNGEN":
                    return Voraussetzungen.NeukundeMitVoraussetzungen;
                case "NIEDRIGENERGIE":
                    return Voraussetzungen.Niedrigenergie;
                case "ONLINEVORAUSSETZUNG":
                    return Voraussetzungen.Onlinevoraussetzung;
                case "ORTSTEILE_LIEFERGEBIET":
                    return Voraussetzungen.OrtsteileLiefergebiet;
                case "SELBSTABLESUNG":
                    return Voraussetzungen.Selbstablesung;
                case "STAATLICHE_FOERDERUNG":
                    return Voraussetzungen.StaatlicheFoerderung;
                case "UMSTELLUNG_ENERGIEART":
                    return Voraussetzungen.UmstellungEnergieart;
                case "VORGESCHRIEBENE_ZUSATZANLAGE":
                    return Voraussetzungen.VorgeschriebeneZusatzanlage;
                case "WAERMEBEDARF_ERDGAS":
                    return Voraussetzungen.WaermebedarfErdgas;
                case "ZAEHLERTYP_GROESSE":
                    return Voraussetzungen.ZaehlertypGroesse;
                case "ZEITPUNKT":
                    return Voraussetzungen.Zeitpunkt;
                case "ZUSATZMODALITAET":
                    return Voraussetzungen.Zusatzmodalitaet;
                case "ZUSATZPRODUKT":
                    return Voraussetzungen.Zusatzprodukt;
            }
            throw new Exception("Cannot unmarshal type Voraussetzungen");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Voraussetzungen)untypedValue;
            switch (value)
            {
                case Voraussetzungen.AlterKundenanlage:
                    serializer.Serialize(writer, "ALTER_KUNDENANLAGE");
                    return;
                case Voraussetzungen.Altvertrag:
                    serializer.Serialize(writer, "ALTVERTRAG");
                    return;
                case Voraussetzungen.Anlagebeschaffenheit:
                    serializer.Serialize(writer, "ANLAGEBESCHAFFENHEIT");
                    return;
                case Voraussetzungen.Anschlussart:
                    serializer.Serialize(writer, "ANSCHLUSSART");
                    return;
                case Voraussetzungen.Anschlusswert:
                    serializer.Serialize(writer, "ANSCHLUSSWERT");
                    return;
                case Voraussetzungen.AusschlussGrossverbraucher:
                    serializer.Serialize(writer, "AUSSCHLUSS_GROSSVERBRAUCHER");
                    return;
                case Voraussetzungen.BesondereVerbrauchsstelle:
                    serializer.Serialize(writer, "BESONDERE_VERBRAUCHSSTELLE");
                    return;
                case Voraussetzungen.BestimmterAbnahmefall:
                    serializer.Serialize(writer, "BESTIMMTER_ABNAHMEFALL");
                    return;
                case Voraussetzungen.BestimmteVertragsformalitaeten:
                    serializer.Serialize(writer, "BESTIMMTE_VERTRAGSFORMALITAETEN");
                    return;
                case Voraussetzungen.Betriebsstundenbegrenzung:
                    serializer.Serialize(writer, "BETRIEBSSTUNDENBEGRENZUNG");
                    return;
                case Voraussetzungen.Direktvertrieb:
                    serializer.Serialize(writer, "DIREKTVERTRIEB");
                    return;
                case Voraussetzungen.Einzugsermaechtigung:
                    serializer.Serialize(writer, "EINZUGSERMAECHTIGUNG");
                    return;
                case Voraussetzungen.Familienstruktur:
                    serializer.Serialize(writer, "FAMILIENSTRUKTUR");
                    return;
                case Voraussetzungen.Freigabezeiten:
                    serializer.Serialize(writer, "FREIGABEZEITEN");
                    return;
                case Voraussetzungen.Gewerbe:
                    serializer.Serialize(writer, "GEWERBE");
                    return;
                case Voraussetzungen.KombiBoni:
                    serializer.Serialize(writer, "KOMBI_BONI");
                    return;
                case Voraussetzungen.Lastprofil:
                    serializer.Serialize(writer, "LASTPROFIL");
                    return;
                case Voraussetzungen.LieferanbindungAlle:
                    serializer.Serialize(writer, "LIEFERANBINDUNG_ALLE");
                    return;
                case Voraussetzungen.LieferanbindungEine:
                    serializer.Serialize(writer, "LIEFERANBINDUNG_EINE");
                    return;
                case Voraussetzungen.LieferungsbeschraenkungGasart:
                    serializer.Serialize(writer, "LIEFERUNGSBESCHRAENKUNG_GASART");
                    return;
                case Voraussetzungen.MaxZaehlerLieferstellen:
                    serializer.Serialize(writer, "MAX_ZAEHLER_LIEFERSTELLEN");
                    return;
                case Voraussetzungen.MehrereZaehlerAbnahmestellen:
                    serializer.Serialize(writer, "MEHRERE_ZAEHLER_ABNAHMESTELLEN");
                    return;
                case Voraussetzungen.Mindestumsatz:
                    serializer.Serialize(writer, "MINDESTUMSATZ");
                    return;
                case Voraussetzungen.Mitgliedschaft:
                    serializer.Serialize(writer, "MITGLIEDSCHAFT");
                    return;
                case Voraussetzungen.NachweisZahlungsfaehigkeit:
                    serializer.Serialize(writer, "NACHWEIS_ZAHLUNGSFAEHIGKEIT");
                    return;
                case Voraussetzungen.Neukunde:
                    serializer.Serialize(writer, "NEUKUNDE");
                    return;
                case Voraussetzungen.NeukundeMitVoraussetzungen:
                    serializer.Serialize(writer, "NEUKUNDE_MIT_VORAUSSETZUNGEN");
                    return;
                case Voraussetzungen.Niedrigenergie:
                    serializer.Serialize(writer, "NIEDRIGENERGIE");
                    return;
                case Voraussetzungen.Onlinevoraussetzung:
                    serializer.Serialize(writer, "ONLINEVORAUSSETZUNG");
                    return;
                case Voraussetzungen.OrtsteileLiefergebiet:
                    serializer.Serialize(writer, "ORTSTEILE_LIEFERGEBIET");
                    return;
                case Voraussetzungen.Selbstablesung:
                    serializer.Serialize(writer, "SELBSTABLESUNG");
                    return;
                case Voraussetzungen.StaatlicheFoerderung:
                    serializer.Serialize(writer, "STAATLICHE_FOERDERUNG");
                    return;
                case Voraussetzungen.UmstellungEnergieart:
                    serializer.Serialize(writer, "UMSTELLUNG_ENERGIEART");
                    return;
                case Voraussetzungen.VorgeschriebeneZusatzanlage:
                    serializer.Serialize(writer, "VORGESCHRIEBENE_ZUSATZANLAGE");
                    return;
                case Voraussetzungen.WaermebedarfErdgas:
                    serializer.Serialize(writer, "WAERMEBEDARF_ERDGAS");
                    return;
                case Voraussetzungen.ZaehlertypGroesse:
                    serializer.Serialize(writer, "ZAEHLERTYP_GROESSE");
                    return;
                case Voraussetzungen.Zeitpunkt:
                    serializer.Serialize(writer, "ZEITPUNKT");
                    return;
                case Voraussetzungen.Zusatzmodalitaet:
                    serializer.Serialize(writer, "ZUSATZMODALITAET");
                    return;
                case Voraussetzungen.Zusatzprodukt:
                    serializer.Serialize(writer, "ZUSATZPRODUKT");
                    return;
            }
            throw new Exception("Cannot marshal type Voraussetzungen");
        }

        public static readonly VoraussetzungenConverter Singleton = new VoraussetzungenConverter();
    }

    internal class TarifmerkmalConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Tarifmerkmal) || t == typeof(Tarifmerkmal?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "BAUSTROM":
                    return Tarifmerkmal.Baustrom;
                case "FESTPREIS":
                    return Tarifmerkmal.Festpreis;
                case "HAUSLICHT":
                    return Tarifmerkmal.Hauslicht;
                case "HEIZSTROM":
                    return Tarifmerkmal.Heizstrom;
                case "KOMBI":
                    return Tarifmerkmal.Kombi;
                case "ONLINE":
                    return Tarifmerkmal.Online;
                case "PAKET":
                    return Tarifmerkmal.Paket;
                case "STANDARD":
                    return Tarifmerkmal.Standard;
                case "VORKASSE":
                    return Tarifmerkmal.Vorkasse;
            }
            throw new Exception("Cannot unmarshal type Tarifmerkmal");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Tarifmerkmal)untypedValue;
            switch (value)
            {
                case Tarifmerkmal.Baustrom:
                    serializer.Serialize(writer, "BAUSTROM");
                    return;
                case Tarifmerkmal.Festpreis:
                    serializer.Serialize(writer, "FESTPREIS");
                    return;
                case Tarifmerkmal.Hauslicht:
                    serializer.Serialize(writer, "HAUSLICHT");
                    return;
                case Tarifmerkmal.Heizstrom:
                    serializer.Serialize(writer, "HEIZSTROM");
                    return;
                case Tarifmerkmal.Kombi:
                    serializer.Serialize(writer, "KOMBI");
                    return;
                case Tarifmerkmal.Online:
                    serializer.Serialize(writer, "ONLINE");
                    return;
                case Tarifmerkmal.Paket:
                    serializer.Serialize(writer, "PAKET");
                    return;
                case Tarifmerkmal.Standard:
                    serializer.Serialize(writer, "STANDARD");
                    return;
                case Tarifmerkmal.Vorkasse:
                    serializer.Serialize(writer, "VORKASSE");
                    return;
            }
            throw new Exception("Cannot marshal type Tarifmerkmal");
        }

        public static readonly TarifmerkmalConverter Singleton = new TarifmerkmalConverter();
    }

    internal class TariftypConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Tariftyp) || t == typeof(Tariftyp?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ERSATZVERSORGUNG":
                    return Tariftyp.Ersatzversorgung;
                case "GRUNDVERSORGUNG":
                    return Tariftyp.Grundversorgung;
                case "GRUND_ERSATZVERSORGUNG":
                    return Tariftyp.GrundErsatzversorgung;
                case "SONDERTARIF":
                    return Tariftyp.Sondertarif;
            }
            throw new Exception("Cannot unmarshal type Tariftyp");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Tariftyp)untypedValue;
            switch (value)
            {
                case Tariftyp.Ersatzversorgung:
                    serializer.Serialize(writer, "ERSATZVERSORGUNG");
                    return;
                case Tariftyp.Grundversorgung:
                    serializer.Serialize(writer, "GRUNDVERSORGUNG");
                    return;
                case Tariftyp.GrundErsatzversorgung:
                    serializer.Serialize(writer, "GRUND_ERSATZVERSORGUNG");
                    return;
                case Tariftyp.Sondertarif:
                    serializer.Serialize(writer, "SONDERTARIF");
                    return;
            }
            throw new Exception("Cannot marshal type Tariftyp");
        }

        public static readonly TariftypConverter Singleton = new TariftypConverter();
    }
}
