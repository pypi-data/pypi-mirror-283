# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models


class FinishingStatusService(BaseService):

    @cast_models
    def list_of_all_finishing_status_codes(self) -> str:
        """Every driver has a finishing status like 'finished', disqualified', 'accident', '+1 lap', '+2 lap', etc. This endpoint will give the list of all such statuses. Example request and response attached

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: List of all finishing status codes- Example
        :rtype: str
        """

        serialized_request = (
            Serializer(f"{self.base_url}/api/f1/status", self.get_default_headers())
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def list_of_finishing_status_for_a_specific_season(self, year: str) -> str:
        """To fetch the list of finishing status of a specific season(year).

        :param year: year
        :type year: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: List of finishing status for a specific season- Example- 2019
        :rtype: str
        """

        Validator(str).validate(year)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/f1/{{year}}/status", self.get_default_headers()
            )
            .add_path("year", year)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def list_of_finishing_status_for_a_specific_round_in_a_season(
        self, year: str, round: str
    ) -> str:
        """To fetch the list of finishing status of a specific race(round) in a season(year).

        :param year: year
        :type year: str
        :param round: round
        :type round: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: List of finishing status for a specific round in a season- Example- 2019- Race 1
        :rtype: str
        """

        Validator(str).validate(year)
        Validator(str).validate(round)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/f1/{{year}}/{{round}}/status",
                self.get_default_headers(),
            )
            .add_path("year", year)
            .add_path("round", round)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response
