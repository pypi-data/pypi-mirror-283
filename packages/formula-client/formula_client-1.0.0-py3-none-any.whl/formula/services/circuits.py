# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models


class CircuitsService(BaseService):

    @cast_models
    def list_of_all_circuits(self):
        """This endpoint is to obtain a list of all constructors.


        Circuit lists can be refined by adding one or more of the following criteria:

        /constructors/<constructorId>
        /drivers/<driverId>
        /grid/<position>
        /results/<position>
        /fastest/<rank>
        /status/<statusId>

        For example, to list all circuits at which a specific driver has driven for a particular constructor:

        http://ergast.com/api/f1/drivers/alonso/constructors/mclaren/circuits

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/f1/circuits.json", self.get_default_headers()
            )
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def list_of_all_circuits_within_a_year(self, year: str) -> str:
        """List of all circuits within a year

        :param year: year
        :type year: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: List of all circuits within a year- Example- 2019
        :rtype: str
        """

        Validator(str).validate(year)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/f1/{{year}}/circuits", self.get_default_headers()
            )
            .add_path("year", year)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def list_of_all_circuits_within_a_race_in_a_year(
        self, year: str, round: str
    ) -> str:
        """List of all circuits within a race in a year

        :param year: year
        :type year: str
        :param round: round
        :type round: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: List of all circuits within a round in a year- Example- 2019- Race 1
        :rtype: str
        """

        Validator(str).validate(year)
        Validator(str).validate(round)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/f1/{{year}}/{{round}}/circuits",
                self.get_default_headers(),
            )
            .add_path("year", year)
            .add_path("round", round)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def circuit_information(self, circuitid: str) -> str:
        """Each constructor listed in the response is identified by a unique circuitId which is used to identify the constructor throughout the API. To obtain information about a particular circuit append the circuitId (name of the circuit)

        This endpoint is to obtain the information of a particular circuit based on the circuitId (circuit name)

        :param circuitid: circuitid
        :type circuitid: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Circuit Information- Example- Monza
        :rtype: str
        """

        Validator(str).validate(circuitid)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/f1/circuits/{{circuitid}}",
                self.get_default_headers(),
            )
            .add_path("circuitid", circuitid)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response
