# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models


class DriversService(BaseService):

    @cast_models
    def list_of_all_drivers(self):
        """To obtain a list of all drivers.

        Driver lists can be refined by adding one or more of the following criteria:

        /circuits/<circuitId>
        /constructors/<constructorId>
        /drivers/<driverId>
        /grid/<position>
        /results/<position>
        /fastest/<rank>
        /status/<statusId>

        For example, to list all drivers who have driven for a specific constructor at a particular circuit:

        http://ergast.com/api/f1/constructors/mclaren/circuits/monza/drivers

        Alternatively, to list the drivers who have achieved a particular final position in the championship:

        http://ergast.com/api/f1/driverStandings/1/drivers

        Drivers who participated in the 2014 season onwards have a permanent driver number.

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        serialized_request = (
            Serializer(f"{self.base_url}/api/f1/drivers", self.get_default_headers())
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def list_of_all_drivers_within_a_year(self, year: str) -> str:
        """This endpoint is to obtain a list of all drivers in a particular season (year)

        :param year: year
        :type year: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: List of all drivers within a year- Example - 2019
        :rtype: str
        """

        Validator(str).validate(year)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/f1/{{year}}/drivers", self.get_default_headers()
            )
            .add_path("year", year)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def list_of_all_drivers_within_a_race_in_a_year(self, year: str, round: str) -> str:
        """This endpoint is to obtain a list of all drivers in a particular race(round) of a season(year)

        :param year: year
        :type year: str
        :param round: round
        :type round: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: List of all drivers within a round in a year- Example- 2019- Race 1
        :rtype: str
        """

        Validator(str).validate(year)
        Validator(str).validate(round)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/f1/{{year}}/{{round}}/drivers",
                self.get_default_headers(),
            )
            .add_path("year", year)
            .add_path("round", round)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def driver_information(self, driverid: str) -> str:
        """Each driver listed in the response is identified by a unique driverId which is used to identify the driver throughout the API. To obtain information about a particular driver append the driverId

        This endpoint is to obtain the information of a particular driver based on the driverid (driver name)

        :param driverid: driverid
        :type driverid: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Driver Information- Example- Alonso
        :rtype: str
        """

        Validator(str).validate(driverid)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/f1/drivers/{{driverid}}",
                self.get_default_headers(),
            )
            .add_path("driverid", driverid)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response
