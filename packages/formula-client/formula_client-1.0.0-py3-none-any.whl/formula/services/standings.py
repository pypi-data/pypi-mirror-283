# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models


class StandingsService(BaseService):

    @cast_models
    def driver_standings_after_a_race(self, year: str, round: str) -> str:
        """To fetch the driver standings after a specific race(round) in a season(year), use this endpoint.

        :param year: year
        :type year: str
        :param round: round
        :type round: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Driver standings after a race- Example- 2019- Race 1
        :rtype: str
        """

        Validator(str).validate(year)
        Validator(str).validate(round)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/f1/{{year}}/{{round}}/driverStandings",
                self.get_default_headers(),
            )
            .add_path("year", year)
            .add_path("round", round)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def constructor_standings_after_a_race(self, year: str, round: str) -> str:
        """To list the constructor standings after a specific race (round) in a season(year), use this endpoint.

        :param year: year
        :type year: str
        :param round: round
        :type round: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Constructor standings after a race- Example- 2019- Race 1
        :rtype: str
        """

        Validator(str).validate(year)
        Validator(str).validate(round)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/f1/{{year}}/{{round}}/constructorStandings",
                self.get_default_headers(),
            )
            .add_path("year", year)
            .add_path("round", round)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def season_end_driver_standings(self, year: str) -> str:
        """Driver Standings at the end of the season(year).

        :param year: year
        :type year: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Season end driver standings - Example- 2019
        :rtype: str
        """

        Validator(str).validate(year)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/f1/{{year}}/driverStandings",
                self.get_default_headers(),
            )
            .add_path("year", year)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def season_end_constructor_standing(self, year: str) -> str:
        """Constructor Standings at the end of the season(year).

        :param year: year
        :type year: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Season end constructor standing- Example- 2019
        :rtype: str
        """

        Validator(str).validate(year)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/f1/{{year}}/constructorStandings",
                self.get_default_headers(),
            )
            .add_path("year", year)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def current_drivers_standing(self):
        """Current driver standings can always be obtained using this endpoint.

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/f1/current/driverStandings",
                self.get_default_headers(),
            )
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def current_constructor_s_standing(self):
        """Current constructor standings can always be obtained using this endpoint.

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/f1/current/constructorStandings",
                self.get_default_headers(),
            )
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def all_winners_of_drivers_championships(self):
        """To fetch all the winners information of drivers.

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/f1/driverStandings/1", self.get_default_headers()
            )
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def all_winners_of_constructors_championships(self):
        """To fetch all the winners information of constructors.

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/f1/constructorStandings/1",
                self.get_default_headers(),
            )
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def driver_standings_by_specifying_the_driver(self, driverid: str) -> str:
        """Driver standings by giving in the driverid(name of the driver).

        :param driverid: driverid
        :type driverid: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Driver standings by specifying the driver- Example- Alonso
        :rtype: str
        """

        Validator(str).validate(driverid)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/f1/drivers/{{driverid}}/driverStandings",
                self.get_default_headers(),
            )
            .add_path("driverid", driverid)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def constructor_standings_by_specifying_the_constructor(
        self, constructorid: str
    ) -> str:
        """Constructor standings by giving in the constructorid(name of the constructor).

        :param constructorid: constructorid
        :type constructorid: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Constructor standings by specifying the constructor- Example- McLaren
        :rtype: str
        """

        Validator(str).validate(constructorid)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/f1/constructors/{{constructorid}}/constructorStandings",
                self.get_default_headers(),
            )
            .add_path("constructorid", constructorid)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response
