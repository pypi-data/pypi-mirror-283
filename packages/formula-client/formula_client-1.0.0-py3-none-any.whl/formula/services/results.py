# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models


class ResultsService(BaseService):

    @cast_models
    def race_result(self, year: str, round: str) -> str:
        """This endpoint gives the result for a specific race (round) in a season(year).


        If the results for the specified race are not yet available the RaceTable element in the response will be empty.

        :param year: year
        :type year: str
        :param round: round
        :type round: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Race Result- Example-  2019- Race 1
        :rtype: str
        """

        Validator(str).validate(year)
        Validator(str).validate(round)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/f1/{{year}}/{{round}}/results",
                self.get_default_headers(),
            )
            .add_path("year", year)
            .add_path("round", round)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def most_recent_race_result(self):
        """Results from the most recent race can be obtained using this endpoint.

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/f1/current/last/results",
                self.get_default_headers(),
            )
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response
