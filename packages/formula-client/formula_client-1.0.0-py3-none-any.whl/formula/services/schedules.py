# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models


class SchedulesService(BaseService):

    @cast_models
    def schedule_of_races_for_a_season(self, year: str) -> str:
        """To obtain the schedule of races for a specific season use this endpoint required season (year).

        :param year: year
        :type year: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Schedule of races for a season- Example- 2019
        :rtype: str
        """

        Validator(str).validate(year)

        serialized_request = (
            Serializer(f"{self.base_url}/api/f1/{{year}}", self.get_default_headers())
            .add_path("year", year)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def schedule_of_the_current_season(self):
        """To obtain the schedule of races for the current season, use this endpoint.

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        serialized_request = (
            Serializer(f"{self.base_url}/api/f1/current", self.get_default_headers())
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def info_about_a_specific_race(self, year: str, round: str) -> str:
        """To obtain the schedule of races for a specific race(round) in a season(year), use this endpoint.

        :param year: year
        :type year: str
        :param round: round
        :type round: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Info about a specific race- Example- 2019- Race 1
        :rtype: str
        """

        Validator(str).validate(year)
        Validator(str).validate(round)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/f1/{{year}}/{{round}}", self.get_default_headers()
            )
            .add_path("year", year)
            .add_path("round", round)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response
