# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models


class ConstructorsService(BaseService):

    @cast_models
    def list_of_all_constructors(self):
        """This endpoint is to obtain a list of all constructors.

        Constructor lists can be refined by adding one or more of the following criteria:

        /circuits/<circuitId>
        /constructors/<constructorId>
        /drivers/<driverId>
        /grid/<position>
        /results/<position>
        /fastest/<rank>
        /status/<statusId>

        For example, to list all constructors a specific driver has driven for at a particular circuit:

        http://ergast.com/api/f1/drivers/alonso/circuits/monza/constructors

        Alternatively, to list all the constructors who have achieved a particular final position in the championship:

        http://ergast.com/api/f1/constructorStandings/1/constructors

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/f1/constructors", self.get_default_headers()
            )
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def list_of_all_constructors_within_a_year(self, year: str) -> str:
        """This endpoint is to obtain a list of all constructors in a particular season (year)

        :param year: year
        :type year: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: List of all constructors within a year- Example- 2019
        :rtype: str
        """

        Validator(str).validate(year)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/f1/{{year}}/constructors",
                self.get_default_headers(),
            )
            .add_path("year", year)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def list_of_all_constructors_within_a_race_in_a_year(
        self, year: str, round: str
    ) -> str:
        """This endpoint is to obtain a list of all constructors in a particular race(round) of a season(year)

        :param year: year
        :type year: str
        :param round: round
        :type round: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: List of all constructors within a round in a year- Example- 2019- Race 1
        :rtype: str
        """

        Validator(str).validate(year)
        Validator(str).validate(round)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/f1/{{year}}/{{round}}/constructors",
                self.get_default_headers(),
            )
            .add_path("year", year)
            .add_path("round", round)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def constructor_information(self, constructorid: str) -> str:
        """Each constructor listed in the response is identified by a unique constructorId which is used to identify the constructor throughout the API. To obtain information about a particular constructor append the constructorId (name of the constructor)

        This endpoint is to obtain the information of a particular constructor based on the constructorId (constructor name)

        :param constructorid: constructorid
        :type constructorid: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Constructor Information- Example- McLaren
        :rtype: str
        """

        Validator(str).validate(constructorid)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/f1/constructors/{{constructorid}}",
                self.get_default_headers(),
            )
            .add_path("constructorid", constructorid)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return response
