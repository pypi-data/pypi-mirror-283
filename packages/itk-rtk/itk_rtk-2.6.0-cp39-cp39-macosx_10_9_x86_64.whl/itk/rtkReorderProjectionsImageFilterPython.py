# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkReorderProjectionsImageFilterPython
else:
    import _rtkReorderProjectionsImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.rtkThreeDCircularProjectionGeometryPython
import itk.rtkProjectionGeometryPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkImageToImageFilterBPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython

def rtkReorderProjectionsImageFilterICD3ICD3_New():
    return rtkReorderProjectionsImageFilterICD3ICD3.New()

class rtkReorderProjectionsImageFilterICD3ICD3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD3):
    r"""Proxy of C++ rtkReorderProjectionsImageFilterICD3ICD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    PermutationType_NONE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICD3ICD3_PermutationType_NONE
    
    PermutationType_SORT = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICD3ICD3_PermutationType_SORT
    
    PermutationType_SHUFFLE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICD3ICD3_PermutationType_SHUFFLE
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkReorderProjectionsImageFilterICD3ICD3_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICD3ICD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkReorderProjectionsImageFilterICD3ICD3_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICD3ICD3_Clone(self)

    def GetModifiableOutputGeometry(self):
        r"""GetModifiableOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICD3ICD3_GetModifiableOutputGeometry(self)

    def GetOutputGeometry(self, *args):
        r"""
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICD3ICD3_GetOutputGeometry(self, *args)

    def SetInputGeometry(self, _arg):
        r"""
        SetInputGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICD3ICD3_SetInputGeometry(self, _arg)

    def GetPermutation(self):
        r"""GetPermutation(self) -> rtkReorderProjectionsImageFilterICD3ICD3::PermutationType"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICD3ICD3_GetPermutation(self)

    def SetPermutation(self, _arg):
        r"""
        SetPermutation(self, _arg)

        Parameters
        ----------
        _arg: enum rtkReorderProjectionsImageFilterICD3ICD3::PermutationType

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICD3ICD3_SetPermutation(self, _arg)

    def SetInputSignal(self, signal):
        r"""
        SetInputSignal(self, signal)

        Parameters
        ----------
        signal: std::vector< double,std::allocator< double > > const

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICD3ICD3_SetInputSignal(self, signal)

    def GetOutputSignal(self):
        r"""GetOutputSignal(self) -> vectorD"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICD3ICD3_GetOutputSignal(self)
    __swig_destroy__ = _rtkReorderProjectionsImageFilterPython.delete_rtkReorderProjectionsImageFilterICD3ICD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkReorderProjectionsImageFilterICD3ICD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICD3ICD3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkReorderProjectionsImageFilterICD3ICD3

        Create a new object of the class rtkReorderProjectionsImageFilterICD3ICD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkReorderProjectionsImageFilterICD3ICD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkReorderProjectionsImageFilterICD3ICD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkReorderProjectionsImageFilterICD3ICD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkReorderProjectionsImageFilterICD3ICD3 in _rtkReorderProjectionsImageFilterPython:
_rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICD3ICD3_swigregister(rtkReorderProjectionsImageFilterICD3ICD3)

def rtkReorderProjectionsImageFilterICF3ICF3_New():
    return rtkReorderProjectionsImageFilterICF3ICF3.New()

class rtkReorderProjectionsImageFilterICF3ICF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3):
    r"""Proxy of C++ rtkReorderProjectionsImageFilterICF3ICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    PermutationType_NONE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICF3ICF3_PermutationType_NONE
    
    PermutationType_SORT = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICF3ICF3_PermutationType_SORT
    
    PermutationType_SHUFFLE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICF3ICF3_PermutationType_SHUFFLE
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkReorderProjectionsImageFilterICF3ICF3_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICF3ICF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkReorderProjectionsImageFilterICF3ICF3_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICF3ICF3_Clone(self)

    def GetModifiableOutputGeometry(self):
        r"""GetModifiableOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICF3ICF3_GetModifiableOutputGeometry(self)

    def GetOutputGeometry(self, *args):
        r"""
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICF3ICF3_GetOutputGeometry(self, *args)

    def SetInputGeometry(self, _arg):
        r"""
        SetInputGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICF3ICF3_SetInputGeometry(self, _arg)

    def GetPermutation(self):
        r"""GetPermutation(self) -> rtkReorderProjectionsImageFilterICF3ICF3::PermutationType"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICF3ICF3_GetPermutation(self)

    def SetPermutation(self, _arg):
        r"""
        SetPermutation(self, _arg)

        Parameters
        ----------
        _arg: enum rtkReorderProjectionsImageFilterICF3ICF3::PermutationType

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICF3ICF3_SetPermutation(self, _arg)

    def SetInputSignal(self, signal):
        r"""
        SetInputSignal(self, signal)

        Parameters
        ----------
        signal: std::vector< double,std::allocator< double > > const

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICF3ICF3_SetInputSignal(self, signal)

    def GetOutputSignal(self):
        r"""GetOutputSignal(self) -> vectorD"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICF3ICF3_GetOutputSignal(self)
    __swig_destroy__ = _rtkReorderProjectionsImageFilterPython.delete_rtkReorderProjectionsImageFilterICF3ICF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkReorderProjectionsImageFilterICF3ICF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICF3ICF3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkReorderProjectionsImageFilterICF3ICF3

        Create a new object of the class rtkReorderProjectionsImageFilterICF3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkReorderProjectionsImageFilterICF3ICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkReorderProjectionsImageFilterICF3ICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkReorderProjectionsImageFilterICF3ICF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkReorderProjectionsImageFilterICF3ICF3 in _rtkReorderProjectionsImageFilterPython:
_rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICF3ICF3_swigregister(rtkReorderProjectionsImageFilterICF3ICF3)

def rtkReorderProjectionsImageFilterICVF23ICVF23_New():
    return rtkReorderProjectionsImageFilterICVF23ICVF23.New()

class rtkReorderProjectionsImageFilterICVF23ICVF23(itk.itkImageToImageFilterAPython.itkImageToImageFilterICVF23ICVF23):
    r"""Proxy of C++ rtkReorderProjectionsImageFilterICVF23ICVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    PermutationType_NONE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF23ICVF23_PermutationType_NONE
    
    PermutationType_SORT = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF23ICVF23_PermutationType_SORT
    
    PermutationType_SHUFFLE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF23ICVF23_PermutationType_SHUFFLE
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkReorderProjectionsImageFilterICVF23ICVF23_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF23ICVF23___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkReorderProjectionsImageFilterICVF23ICVF23_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF23ICVF23_Clone(self)

    def GetModifiableOutputGeometry(self):
        r"""GetModifiableOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF23ICVF23_GetModifiableOutputGeometry(self)

    def GetOutputGeometry(self, *args):
        r"""
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF23ICVF23_GetOutputGeometry(self, *args)

    def SetInputGeometry(self, _arg):
        r"""
        SetInputGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF23ICVF23_SetInputGeometry(self, _arg)

    def GetPermutation(self):
        r"""GetPermutation(self) -> rtkReorderProjectionsImageFilterICVF23ICVF23::PermutationType"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF23ICVF23_GetPermutation(self)

    def SetPermutation(self, _arg):
        r"""
        SetPermutation(self, _arg)

        Parameters
        ----------
        _arg: enum rtkReorderProjectionsImageFilterICVF23ICVF23::PermutationType

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF23ICVF23_SetPermutation(self, _arg)

    def SetInputSignal(self, signal):
        r"""
        SetInputSignal(self, signal)

        Parameters
        ----------
        signal: std::vector< double,std::allocator< double > > const

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF23ICVF23_SetInputSignal(self, signal)

    def GetOutputSignal(self):
        r"""GetOutputSignal(self) -> vectorD"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF23ICVF23_GetOutputSignal(self)
    __swig_destroy__ = _rtkReorderProjectionsImageFilterPython.delete_rtkReorderProjectionsImageFilterICVF23ICVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkReorderProjectionsImageFilterICVF23ICVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF23ICVF23_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkReorderProjectionsImageFilterICVF23ICVF23

        Create a new object of the class rtkReorderProjectionsImageFilterICVF23ICVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkReorderProjectionsImageFilterICVF23ICVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkReorderProjectionsImageFilterICVF23ICVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkReorderProjectionsImageFilterICVF23ICVF23.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkReorderProjectionsImageFilterICVF23ICVF23 in _rtkReorderProjectionsImageFilterPython:
_rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF23ICVF23_swigregister(rtkReorderProjectionsImageFilterICVF23ICVF23)

def rtkReorderProjectionsImageFilterICVF33ICVF33_New():
    return rtkReorderProjectionsImageFilterICVF33ICVF33.New()

class rtkReorderProjectionsImageFilterICVF33ICVF33(itk.itkImageToImageFilterAPython.itkImageToImageFilterICVF33ICVF33):
    r"""Proxy of C++ rtkReorderProjectionsImageFilterICVF33ICVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    PermutationType_NONE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF33ICVF33_PermutationType_NONE
    
    PermutationType_SORT = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF33ICVF33_PermutationType_SORT
    
    PermutationType_SHUFFLE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF33ICVF33_PermutationType_SHUFFLE
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkReorderProjectionsImageFilterICVF33ICVF33_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF33ICVF33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkReorderProjectionsImageFilterICVF33ICVF33_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF33ICVF33_Clone(self)

    def GetModifiableOutputGeometry(self):
        r"""GetModifiableOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF33ICVF33_GetModifiableOutputGeometry(self)

    def GetOutputGeometry(self, *args):
        r"""
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF33ICVF33_GetOutputGeometry(self, *args)

    def SetInputGeometry(self, _arg):
        r"""
        SetInputGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF33ICVF33_SetInputGeometry(self, _arg)

    def GetPermutation(self):
        r"""GetPermutation(self) -> rtkReorderProjectionsImageFilterICVF33ICVF33::PermutationType"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF33ICVF33_GetPermutation(self)

    def SetPermutation(self, _arg):
        r"""
        SetPermutation(self, _arg)

        Parameters
        ----------
        _arg: enum rtkReorderProjectionsImageFilterICVF33ICVF33::PermutationType

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF33ICVF33_SetPermutation(self, _arg)

    def SetInputSignal(self, signal):
        r"""
        SetInputSignal(self, signal)

        Parameters
        ----------
        signal: std::vector< double,std::allocator< double > > const

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF33ICVF33_SetInputSignal(self, signal)

    def GetOutputSignal(self):
        r"""GetOutputSignal(self) -> vectorD"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF33ICVF33_GetOutputSignal(self)
    __swig_destroy__ = _rtkReorderProjectionsImageFilterPython.delete_rtkReorderProjectionsImageFilterICVF33ICVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkReorderProjectionsImageFilterICVF33ICVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF33ICVF33_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkReorderProjectionsImageFilterICVF33ICVF33

        Create a new object of the class rtkReorderProjectionsImageFilterICVF33ICVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkReorderProjectionsImageFilterICVF33ICVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkReorderProjectionsImageFilterICVF33ICVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkReorderProjectionsImageFilterICVF33ICVF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkReorderProjectionsImageFilterICVF33ICVF33 in _rtkReorderProjectionsImageFilterPython:
_rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF33ICVF33_swigregister(rtkReorderProjectionsImageFilterICVF33ICVF33)

def rtkReorderProjectionsImageFilterICVF43ICVF43_New():
    return rtkReorderProjectionsImageFilterICVF43ICVF43.New()

class rtkReorderProjectionsImageFilterICVF43ICVF43(itk.itkImageToImageFilterAPython.itkImageToImageFilterICVF43ICVF43):
    r"""Proxy of C++ rtkReorderProjectionsImageFilterICVF43ICVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    PermutationType_NONE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF43ICVF43_PermutationType_NONE
    
    PermutationType_SORT = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF43ICVF43_PermutationType_SORT
    
    PermutationType_SHUFFLE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF43ICVF43_PermutationType_SHUFFLE
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkReorderProjectionsImageFilterICVF43ICVF43_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF43ICVF43___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkReorderProjectionsImageFilterICVF43ICVF43_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF43ICVF43_Clone(self)

    def GetModifiableOutputGeometry(self):
        r"""GetModifiableOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF43ICVF43_GetModifiableOutputGeometry(self)

    def GetOutputGeometry(self, *args):
        r"""
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF43ICVF43_GetOutputGeometry(self, *args)

    def SetInputGeometry(self, _arg):
        r"""
        SetInputGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF43ICVF43_SetInputGeometry(self, _arg)

    def GetPermutation(self):
        r"""GetPermutation(self) -> rtkReorderProjectionsImageFilterICVF43ICVF43::PermutationType"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF43ICVF43_GetPermutation(self)

    def SetPermutation(self, _arg):
        r"""
        SetPermutation(self, _arg)

        Parameters
        ----------
        _arg: enum rtkReorderProjectionsImageFilterICVF43ICVF43::PermutationType

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF43ICVF43_SetPermutation(self, _arg)

    def SetInputSignal(self, signal):
        r"""
        SetInputSignal(self, signal)

        Parameters
        ----------
        signal: std::vector< double,std::allocator< double > > const

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF43ICVF43_SetInputSignal(self, signal)

    def GetOutputSignal(self):
        r"""GetOutputSignal(self) -> vectorD"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF43ICVF43_GetOutputSignal(self)
    __swig_destroy__ = _rtkReorderProjectionsImageFilterPython.delete_rtkReorderProjectionsImageFilterICVF43ICVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkReorderProjectionsImageFilterICVF43ICVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF43ICVF43_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkReorderProjectionsImageFilterICVF43ICVF43

        Create a new object of the class rtkReorderProjectionsImageFilterICVF43ICVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkReorderProjectionsImageFilterICVF43ICVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkReorderProjectionsImageFilterICVF43ICVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkReorderProjectionsImageFilterICVF43ICVF43.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkReorderProjectionsImageFilterICVF43ICVF43 in _rtkReorderProjectionsImageFilterPython:
_rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterICVF43ICVF43_swigregister(rtkReorderProjectionsImageFilterICVF43ICVF43)

def rtkReorderProjectionsImageFilterID3ID3_New():
    return rtkReorderProjectionsImageFilterID3ID3.New()

class rtkReorderProjectionsImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ rtkReorderProjectionsImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    PermutationType_NONE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterID3ID3_PermutationType_NONE
    
    PermutationType_SORT = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterID3ID3_PermutationType_SORT
    
    PermutationType_SHUFFLE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterID3ID3_PermutationType_SHUFFLE
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkReorderProjectionsImageFilterID3ID3_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkReorderProjectionsImageFilterID3ID3_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterID3ID3_Clone(self)

    def GetModifiableOutputGeometry(self):
        r"""GetModifiableOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterID3ID3_GetModifiableOutputGeometry(self)

    def GetOutputGeometry(self, *args):
        r"""
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterID3ID3_GetOutputGeometry(self, *args)

    def SetInputGeometry(self, _arg):
        r"""
        SetInputGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterID3ID3_SetInputGeometry(self, _arg)

    def GetPermutation(self):
        r"""GetPermutation(self) -> rtkReorderProjectionsImageFilterID3ID3::PermutationType"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterID3ID3_GetPermutation(self)

    def SetPermutation(self, _arg):
        r"""
        SetPermutation(self, _arg)

        Parameters
        ----------
        _arg: enum rtkReorderProjectionsImageFilterID3ID3::PermutationType

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterID3ID3_SetPermutation(self, _arg)

    def SetInputSignal(self, signal):
        r"""
        SetInputSignal(self, signal)

        Parameters
        ----------
        signal: std::vector< double,std::allocator< double > > const

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterID3ID3_SetInputSignal(self, signal)

    def GetOutputSignal(self):
        r"""GetOutputSignal(self) -> vectorD"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterID3ID3_GetOutputSignal(self)
    __swig_destroy__ = _rtkReorderProjectionsImageFilterPython.delete_rtkReorderProjectionsImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkReorderProjectionsImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkReorderProjectionsImageFilterID3ID3

        Create a new object of the class rtkReorderProjectionsImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkReorderProjectionsImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkReorderProjectionsImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkReorderProjectionsImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkReorderProjectionsImageFilterID3ID3 in _rtkReorderProjectionsImageFilterPython:
_rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterID3ID3_swigregister(rtkReorderProjectionsImageFilterID3ID3)

def rtkReorderProjectionsImageFilterIF3IF3_New():
    return rtkReorderProjectionsImageFilterIF3IF3.New()

class rtkReorderProjectionsImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ rtkReorderProjectionsImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    PermutationType_NONE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIF3IF3_PermutationType_NONE
    
    PermutationType_SORT = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIF3IF3_PermutationType_SORT
    
    PermutationType_SHUFFLE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIF3IF3_PermutationType_SHUFFLE
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkReorderProjectionsImageFilterIF3IF3_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkReorderProjectionsImageFilterIF3IF3_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIF3IF3_Clone(self)

    def GetModifiableOutputGeometry(self):
        r"""GetModifiableOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIF3IF3_GetModifiableOutputGeometry(self)

    def GetOutputGeometry(self, *args):
        r"""
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIF3IF3_GetOutputGeometry(self, *args)

    def SetInputGeometry(self, _arg):
        r"""
        SetInputGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIF3IF3_SetInputGeometry(self, _arg)

    def GetPermutation(self):
        r"""GetPermutation(self) -> rtkReorderProjectionsImageFilterIF3IF3::PermutationType"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIF3IF3_GetPermutation(self)

    def SetPermutation(self, _arg):
        r"""
        SetPermutation(self, _arg)

        Parameters
        ----------
        _arg: enum rtkReorderProjectionsImageFilterIF3IF3::PermutationType

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIF3IF3_SetPermutation(self, _arg)

    def SetInputSignal(self, signal):
        r"""
        SetInputSignal(self, signal)

        Parameters
        ----------
        signal: std::vector< double,std::allocator< double > > const

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIF3IF3_SetInputSignal(self, signal)

    def GetOutputSignal(self):
        r"""GetOutputSignal(self) -> vectorD"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIF3IF3_GetOutputSignal(self)
    __swig_destroy__ = _rtkReorderProjectionsImageFilterPython.delete_rtkReorderProjectionsImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkReorderProjectionsImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkReorderProjectionsImageFilterIF3IF3

        Create a new object of the class rtkReorderProjectionsImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkReorderProjectionsImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkReorderProjectionsImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkReorderProjectionsImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkReorderProjectionsImageFilterIF3IF3 in _rtkReorderProjectionsImageFilterPython:
_rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIF3IF3_swigregister(rtkReorderProjectionsImageFilterIF3IF3)

def rtkReorderProjectionsImageFilterIRGBAUC3IRGBAUC3_New():
    return rtkReorderProjectionsImageFilterIRGBAUC3IRGBAUC3.New()

class rtkReorderProjectionsImageFilterIRGBAUC3IRGBAUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC3IRGBAUC3):
    r"""Proxy of C++ rtkReorderProjectionsImageFilterIRGBAUC3IRGBAUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    PermutationType_NONE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIRGBAUC3IRGBAUC3_PermutationType_NONE
    
    PermutationType_SORT = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIRGBAUC3IRGBAUC3_PermutationType_SORT
    
    PermutationType_SHUFFLE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIRGBAUC3IRGBAUC3_PermutationType_SHUFFLE
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkReorderProjectionsImageFilterIRGBAUC3IRGBAUC3_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIRGBAUC3IRGBAUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkReorderProjectionsImageFilterIRGBAUC3IRGBAUC3_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIRGBAUC3IRGBAUC3_Clone(self)

    def GetModifiableOutputGeometry(self):
        r"""GetModifiableOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIRGBAUC3IRGBAUC3_GetModifiableOutputGeometry(self)

    def GetOutputGeometry(self, *args):
        r"""
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIRGBAUC3IRGBAUC3_GetOutputGeometry(self, *args)

    def SetInputGeometry(self, _arg):
        r"""
        SetInputGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIRGBAUC3IRGBAUC3_SetInputGeometry(self, _arg)

    def GetPermutation(self):
        r"""GetPermutation(self) -> rtkReorderProjectionsImageFilterIRGBAUC3IRGBAUC3::PermutationType"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIRGBAUC3IRGBAUC3_GetPermutation(self)

    def SetPermutation(self, _arg):
        r"""
        SetPermutation(self, _arg)

        Parameters
        ----------
        _arg: enum rtkReorderProjectionsImageFilterIRGBAUC3IRGBAUC3::PermutationType

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIRGBAUC3IRGBAUC3_SetPermutation(self, _arg)

    def SetInputSignal(self, signal):
        r"""
        SetInputSignal(self, signal)

        Parameters
        ----------
        signal: std::vector< double,std::allocator< double > > const

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIRGBAUC3IRGBAUC3_SetInputSignal(self, signal)

    def GetOutputSignal(self):
        r"""GetOutputSignal(self) -> vectorD"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIRGBAUC3IRGBAUC3_GetOutputSignal(self)
    __swig_destroy__ = _rtkReorderProjectionsImageFilterPython.delete_rtkReorderProjectionsImageFilterIRGBAUC3IRGBAUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkReorderProjectionsImageFilterIRGBAUC3IRGBAUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIRGBAUC3IRGBAUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkReorderProjectionsImageFilterIRGBAUC3IRGBAUC3

        Create a new object of the class rtkReorderProjectionsImageFilterIRGBAUC3IRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkReorderProjectionsImageFilterIRGBAUC3IRGBAUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkReorderProjectionsImageFilterIRGBAUC3IRGBAUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkReorderProjectionsImageFilterIRGBAUC3IRGBAUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkReorderProjectionsImageFilterIRGBAUC3IRGBAUC3 in _rtkReorderProjectionsImageFilterPython:
_rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIRGBAUC3IRGBAUC3_swigregister(rtkReorderProjectionsImageFilterIRGBAUC3IRGBAUC3)

def rtkReorderProjectionsImageFilterIRGBUC3IRGBUC3_New():
    return rtkReorderProjectionsImageFilterIRGBUC3IRGBUC3.New()

class rtkReorderProjectionsImageFilterIRGBUC3IRGBUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC3IRGBUC3):
    r"""Proxy of C++ rtkReorderProjectionsImageFilterIRGBUC3IRGBUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    PermutationType_NONE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIRGBUC3IRGBUC3_PermutationType_NONE
    
    PermutationType_SORT = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIRGBUC3IRGBUC3_PermutationType_SORT
    
    PermutationType_SHUFFLE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIRGBUC3IRGBUC3_PermutationType_SHUFFLE
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkReorderProjectionsImageFilterIRGBUC3IRGBUC3_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIRGBUC3IRGBUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkReorderProjectionsImageFilterIRGBUC3IRGBUC3_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIRGBUC3IRGBUC3_Clone(self)

    def GetModifiableOutputGeometry(self):
        r"""GetModifiableOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIRGBUC3IRGBUC3_GetModifiableOutputGeometry(self)

    def GetOutputGeometry(self, *args):
        r"""
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIRGBUC3IRGBUC3_GetOutputGeometry(self, *args)

    def SetInputGeometry(self, _arg):
        r"""
        SetInputGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIRGBUC3IRGBUC3_SetInputGeometry(self, _arg)

    def GetPermutation(self):
        r"""GetPermutation(self) -> rtkReorderProjectionsImageFilterIRGBUC3IRGBUC3::PermutationType"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIRGBUC3IRGBUC3_GetPermutation(self)

    def SetPermutation(self, _arg):
        r"""
        SetPermutation(self, _arg)

        Parameters
        ----------
        _arg: enum rtkReorderProjectionsImageFilterIRGBUC3IRGBUC3::PermutationType

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIRGBUC3IRGBUC3_SetPermutation(self, _arg)

    def SetInputSignal(self, signal):
        r"""
        SetInputSignal(self, signal)

        Parameters
        ----------
        signal: std::vector< double,std::allocator< double > > const

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIRGBUC3IRGBUC3_SetInputSignal(self, signal)

    def GetOutputSignal(self):
        r"""GetOutputSignal(self) -> vectorD"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIRGBUC3IRGBUC3_GetOutputSignal(self)
    __swig_destroy__ = _rtkReorderProjectionsImageFilterPython.delete_rtkReorderProjectionsImageFilterIRGBUC3IRGBUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkReorderProjectionsImageFilterIRGBUC3IRGBUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIRGBUC3IRGBUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkReorderProjectionsImageFilterIRGBUC3IRGBUC3

        Create a new object of the class rtkReorderProjectionsImageFilterIRGBUC3IRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkReorderProjectionsImageFilterIRGBUC3IRGBUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkReorderProjectionsImageFilterIRGBUC3IRGBUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkReorderProjectionsImageFilterIRGBUC3IRGBUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkReorderProjectionsImageFilterIRGBUC3IRGBUC3 in _rtkReorderProjectionsImageFilterPython:
_rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIRGBUC3IRGBUC3_swigregister(rtkReorderProjectionsImageFilterIRGBUC3IRGBUC3)

def rtkReorderProjectionsImageFilterISS3ISS3_New():
    return rtkReorderProjectionsImageFilterISS3ISS3.New()

class rtkReorderProjectionsImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""Proxy of C++ rtkReorderProjectionsImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    PermutationType_NONE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterISS3ISS3_PermutationType_NONE
    
    PermutationType_SORT = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterISS3ISS3_PermutationType_SORT
    
    PermutationType_SHUFFLE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterISS3ISS3_PermutationType_SHUFFLE
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkReorderProjectionsImageFilterISS3ISS3_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkReorderProjectionsImageFilterISS3ISS3_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterISS3ISS3_Clone(self)

    def GetModifiableOutputGeometry(self):
        r"""GetModifiableOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterISS3ISS3_GetModifiableOutputGeometry(self)

    def GetOutputGeometry(self, *args):
        r"""
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterISS3ISS3_GetOutputGeometry(self, *args)

    def SetInputGeometry(self, _arg):
        r"""
        SetInputGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterISS3ISS3_SetInputGeometry(self, _arg)

    def GetPermutation(self):
        r"""GetPermutation(self) -> rtkReorderProjectionsImageFilterISS3ISS3::PermutationType"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterISS3ISS3_GetPermutation(self)

    def SetPermutation(self, _arg):
        r"""
        SetPermutation(self, _arg)

        Parameters
        ----------
        _arg: enum rtkReorderProjectionsImageFilterISS3ISS3::PermutationType

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterISS3ISS3_SetPermutation(self, _arg)

    def SetInputSignal(self, signal):
        r"""
        SetInputSignal(self, signal)

        Parameters
        ----------
        signal: std::vector< double,std::allocator< double > > const

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterISS3ISS3_SetInputSignal(self, signal)

    def GetOutputSignal(self):
        r"""GetOutputSignal(self) -> vectorD"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterISS3ISS3_GetOutputSignal(self)
    __swig_destroy__ = _rtkReorderProjectionsImageFilterPython.delete_rtkReorderProjectionsImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkReorderProjectionsImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkReorderProjectionsImageFilterISS3ISS3

        Create a new object of the class rtkReorderProjectionsImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkReorderProjectionsImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkReorderProjectionsImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkReorderProjectionsImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkReorderProjectionsImageFilterISS3ISS3 in _rtkReorderProjectionsImageFilterPython:
_rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterISS3ISS3_swigregister(rtkReorderProjectionsImageFilterISS3ISS3)

def rtkReorderProjectionsImageFilterIUC3IUC3_New():
    return rtkReorderProjectionsImageFilterIUC3IUC3.New()

class rtkReorderProjectionsImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ rtkReorderProjectionsImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    PermutationType_NONE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIUC3IUC3_PermutationType_NONE
    
    PermutationType_SORT = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIUC3IUC3_PermutationType_SORT
    
    PermutationType_SHUFFLE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIUC3IUC3_PermutationType_SHUFFLE
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkReorderProjectionsImageFilterIUC3IUC3_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkReorderProjectionsImageFilterIUC3IUC3_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIUC3IUC3_Clone(self)

    def GetModifiableOutputGeometry(self):
        r"""GetModifiableOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIUC3IUC3_GetModifiableOutputGeometry(self)

    def GetOutputGeometry(self, *args):
        r"""
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIUC3IUC3_GetOutputGeometry(self, *args)

    def SetInputGeometry(self, _arg):
        r"""
        SetInputGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIUC3IUC3_SetInputGeometry(self, _arg)

    def GetPermutation(self):
        r"""GetPermutation(self) -> rtkReorderProjectionsImageFilterIUC3IUC3::PermutationType"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIUC3IUC3_GetPermutation(self)

    def SetPermutation(self, _arg):
        r"""
        SetPermutation(self, _arg)

        Parameters
        ----------
        _arg: enum rtkReorderProjectionsImageFilterIUC3IUC3::PermutationType

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIUC3IUC3_SetPermutation(self, _arg)

    def SetInputSignal(self, signal):
        r"""
        SetInputSignal(self, signal)

        Parameters
        ----------
        signal: std::vector< double,std::allocator< double > > const

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIUC3IUC3_SetInputSignal(self, signal)

    def GetOutputSignal(self):
        r"""GetOutputSignal(self) -> vectorD"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIUC3IUC3_GetOutputSignal(self)
    __swig_destroy__ = _rtkReorderProjectionsImageFilterPython.delete_rtkReorderProjectionsImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkReorderProjectionsImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkReorderProjectionsImageFilterIUC3IUC3

        Create a new object of the class rtkReorderProjectionsImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkReorderProjectionsImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkReorderProjectionsImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkReorderProjectionsImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkReorderProjectionsImageFilterIUC3IUC3 in _rtkReorderProjectionsImageFilterPython:
_rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIUC3IUC3_swigregister(rtkReorderProjectionsImageFilterIUC3IUC3)

def rtkReorderProjectionsImageFilterIUS3IUS3_New():
    return rtkReorderProjectionsImageFilterIUS3IUS3.New()

class rtkReorderProjectionsImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""Proxy of C++ rtkReorderProjectionsImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    PermutationType_NONE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIUS3IUS3_PermutationType_NONE
    
    PermutationType_SORT = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIUS3IUS3_PermutationType_SORT
    
    PermutationType_SHUFFLE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIUS3IUS3_PermutationType_SHUFFLE
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkReorderProjectionsImageFilterIUS3IUS3_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkReorderProjectionsImageFilterIUS3IUS3_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIUS3IUS3_Clone(self)

    def GetModifiableOutputGeometry(self):
        r"""GetModifiableOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIUS3IUS3_GetModifiableOutputGeometry(self)

    def GetOutputGeometry(self, *args):
        r"""
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIUS3IUS3_GetOutputGeometry(self, *args)

    def SetInputGeometry(self, _arg):
        r"""
        SetInputGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIUS3IUS3_SetInputGeometry(self, _arg)

    def GetPermutation(self):
        r"""GetPermutation(self) -> rtkReorderProjectionsImageFilterIUS3IUS3::PermutationType"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIUS3IUS3_GetPermutation(self)

    def SetPermutation(self, _arg):
        r"""
        SetPermutation(self, _arg)

        Parameters
        ----------
        _arg: enum rtkReorderProjectionsImageFilterIUS3IUS3::PermutationType

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIUS3IUS3_SetPermutation(self, _arg)

    def SetInputSignal(self, signal):
        r"""
        SetInputSignal(self, signal)

        Parameters
        ----------
        signal: std::vector< double,std::allocator< double > > const

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIUS3IUS3_SetInputSignal(self, signal)

    def GetOutputSignal(self):
        r"""GetOutputSignal(self) -> vectorD"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIUS3IUS3_GetOutputSignal(self)
    __swig_destroy__ = _rtkReorderProjectionsImageFilterPython.delete_rtkReorderProjectionsImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkReorderProjectionsImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkReorderProjectionsImageFilterIUS3IUS3

        Create a new object of the class rtkReorderProjectionsImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkReorderProjectionsImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkReorderProjectionsImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkReorderProjectionsImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkReorderProjectionsImageFilterIUS3IUS3 in _rtkReorderProjectionsImageFilterPython:
_rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIUS3IUS3_swigregister(rtkReorderProjectionsImageFilterIUS3IUS3)

def rtkReorderProjectionsImageFilterIVF23IVF23_New():
    return rtkReorderProjectionsImageFilterIVF23IVF23.New()

class rtkReorderProjectionsImageFilterIVF23IVF23(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF23IVF23):
    r"""Proxy of C++ rtkReorderProjectionsImageFilterIVF23IVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    PermutationType_NONE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF23IVF23_PermutationType_NONE
    
    PermutationType_SORT = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF23IVF23_PermutationType_SORT
    
    PermutationType_SHUFFLE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF23IVF23_PermutationType_SHUFFLE
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkReorderProjectionsImageFilterIVF23IVF23_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF23IVF23___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkReorderProjectionsImageFilterIVF23IVF23_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF23IVF23_Clone(self)

    def GetModifiableOutputGeometry(self):
        r"""GetModifiableOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF23IVF23_GetModifiableOutputGeometry(self)

    def GetOutputGeometry(self, *args):
        r"""
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF23IVF23_GetOutputGeometry(self, *args)

    def SetInputGeometry(self, _arg):
        r"""
        SetInputGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF23IVF23_SetInputGeometry(self, _arg)

    def GetPermutation(self):
        r"""GetPermutation(self) -> rtkReorderProjectionsImageFilterIVF23IVF23::PermutationType"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF23IVF23_GetPermutation(self)

    def SetPermutation(self, _arg):
        r"""
        SetPermutation(self, _arg)

        Parameters
        ----------
        _arg: enum rtkReorderProjectionsImageFilterIVF23IVF23::PermutationType

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF23IVF23_SetPermutation(self, _arg)

    def SetInputSignal(self, signal):
        r"""
        SetInputSignal(self, signal)

        Parameters
        ----------
        signal: std::vector< double,std::allocator< double > > const

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF23IVF23_SetInputSignal(self, signal)

    def GetOutputSignal(self):
        r"""GetOutputSignal(self) -> vectorD"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF23IVF23_GetOutputSignal(self)
    __swig_destroy__ = _rtkReorderProjectionsImageFilterPython.delete_rtkReorderProjectionsImageFilterIVF23IVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkReorderProjectionsImageFilterIVF23IVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF23IVF23_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkReorderProjectionsImageFilterIVF23IVF23

        Create a new object of the class rtkReorderProjectionsImageFilterIVF23IVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkReorderProjectionsImageFilterIVF23IVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkReorderProjectionsImageFilterIVF23IVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkReorderProjectionsImageFilterIVF23IVF23.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkReorderProjectionsImageFilterIVF23IVF23 in _rtkReorderProjectionsImageFilterPython:
_rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF23IVF23_swigregister(rtkReorderProjectionsImageFilterIVF23IVF23)

def rtkReorderProjectionsImageFilterIVF33IVF33_New():
    return rtkReorderProjectionsImageFilterIVF33IVF33.New()

class rtkReorderProjectionsImageFilterIVF33IVF33(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF33IVF33):
    r"""Proxy of C++ rtkReorderProjectionsImageFilterIVF33IVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    PermutationType_NONE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF33IVF33_PermutationType_NONE
    
    PermutationType_SORT = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF33IVF33_PermutationType_SORT
    
    PermutationType_SHUFFLE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF33IVF33_PermutationType_SHUFFLE
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkReorderProjectionsImageFilterIVF33IVF33_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF33IVF33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkReorderProjectionsImageFilterIVF33IVF33_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF33IVF33_Clone(self)

    def GetModifiableOutputGeometry(self):
        r"""GetModifiableOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF33IVF33_GetModifiableOutputGeometry(self)

    def GetOutputGeometry(self, *args):
        r"""
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF33IVF33_GetOutputGeometry(self, *args)

    def SetInputGeometry(self, _arg):
        r"""
        SetInputGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF33IVF33_SetInputGeometry(self, _arg)

    def GetPermutation(self):
        r"""GetPermutation(self) -> rtkReorderProjectionsImageFilterIVF33IVF33::PermutationType"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF33IVF33_GetPermutation(self)

    def SetPermutation(self, _arg):
        r"""
        SetPermutation(self, _arg)

        Parameters
        ----------
        _arg: enum rtkReorderProjectionsImageFilterIVF33IVF33::PermutationType

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF33IVF33_SetPermutation(self, _arg)

    def SetInputSignal(self, signal):
        r"""
        SetInputSignal(self, signal)

        Parameters
        ----------
        signal: std::vector< double,std::allocator< double > > const

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF33IVF33_SetInputSignal(self, signal)

    def GetOutputSignal(self):
        r"""GetOutputSignal(self) -> vectorD"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF33IVF33_GetOutputSignal(self)
    __swig_destroy__ = _rtkReorderProjectionsImageFilterPython.delete_rtkReorderProjectionsImageFilterIVF33IVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkReorderProjectionsImageFilterIVF33IVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF33IVF33_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkReorderProjectionsImageFilterIVF33IVF33

        Create a new object of the class rtkReorderProjectionsImageFilterIVF33IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkReorderProjectionsImageFilterIVF33IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkReorderProjectionsImageFilterIVF33IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkReorderProjectionsImageFilterIVF33IVF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkReorderProjectionsImageFilterIVF33IVF33 in _rtkReorderProjectionsImageFilterPython:
_rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF33IVF33_swigregister(rtkReorderProjectionsImageFilterIVF33IVF33)

def rtkReorderProjectionsImageFilterIVF43IVF43_New():
    return rtkReorderProjectionsImageFilterIVF43IVF43.New()

class rtkReorderProjectionsImageFilterIVF43IVF43(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF43IVF43):
    r"""Proxy of C++ rtkReorderProjectionsImageFilterIVF43IVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    PermutationType_NONE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF43IVF43_PermutationType_NONE
    
    PermutationType_SORT = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF43IVF43_PermutationType_SORT
    
    PermutationType_SHUFFLE = _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF43IVF43_PermutationType_SHUFFLE
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkReorderProjectionsImageFilterIVF43IVF43_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF43IVF43___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkReorderProjectionsImageFilterIVF43IVF43_Pointer"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF43IVF43_Clone(self)

    def GetModifiableOutputGeometry(self):
        r"""GetModifiableOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF43IVF43_GetModifiableOutputGeometry(self)

    def GetOutputGeometry(self, *args):
        r"""
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF43IVF43_GetOutputGeometry(self, *args)

    def SetInputGeometry(self, _arg):
        r"""
        SetInputGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF43IVF43_SetInputGeometry(self, _arg)

    def GetPermutation(self):
        r"""GetPermutation(self) -> rtkReorderProjectionsImageFilterIVF43IVF43::PermutationType"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF43IVF43_GetPermutation(self)

    def SetPermutation(self, _arg):
        r"""
        SetPermutation(self, _arg)

        Parameters
        ----------
        _arg: enum rtkReorderProjectionsImageFilterIVF43IVF43::PermutationType

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF43IVF43_SetPermutation(self, _arg)

    def SetInputSignal(self, signal):
        r"""
        SetInputSignal(self, signal)

        Parameters
        ----------
        signal: std::vector< double,std::allocator< double > > const

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF43IVF43_SetInputSignal(self, signal)

    def GetOutputSignal(self):
        r"""GetOutputSignal(self) -> vectorD"""
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF43IVF43_GetOutputSignal(self)
    __swig_destroy__ = _rtkReorderProjectionsImageFilterPython.delete_rtkReorderProjectionsImageFilterIVF43IVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkReorderProjectionsImageFilterIVF43IVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF43IVF43_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkReorderProjectionsImageFilterIVF43IVF43

        Create a new object of the class rtkReorderProjectionsImageFilterIVF43IVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkReorderProjectionsImageFilterIVF43IVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkReorderProjectionsImageFilterIVF43IVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkReorderProjectionsImageFilterIVF43IVF43.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkReorderProjectionsImageFilterIVF43IVF43 in _rtkReorderProjectionsImageFilterPython:
_rtkReorderProjectionsImageFilterPython.rtkReorderProjectionsImageFilterIVF43IVF43_swigregister(rtkReorderProjectionsImageFilterIVF43IVF43)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def reorder_projections_image_filter(*args: itkt.ImageLike,  input_geometry=..., permutation=..., input_signal: Sequence[float]=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ReorderProjectionsImageFilter"""
    import itk

    kwarg_typehints = { 'input_geometry':input_geometry,'permutation':permutation,'input_signal':input_signal }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ReorderProjectionsImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def reorder_projections_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.ReorderProjectionsImageFilter
    reorder_projections_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    reorder_projections_image_filter.__doc__ = filter_object.__doc__



