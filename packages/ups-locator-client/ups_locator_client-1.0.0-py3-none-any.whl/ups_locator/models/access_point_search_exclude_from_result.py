# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .exclude_from_result_postal_code_list import ExcludeFromResultPostalCodeList


@JsonMap(
    {
        "business_classification_code": "BusinessClassificationCode",
        "business_name": "BusinessName",
        "radius": "Radius",
        "postal_code_list": "PostalCodeList",
    }
)
class AccessPointSearchExcludeFromResult(BaseModel):
    """This contains elements to exclude from UPS Access Point address or geocode search.

    :param business_classification_code: This contains the business classification code to exclude from UPS Access Point Search by address or geocode. Multiple codes can are possible in separate elements. Please refer to Appendix D for detailed business codes., defaults to None
    :type business_classification_code: List[str], optional
    :param business_name: This contains the business name to exclude from UPS Access Point Search by address or geocode. Partial names are accepted., defaults to None
    :type business_name: str, optional
    :param radius: Public Access points within Radius (in specified Unit of Measure) of any included private access points will be excluded from the results. Valid only if at least one IncludeCriteria/MerchantAccountNumber is provided., defaults to None
    :type radius: str, optional
    :param postal_code_list: Container to hold a list of postal codes to exclude from the access point address or geocode search., defaults to None
    :type postal_code_list: ExcludeFromResultPostalCodeList, optional
    """

    def __init__(
        self,
        business_classification_code: List[str] = None,
        business_name: str = None,
        radius: str = None,
        postal_code_list: ExcludeFromResultPostalCodeList = None,
    ):
        if business_classification_code is not None:
            self.business_classification_code = business_classification_code
        if business_name is not None:
            self.business_name = business_name
        if radius is not None:
            self.radius = radius
        if postal_code_list is not None:
            self.postal_code_list = self._define_object(
                postal_code_list, ExcludeFromResultPostalCodeList
            )
