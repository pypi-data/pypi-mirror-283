# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .response_transaction_reference import ResponseTransactionReference
from .response_error import ResponseError


@JsonMap(
    {
        "transaction_reference": "TransactionReference",
        "response_status_code": "ResponseStatusCode",
        "response_status_description": "ResponseStatusDescription",
        "error": "Error",
    }
)
class LocatorResponseResponse(BaseModel):
    """Container for Response.

    :param transaction_reference: Container for customer provided data and the XPCI Version., defaults to None
    :type transaction_reference: ResponseTransactionReference, optional
    :param response_status_code: Identifies the success or failure of the interchange.  1-Success 0-Failure
    :type response_status_code: str
    :param response_status_description: Describes the Response Status Code., defaults to None
    :type response_status_description: str, optional
    :param error: If an error is encountered during the interchange, the Response contains an error. If the error is present, then the ErrorSeverity and ErrorCode are required., defaults to None
    :type error: ResponseError, optional
    """

    def __init__(
        self,
        response_status_code: str,
        transaction_reference: ResponseTransactionReference = None,
        response_status_description: str = None,
        error: ResponseError = None,
    ):
        if transaction_reference is not None:
            self.transaction_reference = self._define_object(
                transaction_reference, ResponseTransactionReference
            )
        self.response_status_code = response_status_code
        if response_status_description is not None:
            self.response_status_description = response_status_description
        if error is not None:
            self.error = self._define_object(error, ResponseError)
