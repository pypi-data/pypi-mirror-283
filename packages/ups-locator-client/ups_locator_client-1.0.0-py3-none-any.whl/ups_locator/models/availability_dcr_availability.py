# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .dcr_availability_unavailable_reason import DcrAvailabilityUnavailableReason


@JsonMap(
    {
        "available_indicator": "AvailableIndicator",
        "unavailable_reason": "UnavailableReason",
    }
)
class AvailabilityDcrAvailability(BaseModel):
    """Holds status of DCR/DCO availability.

    :param available_indicator: Presence or absence indicator. Presence means the location is available for DCR/DCO., defaults to None
    :type available_indicator: str, optional
    :param unavailable_reason: Container to hold shipping unavailable reason., defaults to None
    :type unavailable_reason: DcrAvailabilityUnavailableReason, optional
    """

    def __init__(
        self,
        available_indicator: str = None,
        unavailable_reason: DcrAvailabilityUnavailableReason = None,
    ):
        if available_indicator is not None:
            self.available_indicator = available_indicator
        if unavailable_reason is not None:
            self.unavailable_reason = self._define_object(
                unavailable_reason, DcrAvailabilityUnavailableReason
            )
