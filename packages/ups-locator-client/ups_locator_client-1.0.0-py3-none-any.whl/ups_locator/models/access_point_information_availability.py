# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .availability_shipping_availability import AvailabilityShippingAvailability
from .availability_dcr_availability import AvailabilityDcrAvailability


@JsonMap(
    {
        "shipping_availability": "ShippingAvailability",
        "dcr_availability": "DCRAvailability",
    }
)
class AccessPointInformationAvailability(BaseModel):
    """Container to hold the status of shipping or DRC/DCO availability of a UPS Access Point.

    :param shipping_availability: Holds status of shipping availability., defaults to None
    :type shipping_availability: AvailabilityShippingAvailability, optional
    :param dcr_availability: Holds status of DCR/DCO availability., defaults to None
    :type dcr_availability: AvailabilityDcrAvailability, optional
    """

    def __init__(
        self,
        shipping_availability: AvailabilityShippingAvailability = None,
        dcr_availability: AvailabilityDcrAvailability = None,
    ):
        if shipping_availability is not None:
            self.shipping_availability = self._define_object(
                shipping_availability, AvailabilityShippingAvailability
            )
        if dcr_availability is not None:
            self.dcr_availability = self._define_object(
                dcr_availability, AvailabilityDcrAvailability
            )
