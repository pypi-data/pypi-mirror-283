# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .origin_address_geocode import OriginAddressGeocode
from .origin_address_address_key_format import OriginAddressAddressKeyFormat


@JsonMap(
    {
        "geocode": "Geocode",
        "address_key_format": "AddressKeyFormat",
        "maximum_list_size": "MaximumListSize",
    }
)
class LocatorRequestOriginAddress(BaseModel):
    """Container for origin address information.

    :param geocode: Geocode is the latitude and longitude of the origin address., defaults to None
    :type geocode: OriginAddressGeocode, optional
    :param address_key_format: Contains all of the basic information about the origin such as: Address Lines, City, State/Province, Postal Code and Country or Territory Code.  The element CountryCode is required.
    :type address_key_format: OriginAddressAddressKeyFormat
    :param maximum_list_size: If present, indicates the maximum number of locations the client wishes to receive in an address candidate response where the provided origin information is insufficient to accurately establish location.  Valid values: 1-50, default 10, defaults to None
    :type maximum_list_size: str, optional
    """

    def __init__(
        self,
        address_key_format: OriginAddressAddressKeyFormat,
        geocode: OriginAddressGeocode = None,
        maximum_list_size: str = None,
    ):
        if geocode is not None:
            self.geocode = self._define_object(geocode, OriginAddressGeocode)
        self.address_key_format = self._define_object(
            address_key_format, OriginAddressAddressKeyFormat
        )
        if maximum_list_size is not None:
            self.maximum_list_size = maximum_list_size
