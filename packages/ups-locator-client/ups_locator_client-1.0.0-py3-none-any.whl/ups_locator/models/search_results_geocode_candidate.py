# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .base import BaseModel
from .geocode_candidate_address_key_format import GeocodeCandidateAddressKeyFormat
from .geocode_candidate_geocode import GeocodeCandidateGeocode


@JsonMap(
    {
        "address_key_format": "AddressKeyFormat",
        "geocode": "Geocode",
        "landmark_name": "LandmarkName",
    }
)
class SearchResultsGeocodeCandidate(BaseModel):
    """SearchResultsGeocodeCandidate

    :param address_key_format: Contains all of the basic information about candidate address.
    :type address_key_format: GeocodeCandidateAddressKeyFormat
    :param geocode: Geocode is the latitude and longitude of the origin candidate.
    :type geocode: GeocodeCandidateGeocode
    :param landmark_name: If a Landmark code was provided in the request, a candidate list of Landmark Names will be returned along with the corresponding address and Geocode., defaults to None
    :type landmark_name: str, optional
    """

    def __init__(
        self,
        address_key_format: GeocodeCandidateAddressKeyFormat,
        geocode: GeocodeCandidateGeocode,
        landmark_name: str = None,
    ):
        self.address_key_format = self._define_object(
            address_key_format, GeocodeCandidateAddressKeyFormat
        )
        self.geocode = self._define_object(geocode, GeocodeCandidateGeocode)
        if landmark_name is not None:
            self.landmark_name = landmark_name
