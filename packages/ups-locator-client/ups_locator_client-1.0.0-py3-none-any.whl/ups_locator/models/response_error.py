# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .error_error_location import ErrorErrorLocation


@JsonMap(
    {
        "error_severity": "ErrorSeverity",
        "error_code": "ErrorCode",
        "error_description": "ErrorDescription",
        "minimum_retry_seconds": "MinimumRetrySeconds",
        "error_location": "ErrorLocation",
        "error_digest": "ErrorDigest",
    }
)
class ResponseError(BaseModel):
    """If an error is encountered during the interchange, the Response contains an error. If the error is present, then the ErrorSeverity and ErrorCode are required.

    :param error_severity: Describes the severity of the error.  For additional information, refer to Locator Error Codes in the Appendix.
    :type error_severity: str
    :param error_code: A numeric value that describes the error. Each tool defines a range of error codes.  For additional information, refer to Locator Error Codes in the Appendix.
    :type error_code: str
    :param error_description: Describes the error code., defaults to None
    :type error_description: str, optional
    :param minimum_retry_seconds: Number of seconds to wait until retry.  This field is populated on special conditions of the Transient Error only, as defined by the service. A number between 1 and 86400 (24 hours), defaults to None
    :type minimum_retry_seconds: str, optional
    :param error_location: Identifies the element in error. **NOTE:** For versions >= v2, this element will always be returned as an array. For requests using version = v1, this element will be returned as an array if there is more than one object and a single object if there is only 1. , defaults to None
    :type error_location: List[ErrorErrorLocation], optional
    :param error_digest: The contents of the element in error. **NOTE:** For versions >= v2, this element will always be returned as an array. For requests using version = v1, this element will be returned as an array if there is more than one object and a single object if there is only 1. , defaults to None
    :type error_digest: List[str], optional
    """

    def __init__(
        self,
        error_severity: str,
        error_code: str,
        error_description: str = None,
        minimum_retry_seconds: str = None,
        error_location: List[ErrorErrorLocation] = None,
        error_digest: List[str] = None,
    ):
        self.error_severity = error_severity
        self.error_code = error_code
        if error_description is not None:
            self.error_description = error_description
        if minimum_retry_seconds is not None:
            self.minimum_retry_seconds = minimum_retry_seconds
        if error_location is not None:
            self.error_location = self._define_list(error_location, ErrorErrorLocation)
        if error_digest is not None:
            self.error_digest = error_digest
