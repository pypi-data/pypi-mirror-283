# This file was generated by liblab | https://liblab.com/

from .utils.json_map import JsonMap
from .base import BaseModel


@JsonMap(
    {
        "dcr_indicator": "DCRIndicator",
        "shipping_availability_indicator": "ShippingAvailabilityIndicator",
        "shipper_preparation_delay": "ShipperPreparationDelay",
        "click_and_collect_sort_with_distance": "ClickAndCollectSortWithDistance",
    }
)
class IncludeCriteriaSearchFilter(BaseModel):
    """Container to hold one or more search criteria for UPS Access Points that allow DCR, Shipping and ClickAndCollect access. Only applicable when the UPS access point candidate list is obtained in search by address or geocode search.

    :param dcr_indicator: DCR/DCO Availability indicator for UPS Access Point. Either this indicator is present or not present. Presence indicates a search for access points with DCR. Any data in the element is ignored., defaults to None
    :type dcr_indicator: str, optional
    :param shipping_availability_indicator: Shipping Availability indicator for UPS Access Point. Either this indicator is present or not present. Presence indicates a search of access points with shipping availability. Any data in it is ignored., defaults to None
    :type shipping_availability_indicator: str, optional
    :param shipper_preparation_delay: Value for the number of days to check for shipping availability from the current day. When this value is present, ShippingAvailabilityIndicator is implied implicitly., defaults to None
    :type shipper_preparation_delay: str, optional
    :param click_and_collect_sort_with_distance: This contains the distance (in given UnitOfMeasurement) wherin to sort the click and collect access point locations above other access point locations when a UPS Access Point candidate list is obtained in search by address or geocode search., defaults to None
    :type click_and_collect_sort_with_distance: str, optional
    """

    def __init__(
        self,
        dcr_indicator: str = None,
        shipping_availability_indicator: str = None,
        shipper_preparation_delay: str = None,
        click_and_collect_sort_with_distance: str = None,
    ):
        if dcr_indicator is not None:
            self.dcr_indicator = dcr_indicator
        if shipping_availability_indicator is not None:
            self.shipping_availability_indicator = shipping_availability_indicator
        if shipper_preparation_delay is not None:
            self.shipper_preparation_delay = shipper_preparation_delay
        if click_and_collect_sort_with_distance is not None:
            self.click_and_collect_sort_with_distance = (
                click_and_collect_sort_with_distance
            )
