# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.locator_response_wrapper import LocatorResponseWrapper
from ..models.locator_request_wrapper import LocatorRequestWrapper


class VersionService(BaseService):

    @cast_models
    def locator(
        self,
        request_body: LocatorRequestWrapper,
        version: str,
        req_option: str,
        locale: str = None,
        trans_id: str = None,
        transaction_src: str = None,
    ) -> LocatorResponseWrapper:
        """The Locator API allows you to find UPS locations - such as drop-off points, retail locations, and UPS access points (third-party retail locations that offer UPS package drop-off, or delivery services). The API provides capabilities to search by location, services offered, program types, and related criteria. You can also retrieve hours of operation, location details, and additional UPS services offered at specific locations.

        :param request_body: The request body.
        :type request_body: LocatorRequestWrapper
        :param version: Version of API

        Valid values:
        - v2
        :type version: str
        :param req_option: Indicates the type of request.
        Valid values:
        1-Locations (Drop Locations and Will call locations)
        8-All available Additional Services
        16-All available Program Types
        24-All available Additional Services and Program types
        32-All available Retail Locations
        40-All available Retail Locations and Additional Services
        48-All available Retail Locations and Program Types
        56-All available Retail Locations, Additional Services and Program Types
        64-Search for UPS Access Point Locations.
        :type req_option: str
        :param locale: Locale of request, defaults to None
        :type locale: str, optional
        :param trans_id: An identifier unique to the request. Length 32, defaults to None
        :type trans_id: str, optional
        :param transaction_src: An identifier of the client/source application that is making the request.Length 512, defaults to None
        :type transaction_src: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: successful operation
        :rtype: LocatorResponseWrapper
        """

        Validator(LocatorRequestWrapper).validate(request_body)
        Validator(str).validate(version)
        Validator(str).min_length(1).max_length(4).validate(req_option)
        Validator(str).is_optional().validate(locale)
        Validator(str).is_optional().validate(trans_id)
        Validator(str).is_optional().validate(transaction_src)

        serialized_request = (
            Serializer(
                f"{self.base_url}/locations/{{version}}/search/availabilities/{{reqOption}}",
                self.get_default_headers(),
            )
            .add_header("transId", trans_id)
            .add_header("transactionSrc", transaction_src)
            .add_path("version", version)
            .add_path("reqOption", req_option)
            .add_query("Locale", locale)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return LocatorResponseWrapper._unmap(response)
