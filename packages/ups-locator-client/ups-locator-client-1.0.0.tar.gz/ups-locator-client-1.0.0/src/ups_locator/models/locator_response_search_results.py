# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .search_results_geocode_candidate import SearchResultsGeocodeCandidate
from .search_results_drop_location import SearchResultsDropLocation
from .search_results_available_location_attributes import (
    SearchResultsAvailableLocationAttributes,
)


@JsonMap(
    {
        "geocode_candidate": "GeocodeCandidate",
        "disclaimer": "Disclaimer",
        "drop_location": "DropLocation",
        "available_location_attributes": "AvailableLocationAttributes",
        "active_available_access_point_indicator": "ActiveAvailableAccessPointIndicator",
    }
)
class LocatorResponseSearchResults(BaseModel):
    """Container for search results.

    :param geocode_candidate: If the origin address provided in the location request document does not have a match, a list of candidate addresses, geocodes and optionally a landmark will be returned. **NOTE:** For versions >= v2, this element will always be returned as an array. For requests using version = v1, this element will be returned as an array if there is more than one object and a single object if there is only 1. , defaults to None
    :type geocode_candidate: List[SearchResultsGeocodeCandidate], optional
    :param disclaimer: Disclaimer. In the event the user requested Ground and Air service types and the maximum UPS locations list size has not been met, the list of locations will continue with locations that provide either ground or air within the search radius.  The disclaimer will note this deviation from the requested search criteria. The disclaimer is also the location where the user will receive information regarding a one-time pickup option if the first location is greater than 20 miles from the origin., defaults to None
    :type disclaimer: str, optional
    :param drop_location: When a location request is submitted with a valid origin address, UPS locations will be returned. **NOTE:** For versions >= v2, this element will always be returned as an array. For requests using version = v1, this element will be returned as an array if there is more than one object and a single object if there is only 1. , defaults to None
    :type drop_location: List[SearchResultsDropLocation], optional
    :param available_location_attributes: This container contains the information about the currently existing Retail Locations or Additional Services or Program types. **NOTE:** For versions >= v2, this element will always be returned as an array. For requests using version = v1, this element will be returned as an array if there is more than one object and a single object if there is only 1. , defaults to None
    :type available_location_attributes: List[SearchResultsAvailableLocationAttributes], optional
    :param active_available_access_point_indicator: Indicates whether the country or territory has AccessPoints or not.  This tag is populated in the Response only if tag "ExistIndicator" was present in the Locator request., defaults to None
    :type active_available_access_point_indicator: str, optional
    """

    def __init__(
        self,
        geocode_candidate: List[SearchResultsGeocodeCandidate] = None,
        disclaimer: str = None,
        drop_location: List[SearchResultsDropLocation] = None,
        available_location_attributes: List[
            SearchResultsAvailableLocationAttributes
        ] = None,
        active_available_access_point_indicator: str = None,
    ):
        if geocode_candidate is not None:
            self.geocode_candidate = self._define_list(
                geocode_candidate, SearchResultsGeocodeCandidate
            )
        if disclaimer is not None:
            self.disclaimer = disclaimer
        if drop_location is not None:
            self.drop_location = self._define_list(
                drop_location, SearchResultsDropLocation
            )
        if available_location_attributes is not None:
            self.available_location_attributes = self._define_list(
                available_location_attributes, SearchResultsAvailableLocationAttributes
            )
        if active_available_access_point_indicator is not None:
            self.active_available_access_point_indicator = (
                active_available_access_point_indicator
            )
