# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .search_option_option_type import SearchOptionOptionType
from .search_option_option_code import SearchOptionOptionCode
from .search_option_relation import SearchOptionRelation


@JsonMap(
    {"option_type": "OptionType", "option_code": "OptionCode", "relation": "Relation"}
)
class LocationSearchCriteriaSearchOption(BaseModel):
    """SearchOption contains the information that forms the basis of the location search, It contains the criteria for search by Locations, Retail Locations, Additional Services, or Program Types.

    There should be one container for each type of search the user may wish to do. The user can specify either search by Locations or Retail Locations, but not both.

    If this container is missing, the default search would be for The UPS Store, UPS Center, UPS Drop Box, and Authorized Shipping Outlet location types.


    :param option_type: OptionType is a container that indicates the type of search for locations. There are 5 types of search. They are search by: Location, Retail Location, Additional Services, Program Type, and a Service Level Option.  If search criteria by Location or Retail Location is not provided the default search of The UPS Store, UPS Center, UPS Drop Box, and Authorized Shipping Outlet location types will be performed.
    :type option_type: SearchOptionOptionType
    :param option_code: option_code
    :type option_code: List[SearchOptionOptionCode]
    :param relation: The relation container will contain the relation parameter (And/Or) that has to be used among multiple option codes in the location search.  This is only applicable to option type Additional Services and Program Types. If this container is not present for Additional Services and Program Types, the default relation of And is used., defaults to None
    :type relation: SearchOptionRelation, optional
    """

    def __init__(
        self,
        option_type: SearchOptionOptionType,
        option_code: List[SearchOptionOptionCode],
        relation: SearchOptionRelation = None,
    ):
        self.option_type = self._define_object(option_type, SearchOptionOptionType)
        self.option_code = self._define_list(option_code, SearchOptionOptionCode)
        if relation is not None:
            self.relation = self._define_object(relation, SearchOptionRelation)
