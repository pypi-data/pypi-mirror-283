# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .article import Article


@JsonMap({})
class Meta(BaseModel):
    """Meta

    :param hits: hits, defaults to None
    :type hits: int, optional
    :param offset: offset, defaults to None
    :type offset: int, optional
    :param time: time, defaults to None
    :type time: int, optional
    """

    def __init__(self, hits: int = None, offset: int = None, time: int = None):
        if hits is not None:
            self.hits = hits
        if offset is not None:
            self.offset = offset
        if time is not None:
            self.time = time


@JsonMap({})
class Response(BaseModel):
    """Response

    :param docs: docs, defaults to None
    :type docs: List[Article], optional
    :param meta: meta, defaults to None
    :type meta: Meta, optional
    """

    def __init__(self, docs: List[Article] = None, meta: Meta = None):
        if docs is not None:
            self.docs = self._define_list(docs, Article)
        if meta is not None:
            self.meta = self._define_object(meta, Meta)


@JsonMap({})
class GetArticlesearchJsonOkResponse(BaseModel):
    """GetArticlesearchJsonOkResponse

    :param status: status, defaults to None
    :type status: str, optional
    :param copyright: copyright, defaults to None
    :type copyright: str, optional
    :param response: response, defaults to None
    :type response: Response, optional
    """

    def __init__(
        self, status: str = None, copyright: str = None, response: Response = None
    ):
        if status is not None:
            self.status = status
        if copyright is not None:
            self.copyright = copyright
        if response is not None:
            self.response = self._define_object(response, Response)
