# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.sort import Sort
from ..models.get_articlesearch_json_ok_response import GetArticlesearchJsonOkResponse
from ..models.facet_filter import FacetFilter
from ..models.facet_fields import FacetFields
from ..models.facet import Facet


class SearchService(BaseService):

    @cast_models
    def get_articlesearch_json(
        self,
        begin_date: str = None,
        end_date: str = None,
        facet: Facet = None,
        facet_fields: FacetFields = None,
        facet_filter: FacetFilter = None,
        fl: str = None,
        fq: str = None,
        page: int = None,
        q: str = None,
        sort: Sort = None,
    ) -> GetArticlesearchJsonOkResponse:
        """Search for NYT articles by keywords, filters and facets.

        :param begin_date: Begin date (e.g. 20120101), defaults to None
        :type begin_date: str, optional
        :param end_date: End date (e.g. 20121231), defaults to None
        :type end_date: str, optional
        :param facet: Whether to show facet counts, defaults to None
        :type facet: Facet, optional
        :param facet_fields: Facets, defaults to None
        :type facet_fields: FacetFields, optional
        :param facet_filter: Have facet counts use filters, defaults to None
        :type facet_filter: FacetFilter, optional
        :param fl: Field list, defaults to None
        :type fl: str, optional
        :param fq: Filter query, defaults to None
        :type fq: str, optional
        :param page: Page number (0, 1, ...), defaults to None
        :type page: int, optional
        :param q: Query, defaults to None
        :type q: str, optional
        :param sort: Sort order, defaults to None
        :type sort: Sort, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: An array of articles.
        :rtype: GetArticlesearchJsonOkResponse
        """

        Validator(str).is_optional().pattern("^\d{8}$").validate(begin_date)
        Validator(str).is_optional().pattern("^\d{8}$").validate(end_date)
        Validator(Facet).is_optional().validate(facet)
        Validator(FacetFields).is_optional().validate(facet_fields)
        Validator(FacetFilter).is_optional().validate(facet_filter)
        Validator(str).is_optional().validate(fl)
        Validator(str).is_optional().validate(fq)
        Validator(int).is_optional().min(0).max(100).validate(page)
        Validator(str).is_optional().validate(q)
        Validator(Sort).is_optional().validate(sort)

        serialized_request = (
            Serializer(
                f"{self.base_url}/articlesearch.json", self.get_default_headers()
            )
            .add_query("begin_date", begin_date)
            .add_query("end_date", end_date)
            .add_query("facet", facet)
            .add_query("facet_fields", facet_fields)
            .add_query("facet_filter", facet_filter)
            .add_query("fl", fl)
            .add_query("fq", fq)
            .add_query("page", page)
            .add_query("q", q)
            .add_query("sort", sort)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return GetArticlesearchJsonOkResponse._unmap(response)
