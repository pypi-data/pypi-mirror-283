# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/Dev_Notes/51_nanogpt01.ipynb.

# %% auto 0
__all__ = ['model', 'GPTConfig', 'GPT', 'Block', 'MLP', 'CausalSelfAttention']

# %% ../nbs/Dev_Notes/51_nanogpt01.ipynb 108
import math
from dataclasses import dataclass
import torch
import torch.nn as nn
from torch.nn import functional as F

# %% ../nbs/Dev_Notes/51_nanogpt01.ipynb 110
@dataclass
class GPTConfig:
    """ configurations of GPT model """
    block_size: int = 1024 # max sequence length
    vocab_size: int = 50257 # number of tokens: 50,000 BPE merges + 256 bytes tokens + 1 <|endoftext|> token
    n_layer: int = 12 # number of layers
    n_head: int = 12 # number of heads
    n_embd: int = 768 # embedding dimension

# %% ../nbs/Dev_Notes/51_nanogpt01.ipynb 114
class GPT(nn.Module):
    """  the GPT language model, with block_size max sequence length, vocab_size tokens, n_layer layers, n_head heads, n_embd embedding dimension """
    def __init__(self, config):
        super().__init__()
        self.config = config

        self.transformer = nn.ModuleDict(dict(
            # token embedding and positional embedding
            wte = nn.Embedding(config.vocab_size, config.n_embd),
            wpe = nn.Embedding(config.block_size, config.n_embd),
            # transformer: n_layer layers, each has n_head heads and n_embd embedding dimension 
            h = nn.ModuleList([Block(config) for _ in range(config.n_layer)]),
            # layernorm after the transformer blocks, added by the GPT-2 authors
            ln_f = nn.LayerNorm(config.n_embd),
        ))
        # last linear layer
        self.lm_head = nn.Linear(config.n_embd, config.vocab_size, bias=False)

    # temporarily added the forward method here
    def forward(self, x):
        pass

# %% ../nbs/Dev_Notes/51_nanogpt01.ipynb 118
class Block(nn.Module):
    """ Transformer Block """
    def __init__(self, config):
        super().__init__()
        self.ln_1 = nn.LayerNorm(config.n_embd)
        self.attn = CausalSelfAttention(config)
        self.ln_2 = nn.LayerNorm(config.n_embd)
        self.mlp = MLP(config)

    def forward(self, x):
        # skip connection around attention and feed forward
        # different from the original transformer, layer normalization is applied inside/before the residual connections
        # since clean residual pathways are desirable from optimization perspective
        x = x + self.attn(self.ln_1(x)) # reduced operation
        x = x + self.mlp(self.ln_2(x))  # mapped operation 
        return x

# %% ../nbs/Dev_Notes/51_nanogpt01.ipynb 122
class MLP(nn.Module):
    """ Multi-Layer Perceptron """
    def __init__(self, config):
        super().__init__()
        self.c_fc    = nn.Linear(config.n_embd, 4 * config.n_embd)
        self.gelu    = nn.GELU(approximate='tanh') # historic reason for the tanh-approximation
        self.c_proj  = nn.Linear(4 * config.n_embd, config.n_embd)

    def forward(self, x):
        # two linear transformations with a GELU activation in between
        x = self.c_fc(x)
        x = self.gelu(x)
        x = self.c_proj(x)
        return x

# %% ../nbs/Dev_Notes/51_nanogpt01.ipynb 126
class CausalSelfAttention(nn.Module):
    """ Causal Multi-Head Self-Attention Module """
    def __init__(self, config):
        super().__init__()
        assert config.n_embd % config.n_head == 0
        # key, query, value projections for all heads, but in a batch
        self.c_attn = nn.Linear(config.n_embd, 3 * config.n_embd)
        # output projection
        self.c_proj = nn.Linear(config.n_embd, config.n_embd)
        # regularization
        self.n_head = config.n_head
        self.n_embd = config.n_embd
        # not really a 'bias', more of a mask, but following the OpenAI/HF naming though
        self.register_buffer("bias", torch.tril(torch.ones(config.block_size, config.block_size))
                                     .view(1, 1, config.block_size, config.block_size))

    def forward(self, x):
        B, T, C = x.size() # batch size, sequence length, embedding dimensionality (n_embd)
        # calculate query, key, values for all heads in batch and move head forward to be the batch dim
        # nh is "number of heads", hs is "head size", and C (number of channels) = nh * hs
        # e.g. in GPT-2 (124M), n_head=12, hs=64, so nh*hs=C=768 channels in the Transformer
        qkv = self.c_attn(x)
        q, k, v = qkv.split(self.n_embd, dim=2)
        k = k.view(B, T, self.n_head, C // self.n_head).transpose(1, 2) # (B, nh, T, hs)
        q = q.view(B, T, self.n_head, C // self.n_head).transpose(1, 2) # (B, nh, T, hs)
        v = v.view(B, T, self.n_head, C // self.n_head).transpose(1, 2) # (B, nh, T, hs)
        # attention (materializes the large (T,T) matrix for all the queries and keys)
        att = (q @ k.transpose(-2, -1)) * (1.0 / math.sqrt(k.size(-1)))
        # auto-regressive mask (upper triangular) - make sure the attention to only the left in the input sequence i.e. past never to the future
        att = att.masked_fill(self.bias[:,:,:T,:T] == 0, float('-inf'))
        # normalize the attentions
        att = F.softmax(att, dim=-1)
        # matrix multiplication i.e. weighted sum of the values
        y = att @ v # (B, nh, T, T) x (B, nh, T, hs) -> (B, nh, T, hs)
        # this actually performs concatination of all heads
        y = y.transpose(1, 2).contiguous().view(B, T, C) # re-assemble all head outputs side by side
        # output projection
        y = self.c_proj(y)
        return y

# %% ../nbs/Dev_Notes/51_nanogpt01.ipynb 129
model = GPT(GPTConfig())
print("Successfully load the GPT-2-124M model!!!")
