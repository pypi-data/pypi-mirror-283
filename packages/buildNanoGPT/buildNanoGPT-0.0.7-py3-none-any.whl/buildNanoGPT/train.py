# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/nanoGPT_P2_PyPI/03_train.ipynb.

# %% auto 0
__all__ = ['ddp', 'device_type', 'total_batch_size', 'B', 'T', 'grad_accum_steps', 'train_loader', 'val_loader', 'model',
           'use_compile', 'raw_model', 'enc', 'log_dir', 'log_file', 'max_lr', 'min_lr', 'warmup_steps', 'max_steps',
           'val_check_steps', 'checkpoint_steps', 'optimizer', 'losses', 'norms', 'lrs', 'get_lr', 'read_log',
           'plot_log']

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 8
import math
import torch
from torch.nn import functional as F
import numpy as np
import tiktoken
import matplotlib.pyplot as plt
import time
import os

# import from buildNanoGPT
from .data import render_example, iterate_examples, get_most_likely_row
from .model import GPT, GPTConfig, DataLoaderLite

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 10
#|eval: false
torch.manual_seed(1337)
if torch.cuda.is_available():
    torch.cuda.manual_seed(1337)

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 13
#|eval: false
# run the training loop
from torch.distributed import init_process_group, destroy_process_group
from torch.nn.parallel import DistributedDataParallel as DDP
import torch.distributed as dist

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 14
#|eval: false
# simple launch:
# python train_gpt2.py
# DDP launch for e.g. 8 GPUs:
# torchrun --standalone --nproc_per_node=8 train_gpt2.py

# set up DDP (distributed data parallel).
# torchrun command sets the env variables RANK, LOCAL_RANK, and WORLD_SIZE
ddp = int(os.environ.get('RANK', -1)) != -1 # is this a ddp run?
if ddp:
    # use of DDP atm demands CUDA, we set the device appropriately according to rank
    assert torch.cuda.is_available(), "for now i think we need CUDA for DDP"
    init_process_group(backend='nccl')
    ddp_rank = int(os.environ['RANK'])
    ddp_local_rank = int(os.environ['LOCAL_RANK'])
    ddp_world_size = int(os.environ['WORLD_SIZE'])
    device = f'cuda:{ddp_local_rank}'
    torch.cuda.set_device(device)
    master_process = ddp_rank == 0 # this process will do logging, checkpointing etc.
else:
    # vanilla, non-DDP run
    ddp_rank = 0
    ddp_local_rank = 0
    ddp_world_size = 1
    master_process = True
    # attempt to autodetect device
    device = "cpu"
    if torch.cuda.is_available():
        device = "cuda"
    elif hasattr(torch.backends, "mps") and torch.backends.mps.is_available():
        device = "mps"
    print(f"using device: {device}")

# added after video, pytorch can be serious about it's device vs. device_type distinction
device_type = "cuda" if device.startswith("cuda") else "cpu"

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 16
#|eval: false
# initialize the training data loader
# train_loader = DataLoaderLite(B=16, T=512)
total_batch_size = 524288 # 2**19, ~0.5M, in number of tokens
B = 16 # micro batch size
T = 1024 # sequence length

# assert total_batch_size % (B * T) == 0, "make sure total_batch_size is divisible by B * T"
# grad_accum_steps = total_batch_size // (B * T)
# print(f"total desired batch size: {total_batch_size}")
# print(f"=> calculated gradient accumulation steps: {grad_accum_steps}")

assert total_batch_size % (B * T * ddp_world_size) == 0, "make sure total_batch_size is divisible by B * T * ddp_world_size"
grad_accum_steps = total_batch_size // (B * T * ddp_world_size)
if master_process:
    print(f"total desired batch size: {total_batch_size}")
    print(f"=> calculated gradient accumulation steps: {grad_accum_steps}")


# train_loader = DataLoaderLite(B=B, T=T)

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 17
#|eval: false
train_loader = DataLoaderLite(B=B, T=T, master_process=master_process, process_rank=ddp_rank, num_processes=ddp_world_size, split='train')
val_loader = DataLoaderLite(B=B, T=T, master_process=master_process, process_rank=ddp_rank, num_processes=ddp_world_size, split="val")

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 19
#|eval: false
# the default precision is 'float32' for training
# use tf32 precision for training, that will accelerate training
torch.set_float32_matmul_precision('high')
# change vocab size from 50257 to 50304 (has a pump at 31th step), try 50264%8==0, used 50264 to avoid the bump
model = GPT(master_process=master_process, config=GPTConfig(vocab_size=50304))
# model = GPT.from_pretrained("gpt2") # or init from OpenAI GPT-2
# model.eval() # commented out since we are training
model.to(device)
# adding torch.compile. It costs compilation time but the training is faster
use_compile = False # torch.compile interferes with HellaSwag eval and Generation. TODO fix
if use_compile:
    model = torch.compile(model)

if ddp:
    model = DDP(model, device_ids=[ddp_local_rank])
raw_model = model.module if ddp else model # always contains the "raw" unwrapped model

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 22
def get_lr(it, max_lr, min_lr, warmup_steps, max_steps):
    """Cosine learning rate schedule with warmup"""
    # 1) linear warmup for warmup_iters steps
    if it < warmup_steps:
        return max_lr * (it+1) / warmup_steps
    # 2) if it > lr_decay_iters, return min learning rate
    if it > max_steps:
        return min_lr
    # 3) in between, use cosine decay down to min learning rate
    decay_ratio = (it - warmup_steps) / (max_steps - warmup_steps)
    assert 0 <= decay_ratio <= 1
    coeff = 0.5 * (1.0 + math.cos(math.pi * decay_ratio)) # coeff starts at 1 and goes to 0
    return min_lr + coeff * (max_lr - min_lr)

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 28
#|eval: false
# prefix tokens
enc = tiktoken.get_encoding('gpt2')

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 29
#|eval: false
# create the log directory we will write checkpoints to and log to
log_dir = "log"
os.makedirs(log_dir, exist_ok=True)
log_file = os.path.join(log_dir, f"log.txt")
with open(log_file, "w") as f: # open for writing to clear the file
    pass

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 30
max_lr = 6e-4
min_lr = max_lr * 0.1
warmup_steps = 100
max_steps = 200
val_check_steps = 250
checkpoint_steps = 5000

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 31
#|eval: false
# create the optimizer object; added GPT-3's params for AdamW
# optimizer = torch.optim.AdamW(model.parameters(), lr=3e-4, betas=(0.9, 0.95), eps=1e-8)
# optimizer = model.configure_optimizers(weight_decay=0.1, learning_rate=6e-4, device=device)
optimizer = raw_model.configure_optimizers(weight_decay=0.1, learning_rate=6e-4, device_type=device_type)
losses, norms, lrs = [], [], []
for step in range(max_steps):
    t0 = time.time()
    last_step = (step == max_steps - 1)
    # once in a while evaluate our validation loss
    if step % val_check_steps == 0 or last_step:
        model.eval()
        val_loader.reset()
        with torch.no_grad():
            val_loss_accum = 0.0
            val_loss_steps = 20
            for _ in range(val_loss_steps):
                x, y = val_loader.next_batch()
                x, y = x.to(device), y.to(device)
                with torch.autocast(device_type=device_type, dtype=torch.bfloat16):
                    logits, loss = model(x, y)
                loss = loss / val_loss_steps
                val_loss_accum += loss.detach()
        if ddp:
            dist.all_reduce(val_loss_accum, op=dist.ReduceOp.AVG)
        if master_process:
            print(f"validation loss: {val_loss_accum.item():.4f}")
            with open(log_file, "a") as f:
                f.write(f"{step} val {val_loss_accum.item():.4f}\n")
            if step > 0 and (step % checkpoint_steps == 0 or last_step):
                # optionally write model checkpoints
                checkpoint_path = os.path.join(log_dir, f"model_{step:05d}.pt")
                checkpoint = {
                    'model': raw_model.state_dict(),
                    'config': raw_model.config,
                    'step': step,
                    'val_loss': val_loss_accum.item()
                }
                # you might also want to add optimizer.state_dict() and
                # rng seeds etc., if you wanted to more exactly resume training
                torch.save(checkpoint, checkpoint_path)

    # once in a while evaluate hellaswag
    if (step % val_check_steps == 0 or last_step) and (not use_compile):
        num_correct_norm = 0
        num_total = 0
        for i, example in enumerate(iterate_examples("val")):
            # only process examples where i % ddp_world_size == ddp_rank
            if i % ddp_world_size != ddp_rank:
                continue
            # render the example into tokens and labels
            _, tokens, mask, label = render_example(example)
            tokens = tokens.to(device)
            mask = mask.to(device)
            # get the logits
            with torch.no_grad():
                with torch.autocast(device_type=device_type, dtype=torch.bfloat16):
                    logits, loss = model(tokens)
                pred_norm = get_most_likely_row(tokens, mask, logits)
            num_total += 1
            num_correct_norm += int(pred_norm == label)
        # reduce the stats across all processes
        if ddp:
            num_total = torch.tensor(num_total, dtype=torch.long, device=device)
            num_correct_norm = torch.tensor(num_correct_norm, dtype=torch.long, device=device)
            dist.all_reduce(num_total, op=dist.ReduceOp.SUM)
            dist.all_reduce(num_correct_norm, op=dist.ReduceOp.SUM)
            num_total = num_total.item()
            num_correct_norm = num_correct_norm.item()
        acc_norm = num_correct_norm / num_total
        if master_process:
            print(f"HellaSwag accuracy: {num_correct_norm}/{num_total}={acc_norm:.4f}")
            with open(log_file, "a") as f:
                f.write(f"{step} hella {acc_norm:.4f}\n")

    # once in a while generate from the model (except step 0, which is noise)
    # disabled because torch.compile throws a scary error i can't solve rn
    # if you disable torch.compile, this code works fine
    if ((step > 0 and step % val_check_steps == 0) or last_step) and (not use_compile):
        model.eval()
        num_return_sequences = 4
        max_length = 32
        tokens = enc.encode("Hello, I'm a language model,")
        tokens = torch.tensor(tokens, dtype=torch.long)
        tokens = tokens.unsqueeze(0).repeat(num_return_sequences, 1)
        xgen = tokens.to(device)
        sample_rng = torch.Generator(device=device)
        sample_rng.manual_seed(42 + ddp_rank)
        while xgen.size(1) < max_length:
            # forward the model to get the logits
            with torch.no_grad():
                # logits, loss = model(xgen) # (B, T, vocab_size)
                with torch.autocast(device_type=device_type, dtype=torch.bfloat16):
                    logits, loss = model(xgen) # (B, T, vocab_size)
                # take the logits at the last position
                logits = logits[:, -1, :] # (B, vocab_size)
                # get the probabilities
                probs = F.softmax(logits, dim=-1)
                # do top-k sampling of 50 (huggingface pipeline default)
                # topk_probs here becomes (5, 50), topk_indices is (5, 50)
                topk_probs, topk_indices = torch.topk(probs, 50, dim=-1)
                # select a token from the top-k probabilities
                # note: multinomial does not demand the input to sum to 1
                ix = torch.multinomial(topk_probs, 1, generator=sample_rng) # (B, 1)
                # gather the corresponding indices
                xcol = torch.gather(topk_indices, -1, ix) # (B, 1)
                # append to the sequence
                xgen = torch.cat((xgen, xcol), dim=1)
        # print the generated text
        for i in range(num_return_sequences):
            tokens = xgen[i, :max_length].tolist()
            decoded = enc.decode(tokens)
            print(f"rank {ddp_rank} sample {i}: {decoded}")

    # training loop
    model.train()
    optimizer.zero_grad() # reset the gradients FOUND THE BUG - should zero grad here
    loss_accum = 0.0
    for micro_step in range(grad_accum_steps):
        x, y = train_loader.next_batch()
        x, y = x.to(device), y.to(device)
        # added after video, this field is also used by the forward pass.
        if ddp:
            model.require_backward_grad_sync = (micro_step == grad_accum_steps - 1)
        with torch.autocast(device_type=device_type, dtype=torch.bfloat16):
            logits, loss = model(x, y)
        # we have to scale the loss to account for gradient accumulation,
        # because the gradients just add on each successive backward().
        # addition of gradients corresponds to a SUM in the objective, but
        # instead of a SUM we want MEAN. Scale the loss here so it comes out right
        loss = loss / grad_accum_steps
        loss_accum += loss.detach()
        # if ddp:
        #     model.require_backward_grad_sync = (micro_step == grad_accum_steps - 1)
        loss.backward()
    if ddp:
        dist.all_reduce(loss_accum, op=dist.ReduceOp.AVG)
    losses.append(loss_accum.item())
    # added gradient clipping
    norm = torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)
    norms.append(norm.item())
    # determine and set the learning rate for this iteration
    lr = get_lr(step, max_lr, min_lr, warmup_steps, max_steps)
    lrs.append(lr)
    for param_group in optimizer.param_groups:
        param_group['lr'] = lr
    optimizer.step()
    if device_type == "cuda":
        torch.cuda.synchronize() # wait for the GPU to finish work
    t1 = time.time()
    dt = t1 - t0 # time difference in seconds
    tokens_processed = train_loader.B * train_loader.T * grad_accum_steps * ddp_world_size
    tokens_per_sec = tokens_processed / dt
    
    if master_process:
        print(f"step {step:5d} | loss: {loss_accum.item():.6f} | lr {lr:.4e} | norm: {norm.item():.4f} | dt: {dt*1000:.2f}ms | tok/sec: {tokens_per_sec:.2f}")
        with open(log_file, "a") as f:
            f.write(f"{step} train {loss_accum.item():.6f}\n")

if ddp:
    destroy_process_group()

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 33
def read_log(log_file="log/log.txt", sz="124M"):
    """read the log file"""

    # parse and visualize the logfile
    sz = "124M"

    loss_baseline = {"124M": 3.2924,}[sz]
    # HellaSwag for GPT-2
    hella2_baseline = {"124M": 0.294463, "350M": 0.375224, "774M": 0.431986, "1558M": 0.488946,}[sz]
    # HellaSwag for GPT-3
    hella3_baseline = {"124M": 0.337, "350M": 0.436, "774M": 0.510, "1558M": 0.547,}[sz]

    # load the log file
    with open(log_file, "r") as f:
        lines = f.readlines()
    
    # parse the individual lines, group by stream (train,val,hella)
    streams = {}
    for line in lines:
        step, stream, val = line.strip().split()
        if stream not in streams:
            streams[stream] = {}
        streams[stream][int(step)] = float(val)

    # convert each stream from {step: val} to (steps[], vals[])
    # so it's easier for plotting
    streams_xy = {}
    for k, v in streams.items():
        # get all (step, val) items, sort them
        xy = sorted(list(v.items()))
        # unpack the list of tuples to tuple of lists
        streams_xy[k] = list(zip(*xy))

    return streams_xy, loss_baseline, hella2_baseline, hella3_baseline

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 34
def plot_log(log_file="log/log.txt", sz="124M"):
    """plot the log file"""
    streams_xy, loss_baseline, hella2_baseline, hella3_baseline = read_log(log_file="log/log.txt", sz="124M")
    # create figure
    plt.figure(figsize=(16, 6))
    # Panel 1: losses: both train and val
    plt.subplot(121)
    xs, ys = streams_xy["train"] # training loss
    ys = np.array(ys)
    plt.plot(xs, ys, label=f'nanogpt ({sz}) train loss')
    print("Min Train Loss:", min(ys))
    xs, ys = streams_xy["val"] # validation loss
    plt.plot(xs, ys, label=f'nanogpt ({sz}) val loss')
    # horizontal line at GPT-2 baseline
    if loss_baseline is not None:
        plt.axhline(y=loss_baseline, color='r', linestyle='--', label=f"OpenAI GPT-2 ({sz}) checkpoint val loss")
    plt.xlabel("steps"); plt.ylabel("loss")
    plt.yscale('log'); plt.ylim(2.0, 12.0)
    plt.legend(); plt.title("Loss")
    print("Min Validation Loss:", min(ys))

    # Panel 2: HellaSwag eval
    plt.subplot(122)
    xs, ys = streams_xy["hella"] # HellaSwag eval
    ys = np.array(ys)
    plt.plot(xs, ys, label=f"nanogpt ({sz})")
    # horizontal line at GPT-2 baseline
    if hella2_baseline:
        plt.axhline(y=hella2_baseline, color='r', linestyle='--', label=f"OpenAI GPT-2 ({sz}) checkpoint")
    if hella3_baseline:
        plt.axhline(y=hella3_baseline, color='g', linestyle='--', label=f"OpenAI GPT-3 ({sz}) checkpoint")
    plt.xlabel("steps"); plt.ylabel("accuracy")
    plt.legend(); plt.title("HellaSwag eval")
    print("Max Hellaswag eval:", max(ys))
