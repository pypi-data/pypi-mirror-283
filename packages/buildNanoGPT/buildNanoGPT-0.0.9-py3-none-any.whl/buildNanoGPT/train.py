# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/nanoGPT_P2_PyPI/03_train.ipynb.

# %% auto 0
__all__ = ['ddp', 'device_type', 'total_batch_size', 'B', 'T', 'grad_accum_steps', 'train_loader', 'val_loader', 'model',
           'use_compile', 'raw_model', 'enc', 'max_lr', 'min_lr', 'warmup_steps', 'max_steps', 'val_check_steps',
           'checkpoint_steps', 'log_dir', 'log_file', 'optimizer', 'losses', 'norms', 'lrs', 'get_lr',
           'create_log_file', 'validate', 'hellaswag_eval']

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 6
import math
import torch
from torch.nn import functional as F
import numpy as np
import tiktoken
import matplotlib.pyplot as plt
import time
import os

# import from buildNanoGPT
from .data import render_example, iterate_examples, get_most_likely_row
from .model import GPT, GPTConfig, DataLoaderLite

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 8
#|eval: false
torch.manual_seed(1337)
if torch.cuda.is_available():
    torch.cuda.manual_seed(1337)

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 10
#|eval: false
# run the training loop
from torch.distributed import init_process_group, destroy_process_group
from torch.nn.parallel import DistributedDataParallel as DDP
import torch.distributed as dist

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 11
#|eval: false
# simple launch:
# python train_gpt2.py
# DDP launch for e.g. 8 GPUs:
# torchrun --standalone --nproc_per_node=8 train_gpt2.py

# set up DDP (distributed data parallel).
# torchrun command sets the env variables RANK, LOCAL_RANK, and WORLD_SIZE
ddp = int(os.environ.get('RANK', -1)) != -1 # is this a ddp run?
if ddp:
    # use of DDP atm demands CUDA, we set the device appropriately according to rank
    assert torch.cuda.is_available(), "for now i think we need CUDA for DDP"
    init_process_group(backend='nccl')
    ddp_rank = int(os.environ['RANK'])
    ddp_local_rank = int(os.environ['LOCAL_RANK'])
    ddp_world_size = int(os.environ['WORLD_SIZE'])
    device = f'cuda:{ddp_local_rank}'
    torch.cuda.set_device(device)
    master_process = ddp_rank == 0 # this process will do logging, checkpointing etc.
else:
    # vanilla, non-DDP run
    ddp_rank = 0
    ddp_local_rank = 0
    ddp_world_size = 1
    master_process = True
    # attempt to autodetect device
    device = "cpu"
    if torch.cuda.is_available():
        device = "cuda"
    elif hasattr(torch.backends, "mps") and torch.backends.mps.is_available():
        device = "mps"
    print(f"using device: {device}")

# added after video, pytorch can be serious about it's device vs. device_type distinction
device_type = "cuda" if device.startswith("cuda") else "cpu"

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 17
#|eval: false
total_batch_size = 524288 # 2**19, ~0.5M, in number of tokens for 8 GPUs - to revisit for 1GPU
B = 16 # micro batch size
T = 1024 # sequence length

assert total_batch_size % (B * T * ddp_world_size) == 0, "make sure total_batch_size is divisible by B * T * ddp_world_size"
grad_accum_steps = total_batch_size // (B * T * ddp_world_size)
if master_process:
    print(f"total desired batch size: {total_batch_size}")
    print(f"=> calculated gradient accumulation steps: {grad_accum_steps}")

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 18
#|eval: false
train_loader = DataLoaderLite(B=B, T=T, master_process=master_process, process_rank=ddp_rank, num_processes=ddp_world_size, split='train')
val_loader = DataLoaderLite(B=B, T=T, master_process=master_process, process_rank=ddp_rank, num_processes=ddp_world_size, split="val")

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 20
#|eval: false
# the default precision is 'float32' for training
# use tf32 precision for training, that will accelerate training
torch.set_float32_matmul_precision('high')
model = GPT(master_process=master_process, config=GPTConfig(vocab_size=50304))
model.to(device)
# adding torch.compile. It costs compilation time but the training is faster
use_compile = False # torch.compile interferes with HellaSwag eval and Generation. TODO fix
if use_compile:
    model = torch.compile(model)

if ddp:
    model = DDP(model, device_ids=[ddp_local_rank])
raw_model = model.module if ddp else model # always contains the "raw" unwrapped model

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 23
def get_lr(it, max_lr, min_lr, warmup_steps, max_steps):
    """Cosine learning rate schedule with warmup"""
    # 1) linear warmup for warmup_iters steps
    if it < warmup_steps:
        return max_lr * (it+1) / warmup_steps
    # 2) if it > lr_decay_iters, return min learning rate
    if it > max_steps:
        return min_lr
    # 3) in between, use cosine decay down to min learning rate
    decay_ratio = (it - warmup_steps) / (max_steps - warmup_steps)
    assert 0 <= decay_ratio <= 1
    coeff = 0.5 * (1.0 + math.cos(math.pi * decay_ratio)) # coeff starts at 1 and goes to 0
    return min_lr + coeff * (max_lr - min_lr)

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 25
#|eval: false
# encoding for GPT2
enc = tiktoken.get_encoding('gpt2')

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 26
def create_log_file(log_dir = "log", log_file="log.txt"):
    os.makedirs(log_dir, exist_ok=True)
    log_file = os.path.join(log_dir, log_file)
    with open(log_file, "w") as f: # open for writing to clear the file
        pass
    return log_dir, log_file

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 27
max_lr = 6e-4
min_lr = max_lr * 0.1
warmup_steps = 10
max_steps = 20
val_check_steps = 250
checkpoint_steps = 5000

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 29
def validate(model, val_loader, step, log_dir, log_file, last_step):
    """validation loss for the model, optionally write checkpoints"""
    model.eval()
    val_loader.reset()
    with torch.no_grad():
        val_loss_accum = 0.0
        val_loss_steps = 20
        for _ in range(val_loss_steps):
            x, y = val_loader.next_batch()
            x, y = x.to(device), y.to(device)
            with torch.autocast(device_type=device_type, dtype=torch.bfloat16):
                logits, loss = model(x, y)
            loss = loss / val_loss_steps
            val_loss_accum += loss.detach()
    if ddp:
        dist.all_reduce(val_loss_accum, op=dist.ReduceOp.AVG)
    if master_process:
        print(f"validation loss: {val_loss_accum.item():.4f}")
        with open(log_file, "a") as f:
            f.write(f"{step} val {val_loss_accum.item():.4f}\n")
        if step > 0 and (step % checkpoint_steps == 0 or last_step):
            # optionally write model checkpoints
            checkpoint_path = os.path.join(log_dir, f"model_{step:05d}.pt")
            checkpoint = {
                'model': model.state_dict(),
                'config': model.config,
                'step': step,
                'val_loss': val_loss_accum.item()
            }
            # you might also want to add optimizer.state_dict() and
            # rng seeds etc., if you wanted to more exactly resume training
            torch.save(checkpoint, checkpoint_path)

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 30
def hellaswag_eval(model, step, log_file, device, device_type, ddp_world_size, ddp_rank, ddp, master_process):
    """HellaSwag evaluation for the model. This is a separate evaluation from the validation loss."""
    num_correct_norm = 0
    num_total = 0
    model.eval()
    for i, example in enumerate(iterate_examples("val")):
        # only process examples where i % ddp_world_size == ddp_rank
        if i % ddp_world_size != ddp_rank:
            continue
        # render the example into tokens and labels
        _, tokens, mask, label = render_example(example)
        tokens = tokens.to(device)
        mask = mask.to(device)
        # get the logits
        with torch.no_grad():
            with torch.autocast(device_type=device_type, dtype=torch.bfloat16):
                logits, loss = model(tokens)
            pred_norm = get_most_likely_row(tokens, mask, logits)
        num_total += 1
        num_correct_norm += int(pred_norm == label)
    # reduce the stats across all processes
    if ddp:
        num_total = torch.tensor(num_total, dtype=torch.long, device=device)
        num_correct_norm = torch.tensor(num_correct_norm, dtype=torch.long, device=device)
        dist.all_reduce(num_total, op=dist.ReduceOp.SUM)
        dist.all_reduce(num_correct_norm, op=dist.ReduceOp.SUM)
        num_total = num_total.item()
        num_correct_norm = num_correct_norm.item()
    acc_norm = num_correct_norm / num_total
    if master_process:
        print(f"HellaSwag accuracy: {num_correct_norm}/{num_total}={acc_norm:.4f}")
        with open(log_file, "a") as f:
            f.write(f"{step} hella {acc_norm:.4f}\n")

# %% ../nbs/nanoGPT_P2_PyPI/03_train.ipynb 32
#|eval: false
log_dir, log_file = create_log_file(log_dir = "log", log_file="log.txt")
optimizer = raw_model.configure_optimizers(weight_decay=0.1, learning_rate=6e-4, device_type=device_type)
losses, norms, lrs = [], [], []
for step in range(max_steps):
    t0 = time.time()
    last_step = (step == max_steps - 1)
    # once in a while evaluate our validation loss
    if step % val_check_steps == 0 or last_step:
        validate(raw_model, val_loader, step, log_dir, log_file, last_step)

    # once in a while evaluate hellaswag
    if (step % val_check_steps == 0 or last_step) and (not use_compile):
        hellaswag_eval(raw_model, step, log_file, device, device_type, ddp_world_size, ddp_rank, ddp, master_process)

    # once in a while generate from the model (except step 0, which is noise)
    # disabled because torch.compile throws a scary error i can't solve rn
    # if you disable torch.compile, this code works fine
    if ((step > 0 and step % val_check_steps == 0) or last_step) and (not use_compile):
        generate_text(raw_model, enc, device, device_type, ddp_rank)

    # training loop
    raw_model.train()
    optimizer.zero_grad() # reset the gradients FOUND THE BUG - should zero grad here
    loss_accum = 0.0
    for micro_step in range(grad_accum_steps):
        x, y = train_loader.next_batch()
        x, y = x.to(device), y.to(device)
        # added after video, this field is also used by the forward pass.
        if ddp:
            raw_model.require_backward_grad_sync = (micro_step == grad_accum_steps - 1)
        with torch.autocast(device_type=device_type, dtype=torch.bfloat16):
            logits, loss = raw_model(x, y)
        # we have to scale the loss to account for gradient accumulation,
        # because the gradients just add on each successive backward().
        # addition of gradients corresponds to a SUM in the objective, but
        # instead of a SUM we want MEAN. Scale the loss here so it comes out right
        loss = loss / grad_accum_steps
        loss_accum += loss.detach()
        loss.backward()
    if ddp:
        dist.all_reduce(loss_accum, op=dist.ReduceOp.AVG)
    losses.append(loss_accum.item())
    # added gradient clipping
    norm = torch.nn.utils.clip_grad_norm_(raw_model.parameters(), 1.0)
    norms.append(norm.item())
    # determine and set the learning rate for this iteration
    lr = get_lr(step, max_lr, min_lr, warmup_steps, max_steps)
    lrs.append(lr)
    for param_group in optimizer.param_groups:
        param_group['lr'] = lr
    optimizer.step()
    if device_type == "cuda":
        torch.cuda.synchronize() # wait for the GPU to finish work
    t1 = time.time()
    dt = t1 - t0 # time difference in seconds
    tokens_processed = train_loader.B * train_loader.T * grad_accum_steps * ddp_world_size
    tokens_per_sec = tokens_processed / dt
    
    if master_process:
        print(f"step {step:5d} | loss: {loss_accum.item():.6f} | lr {lr:.4e} | norm: {norm.item():.4f} | dt: {dt*1000:.2f}ms | tok/sec: {tokens_per_sec:.2f}")
        with open(log_file, "a") as f:
            f.write(f"{step} train {loss_accum.item():.6f}\n")

if ddp:
    destroy_process_group()
