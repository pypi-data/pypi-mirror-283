# Generated by Django 3.2.17 on 2023-05-24 13:15

from django.db import migrations, models
import django.db.models.deletion
import news.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.URLField(blank=True, max_length=700, null=True, verbose_name='Адрес сайта')),
                ('search_key_words', models.BooleanField(default=False, verbose_name='Искать по ключевым словам')),
                ('search_add_key_words', models.BooleanField(default=False, help_text='*Если источник содержит новости различных сервисов', verbose_name='Искать по дополнительным ключевым словам')),
                ('for_parser', models.BooleanField(default=True, verbose_name='Источник для парсера')),
            ],
            options={
                'verbose_name': 'Источник',
                'verbose_name_plural': 'Источники',
            },
        ),
        migrations.CreateModel(
            name='BotUser',
            fields=[
                ('user_id', models.CharField(max_length=100, primary_key=True, serialize=False, unique=True, verbose_name='Уникальный ID или ник пользователя VK Teams')),
                ('receiving_time', models.CharField(blank=True, max_length=5, null=True, verbose_name='Время получения новостей')),
                ('is_superuser', models.BooleanField(default=False, help_text='Администратор может получать новости ежедневно', verbose_name='Права администратора')),
                ('weekday', models.CharField(choices=[('monday', 'Понедельник'), ('every', 'Каждый день')], default='monday', max_length=50)),
            ],
            options={
                'verbose_name': 'Пользователь бота',
                'verbose_name_plural': 'Пользователи бота',
            },
        ),
        migrations.CreateModel(
            name='KeyWord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Введите ключевое слово. Регистр не имеет значения. Пробелы и другие вспомогательные символы играют роль.', max_length=100, verbose_name='Ключевое слово')),
                ('kw_type', models.CharField(choices=[('key_word', 'Ключевое слово'), ('add_key_word', 'Дополнительное ключевое слово'), ('blacklist', 'Черный список'), ('blocklist', 'Блок-лист')], default='key_word', help_text='Если по ключевому слову не должен осуществляться поиск в источниках с широконаправленной тематикой новостей, выберите "Дополнительное". Если из новости должно быть исключено определенное слово, выберите "Черный список". Если должна быть исключена новость, состоящая только из выбранной фразы, выберите "Блок-лист"', max_length=50, verbose_name='Тип поиска')),
            ],
            options={
                'verbose_name': 'Ключевое слово',
                'verbose_name_plural': 'Ключевые слова и черный список',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pub_date', models.DateField(validators=[news.validators.validate_pub_date], verbose_name='Дата публикации')),
                ('title', models.CharField(blank=True, max_length=250, null=True, verbose_name='Заголовок')),
                ('summary', models.TextField(blank=True, null=True, verbose_name='Краткое описание')),
                ('text', models.TextField(blank=True, null=True, verbose_name='Текст новости')),
                ('raw_text', models.TextField(blank=True, null=True, verbose_name='Текст новости без тэгов')),
                ('image', models.ImageField(blank=True, null=True, upload_to='news/', verbose_name='Фотография')),
                ('url', models.URLField(max_length=700, verbose_name='Ссылка на новость')),
                ('is_moderated', models.BooleanField(default=False, verbose_name='Проверено модератором')),
                ('is_blacklisted', models.BooleanField(default=False, verbose_name='В черном списке')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Больше не показывать новость')),
            ],
            options={
                'verbose_name': 'Новость',
                'verbose_name_plural': 'Новости',
                'ordering': ['-pub_date'],
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Сервис',
                'verbose_name_plural': 'Сервисы',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Stream',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Название')),
                ('company', models.CharField(choices=[('mailru', 'Mail.ru'), ('rustore', 'Rustore')], max_length=15, verbose_name='Продукт')),
            ],
            options={
                'verbose_name': 'Стрим',
                'verbose_name_plural': 'Стримы',
                'ordering': ['id'],
            },
        ),
        migrations.AddConstraint(
            model_name='stream',
            constraint=models.UniqueConstraint(fields=('name', 'company'), name='unique stream'),
        ),
        migrations.AddField(
            model_name='service',
            name='key_words',
            field=models.ManyToManyField(blank=True, to='news.KeyWord', verbose_name='Ключевые слова'),
        ),
        migrations.AddField(
            model_name='service',
            name='stream',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to='news.stream', verbose_name='Стрим'),
        ),
        migrations.AddField(
            model_name='news',
            name='address',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='news', to='news.address', verbose_name='Источник'),
        ),
        migrations.AddField(
            model_name='news',
            name='stream',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='news.stream', verbose_name='Стрим'),
        ),
        migrations.AddConstraint(
            model_name='keyword',
            constraint=models.UniqueConstraint(fields=('name', 'kw_type'), name='unique keyword'),
        ),
        migrations.AddField(
            model_name='botuser',
            name='received_news',
            field=models.ManyToManyField(blank=True, to='news.News', verbose_name='Полученные пользователем новости'),
        ),
        migrations.AddField(
            model_name='botuser',
            name='streams',
            field=models.ManyToManyField(blank=True, to='news.Stream', verbose_name='Список подписанных стримов'),
        ),
        migrations.AddField(
            model_name='address',
            name='service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to='news.service', verbose_name='Сервис'),
        ),
        migrations.AddConstraint(
            model_name='service',
            constraint=models.UniqueConstraint(fields=('name', 'stream_id'), name='unique service'),
        ),
        migrations.AddConstraint(
            model_name='news',
            constraint=models.UniqueConstraint(fields=('title', 'address'), name='unique news item'),
        ),
        migrations.AddConstraint(
            model_name='address',
            constraint=models.UniqueConstraint(fields=('address', 'service'), name='unique address for service'),
        ),
    ]
