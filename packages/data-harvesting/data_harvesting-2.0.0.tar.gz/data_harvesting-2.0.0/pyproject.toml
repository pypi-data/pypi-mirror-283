# setuptools-based metadata
[project]
name = "data-harvesting"
version = "2.0.0"
description = "Set of tools to harvest, process and uplift (meta)data from metadata providers within the Helmholtz association to be included in the Helmholtz Knowledge Graph (Helmholtz-KG)."
readme = "README.md"
license = {text = "MIT"}
classifiers = [
        "Development Status :: 4 - Beta",
        "Intended Audience :: Information Technology",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Natural Language :: English",
        "Operating System :: POSIX :: Linux",
        "Operating System :: MacOS :: MacOS X",
        "Programming Language :: Python",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Programming Language :: Python :: 3.12",
        "Topic :: Database",
        "Topic :: Education",
        "Topic :: Scientific/Engineering",
        "Topic :: Scientific/Engineering :: Information Analysis",
        "Topic :: Scientific/Engineering :: Visualization",
        "Topic :: Text Processing",
        "Typing :: Typed"
]
keywords = ["unhide", "Helmholtz association", "data mining", "HMC", "metadata", "data publications", "software publication", "RSE", "FAIR", "linked data", "knowledge graph", "json-ld", "schema.org", "restruct"]

[[project.authors]]
name = "Jens Bröder"
email = "j.broeder@fz-juelich.de"

[[project.authors]]
name = "Mustafa Soylu"
email = "m.soylu@fz-juelich.de"

[[project.authors]]
name = "Pedro Videgain Barranco"
email = "p.videgain.barranco@fz-juelich.de"

[[project.authors]]
name = "Annika Strupp"
email = "a.strupp@fz-juelich.de"

[[project.authors]]
name = "Gabriel Preuß"
email = "gabriel.preuss@helmholtz-berlin.de"

[[project.authors]]
name = "Said Fathalla"
email = "s.fathalla@fz-juelich.de"

[[project.authors]]
name = "Anton Pirogov"
email = "a.pirogov@fz-juelich.de"

[project.urls]
homepage = "https://codebase.helmholtz.cloud/hmc/hmc-public/unhide/data_harvesting"
documenation = "https://codebase.helmholtz.cloud/hmc/hmc-public/unhide/documentation"
repository = "https://codebase.helmholtz.cloud/hmc/hmc-public/unhide/data_harvesting.git"
changelog = "https://codebase.helmholtz.cloud/hmc/hmc-public/unhide/data_harvesting/blob/main/CHANGELOG.md"


#[project.console_scripts]
#hmc-unhide = "data_harvesting.cli.cli:cli"


[[project.maintainers]]
name = "Mustafa Soylu"
email = "m.soylu@fz-juelich.de"

[[project.maintainers]]
name = "Gabriel Preuß"
email = "gabriel.preuss@helmholtz-berlin.de"
[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# poetry-based metadata
[tool.poetry]
name = "data-harvesting"
version = "2.0.0"
license = "MIT"
description = "Set of tools to harvest, process and uplift (meta)data from metadata providers within the Helmholtz association to be included in the Helmholtz Knowledge Graph (Helmholtz-KG)."
authors = ["Jens Bröder <j.broeder@fz-juelich.de>", "Pedro Videgain Barranco <p.videgain.barranco@fz-juelich.de>", "Annika Strupp <a.strupp@fz-juelich.de>", "Gabriel Preuß <gabriel.preuss@helmholtz-berlin.de>", "Said Fathalla <s.fathalla@fz-juelich.de>", "Anton Pirogov <a.pirogov@fz-juelich.de>"]
readme = "README.md"
classifiers = [
        "Development Status :: 4 - Beta",
        "Intended Audience :: Information Technology",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: MIT License",
        "Natural Language :: English",
        "Operating System :: POSIX :: Linux",
        "Operating System :: MacOS :: MacOS X",
        "Programming Language :: Python",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Programming Language :: Python :: 3.12",
        "Topic :: Database",
        "Topic :: Education",
        "Topic :: Scientific/Engineering",
        "Topic :: Scientific/Engineering :: Information Analysis",
        "Topic :: Scientific/Engineering :: Visualization",
        "Topic :: Text Processing",
        "Typing :: Typed"
]
keywords = ["unhide", "Helmholtz association", "data mining", "HMC", "metadata", "data publications", "software publication", "RSE", "FAIR", "linked data", "knowledge graph", "json-ld", "schema.org", "restruct"]
maintainers = ["Jens Bröder <j.broeder@fz-juelich.de>", "Gabriel Preuß <gabriel.preuss@helmholtz-berlin.de>"]
homepage = "https://codebase.helmholtz.cloud/hmc/hmc-public/unhide/data_harvesting"
repository = "https://codebase.helmholtz.cloud/hmc/hmc-public/unhide/data_harvesting.git"


[tool.poetry.scripts]
hmc-unhide = "data_harvesting.cli.cli:cli"


[tool.poetry.dependencies]
python = "^3.9"
#pandas = "^1.4.1" # dependecy problem with advertools
requests = "^2.28.1"
typer = {extras = ["all"], version = "^0.12.1"}
advertools = "^0.13.2"
progressbar2 = "^4.4.2"
rdflib = "^6.2.0"
pyshacl = "^0.25.0"
pyld = "^2.0.3"
extruct = "^0.16.0"
oaiharvest = "^3.0.0"
jsondiff = "^2.0.0"
pathos = "^0.3.0"
shapely = "^2.0.1"
python-dateutil = "^2.8.2"
python-crontab = "^3.0.0"
wrapt = "^1.15.0"
pydantic = "^2.3.0"
SPARQLWrapper = "^2.0.0"
atoma = "^0.0.17"
prefect = "^2.16.9"
pyoai = "2.5.0"  # pinned for oaiharvest
lxml = "<5.0.0"  # pinned for extruct
vcrpy = "^6.0.1"
pydantic-settings = "^2.2.1"
pygit2 = "^1.15.0"

[tool.poetry.group.dev.dependencies]
pre-commit = "^2.21.0"
pytest = "^7.0.1"
pytest-cov = "^4.1.0"
requests-mock = "^1.10.0"
pytest-mock = "^3.12.0"
poethepoet = "^0.25.0"
pytest-benchmark = "^4.0.0"

[tool.poe.tasks]
test = "pytest -v"
test-cov = "pytest -v --cov-report lcov --cov=data_harvesting --cov=./ --junitxml=coverage.xml"
test-cov-html = "pytest -v --cov-report html --cov=data_harvesting --cov=./"

[tool.pytest.ini_options]
pythonpath = ["data_harvesting"]
testpaths = ["tests"]
addopts = "--cov-report=term-missing:skip-covered"
# NOTE: best way is to address warnings by fixing/updating packages!
filterwarnings = [
# "ignore::DeprecationWarning:some_pakage_name.*",
]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "examples",
    "notebooks"
]

# Same as Black.
line-length = 140
indent-width = 4

# Assume Python 3.8
target-version = "py38"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# We use this to enable high level imports
ignore-init-module-imports = true

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "single"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.mypy]
show_error_codes = true
check_untyped_defs = false
scripts_are_modules = true
warn_unused_ignores = true
warn_redundant_casts = true
no_warn_no_return = true
show_traceback = true
#disallow_any_unimported = false
disallow_subclassing_any = true
disallow_untyped_calls = false
disallow_untyped_decorators = false
ignore_missing_imports = true
warn_return_any = true
warn_unreachable = false
allow_untyped_globals = false
strict_equality = true
plugins = ["pydantic.mypy"]
