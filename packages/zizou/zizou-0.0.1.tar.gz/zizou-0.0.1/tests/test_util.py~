import unittest
import numpy as np

from vumt.util import (stride_windows,
                       demean,
                       apply_hanning,
                       window_array)


class UtilTestCase(unittest.TestCase):

    def test_stride_windows(self):
        data = np.random.randint(0, 10, size=10)
        test_array = np.vstack((data[0:5], data[3:8]))
        ds = stride_windows(data, 5, 2)
        np.testing.assert_array_equal(test_array.T, ds)
        ds = stride_windows(data[0:8], 5, 2)
        np.testing.assert_array_equal(test_array.T, ds)
        # Because the returned array is just a
        # different view on the original array,
        # you can't assign to it
        with self.assertRaises(ValueError):
            ds[0, 0] = 5

        # But because ds is just a view, changing the
        # original array will change ds is, maybe,
        # unexpected ways:
        data[3] = 100
        self.assertEqual(ds[0, 1], 100)

    def test_demean(self):
        a = np.arange(9.)
        ds = stride_windows(a, 3, 2)
        np.testing.assert_array_equal(demean(ds, axis=0)[0], -np.ones(7))
        a[1] = np.nan
        np.testing.assert_array_equal(demean(ds, axis=0)[1, 1], -0.5)

    def test_taper(self):
        a = np.arange(9)
        ds = stride_windows(a, 3, 1)
        dsw, wvals = apply_hanning(ds, return_window=True)
        np.testing.assert_array_equal(dsw[:, 0], np.array([0, 1., 0]))
        np.testing.assert_array_equal(dsw[1], ds[1])
        np.testing.assert_array_equal(wvals,
                                      np.array([0, 1, 0])[:, np.newaxis])

    def test_window_array(self):
        data = np.arange(10)
        # This will produce 4 windows with 5 elements each
        # overlapping by 3 elements; the last window will
        # contain one 0 to bring it to size 5
        res = window_array(data, 5, 3, remove_mean=False,
                           taper=False, padval=0.)
        self.assertEqual(res.shape, (5, 4))
        self.assertEqual(res[-1, -1], 0)
        # The returned array is just a different view of the
        # original so you can't assign to it
        with self.assertRaises(ValueError):
            res[0, 0] = 100
        # Same as above but also remove the mean from each
        # column
        resm = window_array(data, 5, 3, remove_mean=True,
                            taper=False, padval=0.)
        np.testing.assert_array_equal(resm.sum(axis=0),
                                      np.zeros(resm.shape[1]))
        # The returned array is a new copy of the original
        # so you now can assign to it
        resm[0, 0] = 100
        self.assertEqual(resm[0, 0], 100)

        # Now remove the mean and also taper each window. This
        # is the default behaviour
        rest, wvals = window_array(data, 5, 3, padval=0.)
        np.testing.assert_array_equal(rest[1], resm[1] * wvals[1])

        # This also works if we pad with np.nan
        rest, wvals = window_array(data, 5, 3, padval=np.nan)
        res_cp = res.copy()
        res_cp[-1, -1] = np.nan
        res_test = (res_cp[:4] - res_cp[:4, -1].sum()/4) * wvals[:4]
        import ipdb
        ipdb.set_trace()
        np.testing.assert_array_equal(rest[:4, -1], res_test[:4, -1])


if __name__ == '__main__':
    unittest.main()
