# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pagination import AsyncPager, SyncPager
from ..core.request_options import RequestOptions
from ..core.unchecked_base_model import construct_type
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.evaluation_debug_result_response import EvaluationDebugResultResponse
from ..types.evaluator_response import EvaluatorResponse
from ..types.http_validation_error import HttpValidationError
from ..types.list_evaluators import ListEvaluators
from ..types.project_sort_by import ProjectSortBy
from ..types.sort_order import SortOrder
from ..types.version_status import VersionStatus
from .types.run_sync_evaluation_request_evaluator import RunSyncEvaluationRequestEvaluator
from .types.src_external_app_models_v_5_evaluators_evaluator_request_spec import (
    SrcExternalAppModelsV5EvaluatorsEvaluatorRequestSpec,
)

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class EvaluatorsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        page: typing.Optional[int] = None,
        size: typing.Optional[int] = None,
        name: typing.Optional[str] = None,
        user_filter: typing.Optional[str] = None,
        sort_by: typing.Optional[ProjectSortBy] = None,
        order: typing.Optional[SortOrder] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncPager[EvaluatorResponse]:
        """
        Get a list of Evaluators.

        Parameters
        ----------
        page : typing.Optional[int]
            Page offset for pagination.

        size : typing.Optional[int]
            Page size for pagination. Number of Evaluators to fetch.

        name : typing.Optional[str]
            Case-insensitive filter for Evaluator name.

        user_filter : typing.Optional[str]
            Case-insensitive filter for users in the Evaluator. This filter matches against both email address and name of users.

        sort_by : typing.Optional[ProjectSortBy]
            Field to sort Evaluators by

        order : typing.Optional[SortOrder]
            Direction to sort by.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncPager[EvaluatorResponse]
            Successful Response

        Examples
        --------
        from humanloop.client import Humanloop

        client = Humanloop(
            api_key="YOUR_API_KEY",
        )
        response = client.evaluators.list()
        for item in response:
            yield item
        # alternatively, you can paginate page-by-page
        for page in response.iter_pages():
            yield page
        """
        page = page or 1
        _response = self._client_wrapper.httpx_client.request(
            "evaluators",
            method="GET",
            params={
                "page": page,
                "size": size,
                "name": name,
                "user_filter": user_filter,
                "sort_by": sort_by,
                "order": order,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(ListEvaluators, construct_type(type_=ListEvaluators, object_=_response.json()))  # type: ignore
                _has_next = True
                _get_next = lambda: self.list(
                    page=page + 1,
                    size=size,
                    name=name,
                    user_filter=user_filter,
                    sort_by=sort_by,
                    order=order,
                    request_options=request_options,
                )
                _items = _parsed_response.records
                return SyncPager(has_next=_has_next, items=_items, get_next=_get_next)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self,
        *,
        spec: SrcExternalAppModelsV5EvaluatorsEvaluatorRequestSpec,
        path: typing.Optional[str] = OMIT,
        id: typing.Optional[str] = OMIT,
        name: typing.Optional[str] = OMIT,
        commit_message: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EvaluatorResponse:
        """
        Create an Evaluator or update it with a new version if it already exists.

        Evaluators are identified by the `ID` or their `path`. The spec provided determines the version of the Evaluator.

        If you provide a commit message, then the new version will be committed;
        otherwise it will be uncommitted. If you try to commit an already committed version,
        an exception will be raised.

        Parameters
        ----------
        spec : SrcExternalAppModelsV5EvaluatorsEvaluatorRequestSpec

        path : typing.Optional[str]
            Path of the Evaluator including the Evaluator name, which is used as a unique identifier.

        id : typing.Optional[str]
            ID for an existing Evaluator to update.

        name : typing.Optional[str]
            Name of the Evaluator, which is used as a unique identifier.

        commit_message : typing.Optional[str]
            Message describing the changes made.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EvaluatorResponse
            Successful Response

        Examples
        --------
        from humanloop import LlmEvaluatorRequest
        from humanloop.client import Humanloop

        client = Humanloop(
            api_key="YOUR_API_KEY",
        )
        client.evaluators.create(
            spec=LlmEvaluatorRequest(
                arguments_type="target_free",
                return_type="boolean",
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "evaluators",
            method="POST",
            json={"path": path, "id": id, "name": name, "commit_message": commit_message, "spec": spec},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(EvaluatorResponse, construct_type(type_=EvaluatorResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self,
        id: str,
        *,
        version_id: typing.Optional[str] = None,
        environment: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EvaluatorResponse:
        """
        Retrieve the Evaluator with the given ID.

        By default the deployed version of the Evaluator is returned. Use the query parameters
        `version_id` or `environment` to target a specific version of the Evaluator.

        Parameters
        ----------
        id : str
            Unique identifier for Evaluator.

        version_id : typing.Optional[str]
            A specific Version Id of the Evaluator to retrieve.

        environment : typing.Optional[str]
            An environment tag to retrieve a deployed Version from.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EvaluatorResponse
            Successful Response

        Examples
        --------
        from humanloop.client import Humanloop

        client = Humanloop(
            api_key="YOUR_API_KEY",
        )
        client.evaluators.get(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"evaluators/{jsonable_encoder(id)}",
            method="GET",
            params={"version_id": version_id, "environment": environment},
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(EvaluatorResponse, construct_type(type_=EvaluatorResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete the Evaluator with the given ID.

        Parameters
        ----------
        id : str
            Unique identifier for Evaluator.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from humanloop.client import Humanloop

        client = Humanloop(
            api_key="YOUR_API_KEY",
        )
        client.evaluators.delete(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"evaluators/{jsonable_encoder(id)}", method="DELETE", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        id: str,
        *,
        path: typing.Optional[str] = OMIT,
        name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EvaluatorResponse:
        """
        Move the Evaluator to a different path or change the name.

        Parameters
        ----------
        id : str
            Unique identifier for Evaluator.

        path : typing.Optional[str]
            Path of the Evaluator including the Evaluator name, which is used as a unique identifier.

        name : typing.Optional[str]
            Name of the Evaluator, which is used as a unique identifier.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EvaluatorResponse
            Successful Response

        Examples
        --------
        from humanloop.client import Humanloop

        client = Humanloop(
            api_key="YOUR_API_KEY",
        )
        client.evaluators.update(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"evaluators/{jsonable_encoder(id)}",
            method="PATCH",
            json={"path": path, "name": name},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(EvaluatorResponse, construct_type(type_=EvaluatorResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_versions(
        self,
        id: str,
        *,
        status: typing.Optional[VersionStatus] = None,
        environment: typing.Optional[str] = None,
        evaluation_aggregates: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListEvaluators:
        """
        Get a list of all the versions of an Evaluator.

        Parameters
        ----------
        id : str
            Unique identifier for the Evaluator.

        status : typing.Optional[VersionStatus]
            Filter versions by status: 'uncommitted', 'committed'. If no status is provided, all versions are returned.

        environment : typing.Optional[str]
            Filter versions by environment tag. If no environment is provided, all versions are returned.

        evaluation_aggregates : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListEvaluators
            Successful Response

        Examples
        --------
        from humanloop.client import Humanloop

        client = Humanloop(
            api_key="YOUR_API_KEY",
        )
        client.evaluators.list_versions(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"evaluators/{jsonable_encoder(id)}/versions",
            method="GET",
            params={"status": status, "environment": environment, "evaluation_aggregates": evaluation_aggregates},
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ListEvaluators, construct_type(type_=ListEvaluators, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def deploy(
        self, id: str, version_id: str, *, environment_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> EvaluatorResponse:
        """
        Deploy Evaluator to Environment.

        Set the deployed Version for the specified Environment. This Evaluator Version
        will be used for calls made to the Evaluator in this Environment.

        Parameters
        ----------
        id : str
            Unique identifier for Evaluator.

        version_id : str
            Unique identifier for the specific version of the Evaluator.

        environment_id : str
            Unique identifier for the Environment to deploy the Version to.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EvaluatorResponse
            Successful Response

        Examples
        --------
        from humanloop.client import Humanloop

        client = Humanloop(
            api_key="YOUR_API_KEY",
        )
        client.evaluators.deploy(
            id="id",
            version_id="version_id",
            environment_id="environment_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"evaluators/{jsonable_encoder(id)}/versions/{jsonable_encoder(version_id)}/deploy",
            method="POST",
            params={"environment_id": environment_id},
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(EvaluatorResponse, construct_type(type_=EvaluatorResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def commit(
        self, id: str, version_id: str, *, commit_message: str, request_options: typing.Optional[RequestOptions] = None
    ) -> EvaluatorResponse:
        """
        Commit the Evaluator Version with the given ID.

        Parameters
        ----------
        id : str
            Unique identifier for Prompt.

        version_id : str
            Unique identifier for the specific version of the Evaluator.

        commit_message : str
            Message describing the changes made.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EvaluatorResponse
            Successful Response

        Examples
        --------
        from humanloop.client import Humanloop

        client = Humanloop(
            api_key="YOUR_API_KEY",
        )
        client.evaluators.commit(
            id="id",
            version_id="version_id",
            commit_message="commit_message",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"evaluators/{jsonable_encoder(id)}/versions/{jsonable_encoder(version_id)}/commit",
            method="POST",
            json={"commit_message": commit_message},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(EvaluatorResponse, construct_type(type_=EvaluatorResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_default(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[EvaluatorResponse]:
        """
        Get a list of default evaluators for the organization.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[EvaluatorResponse]
            Successful Response

        Examples
        --------
        from humanloop.client import Humanloop

        client = Humanloop(
            api_key="YOUR_API_KEY",
        )
        client.evaluators.list_default()
        """
        _response = self._client_wrapper.httpx_client.request(
            "evaluators/default", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(typing.List[EvaluatorResponse], construct_type(type_=typing.List[EvaluatorResponse], object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def debug(
        self,
        *,
        file_id: str,
        evaluator: RunSyncEvaluationRequestEvaluator,
        evaluator_version_id: typing.Optional[str] = OMIT,
        log_ids: typing.Optional[typing.Sequence[str]] = OMIT,
        datapoint_ids: typing.Optional[typing.Sequence[str]] = OMIT,
        prompt_version_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[EvaluationDebugResultResponse]:
        """
        Run a synchronous evaluator execution on a collection of datapoints.

        Parameters
        ----------
        file_id : str
            The ID of the Dataset that the datapoints belong to.

        evaluator : RunSyncEvaluationRequestEvaluator

        evaluator_version_id : typing.Optional[str]
            The ID of the Evaluator Version being debugged if it already exists and is being edited.

        log_ids : typing.Optional[typing.Sequence[str]]
            The IDs of the logs on which to run the draft evaluator.Provide one of `log_ids` or `datapoint_ids`.

        datapoint_ids : typing.Optional[typing.Sequence[str]]
            The IDs of the evaluation datapoints on which to run the draft evaluator.

        prompt_version_id : typing.Optional[str]
            The ID of the Prompt Version to use generate datapoints for the evaluation datapoints. Only required if `datapoint` is provided; has no effect otherwise.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[EvaluationDebugResultResponse]
            Successful Response

        Examples
        --------
        from humanloop import LlmEvaluatorRequest
        from humanloop.client import Humanloop

        client = Humanloop(
            api_key="YOUR_API_KEY",
        )
        client.evaluators.debug(
            file_id="file_id",
            evaluator=LlmEvaluatorRequest(
                arguments_type="target_free",
                return_type="boolean",
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "evaluators/debug",
            method="POST",
            json={
                "file_id": file_id,
                "evaluator": evaluator,
                "evaluator_version_id": evaluator_version_id,
                "log_ids": log_ids,
                "datapoint_ids": datapoint_ids,
                "prompt_version_id": prompt_version_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(typing.List[EvaluationDebugResultResponse], construct_type(type_=typing.List[EvaluationDebugResultResponse], object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncEvaluatorsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        page: typing.Optional[int] = None,
        size: typing.Optional[int] = None,
        name: typing.Optional[str] = None,
        user_filter: typing.Optional[str] = None,
        sort_by: typing.Optional[ProjectSortBy] = None,
        order: typing.Optional[SortOrder] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncPager[EvaluatorResponse]:
        """
        Get a list of Evaluators.

        Parameters
        ----------
        page : typing.Optional[int]
            Page offset for pagination.

        size : typing.Optional[int]
            Page size for pagination. Number of Evaluators to fetch.

        name : typing.Optional[str]
            Case-insensitive filter for Evaluator name.

        user_filter : typing.Optional[str]
            Case-insensitive filter for users in the Evaluator. This filter matches against both email address and name of users.

        sort_by : typing.Optional[ProjectSortBy]
            Field to sort Evaluators by

        order : typing.Optional[SortOrder]
            Direction to sort by.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncPager[EvaluatorResponse]
            Successful Response

        Examples
        --------
        from humanloop.client import AsyncHumanloop

        client = AsyncHumanloop(
            api_key="YOUR_API_KEY",
        )
        response = await client.evaluators.list()
        async for item in response:
            yield item
        # alternatively, you can paginate page-by-page
        async for page in response.iter_pages():
            yield page
        """
        page = page or 1
        _response = await self._client_wrapper.httpx_client.request(
            "evaluators",
            method="GET",
            params={
                "page": page,
                "size": size,
                "name": name,
                "user_filter": user_filter,
                "sort_by": sort_by,
                "order": order,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(ListEvaluators, construct_type(type_=ListEvaluators, object_=_response.json()))  # type: ignore
                _has_next = True
                _get_next = lambda: self.list(
                    page=page + 1,
                    size=size,
                    name=name,
                    user_filter=user_filter,
                    sort_by=sort_by,
                    order=order,
                    request_options=request_options,
                )
                _items = _parsed_response.records
                return AsyncPager(has_next=_has_next, items=_items, get_next=_get_next)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self,
        *,
        spec: SrcExternalAppModelsV5EvaluatorsEvaluatorRequestSpec,
        path: typing.Optional[str] = OMIT,
        id: typing.Optional[str] = OMIT,
        name: typing.Optional[str] = OMIT,
        commit_message: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EvaluatorResponse:
        """
        Create an Evaluator or update it with a new version if it already exists.

        Evaluators are identified by the `ID` or their `path`. The spec provided determines the version of the Evaluator.

        If you provide a commit message, then the new version will be committed;
        otherwise it will be uncommitted. If you try to commit an already committed version,
        an exception will be raised.

        Parameters
        ----------
        spec : SrcExternalAppModelsV5EvaluatorsEvaluatorRequestSpec

        path : typing.Optional[str]
            Path of the Evaluator including the Evaluator name, which is used as a unique identifier.

        id : typing.Optional[str]
            ID for an existing Evaluator to update.

        name : typing.Optional[str]
            Name of the Evaluator, which is used as a unique identifier.

        commit_message : typing.Optional[str]
            Message describing the changes made.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EvaluatorResponse
            Successful Response

        Examples
        --------
        from humanloop import LlmEvaluatorRequest
        from humanloop.client import AsyncHumanloop

        client = AsyncHumanloop(
            api_key="YOUR_API_KEY",
        )
        await client.evaluators.create(
            spec=LlmEvaluatorRequest(
                arguments_type="target_free",
                return_type="boolean",
            ),
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "evaluators",
            method="POST",
            json={"path": path, "id": id, "name": name, "commit_message": commit_message, "spec": spec},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(EvaluatorResponse, construct_type(type_=EvaluatorResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self,
        id: str,
        *,
        version_id: typing.Optional[str] = None,
        environment: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EvaluatorResponse:
        """
        Retrieve the Evaluator with the given ID.

        By default the deployed version of the Evaluator is returned. Use the query parameters
        `version_id` or `environment` to target a specific version of the Evaluator.

        Parameters
        ----------
        id : str
            Unique identifier for Evaluator.

        version_id : typing.Optional[str]
            A specific Version Id of the Evaluator to retrieve.

        environment : typing.Optional[str]
            An environment tag to retrieve a deployed Version from.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EvaluatorResponse
            Successful Response

        Examples
        --------
        from humanloop.client import AsyncHumanloop

        client = AsyncHumanloop(
            api_key="YOUR_API_KEY",
        )
        await client.evaluators.get(
            id="id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"evaluators/{jsonable_encoder(id)}",
            method="GET",
            params={"version_id": version_id, "environment": environment},
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(EvaluatorResponse, construct_type(type_=EvaluatorResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete the Evaluator with the given ID.

        Parameters
        ----------
        id : str
            Unique identifier for Evaluator.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from humanloop.client import AsyncHumanloop

        client = AsyncHumanloop(
            api_key="YOUR_API_KEY",
        )
        await client.evaluators.delete(
            id="id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"evaluators/{jsonable_encoder(id)}", method="DELETE", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        id: str,
        *,
        path: typing.Optional[str] = OMIT,
        name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EvaluatorResponse:
        """
        Move the Evaluator to a different path or change the name.

        Parameters
        ----------
        id : str
            Unique identifier for Evaluator.

        path : typing.Optional[str]
            Path of the Evaluator including the Evaluator name, which is used as a unique identifier.

        name : typing.Optional[str]
            Name of the Evaluator, which is used as a unique identifier.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EvaluatorResponse
            Successful Response

        Examples
        --------
        from humanloop.client import AsyncHumanloop

        client = AsyncHumanloop(
            api_key="YOUR_API_KEY",
        )
        await client.evaluators.update(
            id="id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"evaluators/{jsonable_encoder(id)}",
            method="PATCH",
            json={"path": path, "name": name},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(EvaluatorResponse, construct_type(type_=EvaluatorResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_versions(
        self,
        id: str,
        *,
        status: typing.Optional[VersionStatus] = None,
        environment: typing.Optional[str] = None,
        evaluation_aggregates: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListEvaluators:
        """
        Get a list of all the versions of an Evaluator.

        Parameters
        ----------
        id : str
            Unique identifier for the Evaluator.

        status : typing.Optional[VersionStatus]
            Filter versions by status: 'uncommitted', 'committed'. If no status is provided, all versions are returned.

        environment : typing.Optional[str]
            Filter versions by environment tag. If no environment is provided, all versions are returned.

        evaluation_aggregates : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListEvaluators
            Successful Response

        Examples
        --------
        from humanloop.client import AsyncHumanloop

        client = AsyncHumanloop(
            api_key="YOUR_API_KEY",
        )
        await client.evaluators.list_versions(
            id="id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"evaluators/{jsonable_encoder(id)}/versions",
            method="GET",
            params={"status": status, "environment": environment, "evaluation_aggregates": evaluation_aggregates},
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ListEvaluators, construct_type(type_=ListEvaluators, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def deploy(
        self, id: str, version_id: str, *, environment_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> EvaluatorResponse:
        """
        Deploy Evaluator to Environment.

        Set the deployed Version for the specified Environment. This Evaluator Version
        will be used for calls made to the Evaluator in this Environment.

        Parameters
        ----------
        id : str
            Unique identifier for Evaluator.

        version_id : str
            Unique identifier for the specific version of the Evaluator.

        environment_id : str
            Unique identifier for the Environment to deploy the Version to.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EvaluatorResponse
            Successful Response

        Examples
        --------
        from humanloop.client import AsyncHumanloop

        client = AsyncHumanloop(
            api_key="YOUR_API_KEY",
        )
        await client.evaluators.deploy(
            id="id",
            version_id="version_id",
            environment_id="environment_id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"evaluators/{jsonable_encoder(id)}/versions/{jsonable_encoder(version_id)}/deploy",
            method="POST",
            params={"environment_id": environment_id},
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(EvaluatorResponse, construct_type(type_=EvaluatorResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def commit(
        self, id: str, version_id: str, *, commit_message: str, request_options: typing.Optional[RequestOptions] = None
    ) -> EvaluatorResponse:
        """
        Commit the Evaluator Version with the given ID.

        Parameters
        ----------
        id : str
            Unique identifier for Prompt.

        version_id : str
            Unique identifier for the specific version of the Evaluator.

        commit_message : str
            Message describing the changes made.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EvaluatorResponse
            Successful Response

        Examples
        --------
        from humanloop.client import AsyncHumanloop

        client = AsyncHumanloop(
            api_key="YOUR_API_KEY",
        )
        await client.evaluators.commit(
            id="id",
            version_id="version_id",
            commit_message="commit_message",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"evaluators/{jsonable_encoder(id)}/versions/{jsonable_encoder(version_id)}/commit",
            method="POST",
            json={"commit_message": commit_message},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(EvaluatorResponse, construct_type(type_=EvaluatorResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_default(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[EvaluatorResponse]:
        """
        Get a list of default evaluators for the organization.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[EvaluatorResponse]
            Successful Response

        Examples
        --------
        from humanloop.client import AsyncHumanloop

        client = AsyncHumanloop(
            api_key="YOUR_API_KEY",
        )
        await client.evaluators.list_default()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "evaluators/default", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(typing.List[EvaluatorResponse], construct_type(type_=typing.List[EvaluatorResponse], object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def debug(
        self,
        *,
        file_id: str,
        evaluator: RunSyncEvaluationRequestEvaluator,
        evaluator_version_id: typing.Optional[str] = OMIT,
        log_ids: typing.Optional[typing.Sequence[str]] = OMIT,
        datapoint_ids: typing.Optional[typing.Sequence[str]] = OMIT,
        prompt_version_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[EvaluationDebugResultResponse]:
        """
        Run a synchronous evaluator execution on a collection of datapoints.

        Parameters
        ----------
        file_id : str
            The ID of the Dataset that the datapoints belong to.

        evaluator : RunSyncEvaluationRequestEvaluator

        evaluator_version_id : typing.Optional[str]
            The ID of the Evaluator Version being debugged if it already exists and is being edited.

        log_ids : typing.Optional[typing.Sequence[str]]
            The IDs of the logs on which to run the draft evaluator.Provide one of `log_ids` or `datapoint_ids`.

        datapoint_ids : typing.Optional[typing.Sequence[str]]
            The IDs of the evaluation datapoints on which to run the draft evaluator.

        prompt_version_id : typing.Optional[str]
            The ID of the Prompt Version to use generate datapoints for the evaluation datapoints. Only required if `datapoint` is provided; has no effect otherwise.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[EvaluationDebugResultResponse]
            Successful Response

        Examples
        --------
        from humanloop import LlmEvaluatorRequest
        from humanloop.client import AsyncHumanloop

        client = AsyncHumanloop(
            api_key="YOUR_API_KEY",
        )
        await client.evaluators.debug(
            file_id="file_id",
            evaluator=LlmEvaluatorRequest(
                arguments_type="target_free",
                return_type="boolean",
            ),
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "evaluators/debug",
            method="POST",
            json={
                "file_id": file_id,
                "evaluator": evaluator,
                "evaluator_version_id": evaluator_version_id,
                "log_ids": log_ids,
                "datapoint_ids": datapoint_ids,
                "prompt_version_id": prompt_version_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(typing.List[EvaluationDebugResultResponse], construct_type(type_=typing.List[EvaluationDebugResultResponse], object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
