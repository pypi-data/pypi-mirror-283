# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.request_options import RequestOptions
from ..core.unchecked_base_model import construct_type
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.directory_response import DirectoryResponse
from ..types.directory_with_parents_and_children_response import DirectoryWithParentsAndChildrenResponse
from ..types.http_validation_error import HttpValidationError

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class DirectoriesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.List[DirectoryResponse]:
        """
        Retrieve a list of all Directories.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[DirectoryResponse]
            Successful Response

        Examples
        --------
        from humanloop.client import Humanloop

        client = Humanloop(
            api_key="YOUR_API_KEY",
        )
        client.directories.list()
        """
        _response = self._client_wrapper.httpx_client.request(
            "directories", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(typing.List[DirectoryResponse], construct_type(type_=typing.List[DirectoryResponse], object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self, *, name: str, parent_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> DirectoryResponse:
        """
        Creates a Directory.

        Parameters
        ----------
        name : str
            Name of the directory to create.

        parent_id : str
            ID of the parent directory. Starts with `dir_`.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DirectoryResponse
            Successful Response

        Examples
        --------
        from humanloop.client import Humanloop

        client = Humanloop(
            api_key="YOUR_API_KEY",
        )
        client.directories.create(
            name="name",
            parent_id="parent_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "directories",
            method="POST",
            json={"name": name, "parent_id": parent_id},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(DirectoryResponse, construct_type(type_=DirectoryResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DirectoryWithParentsAndChildrenResponse:
        """
        Fetches a directory by ID.

        Parameters
        ----------
        id : str
            String ID of directory. Starts with `dir_`.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DirectoryWithParentsAndChildrenResponse
            Successful Response

        Examples
        --------
        from humanloop.client import Humanloop

        client = Humanloop(
            api_key="YOUR_API_KEY",
        )
        client.directories.get(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"directories/{jsonable_encoder(id)}", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(DirectoryWithParentsAndChildrenResponse, construct_type(type_=DirectoryWithParentsAndChildrenResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete the Directory with the given ID.

        The Directory must be empty (i.e. contain no Directories or Files).

        Parameters
        ----------
        id : str
            Unique identifier for Directory. Starts with `dir_`.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from humanloop.client import Humanloop

        client = Humanloop(
            api_key="YOUR_API_KEY",
        )
        client.directories.delete(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"directories/{jsonable_encoder(id)}", method="DELETE", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        id: str,
        *,
        name: typing.Optional[str] = OMIT,
        parent_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DirectoryResponse:
        """
        Update the Directory with the given ID.

        Parameters
        ----------
        id : str
            Unique identifier for Directory. Starts with `dir_`.

        name : typing.Optional[str]
            Name to set for the directory.

        parent_id : typing.Optional[str]
            ID of the parent directory. Specify this to move directories. Starts with `dir_`.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DirectoryResponse
            Successful Response

        Examples
        --------
        from humanloop.client import Humanloop

        client = Humanloop(
            api_key="YOUR_API_KEY",
        )
        client.directories.update(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"directories/{jsonable_encoder(id)}",
            method="PATCH",
            json={"name": name, "parent_id": parent_id},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(DirectoryResponse, construct_type(type_=DirectoryResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncDirectoriesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.List[DirectoryResponse]:
        """
        Retrieve a list of all Directories.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[DirectoryResponse]
            Successful Response

        Examples
        --------
        from humanloop.client import AsyncHumanloop

        client = AsyncHumanloop(
            api_key="YOUR_API_KEY",
        )
        await client.directories.list()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "directories", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(typing.List[DirectoryResponse], construct_type(type_=typing.List[DirectoryResponse], object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self, *, name: str, parent_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> DirectoryResponse:
        """
        Creates a Directory.

        Parameters
        ----------
        name : str
            Name of the directory to create.

        parent_id : str
            ID of the parent directory. Starts with `dir_`.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DirectoryResponse
            Successful Response

        Examples
        --------
        from humanloop.client import AsyncHumanloop

        client = AsyncHumanloop(
            api_key="YOUR_API_KEY",
        )
        await client.directories.create(
            name="name",
            parent_id="parent_id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "directories",
            method="POST",
            json={"name": name, "parent_id": parent_id},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(DirectoryResponse, construct_type(type_=DirectoryResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DirectoryWithParentsAndChildrenResponse:
        """
        Fetches a directory by ID.

        Parameters
        ----------
        id : str
            String ID of directory. Starts with `dir_`.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DirectoryWithParentsAndChildrenResponse
            Successful Response

        Examples
        --------
        from humanloop.client import AsyncHumanloop

        client = AsyncHumanloop(
            api_key="YOUR_API_KEY",
        )
        await client.directories.get(
            id="id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"directories/{jsonable_encoder(id)}", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(DirectoryWithParentsAndChildrenResponse, construct_type(type_=DirectoryWithParentsAndChildrenResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete the Directory with the given ID.

        The Directory must be empty (i.e. contain no Directories or Files).

        Parameters
        ----------
        id : str
            Unique identifier for Directory. Starts with `dir_`.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from humanloop.client import AsyncHumanloop

        client = AsyncHumanloop(
            api_key="YOUR_API_KEY",
        )
        await client.directories.delete(
            id="id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"directories/{jsonable_encoder(id)}", method="DELETE", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        id: str,
        *,
        name: typing.Optional[str] = OMIT,
        parent_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DirectoryResponse:
        """
        Update the Directory with the given ID.

        Parameters
        ----------
        id : str
            Unique identifier for Directory. Starts with `dir_`.

        name : typing.Optional[str]
            Name to set for the directory.

        parent_id : typing.Optional[str]
            ID of the parent directory. Specify this to move directories. Starts with `dir_`.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DirectoryResponse
            Successful Response

        Examples
        --------
        from humanloop.client import AsyncHumanloop

        client = AsyncHumanloop(
            api_key="YOUR_API_KEY",
        )
        await client.directories.update(
            id="id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"directories/{jsonable_encoder(id)}",
            method="PATCH",
            json={"name": name, "parent_id": parent_id},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(DirectoryResponse, construct_type(type_=DirectoryResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, construct_type(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
