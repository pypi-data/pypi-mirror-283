# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetServiceOverridesV2Result',
    'AwaitableGetServiceOverridesV2Result',
    'get_service_overrides_v2',
    'get_service_overrides_v2_output',
]

@pulumi.output_type
class GetServiceOverridesV2Result:
    """
    A collection of values returned by getServiceOverridesV2.
    """
    def __init__(__self__, cluster_id=None, env_id=None, id=None, identifier=None, infra_id=None, org_id=None, project_id=None, service_id=None, spec=None, type=None):
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if env_id and not isinstance(env_id, str):
            raise TypeError("Expected argument 'env_id' to be a str")
        pulumi.set(__self__, "env_id", env_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identifier and not isinstance(identifier, str):
            raise TypeError("Expected argument 'identifier' to be a str")
        pulumi.set(__self__, "identifier", identifier)
        if infra_id and not isinstance(infra_id, str):
            raise TypeError("Expected argument 'infra_id' to be a str")
        pulumi.set(__self__, "infra_id", infra_id)
        if org_id and not isinstance(org_id, str):
            raise TypeError("Expected argument 'org_id' to be a str")
        pulumi.set(__self__, "org_id", org_id)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if service_id and not isinstance(service_id, str):
            raise TypeError("Expected argument 'service_id' to be a str")
        pulumi.set(__self__, "service_id", service_id)
        if spec and not isinstance(spec, str):
            raise TypeError("Expected argument 'spec' to be a str")
        pulumi.set(__self__, "spec", spec)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="envId")
    def env_id(self) -> str:
        return pulumi.get(self, "env_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="infraId")
    def infra_id(self) -> str:
        return pulumi.get(self, "infra_id")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[str]:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> str:
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter
    def spec(self) -> str:
        return pulumi.get(self, "spec")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


class AwaitableGetServiceOverridesV2Result(GetServiceOverridesV2Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceOverridesV2Result(
            cluster_id=self.cluster_id,
            env_id=self.env_id,
            id=self.id,
            identifier=self.identifier,
            infra_id=self.infra_id,
            org_id=self.org_id,
            project_id=self.project_id,
            service_id=self.service_id,
            spec=self.spec,
            type=self.type)


def get_service_overrides_v2(cluster_id: Optional[str] = None,
                             env_id: Optional[str] = None,
                             identifier: Optional[str] = None,
                             infra_id: Optional[str] = None,
                             org_id: Optional[str] = None,
                             project_id: Optional[str] = None,
                             service_id: Optional[str] = None,
                             spec: Optional[str] = None,
                             type: Optional[str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServiceOverridesV2Result:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['envId'] = env_id
    __args__['identifier'] = identifier
    __args__['infraId'] = infra_id
    __args__['orgId'] = org_id
    __args__['projectId'] = project_id
    __args__['serviceId'] = service_id
    __args__['spec'] = spec
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('harness:platform/getServiceOverridesV2:getServiceOverridesV2', __args__, opts=opts, typ=GetServiceOverridesV2Result).value

    return AwaitableGetServiceOverridesV2Result(
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        env_id=pulumi.get(__ret__, 'env_id'),
        id=pulumi.get(__ret__, 'id'),
        identifier=pulumi.get(__ret__, 'identifier'),
        infra_id=pulumi.get(__ret__, 'infra_id'),
        org_id=pulumi.get(__ret__, 'org_id'),
        project_id=pulumi.get(__ret__, 'project_id'),
        service_id=pulumi.get(__ret__, 'service_id'),
        spec=pulumi.get(__ret__, 'spec'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_service_overrides_v2)
def get_service_overrides_v2_output(cluster_id: Optional[pulumi.Input[Optional[str]]] = None,
                                    env_id: Optional[pulumi.Input[str]] = None,
                                    identifier: Optional[pulumi.Input[str]] = None,
                                    infra_id: Optional[pulumi.Input[Optional[str]]] = None,
                                    org_id: Optional[pulumi.Input[Optional[str]]] = None,
                                    project_id: Optional[pulumi.Input[Optional[str]]] = None,
                                    service_id: Optional[pulumi.Input[Optional[str]]] = None,
                                    spec: Optional[pulumi.Input[str]] = None,
                                    type: Optional[pulumi.Input[str]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetServiceOverridesV2Result]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
