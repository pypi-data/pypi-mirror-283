# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AppDynamicsConnectorApiTokenArgs',
    'AppDynamicsConnectorUsernamePasswordArgs',
    'ArtifactoryConnectorCredentialsArgs',
    'AwsCCConnectorCrossAccountAccessArgs',
    'AwsConnectorCrossAccountAccessArgs',
    'AwsConnectorEqualJitterBackoffStrategyArgs',
    'AwsConnectorFixedDelayBackoffStrategyArgs',
    'AwsConnectorFullJitterBackoffStrategyArgs',
    'AwsConnectorInheritFromDelegateArgs',
    'AwsConnectorIrsaArgs',
    'AwsConnectorManualArgs',
    'AwsKmsConnectorCredentialsArgs',
    'AwsKmsConnectorCredentialsAssumeRoleArgs',
    'AwsKmsConnectorCredentialsManualArgs',
    'AwsSecretManagerConnectorCredentialsArgs',
    'AwsSecretManagerConnectorCredentialsAssumeRoleArgs',
    'AwsSecretManagerConnectorCredentialsManualArgs',
    'AzureCloudCostConnectorBillingExportSpecArgs',
    'AzureCloudProviderConnectorCredentialsArgs',
    'AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsArgs',
    'AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsAuthArgs',
    'AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsAuthAzureMsiAuthUaArgs',
    'AzureCloudProviderConnectorCredentialsAzureManualDetailsArgs',
    'AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthArgs',
    'AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthAzureClientKeyCertArgs',
    'AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthAzureClientSecretKeyArgs',
    'BitbucketConnectorApiAuthenticationArgs',
    'BitbucketConnectorCredentialsArgs',
    'BitbucketConnectorCredentialsHttpArgs',
    'BitbucketConnectorCredentialsSshArgs',
    'DockerConnectorCredentialsArgs',
    'ElasticsearchConnectorApiTokenArgs',
    'ElasticsearchConnectorNoAuthenticationArgs',
    'ElasticsearchConnectorUsernamePasswordArgs',
    'EnvironmentClustersMappingClusterArgs',
    'FeatureFlagGitDetailsArgs',
    'FeatureFlagVariationArgs',
    'FiltersFilterPropertiesArgs',
    'GcpCloudCostConnectorBillingExportSpecArgs',
    'GcpConnectorInheritFromDelegateArgs',
    'GcpConnectorManualArgs',
    'GitConnectorCredentialsArgs',
    'GitConnectorCredentialsHttpArgs',
    'GitConnectorCredentialsSshArgs',
    'GitOpsAgentMetadataArgs',
    'GitOpsApplicationsApplicationArgs',
    'GitOpsApplicationsApplicationMetadataArgs',
    'GitOpsApplicationsApplicationMetadataOwnerReferenceArgs',
    'GitOpsApplicationsApplicationSpecArgs',
    'GitOpsApplicationsApplicationSpecDestinationArgs',
    'GitOpsApplicationsApplicationSpecSourceArgs',
    'GitOpsApplicationsApplicationSpecSourceDirectoryArgs',
    'GitOpsApplicationsApplicationSpecSourceDirectoryJsonnetArgs',
    'GitOpsApplicationsApplicationSpecSourceDirectoryJsonnetExtVarArgs',
    'GitOpsApplicationsApplicationSpecSourceDirectoryJsonnetTlaArgs',
    'GitOpsApplicationsApplicationSpecSourceHelmArgs',
    'GitOpsApplicationsApplicationSpecSourceHelmFileParameterArgs',
    'GitOpsApplicationsApplicationSpecSourceHelmParameterArgs',
    'GitOpsApplicationsApplicationSpecSourceKsonnetArgs',
    'GitOpsApplicationsApplicationSpecSourceKsonnetParameterArgs',
    'GitOpsApplicationsApplicationSpecSourceKustomizeArgs',
    'GitOpsApplicationsApplicationSpecSourcePluginArgs',
    'GitOpsApplicationsApplicationSpecSourcePluginEnvArgs',
    'GitOpsApplicationsApplicationSpecSyncPolicyArgs',
    'GitOpsApplicationsApplicationSpecSyncPolicyAutomatedArgs',
    'GitOpsApplicationsApplicationSpecSyncPolicyRetryArgs',
    'GitOpsApplicationsApplicationSpecSyncPolicyRetryBackoffArgs',
    'GitOpsClusterQueryArgs',
    'GitOpsClusterQueryIdArgs',
    'GitOpsClusterRequestArgs',
    'GitOpsClusterRequestClusterArgs',
    'GitOpsClusterRequestClusterConfigArgs',
    'GitOpsClusterRequestClusterConfigAwsAuthConfigArgs',
    'GitOpsClusterRequestClusterConfigExecProviderConfigArgs',
    'GitOpsClusterRequestClusterConfigTlsClientConfigArgs',
    'GitOpsClusterRequestClusterInfoArgs',
    'GitOpsClusterRequestClusterInfoCacheInfoArgs',
    'GitOpsClusterRequestClusterInfoConnectionStateArgs',
    'GitOpsClusterRequestClusterInfoConnectionStateAttemptedAtArgs',
    'GitOpsClusterRequestClusterRefreshRequestedAtArgs',
    'GitOpsClusterRequestIdArgs',
    'GitOpsClusterRequestUpdateMaskArgs',
    'GitOpsGnupgRequestArgs',
    'GitOpsGnupgRequestPublickeyArgs',
    'GitOpsRepoCertRequestArgs',
    'GitOpsRepoCertRequestCertificateArgs',
    'GitOpsRepoCertRequestCertificateItemArgs',
    'GitOpsRepoCertRequestCertificateMetadataArgs',
    'GitOpsRepoCredCredArgs',
    'GitOpsRepositoryRepoArgs',
    'GitOpsRepositoryUpdateMaskArgs',
    'GithubConnectorApiAuthenticationArgs',
    'GithubConnectorApiAuthenticationGithubAppArgs',
    'GithubConnectorCredentialsArgs',
    'GithubConnectorCredentialsHttpArgs',
    'GithubConnectorCredentialsSshArgs',
    'GitlabConnectorApiAuthenticationArgs',
    'GitlabConnectorCredentialsArgs',
    'GitlabConnectorCredentialsHttpArgs',
    'GitlabConnectorCredentialsSshArgs',
    'HelmConnectorCredentialsArgs',
    'InputSetGitDetailsArgs',
    'JenkinsConnectorAuthArgs',
    'JenkinsConnectorAuthJenkinsBearerTokenArgs',
    'JenkinsConnectorAuthJenkinsUserNamePasswordArgs',
    'JiraConnectorAuthArgs',
    'JiraConnectorAuthUsernamePasswordArgs',
    'KubernetesConnectorClientKeyCertArgs',
    'KubernetesConnectorInheritFromDelegateArgs',
    'KubernetesConnectorOpenidConnectArgs',
    'KubernetesConnectorServiceAccountArgs',
    'KubernetesConnectorUsernamePasswordArgs',
    'ManualFreezeCurrentOrUpcomingWindowArgs',
    'ManualFreezeFreezeWindowArgs',
    'ManualFreezeFreezeWindowRecurrenceArgs',
    'ManualFreezeFreezeWindowRecurrenceRecurrenceSpecArgs',
    'MonitoredServiceRequestArgs',
    'MonitoredServiceRequestChangeSourceArgs',
    'MonitoredServiceRequestDependencyArgs',
    'MonitoredServiceRequestHealthSourceArgs',
    'MonitoredServiceRequestNotificationRuleRefArgs',
    'NexusConnectorCredentialsArgs',
    'OciHelmConnectorCredentialsArgs',
    'PipelineFiltersFilterPropertiesArgs',
    'PipelineGitDetailsArgs',
    'PolicySetPolicyArgs',
    'PrometheusConnectorHeaderArgs',
    'ResourceGroupIncludedScopeArgs',
    'ResourceGroupResourceFilterArgs',
    'ResourceGroupResourceFilterResourceArgs',
    'ResourceGroupResourceFilterResourceAttributeFilterArgs',
    'RoleAssignmentsPrincipalArgs',
    'SecretSshkeyKerberosArgs',
    'SecretSshkeyKerberosTgtKeyTabFilePathSpecArgs',
    'SecretSshkeyKerberosTgtPasswordSpecArgs',
    'SecretSshkeySshArgs',
    'SecretSshkeySshSshPasswordCredentialArgs',
    'SecretSshkeySshSshkeyPathCredentialArgs',
    'SecretSshkeySshSshkeyReferenceCredentialArgs',
    'ServiceNowConnectorAuthArgs',
    'ServiceNowConnectorAuthAdfsArgs',
    'ServiceNowConnectorAuthUsernamePasswordArgs',
    'SloRequestArgs',
    'SloRequestNotificationRuleRefArgs',
    'SloRequestSloTargetArgs',
    'SpotConnectorPermanentTokenArgs',
    'TasConnectorCredentialsArgs',
    'TasConnectorCredentialsTasManualDetailsArgs',
    'TemplateFiltersFilterPropertiesArgs',
    'TemplateGitDetailsArgs',
    'TerraformCloudConnectorCredentialsArgs',
    'TerraformCloudConnectorCredentialsApiTokenArgs',
    'UserRoleBindingArgs',
    'UsergroupNotificationConfigArgs',
    'VariablesSpecArgs',
    'GetGitopsApplicationsApplicationArgs',
    'GetGitopsApplicationsApplicationMetadataArgs',
    'GetGitopsApplicationsApplicationMetadataOwnerReferenceArgs',
    'GetGitopsApplicationsApplicationSpecArgs',
    'GetGitopsApplicationsApplicationSpecDestinationArgs',
    'GetGitopsApplicationsApplicationSpecSourceArgs',
    'GetGitopsApplicationsApplicationSpecSourceDirectoryArgs',
    'GetGitopsApplicationsApplicationSpecSourceDirectoryJsonnetArgs',
    'GetGitopsApplicationsApplicationSpecSourceDirectoryJsonnetExtVarArgs',
    'GetGitopsApplicationsApplicationSpecSourceDirectoryJsonnetTlaArgs',
    'GetGitopsApplicationsApplicationSpecSourceHelmArgs',
    'GetGitopsApplicationsApplicationSpecSourceHelmFileParameterArgs',
    'GetGitopsApplicationsApplicationSpecSourceHelmParameterArgs',
    'GetGitopsApplicationsApplicationSpecSourceKsonnetArgs',
    'GetGitopsApplicationsApplicationSpecSourceKsonnetParameterArgs',
    'GetGitopsApplicationsApplicationSpecSourceKustomizeArgs',
    'GetGitopsApplicationsApplicationSpecSourcePluginArgs',
    'GetGitopsApplicationsApplicationSpecSourcePluginEnvArgs',
    'GetGitopsApplicationsApplicationSpecSyncPolicyArgs',
    'GetGitopsApplicationsApplicationSpecSyncPolicyAutomatedArgs',
    'GetGitopsApplicationsApplicationSpecSyncPolicyRetryArgs',
    'GetGitopsApplicationsApplicationSpecSyncPolicyRetryBackoffArgs',
    'GetGitopsClusterQueryArgs',
    'GetGitopsClusterQueryIdArgs',
    'GetGitopsGnupgRequestArgs',
    'GetGitopsGnupgRequestPublickeyArgs',
    'GetGitopsRepoCredCredArgs',
    'GetGitopsRepositoryUpdateMaskArgs',
    'GetInputSetGitDetailsArgs',
    'GetPipelineGitDetailsArgs',
    'GetPolicySetPolicyArgs',
    'GetTemplateGitDetailsArgs',
    'GetUsergroupNotificationConfigArgs',
]

@pulumi.input_type
class AppDynamicsConnectorApiTokenArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret_ref: pulumi.Input[str]):
        """
        :param pulumi.Input[str] client_id: The client id used for connecting to App Dynamics.
        :param pulumi.Input[str] client_secret_ref: Reference to the Harness secret containing the App Dynamics client secret. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret_ref", client_secret_ref)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        """
        The client id used for connecting to App Dynamics.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecretRef")
    def client_secret_ref(self) -> pulumi.Input[str]:
        """
        Reference to the Harness secret containing the App Dynamics client secret. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "client_secret_ref")

    @client_secret_ref.setter
    def client_secret_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret_ref", value)


@pulumi.input_type
class AppDynamicsConnectorUsernamePasswordArgs:
    def __init__(__self__, *,
                 password_ref: pulumi.Input[str],
                 username: pulumi.Input[str]):
        """
        :param pulumi.Input[str] password_ref: Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[str] username: Username to use for authentication.
        """
        pulumi.set(__self__, "password_ref", password_ref)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> pulumi.Input[str]:
        """
        Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "password_ref")

    @password_ref.setter
    def password_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "password_ref", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        Username to use for authentication.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ArtifactoryConnectorCredentialsArgs:
    def __init__(__self__, *,
                 password_ref: pulumi.Input[str],
                 username: Optional[pulumi.Input[str]] = None,
                 username_ref: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] password_ref: Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[str] username: Username to use for authentication.
        :param pulumi.Input[str] username_ref: Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        pulumi.set(__self__, "password_ref", password_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if username_ref is not None:
            pulumi.set(__self__, "username_ref", username_ref)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> pulumi.Input[str]:
        """
        Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "password_ref")

    @password_ref.setter
    def password_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "password_ref", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username to use for authentication.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="usernameRef")
    def username_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "username_ref")

    @username_ref.setter
    def username_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_ref", value)


@pulumi.input_type
class AwsCCConnectorCrossAccountAccessArgs:
    def __init__(__self__, *,
                 external_id: pulumi.Input[str],
                 role_arn: pulumi.Input[str]):
        """
        :param pulumi.Input[str] external_id: The external id of the role to use for cross-account access. This is a random unique value to provide additional secure authentication.
        :param pulumi.Input[str] role_arn: The ARN of the role to use for cross-account access.
        """
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "role_arn", role_arn)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> pulumi.Input[str]:
        """
        The external id of the role to use for cross-account access. This is a random unique value to provide additional secure authentication.
        """
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        The ARN of the role to use for cross-account access.
        """
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_arn", value)


@pulumi.input_type
class AwsConnectorCrossAccountAccessArgs:
    def __init__(__self__, *,
                 role_arn: pulumi.Input[str],
                 external_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] role_arn: The Amazon Resource Name (ARN) of the role that you want to assume. This is an IAM role in the target AWS account.
        :param pulumi.Input[str] external_id: If the administrator of the account to which the role belongs provided you with an external ID, then enter that value.
        """
        pulumi.set(__self__, "role_arn", role_arn)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the role that you want to assume. This is an IAM role in the target AWS account.
        """
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        """
        If the administrator of the account to which the role belongs provided you with an external ID, then enter that value.
        """
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)


@pulumi.input_type
class AwsConnectorEqualJitterBackoffStrategyArgs:
    def __init__(__self__, *,
                 base_delay: Optional[pulumi.Input[int]] = None,
                 max_backoff_time: Optional[pulumi.Input[int]] = None,
                 retry_count: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] base_delay: Base delay.
        :param pulumi.Input[int] max_backoff_time: Max BackOff Time.
        :param pulumi.Input[int] retry_count: Retry Count.
        """
        if base_delay is not None:
            pulumi.set(__self__, "base_delay", base_delay)
        if max_backoff_time is not None:
            pulumi.set(__self__, "max_backoff_time", max_backoff_time)
        if retry_count is not None:
            pulumi.set(__self__, "retry_count", retry_count)

    @property
    @pulumi.getter(name="baseDelay")
    def base_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Base delay.
        """
        return pulumi.get(self, "base_delay")

    @base_delay.setter
    def base_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "base_delay", value)

    @property
    @pulumi.getter(name="maxBackoffTime")
    def max_backoff_time(self) -> Optional[pulumi.Input[int]]:
        """
        Max BackOff Time.
        """
        return pulumi.get(self, "max_backoff_time")

    @max_backoff_time.setter
    def max_backoff_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_backoff_time", value)

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[pulumi.Input[int]]:
        """
        Retry Count.
        """
        return pulumi.get(self, "retry_count")

    @retry_count.setter
    def retry_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retry_count", value)


@pulumi.input_type
class AwsConnectorFixedDelayBackoffStrategyArgs:
    def __init__(__self__, *,
                 fixed_backoff: Optional[pulumi.Input[int]] = None,
                 retry_count: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] fixed_backoff: Fixed Backoff.
        :param pulumi.Input[int] retry_count: Retry Count.
        """
        if fixed_backoff is not None:
            pulumi.set(__self__, "fixed_backoff", fixed_backoff)
        if retry_count is not None:
            pulumi.set(__self__, "retry_count", retry_count)

    @property
    @pulumi.getter(name="fixedBackoff")
    def fixed_backoff(self) -> Optional[pulumi.Input[int]]:
        """
        Fixed Backoff.
        """
        return pulumi.get(self, "fixed_backoff")

    @fixed_backoff.setter
    def fixed_backoff(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fixed_backoff", value)

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[pulumi.Input[int]]:
        """
        Retry Count.
        """
        return pulumi.get(self, "retry_count")

    @retry_count.setter
    def retry_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retry_count", value)


@pulumi.input_type
class AwsConnectorFullJitterBackoffStrategyArgs:
    def __init__(__self__, *,
                 base_delay: Optional[pulumi.Input[int]] = None,
                 max_backoff_time: Optional[pulumi.Input[int]] = None,
                 retry_count: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] base_delay: Base delay.
        :param pulumi.Input[int] max_backoff_time: Max BackOff Time.
        :param pulumi.Input[int] retry_count: Retry Count.
        """
        if base_delay is not None:
            pulumi.set(__self__, "base_delay", base_delay)
        if max_backoff_time is not None:
            pulumi.set(__self__, "max_backoff_time", max_backoff_time)
        if retry_count is not None:
            pulumi.set(__self__, "retry_count", retry_count)

    @property
    @pulumi.getter(name="baseDelay")
    def base_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Base delay.
        """
        return pulumi.get(self, "base_delay")

    @base_delay.setter
    def base_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "base_delay", value)

    @property
    @pulumi.getter(name="maxBackoffTime")
    def max_backoff_time(self) -> Optional[pulumi.Input[int]]:
        """
        Max BackOff Time.
        """
        return pulumi.get(self, "max_backoff_time")

    @max_backoff_time.setter
    def max_backoff_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_backoff_time", value)

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[pulumi.Input[int]]:
        """
        Retry Count.
        """
        return pulumi.get(self, "retry_count")

    @retry_count.setter
    def retry_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retry_count", value)


@pulumi.input_type
class AwsConnectorInheritFromDelegateArgs:
    def __init__(__self__, *,
                 delegate_selectors: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] delegate_selectors: The delegates to inherit the credentials from.
        """
        pulumi.set(__self__, "delegate_selectors", delegate_selectors)

    @property
    @pulumi.getter(name="delegateSelectors")
    def delegate_selectors(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The delegates to inherit the credentials from.
        """
        return pulumi.get(self, "delegate_selectors")

    @delegate_selectors.setter
    def delegate_selectors(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "delegate_selectors", value)


@pulumi.input_type
class AwsConnectorIrsaArgs:
    def __init__(__self__, *,
                 delegate_selectors: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] delegate_selectors: The delegates to inherit the credentials from.
        """
        pulumi.set(__self__, "delegate_selectors", delegate_selectors)

    @property
    @pulumi.getter(name="delegateSelectors")
    def delegate_selectors(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The delegates to inherit the credentials from.
        """
        return pulumi.get(self, "delegate_selectors")

    @delegate_selectors.setter
    def delegate_selectors(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "delegate_selectors", value)


@pulumi.input_type
class AwsConnectorManualArgs:
    def __init__(__self__, *,
                 secret_key_ref: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 access_key_ref: Optional[pulumi.Input[str]] = None,
                 delegate_selectors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] secret_key_ref: Reference to the Harness secret containing the aws secret key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[str] access_key: AWS access key.
        :param pulumi.Input[str] access_key_ref: Reference to the Harness secret containing the aws access key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] delegate_selectors: Connect only use delegates with these tags.
        """
        pulumi.set(__self__, "secret_key_ref", secret_key_ref)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if access_key_ref is not None:
            pulumi.set(__self__, "access_key_ref", access_key_ref)
        if delegate_selectors is not None:
            pulumi.set(__self__, "delegate_selectors", delegate_selectors)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> pulumi.Input[str]:
        """
        Reference to the Harness secret containing the aws secret key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "secret_key_ref")

    @secret_key_ref.setter
    def secret_key_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_key_ref", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        """
        AWS access key.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="accessKeyRef")
    def access_key_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to the Harness secret containing the aws access key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "access_key_ref")

    @access_key_ref.setter
    def access_key_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key_ref", value)

    @property
    @pulumi.getter(name="delegateSelectors")
    def delegate_selectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Connect only use delegates with these tags.
        """
        return pulumi.get(self, "delegate_selectors")

    @delegate_selectors.setter
    def delegate_selectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "delegate_selectors", value)


@pulumi.input_type
class AwsKmsConnectorCredentialsArgs:
    def __init__(__self__, *,
                 assume_role: Optional[pulumi.Input['AwsKmsConnectorCredentialsAssumeRoleArgs']] = None,
                 inherit_from_delegate: Optional[pulumi.Input[bool]] = None,
                 manual: Optional[pulumi.Input['AwsKmsConnectorCredentialsManualArgs']] = None):
        """
        :param pulumi.Input['AwsKmsConnectorCredentialsAssumeRoleArgs'] assume_role: Connect using STS assume role.
        :param pulumi.Input[bool] inherit_from_delegate: Inherit the credentials from from the delegate.
        :param pulumi.Input['AwsKmsConnectorCredentialsManualArgs'] manual: Specify the AWS key and secret used for authenticating.
        """
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if inherit_from_delegate is not None:
            pulumi.set(__self__, "inherit_from_delegate", inherit_from_delegate)
        if manual is not None:
            pulumi.set(__self__, "manual", manual)

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[pulumi.Input['AwsKmsConnectorCredentialsAssumeRoleArgs']]:
        """
        Connect using STS assume role.
        """
        return pulumi.get(self, "assume_role")

    @assume_role.setter
    def assume_role(self, value: Optional[pulumi.Input['AwsKmsConnectorCredentialsAssumeRoleArgs']]):
        pulumi.set(self, "assume_role", value)

    @property
    @pulumi.getter(name="inheritFromDelegate")
    def inherit_from_delegate(self) -> Optional[pulumi.Input[bool]]:
        """
        Inherit the credentials from from the delegate.
        """
        return pulumi.get(self, "inherit_from_delegate")

    @inherit_from_delegate.setter
    def inherit_from_delegate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "inherit_from_delegate", value)

    @property
    @pulumi.getter
    def manual(self) -> Optional[pulumi.Input['AwsKmsConnectorCredentialsManualArgs']]:
        """
        Specify the AWS key and secret used for authenticating.
        """
        return pulumi.get(self, "manual")

    @manual.setter
    def manual(self, value: Optional[pulumi.Input['AwsKmsConnectorCredentialsManualArgs']]):
        pulumi.set(self, "manual", value)


@pulumi.input_type
class AwsKmsConnectorCredentialsAssumeRoleArgs:
    def __init__(__self__, *,
                 duration: pulumi.Input[int],
                 role_arn: pulumi.Input[str],
                 external_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] duration: The duration, in seconds, of the role session. The value can range from 900 seconds (15 minutes) to 3600 seconds (1 hour). By default, the value is set to 3600 seconds. An expiration can also be specified in the client request body. The minimum value is 1 hour.
        :param pulumi.Input[str] role_arn: The ARN of the role to assume.
        :param pulumi.Input[str] external_id: If the administrator of the account to which the role belongs provided you with an external ID, then enter that value.
        """
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "role_arn", role_arn)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Input[int]:
        """
        The duration, in seconds, of the role session. The value can range from 900 seconds (15 minutes) to 3600 seconds (1 hour). By default, the value is set to 3600 seconds. An expiration can also be specified in the client request body. The minimum value is 1 hour.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: pulumi.Input[int]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        The ARN of the role to assume.
        """
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        """
        If the administrator of the account to which the role belongs provided you with an external ID, then enter that value.
        """
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)


@pulumi.input_type
class AwsKmsConnectorCredentialsManualArgs:
    def __init__(__self__, *,
                 access_key_ref: pulumi.Input[str],
                 secret_key_ref: pulumi.Input[str]):
        """
        :param pulumi.Input[str] access_key_ref: The reference to the Harness secret containing the AWS access key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[str] secret_key_ref: The reference to the Harness secret containing the AWS secret key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        pulumi.set(__self__, "access_key_ref", access_key_ref)
        pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="accessKeyRef")
    def access_key_ref(self) -> pulumi.Input[str]:
        """
        The reference to the Harness secret containing the AWS access key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "access_key_ref")

    @access_key_ref.setter
    def access_key_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_key_ref", value)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> pulumi.Input[str]:
        """
        The reference to the Harness secret containing the AWS secret key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "secret_key_ref")

    @secret_key_ref.setter
    def secret_key_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_key_ref", value)


@pulumi.input_type
class AwsSecretManagerConnectorCredentialsArgs:
    def __init__(__self__, *,
                 assume_role: Optional[pulumi.Input['AwsSecretManagerConnectorCredentialsAssumeRoleArgs']] = None,
                 inherit_from_delegate: Optional[pulumi.Input[bool]] = None,
                 manual: Optional[pulumi.Input['AwsSecretManagerConnectorCredentialsManualArgs']] = None):
        """
        :param pulumi.Input['AwsSecretManagerConnectorCredentialsAssumeRoleArgs'] assume_role: Connect using STS assume role.
        :param pulumi.Input[bool] inherit_from_delegate: Inherit the credentials from from the delegate.
        :param pulumi.Input['AwsSecretManagerConnectorCredentialsManualArgs'] manual: Specify the AWS key and secret used for authenticating.
        """
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if inherit_from_delegate is not None:
            pulumi.set(__self__, "inherit_from_delegate", inherit_from_delegate)
        if manual is not None:
            pulumi.set(__self__, "manual", manual)

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[pulumi.Input['AwsSecretManagerConnectorCredentialsAssumeRoleArgs']]:
        """
        Connect using STS assume role.
        """
        return pulumi.get(self, "assume_role")

    @assume_role.setter
    def assume_role(self, value: Optional[pulumi.Input['AwsSecretManagerConnectorCredentialsAssumeRoleArgs']]):
        pulumi.set(self, "assume_role", value)

    @property
    @pulumi.getter(name="inheritFromDelegate")
    def inherit_from_delegate(self) -> Optional[pulumi.Input[bool]]:
        """
        Inherit the credentials from from the delegate.
        """
        return pulumi.get(self, "inherit_from_delegate")

    @inherit_from_delegate.setter
    def inherit_from_delegate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "inherit_from_delegate", value)

    @property
    @pulumi.getter
    def manual(self) -> Optional[pulumi.Input['AwsSecretManagerConnectorCredentialsManualArgs']]:
        """
        Specify the AWS key and secret used for authenticating.
        """
        return pulumi.get(self, "manual")

    @manual.setter
    def manual(self, value: Optional[pulumi.Input['AwsSecretManagerConnectorCredentialsManualArgs']]):
        pulumi.set(self, "manual", value)


@pulumi.input_type
class AwsSecretManagerConnectorCredentialsAssumeRoleArgs:
    def __init__(__self__, *,
                 duration: pulumi.Input[int],
                 role_arn: pulumi.Input[str],
                 external_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] duration: The duration, in seconds, of the role session. The value can range from 900 seconds (15 minutes) to 3600 seconds (1 hour). By default, the value is set to 3600 seconds. An expiration can also be specified in the client request body. The minimum value is 1 hour.
        :param pulumi.Input[str] role_arn: The ARN of the role to assume.
        :param pulumi.Input[str] external_id: If the administrator of the account to which the role belongs provided you with an external ID, then enter that value.
        """
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "role_arn", role_arn)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Input[int]:
        """
        The duration, in seconds, of the role session. The value can range from 900 seconds (15 minutes) to 3600 seconds (1 hour). By default, the value is set to 3600 seconds. An expiration can also be specified in the client request body. The minimum value is 1 hour.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: pulumi.Input[int]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        The ARN of the role to assume.
        """
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        """
        If the administrator of the account to which the role belongs provided you with an external ID, then enter that value.
        """
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)


@pulumi.input_type
class AwsSecretManagerConnectorCredentialsManualArgs:
    def __init__(__self__, *,
                 access_key_ref: pulumi.Input[str],
                 secret_key_ref: pulumi.Input[str]):
        """
        :param pulumi.Input[str] access_key_ref: The reference to the Harness secret containing the AWS access key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[str] secret_key_ref: The reference to the Harness secret containing the AWS secret key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        pulumi.set(__self__, "access_key_ref", access_key_ref)
        pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="accessKeyRef")
    def access_key_ref(self) -> pulumi.Input[str]:
        """
        The reference to the Harness secret containing the AWS access key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "access_key_ref")

    @access_key_ref.setter
    def access_key_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_key_ref", value)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> pulumi.Input[str]:
        """
        The reference to the Harness secret containing the AWS secret key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "secret_key_ref")

    @secret_key_ref.setter
    def secret_key_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_key_ref", value)


@pulumi.input_type
class AzureCloudCostConnectorBillingExportSpecArgs:
    def __init__(__self__, *,
                 container_name: pulumi.Input[str],
                 directory_name: pulumi.Input[str],
                 report_name: pulumi.Input[str],
                 storage_account_name: pulumi.Input[str],
                 subscription_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] container_name: Name of the container.
        :param pulumi.Input[str] directory_name: Name of the directory.
        :param pulumi.Input[str] report_name: Name of the report.
        :param pulumi.Input[str] storage_account_name: Name of the storage account.
        :param pulumi.Input[str] subscription_id: Subsription Id.
        """
        pulumi.set(__self__, "container_name", container_name)
        pulumi.set(__self__, "directory_name", directory_name)
        pulumi.set(__self__, "report_name", report_name)
        pulumi.set(__self__, "storage_account_name", storage_account_name)
        pulumi.set(__self__, "subscription_id", subscription_id)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> pulumi.Input[str]:
        """
        Name of the container.
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter(name="directoryName")
    def directory_name(self) -> pulumi.Input[str]:
        """
        Name of the directory.
        """
        return pulumi.get(self, "directory_name")

    @directory_name.setter
    def directory_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "directory_name", value)

    @property
    @pulumi.getter(name="reportName")
    def report_name(self) -> pulumi.Input[str]:
        """
        Name of the report.
        """
        return pulumi.get(self, "report_name")

    @report_name.setter
    def report_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "report_name", value)

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> pulumi.Input[str]:
        """
        Name of the storage account.
        """
        return pulumi.get(self, "storage_account_name")

    @storage_account_name.setter
    def storage_account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_account_name", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> pulumi.Input[str]:
        """
        Subsription Id.
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subscription_id", value)


@pulumi.input_type
class AzureCloudProviderConnectorCredentialsArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 azure_inherit_from_delegate_details: Optional[pulumi.Input['AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsArgs']] = None,
                 azure_manual_details: Optional[pulumi.Input['AzureCloudProviderConnectorCredentialsAzureManualDetailsArgs']] = None):
        """
        :param pulumi.Input[str] type: Type can either be InheritFromDelegate or ManualConfig.
        :param pulumi.Input['AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsArgs'] azure_inherit_from_delegate_details: Authenticate to Azure Cloud Provider using details inheriting from delegate.
        :param pulumi.Input['AzureCloudProviderConnectorCredentialsAzureManualDetailsArgs'] azure_manual_details: Authenticate to Azure Cloud Provider using manual details.
        """
        pulumi.set(__self__, "type", type)
        if azure_inherit_from_delegate_details is not None:
            pulumi.set(__self__, "azure_inherit_from_delegate_details", azure_inherit_from_delegate_details)
        if azure_manual_details is not None:
            pulumi.set(__self__, "azure_manual_details", azure_manual_details)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type can either be InheritFromDelegate or ManualConfig.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="azureInheritFromDelegateDetails")
    def azure_inherit_from_delegate_details(self) -> Optional[pulumi.Input['AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsArgs']]:
        """
        Authenticate to Azure Cloud Provider using details inheriting from delegate.
        """
        return pulumi.get(self, "azure_inherit_from_delegate_details")

    @azure_inherit_from_delegate_details.setter
    def azure_inherit_from_delegate_details(self, value: Optional[pulumi.Input['AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsArgs']]):
        pulumi.set(self, "azure_inherit_from_delegate_details", value)

    @property
    @pulumi.getter(name="azureManualDetails")
    def azure_manual_details(self) -> Optional[pulumi.Input['AzureCloudProviderConnectorCredentialsAzureManualDetailsArgs']]:
        """
        Authenticate to Azure Cloud Provider using manual details.
        """
        return pulumi.get(self, "azure_manual_details")

    @azure_manual_details.setter
    def azure_manual_details(self, value: Optional[pulumi.Input['AzureCloudProviderConnectorCredentialsAzureManualDetailsArgs']]):
        pulumi.set(self, "azure_manual_details", value)


@pulumi.input_type
class AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsArgs:
    def __init__(__self__, *,
                 auth: Optional[pulumi.Input['AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsAuthArgs']] = None):
        """
        :param pulumi.Input['AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsAuthArgs'] auth: Auth to authenticate to Azure Cloud Provider using details inheriting from delegate.
        """
        if auth is not None:
            pulumi.set(__self__, "auth", auth)

    @property
    @pulumi.getter
    def auth(self) -> Optional[pulumi.Input['AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsAuthArgs']]:
        """
        Auth to authenticate to Azure Cloud Provider using details inheriting from delegate.
        """
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(self, value: Optional[pulumi.Input['AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsAuthArgs']]):
        pulumi.set(self, "auth", value)


@pulumi.input_type
class AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsAuthArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 azure_msi_auth_ua: Optional[pulumi.Input['AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsAuthAzureMsiAuthUaArgs']] = None):
        """
        :param pulumi.Input[str] type: Type can either be SystemAssignedManagedIdentity or UserAssignedManagedIdentity.
        :param pulumi.Input['AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsAuthAzureMsiAuthUaArgs'] azure_msi_auth_ua: Azure UserAssigned MSI auth details.
        """
        pulumi.set(__self__, "type", type)
        if azure_msi_auth_ua is not None:
            pulumi.set(__self__, "azure_msi_auth_ua", azure_msi_auth_ua)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type can either be SystemAssignedManagedIdentity or UserAssignedManagedIdentity.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="azureMsiAuthUa")
    def azure_msi_auth_ua(self) -> Optional[pulumi.Input['AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsAuthAzureMsiAuthUaArgs']]:
        """
        Azure UserAssigned MSI auth details.
        """
        return pulumi.get(self, "azure_msi_auth_ua")

    @azure_msi_auth_ua.setter
    def azure_msi_auth_ua(self, value: Optional[pulumi.Input['AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsAuthAzureMsiAuthUaArgs']]):
        pulumi.set(self, "azure_msi_auth_ua", value)


@pulumi.input_type
class AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsAuthAzureMsiAuthUaArgs:
    def __init__(__self__, *,
                 client_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] client_id: Client Id of the ManagedIdentity resource.
        """
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Client Id of the ManagedIdentity resource.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)


@pulumi.input_type
class AzureCloudProviderConnectorCredentialsAzureManualDetailsArgs:
    def __init__(__self__, *,
                 application_id: Optional[pulumi.Input[str]] = None,
                 auth: Optional[pulumi.Input['AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthArgs']] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] application_id: Application ID of the Azure App.
        :param pulumi.Input['AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthArgs'] auth: Contains Azure auth details.
        :param pulumi.Input[str] tenant_id: The Azure Active Directory (AAD) directory ID where you created your application.
        """
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[str]]:
        """
        Application ID of the Azure App.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter
    def auth(self) -> Optional[pulumi.Input['AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthArgs']]:
        """
        Contains Azure auth details.
        """
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(self, value: Optional[pulumi.Input['AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthArgs']]):
        pulumi.set(self, "auth", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Azure Active Directory (AAD) directory ID where you created your application.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


@pulumi.input_type
class AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthArgs:
    def __init__(__self__, *,
                 azure_client_key_cert: Optional[pulumi.Input['AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthAzureClientKeyCertArgs']] = None,
                 azure_client_secret_key: Optional[pulumi.Input['AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthAzureClientSecretKeyArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthAzureClientKeyCertArgs'] azure_client_key_cert: Azure client key certificate details.
        :param pulumi.Input['AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthAzureClientSecretKeyArgs'] azure_client_secret_key: Azure Client Secret Key details.
        :param pulumi.Input[str] type: Type can either be Certificate or Secret.
        """
        if azure_client_key_cert is not None:
            pulumi.set(__self__, "azure_client_key_cert", azure_client_key_cert)
        if azure_client_secret_key is not None:
            pulumi.set(__self__, "azure_client_secret_key", azure_client_secret_key)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="azureClientKeyCert")
    def azure_client_key_cert(self) -> Optional[pulumi.Input['AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthAzureClientKeyCertArgs']]:
        """
        Azure client key certificate details.
        """
        return pulumi.get(self, "azure_client_key_cert")

    @azure_client_key_cert.setter
    def azure_client_key_cert(self, value: Optional[pulumi.Input['AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthAzureClientKeyCertArgs']]):
        pulumi.set(self, "azure_client_key_cert", value)

    @property
    @pulumi.getter(name="azureClientSecretKey")
    def azure_client_secret_key(self) -> Optional[pulumi.Input['AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthAzureClientSecretKeyArgs']]:
        """
        Azure Client Secret Key details.
        """
        return pulumi.get(self, "azure_client_secret_key")

    @azure_client_secret_key.setter
    def azure_client_secret_key(self, value: Optional[pulumi.Input['AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthAzureClientSecretKeyArgs']]):
        pulumi.set(self, "azure_client_secret_key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type can either be Certificate or Secret.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthAzureClientKeyCertArgs:
    def __init__(__self__, *,
                 certificate_ref: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] certificate_ref: Reference of the secret for the certificate. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        if certificate_ref is not None:
            pulumi.set(__self__, "certificate_ref", certificate_ref)

    @property
    @pulumi.getter(name="certificateRef")
    def certificate_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Reference of the secret for the certificate. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "certificate_ref")

    @certificate_ref.setter
    def certificate_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_ref", value)


@pulumi.input_type
class AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthAzureClientSecretKeyArgs:
    def __init__(__self__, *,
                 secret_ref: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] secret_ref: Reference of the secret for the secret key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Reference of the secret for the secret key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_ref", value)


@pulumi.input_type
class BitbucketConnectorApiAuthenticationArgs:
    def __init__(__self__, *,
                 token_ref: pulumi.Input[str],
                 username: Optional[pulumi.Input[str]] = None,
                 username_ref: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] token_ref: Personal access token for interacting with the BitBucket api. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[str] username: The username used for connecting to the api.
        :param pulumi.Input[str] username_ref: The name of the Harness secret containing the username. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        pulumi.set(__self__, "token_ref", token_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if username_ref is not None:
            pulumi.set(__self__, "username_ref", username_ref)

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> pulumi.Input[str]:
        """
        Personal access token for interacting with the BitBucket api. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "token_ref")

    @token_ref.setter
    def token_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_ref", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        The username used for connecting to the api.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="usernameRef")
    def username_ref(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Harness secret containing the username. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "username_ref")

    @username_ref.setter
    def username_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_ref", value)


@pulumi.input_type
class BitbucketConnectorCredentialsArgs:
    def __init__(__self__, *,
                 http: Optional[pulumi.Input['BitbucketConnectorCredentialsHttpArgs']] = None,
                 ssh: Optional[pulumi.Input['BitbucketConnectorCredentialsSshArgs']] = None):
        """
        :param pulumi.Input['BitbucketConnectorCredentialsHttpArgs'] http: Authenticate using Username and password over http(s) for the connection.
        :param pulumi.Input['BitbucketConnectorCredentialsSshArgs'] ssh: Authenticate using SSH for the connection.
        """
        if http is not None:
            pulumi.set(__self__, "http", http)
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)

    @property
    @pulumi.getter
    def http(self) -> Optional[pulumi.Input['BitbucketConnectorCredentialsHttpArgs']]:
        """
        Authenticate using Username and password over http(s) for the connection.
        """
        return pulumi.get(self, "http")

    @http.setter
    def http(self, value: Optional[pulumi.Input['BitbucketConnectorCredentialsHttpArgs']]):
        pulumi.set(self, "http", value)

    @property
    @pulumi.getter
    def ssh(self) -> Optional[pulumi.Input['BitbucketConnectorCredentialsSshArgs']]:
        """
        Authenticate using SSH for the connection.
        """
        return pulumi.get(self, "ssh")

    @ssh.setter
    def ssh(self, value: Optional[pulumi.Input['BitbucketConnectorCredentialsSshArgs']]):
        pulumi.set(self, "ssh", value)


@pulumi.input_type
class BitbucketConnectorCredentialsHttpArgs:
    def __init__(__self__, *,
                 password_ref: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 username_ref: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] password_ref: Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[str] username: Username to use for authentication.
        :param pulumi.Input[str] username_ref: Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        if password_ref is not None:
            pulumi.set(__self__, "password_ref", password_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if username_ref is not None:
            pulumi.set(__self__, "username_ref", username_ref)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "password_ref")

    @password_ref.setter
    def password_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_ref", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username to use for authentication.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="usernameRef")
    def username_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "username_ref")

    @username_ref.setter
    def username_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_ref", value)


@pulumi.input_type
class BitbucketConnectorCredentialsSshArgs:
    def __init__(__self__, *,
                 ssh_key_ref: pulumi.Input[str]):
        """
        :param pulumi.Input[str] ssh_key_ref: Reference to the Harness secret containing the ssh key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        pulumi.set(__self__, "ssh_key_ref", ssh_key_ref)

    @property
    @pulumi.getter(name="sshKeyRef")
    def ssh_key_ref(self) -> pulumi.Input[str]:
        """
        Reference to the Harness secret containing the ssh key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "ssh_key_ref")

    @ssh_key_ref.setter
    def ssh_key_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key_ref", value)


@pulumi.input_type
class DockerConnectorCredentialsArgs:
    def __init__(__self__, *,
                 password_ref: pulumi.Input[str],
                 username: Optional[pulumi.Input[str]] = None,
                 username_ref: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] password_ref: The reference to the Harness secret containing the password to use for the docker registry. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[str] username: The username to use for the docker registry.
        :param pulumi.Input[str] username_ref: The reference to the Harness secret containing the username to use for the docker registry. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        pulumi.set(__self__, "password_ref", password_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if username_ref is not None:
            pulumi.set(__self__, "username_ref", username_ref)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> pulumi.Input[str]:
        """
        The reference to the Harness secret containing the password to use for the docker registry. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "password_ref")

    @password_ref.setter
    def password_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "password_ref", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        The username to use for the docker registry.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="usernameRef")
    def username_ref(self) -> Optional[pulumi.Input[str]]:
        """
        The reference to the Harness secret containing the username to use for the docker registry. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "username_ref")

    @username_ref.setter
    def username_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_ref", value)


@pulumi.input_type
class ElasticsearchConnectorApiTokenArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret_ref: pulumi.Input[str]):
        """
        :param pulumi.Input[str] client_id: The client id used for connecting to ElasticSearch.
        :param pulumi.Input[str] client_secret_ref: Reference to the Harness secret containing the ElasticSearch client secret. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret_ref", client_secret_ref)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        """
        The client id used for connecting to ElasticSearch.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecretRef")
    def client_secret_ref(self) -> pulumi.Input[str]:
        """
        Reference to the Harness secret containing the ElasticSearch client secret. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "client_secret_ref")

    @client_secret_ref.setter
    def client_secret_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret_ref", value)


@pulumi.input_type
class ElasticsearchConnectorNoAuthenticationArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ElasticsearchConnectorUsernamePasswordArgs:
    def __init__(__self__, *,
                 password_ref: pulumi.Input[str],
                 username: pulumi.Input[str]):
        """
        :param pulumi.Input[str] password_ref: Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[str] username: Username to use for authentication.
        """
        pulumi.set(__self__, "password_ref", password_ref)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> pulumi.Input[str]:
        """
        Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "password_ref")

    @password_ref.setter
    def password_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "password_ref", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        Username to use for authentication.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class EnvironmentClustersMappingClusterArgs:
    def __init__(__self__, *,
                 identifier: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] identifier: account Identifier of the account
        :param pulumi.Input[str] name: name of the cluster
        :param pulumi.Input[str] scope: scope at which the cluster exists in harness gitops, project vs org vs account
        """
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        account Identifier of the account
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the cluster
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        scope at which the cluster exists in harness gitops, project vs org vs account
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)


@pulumi.input_type
class FeatureFlagGitDetailsArgs:
    def __init__(__self__, *,
                 commit_msg: pulumi.Input[str]):
        """
        :param pulumi.Input[str] commit_msg: The commit message to use as part of a gitsync operation
        """
        pulumi.set(__self__, "commit_msg", commit_msg)

    @property
    @pulumi.getter(name="commitMsg")
    def commit_msg(self) -> pulumi.Input[str]:
        """
        The commit message to use as part of a gitsync operation
        """
        return pulumi.get(self, "commit_msg")

    @commit_msg.setter
    def commit_msg(self, value: pulumi.Input[str]):
        pulumi.set(self, "commit_msg", value)


@pulumi.input_type
class FeatureFlagVariationArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[str],
                 identifier: pulumi.Input[str],
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] description: The description of the variation
        :param pulumi.Input[str] identifier: The identifier of the variation
        :param pulumi.Input[str] name: The user friendly name of the variation
        :param pulumi.Input[str] value: The value of the variation
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        """
        The description of the variation
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def identifier(self) -> pulumi.Input[str]:
        """
        The identifier of the variation
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The user friendly name of the variation
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value of the variation
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class FiltersFilterPropertiesArgs:
    def __init__(__self__, *,
                 filter_type: pulumi.Input[str],
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] filter_type: Corresponding Entity of the filter. Currently supported types are {Connector, DelegateProfile, Delegate, EnvironmentGroup, FileStore, Environment}.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tags to associate with the resource. Tags should be in the form `name:value`.
        """
        pulumi.set(__self__, "filter_type", filter_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> pulumi.Input[str]:
        """
        Corresponding Entity of the filter. Currently supported types are {Connector, DelegateProfile, Delegate, EnvironmentGroup, FileStore, Environment}.
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Tags to associate with the resource. Tags should be in the form `name:value`.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class GcpCloudCostConnectorBillingExportSpecArgs:
    def __init__(__self__, *,
                 data_set_id: pulumi.Input[str],
                 table_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] data_set_id: Data Set Id.
        :param pulumi.Input[str] table_id: Table Id.
        """
        pulumi.set(__self__, "data_set_id", data_set_id)
        pulumi.set(__self__, "table_id", table_id)

    @property
    @pulumi.getter(name="dataSetId")
    def data_set_id(self) -> pulumi.Input[str]:
        """
        Data Set Id.
        """
        return pulumi.get(self, "data_set_id")

    @data_set_id.setter
    def data_set_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_id", value)

    @property
    @pulumi.getter(name="tableId")
    def table_id(self) -> pulumi.Input[str]:
        """
        Table Id.
        """
        return pulumi.get(self, "table_id")

    @table_id.setter
    def table_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "table_id", value)


@pulumi.input_type
class GcpConnectorInheritFromDelegateArgs:
    def __init__(__self__, *,
                 delegate_selectors: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] delegate_selectors: The delegates to inherit the credentials from.
        """
        pulumi.set(__self__, "delegate_selectors", delegate_selectors)

    @property
    @pulumi.getter(name="delegateSelectors")
    def delegate_selectors(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The delegates to inherit the credentials from.
        """
        return pulumi.get(self, "delegate_selectors")

    @delegate_selectors.setter
    def delegate_selectors(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "delegate_selectors", value)


@pulumi.input_type
class GcpConnectorManualArgs:
    def __init__(__self__, *,
                 delegate_selectors: pulumi.Input[Sequence[pulumi.Input[str]]],
                 secret_key_ref: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] delegate_selectors: The delegates to connect with.
        :param pulumi.Input[str] secret_key_ref: Reference to the Harness secret containing the secret key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        pulumi.set(__self__, "delegate_selectors", delegate_selectors)
        pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="delegateSelectors")
    def delegate_selectors(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The delegates to connect with.
        """
        return pulumi.get(self, "delegate_selectors")

    @delegate_selectors.setter
    def delegate_selectors(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "delegate_selectors", value)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> pulumi.Input[str]:
        """
        Reference to the Harness secret containing the secret key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "secret_key_ref")

    @secret_key_ref.setter
    def secret_key_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_key_ref", value)


@pulumi.input_type
class GitConnectorCredentialsArgs:
    def __init__(__self__, *,
                 http: Optional[pulumi.Input['GitConnectorCredentialsHttpArgs']] = None,
                 ssh: Optional[pulumi.Input['GitConnectorCredentialsSshArgs']] = None):
        """
        :param pulumi.Input['GitConnectorCredentialsHttpArgs'] http: Authenticate using Username and password over http(s) for the connection.
        :param pulumi.Input['GitConnectorCredentialsSshArgs'] ssh: Authenticate using SSH for the connection.
        """
        if http is not None:
            pulumi.set(__self__, "http", http)
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)

    @property
    @pulumi.getter
    def http(self) -> Optional[pulumi.Input['GitConnectorCredentialsHttpArgs']]:
        """
        Authenticate using Username and password over http(s) for the connection.
        """
        return pulumi.get(self, "http")

    @http.setter
    def http(self, value: Optional[pulumi.Input['GitConnectorCredentialsHttpArgs']]):
        pulumi.set(self, "http", value)

    @property
    @pulumi.getter
    def ssh(self) -> Optional[pulumi.Input['GitConnectorCredentialsSshArgs']]:
        """
        Authenticate using SSH for the connection.
        """
        return pulumi.get(self, "ssh")

    @ssh.setter
    def ssh(self, value: Optional[pulumi.Input['GitConnectorCredentialsSshArgs']]):
        pulumi.set(self, "ssh", value)


@pulumi.input_type
class GitConnectorCredentialsHttpArgs:
    def __init__(__self__, *,
                 password_ref: pulumi.Input[str],
                 username: Optional[pulumi.Input[str]] = None,
                 username_ref: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] password_ref: Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[str] username: Username to use for authentication.
        :param pulumi.Input[str] username_ref: Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        pulumi.set(__self__, "password_ref", password_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if username_ref is not None:
            pulumi.set(__self__, "username_ref", username_ref)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> pulumi.Input[str]:
        """
        Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "password_ref")

    @password_ref.setter
    def password_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "password_ref", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username to use for authentication.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="usernameRef")
    def username_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "username_ref")

    @username_ref.setter
    def username_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_ref", value)


@pulumi.input_type
class GitConnectorCredentialsSshArgs:
    def __init__(__self__, *,
                 ssh_key_ref: pulumi.Input[str]):
        """
        :param pulumi.Input[str] ssh_key_ref: Reference to the Harness secret containing the ssh key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        pulumi.set(__self__, "ssh_key_ref", ssh_key_ref)

    @property
    @pulumi.getter(name="sshKeyRef")
    def ssh_key_ref(self) -> pulumi.Input[str]:
        """
        Reference to the Harness secret containing the ssh key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "ssh_key_ref")

    @ssh_key_ref.setter
    def ssh_key_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key_ref", value)


@pulumi.input_type
class GitOpsAgentMetadataArgs:
    def __init__(__self__, *,
                 high_availability: Optional[pulumi.Input[bool]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] high_availability: Indicates if the deployment should be deployed using the deploy-ha.yaml
        :param pulumi.Input[str] namespace: The k8s namespace that this agent resides in.
        """
        if high_availability is not None:
            pulumi.set(__self__, "high_availability", high_availability)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter(name="highAvailability")
    def high_availability(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if the deployment should be deployed using the deploy-ha.yaml
        """
        return pulumi.get(self, "high_availability")

    @high_availability.setter
    def high_availability(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "high_availability", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The k8s namespace that this agent resides in.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class GitOpsApplicationsApplicationArgs:
    def __init__(__self__, *,
                 metadatas: pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationMetadataArgs']]],
                 specs: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationMetadataArgs']]] metadatas: Metadata corresponding to the resources. This includes all the objects a user must create.
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecArgs']]] specs: Specifications of the GitOps application. This includes the repository URL, application definition, source, destination and sync policy.
        """
        pulumi.set(__self__, "metadatas", metadatas)
        if specs is not None:
            pulumi.set(__self__, "specs", specs)

    @property
    @pulumi.getter
    def metadatas(self) -> pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationMetadataArgs']]]:
        """
        Metadata corresponding to the resources. This includes all the objects a user must create.
        """
        return pulumi.get(self, "metadatas")

    @metadatas.setter
    def metadatas(self, value: pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationMetadataArgs']]]):
        pulumi.set(self, "metadatas", value)

    @property
    @pulumi.getter
    def specs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecArgs']]]]:
        """
        Specifications of the GitOps application. This includes the repository URL, application definition, source, destination and sync policy.
        """
        return pulumi.get(self, "specs")

    @specs.setter
    def specs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecArgs']]]]):
        pulumi.set(self, "specs", value)


@pulumi.input_type
class GitOpsApplicationsApplicationMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 finalizers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 generate_name: Optional[pulumi.Input[str]] = None,
                 generation: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 owner_references: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationMetadataOwnerReferenceArgs']]]] = None,
                 uid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations are unstructured key value pairs corresponding to a resource. External tools set these to store and retrieve arbitrary metadata.
        :param pulumi.Input[str] cluster_name: Name of the cluster corresponding to the object. API server ignores this if set in any create or update request.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] finalizers: Before the object is removed from the register, it must be empty. Each element serves as a unique identifier for the component that is accountable for removing that entry from the list. Entries in this list can only be removed if the object's deletionTimestamp is not null. The processing and removal of finalizers can happen in any sequence. No order is enforced as it may block the finalizers. Finalizers is a shared field that can be reordered by any actor with authority. If the finalizer list is processed in order, this could result in a scenario where the component in charge of the list's first finalizer is waiting for a signal (generated by a field value, an external system, or another) produced by a component in charge of the list's later finalizer.
        :param pulumi.Input[str] generate_name: An optional prefix that the server will only apply if the Name field is empty to create a unique name. The name returned to the client will differ from the name passed if this field is used. A unique suffix will be added to this value as well. The supplied value must adhere to the same validation guidelines as the Name field and may be reduced by the suffix length necessary to ensure that it is unique on the server. The server will NOT return a 409 if this field is supplied and the created name already exists; instead, it will either return 201 Created or 500 with Reason ServerTimeout, indicating that a unique name could not be found in the allotted time and the client should try again later.
        :param pulumi.Input[str] generation: A sequence number representing a specific generation of the desired state. This is a read-only value populated by the system.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services.
        :param pulumi.Input[str] name: Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Name cannot be updated.
        :param pulumi.Input[str] namespace: Namespace of the GitOps application. An empty namespace is equivalent to the "default" namespace.
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationMetadataOwnerReferenceArgs']]] owner_references: List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
        :param pulumi.Input[str] uid: UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if generate_name is not None:
            pulumi.set(__self__, "generate_name", generate_name)
        if generation is not None:
            pulumi.set(__self__, "generation", generation)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if owner_references is not None:
            pulumi.set(__self__, "owner_references", owner_references)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations are unstructured key value pairs corresponding to a resource. External tools set these to store and retrieve arbitrary metadata.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the cluster corresponding to the object. API server ignores this if set in any create or update request.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Before the object is removed from the register, it must be empty. Each element serves as a unique identifier for the component that is accountable for removing that entry from the list. Entries in this list can only be removed if the object's deletionTimestamp is not null. The processing and removal of finalizers can happen in any sequence. No order is enforced as it may block the finalizers. Finalizers is a shared field that can be reordered by any actor with authority. If the finalizer list is processed in order, this could result in a scenario where the component in charge of the list's first finalizer is waiting for a signal (generated by a field value, an external system, or another) produced by a component in charge of the list's later finalizer.
        """
        return pulumi.get(self, "finalizers")

    @finalizers.setter
    def finalizers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "finalizers", value)

    @property
    @pulumi.getter(name="generateName")
    def generate_name(self) -> Optional[pulumi.Input[str]]:
        """
        An optional prefix that the server will only apply if the Name field is empty to create a unique name. The name returned to the client will differ from the name passed if this field is used. A unique suffix will be added to this value as well. The supplied value must adhere to the same validation guidelines as the Name field and may be reduced by the suffix length necessary to ensure that it is unique on the server. The server will NOT return a 409 if this field is supplied and the created name already exists; instead, it will either return 201 Created or 500 with Reason ServerTimeout, indicating that a unique name could not be found in the allotted time and the client should try again later.
        """
        return pulumi.get(self, "generate_name")

    @generate_name.setter
    def generate_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "generate_name", value)

    @property
    @pulumi.getter
    def generation(self) -> Optional[pulumi.Input[str]]:
        """
        A sequence number representing a specific generation of the desired state. This is a read-only value populated by the system.
        """
        return pulumi.get(self, "generation")

    @generation.setter
    def generation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "generation", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Name cannot be updated.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace of the GitOps application. An empty namespace is equivalent to the "default" namespace.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="ownerReferences")
    def owner_references(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationMetadataOwnerReferenceArgs']]]]:
        """
        List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
        """
        return pulumi.get(self, "owner_references")

    @owner_references.setter
    def owner_references(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationMetadataOwnerReferenceArgs']]]]):
        pulumi.set(self, "owner_references", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        """
        UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)


@pulumi.input_type
class GitOpsApplicationsApplicationMetadataOwnerReferenceArgs:
    def __init__(__self__, *,
                 api_version: Optional[pulumi.Input[str]] = None,
                 block_owner_deletion: Optional[pulumi.Input[bool]] = None,
                 controller: Optional[pulumi.Input[bool]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] api_version: API version of the referent.
        :param pulumi.Input[bool] block_owner_deletion: If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
        :param pulumi.Input[bool] controller: Indicates if the reference points to the managing controller.
        :param pulumi.Input[str] kind: Kind of the referent.
        :param pulumi.Input[str] name: Name of the referent.
        :param pulumi.Input[str] uid: UID of the referent.
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if block_owner_deletion is not None:
            pulumi.set(__self__, "block_owner_deletion", block_owner_deletion)
        if controller is not None:
            pulumi.set(__self__, "controller", controller)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        API version of the referent.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter(name="blockOwnerDeletion")
    def block_owner_deletion(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
        """
        return pulumi.get(self, "block_owner_deletion")

    @block_owner_deletion.setter
    def block_owner_deletion(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "block_owner_deletion", value)

    @property
    @pulumi.getter
    def controller(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if the reference points to the managing controller.
        """
        return pulumi.get(self, "controller")

    @controller.setter
    def controller(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "controller", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind of the referent.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        """
        UID of the referent.
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)


@pulumi.input_type
class GitOpsApplicationsApplicationSpecArgs:
    def __init__(__self__, *,
                 destinations: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecDestinationArgs']]]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceArgs']]]] = None,
                 sync_policies: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSyncPolicyArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecDestinationArgs']]] destinations: Information about the GitOps application's destination.
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceArgs']]] sources: Contains all information about the source of a GitOps application.
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSyncPolicyArgs']]] sync_policies: Controls when a sync will be performed in response to updates in git.
        """
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policies is not None:
            pulumi.set(__self__, "sync_policies", sync_policies)

    @property
    @pulumi.getter
    def destinations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecDestinationArgs']]]]:
        """
        Information about the GitOps application's destination.
        """
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecDestinationArgs']]]]):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter
    def sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceArgs']]]]:
        """
        Contains all information about the source of a GitOps application.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceArgs']]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter(name="syncPolicies")
    def sync_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSyncPolicyArgs']]]]:
        """
        Controls when a sync will be performed in response to updates in git.
        """
        return pulumi.get(self, "sync_policies")

    @sync_policies.setter
    def sync_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSyncPolicyArgs']]]]):
        pulumi.set(self, "sync_policies", value)


@pulumi.input_type
class GitOpsApplicationsApplicationSpecDestinationArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: URL of the target cluster and must be set to the kubernetes control plane API.
        :param pulumi.Input[str] namespace: Target namespace of the GitOps application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
        :param pulumi.Input[str] server: Server of the destination of the GitOps application.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        URL of the target cluster and must be set to the kubernetes control plane API.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Target namespace of the GitOps application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        Server of the destination of the GitOps application.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)


@pulumi.input_type
class GitOpsApplicationsApplicationSpecSourceArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 repo_url: pulumi.Input[str],
                 target_revision: pulumi.Input[str],
                 chart: Optional[pulumi.Input[str]] = None,
                 directories: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceDirectoryArgs']]]] = None,
                 helms: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceHelmArgs']]]] = None,
                 ksonnets: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceKsonnetArgs']]]] = None,
                 kustomizes: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceKustomizeArgs']]]] = None,
                 plugins: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourcePluginArgs']]]] = None):
        """
        :param pulumi.Input[str] path: Directory path within the git repository, and is only valid for the GitOps applications sourced from git.
        :param pulumi.Input[str] repo_url: URL to the repository (git or helm) that contains the GitOps application manifests.
        :param pulumi.Input[str] target_revision: Revision of the source to sync the GitOps application to. In case of git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag of the chart's version.
        :param pulumi.Input[str] chart: Helm chart name, and must be specified for the GitOps applications sourced from a helm repo.
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceDirectoryArgs']]] directories: Options for applications of type plain YAML or Jsonnet.
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceHelmArgs']]] helms: Holds helm specific options.
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceKsonnetArgs']]] ksonnets: Ksonnet specific options.
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceKustomizeArgs']]] kustomizes: Options specific to a GitOps application source specific to Kustomize.
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourcePluginArgs']]] plugins: Options specific to config management plugins.
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "repo_url", repo_url)
        pulumi.set(__self__, "target_revision", target_revision)
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directories is not None:
            pulumi.set(__self__, "directories", directories)
        if helms is not None:
            pulumi.set(__self__, "helms", helms)
        if ksonnets is not None:
            pulumi.set(__self__, "ksonnets", ksonnets)
        if kustomizes is not None:
            pulumi.set(__self__, "kustomizes", kustomizes)
        if plugins is not None:
            pulumi.set(__self__, "plugins", plugins)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Directory path within the git repository, and is only valid for the GitOps applications sourced from git.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> pulumi.Input[str]:
        """
        URL to the repository (git or helm) that contains the GitOps application manifests.
        """
        return pulumi.get(self, "repo_url")

    @repo_url.setter
    def repo_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "repo_url", value)

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> pulumi.Input[str]:
        """
        Revision of the source to sync the GitOps application to. In case of git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag of the chart's version.
        """
        return pulumi.get(self, "target_revision")

    @target_revision.setter
    def target_revision(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_revision", value)

    @property
    @pulumi.getter
    def chart(self) -> Optional[pulumi.Input[str]]:
        """
        Helm chart name, and must be specified for the GitOps applications sourced from a helm repo.
        """
        return pulumi.get(self, "chart")

    @chart.setter
    def chart(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chart", value)

    @property
    @pulumi.getter
    def directories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceDirectoryArgs']]]]:
        """
        Options for applications of type plain YAML or Jsonnet.
        """
        return pulumi.get(self, "directories")

    @directories.setter
    def directories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceDirectoryArgs']]]]):
        pulumi.set(self, "directories", value)

    @property
    @pulumi.getter
    def helms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceHelmArgs']]]]:
        """
        Holds helm specific options.
        """
        return pulumi.get(self, "helms")

    @helms.setter
    def helms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceHelmArgs']]]]):
        pulumi.set(self, "helms", value)

    @property
    @pulumi.getter
    def ksonnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceKsonnetArgs']]]]:
        """
        Ksonnet specific options.
        """
        return pulumi.get(self, "ksonnets")

    @ksonnets.setter
    def ksonnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceKsonnetArgs']]]]):
        pulumi.set(self, "ksonnets", value)

    @property
    @pulumi.getter
    def kustomizes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceKustomizeArgs']]]]:
        """
        Options specific to a GitOps application source specific to Kustomize.
        """
        return pulumi.get(self, "kustomizes")

    @kustomizes.setter
    def kustomizes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceKustomizeArgs']]]]):
        pulumi.set(self, "kustomizes", value)

    @property
    @pulumi.getter
    def plugins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourcePluginArgs']]]]:
        """
        Options specific to config management plugins.
        """
        return pulumi.get(self, "plugins")

    @plugins.setter
    def plugins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourcePluginArgs']]]]):
        pulumi.set(self, "plugins", value)


@pulumi.input_type
class GitOpsApplicationsApplicationSpecSourceDirectoryArgs:
    def __init__(__self__, *,
                 exclude: Optional[pulumi.Input[str]] = None,
                 include: Optional[pulumi.Input[str]] = None,
                 jsonnets: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceDirectoryJsonnetArgs']]]] = None,
                 recurse: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation.
        :param pulumi.Input[str] include: Glob pattern to match paths against that should be explicitly included during manifest generation.
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceDirectoryJsonnetArgs']]] jsonnets: Options specific to applications of type Jsonnet.
        :param pulumi.Input[bool] recurse: Indicates to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnets is not None:
            pulumi.set(__self__, "jsonnets", jsonnets)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[pulumi.Input[str]]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation.
        """
        return pulumi.get(self, "exclude")

    @exclude.setter
    def exclude(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exclude", value)

    @property
    @pulumi.getter
    def include(self) -> Optional[pulumi.Input[str]]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation.
        """
        return pulumi.get(self, "include")

    @include.setter
    def include(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "include", value)

    @property
    @pulumi.getter
    def jsonnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceDirectoryJsonnetArgs']]]]:
        """
        Options specific to applications of type Jsonnet.
        """
        return pulumi.get(self, "jsonnets")

    @jsonnets.setter
    def jsonnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceDirectoryJsonnetArgs']]]]):
        pulumi.set(self, "jsonnets", value)

    @property
    @pulumi.getter
    def recurse(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")

    @recurse.setter
    def recurse(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recurse", value)


@pulumi.input_type
class GitOpsApplicationsApplicationSpecSourceDirectoryJsonnetArgs:
    def __init__(__self__, *,
                 ext_vars: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceDirectoryJsonnetExtVarArgs']]]] = None,
                 libs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tlas: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceDirectoryJsonnetTlaArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceDirectoryJsonnetExtVarArgs']]] ext_vars: List of jsonnet external variables.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] libs: Additional library search dirs.
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceDirectoryJsonnetTlaArgs']]] tlas: List of jsonnet top-level arguments(TLAS).
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceDirectoryJsonnetExtVarArgs']]]]:
        """
        List of jsonnet external variables.
        """
        return pulumi.get(self, "ext_vars")

    @ext_vars.setter
    def ext_vars(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceDirectoryJsonnetExtVarArgs']]]]):
        pulumi.set(self, "ext_vars", value)

    @property
    @pulumi.getter
    def libs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @libs.setter
    def libs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "libs", value)

    @property
    @pulumi.getter
    def tlas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceDirectoryJsonnetTlaArgs']]]]:
        """
        List of jsonnet top-level arguments(TLAS).
        """
        return pulumi.get(self, "tlas")

    @tlas.setter
    def tlas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceDirectoryJsonnetTlaArgs']]]]):
        pulumi.set(self, "tlas", value)


@pulumi.input_type
class GitOpsApplicationsApplicationSpecSourceDirectoryJsonnetExtVarArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] code: Code of the external variables of jsonnet application.
        :param pulumi.Input[str] name: Name of the external variables of jsonnet application.
        :param pulumi.Input[str] value: Value of the external variables of jsonnet application.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[bool]]:
        """
        Code of the external variables of jsonnet application.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the external variables of jsonnet application.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value of the external variables of jsonnet application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GitOpsApplicationsApplicationSpecSourceDirectoryJsonnetTlaArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] code: Code of the TLAS of the jsonnet application.
        :param pulumi.Input[str] name: Name of the TLAS of the jsonnet application.
        :param pulumi.Input[str] value: Value of the TLAS of the jsonnet application.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[bool]]:
        """
        Code of the TLAS of the jsonnet application.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the TLAS of the jsonnet application.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value of the TLAS of the jsonnet application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GitOpsApplicationsApplicationSpecSourceHelmArgs:
    def __init__(__self__, *,
                 file_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceHelmFileParameterArgs']]]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceHelmParameterArgs']]]] = None,
                 pass_credentials: Optional[pulumi.Input[bool]] = None,
                 release_name: Optional[pulumi.Input[str]] = None,
                 value_files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 values: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceHelmFileParameterArgs']]] file_parameters: File parameters to the helm template.
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceHelmParameterArgs']]] parameters: List of helm parameters which are passed to the helm template command upon manifest generation.
        :param pulumi.Input[bool] pass_credentials: Indicates if to pass credentials to all domains (helm's --pass-credentials)
        :param pulumi.Input[str] release_name: Helm release name to use. If omitted it will use the GitOps application name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] value_files: List of helm value files to use when generating a template.
        :param pulumi.Input[str] values: Helm values to be passed to helm template, typically defined as a block.
        :param pulumi.Input[str] version: Helm version to use for templating (either "2" or "3")
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceHelmFileParameterArgs']]]]:
        """
        File parameters to the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @file_parameters.setter
    def file_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceHelmFileParameterArgs']]]]):
        pulumi.set(self, "file_parameters", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceHelmParameterArgs']]]]:
        """
        List of helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceHelmParameterArgs']]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if to pass credentials to all domains (helm's --pass-credentials)
        """
        return pulumi.get(self, "pass_credentials")

    @pass_credentials.setter
    def pass_credentials(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pass_credentials", value)

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[pulumi.Input[str]]:
        """
        Helm release name to use. If omitted it will use the GitOps application name.
        """
        return pulumi.get(self, "release_name")

    @release_name.setter
    def release_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release_name", value)

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @value_files.setter
    def value_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "value_files", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[str]]:
        """
        Helm values to be passed to helm template, typically defined as a block.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Helm version to use for templating (either "2" or "3")
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class GitOpsApplicationsApplicationSpecSourceHelmFileParameterArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of the helm parameter.
        :param pulumi.Input[str] path: Path to the file containing the values of the helm parameter.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the helm parameter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to the file containing the values of the helm parameter.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class GitOpsApplicationsApplicationSpecSourceHelmParameterArgs:
    def __init__(__self__, *,
                 force_string: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] force_string: Indicates if helm should interpret booleans and numbers as strings.
        :param pulumi.Input[str] name: Name of the helm parameter.
        :param pulumi.Input[str] value: Value of the Helm parameter.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if helm should interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @force_string.setter
    def force_string(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_string", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the helm parameter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value of the Helm parameter.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GitOpsApplicationsApplicationSpecSourceKsonnetArgs:
    def __init__(__self__, *,
                 environment: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceKsonnetParameterArgs']]]] = None):
        """
        :param pulumi.Input[str] environment: Ksonnet application environment name.
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceKsonnetParameterArgs']]] parameters: List of ksonnet component parameter override values.
        """
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[str]]:
        """
        Ksonnet application environment name.
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceKsonnetParameterArgs']]]]:
        """
        List of ksonnet component parameter override values.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourceKsonnetParameterArgs']]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class GitOpsApplicationsApplicationSpecSourceKsonnetParameterArgs:
    def __init__(__self__, *,
                 component: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] component: Component of the parameter of the ksonnet application.
        :param pulumi.Input[str] name: Name of the parameter of the ksonnet application.
        :param pulumi.Input[str] value: Value of the parameter of the ksonnet application.
        """
        if component is not None:
            pulumi.set(__self__, "component", component)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def component(self) -> Optional[pulumi.Input[str]]:
        """
        Component of the parameter of the ksonnet application.
        """
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the parameter of the ksonnet application.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value of the parameter of the ksonnet application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GitOpsApplicationsApplicationSpecSourceKustomizeArgs:
    def __init__(__self__, *,
                 common_annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 common_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 force_common_annotations: Optional[pulumi.Input[bool]] = None,
                 force_common_labels: Optional[pulumi.Input[bool]] = None,
                 images: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name_prefix: Optional[pulumi.Input[str]] = None,
                 name_suffix: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] common_annotations: List of additional annotations to add to rendered manifests.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] common_labels: List of additional labels to add to rendered manifests.
        :param pulumi.Input[bool] force_common_annotations: Indicates if to force applying common annotations to resources for kustomize apps.
        :param pulumi.Input[bool] force_common_labels: Indicates if to force apply common labels to resources for kustomize apps.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] images: List of kustomize image override specifications.
        :param pulumi.Input[str] name_prefix: Prefix prepended to resources for kustomize apps.
        :param pulumi.Input[str] name_suffix: Suffix appended to resources for kustomize apps.
        :param pulumi.Input[str] version: Version of kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if force_common_annotations is not None:
            pulumi.set(__self__, "force_common_annotations", force_common_annotations)
        if force_common_labels is not None:
            pulumi.set(__self__, "force_common_labels", force_common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @common_annotations.setter
    def common_annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "common_annotations", value)

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @common_labels.setter
    def common_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "common_labels", value)

    @property
    @pulumi.getter(name="forceCommonAnnotations")
    def force_common_annotations(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if to force applying common annotations to resources for kustomize apps.
        """
        return pulumi.get(self, "force_common_annotations")

    @force_common_annotations.setter
    def force_common_annotations(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_common_annotations", value)

    @property
    @pulumi.getter(name="forceCommonLabels")
    def force_common_labels(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if to force apply common labels to resources for kustomize apps.
        """
        return pulumi.get(self, "force_common_labels")

    @force_common_labels.setter
    def force_common_labels(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_common_labels", value)

    @property
    @pulumi.getter
    def images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @images.setter
    def images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "images", value)

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Prefix prepended to resources for kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @name_prefix.setter
    def name_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_prefix", value)

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        Suffix appended to resources for kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @name_suffix.setter
    def name_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_suffix", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class GitOpsApplicationsApplicationSpecSourcePluginArgs:
    def __init__(__self__, *,
                 envs: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourcePluginEnvArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourcePluginEnvArgs']]] envs: Entry in the GitOps application's environment.
        :param pulumi.Input[str] name: Name of the plugin.
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourcePluginEnvArgs']]]]:
        """
        Entry in the GitOps application's environment.
        """
        return pulumi.get(self, "envs")

    @envs.setter
    def envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSourcePluginEnvArgs']]]]):
        pulumi.set(self, "envs", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the plugin.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GitOpsApplicationsApplicationSpecSourcePluginEnvArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of the variable, usually expressed in uppercase.
        :param pulumi.Input[str] value: Value of the variable.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the variable, usually expressed in uppercase.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value of the variable.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GitOpsApplicationsApplicationSpecSyncPolicyArgs:
    def __init__(__self__, *,
                 automateds: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSyncPolicyAutomatedArgs']]]] = None,
                 retries: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSyncPolicyRetryArgs']]]] = None,
                 sync_options: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSyncPolicyAutomatedArgs']]] automateds: Controls the behavior of an automated sync.
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSyncPolicyRetryArgs']]] retries: Contains information about the strategy to apply when a sync failed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sync_options: Options allow you to specify whole app sync-options.
        """
        if automateds is not None:
            pulumi.set(__self__, "automateds", automateds)
        if retries is not None:
            pulumi.set(__self__, "retries", retries)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automateds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSyncPolicyAutomatedArgs']]]]:
        """
        Controls the behavior of an automated sync.
        """
        return pulumi.get(self, "automateds")

    @automateds.setter
    def automateds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSyncPolicyAutomatedArgs']]]]):
        pulumi.set(self, "automateds", value)

    @property
    @pulumi.getter
    def retries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSyncPolicyRetryArgs']]]]:
        """
        Contains information about the strategy to apply when a sync failed.
        """
        return pulumi.get(self, "retries")

    @retries.setter
    def retries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSyncPolicyRetryArgs']]]]):
        pulumi.set(self, "retries", value)

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Options allow you to specify whole app sync-options.
        """
        return pulumi.get(self, "sync_options")

    @sync_options.setter
    def sync_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sync_options", value)


@pulumi.input_type
class GitOpsApplicationsApplicationSpecSyncPolicyAutomatedArgs:
    def __init__(__self__, *,
                 allow_empty: Optional[pulumi.Input[bool]] = None,
                 prune: Optional[pulumi.Input[bool]] = None,
                 self_heal: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] allow_empty: Indicates to allows apps to have zero live resources (default: false).
        :param pulumi.Input[bool] prune: Indicates whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync (default: false).
        :param pulumi.Input[bool] self_heal: Indicates whether to revert resources back to their desired state upon modification in the cluster (default: false).
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates to allows apps to have zero live resources (default: false).
        """
        return pulumi.get(self, "allow_empty")

    @allow_empty.setter
    def allow_empty(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_empty", value)

    @property
    @pulumi.getter
    def prune(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync (default: false).
        """
        return pulumi.get(self, "prune")

    @prune.setter
    def prune(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prune", value)

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to revert resources back to their desired state upon modification in the cluster (default: false).
        """
        return pulumi.get(self, "self_heal")

    @self_heal.setter
    def self_heal(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "self_heal", value)


@pulumi.input_type
class GitOpsApplicationsApplicationSpecSyncPolicyRetryArgs:
    def __init__(__self__, *,
                 backoffs: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSyncPolicyRetryBackoffArgs']]]] = None,
                 limit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSyncPolicyRetryBackoffArgs']]] backoffs: Backoff strategy to use on subsequent retries for failing syncs.
        :param pulumi.Input[str] limit: Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoffs is not None:
            pulumi.set(__self__, "backoffs", backoffs)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoffs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSyncPolicyRetryBackoffArgs']]]]:
        """
        Backoff strategy to use on subsequent retries for failing syncs.
        """
        return pulumi.get(self, "backoffs")

    @backoffs.setter
    def backoffs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsApplicationsApplicationSpecSyncPolicyRetryBackoffArgs']]]]):
        pulumi.set(self, "backoffs", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[str]]:
        """
        Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "limit", value)


@pulumi.input_type
class GitOpsApplicationsApplicationSpecSyncPolicyRetryBackoffArgs:
    def __init__(__self__, *,
                 duration: Optional[pulumi.Input[str]] = None,
                 factor: Optional[pulumi.Input[str]] = None,
                 max_duration: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] duration: Amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h").
        :param pulumi.Input[str] factor: Factor to multiply the base duration after each failed retry.
        :param pulumi.Input[str] max_duration: Maximum amount of time allowed of the backoff strategy.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[str]]:
        """
        Amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h").
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def factor(self) -> Optional[pulumi.Input[str]]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @factor.setter
    def factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "factor", value)

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum amount of time allowed of the backoff strategy.
        """
        return pulumi.get(self, "max_duration")

    @max_duration.setter
    def max_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_duration", value)


@pulumi.input_type
class GitOpsClusterQueryArgs:
    def __init__(__self__, *,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterQueryIdArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsClusterQueryIdArgs']]] ids: Cluster server URL or the cluster name.
        :param pulumi.Input[str] name: Name of the GitOps cluster.
        :param pulumi.Input[str] server: Server of the GitOps cluster.
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterQueryIdArgs']]]]:
        """
        Cluster server URL or the cluster name.
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterQueryIdArgs']]]]):
        pulumi.set(self, "ids", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the GitOps cluster.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        Server of the GitOps cluster.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)


@pulumi.input_type
class GitOpsClusterQueryIdArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: Type of the specified GitOps cluster identifier ( 'server' - default, 'name' ).
        :param pulumi.Input[str] value: Cluster server URL or the cluster name.
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the specified GitOps cluster identifier ( 'server' - default, 'name' ).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster server URL or the cluster name.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GitOpsClusterRequestArgs:
    def __init__(__self__, *,
                 clusters: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterArgs']]]] = None,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestIdArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 update_masks: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestUpdateMaskArgs']]]] = None,
                 updated_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 upsert: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterArgs']]] clusters: GitOps cluster details.
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestIdArgs']]] ids: Cluster server URL or the cluster name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tags associated with the clusters
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestUpdateMaskArgs']]] update_masks: Update mask of the GitOps cluster.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] updated_fields: Fields which are updated.
        :param pulumi.Input[bool] upsert: Indicates if the GitOps cluster should be updated if existing and inserted if not.
        """
        if clusters is not None:
            pulumi.set(__self__, "clusters", clusters)
        if ids is not None:
            pulumi.set(__self__, "ids", ids)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if update_masks is not None:
            pulumi.set(__self__, "update_masks", update_masks)
        if updated_fields is not None:
            pulumi.set(__self__, "updated_fields", updated_fields)
        if upsert is not None:
            pulumi.set(__self__, "upsert", upsert)

    @property
    @pulumi.getter
    def clusters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterArgs']]]]:
        """
        GitOps cluster details.
        """
        return pulumi.get(self, "clusters")

    @clusters.setter
    def clusters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterArgs']]]]):
        pulumi.set(self, "clusters", value)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestIdArgs']]]]:
        """
        Cluster server URL or the cluster name.
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestIdArgs']]]]):
        pulumi.set(self, "ids", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Tags associated with the clusters
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="updateMasks")
    def update_masks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestUpdateMaskArgs']]]]:
        """
        Update mask of the GitOps cluster.
        """
        return pulumi.get(self, "update_masks")

    @update_masks.setter
    def update_masks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestUpdateMaskArgs']]]]):
        pulumi.set(self, "update_masks", value)

    @property
    @pulumi.getter(name="updatedFields")
    def updated_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Fields which are updated.
        """
        return pulumi.get(self, "updated_fields")

    @updated_fields.setter
    def updated_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "updated_fields", value)

    @property
    @pulumi.getter
    def upsert(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if the GitOps cluster should be updated if existing and inserted if not.
        """
        return pulumi.get(self, "upsert")

    @upsert.setter
    def upsert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upsert", value)


@pulumi.input_type
class GitOpsClusterRequestClusterArgs:
    def __init__(__self__, *,
                 configs: pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterConfigArgs']]],
                 server: pulumi.Input[str],
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 cluster_resources: Optional[pulumi.Input[bool]] = None,
                 infos: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterInfoArgs']]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 refresh_requested_ats: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterRefreshRequestedAtArgs']]]] = None,
                 shard: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterConfigArgs']]] configs: GitOps cluster config.
        :param pulumi.Input[str] server: API server URL of the kubernetes cluster.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations for cluster secret metadata.
        :param pulumi.Input[bool] cluster_resources: Indicates if cluster level resources should be managed. This setting is used only if cluster is connected in a namespaced mode.
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterInfoArgs']]] infos: Information about cluster cache and state.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels for cluster secret metadata.
        :param pulumi.Input[str] name: Name of the cluster. If omitted, will use the server address.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: List of namespaces which are accessible in that cluster. Cluster level resources will be ignored if namespace list is not empty.
        :param pulumi.Input[str] project: Reference between project and cluster that allow you automatically to be added as item inside Destinations project entity.
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterRefreshRequestedAtArgs']]] refresh_requested_ats: Time when cluster cache refresh has been requested.
        :param pulumi.Input[str] shard: Shard number. Calculated on the fly by the application controller if not specified.
        """
        pulumi.set(__self__, "configs", configs)
        pulumi.set(__self__, "server", server)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if cluster_resources is not None:
            pulumi.set(__self__, "cluster_resources", cluster_resources)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if refresh_requested_ats is not None:
            pulumi.set(__self__, "refresh_requested_ats", refresh_requested_ats)
        if shard is not None:
            pulumi.set(__self__, "shard", shard)

    @property
    @pulumi.getter
    def configs(self) -> pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterConfigArgs']]]:
        """
        GitOps cluster config.
        """
        return pulumi.get(self, "configs")

    @configs.setter
    def configs(self, value: pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterConfigArgs']]]):
        pulumi.set(self, "configs", value)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[str]:
        """
        API server URL of the kubernetes cluster.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations for cluster secret metadata.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="clusterResources")
    def cluster_resources(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if cluster level resources should be managed. This setting is used only if cluster is connected in a namespaced mode.
        """
        return pulumi.get(self, "cluster_resources")

    @cluster_resources.setter
    def cluster_resources(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cluster_resources", value)

    @property
    @pulumi.getter
    def infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterInfoArgs']]]]:
        """
        Information about cluster cache and state.
        """
        return pulumi.get(self, "infos")

    @infos.setter
    def infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterInfoArgs']]]]):
        pulumi.set(self, "infos", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels for cluster secret metadata.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the cluster. If omitted, will use the server address.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of namespaces which are accessible in that cluster. Cluster level resources will be ignored if namespace list is not empty.
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        Reference between project and cluster that allow you automatically to be added as item inside Destinations project entity.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="refreshRequestedAts")
    def refresh_requested_ats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterRefreshRequestedAtArgs']]]]:
        """
        Time when cluster cache refresh has been requested.
        """
        return pulumi.get(self, "refresh_requested_ats")

    @refresh_requested_ats.setter
    def refresh_requested_ats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterRefreshRequestedAtArgs']]]]):
        pulumi.set(self, "refresh_requested_ats", value)

    @property
    @pulumi.getter
    def shard(self) -> Optional[pulumi.Input[str]]:
        """
        Shard number. Calculated on the fly by the application controller if not specified.
        """
        return pulumi.get(self, "shard")

    @shard.setter
    def shard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shard", value)


@pulumi.input_type
class GitOpsClusterRequestClusterConfigArgs:
    def __init__(__self__, *,
                 aws_auth_configs: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterConfigAwsAuthConfigArgs']]]] = None,
                 bearer_token: Optional[pulumi.Input[str]] = None,
                 cluster_connection_type: Optional[pulumi.Input[str]] = None,
                 exec_provider_configs: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterConfigExecProviderConfigArgs']]]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 tls_client_configs: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterConfigTlsClientConfigArgs']]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterConfigAwsAuthConfigArgs']]] aws_auth_configs: IAM authentication configuration for AWS.
        :param pulumi.Input[str] bearer_token: Bearer authentication token the cluster.
        :param pulumi.Input[str] cluster_connection_type: Identifies the authentication method used to connect to the cluster.
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterConfigExecProviderConfigArgs']]] exec_provider_configs: Configuration for an exec provider.
        :param pulumi.Input[str] password: Password of the server of the cluster.
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterConfigTlsClientConfigArgs']]] tls_client_configs: Settings to enable transport layer security.
        :param pulumi.Input[str] username: Username of the server of the cluster.
        """
        if aws_auth_configs is not None:
            pulumi.set(__self__, "aws_auth_configs", aws_auth_configs)
        if bearer_token is not None:
            pulumi.set(__self__, "bearer_token", bearer_token)
        if cluster_connection_type is not None:
            pulumi.set(__self__, "cluster_connection_type", cluster_connection_type)
        if exec_provider_configs is not None:
            pulumi.set(__self__, "exec_provider_configs", exec_provider_configs)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if tls_client_configs is not None:
            pulumi.set(__self__, "tls_client_configs", tls_client_configs)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="awsAuthConfigs")
    def aws_auth_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterConfigAwsAuthConfigArgs']]]]:
        """
        IAM authentication configuration for AWS.
        """
        return pulumi.get(self, "aws_auth_configs")

    @aws_auth_configs.setter
    def aws_auth_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterConfigAwsAuthConfigArgs']]]]):
        pulumi.set(self, "aws_auth_configs", value)

    @property
    @pulumi.getter(name="bearerToken")
    def bearer_token(self) -> Optional[pulumi.Input[str]]:
        """
        Bearer authentication token the cluster.
        """
        return pulumi.get(self, "bearer_token")

    @bearer_token.setter
    def bearer_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bearer_token", value)

    @property
    @pulumi.getter(name="clusterConnectionType")
    def cluster_connection_type(self) -> Optional[pulumi.Input[str]]:
        """
        Identifies the authentication method used to connect to the cluster.
        """
        return pulumi.get(self, "cluster_connection_type")

    @cluster_connection_type.setter
    def cluster_connection_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_connection_type", value)

    @property
    @pulumi.getter(name="execProviderConfigs")
    def exec_provider_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterConfigExecProviderConfigArgs']]]]:
        """
        Configuration for an exec provider.
        """
        return pulumi.get(self, "exec_provider_configs")

    @exec_provider_configs.setter
    def exec_provider_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterConfigExecProviderConfigArgs']]]]):
        pulumi.set(self, "exec_provider_configs", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password of the server of the cluster.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="tlsClientConfigs")
    def tls_client_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterConfigTlsClientConfigArgs']]]]:
        """
        Settings to enable transport layer security.
        """
        return pulumi.get(self, "tls_client_configs")

    @tls_client_configs.setter
    def tls_client_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterConfigTlsClientConfigArgs']]]]):
        pulumi.set(self, "tls_client_configs", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username of the server of the cluster.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class GitOpsClusterRequestClusterConfigAwsAuthConfigArgs:
    def __init__(__self__, *,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cluster_name: AWS cluster name.
        :param pulumi.Input[str] role_arn: Optional role ARN. If set then used for AWS IAM Authenticator.
        """
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        """
        AWS cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="roleARN")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        Optional role ARN. If set then used for AWS IAM Authenticator.
        """
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)


@pulumi.input_type
class GitOpsClusterRequestClusterConfigExecProviderConfigArgs:
    def __init__(__self__, *,
                 api_version: Optional[pulumi.Input[str]] = None,
                 args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 command: Optional[pulumi.Input[str]] = None,
                 env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 install_hint: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] api_version: Preferred input version of the ExecInfo.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] args: Arguments to pass to the command when executing it.
        :param pulumi.Input[str] command: Command to execute.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] env: Additional environment variables to expose to the process.
        :param pulumi.Input[str] install_hint: Message displayed when the executable is not found.
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if install_hint is not None:
            pulumi.set(__self__, "install_hint", install_hint)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        Preferred input version of the ExecInfo.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Arguments to pass to the command when executing it.
        """
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "args", value)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[str]]:
        """
        Command to execute.
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command", value)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional environment variables to expose to the process.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="installHint")
    def install_hint(self) -> Optional[pulumi.Input[str]]:
        """
        Message displayed when the executable is not found.
        """
        return pulumi.get(self, "install_hint")

    @install_hint.setter
    def install_hint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "install_hint", value)


@pulumi.input_type
class GitOpsClusterRequestClusterConfigTlsClientConfigArgs:
    def __init__(__self__, *,
                 ca_data: Optional[pulumi.Input[str]] = None,
                 cert_data: Optional[pulumi.Input[str]] = None,
                 insecure: Optional[pulumi.Input[bool]] = None,
                 key_data: Optional[pulumi.Input[str]] = None,
                 server_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ca_data: CA data holds PEM-encoded bytes (typically read from a root certificates bundle).
        :param pulumi.Input[str] cert_data: Certificate data holds PEM-encoded bytes (typically read from a client certificate file).
        :param pulumi.Input[bool] insecure: Indicates if the TLS connection to the cluster should be insecure.
        :param pulumi.Input[str] key_data: Key data holds PEM-encoded bytes (typically read from a client certificate key file).
        :param pulumi.Input[str] server_name: Server name for SNI in the client to check server certificates against.
        """
        if ca_data is not None:
            pulumi.set(__self__, "ca_data", ca_data)
        if cert_data is not None:
            pulumi.set(__self__, "cert_data", cert_data)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if key_data is not None:
            pulumi.set(__self__, "key_data", key_data)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)

    @property
    @pulumi.getter(name="caData")
    def ca_data(self) -> Optional[pulumi.Input[str]]:
        """
        CA data holds PEM-encoded bytes (typically read from a root certificates bundle).
        """
        return pulumi.get(self, "ca_data")

    @ca_data.setter
    def ca_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_data", value)

    @property
    @pulumi.getter(name="certData")
    def cert_data(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate data holds PEM-encoded bytes (typically read from a client certificate file).
        """
        return pulumi.get(self, "cert_data")

    @cert_data.setter
    def cert_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_data", value)

    @property
    @pulumi.getter
    def insecure(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if the TLS connection to the cluster should be insecure.
        """
        return pulumi.get(self, "insecure")

    @insecure.setter
    def insecure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure", value)

    @property
    @pulumi.getter(name="keyData")
    def key_data(self) -> Optional[pulumi.Input[str]]:
        """
        Key data holds PEM-encoded bytes (typically read from a client certificate key file).
        """
        return pulumi.get(self, "key_data")

    @key_data.setter
    def key_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_data", value)

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[pulumi.Input[str]]:
        """
        Server name for SNI in the client to check server certificates against.
        """
        return pulumi.get(self, "server_name")

    @server_name.setter
    def server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_name", value)


@pulumi.input_type
class GitOpsClusterRequestClusterInfoArgs:
    def __init__(__self__, *,
                 api_versions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 applications_count: Optional[pulumi.Input[str]] = None,
                 cache_infos: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterInfoCacheInfoArgs']]]] = None,
                 connection_states: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterInfoConnectionStateArgs']]]] = None,
                 server_version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] api_versions: List of API versions supported by the cluster.
        :param pulumi.Input[str] applications_count: Number of applications managed by Argo CD on the cluster.
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterInfoCacheInfoArgs']]] cache_infos: Information about the cluster cache.
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterInfoConnectionStateArgs']]] connection_states: Information about the connection to the cluster.
        :param pulumi.Input[str] server_version: Kubernetes version of the cluster.
        """
        if api_versions is not None:
            pulumi.set(__self__, "api_versions", api_versions)
        if applications_count is not None:
            pulumi.set(__self__, "applications_count", applications_count)
        if cache_infos is not None:
            pulumi.set(__self__, "cache_infos", cache_infos)
        if connection_states is not None:
            pulumi.set(__self__, "connection_states", connection_states)
        if server_version is not None:
            pulumi.set(__self__, "server_version", server_version)

    @property
    @pulumi.getter(name="apiVersions")
    def api_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of API versions supported by the cluster.
        """
        return pulumi.get(self, "api_versions")

    @api_versions.setter
    def api_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "api_versions", value)

    @property
    @pulumi.getter(name="applicationsCount")
    def applications_count(self) -> Optional[pulumi.Input[str]]:
        """
        Number of applications managed by Argo CD on the cluster.
        """
        return pulumi.get(self, "applications_count")

    @applications_count.setter
    def applications_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "applications_count", value)

    @property
    @pulumi.getter(name="cacheInfos")
    def cache_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterInfoCacheInfoArgs']]]]:
        """
        Information about the cluster cache.
        """
        return pulumi.get(self, "cache_infos")

    @cache_infos.setter
    def cache_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterInfoCacheInfoArgs']]]]):
        pulumi.set(self, "cache_infos", value)

    @property
    @pulumi.getter(name="connectionStates")
    def connection_states(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterInfoConnectionStateArgs']]]]:
        """
        Information about the connection to the cluster.
        """
        return pulumi.get(self, "connection_states")

    @connection_states.setter
    def connection_states(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterInfoConnectionStateArgs']]]]):
        pulumi.set(self, "connection_states", value)

    @property
    @pulumi.getter(name="serverVersion")
    def server_version(self) -> Optional[pulumi.Input[str]]:
        """
        Kubernetes version of the cluster.
        """
        return pulumi.get(self, "server_version")

    @server_version.setter
    def server_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_version", value)


@pulumi.input_type
class GitOpsClusterRequestClusterInfoCacheInfoArgs:
    def __init__(__self__, *,
                 apis_count: Optional[pulumi.Input[str]] = None,
                 last_cache_sync_time: Optional[pulumi.Input[str]] = None,
                 resources_count: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] apis_count: Number of observed kubernetes API count.
        :param pulumi.Input[str] last_cache_sync_time: Time of most recent cache synchronization.
        :param pulumi.Input[str] resources_count: Number of observed kubernetes resources.
        """
        if apis_count is not None:
            pulumi.set(__self__, "apis_count", apis_count)
        if last_cache_sync_time is not None:
            pulumi.set(__self__, "last_cache_sync_time", last_cache_sync_time)
        if resources_count is not None:
            pulumi.set(__self__, "resources_count", resources_count)

    @property
    @pulumi.getter(name="apisCount")
    def apis_count(self) -> Optional[pulumi.Input[str]]:
        """
        Number of observed kubernetes API count.
        """
        return pulumi.get(self, "apis_count")

    @apis_count.setter
    def apis_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apis_count", value)

    @property
    @pulumi.getter(name="lastCacheSyncTime")
    def last_cache_sync_time(self) -> Optional[pulumi.Input[str]]:
        """
        Time of most recent cache synchronization.
        """
        return pulumi.get(self, "last_cache_sync_time")

    @last_cache_sync_time.setter
    def last_cache_sync_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_cache_sync_time", value)

    @property
    @pulumi.getter(name="resourcesCount")
    def resources_count(self) -> Optional[pulumi.Input[str]]:
        """
        Number of observed kubernetes resources.
        """
        return pulumi.get(self, "resources_count")

    @resources_count.setter
    def resources_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resources_count", value)


@pulumi.input_type
class GitOpsClusterRequestClusterInfoConnectionStateArgs:
    def __init__(__self__, *,
                 attempted_ats: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterInfoConnectionStateAttemptedAtArgs']]]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterInfoConnectionStateAttemptedAtArgs']]] attempted_ats: Time when cluster cache refresh has been requested.
        :param pulumi.Input[str] message: Information about the connection status.
        :param pulumi.Input[str] status: Current status indicator of the connection.
        """
        if attempted_ats is not None:
            pulumi.set(__self__, "attempted_ats", attempted_ats)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="attemptedAts")
    def attempted_ats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterInfoConnectionStateAttemptedAtArgs']]]]:
        """
        Time when cluster cache refresh has been requested.
        """
        return pulumi.get(self, "attempted_ats")

    @attempted_ats.setter
    def attempted_ats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsClusterRequestClusterInfoConnectionStateAttemptedAtArgs']]]]):
        pulumi.set(self, "attempted_ats", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Information about the connection status.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Current status indicator of the connection.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class GitOpsClusterRequestClusterInfoConnectionStateAttemptedAtArgs:
    def __init__(__self__, *,
                 nanos: Optional[pulumi.Input[int]] = None,
                 seconds: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] nanos: Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.
        :param pulumi.Input[str] seconds: Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
        """
        if nanos is not None:
            pulumi.set(__self__, "nanos", nanos)
        if seconds is not None:
            pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def nanos(self) -> Optional[pulumi.Input[int]]:
        """
        Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.
        """
        return pulumi.get(self, "nanos")

    @nanos.setter
    def nanos(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nanos", value)

    @property
    @pulumi.getter
    def seconds(self) -> Optional[pulumi.Input[str]]:
        """
        Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
        """
        return pulumi.get(self, "seconds")

    @seconds.setter
    def seconds(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "seconds", value)


@pulumi.input_type
class GitOpsClusterRequestClusterRefreshRequestedAtArgs:
    def __init__(__self__, *,
                 nanos: Optional[pulumi.Input[int]] = None,
                 seconds: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] nanos: Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.
        :param pulumi.Input[str] seconds: Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
        """
        if nanos is not None:
            pulumi.set(__self__, "nanos", nanos)
        if seconds is not None:
            pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def nanos(self) -> Optional[pulumi.Input[int]]:
        """
        Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.
        """
        return pulumi.get(self, "nanos")

    @nanos.setter
    def nanos(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nanos", value)

    @property
    @pulumi.getter
    def seconds(self) -> Optional[pulumi.Input[str]]:
        """
        Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
        """
        return pulumi.get(self, "seconds")

    @seconds.setter
    def seconds(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "seconds", value)


@pulumi.input_type
class GitOpsClusterRequestIdArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: Type of the specified cluster identifier ( 'server' - default, 'name' ).
        :param pulumi.Input[str] value: Cluster server URL or the cluster name.
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the specified cluster identifier ( 'server' - default, 'name' ).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster server URL or the cluster name.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GitOpsClusterRequestUpdateMaskArgs:
    def __init__(__self__, *,
                 paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] paths: The set of field mask paths.
        """
        if paths is not None:
            pulumi.set(__self__, "paths", paths)

    @property
    @pulumi.getter
    def paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The set of field mask paths.
        """
        return pulumi.get(self, "paths")

    @paths.setter
    def paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "paths", value)


@pulumi.input_type
class GitOpsGnupgRequestArgs:
    def __init__(__self__, *,
                 upsert: pulumi.Input[bool],
                 publickeys: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsGnupgRequestPublickeyArgs']]]] = None):
        """
        :param pulumi.Input[bool] upsert: Indicates if the GnuPG Key should be inserted if not present or updated if present.
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsGnupgRequestPublickeyArgs']]] publickeys: Public key details.
        """
        pulumi.set(__self__, "upsert", upsert)
        if publickeys is not None:
            pulumi.set(__self__, "publickeys", publickeys)

    @property
    @pulumi.getter
    def upsert(self) -> pulumi.Input[bool]:
        """
        Indicates if the GnuPG Key should be inserted if not present or updated if present.
        """
        return pulumi.get(self, "upsert")

    @upsert.setter
    def upsert(self, value: pulumi.Input[bool]):
        pulumi.set(self, "upsert", value)

    @property
    @pulumi.getter
    def publickeys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsGnupgRequestPublickeyArgs']]]]:
        """
        Public key details.
        """
        return pulumi.get(self, "publickeys")

    @publickeys.setter
    def publickeys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsGnupgRequestPublickeyArgs']]]]):
        pulumi.set(self, "publickeys", value)


@pulumi.input_type
class GitOpsGnupgRequestPublickeyArgs:
    def __init__(__self__, *,
                 key_data: pulumi.Input[str],
                 fingerprint: Optional[pulumi.Input[str]] = None,
                 key_id: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 sub_type: Optional[pulumi.Input[str]] = None,
                 trust: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key_data: KeyData holds the raw key data, in base64 encoded format
        :param pulumi.Input[str] fingerprint: Fingerprint is the fingerprint of the key
        :param pulumi.Input[str] key_id: KeyID specifies the key ID, in hexadecimal string format.
        :param pulumi.Input[str] owner: Owner holds the owner identification, e.g. a name and e-mail address
        :param pulumi.Input[str] sub_type: SubType holds the key's sub type
        :param pulumi.Input[str] trust: Trust holds the level of trust assigned to this key
        """
        pulumi.set(__self__, "key_data", key_data)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if sub_type is not None:
            pulumi.set(__self__, "sub_type", sub_type)
        if trust is not None:
            pulumi.set(__self__, "trust", trust)

    @property
    @pulumi.getter(name="keyData")
    def key_data(self) -> pulumi.Input[str]:
        """
        KeyData holds the raw key data, in base64 encoded format
        """
        return pulumi.get(self, "key_data")

    @key_data.setter
    def key_data(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_data", value)

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[pulumi.Input[str]]:
        """
        Fingerprint is the fingerprint of the key
        """
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fingerprint", value)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[str]]:
        """
        KeyID specifies the key ID, in hexadecimal string format.
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_id", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        """
        Owner holds the owner identification, e.g. a name and e-mail address
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="subType")
    def sub_type(self) -> Optional[pulumi.Input[str]]:
        """
        SubType holds the key's sub type
        """
        return pulumi.get(self, "sub_type")

    @sub_type.setter
    def sub_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_type", value)

    @property
    @pulumi.getter
    def trust(self) -> Optional[pulumi.Input[str]]:
        """
        Trust holds the level of trust assigned to this key
        """
        return pulumi.get(self, "trust")

    @trust.setter
    def trust(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trust", value)


@pulumi.input_type
class GitOpsRepoCertRequestArgs:
    def __init__(__self__, *,
                 certificates: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsRepoCertRequestCertificateArgs']]]] = None,
                 upsert: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsRepoCertRequestCertificateArgs']]] certificates: certificates details.
        :param pulumi.Input[bool] upsert: if the Repository Certificates should be upserted.
        """
        if certificates is not None:
            pulumi.set(__self__, "certificates", certificates)
        if upsert is not None:
            pulumi.set(__self__, "upsert", upsert)

    @property
    @pulumi.getter
    def certificates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsRepoCertRequestCertificateArgs']]]]:
        """
        certificates details.
        """
        return pulumi.get(self, "certificates")

    @certificates.setter
    def certificates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsRepoCertRequestCertificateArgs']]]]):
        pulumi.set(self, "certificates", value)

    @property
    @pulumi.getter
    def upsert(self) -> Optional[pulumi.Input[bool]]:
        """
        if the Repository Certificates should be upserted.
        """
        return pulumi.get(self, "upsert")

    @upsert.setter
    def upsert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upsert", value)


@pulumi.input_type
class GitOpsRepoCertRequestCertificateArgs:
    def __init__(__self__, *,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsRepoCertRequestCertificateItemArgs']]]] = None,
                 metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsRepoCertRequestCertificateMetadataArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsRepoCertRequestCertificateItemArgs']]] items: List of certificates to be processed.
        :param pulumi.Input[Sequence[pulumi.Input['GitOpsRepoCertRequestCertificateMetadataArgs']]] metadatas: metadata details
        """
        if items is not None:
            pulumi.set(__self__, "items", items)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsRepoCertRequestCertificateItemArgs']]]]:
        """
        List of certificates to be processed.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsRepoCertRequestCertificateItemArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsRepoCertRequestCertificateMetadataArgs']]]]:
        """
        metadata details
        """
        return pulumi.get(self, "metadatas")

    @metadatas.setter
    def metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitOpsRepoCertRequestCertificateMetadataArgs']]]]):
        pulumi.set(self, "metadatas", value)


@pulumi.input_type
class GitOpsRepoCertRequestCertificateItemArgs:
    def __init__(__self__, *,
                 cert_data: Optional[pulumi.Input[str]] = None,
                 cert_info: Optional[pulumi.Input[str]] = None,
                 cert_sub_type: Optional[pulumi.Input[str]] = None,
                 cert_type: Optional[pulumi.Input[str]] = None,
                 server_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cert_data: CertData contains the actual certificate data, dependent on the certificate type.
        :param pulumi.Input[str] cert_info: CertInfo will hold additional certificate info, depdendent on the certificate type .
        :param pulumi.Input[str] cert_sub_type: CertSubType specifies the sub type of the cert, i.e. ssh-rsa.
        :param pulumi.Input[str] cert_type: CertType specifies the type of the certificate - currently one of https or ssh.
        :param pulumi.Input[str] server_name: ServerName specifies the DNS name of the server this certificate is intended.
        """
        if cert_data is not None:
            pulumi.set(__self__, "cert_data", cert_data)
        if cert_info is not None:
            pulumi.set(__self__, "cert_info", cert_info)
        if cert_sub_type is not None:
            pulumi.set(__self__, "cert_sub_type", cert_sub_type)
        if cert_type is not None:
            pulumi.set(__self__, "cert_type", cert_type)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)

    @property
    @pulumi.getter(name="certData")
    def cert_data(self) -> Optional[pulumi.Input[str]]:
        """
        CertData contains the actual certificate data, dependent on the certificate type.
        """
        return pulumi.get(self, "cert_data")

    @cert_data.setter
    def cert_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_data", value)

    @property
    @pulumi.getter(name="certInfo")
    def cert_info(self) -> Optional[pulumi.Input[str]]:
        """
        CertInfo will hold additional certificate info, depdendent on the certificate type .
        """
        return pulumi.get(self, "cert_info")

    @cert_info.setter
    def cert_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_info", value)

    @property
    @pulumi.getter(name="certSubType")
    def cert_sub_type(self) -> Optional[pulumi.Input[str]]:
        """
        CertSubType specifies the sub type of the cert, i.e. ssh-rsa.
        """
        return pulumi.get(self, "cert_sub_type")

    @cert_sub_type.setter
    def cert_sub_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_sub_type", value)

    @property
    @pulumi.getter(name="certType")
    def cert_type(self) -> Optional[pulumi.Input[str]]:
        """
        CertType specifies the type of the certificate - currently one of https or ssh.
        """
        return pulumi.get(self, "cert_type")

    @cert_type.setter
    def cert_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_type", value)

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[pulumi.Input[str]]:
        """
        ServerName specifies the DNS name of the server this certificate is intended.
        """
        return pulumi.get(self, "server_name")

    @server_name.setter
    def server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_name", value)


@pulumi.input_type
class GitOpsRepoCertRequestCertificateMetadataArgs:
    def __init__(__self__, *,
                 continue_: Optional[pulumi.Input[str]] = None,
                 remaining_item_count: Optional[pulumi.Input[str]] = None,
                 resource_version: Optional[pulumi.Input[str]] = None,
                 self_link: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] continue_: continue may be set if the user set a limit on the number of items returned.
        :param pulumi.Input[str] remaining_item_count: subsequent items in the list.
        :param pulumi.Input[str] resource_version: dentifies the server's internal version.
        :param pulumi.Input[str] self_link: selfLink is a URL representing this object.
        """
        if continue_ is not None:
            pulumi.set(__self__, "continue_", continue_)
        if remaining_item_count is not None:
            pulumi.set(__self__, "remaining_item_count", remaining_item_count)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if self_link is not None:
            pulumi.set(__self__, "self_link", self_link)

    @property
    @pulumi.getter(name="continue")
    def continue_(self) -> Optional[pulumi.Input[str]]:
        """
        continue may be set if the user set a limit on the number of items returned.
        """
        return pulumi.get(self, "continue_")

    @continue_.setter
    def continue_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "continue_", value)

    @property
    @pulumi.getter(name="remainingItemCount")
    def remaining_item_count(self) -> Optional[pulumi.Input[str]]:
        """
        subsequent items in the list.
        """
        return pulumi.get(self, "remaining_item_count")

    @remaining_item_count.setter
    def remaining_item_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remaining_item_count", value)

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[pulumi.Input[str]]:
        """
        dentifies the server's internal version.
        """
        return pulumi.get(self, "resource_version")

    @resource_version.setter
    def resource_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_version", value)

    @property
    @pulumi.getter(name="selfLink")
    def self_link(self) -> Optional[pulumi.Input[str]]:
        """
        selfLink is a URL representing this object.
        """
        return pulumi.get(self, "self_link")

    @self_link.setter
    def self_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "self_link", value)


@pulumi.input_type
class GitOpsRepoCredCredArgs:
    def __init__(__self__, *,
                 enable_oci: Optional[pulumi.Input[bool]] = None,
                 github_app_enterprise_base_url: Optional[pulumi.Input[str]] = None,
                 github_app_id: Optional[pulumi.Input[str]] = None,
                 github_app_installation_id: Optional[pulumi.Input[str]] = None,
                 github_app_private_key: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 ssh_private_key: Optional[pulumi.Input[str]] = None,
                 tls_client_cert_data: Optional[pulumi.Input[str]] = None,
                 tls_client_cert_key: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enable_oci: Specifies whether helm-oci support should be enabled for this repo.
        :param pulumi.Input[str] github_app_enterprise_base_url: Specifies the GitHub API URL for GitHub app authentication.
        :param pulumi.Input[str] github_app_id: Specifies the Github App ID of the app used to access the repo for GitHub app authentication.
        :param pulumi.Input[str] github_app_installation_id: Specifies the ID of the installed GitHub App for GitHub app authentication.
        :param pulumi.Input[str] github_app_private_key: github*app*private_key specifies the private key PEM data for authentication via GitHub app.
        :param pulumi.Input[str] password: Password for authenticating at the repo server.
        :param pulumi.Input[str] ssh_private_key: Contains the private key data for authenticating at the repo server using SSH (only Git repos).
        :param pulumi.Input[str] tls_client_cert_data: Specifies the TLS client cert data for authenticating at the repo server.
        :param pulumi.Input[str] tls_client_cert_key: Specifies the TLS client cert key for authenticating at the repo server.
        :param pulumi.Input[str] type: Type specifies the type of the repoCreds.Can be either 'git' or 'helm. 'git' is assumed if empty or absent
        :param pulumi.Input[str] url: url representing this object.
        :param pulumi.Input[str] username: Username for authenticating at the repo server.
        """
        if enable_oci is not None:
            pulumi.set(__self__, "enable_oci", enable_oci)
        if github_app_enterprise_base_url is not None:
            pulumi.set(__self__, "github_app_enterprise_base_url", github_app_enterprise_base_url)
        if github_app_id is not None:
            pulumi.set(__self__, "github_app_id", github_app_id)
        if github_app_installation_id is not None:
            pulumi.set(__self__, "github_app_installation_id", github_app_installation_id)
        if github_app_private_key is not None:
            pulumi.set(__self__, "github_app_private_key", github_app_private_key)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if ssh_private_key is not None:
            pulumi.set(__self__, "ssh_private_key", ssh_private_key)
        if tls_client_cert_data is not None:
            pulumi.set(__self__, "tls_client_cert_data", tls_client_cert_data)
        if tls_client_cert_key is not None:
            pulumi.set(__self__, "tls_client_cert_key", tls_client_cert_key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="enableOci")
    def enable_oci(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether helm-oci support should be enabled for this repo.
        """
        return pulumi.get(self, "enable_oci")

    @enable_oci.setter
    def enable_oci(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_oci", value)

    @property
    @pulumi.getter(name="githubAppEnterpriseBaseUrl")
    def github_app_enterprise_base_url(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the GitHub API URL for GitHub app authentication.
        """
        return pulumi.get(self, "github_app_enterprise_base_url")

    @github_app_enterprise_base_url.setter
    def github_app_enterprise_base_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "github_app_enterprise_base_url", value)

    @property
    @pulumi.getter(name="githubAppId")
    def github_app_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the Github App ID of the app used to access the repo for GitHub app authentication.
        """
        return pulumi.get(self, "github_app_id")

    @github_app_id.setter
    def github_app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "github_app_id", value)

    @property
    @pulumi.getter(name="githubAppInstallationId")
    def github_app_installation_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the ID of the installed GitHub App for GitHub app authentication.
        """
        return pulumi.get(self, "github_app_installation_id")

    @github_app_installation_id.setter
    def github_app_installation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "github_app_installation_id", value)

    @property
    @pulumi.getter(name="githubAppPrivateKey")
    def github_app_private_key(self) -> Optional[pulumi.Input[str]]:
        """
        github*app*private_key specifies the private key PEM data for authentication via GitHub app.
        """
        return pulumi.get(self, "github_app_private_key")

    @github_app_private_key.setter
    def github_app_private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "github_app_private_key", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for authenticating at the repo server.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="sshPrivateKey")
    def ssh_private_key(self) -> Optional[pulumi.Input[str]]:
        """
        Contains the private key data for authenticating at the repo server using SSH (only Git repos).
        """
        return pulumi.get(self, "ssh_private_key")

    @ssh_private_key.setter
    def ssh_private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_private_key", value)

    @property
    @pulumi.getter(name="tlsClientCertData")
    def tls_client_cert_data(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the TLS client cert data for authenticating at the repo server.
        """
        return pulumi.get(self, "tls_client_cert_data")

    @tls_client_cert_data.setter
    def tls_client_cert_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_client_cert_data", value)

    @property
    @pulumi.getter(name="tlsClientCertKey")
    def tls_client_cert_key(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the TLS client cert key for authenticating at the repo server.
        """
        return pulumi.get(self, "tls_client_cert_key")

    @tls_client_cert_key.setter
    def tls_client_cert_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_client_cert_key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type specifies the type of the repoCreds.Can be either 'git' or 'helm. 'git' is assumed if empty or absent
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        url representing this object.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username for authenticating at the repo server.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class GitOpsRepositoryRepoArgs:
    def __init__(__self__, *,
                 connection_type: pulumi.Input[str],
                 repo: pulumi.Input[str],
                 enable_lfs: Optional[pulumi.Input[bool]] = None,
                 enable_oci: Optional[pulumi.Input[bool]] = None,
                 github_app_enterprise_base_url: Optional[pulumi.Input[str]] = None,
                 github_app_id: Optional[pulumi.Input[str]] = None,
                 github_app_installation_id: Optional[pulumi.Input[str]] = None,
                 github_app_private_key: Optional[pulumi.Input[str]] = None,
                 inherited_creds: Optional[pulumi.Input[bool]] = None,
                 insecure: Optional[pulumi.Input[bool]] = None,
                 insecure_ignore_host_key: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 proxy: Optional[pulumi.Input[str]] = None,
                 ssh_private_key: Optional[pulumi.Input[str]] = None,
                 tls_client_cert_data: Optional[pulumi.Input[str]] = None,
                 tls_client_cert_key: Optional[pulumi.Input[str]] = None,
                 type_: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] connection_type: Identifies the authentication method used to connect to the repository.
        :param pulumi.Input[str] repo: URL to the remote repository.
        :param pulumi.Input[bool] enable_lfs: Indicates if git-lfs support must be enabled for this repo. This is valid only for Git repositories.
        :param pulumi.Input[bool] enable_oci: Indicates if helm-oci support must be enabled for this repo.
        :param pulumi.Input[str] github_app_enterprise_base_url: Base URL of GitHub Enterprise installation. If left empty, this defaults to https://api.github.com.
        :param pulumi.Input[str] github_app_id: Id of the GitHub app used to access the repo.
        :param pulumi.Input[str] github_app_installation_id: Installation id of the GitHub app used to access the repo.
        :param pulumi.Input[str] github_app_private_key: GitHub app private key PEM data.
        :param pulumi.Input[bool] inherited_creds: Indicates if the credentials were inherited from a credential set.
        :param pulumi.Input[bool] insecure: Indicates if the connection to the repository ignores any errors when verifying TLS certificates or SSH host keys.
        :param pulumi.Input[bool] insecure_ignore_host_key: Indicates if InsecureIgnoreHostKey should be used. Insecure is favored used only for git repos.
        :param pulumi.Input[str] name: Name to be used for this repo. Only used with Helm repos.
        :param pulumi.Input[str] password: Password or PAT used for authenticating at the remote repository.
        :param pulumi.Input[str] project: Reference between project and repository that allow you automatically to be added as item inside SourceRepos project entity.
        :param pulumi.Input[str] proxy: The HTTP/HTTPS proxy used to access the repo.
        :param pulumi.Input[str] ssh_private_key: PEM data for authenticating at the repo server. Only used with Git repos.
        :param pulumi.Input[str] tls_client_cert_data: Certificate in PEM format for authenticating at the repo server.
        :param pulumi.Input[str] tls_client_cert_key: Private key in PEM format for authenticating at the repo server.
        :param pulumi.Input[str] type_: Type specifies the type of the repo. Can be either "git" or "helm. "git" is assumed if empty or absent.
        :param pulumi.Input[str] username: Username used for authenticating at the remote repository.
        """
        pulumi.set(__self__, "connection_type", connection_type)
        pulumi.set(__self__, "repo", repo)
        if enable_lfs is not None:
            pulumi.set(__self__, "enable_lfs", enable_lfs)
        if enable_oci is not None:
            pulumi.set(__self__, "enable_oci", enable_oci)
        if github_app_enterprise_base_url is not None:
            pulumi.set(__self__, "github_app_enterprise_base_url", github_app_enterprise_base_url)
        if github_app_id is not None:
            pulumi.set(__self__, "github_app_id", github_app_id)
        if github_app_installation_id is not None:
            pulumi.set(__self__, "github_app_installation_id", github_app_installation_id)
        if github_app_private_key is not None:
            pulumi.set(__self__, "github_app_private_key", github_app_private_key)
        if inherited_creds is not None:
            pulumi.set(__self__, "inherited_creds", inherited_creds)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if insecure_ignore_host_key is not None:
            pulumi.set(__self__, "insecure_ignore_host_key", insecure_ignore_host_key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if ssh_private_key is not None:
            pulumi.set(__self__, "ssh_private_key", ssh_private_key)
        if tls_client_cert_data is not None:
            pulumi.set(__self__, "tls_client_cert_data", tls_client_cert_data)
        if tls_client_cert_key is not None:
            pulumi.set(__self__, "tls_client_cert_key", tls_client_cert_key)
        if type_ is not None:
            pulumi.set(__self__, "type_", type_)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> pulumi.Input[str]:
        """
        Identifies the authentication method used to connect to the repository.
        """
        return pulumi.get(self, "connection_type")

    @connection_type.setter
    def connection_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "connection_type", value)

    @property
    @pulumi.getter
    def repo(self) -> pulumi.Input[str]:
        """
        URL to the remote repository.
        """
        return pulumi.get(self, "repo")

    @repo.setter
    def repo(self, value: pulumi.Input[str]):
        pulumi.set(self, "repo", value)

    @property
    @pulumi.getter(name="enableLfs")
    def enable_lfs(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if git-lfs support must be enabled for this repo. This is valid only for Git repositories.
        """
        return pulumi.get(self, "enable_lfs")

    @enable_lfs.setter
    def enable_lfs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_lfs", value)

    @property
    @pulumi.getter(name="enableOci")
    def enable_oci(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if helm-oci support must be enabled for this repo.
        """
        return pulumi.get(self, "enable_oci")

    @enable_oci.setter
    def enable_oci(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_oci", value)

    @property
    @pulumi.getter(name="githubAppEnterpriseBaseUrl")
    def github_app_enterprise_base_url(self) -> Optional[pulumi.Input[str]]:
        """
        Base URL of GitHub Enterprise installation. If left empty, this defaults to https://api.github.com.
        """
        return pulumi.get(self, "github_app_enterprise_base_url")

    @github_app_enterprise_base_url.setter
    def github_app_enterprise_base_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "github_app_enterprise_base_url", value)

    @property
    @pulumi.getter(name="githubAppId")
    def github_app_id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the GitHub app used to access the repo.
        """
        return pulumi.get(self, "github_app_id")

    @github_app_id.setter
    def github_app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "github_app_id", value)

    @property
    @pulumi.getter(name="githubAppInstallationId")
    def github_app_installation_id(self) -> Optional[pulumi.Input[str]]:
        """
        Installation id of the GitHub app used to access the repo.
        """
        return pulumi.get(self, "github_app_installation_id")

    @github_app_installation_id.setter
    def github_app_installation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "github_app_installation_id", value)

    @property
    @pulumi.getter(name="githubAppPrivateKey")
    def github_app_private_key(self) -> Optional[pulumi.Input[str]]:
        """
        GitHub app private key PEM data.
        """
        return pulumi.get(self, "github_app_private_key")

    @github_app_private_key.setter
    def github_app_private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "github_app_private_key", value)

    @property
    @pulumi.getter(name="inheritedCreds")
    def inherited_creds(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if the credentials were inherited from a credential set.
        """
        return pulumi.get(self, "inherited_creds")

    @inherited_creds.setter
    def inherited_creds(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "inherited_creds", value)

    @property
    @pulumi.getter
    def insecure(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if the connection to the repository ignores any errors when verifying TLS certificates or SSH host keys.
        """
        return pulumi.get(self, "insecure")

    @insecure.setter
    def insecure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure", value)

    @property
    @pulumi.getter(name="insecureIgnoreHostKey")
    def insecure_ignore_host_key(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if InsecureIgnoreHostKey should be used. Insecure is favored used only for git repos.
        """
        return pulumi.get(self, "insecure_ignore_host_key")

    @insecure_ignore_host_key.setter
    def insecure_ignore_host_key(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure_ignore_host_key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name to be used for this repo. Only used with Helm repos.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password or PAT used for authenticating at the remote repository.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        Reference between project and repository that allow you automatically to be added as item inside SourceRepos project entity.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP/HTTPS proxy used to access the repo.
        """
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter(name="sshPrivateKey")
    def ssh_private_key(self) -> Optional[pulumi.Input[str]]:
        """
        PEM data for authenticating at the repo server. Only used with Git repos.
        """
        return pulumi.get(self, "ssh_private_key")

    @ssh_private_key.setter
    def ssh_private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_private_key", value)

    @property
    @pulumi.getter(name="tlsClientCertData")
    def tls_client_cert_data(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate in PEM format for authenticating at the repo server.
        """
        return pulumi.get(self, "tls_client_cert_data")

    @tls_client_cert_data.setter
    def tls_client_cert_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_client_cert_data", value)

    @property
    @pulumi.getter(name="tlsClientCertKey")
    def tls_client_cert_key(self) -> Optional[pulumi.Input[str]]:
        """
        Private key in PEM format for authenticating at the repo server.
        """
        return pulumi.get(self, "tls_client_cert_key")

    @tls_client_cert_key.setter
    def tls_client_cert_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_client_cert_key", value)

    @property
    @pulumi.getter
    def type_(self) -> Optional[pulumi.Input[str]]:
        """
        Type specifies the type of the repo. Can be either "git" or "helm. "git" is assumed if empty or absent.
        """
        return pulumi.get(self, "type_")

    @type_.setter
    def type_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type_", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username used for authenticating at the remote repository.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class GitOpsRepositoryUpdateMaskArgs:
    def __init__(__self__, *,
                 paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] paths: The set of field mask paths.
        """
        if paths is not None:
            pulumi.set(__self__, "paths", paths)

    @property
    @pulumi.getter
    def paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The set of field mask paths.
        """
        return pulumi.get(self, "paths")

    @paths.setter
    def paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "paths", value)


@pulumi.input_type
class GithubConnectorApiAuthenticationArgs:
    def __init__(__self__, *,
                 github_app: Optional[pulumi.Input['GithubConnectorApiAuthenticationGithubAppArgs']] = None,
                 token_ref: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['GithubConnectorApiAuthenticationGithubAppArgs'] github_app: Configuration for using the github app for interacting with the github api.
        :param pulumi.Input[str] token_ref: Personal access token for interacting with the github api. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        if github_app is not None:
            pulumi.set(__self__, "github_app", github_app)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter(name="githubApp")
    def github_app(self) -> Optional[pulumi.Input['GithubConnectorApiAuthenticationGithubAppArgs']]:
        """
        Configuration for using the github app for interacting with the github api.
        """
        return pulumi.get(self, "github_app")

    @github_app.setter
    def github_app(self, value: Optional[pulumi.Input['GithubConnectorApiAuthenticationGithubAppArgs']]):
        pulumi.set(self, "github_app", value)

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Personal access token for interacting with the github api. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "token_ref")

    @token_ref.setter
    def token_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_ref", value)


@pulumi.input_type
class GithubConnectorApiAuthenticationGithubAppArgs:
    def __init__(__self__, *,
                 private_key_ref: pulumi.Input[str],
                 application_id: Optional[pulumi.Input[str]] = None,
                 application_id_ref: Optional[pulumi.Input[str]] = None,
                 installation_id: Optional[pulumi.Input[str]] = None,
                 installation_id_ref: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] private_key_ref: Reference to the secret containing the private key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[str] application_id: Enter the GitHub App ID from the GitHub App General tab.
        :param pulumi.Input[str] application_id_ref: Reference to the secret containing application id To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[str] installation_id: Enter the Installation ID located in the URL of the installed GitHub App.
        :param pulumi.Input[str] installation_id_ref: Reference to the secret containing installation id. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        pulumi.set(__self__, "private_key_ref", private_key_ref)
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if application_id_ref is not None:
            pulumi.set(__self__, "application_id_ref", application_id_ref)
        if installation_id is not None:
            pulumi.set(__self__, "installation_id", installation_id)
        if installation_id_ref is not None:
            pulumi.set(__self__, "installation_id_ref", installation_id_ref)

    @property
    @pulumi.getter(name="privateKeyRef")
    def private_key_ref(self) -> pulumi.Input[str]:
        """
        Reference to the secret containing the private key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "private_key_ref")

    @private_key_ref.setter
    def private_key_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_key_ref", value)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[str]]:
        """
        Enter the GitHub App ID from the GitHub App General tab.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter(name="applicationIdRef")
    def application_id_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to the secret containing application id To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "application_id_ref")

    @application_id_ref.setter
    def application_id_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_id_ref", value)

    @property
    @pulumi.getter(name="installationId")
    def installation_id(self) -> Optional[pulumi.Input[str]]:
        """
        Enter the Installation ID located in the URL of the installed GitHub App.
        """
        return pulumi.get(self, "installation_id")

    @installation_id.setter
    def installation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "installation_id", value)

    @property
    @pulumi.getter(name="installationIdRef")
    def installation_id_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to the secret containing installation id. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "installation_id_ref")

    @installation_id_ref.setter
    def installation_id_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "installation_id_ref", value)


@pulumi.input_type
class GithubConnectorCredentialsArgs:
    def __init__(__self__, *,
                 http: Optional[pulumi.Input['GithubConnectorCredentialsHttpArgs']] = None,
                 ssh: Optional[pulumi.Input['GithubConnectorCredentialsSshArgs']] = None):
        """
        :param pulumi.Input['GithubConnectorCredentialsHttpArgs'] http: Authenticate using Username and password over http(s) for the connection.
        :param pulumi.Input['GithubConnectorCredentialsSshArgs'] ssh: Authenticate using SSH for the connection.
        """
        if http is not None:
            pulumi.set(__self__, "http", http)
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)

    @property
    @pulumi.getter
    def http(self) -> Optional[pulumi.Input['GithubConnectorCredentialsHttpArgs']]:
        """
        Authenticate using Username and password over http(s) for the connection.
        """
        return pulumi.get(self, "http")

    @http.setter
    def http(self, value: Optional[pulumi.Input['GithubConnectorCredentialsHttpArgs']]):
        pulumi.set(self, "http", value)

    @property
    @pulumi.getter
    def ssh(self) -> Optional[pulumi.Input['GithubConnectorCredentialsSshArgs']]:
        """
        Authenticate using SSH for the connection.
        """
        return pulumi.get(self, "ssh")

    @ssh.setter
    def ssh(self, value: Optional[pulumi.Input['GithubConnectorCredentialsSshArgs']]):
        pulumi.set(self, "ssh", value)


@pulumi.input_type
class GithubConnectorCredentialsHttpArgs:
    def __init__(__self__, *,
                 token_ref: pulumi.Input[str],
                 username: Optional[pulumi.Input[str]] = None,
                 username_ref: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] token_ref: Reference to a secret containing the personal access to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[str] username: Username to use for authentication.
        :param pulumi.Input[str] username_ref: Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        pulumi.set(__self__, "token_ref", token_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if username_ref is not None:
            pulumi.set(__self__, "username_ref", username_ref)

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> pulumi.Input[str]:
        """
        Reference to a secret containing the personal access to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "token_ref")

    @token_ref.setter
    def token_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_ref", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username to use for authentication.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="usernameRef")
    def username_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "username_ref")

    @username_ref.setter
    def username_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_ref", value)


@pulumi.input_type
class GithubConnectorCredentialsSshArgs:
    def __init__(__self__, *,
                 ssh_key_ref: pulumi.Input[str]):
        """
        :param pulumi.Input[str] ssh_key_ref: Reference to the Harness secret containing the ssh key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        pulumi.set(__self__, "ssh_key_ref", ssh_key_ref)

    @property
    @pulumi.getter(name="sshKeyRef")
    def ssh_key_ref(self) -> pulumi.Input[str]:
        """
        Reference to the Harness secret containing the ssh key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "ssh_key_ref")

    @ssh_key_ref.setter
    def ssh_key_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key_ref", value)


@pulumi.input_type
class GitlabConnectorApiAuthenticationArgs:
    def __init__(__self__, *,
                 token_ref: pulumi.Input[str]):
        """
        :param pulumi.Input[str] token_ref: Personal access token for interacting with the gitlab api. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> pulumi.Input[str]:
        """
        Personal access token for interacting with the gitlab api. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "token_ref")

    @token_ref.setter
    def token_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_ref", value)


@pulumi.input_type
class GitlabConnectorCredentialsArgs:
    def __init__(__self__, *,
                 http: Optional[pulumi.Input['GitlabConnectorCredentialsHttpArgs']] = None,
                 ssh: Optional[pulumi.Input['GitlabConnectorCredentialsSshArgs']] = None):
        """
        :param pulumi.Input['GitlabConnectorCredentialsHttpArgs'] http: Authenticate using Username and password over http(s) for the connection.
        :param pulumi.Input['GitlabConnectorCredentialsSshArgs'] ssh: Authenticate using SSH for the connection.
        """
        if http is not None:
            pulumi.set(__self__, "http", http)
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)

    @property
    @pulumi.getter
    def http(self) -> Optional[pulumi.Input['GitlabConnectorCredentialsHttpArgs']]:
        """
        Authenticate using Username and password over http(s) for the connection.
        """
        return pulumi.get(self, "http")

    @http.setter
    def http(self, value: Optional[pulumi.Input['GitlabConnectorCredentialsHttpArgs']]):
        pulumi.set(self, "http", value)

    @property
    @pulumi.getter
    def ssh(self) -> Optional[pulumi.Input['GitlabConnectorCredentialsSshArgs']]:
        """
        Authenticate using SSH for the connection.
        """
        return pulumi.get(self, "ssh")

    @ssh.setter
    def ssh(self, value: Optional[pulumi.Input['GitlabConnectorCredentialsSshArgs']]):
        pulumi.set(self, "ssh", value)


@pulumi.input_type
class GitlabConnectorCredentialsHttpArgs:
    def __init__(__self__, *,
                 password_ref: Optional[pulumi.Input[str]] = None,
                 token_ref: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 username_ref: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] password_ref: Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[str] token_ref: Reference to a secret containing the personal access to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[str] username: Username to use for authentication.
        :param pulumi.Input[str] username_ref: Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        if password_ref is not None:
            pulumi.set(__self__, "password_ref", password_ref)
        if token_ref is not None:
            pulumi.set(__self__, "token_ref", token_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if username_ref is not None:
            pulumi.set(__self__, "username_ref", username_ref)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "password_ref")

    @password_ref.setter
    def password_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_ref", value)

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to a secret containing the personal access to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "token_ref")

    @token_ref.setter
    def token_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_ref", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username to use for authentication.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="usernameRef")
    def username_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "username_ref")

    @username_ref.setter
    def username_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_ref", value)


@pulumi.input_type
class GitlabConnectorCredentialsSshArgs:
    def __init__(__self__, *,
                 ssh_key_ref: pulumi.Input[str]):
        """
        :param pulumi.Input[str] ssh_key_ref: Reference to the Harness secret containing the ssh key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        pulumi.set(__self__, "ssh_key_ref", ssh_key_ref)

    @property
    @pulumi.getter(name="sshKeyRef")
    def ssh_key_ref(self) -> pulumi.Input[str]:
        """
        Reference to the Harness secret containing the ssh key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "ssh_key_ref")

    @ssh_key_ref.setter
    def ssh_key_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key_ref", value)


@pulumi.input_type
class HelmConnectorCredentialsArgs:
    def __init__(__self__, *,
                 password_ref: pulumi.Input[str],
                 username: Optional[pulumi.Input[str]] = None,
                 username_ref: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] password_ref: Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[str] username: Username to use for authentication.
        :param pulumi.Input[str] username_ref: Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        pulumi.set(__self__, "password_ref", password_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if username_ref is not None:
            pulumi.set(__self__, "username_ref", username_ref)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> pulumi.Input[str]:
        """
        Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "password_ref")

    @password_ref.setter
    def password_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "password_ref", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username to use for authentication.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="usernameRef")
    def username_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "username_ref")

    @username_ref.setter
    def username_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_ref", value)


@pulumi.input_type
class InputSetGitDetailsArgs:
    def __init__(__self__, *,
                 base_branch: Optional[pulumi.Input[str]] = None,
                 branch_name: Optional[pulumi.Input[str]] = None,
                 commit_message: Optional[pulumi.Input[str]] = None,
                 connector_ref: Optional[pulumi.Input[str]] = None,
                 file_path: Optional[pulumi.Input[str]] = None,
                 last_commit_id: Optional[pulumi.Input[str]] = None,
                 last_object_id: Optional[pulumi.Input[str]] = None,
                 parent_entity_connector_ref: Optional[pulumi.Input[str]] = None,
                 parent_entity_repo_name: Optional[pulumi.Input[str]] = None,
                 repo_name: Optional[pulumi.Input[str]] = None,
                 store_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] base_branch: Name of the default branch (this checks out a new branch titled by branch_name).
        :param pulumi.Input[str] branch_name: Name of the branch.
        :param pulumi.Input[str] commit_message: Commit message used for the merge commit.
        :param pulumi.Input[str] connector_ref: Identifier of the Harness Connector used for CRUD operations on the Entity. To reference a connector at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a connector at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[str] file_path: File path of the Entity in the repository.
        :param pulumi.Input[str] last_commit_id: Last commit identifier (for Git Repositories other than Github). To be provided only when updating Pipeline.
        :param pulumi.Input[str] last_object_id: Last object identifier (for Github). To be provided only when updating Pipeline.
        :param pulumi.Input[str] parent_entity_connector_ref: Connector reference for Parent Entity (Pipeline). To reference a connector at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a connector at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[str] parent_entity_repo_name: Repository name for Parent Entity (Pipeline).
        :param pulumi.Input[str] repo_name: Name of the repository.
        :param pulumi.Input[str] store_type: Specifies whether the Entity is to be stored in Git or not. Possible values: INLINE, REMOTE.
        """
        if base_branch is not None:
            pulumi.set(__self__, "base_branch", base_branch)
        if branch_name is not None:
            pulumi.set(__self__, "branch_name", branch_name)
        if commit_message is not None:
            pulumi.set(__self__, "commit_message", commit_message)
        if connector_ref is not None:
            pulumi.set(__self__, "connector_ref", connector_ref)
        if file_path is not None:
            pulumi.set(__self__, "file_path", file_path)
        if last_commit_id is not None:
            pulumi.set(__self__, "last_commit_id", last_commit_id)
        if last_object_id is not None:
            pulumi.set(__self__, "last_object_id", last_object_id)
        if parent_entity_connector_ref is not None:
            pulumi.set(__self__, "parent_entity_connector_ref", parent_entity_connector_ref)
        if parent_entity_repo_name is not None:
            pulumi.set(__self__, "parent_entity_repo_name", parent_entity_repo_name)
        if repo_name is not None:
            pulumi.set(__self__, "repo_name", repo_name)
        if store_type is not None:
            pulumi.set(__self__, "store_type", store_type)

    @property
    @pulumi.getter(name="baseBranch")
    def base_branch(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the default branch (this checks out a new branch titled by branch_name).
        """
        return pulumi.get(self, "base_branch")

    @base_branch.setter
    def base_branch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_branch", value)

    @property
    @pulumi.getter(name="branchName")
    def branch_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the branch.
        """
        return pulumi.get(self, "branch_name")

    @branch_name.setter
    def branch_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branch_name", value)

    @property
    @pulumi.getter(name="commitMessage")
    def commit_message(self) -> Optional[pulumi.Input[str]]:
        """
        Commit message used for the merge commit.
        """
        return pulumi.get(self, "commit_message")

    @commit_message.setter
    def commit_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "commit_message", value)

    @property
    @pulumi.getter(name="connectorRef")
    def connector_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of the Harness Connector used for CRUD operations on the Entity. To reference a connector at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a connector at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "connector_ref")

    @connector_ref.setter
    def connector_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connector_ref", value)

    @property
    @pulumi.getter(name="filePath")
    def file_path(self) -> Optional[pulumi.Input[str]]:
        """
        File path of the Entity in the repository.
        """
        return pulumi.get(self, "file_path")

    @file_path.setter
    def file_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_path", value)

    @property
    @pulumi.getter(name="lastCommitId")
    def last_commit_id(self) -> Optional[pulumi.Input[str]]:
        """
        Last commit identifier (for Git Repositories other than Github). To be provided only when updating Pipeline.
        """
        return pulumi.get(self, "last_commit_id")

    @last_commit_id.setter
    def last_commit_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_commit_id", value)

    @property
    @pulumi.getter(name="lastObjectId")
    def last_object_id(self) -> Optional[pulumi.Input[str]]:
        """
        Last object identifier (for Github). To be provided only when updating Pipeline.
        """
        return pulumi.get(self, "last_object_id")

    @last_object_id.setter
    def last_object_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_object_id", value)

    @property
    @pulumi.getter(name="parentEntityConnectorRef")
    def parent_entity_connector_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Connector reference for Parent Entity (Pipeline). To reference a connector at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a connector at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "parent_entity_connector_ref")

    @parent_entity_connector_ref.setter
    def parent_entity_connector_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_entity_connector_ref", value)

    @property
    @pulumi.getter(name="parentEntityRepoName")
    def parent_entity_repo_name(self) -> Optional[pulumi.Input[str]]:
        """
        Repository name for Parent Entity (Pipeline).
        """
        return pulumi.get(self, "parent_entity_repo_name")

    @parent_entity_repo_name.setter
    def parent_entity_repo_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_entity_repo_name", value)

    @property
    @pulumi.getter(name="repoName")
    def repo_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the repository.
        """
        return pulumi.get(self, "repo_name")

    @repo_name.setter
    def repo_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo_name", value)

    @property
    @pulumi.getter(name="storeType")
    def store_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether the Entity is to be stored in Git or not. Possible values: INLINE, REMOTE.
        """
        return pulumi.get(self, "store_type")

    @store_type.setter
    def store_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "store_type", value)


@pulumi.input_type
class JenkinsConnectorAuthArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 jenkins_bearer_token: Optional[pulumi.Input['JenkinsConnectorAuthJenkinsBearerTokenArgs']] = None,
                 jenkins_user_name_password: Optional[pulumi.Input['JenkinsConnectorAuthJenkinsUserNamePasswordArgs']] = None):
        """
        :param pulumi.Input[str] type: Can be one of UsernamePassword, Anonymous, Bearer Token(HTTP Header)
        :param pulumi.Input['JenkinsConnectorAuthJenkinsBearerTokenArgs'] jenkins_bearer_token: Authenticate to App Dynamics using bearer token.
        :param pulumi.Input['JenkinsConnectorAuthJenkinsUserNamePasswordArgs'] jenkins_user_name_password: Authenticate to App Dynamics using user name and password.
        """
        pulumi.set(__self__, "type", type)
        if jenkins_bearer_token is not None:
            pulumi.set(__self__, "jenkins_bearer_token", jenkins_bearer_token)
        if jenkins_user_name_password is not None:
            pulumi.set(__self__, "jenkins_user_name_password", jenkins_user_name_password)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Can be one of UsernamePassword, Anonymous, Bearer Token(HTTP Header)
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="jenkinsBearerToken")
    def jenkins_bearer_token(self) -> Optional[pulumi.Input['JenkinsConnectorAuthJenkinsBearerTokenArgs']]:
        """
        Authenticate to App Dynamics using bearer token.
        """
        return pulumi.get(self, "jenkins_bearer_token")

    @jenkins_bearer_token.setter
    def jenkins_bearer_token(self, value: Optional[pulumi.Input['JenkinsConnectorAuthJenkinsBearerTokenArgs']]):
        pulumi.set(self, "jenkins_bearer_token", value)

    @property
    @pulumi.getter(name="jenkinsUserNamePassword")
    def jenkins_user_name_password(self) -> Optional[pulumi.Input['JenkinsConnectorAuthJenkinsUserNamePasswordArgs']]:
        """
        Authenticate to App Dynamics using user name and password.
        """
        return pulumi.get(self, "jenkins_user_name_password")

    @jenkins_user_name_password.setter
    def jenkins_user_name_password(self, value: Optional[pulumi.Input['JenkinsConnectorAuthJenkinsUserNamePasswordArgs']]):
        pulumi.set(self, "jenkins_user_name_password", value)


@pulumi.input_type
class JenkinsConnectorAuthJenkinsBearerTokenArgs:
    def __init__(__self__, *,
                 token_ref: pulumi.Input[str]):
        """
        :param pulumi.Input[str] token_ref: Reference of the token. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        pulumi.set(__self__, "token_ref", token_ref)

    @property
    @pulumi.getter(name="tokenRef")
    def token_ref(self) -> pulumi.Input[str]:
        """
        Reference of the token. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "token_ref")

    @token_ref.setter
    def token_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_ref", value)


@pulumi.input_type
class JenkinsConnectorAuthJenkinsUserNamePasswordArgs:
    def __init__(__self__, *,
                 password_ref: pulumi.Input[str],
                 username: Optional[pulumi.Input[str]] = None,
                 username_ref: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] password_ref: Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[str] username: Username to use for authentication.
        :param pulumi.Input[str] username_ref: Username reference to use for authentication.
        """
        pulumi.set(__self__, "password_ref", password_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if username_ref is not None:
            pulumi.set(__self__, "username_ref", username_ref)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> pulumi.Input[str]:
        """
        Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "password_ref")

    @password_ref.setter
    def password_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "password_ref", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username to use for authentication.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="usernameRef")
    def username_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Username reference to use for authentication.
        """
        return pulumi.get(self, "username_ref")

    @username_ref.setter
    def username_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_ref", value)


@pulumi.input_type
class JiraConnectorAuthArgs:
    def __init__(__self__, *,
                 auth_type: pulumi.Input[str],
                 username_password: Optional[pulumi.Input['JiraConnectorAuthUsernamePasswordArgs']] = None):
        """
        :param pulumi.Input[str] auth_type: Authentication types for Jira connector
        :param pulumi.Input['JiraConnectorAuthUsernamePasswordArgs'] username_password: Authenticate using username password.
        """
        pulumi.set(__self__, "auth_type", auth_type)
        if username_password is not None:
            pulumi.set(__self__, "username_password", username_password)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        """
        Authentication types for Jira connector
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="usernamePassword")
    def username_password(self) -> Optional[pulumi.Input['JiraConnectorAuthUsernamePasswordArgs']]:
        """
        Authenticate using username password.
        """
        return pulumi.get(self, "username_password")

    @username_password.setter
    def username_password(self, value: Optional[pulumi.Input['JiraConnectorAuthUsernamePasswordArgs']]):
        pulumi.set(self, "username_password", value)


@pulumi.input_type
class JiraConnectorAuthUsernamePasswordArgs:
    def __init__(__self__, *,
                 password_ref: pulumi.Input[str],
                 username: Optional[pulumi.Input[str]] = None,
                 username_ref: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] password_ref: Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[str] username: Username to use for authentication.
        :param pulumi.Input[str] username_ref: Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        pulumi.set(__self__, "password_ref", password_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if username_ref is not None:
            pulumi.set(__self__, "username_ref", username_ref)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> pulumi.Input[str]:
        """
        Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "password_ref")

    @password_ref.setter
    def password_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "password_ref", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username to use for authentication.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="usernameRef")
    def username_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "username_ref")

    @username_ref.setter
    def username_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_ref", value)


@pulumi.input_type
class KubernetesConnectorClientKeyCertArgs:
    def __init__(__self__, *,
                 client_cert_ref: pulumi.Input[str],
                 client_key_algorithm: pulumi.Input[str],
                 client_key_ref: pulumi.Input[str],
                 master_url: pulumi.Input[str],
                 ca_cert_ref: Optional[pulumi.Input[str]] = None,
                 client_key_passphrase_ref: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] client_cert_ref: Reference to the secret containing the client certificate for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[str] client_key_algorithm: The algorithm used to generate the client key for the connector. Valid values are RSA, EC
        :param pulumi.Input[str] client_key_ref: Reference to the secret containing the client key for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[str] master_url: The URL of the Kubernetes cluster.
        :param pulumi.Input[str] ca_cert_ref: Reference to the secret containing the CA certificate for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[str] client_key_passphrase_ref: Reference to the secret containing the client key passphrase for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        pulumi.set(__self__, "client_cert_ref", client_cert_ref)
        pulumi.set(__self__, "client_key_algorithm", client_key_algorithm)
        pulumi.set(__self__, "client_key_ref", client_key_ref)
        pulumi.set(__self__, "master_url", master_url)
        if ca_cert_ref is not None:
            pulumi.set(__self__, "ca_cert_ref", ca_cert_ref)
        if client_key_passphrase_ref is not None:
            pulumi.set(__self__, "client_key_passphrase_ref", client_key_passphrase_ref)

    @property
    @pulumi.getter(name="clientCertRef")
    def client_cert_ref(self) -> pulumi.Input[str]:
        """
        Reference to the secret containing the client certificate for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "client_cert_ref")

    @client_cert_ref.setter
    def client_cert_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_cert_ref", value)

    @property
    @pulumi.getter(name="clientKeyAlgorithm")
    def client_key_algorithm(self) -> pulumi.Input[str]:
        """
        The algorithm used to generate the client key for the connector. Valid values are RSA, EC
        """
        return pulumi.get(self, "client_key_algorithm")

    @client_key_algorithm.setter
    def client_key_algorithm(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_key_algorithm", value)

    @property
    @pulumi.getter(name="clientKeyRef")
    def client_key_ref(self) -> pulumi.Input[str]:
        """
        Reference to the secret containing the client key for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "client_key_ref")

    @client_key_ref.setter
    def client_key_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_key_ref", value)

    @property
    @pulumi.getter(name="masterUrl")
    def master_url(self) -> pulumi.Input[str]:
        """
        The URL of the Kubernetes cluster.
        """
        return pulumi.get(self, "master_url")

    @master_url.setter
    def master_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "master_url", value)

    @property
    @pulumi.getter(name="caCertRef")
    def ca_cert_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to the secret containing the CA certificate for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "ca_cert_ref")

    @ca_cert_ref.setter
    def ca_cert_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_cert_ref", value)

    @property
    @pulumi.getter(name="clientKeyPassphraseRef")
    def client_key_passphrase_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to the secret containing the client key passphrase for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "client_key_passphrase_ref")

    @client_key_passphrase_ref.setter
    def client_key_passphrase_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key_passphrase_ref", value)


@pulumi.input_type
class KubernetesConnectorInheritFromDelegateArgs:
    def __init__(__self__, *,
                 delegate_selectors: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] delegate_selectors: Selectors to use for the delegate.
        """
        pulumi.set(__self__, "delegate_selectors", delegate_selectors)

    @property
    @pulumi.getter(name="delegateSelectors")
    def delegate_selectors(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Selectors to use for the delegate.
        """
        return pulumi.get(self, "delegate_selectors")

    @delegate_selectors.setter
    def delegate_selectors(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "delegate_selectors", value)


@pulumi.input_type
class KubernetesConnectorOpenidConnectArgs:
    def __init__(__self__, *,
                 client_id_ref: pulumi.Input[str],
                 issuer_url: pulumi.Input[str],
                 master_url: pulumi.Input[str],
                 password_ref: pulumi.Input[str],
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 secret_ref: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 username_ref: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] client_id_ref: Reference to the secret containing the client ID for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[str] issuer_url: The URL of the OpenID Connect issuer.
        :param pulumi.Input[str] master_url: The URL of the Kubernetes cluster.
        :param pulumi.Input[str] password_ref: Reference to the secret containing the password for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes: Scopes to request for the connector.
        :param pulumi.Input[str] secret_ref: Reference to the secret containing the client secret for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[str] username: Username for the connector.
        :param pulumi.Input[str] username_ref: Reference to the secret containing the username for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        pulumi.set(__self__, "client_id_ref", client_id_ref)
        pulumi.set(__self__, "issuer_url", issuer_url)
        pulumi.set(__self__, "master_url", master_url)
        pulumi.set(__self__, "password_ref", password_ref)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if username_ref is not None:
            pulumi.set(__self__, "username_ref", username_ref)

    @property
    @pulumi.getter(name="clientIdRef")
    def client_id_ref(self) -> pulumi.Input[str]:
        """
        Reference to the secret containing the client ID for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "client_id_ref")

    @client_id_ref.setter
    def client_id_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id_ref", value)

    @property
    @pulumi.getter(name="issuerUrl")
    def issuer_url(self) -> pulumi.Input[str]:
        """
        The URL of the OpenID Connect issuer.
        """
        return pulumi.get(self, "issuer_url")

    @issuer_url.setter
    def issuer_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "issuer_url", value)

    @property
    @pulumi.getter(name="masterUrl")
    def master_url(self) -> pulumi.Input[str]:
        """
        The URL of the Kubernetes cluster.
        """
        return pulumi.get(self, "master_url")

    @master_url.setter
    def master_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "master_url", value)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> pulumi.Input[str]:
        """
        Reference to the secret containing the password for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "password_ref")

    @password_ref.setter
    def password_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "password_ref", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Scopes to request for the connector.
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to the secret containing the client secret for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_ref", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username for the connector.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="usernameRef")
    def username_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to the secret containing the username for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "username_ref")

    @username_ref.setter
    def username_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_ref", value)


@pulumi.input_type
class KubernetesConnectorServiceAccountArgs:
    def __init__(__self__, *,
                 master_url: pulumi.Input[str],
                 service_account_token_ref: pulumi.Input[str]):
        """
        :param pulumi.Input[str] master_url: The URL of the Kubernetes cluster.
        :param pulumi.Input[str] service_account_token_ref: Reference to the secret containing the service account token for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        pulumi.set(__self__, "master_url", master_url)
        pulumi.set(__self__, "service_account_token_ref", service_account_token_ref)

    @property
    @pulumi.getter(name="masterUrl")
    def master_url(self) -> pulumi.Input[str]:
        """
        The URL of the Kubernetes cluster.
        """
        return pulumi.get(self, "master_url")

    @master_url.setter
    def master_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "master_url", value)

    @property
    @pulumi.getter(name="serviceAccountTokenRef")
    def service_account_token_ref(self) -> pulumi.Input[str]:
        """
        Reference to the secret containing the service account token for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "service_account_token_ref")

    @service_account_token_ref.setter
    def service_account_token_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_account_token_ref", value)


@pulumi.input_type
class KubernetesConnectorUsernamePasswordArgs:
    def __init__(__self__, *,
                 master_url: pulumi.Input[str],
                 password_ref: pulumi.Input[str],
                 username: Optional[pulumi.Input[str]] = None,
                 username_ref: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] master_url: The URL of the Kubernetes cluster.
        :param pulumi.Input[str] password_ref: Reference to the secret containing the password for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[str] username: Username for the connector.
        :param pulumi.Input[str] username_ref: Reference to the secret containing the username for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        pulumi.set(__self__, "master_url", master_url)
        pulumi.set(__self__, "password_ref", password_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if username_ref is not None:
            pulumi.set(__self__, "username_ref", username_ref)

    @property
    @pulumi.getter(name="masterUrl")
    def master_url(self) -> pulumi.Input[str]:
        """
        The URL of the Kubernetes cluster.
        """
        return pulumi.get(self, "master_url")

    @master_url.setter
    def master_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "master_url", value)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> pulumi.Input[str]:
        """
        Reference to the secret containing the password for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "password_ref")

    @password_ref.setter
    def password_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "password_ref", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username for the connector.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="usernameRef")
    def username_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to the secret containing the username for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "username_ref")

    @username_ref.setter
    def username_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_ref", value)


@pulumi.input_type
class ManualFreezeCurrentOrUpcomingWindowArgs:
    def __init__(__self__, *,
                 end_time: Optional[pulumi.Input[int]] = None,
                 start_time: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] end_time: End time of the freeze
        :param pulumi.Input[int] start_time: Start time of the freeze
        """
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[int]]:
        """
        End time of the freeze
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[int]]:
        """
        Start time of the freeze
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_time", value)


@pulumi.input_type
class ManualFreezeFreezeWindowArgs:
    def __init__(__self__, *,
                 duration: Optional[pulumi.Input[str]] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 recurrences: Optional[pulumi.Input[Sequence[pulumi.Input['ManualFreezeFreezeWindowRecurrenceArgs']]]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] duration: Duration of the freeze
        :param pulumi.Input[str] end_time: End time of the freeze
        :param pulumi.Input[Sequence[pulumi.Input['ManualFreezeFreezeWindowRecurrenceArgs']]] recurrences: Recurrence of the freeze window
        :param pulumi.Input[str] start_time: Start time of the freeze
        :param pulumi.Input[str] time_zone: Timezone
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if recurrences is not None:
            pulumi.set(__self__, "recurrences", recurrences)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[str]]:
        """
        Duration of the freeze
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[str]]:
        """
        End time of the freeze
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter
    def recurrences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManualFreezeFreezeWindowRecurrenceArgs']]]]:
        """
        Recurrence of the freeze window
        """
        return pulumi.get(self, "recurrences")

    @recurrences.setter
    def recurrences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManualFreezeFreezeWindowRecurrenceArgs']]]]):
        pulumi.set(self, "recurrences", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        """
        Start time of the freeze
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Timezone
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone", value)


@pulumi.input_type
class ManualFreezeFreezeWindowRecurrenceArgs:
    def __init__(__self__, *,
                 recurrence_specs: Optional[pulumi.Input[Sequence[pulumi.Input['ManualFreezeFreezeWindowRecurrenceRecurrenceSpecArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ManualFreezeFreezeWindowRecurrenceRecurrenceSpecArgs']]] recurrence_specs: Used to filter resources on their attributes
        :param pulumi.Input[str] type: Recurrence type(Daily, Weekly, Monthly, Yearly)
        """
        if recurrence_specs is not None:
            pulumi.set(__self__, "recurrence_specs", recurrence_specs)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="recurrenceSpecs")
    def recurrence_specs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManualFreezeFreezeWindowRecurrenceRecurrenceSpecArgs']]]]:
        """
        Used to filter resources on their attributes
        """
        return pulumi.get(self, "recurrence_specs")

    @recurrence_specs.setter
    def recurrence_specs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManualFreezeFreezeWindowRecurrenceRecurrenceSpecArgs']]]]):
        pulumi.set(self, "recurrence_specs", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Recurrence type(Daily, Weekly, Monthly, Yearly)
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ManualFreezeFreezeWindowRecurrenceRecurrenceSpecArgs:
    def __init__(__self__, *,
                 until: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] until: Recurrence until timestamp
        :param pulumi.Input[int] value: Value of n, for n months recurrence
        """
        if until is not None:
            pulumi.set(__self__, "until", until)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def until(self) -> Optional[pulumi.Input[str]]:
        """
        Recurrence until timestamp
        """
        return pulumi.get(self, "until")

    @until.setter
    def until(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "until", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[int]]:
        """
        Value of n, for n months recurrence
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class MonitoredServiceRequestArgs:
    def __init__(__self__, *,
                 environment_ref: pulumi.Input[str],
                 name: pulumi.Input[str],
                 service_ref: pulumi.Input[str],
                 type: pulumi.Input[str],
                 change_sources: Optional[pulumi.Input[Sequence[pulumi.Input['MonitoredServiceRequestChangeSourceArgs']]]] = None,
                 dependencies: Optional[pulumi.Input[Sequence[pulumi.Input['MonitoredServiceRequestDependencyArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 environment_ref_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 health_sources: Optional[pulumi.Input[Sequence[pulumi.Input['MonitoredServiceRequestHealthSourceArgs']]]] = None,
                 notification_rule_refs: Optional[pulumi.Input[Sequence[pulumi.Input['MonitoredServiceRequestNotificationRuleRefArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 template_ref: Optional[pulumi.Input[str]] = None,
                 version_label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] environment_ref: Environment in which the service is deployed.
        :param pulumi.Input[str] name: Name for the monitored service.
        :param pulumi.Input[str] service_ref: Service reference for the monitored service.
        :param pulumi.Input[str] type: Type of the monitored service.
        :param pulumi.Input[Sequence[pulumi.Input['MonitoredServiceRequestChangeSourceArgs']]] change_sources: Set of change sources for the monitored service.
        :param pulumi.Input[Sequence[pulumi.Input['MonitoredServiceRequestDependencyArgs']]] dependencies: Dependencies of the monitored service.
        :param pulumi.Input[str] description: Description for the monitored service.
        :param pulumi.Input[bool] enabled: Enable or disable the monitored service.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environment_ref_lists: Environment reference list for the monitored service.
        :param pulumi.Input[Sequence[pulumi.Input['MonitoredServiceRequestHealthSourceArgs']]] health_sources: Set of health sources for the monitored service.
        :param pulumi.Input[Sequence[pulumi.Input['MonitoredServiceRequestNotificationRuleRefArgs']]] notification_rule_refs: Notification rule references for the monitored service.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tags for the monitored service. comma-separated key value string pairs.
        :param pulumi.Input[str] template_ref: Template reference for the monitored service.
        :param pulumi.Input[str] version_label: Template version label for the monitored service.
        """
        pulumi.set(__self__, "environment_ref", environment_ref)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service_ref", service_ref)
        pulumi.set(__self__, "type", type)
        if change_sources is not None:
            pulumi.set(__self__, "change_sources", change_sources)
        if dependencies is not None:
            pulumi.set(__self__, "dependencies", dependencies)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if environment_ref_lists is not None:
            pulumi.set(__self__, "environment_ref_lists", environment_ref_lists)
        if health_sources is not None:
            pulumi.set(__self__, "health_sources", health_sources)
        if notification_rule_refs is not None:
            pulumi.set(__self__, "notification_rule_refs", notification_rule_refs)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if template_ref is not None:
            pulumi.set(__self__, "template_ref", template_ref)
        if version_label is not None:
            pulumi.set(__self__, "version_label", version_label)

    @property
    @pulumi.getter(name="environmentRef")
    def environment_ref(self) -> pulumi.Input[str]:
        """
        Environment in which the service is deployed.
        """
        return pulumi.get(self, "environment_ref")

    @environment_ref.setter
    def environment_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "environment_ref", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name for the monitored service.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serviceRef")
    def service_ref(self) -> pulumi.Input[str]:
        """
        Service reference for the monitored service.
        """
        return pulumi.get(self, "service_ref")

    @service_ref.setter
    def service_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_ref", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of the monitored service.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="changeSources")
    def change_sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MonitoredServiceRequestChangeSourceArgs']]]]:
        """
        Set of change sources for the monitored service.
        """
        return pulumi.get(self, "change_sources")

    @change_sources.setter
    def change_sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MonitoredServiceRequestChangeSourceArgs']]]]):
        pulumi.set(self, "change_sources", value)

    @property
    @pulumi.getter
    def dependencies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MonitoredServiceRequestDependencyArgs']]]]:
        """
        Dependencies of the monitored service.
        """
        return pulumi.get(self, "dependencies")

    @dependencies.setter
    def dependencies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MonitoredServiceRequestDependencyArgs']]]]):
        pulumi.set(self, "dependencies", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description for the monitored service.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable or disable the monitored service.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="environmentRefLists")
    def environment_ref_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Environment reference list for the monitored service.
        """
        return pulumi.get(self, "environment_ref_lists")

    @environment_ref_lists.setter
    def environment_ref_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environment_ref_lists", value)

    @property
    @pulumi.getter(name="healthSources")
    def health_sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MonitoredServiceRequestHealthSourceArgs']]]]:
        """
        Set of health sources for the monitored service.
        """
        return pulumi.get(self, "health_sources")

    @health_sources.setter
    def health_sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MonitoredServiceRequestHealthSourceArgs']]]]):
        pulumi.set(self, "health_sources", value)

    @property
    @pulumi.getter(name="notificationRuleRefs")
    def notification_rule_refs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MonitoredServiceRequestNotificationRuleRefArgs']]]]:
        """
        Notification rule references for the monitored service.
        """
        return pulumi.get(self, "notification_rule_refs")

    @notification_rule_refs.setter
    def notification_rule_refs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MonitoredServiceRequestNotificationRuleRefArgs']]]]):
        pulumi.set(self, "notification_rule_refs", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Tags for the monitored service. comma-separated key value string pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="templateRef")
    def template_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Template reference for the monitored service.
        """
        return pulumi.get(self, "template_ref")

    @template_ref.setter
    def template_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_ref", value)

    @property
    @pulumi.getter(name="versionLabel")
    def version_label(self) -> Optional[pulumi.Input[str]]:
        """
        Template version label for the monitored service.
        """
        return pulumi.get(self, "version_label")

    @version_label.setter
    def version_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_label", value)


@pulumi.input_type
class MonitoredServiceRequestChangeSourceArgs:
    def __init__(__self__, *,
                 category: pulumi.Input[str],
                 identifier: pulumi.Input[str],
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 enabled: Optional[pulumi.Input[bool]] = None,
                 spec: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] category: Category of the change source.
        :param pulumi.Input[str] identifier: Identifier of the change source.
        :param pulumi.Input[str] name: Name of the change source.
        :param pulumi.Input[str] type: Type of the change source.
        :param pulumi.Input[bool] enabled: Enable or disable the change source.
        :param pulumi.Input[str] spec: Specification of the change source. Depends on the type of the change source.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def category(self) -> pulumi.Input[str]:
        """
        Category of the change source.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: pulumi.Input[str]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def identifier(self) -> pulumi.Input[str]:
        """
        Identifier of the change source.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the change source.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of the change source.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable or disable the change source.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input[str]]:
        """
        Specification of the change source. Depends on the type of the change source.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec", value)


@pulumi.input_type
class MonitoredServiceRequestDependencyArgs:
    def __init__(__self__, *,
                 monitored_service_identifier: pulumi.Input[str],
                 type: pulumi.Input[str],
                 dependency_metadata: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] monitored_service_identifier: Monitored service identifier of the dependency.
        :param pulumi.Input[str] type: Type of the service dependency.
        :param pulumi.Input[str] dependency_metadata: Dependency metadata for the monitored service.
        """
        pulumi.set(__self__, "monitored_service_identifier", monitored_service_identifier)
        pulumi.set(__self__, "type", type)
        if dependency_metadata is not None:
            pulumi.set(__self__, "dependency_metadata", dependency_metadata)

    @property
    @pulumi.getter(name="monitoredServiceIdentifier")
    def monitored_service_identifier(self) -> pulumi.Input[str]:
        """
        Monitored service identifier of the dependency.
        """
        return pulumi.get(self, "monitored_service_identifier")

    @monitored_service_identifier.setter
    def monitored_service_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "monitored_service_identifier", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of the service dependency.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="dependencyMetadata")
    def dependency_metadata(self) -> Optional[pulumi.Input[str]]:
        """
        Dependency metadata for the monitored service.
        """
        return pulumi.get(self, "dependency_metadata")

    @dependency_metadata.setter
    def dependency_metadata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dependency_metadata", value)


@pulumi.input_type
class MonitoredServiceRequestHealthSourceArgs:
    def __init__(__self__, *,
                 identifier: pulumi.Input[str],
                 name: pulumi.Input[str],
                 spec: pulumi.Input[str],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] identifier: Identifier of the health source.
        :param pulumi.Input[str] name: Name of the health source.
        :param pulumi.Input[str] spec: Specification of the health source. Depends on the type of the health source.
        :param pulumi.Input[str] type: Type of the health source.
        """
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "spec", spec)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def identifier(self) -> pulumi.Input[str]:
        """
        Identifier of the health source.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the health source.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def spec(self) -> pulumi.Input[str]:
        """
        Specification of the health source. Depends on the type of the health source.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: pulumi.Input[str]):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of the health source.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class MonitoredServiceRequestNotificationRuleRefArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 notification_rule_ref: pulumi.Input[str]):
        """
        :param pulumi.Input[bool] enabled: Enable or disable notification rule reference for the monitored service.
        :param pulumi.Input[str] notification_rule_ref: Notification rule reference for the monitored service.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "notification_rule_ref", notification_rule_ref)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Enable or disable notification rule reference for the monitored service.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="notificationRuleRef")
    def notification_rule_ref(self) -> pulumi.Input[str]:
        """
        Notification rule reference for the monitored service.
        """
        return pulumi.get(self, "notification_rule_ref")

    @notification_rule_ref.setter
    def notification_rule_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "notification_rule_ref", value)


@pulumi.input_type
class NexusConnectorCredentialsArgs:
    def __init__(__self__, *,
                 password_ref: pulumi.Input[str],
                 username: Optional[pulumi.Input[str]] = None,
                 username_ref: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] password_ref: Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[str] username: Username to use for authentication.
        :param pulumi.Input[str] username_ref: Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        pulumi.set(__self__, "password_ref", password_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if username_ref is not None:
            pulumi.set(__self__, "username_ref", username_ref)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> pulumi.Input[str]:
        """
        Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "password_ref")

    @password_ref.setter
    def password_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "password_ref", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username to use for authentication.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="usernameRef")
    def username_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "username_ref")

    @username_ref.setter
    def username_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_ref", value)


@pulumi.input_type
class OciHelmConnectorCredentialsArgs:
    def __init__(__self__, *,
                 password_ref: pulumi.Input[str],
                 username: Optional[pulumi.Input[str]] = None,
                 username_ref: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] password_ref: Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[str] username: Username to use for authentication.
        :param pulumi.Input[str] username_ref: Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        pulumi.set(__self__, "password_ref", password_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if username_ref is not None:
            pulumi.set(__self__, "username_ref", username_ref)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> pulumi.Input[str]:
        """
        Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "password_ref")

    @password_ref.setter
    def password_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "password_ref", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username to use for authentication.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="usernameRef")
    def username_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "username_ref")

    @username_ref.setter
    def username_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_ref", value)


@pulumi.input_type
class PipelineFiltersFilterPropertiesArgs:
    def __init__(__self__, *,
                 filter_type: pulumi.Input[str],
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] filter_type: Corresponding Entity of the filters. Currently supported types are {Connector, DelegateProfile, Delegate, PipelineSetup, PipelineExecution, Deployment, Audit, Template, EnvironmentGroup, FileStore, CCMRecommendation, Anomaly, Environment}.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tags to associate with the resource. Tags should be in the form `name:value`.
        """
        pulumi.set(__self__, "filter_type", filter_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> pulumi.Input[str]:
        """
        Corresponding Entity of the filters. Currently supported types are {Connector, DelegateProfile, Delegate, PipelineSetup, PipelineExecution, Deployment, Audit, Template, EnvironmentGroup, FileStore, CCMRecommendation, Anomaly, Environment}.
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Tags to associate with the resource. Tags should be in the form `name:value`.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class PipelineGitDetailsArgs:
    def __init__(__self__, *,
                 base_branch: Optional[pulumi.Input[str]] = None,
                 branch_name: Optional[pulumi.Input[str]] = None,
                 commit_message: Optional[pulumi.Input[str]] = None,
                 connector_ref: Optional[pulumi.Input[str]] = None,
                 file_path: Optional[pulumi.Input[str]] = None,
                 last_commit_id: Optional[pulumi.Input[str]] = None,
                 last_object_id: Optional[pulumi.Input[str]] = None,
                 repo_name: Optional[pulumi.Input[str]] = None,
                 store_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] base_branch: Name of the default branch (this checks out a new branch titled by branch_name).
        :param pulumi.Input[str] branch_name: Name of the branch.
        :param pulumi.Input[str] commit_message: Commit message used for the merge commit.
        :param pulumi.Input[str] connector_ref: Identifier of the Harness Connector used for CRUD operations on the Entity. To reference a connector at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a connector at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[str] file_path: File path of the Entity in the repository.
        :param pulumi.Input[str] last_commit_id: Last commit identifier (for Git Repositories other than Github). To be provided only when updating Pipeline.
        :param pulumi.Input[str] last_object_id: Last object identifier (for Github). To be provided only when updating Pipeline.
        :param pulumi.Input[str] repo_name: Name of the repository.
        :param pulumi.Input[str] store_type: Specifies whether the Entity is to be stored in Git or not. Possible values: INLINE, REMOTE.
        """
        if base_branch is not None:
            pulumi.set(__self__, "base_branch", base_branch)
        if branch_name is not None:
            pulumi.set(__self__, "branch_name", branch_name)
        if commit_message is not None:
            pulumi.set(__self__, "commit_message", commit_message)
        if connector_ref is not None:
            pulumi.set(__self__, "connector_ref", connector_ref)
        if file_path is not None:
            pulumi.set(__self__, "file_path", file_path)
        if last_commit_id is not None:
            pulumi.set(__self__, "last_commit_id", last_commit_id)
        if last_object_id is not None:
            pulumi.set(__self__, "last_object_id", last_object_id)
        if repo_name is not None:
            pulumi.set(__self__, "repo_name", repo_name)
        if store_type is not None:
            pulumi.set(__self__, "store_type", store_type)

    @property
    @pulumi.getter(name="baseBranch")
    def base_branch(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the default branch (this checks out a new branch titled by branch_name).
        """
        return pulumi.get(self, "base_branch")

    @base_branch.setter
    def base_branch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_branch", value)

    @property
    @pulumi.getter(name="branchName")
    def branch_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the branch.
        """
        return pulumi.get(self, "branch_name")

    @branch_name.setter
    def branch_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branch_name", value)

    @property
    @pulumi.getter(name="commitMessage")
    def commit_message(self) -> Optional[pulumi.Input[str]]:
        """
        Commit message used for the merge commit.
        """
        return pulumi.get(self, "commit_message")

    @commit_message.setter
    def commit_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "commit_message", value)

    @property
    @pulumi.getter(name="connectorRef")
    def connector_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of the Harness Connector used for CRUD operations on the Entity. To reference a connector at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a connector at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "connector_ref")

    @connector_ref.setter
    def connector_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connector_ref", value)

    @property
    @pulumi.getter(name="filePath")
    def file_path(self) -> Optional[pulumi.Input[str]]:
        """
        File path of the Entity in the repository.
        """
        return pulumi.get(self, "file_path")

    @file_path.setter
    def file_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_path", value)

    @property
    @pulumi.getter(name="lastCommitId")
    def last_commit_id(self) -> Optional[pulumi.Input[str]]:
        """
        Last commit identifier (for Git Repositories other than Github). To be provided only when updating Pipeline.
        """
        return pulumi.get(self, "last_commit_id")

    @last_commit_id.setter
    def last_commit_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_commit_id", value)

    @property
    @pulumi.getter(name="lastObjectId")
    def last_object_id(self) -> Optional[pulumi.Input[str]]:
        """
        Last object identifier (for Github). To be provided only when updating Pipeline.
        """
        return pulumi.get(self, "last_object_id")

    @last_object_id.setter
    def last_object_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_object_id", value)

    @property
    @pulumi.getter(name="repoName")
    def repo_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the repository.
        """
        return pulumi.get(self, "repo_name")

    @repo_name.setter
    def repo_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo_name", value)

    @property
    @pulumi.getter(name="storeType")
    def store_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether the Entity is to be stored in Git or not. Possible values: INLINE, REMOTE.
        """
        return pulumi.get(self, "store_type")

    @store_type.setter
    def store_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "store_type", value)


@pulumi.input_type
class PolicySetPolicyArgs:
    def __init__(__self__, *,
                 identifier: pulumi.Input[str],
                 severity: pulumi.Input[str]):
        """
        :param pulumi.Input[str] identifier: Account Identifier of the account
        :param pulumi.Input[str] severity: Policy failure response - 'warning' for continuation, 'error' for exit
        """
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def identifier(self) -> pulumi.Input[str]:
        """
        Account Identifier of the account
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def severity(self) -> pulumi.Input[str]:
        """
        Policy failure response - 'warning' for continuation, 'error' for exit
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: pulumi.Input[str]):
        pulumi.set(self, "severity", value)


@pulumi.input_type
class PrometheusConnectorHeaderArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 encrypted_value_ref: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 value_encrypted: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] key: Key.
        :param pulumi.Input[str] encrypted_value_ref: Reference to the Harness secret containing the encrypted value. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[str] value: Value.
        :param pulumi.Input[bool] value_encrypted: Encrypted value.
        """
        pulumi.set(__self__, "key", key)
        if encrypted_value_ref is not None:
            pulumi.set(__self__, "encrypted_value_ref", encrypted_value_ref)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_encrypted is not None:
            pulumi.set(__self__, "value_encrypted", value_encrypted)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="encryptedValueRef")
    def encrypted_value_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to the Harness secret containing the encrypted value. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "encrypted_value_ref")

    @encrypted_value_ref.setter
    def encrypted_value_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encrypted_value_ref", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueEncrypted")
    def value_encrypted(self) -> Optional[pulumi.Input[bool]]:
        """
        Encrypted value.
        """
        return pulumi.get(self, "value_encrypted")

    @value_encrypted.setter
    def value_encrypted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "value_encrypted", value)


@pulumi.input_type
class ResourceGroupIncludedScopeArgs:
    def __init__(__self__, *,
                 filter: pulumi.Input[str],
                 account_id: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] filter: Can be one of these 2 EXCLUDING*CHILD*SCOPES or INCLUDING*CHILD*SCOPES
        :param pulumi.Input[str] account_id: Account Identifier of the account
        :param pulumi.Input[str] org_id: Organization Identifier
        :param pulumi.Input[str] project_id: Project Identifier
        """
        pulumi.set(__self__, "filter", filter)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def filter(self) -> pulumi.Input[str]:
        """
        Can be one of these 2 EXCLUDING*CHILD*SCOPES or INCLUDING*CHILD*SCOPES
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Account Identifier of the account
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        """
        Organization Identifier
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Project Identifier
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)


@pulumi.input_type
class ResourceGroupResourceFilterArgs:
    def __init__(__self__, *,
                 include_all_resources: Optional[pulumi.Input[bool]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceGroupResourceFilterResourceArgs']]]] = None):
        """
        :param pulumi.Input[bool] include_all_resources: Include all resource or not
        :param pulumi.Input[Sequence[pulumi.Input['ResourceGroupResourceFilterResourceArgs']]] resources: Resources for a resource group
        """
        if include_all_resources is not None:
            pulumi.set(__self__, "include_all_resources", include_all_resources)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter(name="includeAllResources")
    def include_all_resources(self) -> Optional[pulumi.Input[bool]]:
        """
        Include all resource or not
        """
        return pulumi.get(self, "include_all_resources")

    @include_all_resources.setter
    def include_all_resources(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_all_resources", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResourceGroupResourceFilterResourceArgs']]]]:
        """
        Resources for a resource group
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceGroupResourceFilterResourceArgs']]]]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class ResourceGroupResourceFilterResourceArgs:
    def __init__(__self__, *,
                 resource_type: pulumi.Input[str],
                 attribute_filters: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceGroupResourceFilterResourceAttributeFilterArgs']]]] = None,
                 identifiers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] resource_type: Type of the resource
        :param pulumi.Input[Sequence[pulumi.Input['ResourceGroupResourceFilterResourceAttributeFilterArgs']]] attribute_filters: Used to filter resources on their attributes
        :param pulumi.Input[Sequence[pulumi.Input[str]]] identifiers: List of the identifiers
        """
        pulumi.set(__self__, "resource_type", resource_type)
        if attribute_filters is not None:
            pulumi.set(__self__, "attribute_filters", attribute_filters)
        if identifiers is not None:
            pulumi.set(__self__, "identifiers", identifiers)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[str]:
        """
        Type of the resource
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="attributeFilters")
    def attribute_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResourceGroupResourceFilterResourceAttributeFilterArgs']]]]:
        """
        Used to filter resources on their attributes
        """
        return pulumi.get(self, "attribute_filters")

    @attribute_filters.setter
    def attribute_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceGroupResourceFilterResourceAttributeFilterArgs']]]]):
        pulumi.set(self, "attribute_filters", value)

    @property
    @pulumi.getter
    def identifiers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of the identifiers
        """
        return pulumi.get(self, "identifiers")

    @identifiers.setter
    def identifiers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "identifiers", value)


@pulumi.input_type
class ResourceGroupResourceFilterResourceAttributeFilterArgs:
    def __init__(__self__, *,
                 attribute_name: Optional[pulumi.Input[str]] = None,
                 attribute_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] attribute_name: Name of the attribute. Valid values are `category` or `type`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] attribute_values: Value of the attributes.Valid values for `category` are [ARTIFACTORY,CLOUD*COST,CLOUD*PROVIDER,CODE*REPO,MONITORING,SECRET*MANAGER,TICKETING] and for `type` are [Production,PreProduction]
        """
        if attribute_name is not None:
            pulumi.set(__self__, "attribute_name", attribute_name)
        if attribute_values is not None:
            pulumi.set(__self__, "attribute_values", attribute_values)

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the attribute. Valid values are `category` or `type`.
        """
        return pulumi.get(self, "attribute_name")

    @attribute_name.setter
    def attribute_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_name", value)

    @property
    @pulumi.getter(name="attributeValues")
    def attribute_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Value of the attributes.Valid values for `category` are [ARTIFACTORY,CLOUD*COST,CLOUD*PROVIDER,CODE*REPO,MONITORING,SECRET*MANAGER,TICKETING] and for `type` are [Production,PreProduction]
        """
        return pulumi.get(self, "attribute_values")

    @attribute_values.setter
    def attribute_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "attribute_values", value)


@pulumi.input_type
class RoleAssignmentsPrincipalArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 identifier: Optional[pulumi.Input[str]] = None,
                 scope_level: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: Type.
        :param pulumi.Input[str] identifier: Identifier.
        :param pulumi.Input[str] scope_level: Scope level.
        """
        pulumi.set(__self__, "type", type)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if scope_level is not None:
            pulumi.set(__self__, "scope_level", scope_level)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter(name="scopeLevel")
    def scope_level(self) -> Optional[pulumi.Input[str]]:
        """
        Scope level.
        """
        return pulumi.get(self, "scope_level")

    @scope_level.setter
    def scope_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope_level", value)


@pulumi.input_type
class SecretSshkeyKerberosArgs:
    def __init__(__self__, *,
                 principal: pulumi.Input[str],
                 realm: pulumi.Input[str],
                 tgt_generation_method: Optional[pulumi.Input[str]] = None,
                 tgt_key_tab_file_path_spec: Optional[pulumi.Input['SecretSshkeyKerberosTgtKeyTabFilePathSpecArgs']] = None,
                 tgt_password_spec: Optional[pulumi.Input['SecretSshkeyKerberosTgtPasswordSpecArgs']] = None):
        """
        :param pulumi.Input[str] principal: Username to use for authentication.
        :param pulumi.Input[str] realm: Reference to a secret containing the password to use for authentication.
        :param pulumi.Input[str] tgt_generation_method: Method to generate tgt
        :param pulumi.Input['SecretSshkeyKerberosTgtKeyTabFilePathSpecArgs'] tgt_key_tab_file_path_spec: Authenticate to App Dynamics using username and password.
        :param pulumi.Input['SecretSshkeyKerberosTgtPasswordSpecArgs'] tgt_password_spec: Authenticate to App Dynamics using username and password.
        """
        pulumi.set(__self__, "principal", principal)
        pulumi.set(__self__, "realm", realm)
        if tgt_generation_method is not None:
            pulumi.set(__self__, "tgt_generation_method", tgt_generation_method)
        if tgt_key_tab_file_path_spec is not None:
            pulumi.set(__self__, "tgt_key_tab_file_path_spec", tgt_key_tab_file_path_spec)
        if tgt_password_spec is not None:
            pulumi.set(__self__, "tgt_password_spec", tgt_password_spec)

    @property
    @pulumi.getter
    def principal(self) -> pulumi.Input[str]:
        """
        Username to use for authentication.
        """
        return pulumi.get(self, "principal")

    @principal.setter
    def principal(self, value: pulumi.Input[str]):
        pulumi.set(self, "principal", value)

    @property
    @pulumi.getter
    def realm(self) -> pulumi.Input[str]:
        """
        Reference to a secret containing the password to use for authentication.
        """
        return pulumi.get(self, "realm")

    @realm.setter
    def realm(self, value: pulumi.Input[str]):
        pulumi.set(self, "realm", value)

    @property
    @pulumi.getter(name="tgtGenerationMethod")
    def tgt_generation_method(self) -> Optional[pulumi.Input[str]]:
        """
        Method to generate tgt
        """
        return pulumi.get(self, "tgt_generation_method")

    @tgt_generation_method.setter
    def tgt_generation_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tgt_generation_method", value)

    @property
    @pulumi.getter(name="tgtKeyTabFilePathSpec")
    def tgt_key_tab_file_path_spec(self) -> Optional[pulumi.Input['SecretSshkeyKerberosTgtKeyTabFilePathSpecArgs']]:
        """
        Authenticate to App Dynamics using username and password.
        """
        return pulumi.get(self, "tgt_key_tab_file_path_spec")

    @tgt_key_tab_file_path_spec.setter
    def tgt_key_tab_file_path_spec(self, value: Optional[pulumi.Input['SecretSshkeyKerberosTgtKeyTabFilePathSpecArgs']]):
        pulumi.set(self, "tgt_key_tab_file_path_spec", value)

    @property
    @pulumi.getter(name="tgtPasswordSpec")
    def tgt_password_spec(self) -> Optional[pulumi.Input['SecretSshkeyKerberosTgtPasswordSpecArgs']]:
        """
        Authenticate to App Dynamics using username and password.
        """
        return pulumi.get(self, "tgt_password_spec")

    @tgt_password_spec.setter
    def tgt_password_spec(self, value: Optional[pulumi.Input['SecretSshkeyKerberosTgtPasswordSpecArgs']]):
        pulumi.set(self, "tgt_password_spec", value)


@pulumi.input_type
class SecretSshkeyKerberosTgtKeyTabFilePathSpecArgs:
    def __init__(__self__, *,
                 key_path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key_path: key path
        """
        if key_path is not None:
            pulumi.set(__self__, "key_path", key_path)

    @property
    @pulumi.getter(name="keyPath")
    def key_path(self) -> Optional[pulumi.Input[str]]:
        """
        key path
        """
        return pulumi.get(self, "key_path")

    @key_path.setter
    def key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_path", value)


@pulumi.input_type
class SecretSshkeyKerberosTgtPasswordSpecArgs:
    def __init__(__self__, *,
                 password: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] password: password. To reference a password at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a password at the account scope, prefix 'account` to the expression: account.{identifier}
        """
        if password is not None:
            pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        password. To reference a password at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a password at the account scope, prefix 'account` to the expression: account.{identifier}
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)


@pulumi.input_type
class SecretSshkeySshArgs:
    def __init__(__self__, *,
                 credential_type: pulumi.Input[str],
                 ssh_password_credential: Optional[pulumi.Input['SecretSshkeySshSshPasswordCredentialArgs']] = None,
                 sshkey_path_credential: Optional[pulumi.Input['SecretSshkeySshSshkeyPathCredentialArgs']] = None,
                 sshkey_reference_credential: Optional[pulumi.Input['SecretSshkeySshSshkeyReferenceCredentialArgs']] = None):
        """
        :param pulumi.Input[str] credential_type: This specifies SSH credential type as Password, KeyPath or KeyReference
        :param pulumi.Input['SecretSshkeySshSshPasswordCredentialArgs'] ssh_password_credential: SSH credential of type keyReference
        :param pulumi.Input['SecretSshkeySshSshkeyPathCredentialArgs'] sshkey_path_credential: SSH credential of type keyPath
        :param pulumi.Input['SecretSshkeySshSshkeyReferenceCredentialArgs'] sshkey_reference_credential: SSH credential of type keyReference
        """
        pulumi.set(__self__, "credential_type", credential_type)
        if ssh_password_credential is not None:
            pulumi.set(__self__, "ssh_password_credential", ssh_password_credential)
        if sshkey_path_credential is not None:
            pulumi.set(__self__, "sshkey_path_credential", sshkey_path_credential)
        if sshkey_reference_credential is not None:
            pulumi.set(__self__, "sshkey_reference_credential", sshkey_reference_credential)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> pulumi.Input[str]:
        """
        This specifies SSH credential type as Password, KeyPath or KeyReference
        """
        return pulumi.get(self, "credential_type")

    @credential_type.setter
    def credential_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "credential_type", value)

    @property
    @pulumi.getter(name="sshPasswordCredential")
    def ssh_password_credential(self) -> Optional[pulumi.Input['SecretSshkeySshSshPasswordCredentialArgs']]:
        """
        SSH credential of type keyReference
        """
        return pulumi.get(self, "ssh_password_credential")

    @ssh_password_credential.setter
    def ssh_password_credential(self, value: Optional[pulumi.Input['SecretSshkeySshSshPasswordCredentialArgs']]):
        pulumi.set(self, "ssh_password_credential", value)

    @property
    @pulumi.getter(name="sshkeyPathCredential")
    def sshkey_path_credential(self) -> Optional[pulumi.Input['SecretSshkeySshSshkeyPathCredentialArgs']]:
        """
        SSH credential of type keyPath
        """
        return pulumi.get(self, "sshkey_path_credential")

    @sshkey_path_credential.setter
    def sshkey_path_credential(self, value: Optional[pulumi.Input['SecretSshkeySshSshkeyPathCredentialArgs']]):
        pulumi.set(self, "sshkey_path_credential", value)

    @property
    @pulumi.getter(name="sshkeyReferenceCredential")
    def sshkey_reference_credential(self) -> Optional[pulumi.Input['SecretSshkeySshSshkeyReferenceCredentialArgs']]:
        """
        SSH credential of type keyReference
        """
        return pulumi.get(self, "sshkey_reference_credential")

    @sshkey_reference_credential.setter
    def sshkey_reference_credential(self, value: Optional[pulumi.Input['SecretSshkeySshSshkeyReferenceCredentialArgs']]):
        pulumi.set(self, "sshkey_reference_credential", value)


@pulumi.input_type
class SecretSshkeySshSshPasswordCredentialArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 user_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] password: SSH Password. To reference a password at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a password at the account scope, prefix 'account` to the expression: account.{identifier}
        :param pulumi.Input[str] user_name: SSH Username.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        SSH Password. To reference a password at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a password at the account scope, prefix 'account` to the expression: account.{identifier}
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Input[str]:
        """
        SSH Username.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_name", value)


@pulumi.input_type
class SecretSshkeySshSshkeyPathCredentialArgs:
    def __init__(__self__, *,
                 key_path: pulumi.Input[str],
                 user_name: pulumi.Input[str],
                 encrypted_passphrase: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key_path: Path of the key file.
        :param pulumi.Input[str] user_name: SSH Username.
        :param pulumi.Input[str] encrypted_passphrase: Encrypted Passphrase . To reference a encryptedPassphrase at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a encryptedPassPhrase at the account scope, prefix 'account` to the expression: account.{identifier}
        """
        pulumi.set(__self__, "key_path", key_path)
        pulumi.set(__self__, "user_name", user_name)
        if encrypted_passphrase is not None:
            pulumi.set(__self__, "encrypted_passphrase", encrypted_passphrase)

    @property
    @pulumi.getter(name="keyPath")
    def key_path(self) -> pulumi.Input[str]:
        """
        Path of the key file.
        """
        return pulumi.get(self, "key_path")

    @key_path.setter
    def key_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_path", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Input[str]:
        """
        SSH Username.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_name", value)

    @property
    @pulumi.getter(name="encryptedPassphrase")
    def encrypted_passphrase(self) -> Optional[pulumi.Input[str]]:
        """
        Encrypted Passphrase . To reference a encryptedPassphrase at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a encryptedPassPhrase at the account scope, prefix 'account` to the expression: account.{identifier}
        """
        return pulumi.get(self, "encrypted_passphrase")

    @encrypted_passphrase.setter
    def encrypted_passphrase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encrypted_passphrase", value)


@pulumi.input_type
class SecretSshkeySshSshkeyReferenceCredentialArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 user_name: pulumi.Input[str],
                 encrypted_passphrase: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: SSH key. To reference a key at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a key at the account scope, prefix 'account` to the expression: account.{identifier}
        :param pulumi.Input[str] user_name: SSH Username.
        :param pulumi.Input[str] encrypted_passphrase: Encrypted Passphrase. To reference a encryptedPassphrase at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a encryptedPassPhrase at the account scope, prefix 'account` to the expression: account.{identifier}
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "user_name", user_name)
        if encrypted_passphrase is not None:
            pulumi.set(__self__, "encrypted_passphrase", encrypted_passphrase)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        SSH key. To reference a key at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a key at the account scope, prefix 'account` to the expression: account.{identifier}
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Input[str]:
        """
        SSH Username.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_name", value)

    @property
    @pulumi.getter(name="encryptedPassphrase")
    def encrypted_passphrase(self) -> Optional[pulumi.Input[str]]:
        """
        Encrypted Passphrase. To reference a encryptedPassphrase at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a encryptedPassPhrase at the account scope, prefix 'account` to the expression: account.{identifier}
        """
        return pulumi.get(self, "encrypted_passphrase")

    @encrypted_passphrase.setter
    def encrypted_passphrase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encrypted_passphrase", value)


@pulumi.input_type
class ServiceNowConnectorAuthArgs:
    def __init__(__self__, *,
                 auth_type: pulumi.Input[str],
                 adfs: Optional[pulumi.Input['ServiceNowConnectorAuthAdfsArgs']] = None,
                 username_password: Optional[pulumi.Input['ServiceNowConnectorAuthUsernamePasswordArgs']] = None):
        """
        :param pulumi.Input[str] auth_type: Authentication types for Jira connector
        :param pulumi.Input['ServiceNowConnectorAuthAdfsArgs'] adfs: Authenticate using adfs client credentials with certificate.
        :param pulumi.Input['ServiceNowConnectorAuthUsernamePasswordArgs'] username_password: Authenticate using username password.
        """
        pulumi.set(__self__, "auth_type", auth_type)
        if adfs is not None:
            pulumi.set(__self__, "adfs", adfs)
        if username_password is not None:
            pulumi.set(__self__, "username_password", username_password)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        """
        Authentication types for Jira connector
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter
    def adfs(self) -> Optional[pulumi.Input['ServiceNowConnectorAuthAdfsArgs']]:
        """
        Authenticate using adfs client credentials with certificate.
        """
        return pulumi.get(self, "adfs")

    @adfs.setter
    def adfs(self, value: Optional[pulumi.Input['ServiceNowConnectorAuthAdfsArgs']]):
        pulumi.set(self, "adfs", value)

    @property
    @pulumi.getter(name="usernamePassword")
    def username_password(self) -> Optional[pulumi.Input['ServiceNowConnectorAuthUsernamePasswordArgs']]:
        """
        Authenticate using username password.
        """
        return pulumi.get(self, "username_password")

    @username_password.setter
    def username_password(self, value: Optional[pulumi.Input['ServiceNowConnectorAuthUsernamePasswordArgs']]):
        pulumi.set(self, "username_password", value)


@pulumi.input_type
class ServiceNowConnectorAuthAdfsArgs:
    def __init__(__self__, *,
                 adfs_url: pulumi.Input[str],
                 certificate_ref: pulumi.Input[str],
                 client_id_ref: pulumi.Input[str],
                 private_key_ref: pulumi.Input[str],
                 resource_id_ref: pulumi.Input[str]):
        """
        :param pulumi.Input[str] adfs_url: asdf URL.
        :param pulumi.Input[str] certificate_ref: Reference to a secret containing the certificate to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[str] client_id_ref: Reference to a secret containing the clientIdRef to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[str] private_key_ref: Reference to a secret containing the privateKeyRef to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[str] resource_id_ref: Reference to a secret containing the resourceIdRef to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        pulumi.set(__self__, "adfs_url", adfs_url)
        pulumi.set(__self__, "certificate_ref", certificate_ref)
        pulumi.set(__self__, "client_id_ref", client_id_ref)
        pulumi.set(__self__, "private_key_ref", private_key_ref)
        pulumi.set(__self__, "resource_id_ref", resource_id_ref)

    @property
    @pulumi.getter(name="adfsUrl")
    def adfs_url(self) -> pulumi.Input[str]:
        """
        asdf URL.
        """
        return pulumi.get(self, "adfs_url")

    @adfs_url.setter
    def adfs_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "adfs_url", value)

    @property
    @pulumi.getter(name="certificateRef")
    def certificate_ref(self) -> pulumi.Input[str]:
        """
        Reference to a secret containing the certificate to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "certificate_ref")

    @certificate_ref.setter
    def certificate_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "certificate_ref", value)

    @property
    @pulumi.getter(name="clientIdRef")
    def client_id_ref(self) -> pulumi.Input[str]:
        """
        Reference to a secret containing the clientIdRef to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "client_id_ref")

    @client_id_ref.setter
    def client_id_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id_ref", value)

    @property
    @pulumi.getter(name="privateKeyRef")
    def private_key_ref(self) -> pulumi.Input[str]:
        """
        Reference to a secret containing the privateKeyRef to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "private_key_ref")

    @private_key_ref.setter
    def private_key_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_key_ref", value)

    @property
    @pulumi.getter(name="resourceIdRef")
    def resource_id_ref(self) -> pulumi.Input[str]:
        """
        Reference to a secret containing the resourceIdRef to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "resource_id_ref")

    @resource_id_ref.setter
    def resource_id_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_id_ref", value)


@pulumi.input_type
class ServiceNowConnectorAuthUsernamePasswordArgs:
    def __init__(__self__, *,
                 password_ref: pulumi.Input[str],
                 username: Optional[pulumi.Input[str]] = None,
                 username_ref: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] password_ref: Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[str] username: Username to use for authentication.
        :param pulumi.Input[str] username_ref: Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        pulumi.set(__self__, "password_ref", password_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if username_ref is not None:
            pulumi.set(__self__, "username_ref", username_ref)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> pulumi.Input[str]:
        """
        Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "password_ref")

    @password_ref.setter
    def password_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "password_ref", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username to use for authentication.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="usernameRef")
    def username_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "username_ref")

    @username_ref.setter
    def username_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_ref", value)


@pulumi.input_type
class SloRequestArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 slo_target: pulumi.Input['SloRequestSloTargetArgs'],
                 spec: pulumi.Input[str],
                 type: pulumi.Input[str],
                 user_journey_refs: pulumi.Input[Sequence[pulumi.Input[str]]],
                 description: Optional[pulumi.Input[str]] = None,
                 notification_rule_refs: Optional[pulumi.Input[Sequence[pulumi.Input['SloRequestNotificationRuleRefArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Name for the SLO.
        :param pulumi.Input['SloRequestSloTargetArgs'] slo_target: SLO Target specification.
        :param pulumi.Input[str] spec: Specification of the SLO.
        :param pulumi.Input[str] type: Type of the SLO.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_journey_refs: User journey reference list for the SLO.
        :param pulumi.Input[str] description: Description for the SLO.
        :param pulumi.Input[Sequence[pulumi.Input['SloRequestNotificationRuleRefArgs']]] notification_rule_refs: Notification rule references for the SLO.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tags for the SLO. comma-separated key value string pairs.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "slo_target", slo_target)
        pulumi.set(__self__, "spec", spec)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_journey_refs", user_journey_refs)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if notification_rule_refs is not None:
            pulumi.set(__self__, "notification_rule_refs", notification_rule_refs)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name for the SLO.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sloTarget")
    def slo_target(self) -> pulumi.Input['SloRequestSloTargetArgs']:
        """
        SLO Target specification.
        """
        return pulumi.get(self, "slo_target")

    @slo_target.setter
    def slo_target(self, value: pulumi.Input['SloRequestSloTargetArgs']):
        pulumi.set(self, "slo_target", value)

    @property
    @pulumi.getter
    def spec(self) -> pulumi.Input[str]:
        """
        Specification of the SLO.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: pulumi.Input[str]):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of the SLO.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userJourneyRefs")
    def user_journey_refs(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        User journey reference list for the SLO.
        """
        return pulumi.get(self, "user_journey_refs")

    @user_journey_refs.setter
    def user_journey_refs(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "user_journey_refs", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description for the SLO.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="notificationRuleRefs")
    def notification_rule_refs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SloRequestNotificationRuleRefArgs']]]]:
        """
        Notification rule references for the SLO.
        """
        return pulumi.get(self, "notification_rule_refs")

    @notification_rule_refs.setter
    def notification_rule_refs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SloRequestNotificationRuleRefArgs']]]]):
        pulumi.set(self, "notification_rule_refs", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Tags for the SLO. comma-separated key value string pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class SloRequestNotificationRuleRefArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 notification_rule_ref: pulumi.Input[str]):
        """
        :param pulumi.Input[bool] enabled: Enable or disable notification rule reference for the SLO.
        :param pulumi.Input[str] notification_rule_ref: Notification rule reference for the SLO.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "notification_rule_ref", notification_rule_ref)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Enable or disable notification rule reference for the SLO.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="notificationRuleRef")
    def notification_rule_ref(self) -> pulumi.Input[str]:
        """
        Notification rule reference for the SLO.
        """
        return pulumi.get(self, "notification_rule_ref")

    @notification_rule_ref.setter
    def notification_rule_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "notification_rule_ref", value)


@pulumi.input_type
class SloRequestSloTargetArgs:
    def __init__(__self__, *,
                 slo_target_percentage: pulumi.Input[float],
                 spec: pulumi.Input[str],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[float] slo_target_percentage: Target percentage for the SLO.
        :param pulumi.Input[str] spec: Specification of the SLO Target.
        :param pulumi.Input[str] type: Type of the SLO target.
        """
        pulumi.set(__self__, "slo_target_percentage", slo_target_percentage)
        pulumi.set(__self__, "spec", spec)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="sloTargetPercentage")
    def slo_target_percentage(self) -> pulumi.Input[float]:
        """
        Target percentage for the SLO.
        """
        return pulumi.get(self, "slo_target_percentage")

    @slo_target_percentage.setter
    def slo_target_percentage(self, value: pulumi.Input[float]):
        pulumi.set(self, "slo_target_percentage", value)

    @property
    @pulumi.getter
    def spec(self) -> pulumi.Input[str]:
        """
        Specification of the SLO Target.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: pulumi.Input[str]):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of the SLO target.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SpotConnectorPermanentTokenArgs:
    def __init__(__self__, *,
                 api_token_ref: pulumi.Input[str],
                 delegate_selectors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 execute_on_delegate: Optional[pulumi.Input[bool]] = None,
                 spot_account_id: Optional[pulumi.Input[str]] = None,
                 spot_account_id_ref: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] api_token_ref: Reference to the Harness secret containing the permanent api token. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] delegate_selectors: Connect only using delegates with these tags.
        :param pulumi.Input[bool] execute_on_delegate: Execute on delegate or not.
        :param pulumi.Input[str] spot_account_id: Spot account id.
        :param pulumi.Input[str] spot_account_id_ref: Reference to the Harness secret containing the spot account id. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        pulumi.set(__self__, "api_token_ref", api_token_ref)
        if delegate_selectors is not None:
            pulumi.set(__self__, "delegate_selectors", delegate_selectors)
        if execute_on_delegate is not None:
            pulumi.set(__self__, "execute_on_delegate", execute_on_delegate)
        if spot_account_id is not None:
            pulumi.set(__self__, "spot_account_id", spot_account_id)
        if spot_account_id_ref is not None:
            pulumi.set(__self__, "spot_account_id_ref", spot_account_id_ref)

    @property
    @pulumi.getter(name="apiTokenRef")
    def api_token_ref(self) -> pulumi.Input[str]:
        """
        Reference to the Harness secret containing the permanent api token. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "api_token_ref")

    @api_token_ref.setter
    def api_token_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_token_ref", value)

    @property
    @pulumi.getter(name="delegateSelectors")
    def delegate_selectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Connect only using delegates with these tags.
        """
        return pulumi.get(self, "delegate_selectors")

    @delegate_selectors.setter
    def delegate_selectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "delegate_selectors", value)

    @property
    @pulumi.getter(name="executeOnDelegate")
    def execute_on_delegate(self) -> Optional[pulumi.Input[bool]]:
        """
        Execute on delegate or not.
        """
        return pulumi.get(self, "execute_on_delegate")

    @execute_on_delegate.setter
    def execute_on_delegate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "execute_on_delegate", value)

    @property
    @pulumi.getter(name="spotAccountId")
    def spot_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Spot account id.
        """
        return pulumi.get(self, "spot_account_id")

    @spot_account_id.setter
    def spot_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spot_account_id", value)

    @property
    @pulumi.getter(name="spotAccountIdRef")
    def spot_account_id_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to the Harness secret containing the spot account id. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "spot_account_id_ref")

    @spot_account_id_ref.setter
    def spot_account_id_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spot_account_id_ref", value)


@pulumi.input_type
class TasConnectorCredentialsArgs:
    def __init__(__self__, *,
                 tas_manual_details: pulumi.Input['TasConnectorCredentialsTasManualDetailsArgs'],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input['TasConnectorCredentialsTasManualDetailsArgs'] tas_manual_details: Authenticate to Tas using manual details.
        :param pulumi.Input[str] type: Type can be ManualConfig.
        """
        pulumi.set(__self__, "tas_manual_details", tas_manual_details)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="tasManualDetails")
    def tas_manual_details(self) -> pulumi.Input['TasConnectorCredentialsTasManualDetailsArgs']:
        """
        Authenticate to Tas using manual details.
        """
        return pulumi.get(self, "tas_manual_details")

    @tas_manual_details.setter
    def tas_manual_details(self, value: pulumi.Input['TasConnectorCredentialsTasManualDetailsArgs']):
        pulumi.set(self, "tas_manual_details", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type can be ManualConfig.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class TasConnectorCredentialsTasManualDetailsArgs:
    def __init__(__self__, *,
                 endpoint_url: pulumi.Input[str],
                 password_ref: pulumi.Input[str],
                 username: Optional[pulumi.Input[str]] = None,
                 username_ref: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] endpoint_url: URL of the Tas server.
        :param pulumi.Input[str] password_ref: Reference of the secret for the password. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[str] username: Username to use for authentication.
        :param pulumi.Input[str] username_ref: Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        pulumi.set(__self__, "endpoint_url", endpoint_url)
        pulumi.set(__self__, "password_ref", password_ref)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if username_ref is not None:
            pulumi.set(__self__, "username_ref", username_ref)

    @property
    @pulumi.getter(name="endpointUrl")
    def endpoint_url(self) -> pulumi.Input[str]:
        """
        URL of the Tas server.
        """
        return pulumi.get(self, "endpoint_url")

    @endpoint_url.setter
    def endpoint_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint_url", value)

    @property
    @pulumi.getter(name="passwordRef")
    def password_ref(self) -> pulumi.Input[str]:
        """
        Reference of the secret for the password. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "password_ref")

    @password_ref.setter
    def password_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "password_ref", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username to use for authentication.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="usernameRef")
    def username_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "username_ref")

    @username_ref.setter
    def username_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_ref", value)


@pulumi.input_type
class TemplateFiltersFilterPropertiesArgs:
    def __init__(__self__, *,
                 filter_type: pulumi.Input[str],
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] filter_type: Corresponding Entity of the filters. Currently supported types are {TemplateSetup, TemplateExecution, Template}.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tags to associate with the resource. Tags should be in the form `name:value`.
        """
        pulumi.set(__self__, "filter_type", filter_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> pulumi.Input[str]:
        """
        Corresponding Entity of the filters. Currently supported types are {TemplateSetup, TemplateExecution, Template}.
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Tags to associate with the resource. Tags should be in the form `name:value`.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class TemplateGitDetailsArgs:
    def __init__(__self__, *,
                 base_branch: Optional[pulumi.Input[str]] = None,
                 branch_name: Optional[pulumi.Input[str]] = None,
                 commit_message: Optional[pulumi.Input[str]] = None,
                 connector_ref: Optional[pulumi.Input[str]] = None,
                 file_path: Optional[pulumi.Input[str]] = None,
                 last_commit_id: Optional[pulumi.Input[str]] = None,
                 last_object_id: Optional[pulumi.Input[str]] = None,
                 repo_name: Optional[pulumi.Input[str]] = None,
                 store_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] base_branch: Name of the default branch (this checks out a new branch titled by branch_name).
        :param pulumi.Input[str] branch_name: Name of the branch.
        :param pulumi.Input[str] commit_message: Commit message used for the merge commit.
        :param pulumi.Input[str] connector_ref: Identifier of the Harness Connector used for CRUD operations on the Entity. To reference a connector at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a connector at the account scope, prefix 'account` to the expression: account.{identifier}.
        :param pulumi.Input[str] file_path: File path of the Entity in the repository.
        :param pulumi.Input[str] last_commit_id: Last commit identifier (for Git Repositories other than Github). To be provided only when updating Pipeline.
        :param pulumi.Input[str] last_object_id: Last object identifier (for Github). To be provided only when updating Pipeline.
        :param pulumi.Input[str] repo_name: Name of the repository.
        :param pulumi.Input[str] store_type: Specifies whether the Entity is to be stored in Git or not. Possible values: INLINE, REMOTE.
        """
        if base_branch is not None:
            pulumi.set(__self__, "base_branch", base_branch)
        if branch_name is not None:
            pulumi.set(__self__, "branch_name", branch_name)
        if commit_message is not None:
            pulumi.set(__self__, "commit_message", commit_message)
        if connector_ref is not None:
            pulumi.set(__self__, "connector_ref", connector_ref)
        if file_path is not None:
            pulumi.set(__self__, "file_path", file_path)
        if last_commit_id is not None:
            pulumi.set(__self__, "last_commit_id", last_commit_id)
        if last_object_id is not None:
            pulumi.set(__self__, "last_object_id", last_object_id)
        if repo_name is not None:
            pulumi.set(__self__, "repo_name", repo_name)
        if store_type is not None:
            pulumi.set(__self__, "store_type", store_type)

    @property
    @pulumi.getter(name="baseBranch")
    def base_branch(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the default branch (this checks out a new branch titled by branch_name).
        """
        return pulumi.get(self, "base_branch")

    @base_branch.setter
    def base_branch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_branch", value)

    @property
    @pulumi.getter(name="branchName")
    def branch_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the branch.
        """
        return pulumi.get(self, "branch_name")

    @branch_name.setter
    def branch_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branch_name", value)

    @property
    @pulumi.getter(name="commitMessage")
    def commit_message(self) -> Optional[pulumi.Input[str]]:
        """
        Commit message used for the merge commit.
        """
        return pulumi.get(self, "commit_message")

    @commit_message.setter
    def commit_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "commit_message", value)

    @property
    @pulumi.getter(name="connectorRef")
    def connector_ref(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of the Harness Connector used for CRUD operations on the Entity. To reference a connector at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a connector at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "connector_ref")

    @connector_ref.setter
    def connector_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connector_ref", value)

    @property
    @pulumi.getter(name="filePath")
    def file_path(self) -> Optional[pulumi.Input[str]]:
        """
        File path of the Entity in the repository.
        """
        return pulumi.get(self, "file_path")

    @file_path.setter
    def file_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_path", value)

    @property
    @pulumi.getter(name="lastCommitId")
    def last_commit_id(self) -> Optional[pulumi.Input[str]]:
        """
        Last commit identifier (for Git Repositories other than Github). To be provided only when updating Pipeline.
        """
        return pulumi.get(self, "last_commit_id")

    @last_commit_id.setter
    def last_commit_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_commit_id", value)

    @property
    @pulumi.getter(name="lastObjectId")
    def last_object_id(self) -> Optional[pulumi.Input[str]]:
        """
        Last object identifier (for Github). To be provided only when updating Pipeline.
        """
        return pulumi.get(self, "last_object_id")

    @last_object_id.setter
    def last_object_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_object_id", value)

    @property
    @pulumi.getter(name="repoName")
    def repo_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the repository.
        """
        return pulumi.get(self, "repo_name")

    @repo_name.setter
    def repo_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo_name", value)

    @property
    @pulumi.getter(name="storeType")
    def store_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether the Entity is to be stored in Git or not. Possible values: INLINE, REMOTE.
        """
        return pulumi.get(self, "store_type")

    @store_type.setter
    def store_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "store_type", value)


@pulumi.input_type
class TerraformCloudConnectorCredentialsArgs:
    def __init__(__self__, *,
                 api_token: pulumi.Input['TerraformCloudConnectorCredentialsApiTokenArgs']):
        """
        :param pulumi.Input['TerraformCloudConnectorCredentialsApiTokenArgs'] api_token: API token credentials to use for authentication.
        """
        pulumi.set(__self__, "api_token", api_token)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Input['TerraformCloudConnectorCredentialsApiTokenArgs']:
        """
        API token credentials to use for authentication.
        """
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: pulumi.Input['TerraformCloudConnectorCredentialsApiTokenArgs']):
        pulumi.set(self, "api_token", value)


@pulumi.input_type
class TerraformCloudConnectorCredentialsApiTokenArgs:
    def __init__(__self__, *,
                 api_token_ref: pulumi.Input[str]):
        """
        :param pulumi.Input[str] api_token_ref: Reference to a secret containing the API token to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        pulumi.set(__self__, "api_token_ref", api_token_ref)

    @property
    @pulumi.getter(name="apiTokenRef")
    def api_token_ref(self) -> pulumi.Input[str]:
        """
        Reference to a secret containing the API token to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
        """
        return pulumi.get(self, "api_token_ref")

    @api_token_ref.setter
    def api_token_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_token_ref", value)


@pulumi.input_type
class UserRoleBindingArgs:
    def __init__(__self__, *,
                 managed_role: Optional[pulumi.Input[bool]] = None,
                 resource_group_identifier: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 role_identifier: Optional[pulumi.Input[str]] = None,
                 role_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] managed_role: Managed Role of the user.
        :param pulumi.Input[str] resource_group_identifier: Resource Group Identifier of the user.
        :param pulumi.Input[str] resource_group_name: Resource Group Name of the user.
        :param pulumi.Input[str] role_identifier: Role Identifier of the user.
        :param pulumi.Input[str] role_name: Role Name Identifier of the user.
        """
        if managed_role is not None:
            pulumi.set(__self__, "managed_role", managed_role)
        if resource_group_identifier is not None:
            pulumi.set(__self__, "resource_group_identifier", resource_group_identifier)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if role_identifier is not None:
            pulumi.set(__self__, "role_identifier", role_identifier)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)

    @property
    @pulumi.getter(name="managedRole")
    def managed_role(self) -> Optional[pulumi.Input[bool]]:
        """
        Managed Role of the user.
        """
        return pulumi.get(self, "managed_role")

    @managed_role.setter
    def managed_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "managed_role", value)

    @property
    @pulumi.getter(name="resourceGroupIdentifier")
    def resource_group_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        Resource Group Identifier of the user.
        """
        return pulumi.get(self, "resource_group_identifier")

    @resource_group_identifier.setter
    def resource_group_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_identifier", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Resource Group Name of the user.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="roleIdentifier")
    def role_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        Role Identifier of the user.
        """
        return pulumi.get(self, "role_identifier")

    @role_identifier.setter
    def role_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_identifier", value)

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[pulumi.Input[str]]:
        """
        Role Name Identifier of the user.
        """
        return pulumi.get(self, "role_name")

    @role_name.setter
    def role_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_name", value)


@pulumi.input_type
class UsergroupNotificationConfigArgs:
    def __init__(__self__, *,
                 group_email: Optional[pulumi.Input[str]] = None,
                 microsoft_teams_webhook_url: Optional[pulumi.Input[str]] = None,
                 pager_duty_key: Optional[pulumi.Input[str]] = None,
                 send_email_to_all_users: Optional[pulumi.Input[bool]] = None,
                 slack_webhook_url: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] group_email: Group email.
        :param pulumi.Input[str] microsoft_teams_webhook_url: Url of Microsoft teams webhook.
        :param pulumi.Input[str] pager_duty_key: Pager duty key.
        :param pulumi.Input[bool] send_email_to_all_users: Send email to all the group members.
        :param pulumi.Input[str] slack_webhook_url: Url of slack webhook.
        :param pulumi.Input[str] type: Can be one of EMAIL, SLACK, PAGERDUTY, MSTEAMS.
        """
        if group_email is not None:
            pulumi.set(__self__, "group_email", group_email)
        if microsoft_teams_webhook_url is not None:
            pulumi.set(__self__, "microsoft_teams_webhook_url", microsoft_teams_webhook_url)
        if pager_duty_key is not None:
            pulumi.set(__self__, "pager_duty_key", pager_duty_key)
        if send_email_to_all_users is not None:
            pulumi.set(__self__, "send_email_to_all_users", send_email_to_all_users)
        if slack_webhook_url is not None:
            pulumi.set(__self__, "slack_webhook_url", slack_webhook_url)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="groupEmail")
    def group_email(self) -> Optional[pulumi.Input[str]]:
        """
        Group email.
        """
        return pulumi.get(self, "group_email")

    @group_email.setter
    def group_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_email", value)

    @property
    @pulumi.getter(name="microsoftTeamsWebhookUrl")
    def microsoft_teams_webhook_url(self) -> Optional[pulumi.Input[str]]:
        """
        Url of Microsoft teams webhook.
        """
        return pulumi.get(self, "microsoft_teams_webhook_url")

    @microsoft_teams_webhook_url.setter
    def microsoft_teams_webhook_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "microsoft_teams_webhook_url", value)

    @property
    @pulumi.getter(name="pagerDutyKey")
    def pager_duty_key(self) -> Optional[pulumi.Input[str]]:
        """
        Pager duty key.
        """
        return pulumi.get(self, "pager_duty_key")

    @pager_duty_key.setter
    def pager_duty_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pager_duty_key", value)

    @property
    @pulumi.getter(name="sendEmailToAllUsers")
    def send_email_to_all_users(self) -> Optional[pulumi.Input[bool]]:
        """
        Send email to all the group members.
        """
        return pulumi.get(self, "send_email_to_all_users")

    @send_email_to_all_users.setter
    def send_email_to_all_users(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "send_email_to_all_users", value)

    @property
    @pulumi.getter(name="slackWebhookUrl")
    def slack_webhook_url(self) -> Optional[pulumi.Input[str]]:
        """
        Url of slack webhook.
        """
        return pulumi.get(self, "slack_webhook_url")

    @slack_webhook_url.setter
    def slack_webhook_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slack_webhook_url", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Can be one of EMAIL, SLACK, PAGERDUTY, MSTEAMS.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class VariablesSpecArgs:
    def __init__(__self__, *,
                 fixed_value: pulumi.Input[str],
                 value_type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] fixed_value: FixedValue of the variable
        :param pulumi.Input[str] value_type: Type of Value of the Variable. For now only FIXED is supported
        """
        pulumi.set(__self__, "fixed_value", fixed_value)
        pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter(name="fixedValue")
    def fixed_value(self) -> pulumi.Input[str]:
        """
        FixedValue of the variable
        """
        return pulumi.get(self, "fixed_value")

    @fixed_value.setter
    def fixed_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "fixed_value", value)

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> pulumi.Input[str]:
        """
        Type of Value of the Variable. For now only FIXED is supported
        """
        return pulumi.get(self, "value_type")

    @value_type.setter
    def value_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "value_type", value)


@pulumi.input_type
class GetGitopsApplicationsApplicationArgs:
    def __init__(__self__, *,
                 metadatas: Optional[Sequence['GetGitopsApplicationsApplicationMetadataArgs']] = None,
                 specs: Optional[Sequence['GetGitopsApplicationsApplicationSpecArgs']] = None):
        """
        :param Sequence['GetGitopsApplicationsApplicationMetadataArgs'] metadatas: Metadata corresponding to the resources. This includes all the objects a user must create.
        :param Sequence['GetGitopsApplicationsApplicationSpecArgs'] specs: Specifications of the GitOps application. This includes the repository URL, application definition, source, destination and sync policy.
        """
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if specs is not None:
            pulumi.set(__self__, "specs", specs)

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[Sequence['GetGitopsApplicationsApplicationMetadataArgs']]:
        """
        Metadata corresponding to the resources. This includes all the objects a user must create.
        """
        return pulumi.get(self, "metadatas")

    @metadatas.setter
    def metadatas(self, value: Optional[Sequence['GetGitopsApplicationsApplicationMetadataArgs']]):
        pulumi.set(self, "metadatas", value)

    @property
    @pulumi.getter
    def specs(self) -> Optional[Sequence['GetGitopsApplicationsApplicationSpecArgs']]:
        """
        Specifications of the GitOps application. This includes the repository URL, application definition, source, destination and sync policy.
        """
        return pulumi.get(self, "specs")

    @specs.setter
    def specs(self, value: Optional[Sequence['GetGitopsApplicationsApplicationSpecArgs']]):
        pulumi.set(self, "specs", value)


@pulumi.input_type
class GetGitopsApplicationsApplicationMetadataArgs:
    def __init__(__self__, *,
                 annotations: Mapping[str, str],
                 finalizers: Sequence[str],
                 generation: str,
                 labels: Mapping[str, str],
                 namespace: str,
                 uid: str,
                 cluster_name: Optional[str] = None,
                 generate_name: Optional[str] = None,
                 name: Optional[str] = None,
                 owner_references: Optional[Sequence['GetGitopsApplicationsApplicationMetadataOwnerReferenceArgs']] = None):
        """
        :param Mapping[str, str] annotations: Annotations are unstructured key value pairs corresponding to a resource. External tools set these to store and retrieve arbitrary metadata.
        :param Sequence[str] finalizers: Before the object is removed from the register, it must be empty. Each element serves as a unique identifier for the component that is accountable for removing that entry from the list. Entries in this list can only be removed if the object's deletionTimestamp is not null. The processing and removal of finalizers can happen in any sequence. No order is enforced as it may block the finalizers. Finalizers is a shared field that can be reordered by any actor with authority. If the finalizer list is processed in order, this could result in a scenario where the component in charge of the list's first finalizer is waiting for a signal (generated by a field value, an external system, or another) produced by a component in charge of the list's later finalizer.
        :param str generation: A sequence number representing a specific generation of the desired state. This is a read-only value populated by the system.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services.
        :param str namespace: Namespace of the GitOps application. An empty namespace is equivalent to the "default" namespace.
        :param str uid: UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
        :param str cluster_name: Name of the cluster corresponding to the object. API server ignores this if set in any create or update request.
        :param str generate_name: An optional prefix that the server will only apply if the Name field is empty to create a unique name. The name returned to the client will differ from the name passed if this field is used. A unique suffix will be added to this value as well. The supplied value must adhere to the same validation guidelines as the Name field and may be reduced by the suffix length necessary to ensure that it is unique on the server. The server will NOT return a 409 if this field is supplied and the created name already exists; instead, it will either return 201 Created or 500 with Reason ServerTimeout, indicating that a unique name could not be found in the allotted time and the client should try again later.
        :param str name: Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Name cannot be updated.
        :param Sequence['GetGitopsApplicationsApplicationMetadataOwnerReferenceArgs'] owner_references: List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
        """
        pulumi.set(__self__, "annotations", annotations)
        pulumi.set(__self__, "finalizers", finalizers)
        pulumi.set(__self__, "generation", generation)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "uid", uid)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if generate_name is not None:
            pulumi.set(__self__, "generate_name", generate_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_references is not None:
            pulumi.set(__self__, "owner_references", owner_references)

    @property
    @pulumi.getter
    def annotations(self) -> Mapping[str, str]:
        """
        Annotations are unstructured key value pairs corresponding to a resource. External tools set these to store and retrieve arbitrary metadata.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Mapping[str, str]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def finalizers(self) -> Sequence[str]:
        """
        Before the object is removed from the register, it must be empty. Each element serves as a unique identifier for the component that is accountable for removing that entry from the list. Entries in this list can only be removed if the object's deletionTimestamp is not null. The processing and removal of finalizers can happen in any sequence. No order is enforced as it may block the finalizers. Finalizers is a shared field that can be reordered by any actor with authority. If the finalizer list is processed in order, this could result in a scenario where the component in charge of the list's first finalizer is waiting for a signal (generated by a field value, an external system, or another) produced by a component in charge of the list's later finalizer.
        """
        return pulumi.get(self, "finalizers")

    @finalizers.setter
    def finalizers(self, value: Sequence[str]):
        pulumi.set(self, "finalizers", value)

    @property
    @pulumi.getter
    def generation(self) -> str:
        """
        A sequence number representing a specific generation of the desired state. This is a read-only value populated by the system.
        """
        return pulumi.get(self, "generation")

    @generation.setter
    def generation(self, value: str):
        pulumi.set(self, "generation", value)

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Mapping[str, str]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Namespace of the GitOps application. An empty namespace is equivalent to the "default" namespace.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: str):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def uid(self) -> str:
        """
        UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: str):
        pulumi.set(self, "uid", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        """
        Name of the cluster corresponding to the object. API server ignores this if set in any create or update request.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="generateName")
    def generate_name(self) -> Optional[str]:
        """
        An optional prefix that the server will only apply if the Name field is empty to create a unique name. The name returned to the client will differ from the name passed if this field is used. A unique suffix will be added to this value as well. The supplied value must adhere to the same validation guidelines as the Name field and may be reduced by the suffix length necessary to ensure that it is unique on the server. The server will NOT return a 409 if this field is supplied and the created name already exists; instead, it will either return 201 Created or 500 with Reason ServerTimeout, indicating that a unique name could not be found in the allotted time and the client should try again later.
        """
        return pulumi.get(self, "generate_name")

    @generate_name.setter
    def generate_name(self, value: Optional[str]):
        pulumi.set(self, "generate_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Name cannot be updated.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ownerReferences")
    def owner_references(self) -> Optional[Sequence['GetGitopsApplicationsApplicationMetadataOwnerReferenceArgs']]:
        """
        List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
        """
        return pulumi.get(self, "owner_references")

    @owner_references.setter
    def owner_references(self, value: Optional[Sequence['GetGitopsApplicationsApplicationMetadataOwnerReferenceArgs']]):
        pulumi.set(self, "owner_references", value)


@pulumi.input_type
class GetGitopsApplicationsApplicationMetadataOwnerReferenceArgs:
    def __init__(__self__, *,
                 api_version: Optional[str] = None,
                 block_owner_deletion: Optional[bool] = None,
                 controller: Optional[bool] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 uid: Optional[str] = None):
        """
        :param str api_version: API version of the referent.
        :param bool block_owner_deletion: If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
        :param bool controller: Indicates if the reference points to the managing controller.
        :param str kind: Kind of the referent.
        :param str name: Name of the referent.
        :param str uid: UID of the referent.
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if block_owner_deletion is not None:
            pulumi.set(__self__, "block_owner_deletion", block_owner_deletion)
        if controller is not None:
            pulumi.set(__self__, "controller", controller)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        """
        API version of the referent.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[str]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter(name="blockOwnerDeletion")
    def block_owner_deletion(self) -> Optional[bool]:
        """
        If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
        """
        return pulumi.get(self, "block_owner_deletion")

    @block_owner_deletion.setter
    def block_owner_deletion(self, value: Optional[bool]):
        pulumi.set(self, "block_owner_deletion", value)

    @property
    @pulumi.getter
    def controller(self) -> Optional[bool]:
        """
        Indicates if the reference points to the managing controller.
        """
        return pulumi.get(self, "controller")

    @controller.setter
    def controller(self, value: Optional[bool]):
        pulumi.set(self, "controller", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind of the referent.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[str]:
        """
        UID of the referent.
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[str]):
        pulumi.set(self, "uid", value)


@pulumi.input_type
class GetGitopsApplicationsApplicationSpecArgs:
    def __init__(__self__, *,
                 destinations: Optional[Sequence['GetGitopsApplicationsApplicationSpecDestinationArgs']] = None,
                 sources: Optional[Sequence['GetGitopsApplicationsApplicationSpecSourceArgs']] = None,
                 sync_policies: Optional[Sequence['GetGitopsApplicationsApplicationSpecSyncPolicyArgs']] = None):
        """
        :param Sequence['GetGitopsApplicationsApplicationSpecDestinationArgs'] destinations: Information about the GitOps application's destination.
        :param Sequence['GetGitopsApplicationsApplicationSpecSourceArgs'] sources: Contains all information about the source of a GitOps application.
        :param Sequence['GetGitopsApplicationsApplicationSpecSyncPolicyArgs'] sync_policies: Controls when a sync will be performed in response to updates in git.
        """
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if sync_policies is not None:
            pulumi.set(__self__, "sync_policies", sync_policies)

    @property
    @pulumi.getter
    def destinations(self) -> Optional[Sequence['GetGitopsApplicationsApplicationSpecDestinationArgs']]:
        """
        Information about the GitOps application's destination.
        """
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: Optional[Sequence['GetGitopsApplicationsApplicationSpecDestinationArgs']]):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['GetGitopsApplicationsApplicationSpecSourceArgs']]:
        """
        Contains all information about the source of a GitOps application.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[Sequence['GetGitopsApplicationsApplicationSpecSourceArgs']]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter(name="syncPolicies")
    def sync_policies(self) -> Optional[Sequence['GetGitopsApplicationsApplicationSpecSyncPolicyArgs']]:
        """
        Controls when a sync will be performed in response to updates in git.
        """
        return pulumi.get(self, "sync_policies")

    @sync_policies.setter
    def sync_policies(self, value: Optional[Sequence['GetGitopsApplicationsApplicationSpecSyncPolicyArgs']]):
        pulumi.set(self, "sync_policies", value)


@pulumi.input_type
class GetGitopsApplicationsApplicationSpecDestinationArgs:
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str name: URL of the target cluster and must be set to the kubernetes control plane API.
        :param str namespace: Target namespace of the GitOps application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
        :param str server: Server of the destination of the GitOps application.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        URL of the target cluster and must be set to the kubernetes control plane API.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Target namespace of the GitOps application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        Server of the destination of the GitOps application.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[str]):
        pulumi.set(self, "server", value)


@pulumi.input_type
class GetGitopsApplicationsApplicationSpecSourceArgs:
    def __init__(__self__, *,
                 chart: Optional[str] = None,
                 directories: Optional[Sequence['GetGitopsApplicationsApplicationSpecSourceDirectoryArgs']] = None,
                 helms: Optional[Sequence['GetGitopsApplicationsApplicationSpecSourceHelmArgs']] = None,
                 ksonnets: Optional[Sequence['GetGitopsApplicationsApplicationSpecSourceKsonnetArgs']] = None,
                 kustomizes: Optional[Sequence['GetGitopsApplicationsApplicationSpecSourceKustomizeArgs']] = None,
                 path: Optional[str] = None,
                 plugins: Optional[Sequence['GetGitopsApplicationsApplicationSpecSourcePluginArgs']] = None,
                 repo_url: Optional[str] = None,
                 target_revision: Optional[str] = None):
        """
        :param str chart: Helm chart name, and must be specified for the GitOps applications sourced from a helm repo.
        :param Sequence['GetGitopsApplicationsApplicationSpecSourceDirectoryArgs'] directories: Options for applications of type plain YAML or Jsonnet.
        :param Sequence['GetGitopsApplicationsApplicationSpecSourceHelmArgs'] helms: Holds helm specific options.
        :param Sequence['GetGitopsApplicationsApplicationSpecSourceKsonnetArgs'] ksonnets: Ksonnet specific options.
        :param Sequence['GetGitopsApplicationsApplicationSpecSourceKustomizeArgs'] kustomizes: Options specific to a GitOps application source specific to Kustomize.
        :param str path: Directory path within the git repository, and is only valid for the GitOps applications sourced from git.
        :param Sequence['GetGitopsApplicationsApplicationSpecSourcePluginArgs'] plugins: Options specific to config management plugins.
        :param str repo_url: URL to the repository (git or helm) that contains the GitOps application manifests.
        :param str target_revision: Revision of the source to sync the GitOps application to. In case of git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag of the chart's version.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if directories is not None:
            pulumi.set(__self__, "directories", directories)
        if helms is not None:
            pulumi.set(__self__, "helms", helms)
        if ksonnets is not None:
            pulumi.set(__self__, "ksonnets", ksonnets)
        if kustomizes is not None:
            pulumi.set(__self__, "kustomizes", kustomizes)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if plugins is not None:
            pulumi.set(__self__, "plugins", plugins)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)
        if target_revision is not None:
            pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> Optional[str]:
        """
        Helm chart name, and must be specified for the GitOps applications sourced from a helm repo.
        """
        return pulumi.get(self, "chart")

    @chart.setter
    def chart(self, value: Optional[str]):
        pulumi.set(self, "chart", value)

    @property
    @pulumi.getter
    def directories(self) -> Optional[Sequence['GetGitopsApplicationsApplicationSpecSourceDirectoryArgs']]:
        """
        Options for applications of type plain YAML or Jsonnet.
        """
        return pulumi.get(self, "directories")

    @directories.setter
    def directories(self, value: Optional[Sequence['GetGitopsApplicationsApplicationSpecSourceDirectoryArgs']]):
        pulumi.set(self, "directories", value)

    @property
    @pulumi.getter
    def helms(self) -> Optional[Sequence['GetGitopsApplicationsApplicationSpecSourceHelmArgs']]:
        """
        Holds helm specific options.
        """
        return pulumi.get(self, "helms")

    @helms.setter
    def helms(self, value: Optional[Sequence['GetGitopsApplicationsApplicationSpecSourceHelmArgs']]):
        pulumi.set(self, "helms", value)

    @property
    @pulumi.getter
    def ksonnets(self) -> Optional[Sequence['GetGitopsApplicationsApplicationSpecSourceKsonnetArgs']]:
        """
        Ksonnet specific options.
        """
        return pulumi.get(self, "ksonnets")

    @ksonnets.setter
    def ksonnets(self, value: Optional[Sequence['GetGitopsApplicationsApplicationSpecSourceKsonnetArgs']]):
        pulumi.set(self, "ksonnets", value)

    @property
    @pulumi.getter
    def kustomizes(self) -> Optional[Sequence['GetGitopsApplicationsApplicationSpecSourceKustomizeArgs']]:
        """
        Options specific to a GitOps application source specific to Kustomize.
        """
        return pulumi.get(self, "kustomizes")

    @kustomizes.setter
    def kustomizes(self, value: Optional[Sequence['GetGitopsApplicationsApplicationSpecSourceKustomizeArgs']]):
        pulumi.set(self, "kustomizes", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Directory path within the git repository, and is only valid for the GitOps applications sourced from git.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def plugins(self) -> Optional[Sequence['GetGitopsApplicationsApplicationSpecSourcePluginArgs']]:
        """
        Options specific to config management plugins.
        """
        return pulumi.get(self, "plugins")

    @plugins.setter
    def plugins(self, value: Optional[Sequence['GetGitopsApplicationsApplicationSpecSourcePluginArgs']]):
        pulumi.set(self, "plugins", value)

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        URL to the repository (git or helm) that contains the GitOps application manifests.
        """
        return pulumi.get(self, "repo_url")

    @repo_url.setter
    def repo_url(self, value: Optional[str]):
        pulumi.set(self, "repo_url", value)

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> Optional[str]:
        """
        Revision of the source to sync the GitOps application to. In case of git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag of the chart's version.
        """
        return pulumi.get(self, "target_revision")

    @target_revision.setter
    def target_revision(self, value: Optional[str]):
        pulumi.set(self, "target_revision", value)


@pulumi.input_type
class GetGitopsApplicationsApplicationSpecSourceDirectoryArgs:
    def __init__(__self__, *,
                 exclude: Optional[str] = None,
                 include: Optional[str] = None,
                 jsonnets: Optional[Sequence['GetGitopsApplicationsApplicationSpecSourceDirectoryJsonnetArgs']] = None,
                 recurse: Optional[bool] = None):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation.
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation.
        :param Sequence['GetGitopsApplicationsApplicationSpecSourceDirectoryJsonnetArgs'] jsonnets: Options specific to applications of type Jsonnet.
        :param bool recurse: Indicates to scan a directory recursively for manifests.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if jsonnets is not None:
            pulumi.set(__self__, "jsonnets", jsonnets)
        if recurse is not None:
            pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation.
        """
        return pulumi.get(self, "exclude")

    @exclude.setter
    def exclude(self, value: Optional[str]):
        pulumi.set(self, "exclude", value)

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation.
        """
        return pulumi.get(self, "include")

    @include.setter
    def include(self, value: Optional[str]):
        pulumi.set(self, "include", value)

    @property
    @pulumi.getter
    def jsonnets(self) -> Optional[Sequence['GetGitopsApplicationsApplicationSpecSourceDirectoryJsonnetArgs']]:
        """
        Options specific to applications of type Jsonnet.
        """
        return pulumi.get(self, "jsonnets")

    @jsonnets.setter
    def jsonnets(self, value: Optional[Sequence['GetGitopsApplicationsApplicationSpecSourceDirectoryJsonnetArgs']]):
        pulumi.set(self, "jsonnets", value)

    @property
    @pulumi.getter
    def recurse(self) -> Optional[bool]:
        """
        Indicates to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")

    @recurse.setter
    def recurse(self, value: Optional[bool]):
        pulumi.set(self, "recurse", value)


@pulumi.input_type
class GetGitopsApplicationsApplicationSpecSourceDirectoryJsonnetArgs:
    def __init__(__self__, *,
                 ext_vars: Optional[Sequence['GetGitopsApplicationsApplicationSpecSourceDirectoryJsonnetExtVarArgs']] = None,
                 libs: Optional[Sequence[str]] = None,
                 tlas: Optional[Sequence['GetGitopsApplicationsApplicationSpecSourceDirectoryJsonnetTlaArgs']] = None):
        """
        :param Sequence['GetGitopsApplicationsApplicationSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of jsonnet external variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['GetGitopsApplicationsApplicationSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of jsonnet top-level arguments(TLAS).
        """
        if ext_vars is not None:
            pulumi.set(__self__, "ext_vars", ext_vars)
        if libs is not None:
            pulumi.set(__self__, "libs", libs)
        if tlas is not None:
            pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Optional[Sequence['GetGitopsApplicationsApplicationSpecSourceDirectoryJsonnetExtVarArgs']]:
        """
        List of jsonnet external variables.
        """
        return pulumi.get(self, "ext_vars")

    @ext_vars.setter
    def ext_vars(self, value: Optional[Sequence['GetGitopsApplicationsApplicationSpecSourceDirectoryJsonnetExtVarArgs']]):
        pulumi.set(self, "ext_vars", value)

    @property
    @pulumi.getter
    def libs(self) -> Optional[Sequence[str]]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @libs.setter
    def libs(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "libs", value)

    @property
    @pulumi.getter
    def tlas(self) -> Optional[Sequence['GetGitopsApplicationsApplicationSpecSourceDirectoryJsonnetTlaArgs']]:
        """
        List of jsonnet top-level arguments(TLAS).
        """
        return pulumi.get(self, "tlas")

    @tlas.setter
    def tlas(self, value: Optional[Sequence['GetGitopsApplicationsApplicationSpecSourceDirectoryJsonnetTlaArgs']]):
        pulumi.set(self, "tlas", value)


@pulumi.input_type
class GetGitopsApplicationsApplicationSpecSourceDirectoryJsonnetExtVarArgs:
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Code of the external variables of jsonnet application.
        :param str name: Name of the external variables of jsonnet application.
        :param str value: Value of the external variables of jsonnet application.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Code of the external variables of jsonnet application.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[bool]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the external variables of jsonnet application.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the external variables of jsonnet application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetGitopsApplicationsApplicationSpecSourceDirectoryJsonnetTlaArgs:
    def __init__(__self__, *,
                 code: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool code: Code of the TLAS of the jsonnet application.
        :param str name: Name of the TLAS of the jsonnet application.
        :param str value: Value of the TLAS of the jsonnet application.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[bool]:
        """
        Code of the TLAS of the jsonnet application.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[bool]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the TLAS of the jsonnet application.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the TLAS of the jsonnet application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetGitopsApplicationsApplicationSpecSourceHelmArgs:
    def __init__(__self__, *,
                 file_parameters: Optional[Sequence['GetGitopsApplicationsApplicationSpecSourceHelmFileParameterArgs']] = None,
                 parameters: Optional[Sequence['GetGitopsApplicationsApplicationSpecSourceHelmParameterArgs']] = None,
                 pass_credentials: Optional[bool] = None,
                 release_name: Optional[str] = None,
                 value_files: Optional[Sequence[str]] = None,
                 values: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Sequence['GetGitopsApplicationsApplicationSpecSourceHelmFileParameterArgs'] file_parameters: File parameters to the helm template.
        :param Sequence['GetGitopsApplicationsApplicationSpecSourceHelmParameterArgs'] parameters: List of helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: Indicates if to pass credentials to all domains (helm's --pass-credentials)
        :param str release_name: Helm release name to use. If omitted it will use the GitOps application name.
        :param Sequence[str] value_files: List of helm value files to use when generating a template.
        :param str values: Helm values to be passed to helm template, typically defined as a block.
        :param str version: Helm version to use for templating (either "2" or "3")
        """
        if file_parameters is not None:
            pulumi.set(__self__, "file_parameters", file_parameters)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pass_credentials is not None:
            pulumi.set(__self__, "pass_credentials", pass_credentials)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if value_files is not None:
            pulumi.set(__self__, "value_files", value_files)
        if values is not None:
            pulumi.set(__self__, "values", values)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Optional[Sequence['GetGitopsApplicationsApplicationSpecSourceHelmFileParameterArgs']]:
        """
        File parameters to the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @file_parameters.setter
    def file_parameters(self, value: Optional[Sequence['GetGitopsApplicationsApplicationSpecSourceHelmFileParameterArgs']]):
        pulumi.set(self, "file_parameters", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['GetGitopsApplicationsApplicationSpecSourceHelmParameterArgs']]:
        """
        List of helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[Sequence['GetGitopsApplicationsApplicationSpecSourceHelmParameterArgs']]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> Optional[bool]:
        """
        Indicates if to pass credentials to all domains (helm's --pass-credentials)
        """
        return pulumi.get(self, "pass_credentials")

    @pass_credentials.setter
    def pass_credentials(self, value: Optional[bool]):
        pulumi.set(self, "pass_credentials", value)

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        """
        Helm release name to use. If omitted it will use the GitOps application name.
        """
        return pulumi.get(self, "release_name")

    @release_name.setter
    def release_name(self, value: Optional[str]):
        pulumi.set(self, "release_name", value)

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Optional[Sequence[str]]:
        """
        List of helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @value_files.setter
    def value_files(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "value_files", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        Helm values to be passed to helm template, typically defined as a block.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Helm version to use for templating (either "2" or "3")
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[str]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class GetGitopsApplicationsApplicationSpecSourceHelmFileParameterArgs:
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 path: Optional[str] = None):
        """
        :param str name: Name of the helm parameter.
        :param str path: Path to the file containing the values of the helm parameter.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the helm parameter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the file containing the values of the helm parameter.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[str]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class GetGitopsApplicationsApplicationSpecSourceHelmParameterArgs:
    def __init__(__self__, *,
                 force_string: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param bool force_string: Indicates if helm should interpret booleans and numbers as strings.
        :param str name: Name of the helm parameter.
        :param str value: Value of the helm parameter.
        """
        if force_string is not None:
            pulumi.set(__self__, "force_string", force_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> Optional[bool]:
        """
        Indicates if helm should interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @force_string.setter
    def force_string(self, value: Optional[bool]):
        pulumi.set(self, "force_string", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the helm parameter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the helm parameter.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetGitopsApplicationsApplicationSpecSourceKsonnetArgs:
    def __init__(__self__, *,
                 environment: Optional[str] = None,
                 parameters: Optional[Sequence['GetGitopsApplicationsApplicationSpecSourceKsonnetParameterArgs']] = None):
        """
        :param str environment: Ksonnet application environment name.
        :param Sequence['GetGitopsApplicationsApplicationSpecSourceKsonnetParameterArgs'] parameters: List of ksonnet component parameter override values.
        """
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def environment(self) -> Optional[str]:
        """
        Ksonnet application environment name.
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[str]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['GetGitopsApplicationsApplicationSpecSourceKsonnetParameterArgs']]:
        """
        List of ksonnet component parameter override values.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[Sequence['GetGitopsApplicationsApplicationSpecSourceKsonnetParameterArgs']]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class GetGitopsApplicationsApplicationSpecSourceKsonnetParameterArgs:
    def __init__(__self__, *,
                 component: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str component: Component of the parameter of the ksonnet application.
        :param str name: Name of the parameter of the ksonnet application.
        :param str value: Value of the parameter of the ksonnet application.
        """
        if component is not None:
            pulumi.set(__self__, "component", component)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def component(self) -> Optional[str]:
        """
        Component of the parameter of the ksonnet application.
        """
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[str]):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the parameter of the ksonnet application.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the parameter of the ksonnet application.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetGitopsApplicationsApplicationSpecSourceKustomizeArgs:
    def __init__(__self__, *,
                 common_annotations: Optional[Mapping[str, str]] = None,
                 common_labels: Optional[Mapping[str, str]] = None,
                 force_common_annotations: Optional[bool] = None,
                 force_common_labels: Optional[bool] = None,
                 images: Optional[Sequence[str]] = None,
                 name_prefix: Optional[str] = None,
                 name_suffix: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param bool force_common_annotations: Indicates if to force applying common annotations to resources for kustomize apps.
        :param bool force_common_labels: Indicates if to force apply common labels to resources for kustomize apps.
        :param Sequence[str] images: List of kustomize image override specifications.
        :param str name_prefix: Prefix prepended to resources for kustomize apps.
        :param str name_suffix: Suffix appended to resources for kustomize apps.
        :param str version: Version of kustomize to use for rendering manifests.
        """
        if common_annotations is not None:
            pulumi.set(__self__, "common_annotations", common_annotations)
        if common_labels is not None:
            pulumi.set(__self__, "common_labels", common_labels)
        if force_common_annotations is not None:
            pulumi.set(__self__, "force_common_annotations", force_common_annotations)
        if force_common_labels is not None:
            pulumi.set(__self__, "force_common_labels", force_common_labels)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if name_suffix is not None:
            pulumi.set(__self__, "name_suffix", name_suffix)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Optional[Mapping[str, str]]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @common_annotations.setter
    def common_annotations(self, value: Optional[Mapping[str, str]]):
        pulumi.set(self, "common_annotations", value)

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Optional[Mapping[str, str]]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @common_labels.setter
    def common_labels(self, value: Optional[Mapping[str, str]]):
        pulumi.set(self, "common_labels", value)

    @property
    @pulumi.getter(name="forceCommonAnnotations")
    def force_common_annotations(self) -> Optional[bool]:
        """
        Indicates if to force applying common annotations to resources for kustomize apps.
        """
        return pulumi.get(self, "force_common_annotations")

    @force_common_annotations.setter
    def force_common_annotations(self, value: Optional[bool]):
        pulumi.set(self, "force_common_annotations", value)

    @property
    @pulumi.getter(name="forceCommonLabels")
    def force_common_labels(self) -> Optional[bool]:
        """
        Indicates if to force apply common labels to resources for kustomize apps.
        """
        return pulumi.get(self, "force_common_labels")

    @force_common_labels.setter
    def force_common_labels(self, value: Optional[bool]):
        pulumi.set(self, "force_common_labels", value)

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence[str]]:
        """
        List of kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @images.setter
    def images(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "images", value)

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[str]:
        """
        Prefix prepended to resources for kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @name_prefix.setter
    def name_prefix(self, value: Optional[str]):
        pulumi.set(self, "name_prefix", value)

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> Optional[str]:
        """
        Suffix appended to resources for kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @name_suffix.setter
    def name_suffix(self, value: Optional[str]):
        pulumi.set(self, "name_suffix", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[str]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class GetGitopsApplicationsApplicationSpecSourcePluginArgs:
    def __init__(__self__, *,
                 envs: Optional[Sequence['GetGitopsApplicationsApplicationSpecSourcePluginEnvArgs']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['GetGitopsApplicationsApplicationSpecSourcePluginEnvArgs'] envs: Entry in the GitOps application's environment.
        :param str name: Name of the plugin.
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['GetGitopsApplicationsApplicationSpecSourcePluginEnvArgs']]:
        """
        Entry in the GitOps application's environment.
        """
        return pulumi.get(self, "envs")

    @envs.setter
    def envs(self, value: Optional[Sequence['GetGitopsApplicationsApplicationSpecSourcePluginEnvArgs']]):
        pulumi.set(self, "envs", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the plugin.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GetGitopsApplicationsApplicationSpecSourcePluginEnvArgs:
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the variable, usually expressed in uppercase.
        :param str value: Value of the variable.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the variable, usually expressed in uppercase.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the variable.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetGitopsApplicationsApplicationSpecSyncPolicyArgs:
    def __init__(__self__, *,
                 automateds: Optional[Sequence['GetGitopsApplicationsApplicationSpecSyncPolicyAutomatedArgs']] = None,
                 retries: Optional[Sequence['GetGitopsApplicationsApplicationSpecSyncPolicyRetryArgs']] = None,
                 sync_options: Optional[Sequence[str]] = None):
        """
        :param Sequence['GetGitopsApplicationsApplicationSpecSyncPolicyAutomatedArgs'] automateds: Controls the behavior of an automated sync.
        :param Sequence['GetGitopsApplicationsApplicationSpecSyncPolicyRetryArgs'] retries: Contains information about the strategy to apply when a sync failed.
        :param Sequence[str] sync_options: Options allow you to specify whole app sync-options.
        """
        if automateds is not None:
            pulumi.set(__self__, "automateds", automateds)
        if retries is not None:
            pulumi.set(__self__, "retries", retries)
        if sync_options is not None:
            pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automateds(self) -> Optional[Sequence['GetGitopsApplicationsApplicationSpecSyncPolicyAutomatedArgs']]:
        """
        Controls the behavior of an automated sync.
        """
        return pulumi.get(self, "automateds")

    @automateds.setter
    def automateds(self, value: Optional[Sequence['GetGitopsApplicationsApplicationSpecSyncPolicyAutomatedArgs']]):
        pulumi.set(self, "automateds", value)

    @property
    @pulumi.getter
    def retries(self) -> Optional[Sequence['GetGitopsApplicationsApplicationSpecSyncPolicyRetryArgs']]:
        """
        Contains information about the strategy to apply when a sync failed.
        """
        return pulumi.get(self, "retries")

    @retries.setter
    def retries(self, value: Optional[Sequence['GetGitopsApplicationsApplicationSpecSyncPolicyRetryArgs']]):
        pulumi.set(self, "retries", value)

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Optional[Sequence[str]]:
        """
        Options allow you to specify whole app sync-options.
        """
        return pulumi.get(self, "sync_options")

    @sync_options.setter
    def sync_options(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "sync_options", value)


@pulumi.input_type
class GetGitopsApplicationsApplicationSpecSyncPolicyAutomatedArgs:
    def __init__(__self__, *,
                 allow_empty: Optional[bool] = None,
                 prune: Optional[bool] = None,
                 self_heal: Optional[bool] = None):
        """
        :param bool allow_empty: Indicates to allows apps to have zero live resources (default: false).
        :param bool prune: Indicates whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync (default: false).
        :param bool self_heal: Indicates whether to revert resources back to their desired state upon modification in the cluster (default: false).
        """
        if allow_empty is not None:
            pulumi.set(__self__, "allow_empty", allow_empty)
        if prune is not None:
            pulumi.set(__self__, "prune", prune)
        if self_heal is not None:
            pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> Optional[bool]:
        """
        Indicates to allows apps to have zero live resources (default: false).
        """
        return pulumi.get(self, "allow_empty")

    @allow_empty.setter
    def allow_empty(self, value: Optional[bool]):
        pulumi.set(self, "allow_empty", value)

    @property
    @pulumi.getter
    def prune(self) -> Optional[bool]:
        """
        Indicates whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync (default: false).
        """
        return pulumi.get(self, "prune")

    @prune.setter
    def prune(self, value: Optional[bool]):
        pulumi.set(self, "prune", value)

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> Optional[bool]:
        """
        Indicates whether to revert resources back to their desired state upon modification in the cluster (default: false).
        """
        return pulumi.get(self, "self_heal")

    @self_heal.setter
    def self_heal(self, value: Optional[bool]):
        pulumi.set(self, "self_heal", value)


@pulumi.input_type
class GetGitopsApplicationsApplicationSpecSyncPolicyRetryArgs:
    def __init__(__self__, *,
                 backoffs: Optional[Sequence['GetGitopsApplicationsApplicationSpecSyncPolicyRetryBackoffArgs']] = None,
                 limit: Optional[str] = None):
        """
        :param Sequence['GetGitopsApplicationsApplicationSpecSyncPolicyRetryBackoffArgs'] backoffs: Backoff strategy to use on subsequent retries for failing syncs.
        :param str limit: Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        if backoffs is not None:
            pulumi.set(__self__, "backoffs", backoffs)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoffs(self) -> Optional[Sequence['GetGitopsApplicationsApplicationSpecSyncPolicyRetryBackoffArgs']]:
        """
        Backoff strategy to use on subsequent retries for failing syncs.
        """
        return pulumi.get(self, "backoffs")

    @backoffs.setter
    def backoffs(self, value: Optional[Sequence['GetGitopsApplicationsApplicationSpecSyncPolicyRetryBackoffArgs']]):
        pulumi.set(self, "backoffs", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        """
        Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[str]):
        pulumi.set(self, "limit", value)


@pulumi.input_type
class GetGitopsApplicationsApplicationSpecSyncPolicyRetryBackoffArgs:
    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 factor: Optional[str] = None,
                 max_duration: Optional[str] = None):
        """
        :param str duration: Amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h").
        :param str factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed of the backoff strategy.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if factor is not None:
            pulumi.set(__self__, "factor", factor)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h").
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[str]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def factor(self) -> Optional[str]:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @factor.setter
    def factor(self, value: Optional[str]):
        pulumi.set(self, "factor", value)

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[str]:
        """
        Maximum amount of time allowed of the backoff strategy.
        """
        return pulumi.get(self, "max_duration")

    @max_duration.setter
    def max_duration(self, value: Optional[str]):
        pulumi.set(self, "max_duration", value)


@pulumi.input_type
class GetGitopsClusterQueryArgs:
    def __init__(__self__, *,
                 ids: Optional[Sequence['GetGitopsClusterQueryIdArgs']] = None,
                 name: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param Sequence['GetGitopsClusterQueryIdArgs'] ids: Cluster server URL or the cluster name.
        :param str name: Name of the GitOps cluster.
        :param str server: Server of the GitOps cluster.
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence['GetGitopsClusterQueryIdArgs']]:
        """
        Cluster server URL or the cluster name.
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[Sequence['GetGitopsClusterQueryIdArgs']]):
        pulumi.set(self, "ids", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the GitOps cluster.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        Server of the GitOps cluster.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[str]):
        pulumi.set(self, "server", value)


@pulumi.input_type
class GetGitopsClusterQueryIdArgs:
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str type: Type of the specified GitOps cluster identifier ( 'server' - default, 'name' ).
        :param str value: Cluster server URL or the cluster name.
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of the specified GitOps cluster identifier ( 'server' - default, 'name' ).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Cluster server URL or the cluster name.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetGitopsGnupgRequestArgs:
    def __init__(__self__, *,
                 publickeys: Optional[Sequence['GetGitopsGnupgRequestPublickeyArgs']] = None,
                 upsert: Optional[bool] = None):
        """
        :param Sequence['GetGitopsGnupgRequestPublickeyArgs'] publickeys: Public key details.
        :param bool upsert: Indicates if the GnuPG Key should be inserted if not present or updated if present.
        """
        if publickeys is not None:
            pulumi.set(__self__, "publickeys", publickeys)
        if upsert is not None:
            pulumi.set(__self__, "upsert", upsert)

    @property
    @pulumi.getter
    def publickeys(self) -> Optional[Sequence['GetGitopsGnupgRequestPublickeyArgs']]:
        """
        Public key details.
        """
        return pulumi.get(self, "publickeys")

    @publickeys.setter
    def publickeys(self, value: Optional[Sequence['GetGitopsGnupgRequestPublickeyArgs']]):
        pulumi.set(self, "publickeys", value)

    @property
    @pulumi.getter
    def upsert(self) -> Optional[bool]:
        """
        Indicates if the GnuPG Key should be inserted if not present or updated if present.
        """
        return pulumi.get(self, "upsert")

    @upsert.setter
    def upsert(self, value: Optional[bool]):
        pulumi.set(self, "upsert", value)


@pulumi.input_type
class GetGitopsGnupgRequestPublickeyArgs:
    def __init__(__self__, *,
                 fingerprint: Optional[str] = None,
                 key_data: Optional[str] = None,
                 key_id: Optional[str] = None,
                 owner: Optional[str] = None,
                 sub_type: Optional[str] = None,
                 trust: Optional[str] = None):
        """
        :param str fingerprint: Fingerprint is the fingerprint of the key
        :param str key_data: KeyData holds the raw key data, in base64 encoded format
        :param str key_id: KeyID specifies the key ID, in hexadecimal string format.
        :param str owner: Owner holds the owner identification, e.g. a name and e-mail address
        :param str sub_type: SubType holds the key's sub type
        :param str trust: Trust holds the level of trust assigned to this key
        """
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if key_data is not None:
            pulumi.set(__self__, "key_data", key_data)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if sub_type is not None:
            pulumi.set(__self__, "sub_type", sub_type)
        if trust is not None:
            pulumi.set(__self__, "trust", trust)

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        """
        Fingerprint is the fingerprint of the key
        """
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: Optional[str]):
        pulumi.set(self, "fingerprint", value)

    @property
    @pulumi.getter(name="keyData")
    def key_data(self) -> Optional[str]:
        """
        KeyData holds the raw key data, in base64 encoded format
        """
        return pulumi.get(self, "key_data")

    @key_data.setter
    def key_data(self, value: Optional[str]):
        pulumi.set(self, "key_data", value)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[str]:
        """
        KeyID specifies the key ID, in hexadecimal string format.
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[str]):
        pulumi.set(self, "key_id", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        """
        Owner holds the owner identification, e.g. a name and e-mail address
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[str]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="subType")
    def sub_type(self) -> Optional[str]:
        """
        SubType holds the key's sub type
        """
        return pulumi.get(self, "sub_type")

    @sub_type.setter
    def sub_type(self, value: Optional[str]):
        pulumi.set(self, "sub_type", value)

    @property
    @pulumi.getter
    def trust(self) -> Optional[str]:
        """
        Trust holds the level of trust assigned to this key
        """
        return pulumi.get(self, "trust")

    @trust.setter
    def trust(self, value: Optional[str]):
        pulumi.set(self, "trust", value)


@pulumi.input_type
class GetGitopsRepoCredCredArgs:
    def __init__(__self__, *,
                 enable_oci: Optional[bool] = None,
                 github_app_enterprise_base_url: Optional[str] = None,
                 github_app_id: Optional[str] = None,
                 github_app_installation_id: Optional[str] = None,
                 github_app_private_key: Optional[str] = None,
                 password: Optional[str] = None,
                 ssh_private_key: Optional[str] = None,
                 tls_client_cert_data: Optional[str] = None,
                 tls_client_cert_key: Optional[str] = None,
                 type: Optional[str] = None,
                 url: Optional[str] = None,
                 username: Optional[str] = None):
        """
        :param bool enable_oci: Specifies whether helm-oci support should be enabled for this repo.
        :param str github_app_enterprise_base_url: Specifies the GitHub API URL for GitHub app authentication.
        :param str github_app_id: Specifies the Github App ID of the app used to access the repo for GitHub app authentication.
        :param str github_app_installation_id: Specifies the ID of the installed GitHub App for GitHub app authentication.
        :param str github_app_private_key: github*app*private_key specifies the private key PEM data for authentication via GitHub app.
        :param str password: Password for authenticating at the repo server.
        :param str ssh_private_key: Contains the private key data for authenticating at the repo server using SSH (only Git repos).
        :param str tls_client_cert_data: Specifies the TLS client cert data for authenticating at the repo server.
        :param str tls_client_cert_key: Specifies the TLS client cert key for authenticating at the repo server.
        :param str type: Type specifies the type of the repoCreds.Can be either 'git' or 'helm. 'git' is assumed if empty or absent
        :param str url: url representing this object.
        :param str username: Username for authenticating at the repo server.
        """
        if enable_oci is not None:
            pulumi.set(__self__, "enable_oci", enable_oci)
        if github_app_enterprise_base_url is not None:
            pulumi.set(__self__, "github_app_enterprise_base_url", github_app_enterprise_base_url)
        if github_app_id is not None:
            pulumi.set(__self__, "github_app_id", github_app_id)
        if github_app_installation_id is not None:
            pulumi.set(__self__, "github_app_installation_id", github_app_installation_id)
        if github_app_private_key is not None:
            pulumi.set(__self__, "github_app_private_key", github_app_private_key)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if ssh_private_key is not None:
            pulumi.set(__self__, "ssh_private_key", ssh_private_key)
        if tls_client_cert_data is not None:
            pulumi.set(__self__, "tls_client_cert_data", tls_client_cert_data)
        if tls_client_cert_key is not None:
            pulumi.set(__self__, "tls_client_cert_key", tls_client_cert_key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="enableOci")
    def enable_oci(self) -> Optional[bool]:
        """
        Specifies whether helm-oci support should be enabled for this repo.
        """
        return pulumi.get(self, "enable_oci")

    @enable_oci.setter
    def enable_oci(self, value: Optional[bool]):
        pulumi.set(self, "enable_oci", value)

    @property
    @pulumi.getter(name="githubAppEnterpriseBaseUrl")
    def github_app_enterprise_base_url(self) -> Optional[str]:
        """
        Specifies the GitHub API URL for GitHub app authentication.
        """
        return pulumi.get(self, "github_app_enterprise_base_url")

    @github_app_enterprise_base_url.setter
    def github_app_enterprise_base_url(self, value: Optional[str]):
        pulumi.set(self, "github_app_enterprise_base_url", value)

    @property
    @pulumi.getter(name="githubAppId")
    def github_app_id(self) -> Optional[str]:
        """
        Specifies the Github App ID of the app used to access the repo for GitHub app authentication.
        """
        return pulumi.get(self, "github_app_id")

    @github_app_id.setter
    def github_app_id(self, value: Optional[str]):
        pulumi.set(self, "github_app_id", value)

    @property
    @pulumi.getter(name="githubAppInstallationId")
    def github_app_installation_id(self) -> Optional[str]:
        """
        Specifies the ID of the installed GitHub App for GitHub app authentication.
        """
        return pulumi.get(self, "github_app_installation_id")

    @github_app_installation_id.setter
    def github_app_installation_id(self, value: Optional[str]):
        pulumi.set(self, "github_app_installation_id", value)

    @property
    @pulumi.getter(name="githubAppPrivateKey")
    def github_app_private_key(self) -> Optional[str]:
        """
        github*app*private_key specifies the private key PEM data for authentication via GitHub app.
        """
        return pulumi.get(self, "github_app_private_key")

    @github_app_private_key.setter
    def github_app_private_key(self, value: Optional[str]):
        pulumi.set(self, "github_app_private_key", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Password for authenticating at the repo server.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="sshPrivateKey")
    def ssh_private_key(self) -> Optional[str]:
        """
        Contains the private key data for authenticating at the repo server using SSH (only Git repos).
        """
        return pulumi.get(self, "ssh_private_key")

    @ssh_private_key.setter
    def ssh_private_key(self, value: Optional[str]):
        pulumi.set(self, "ssh_private_key", value)

    @property
    @pulumi.getter(name="tlsClientCertData")
    def tls_client_cert_data(self) -> Optional[str]:
        """
        Specifies the TLS client cert data for authenticating at the repo server.
        """
        return pulumi.get(self, "tls_client_cert_data")

    @tls_client_cert_data.setter
    def tls_client_cert_data(self, value: Optional[str]):
        pulumi.set(self, "tls_client_cert_data", value)

    @property
    @pulumi.getter(name="tlsClientCertKey")
    def tls_client_cert_key(self) -> Optional[str]:
        """
        Specifies the TLS client cert key for authenticating at the repo server.
        """
        return pulumi.get(self, "tls_client_cert_key")

    @tls_client_cert_key.setter
    def tls_client_cert_key(self, value: Optional[str]):
        pulumi.set(self, "tls_client_cert_key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type specifies the type of the repoCreds.Can be either 'git' or 'helm. 'git' is assumed if empty or absent
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        url representing this object.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        Username for authenticating at the repo server.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class GetGitopsRepositoryUpdateMaskArgs:
    def __init__(__self__, *,
                 paths: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] paths: The set of field mask paths.
        """
        if paths is not None:
            pulumi.set(__self__, "paths", paths)

    @property
    @pulumi.getter
    def paths(self) -> Optional[Sequence[str]]:
        """
        The set of field mask paths.
        """
        return pulumi.get(self, "paths")

    @paths.setter
    def paths(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "paths", value)


@pulumi.input_type
class GetInputSetGitDetailsArgs:
    def __init__(__self__, *,
                 base_branch: str,
                 branch_name: str,
                 commit_message: str,
                 connector_ref: str,
                 file_path: str,
                 last_commit_id: str,
                 last_object_id: str,
                 parent_entity_connector_ref: str,
                 parent_entity_repo_name: str,
                 repo_name: str,
                 store_type: str):
        """
        :param str base_branch: Name of the default branch (this checks out a new branch titled by branch_name).
        :param str branch_name: Name of the branch.
        :param str commit_message: Commit message used for the merge commit.
        :param str connector_ref: Identifier of the Harness Connector used for CRUD operations on the Entity.
        :param str file_path: File path of the Entity in the repository.
        :param str last_commit_id: Last commit identifier (for Git Repositories other than Github). To be provided only when updating Pipeline.
        :param str last_object_id: Last object identifier (for Github). To be provided only when updating Pipeline.
        :param str parent_entity_connector_ref: Connector reference for Parent Entity (Pipeline).
        :param str parent_entity_repo_name: Repository name for Parent Entity (Pipeline).
        :param str repo_name: Name of the repository.
        :param str store_type: Specifies whether the Entity is to be stored in Git or not. Possible values: INLINE, REMOTE.
        """
        pulumi.set(__self__, "base_branch", base_branch)
        pulumi.set(__self__, "branch_name", branch_name)
        pulumi.set(__self__, "commit_message", commit_message)
        pulumi.set(__self__, "connector_ref", connector_ref)
        pulumi.set(__self__, "file_path", file_path)
        pulumi.set(__self__, "last_commit_id", last_commit_id)
        pulumi.set(__self__, "last_object_id", last_object_id)
        pulumi.set(__self__, "parent_entity_connector_ref", parent_entity_connector_ref)
        pulumi.set(__self__, "parent_entity_repo_name", parent_entity_repo_name)
        pulumi.set(__self__, "repo_name", repo_name)
        pulumi.set(__self__, "store_type", store_type)

    @property
    @pulumi.getter(name="baseBranch")
    def base_branch(self) -> str:
        """
        Name of the default branch (this checks out a new branch titled by branch_name).
        """
        return pulumi.get(self, "base_branch")

    @base_branch.setter
    def base_branch(self, value: str):
        pulumi.set(self, "base_branch", value)

    @property
    @pulumi.getter(name="branchName")
    def branch_name(self) -> str:
        """
        Name of the branch.
        """
        return pulumi.get(self, "branch_name")

    @branch_name.setter
    def branch_name(self, value: str):
        pulumi.set(self, "branch_name", value)

    @property
    @pulumi.getter(name="commitMessage")
    def commit_message(self) -> str:
        """
        Commit message used for the merge commit.
        """
        return pulumi.get(self, "commit_message")

    @commit_message.setter
    def commit_message(self, value: str):
        pulumi.set(self, "commit_message", value)

    @property
    @pulumi.getter(name="connectorRef")
    def connector_ref(self) -> str:
        """
        Identifier of the Harness Connector used for CRUD operations on the Entity.
        """
        return pulumi.get(self, "connector_ref")

    @connector_ref.setter
    def connector_ref(self, value: str):
        pulumi.set(self, "connector_ref", value)

    @property
    @pulumi.getter(name="filePath")
    def file_path(self) -> str:
        """
        File path of the Entity in the repository.
        """
        return pulumi.get(self, "file_path")

    @file_path.setter
    def file_path(self, value: str):
        pulumi.set(self, "file_path", value)

    @property
    @pulumi.getter(name="lastCommitId")
    def last_commit_id(self) -> str:
        """
        Last commit identifier (for Git Repositories other than Github). To be provided only when updating Pipeline.
        """
        return pulumi.get(self, "last_commit_id")

    @last_commit_id.setter
    def last_commit_id(self, value: str):
        pulumi.set(self, "last_commit_id", value)

    @property
    @pulumi.getter(name="lastObjectId")
    def last_object_id(self) -> str:
        """
        Last object identifier (for Github). To be provided only when updating Pipeline.
        """
        return pulumi.get(self, "last_object_id")

    @last_object_id.setter
    def last_object_id(self, value: str):
        pulumi.set(self, "last_object_id", value)

    @property
    @pulumi.getter(name="parentEntityConnectorRef")
    def parent_entity_connector_ref(self) -> str:
        """
        Connector reference for Parent Entity (Pipeline).
        """
        return pulumi.get(self, "parent_entity_connector_ref")

    @parent_entity_connector_ref.setter
    def parent_entity_connector_ref(self, value: str):
        pulumi.set(self, "parent_entity_connector_ref", value)

    @property
    @pulumi.getter(name="parentEntityRepoName")
    def parent_entity_repo_name(self) -> str:
        """
        Repository name for Parent Entity (Pipeline).
        """
        return pulumi.get(self, "parent_entity_repo_name")

    @parent_entity_repo_name.setter
    def parent_entity_repo_name(self, value: str):
        pulumi.set(self, "parent_entity_repo_name", value)

    @property
    @pulumi.getter(name="repoName")
    def repo_name(self) -> str:
        """
        Name of the repository.
        """
        return pulumi.get(self, "repo_name")

    @repo_name.setter
    def repo_name(self, value: str):
        pulumi.set(self, "repo_name", value)

    @property
    @pulumi.getter(name="storeType")
    def store_type(self) -> str:
        """
        Specifies whether the Entity is to be stored in Git or not. Possible values: INLINE, REMOTE.
        """
        return pulumi.get(self, "store_type")

    @store_type.setter
    def store_type(self, value: str):
        pulumi.set(self, "store_type", value)


@pulumi.input_type
class GetPipelineGitDetailsArgs:
    def __init__(__self__, *,
                 base_branch: str,
                 branch_name: str,
                 commit_message: str,
                 connector_ref: str,
                 file_path: str,
                 last_commit_id: str,
                 last_object_id: str,
                 repo_name: str,
                 store_type: str):
        """
        :param str base_branch: Name of the default branch (this checks out a new branch titled by branch_name).
        :param str branch_name: Name of the branch.
        :param str commit_message: Commit message used for the merge commit.
        :param str connector_ref: Identifier of the Harness Connector used for CRUD operations on the Entity.
        :param str file_path: File path of the Entity in the repository.
        :param str last_commit_id: Last commit identifier (for Git Repositories other than Github). To be provided only when updating Pipeline.
        :param str last_object_id: Last object identifier (for Github). To be provided only when updating Pipeline.
        :param str repo_name: Name of the repository.
        :param str store_type: Specifies whether the Entity is to be stored in Git or not. Possible values: INLINE, REMOTE.
        """
        pulumi.set(__self__, "base_branch", base_branch)
        pulumi.set(__self__, "branch_name", branch_name)
        pulumi.set(__self__, "commit_message", commit_message)
        pulumi.set(__self__, "connector_ref", connector_ref)
        pulumi.set(__self__, "file_path", file_path)
        pulumi.set(__self__, "last_commit_id", last_commit_id)
        pulumi.set(__self__, "last_object_id", last_object_id)
        pulumi.set(__self__, "repo_name", repo_name)
        pulumi.set(__self__, "store_type", store_type)

    @property
    @pulumi.getter(name="baseBranch")
    def base_branch(self) -> str:
        """
        Name of the default branch (this checks out a new branch titled by branch_name).
        """
        return pulumi.get(self, "base_branch")

    @base_branch.setter
    def base_branch(self, value: str):
        pulumi.set(self, "base_branch", value)

    @property
    @pulumi.getter(name="branchName")
    def branch_name(self) -> str:
        """
        Name of the branch.
        """
        return pulumi.get(self, "branch_name")

    @branch_name.setter
    def branch_name(self, value: str):
        pulumi.set(self, "branch_name", value)

    @property
    @pulumi.getter(name="commitMessage")
    def commit_message(self) -> str:
        """
        Commit message used for the merge commit.
        """
        return pulumi.get(self, "commit_message")

    @commit_message.setter
    def commit_message(self, value: str):
        pulumi.set(self, "commit_message", value)

    @property
    @pulumi.getter(name="connectorRef")
    def connector_ref(self) -> str:
        """
        Identifier of the Harness Connector used for CRUD operations on the Entity.
        """
        return pulumi.get(self, "connector_ref")

    @connector_ref.setter
    def connector_ref(self, value: str):
        pulumi.set(self, "connector_ref", value)

    @property
    @pulumi.getter(name="filePath")
    def file_path(self) -> str:
        """
        File path of the Entity in the repository.
        """
        return pulumi.get(self, "file_path")

    @file_path.setter
    def file_path(self, value: str):
        pulumi.set(self, "file_path", value)

    @property
    @pulumi.getter(name="lastCommitId")
    def last_commit_id(self) -> str:
        """
        Last commit identifier (for Git Repositories other than Github). To be provided only when updating Pipeline.
        """
        return pulumi.get(self, "last_commit_id")

    @last_commit_id.setter
    def last_commit_id(self, value: str):
        pulumi.set(self, "last_commit_id", value)

    @property
    @pulumi.getter(name="lastObjectId")
    def last_object_id(self) -> str:
        """
        Last object identifier (for Github). To be provided only when updating Pipeline.
        """
        return pulumi.get(self, "last_object_id")

    @last_object_id.setter
    def last_object_id(self, value: str):
        pulumi.set(self, "last_object_id", value)

    @property
    @pulumi.getter(name="repoName")
    def repo_name(self) -> str:
        """
        Name of the repository.
        """
        return pulumi.get(self, "repo_name")

    @repo_name.setter
    def repo_name(self, value: str):
        pulumi.set(self, "repo_name", value)

    @property
    @pulumi.getter(name="storeType")
    def store_type(self) -> str:
        """
        Specifies whether the Entity is to be stored in Git or not. Possible values: INLINE, REMOTE.
        """
        return pulumi.get(self, "store_type")

    @store_type.setter
    def store_type(self, value: str):
        pulumi.set(self, "store_type", value)


@pulumi.input_type
class GetPolicySetPolicyArgs:
    def __init__(__self__, *,
                 identifier: str,
                 severity: str):
        """
        :param str identifier: Account Identifier of the account
        :param str severity: Policy failure response - 'warning' for continuation, 'error' for exit
        """
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Account Identifier of the account
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: str):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def severity(self) -> str:
        """
        Policy failure response - 'warning' for continuation, 'error' for exit
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: str):
        pulumi.set(self, "severity", value)


@pulumi.input_type
class GetTemplateGitDetailsArgs:
    def __init__(__self__, *,
                 last_commit_id: str,
                 last_object_id: str,
                 branch_name: Optional[str] = None,
                 file_path: Optional[str] = None,
                 file_url: Optional[str] = None,
                 repo_name: Optional[str] = None,
                 repo_url: Optional[str] = None):
        """
        :param str last_commit_id: Last commit identifier (for Git Repositories other than Github). To be provided only when updating Pipeline.
        :param str last_object_id: Last object identifier (for Github). To be provided only when updating Pipeline.
        :param str branch_name: Name of the branch.
        :param str file_path: File path of the Entity in the repository.
        :param str file_url: File url of the Entity in the repository.
        :param str repo_name: Name of the repository.
        :param str repo_url: Repo url of the Entity in the repository.
        """
        pulumi.set(__self__, "last_commit_id", last_commit_id)
        pulumi.set(__self__, "last_object_id", last_object_id)
        if branch_name is not None:
            pulumi.set(__self__, "branch_name", branch_name)
        if file_path is not None:
            pulumi.set(__self__, "file_path", file_path)
        if file_url is not None:
            pulumi.set(__self__, "file_url", file_url)
        if repo_name is not None:
            pulumi.set(__self__, "repo_name", repo_name)
        if repo_url is not None:
            pulumi.set(__self__, "repo_url", repo_url)

    @property
    @pulumi.getter(name="lastCommitId")
    def last_commit_id(self) -> str:
        """
        Last commit identifier (for Git Repositories other than Github). To be provided only when updating Pipeline.
        """
        return pulumi.get(self, "last_commit_id")

    @last_commit_id.setter
    def last_commit_id(self, value: str):
        pulumi.set(self, "last_commit_id", value)

    @property
    @pulumi.getter(name="lastObjectId")
    def last_object_id(self) -> str:
        """
        Last object identifier (for Github). To be provided only when updating Pipeline.
        """
        return pulumi.get(self, "last_object_id")

    @last_object_id.setter
    def last_object_id(self, value: str):
        pulumi.set(self, "last_object_id", value)

    @property
    @pulumi.getter(name="branchName")
    def branch_name(self) -> Optional[str]:
        """
        Name of the branch.
        """
        return pulumi.get(self, "branch_name")

    @branch_name.setter
    def branch_name(self, value: Optional[str]):
        pulumi.set(self, "branch_name", value)

    @property
    @pulumi.getter(name="filePath")
    def file_path(self) -> Optional[str]:
        """
        File path of the Entity in the repository.
        """
        return pulumi.get(self, "file_path")

    @file_path.setter
    def file_path(self, value: Optional[str]):
        pulumi.set(self, "file_path", value)

    @property
    @pulumi.getter(name="fileUrl")
    def file_url(self) -> Optional[str]:
        """
        File url of the Entity in the repository.
        """
        return pulumi.get(self, "file_url")

    @file_url.setter
    def file_url(self, value: Optional[str]):
        pulumi.set(self, "file_url", value)

    @property
    @pulumi.getter(name="repoName")
    def repo_name(self) -> Optional[str]:
        """
        Name of the repository.
        """
        return pulumi.get(self, "repo_name")

    @repo_name.setter
    def repo_name(self, value: Optional[str]):
        pulumi.set(self, "repo_name", value)

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> Optional[str]:
        """
        Repo url of the Entity in the repository.
        """
        return pulumi.get(self, "repo_url")

    @repo_url.setter
    def repo_url(self, value: Optional[str]):
        pulumi.set(self, "repo_url", value)


@pulumi.input_type
class GetUsergroupNotificationConfigArgs:
    def __init__(__self__, *,
                 group_email: str,
                 microsoft_teams_webhook_url: str,
                 pager_duty_key: str,
                 send_email_to_all_users: bool,
                 slack_webhook_url: str,
                 type: str):
        """
        :param str group_email: Group email.
        :param str microsoft_teams_webhook_url: Url of Microsoft teams webhook.
        :param str pager_duty_key: Pager duty key.
        :param bool send_email_to_all_users: Send email to all the group members.
        :param str slack_webhook_url: Url of slack webhook.
        :param str type: Can be one of EMAIL, SLACK, PAGERDUTY, MSTEAMS.
        """
        pulumi.set(__self__, "group_email", group_email)
        pulumi.set(__self__, "microsoft_teams_webhook_url", microsoft_teams_webhook_url)
        pulumi.set(__self__, "pager_duty_key", pager_duty_key)
        pulumi.set(__self__, "send_email_to_all_users", send_email_to_all_users)
        pulumi.set(__self__, "slack_webhook_url", slack_webhook_url)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="groupEmail")
    def group_email(self) -> str:
        """
        Group email.
        """
        return pulumi.get(self, "group_email")

    @group_email.setter
    def group_email(self, value: str):
        pulumi.set(self, "group_email", value)

    @property
    @pulumi.getter(name="microsoftTeamsWebhookUrl")
    def microsoft_teams_webhook_url(self) -> str:
        """
        Url of Microsoft teams webhook.
        """
        return pulumi.get(self, "microsoft_teams_webhook_url")

    @microsoft_teams_webhook_url.setter
    def microsoft_teams_webhook_url(self, value: str):
        pulumi.set(self, "microsoft_teams_webhook_url", value)

    @property
    @pulumi.getter(name="pagerDutyKey")
    def pager_duty_key(self) -> str:
        """
        Pager duty key.
        """
        return pulumi.get(self, "pager_duty_key")

    @pager_duty_key.setter
    def pager_duty_key(self, value: str):
        pulumi.set(self, "pager_duty_key", value)

    @property
    @pulumi.getter(name="sendEmailToAllUsers")
    def send_email_to_all_users(self) -> bool:
        """
        Send email to all the group members.
        """
        return pulumi.get(self, "send_email_to_all_users")

    @send_email_to_all_users.setter
    def send_email_to_all_users(self, value: bool):
        pulumi.set(self, "send_email_to_all_users", value)

    @property
    @pulumi.getter(name="slackWebhookUrl")
    def slack_webhook_url(self) -> str:
        """
        Url of slack webhook.
        """
        return pulumi.get(self, "slack_webhook_url")

    @slack_webhook_url.setter
    def slack_webhook_url(self, value: str):
        pulumi.set(self, "slack_webhook_url", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Can be one of EMAIL, SLACK, PAGERDUTY, MSTEAMS.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)


