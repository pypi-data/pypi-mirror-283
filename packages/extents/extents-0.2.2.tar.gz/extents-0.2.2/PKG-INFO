Metadata-Version: 2.1
Name: extents
Version: 0.2.2
Summary: An intervals library implemented in pure python, meant to be a drop-in replacment for the pyinterval library.
Author-email: Michael Frank <michaelfrank@swapp.ai>
Maintainer-email: Michael Frank <michaelfrank@swapp.ai>
License: MIT License
        
        Copyright (c) 2023 Michael Frank / SWAPP
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/swapp-ai/extents
Project-URL: Documentation, https://github.com/swapp-ai/extents/blob/main/README.md
Project-URL: Repository, https://github.com/swapp-ai/extents.git
Project-URL: Issues, https://github.com/swapp-ai/extents/issues
Keywords: interval,intervals
Classifier: Programming Language :: Python
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Provides-Extra: doc
Requires-Dist: jupyter; extra == "doc"
Requires-Dist: myst-nb; extra == "doc"
Requires-Dist: sphinx-autoapi; extra == "doc"
Requires-Dist: sphinx-rtd-theme; extra == "doc"
Requires-Dist: sphinx-markdown-builder; extra == "doc"
Provides-Extra: dev
Requires-Dist: pytest; extra == "dev"
Requires-Dist: pytest-cov; extra == "dev"
Requires-Dist: tomlkit; extra == "dev"
Requires-Dist: jupyter; extra == "dev"
Requires-Dist: myst-nb; extra == "dev"
Requires-Dist: sphinx-autoapi; extra == "dev"
Requires-Dist: sphinx-rtd-theme; extra == "dev"
Requires-Dist: sphinx-markdown-builder; extra == "dev"
Provides-Extra: tests
Requires-Dist: pytest; extra == "tests"

# Extents - An Intervals Library in Pure Python

`extents` is an intervals library implemented in pure python. 
It draws its inspiration from the [`PyInterval`](https://pyinterval.readthedocs.io/en/latest/) 
library ([github](https://github.com/taschini/pyinterval)).

This library is capable of representing open, closed and semi-open/closed intervals.
It also supports set operations on intervals (i.e., union, intersection and complement).


## Examples:

### Basic use cases:

Basic use of this library includes creating simple intervals, and manipulating them 
through set operations


```python
from extents import interval        # the interval class represents a collection of intervals

ival1 = interval([0, 1])            # the singleton interval set containing the closed interval [0, 1]
print(ival1)                        # Interval([0, 1])
print(~ival1)                       # Interval((-inf, 0), (1, inf)) -- the interval set of (-inf, 0) and (1, inf) -- 
                                    # which compose the complement of [0, 1]

ival2 = interval((4, 5))            # the singleton interval set containing the open interval (4, 5)
print(ival2)                        # Interval((4, 5))
print(~ival2)                       # Interval((-inf, 4], [5, inf)) -- the interval set of (-inf, 4] and [5, inf) --
                                    # which are the complement of (4, 5)]

ival3 = interval([0, 1], [5, 6])    # the interval set [0, 1] and [5, 6]
ival4 = interval([0, 3], [4, 5.5])  # the interval set [0, 3] and [4, 5.5]
print(ival3 | ival4)                # the interval set [0, 3] and [4, 6], which is the union of ival3 and ival4
print(ival3 & ival4)                # the interval set [0, 1] and [5, 5.5], which is the intersection of ival3 and ival4

ival5 = interval([0, 1], [0.5, 3])  # intervals are automatically union-ed during construction.
print(ival5)                        # resulting in the interval [0, 3]
```

The output of the commands above would be:

```
Interval([0, 1])
Interval((-inf, 0), (1, inf))
Interval((4, 5))
Interval((-inf, 4], [5, inf))
Interval([0, 3], [4, 6])
Interval([0, 1], [5, 5.5])
Interval([0, 3])
```

### Advanced use cases:

In order to construct a semi-open interval, you can import the `Component` and `ComponentType`,
and construct the internal interval components.

For example,
```python
from extents import interval, Component, ComponentType

ival = interval(Component(0, 1, ComponentType.HALF_CLOSED_LEFT),
                Component(5, 6, ComponentType.HALF_CLOSED_RIGHT)
                )
print(ival)  # construct the interval set: [0, 1), (5, 6]
```

### Additional Examples:

See the `tests/extents_test.py` file. 

## Installation:

From `github`:
```shell
$ pip install git+https://github.com/swapp-ai/extents
```

From source:
```shell
$ git clone https://github.com/swapp-ai/extents
$ cd extents
$ pip install .
```
