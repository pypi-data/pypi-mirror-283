[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "linearmoney"
dynamic = ["version"]
description = "Full multi-currency support for python."
authors = [{name = "GrammAcc", email = "grammaticallyacceptable@grammacc.dev"}]
maintainers = [{name = "GrammAcc", email = "grammaticallyacceptable@grammacc.dev"}]
license = "MIT"
readme = "README.md"
requires-python = ">=3.10"
keywords = ["money", "framework", "currency", "forex", "fintech"]
classifiers = ["Development Status :: 3 - Alpha"]

[project.urls]
homepage = "https://github.com/GrammAcc/linearmoney"
bug_tracker = "https://github.com/GrammAcc/linearmoney/issues"
documentation = "https://grammacc.github.io/linearmoney"
repository = "https://github.com/GrammAcc/linearmoney"

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-parametrize-cases",
    "pytest-lazy-fixtures",
]
sqlalchemy = ["sqlalchemy"]


[tool.hatch.version]
path = "src/linearmoney/__init__.py"


[tool.hatch.build]
ignore-vcs = true
include = ["*.json", "py.typed"]

# This is needed for hatchling to find the version in the package __init__.py file.
# See https://github.com/pypa/hatch/issues/981#issuecomment-1743631364
[tool.hatch.build.targets.sdist]
include = ["src"]

# This is needed for hatchling to find the version in the package __init__.py file.
# See https://github.com/pypa/hatch/issues/981#issuecomment-1743631364
[tool.hatch.build.targets.wheel]
packages = ["src/linearmoney"]


[tool.hatch.envs.default]
python = "3.12"

[tool.hatch.envs.default.scripts]
ci = [
    "hatch run test:suite",
    "hatch run -py=3.10,3.11 test:cov",
    "hatch run docs:test-prose",
    "hatch run docs:test-in-source",
    "hatch run types:check",
    "hatch run style:lintsrc",
    "hatch run style:linttests",
    "hatch run style:lintdocs",
]
all = [
    "hatch run style:format",
    "- hatch run test:suite",
    "- hatch run -py=3.10,3.11 test:cov",
    "- hatch run docs:test-prose",
    "- hatch run docs:test-in-source",
    "- hatch run types:check",
    "- hatch run style:lintsrc",
    "- hatch run style:linttests",
    "- hatch run style:lintdocs",
]
quicktest = "hatch run -py=3.10,3.11 test:suite {args}"

[tool.hatch.envs.py310]
python = "3.10"

[tool.hatch.envs.py311]
python = "3.11"


[tool.hatch.envs.test]
description = "Test Suite and Coverage Reporting"
dependencies = [
    "pytest",
    "pytest-cov",
    "pytest-parametrize-cases",
    "pytest-lazy-fixtures",
    "pytest-asyncio",
    "aiosqlite",
    "sqlalchemy[asyncio]",
]
features = ["sqlalchemy"]

[[tool.hatch.envs.test.matrix]]
python = ["3.10", "3.11", "3.12"]

[tool.hatch.envs.test.scripts]
suite = "pytest {args}"
cov = "pytest --cov-config=pyproject.toml --cov-report html:htmlcov --cov=linearmoney {args}"
prod = "- pip install --force-reinstall -i https://test.pypi.org/simple linearmoney && pytest"
ext = "pytest tests/ext {args}"


[tool.hatch.envs.types]
description = "Run static type checker"
dependencies = [
    "mypy",
    "sqlalchemy[mypy]",
]

[tool.hatch.envs.types.scripts]
check = "mypy -p linearmoney"


[tool.hatch.envs.style]
detached = true
python = "3.12"
description = "Autoformatting and Linting"
dependencies = [
    "black",
    "flake8",
]

[tool.hatch.envs.style.scripts]
format = "black ."
lintsrc = "flake8 src"
linttests = "flake8 tests"
lintdocs = "flake8 documentation"


[tool.hatch.envs.docs]
description = "Documentation generation and utilities"
dependencies = [
    "pdoc",
    "mkdocs",
    "mkdocs-material",
    "pytest",
]
features = ["sqlalchemy"]

[tool.hatch.envs.docs.scripts]
build = [
    "sh -c 'pygmentize -f html -a .language-python -S default > documentation/md/syntax-highlighting.css'",
    "pdoc 'linearmoney' --docformat='google' --output-directory='documentation/md/api_reference' --template-directory='documentation/pdoc_templates'",
    "mkdocs build -f documentation/mkdocs.yml",
]
serve = "python documentation/serve.py"
test-prose = "pytest --doctest-glob='*.md' README.md documentation"
test-in-source = "python documentation/run_doctests.py"

[tool.hatch.envs.cldr]
description = "CLDR data tooling"
detached = true

[tool.hatch.envs.cldr.scripts]
build = "python process_cldr_data.py"
test = "python tests/cldr/check_data.py"


[tool.pytest.ini_options]
log_file="testsuite.log"
log_file_level="DEBUG"
addopts = "--import-mode=importlib --show-capture=no --ignore=cldr-json"
asyncio_mode = "auto"


[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
omit = ["_utils.py"]

[tool.coverage.run]
source = ["linearmoney"]
