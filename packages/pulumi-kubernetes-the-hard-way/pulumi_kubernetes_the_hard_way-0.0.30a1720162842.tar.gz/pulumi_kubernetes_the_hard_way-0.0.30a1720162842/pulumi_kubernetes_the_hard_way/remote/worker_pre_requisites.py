# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
import pulumi_command

__all__ = ['WorkerPreRequisitesArgs', 'WorkerPreRequisites']

@pulumi.input_type
class WorkerPreRequisitesArgs:
    def __init__(__self__, *,
                 connection: pulumi.Input['pulumi_command.remote.ConnectionArgs'],
                 triggers: Optional[pulumi.Input[Sequence[Any]]] = None):
        """
        The set of arguments for constructing a WorkerPreRequisites resource.
        :param pulumi.Input['pulumi_command.remote.ConnectionArgs'] connection: The parameters with which to connect to the remote host.
        :param pulumi.Input[Sequence[Any]] triggers: Trigger recheck on changes to this input.
        """
        pulumi.set(__self__, "connection", connection)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)

    @property
    @pulumi.getter
    def connection(self) -> pulumi.Input['pulumi_command.remote.ConnectionArgs']:
        """
        The parameters with which to connect to the remote host.
        """
        return pulumi.get(self, "connection")

    @connection.setter
    def connection(self, value: pulumi.Input['pulumi_command.remote.ConnectionArgs']):
        pulumi.set(self, "connection", value)

    @property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input[Sequence[Any]]]:
        """
        Trigger recheck on changes to this input.
        """
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input[Sequence[Any]]]):
        pulumi.set(self, "triggers", value)


class WorkerPreRequisites(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connection: Optional[pulumi.Input[pulumi.InputType['pulumi_command.remote.ConnectionArgs']]] = None,
                 triggers: Optional[pulumi.Input[Sequence[Any]]] = None,
                 __props__=None):
        """
        Verifies that all worker node pre-requisites have been met.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['pulumi_command.remote.ConnectionArgs']] connection: The parameters with which to connect to the remote host.
        :param pulumi.Input[Sequence[Any]] triggers: Trigger recheck on changes to this input.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WorkerPreRequisitesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Verifies that all worker node pre-requisites have been met.

        :param str resource_name: The name of the resource.
        :param WorkerPreRequisitesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkerPreRequisitesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connection: Optional[pulumi.Input[pulumi.InputType['pulumi_command.remote.ConnectionArgs']]] = None,
                 triggers: Optional[pulumi.Input[Sequence[Any]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkerPreRequisitesArgs.__new__(WorkerPreRequisitesArgs)

            if connection is None and not opts.urn:
                raise TypeError("Missing required property 'connection'")
            __props__.__dict__["connection"] = connection
            __props__.__dict__["triggers"] = triggers
            __props__.__dict__["conntrack"] = None
            __props__.__dict__["ipset"] = None
            __props__.__dict__["socat"] = None
            __props__.__dict__["swap"] = None
        super(WorkerPreRequisites, __self__).__init__(
            'kubernetes-the-hard-way:remote:WorkerPreRequisites',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter
    def connection(self) -> pulumi.Output['pulumi_command.remote.outputs.Connection']:
        """
        The parameters with which to connect to the remote host.
        """
        return pulumi.get(self, "connection")

    @property
    @pulumi.getter
    def conntrack(self) -> pulumi.Output['pulumi_command.remote.Command']:
        """
        Verifies that the conntrack binary exists.
        """
        return pulumi.get(self, "conntrack")

    @property
    @pulumi.getter
    def ipset(self) -> pulumi.Output['pulumi_command.remote.Command']:
        """
        Verifies that the ipset binary exists.
        """
        return pulumi.get(self, "ipset")

    @property
    @pulumi.getter
    def socat(self) -> pulumi.Output['pulumi_command.remote.Command']:
        """
        Verifies that the socat binary exists.
        """
        return pulumi.get(self, "socat")

    @property
    @pulumi.getter
    def swap(self) -> pulumi.Output['pulumi_command.remote.Command']:
        """
        Verifies that swap is disabled.
        """
        return pulumi.get(self, "swap")

    @property
    @pulumi.getter
    def triggers(self) -> pulumi.Output[Optional[Sequence[Any]]]:
        """
        Trigger recheck on changes to this input.
        """
        return pulumi.get(self, "triggers")

