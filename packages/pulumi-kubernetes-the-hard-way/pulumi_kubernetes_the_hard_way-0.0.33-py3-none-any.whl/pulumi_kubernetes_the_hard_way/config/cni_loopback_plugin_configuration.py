# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = ['CniLoopbackPluginConfigurationArgs', 'CniLoopbackPluginConfiguration']

@pulumi.input_type
class CniLoopbackPluginConfigurationArgs:
    def __init__(__self__, *,
                 cni_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CniLoopbackPluginConfiguration resource.
        :param pulumi.Input[str] cni_version: CNI version.
        :param pulumi.Input[str] name: CNI plugin name.
        :param pulumi.Input[str] type: CNI plugin type.
        """
        if cni_version is not None:
            pulumi.set(__self__, "cni_version", cni_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="cniVersion")
    def cni_version(self) -> Optional[pulumi.Input[str]]:
        """
        CNI version.
        """
        return pulumi.get(self, "cni_version")

    @cni_version.setter
    def cni_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cni_version", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        CNI plugin name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        CNI plugin type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class CniLoopbackPluginConfiguration(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cni_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Get the `loopback` configuration.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cni_version: CNI version.
        :param pulumi.Input[str] name: CNI plugin name.
        :param pulumi.Input[str] type: CNI plugin type.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[CniLoopbackPluginConfigurationArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Get the `loopback` configuration.

        :param str resource_name: The name of the resource.
        :param CniLoopbackPluginConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CniLoopbackPluginConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cni_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CniLoopbackPluginConfigurationArgs.__new__(CniLoopbackPluginConfigurationArgs)

            __props__.__dict__["cni_version"] = cni_version
            __props__.__dict__["name"] = name
            __props__.__dict__["type"] = type
            __props__.__dict__["result"] = None
            __props__.__dict__["yaml"] = None
        super(CniLoopbackPluginConfiguration, __self__).__init__(
            'kubernetes-the-hard-way:config:CniLoopbackPluginConfiguration',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter
    def result(self) -> pulumi.Output['outputs.CniLoopbackPluginConfiguration']:
        return pulumi.get(self, "result")

    @property
    @pulumi.getter
    def yaml(self) -> pulumi.Output[str]:
        """
        The yaml representation of the manifest.
        """
        return pulumi.get(self, "yaml")

