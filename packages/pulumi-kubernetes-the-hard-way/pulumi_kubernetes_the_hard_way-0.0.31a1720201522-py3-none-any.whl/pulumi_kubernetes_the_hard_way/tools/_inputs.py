# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'ChmodOptsArgs',
    'EtcdctlOptsArgs',
    'HostnamectlOptsArgs',
    'MkdirOptsArgs',
    'MktempOptsArgs',
    'MvOptsArgs',
    'RmOptsArgs',
    'SedOptsArgs',
    'SystemctlOptsArgs',
    'TarOptsArgs',
    'TeeOptsArgs',
    'WgetOptsArgs',
]

@pulumi.input_type
class ChmodOptsArgs:
    def __init__(__self__, *,
                 files: pulumi.Input[Sequence[pulumi.Input[str]]],
                 mode: pulumi.Input[str],
                 changes: Optional[pulumi.Input[bool]] = None,
                 help: Optional[pulumi.Input[bool]] = None,
                 no_preserve_root: Optional[pulumi.Input[bool]] = None,
                 preserve_root: Optional[pulumi.Input[bool]] = None,
                 quiet: Optional[pulumi.Input[bool]] = None,
                 recursive: Optional[pulumi.Input[bool]] = None,
                 reference: Optional[pulumi.Input[str]] = None,
                 silent: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[bool]] = None):
        """
        Abstraction over the `chmod` utility on a remote system.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] files: Corresponds to the [FILE] argument.
        :param pulumi.Input[str] mode: Modes may be absolute or symbolic. An absolute mode is an octal number...
        :param pulumi.Input[bool] changes: Like verbose but report only when a change is made.
        :param pulumi.Input[bool] help: Display help and exit.
        :param pulumi.Input[bool] no_preserve_root: Do not treat '/' specially (the default).
        :param pulumi.Input[bool] preserve_root: Fail to operate recursively on '/'.
        :param pulumi.Input[bool] quiet: Suppress most error messages. Same as `silent`.
        :param pulumi.Input[bool] recursive: Change files and directories recursively.
        :param pulumi.Input[str] reference: Use RFILE's mode instead of specifying MODE values. RFILE is always dereferenced if a symbolic link.
        :param pulumi.Input[bool] silent: Suppress most error messages. Same as `quiet`.
        :param pulumi.Input[bool] version: Output version information and exit.
        """
        pulumi.set(__self__, "files", files)
        pulumi.set(__self__, "mode", mode)
        if changes is not None:
            pulumi.set(__self__, "changes", changes)
        if help is not None:
            pulumi.set(__self__, "help", help)
        if no_preserve_root is not None:
            pulumi.set(__self__, "no_preserve_root", no_preserve_root)
        if preserve_root is not None:
            pulumi.set(__self__, "preserve_root", preserve_root)
        if quiet is not None:
            pulumi.set(__self__, "quiet", quiet)
        if recursive is not None:
            pulumi.set(__self__, "recursive", recursive)
        if reference is not None:
            pulumi.set(__self__, "reference", reference)
        if silent is not None:
            pulumi.set(__self__, "silent", silent)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def files(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Corresponds to the [FILE] argument.
        """
        return pulumi.get(self, "files")

    @files.setter
    def files(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "files", value)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        """
        Modes may be absolute or symbolic. An absolute mode is an octal number...
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def changes(self) -> Optional[pulumi.Input[bool]]:
        """
        Like verbose but report only when a change is made.
        """
        return pulumi.get(self, "changes")

    @changes.setter
    def changes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "changes", value)

    @property
    @pulumi.getter
    def help(self) -> Optional[pulumi.Input[bool]]:
        """
        Display help and exit.
        """
        return pulumi.get(self, "help")

    @help.setter
    def help(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "help", value)

    @property
    @pulumi.getter(name="noPreserveRoot")
    def no_preserve_root(self) -> Optional[pulumi.Input[bool]]:
        """
        Do not treat '/' specially (the default).
        """
        return pulumi.get(self, "no_preserve_root")

    @no_preserve_root.setter
    def no_preserve_root(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_preserve_root", value)

    @property
    @pulumi.getter(name="preserveRoot")
    def preserve_root(self) -> Optional[pulumi.Input[bool]]:
        """
        Fail to operate recursively on '/'.
        """
        return pulumi.get(self, "preserve_root")

    @preserve_root.setter
    def preserve_root(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "preserve_root", value)

    @property
    @pulumi.getter
    def quiet(self) -> Optional[pulumi.Input[bool]]:
        """
        Suppress most error messages. Same as `silent`.
        """
        return pulumi.get(self, "quiet")

    @quiet.setter
    def quiet(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "quiet", value)

    @property
    @pulumi.getter
    def recursive(self) -> Optional[pulumi.Input[bool]]:
        """
        Change files and directories recursively.
        """
        return pulumi.get(self, "recursive")

    @recursive.setter
    def recursive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recursive", value)

    @property
    @pulumi.getter
    def reference(self) -> Optional[pulumi.Input[str]]:
        """
        Use RFILE's mode instead of specifying MODE values. RFILE is always dereferenced if a symbolic link.
        """
        return pulumi.get(self, "reference")

    @reference.setter
    def reference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reference", value)

    @property
    @pulumi.getter
    def silent(self) -> Optional[pulumi.Input[bool]]:
        """
        Suppress most error messages. Same as `quiet`.
        """
        return pulumi.get(self, "silent")

    @silent.setter
    def silent(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "silent", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[bool]]:
        """
        Output version information and exit.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class EtcdctlOptsArgs:
    def __init__(__self__, *,
                 commands: pulumi.Input['EtcdctlCommand'],
                 ca_cert: Optional[pulumi.Input[str]] = None,
                 cert: Optional[pulumi.Input[str]] = None,
                 endpoints: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None):
        """
        Abstraction over the `etcdctl` utility on a remote system.
        :param pulumi.Input['EtcdctlCommand'] commands: TODO
        :param pulumi.Input[str] ca_cert: TODO
        :param pulumi.Input[str] cert: TODO
        :param pulumi.Input[str] endpoints: TODO
        :param pulumi.Input[str] key: TODO
        """
        pulumi.set(__self__, "commands", commands)
        if ca_cert is not None:
            pulumi.set(__self__, "ca_cert", ca_cert)
        if cert is not None:
            pulumi.set(__self__, "cert", cert)
        if endpoints is not None:
            pulumi.set(__self__, "endpoints", endpoints)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def commands(self) -> pulumi.Input['EtcdctlCommand']:
        """
        TODO
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: pulumi.Input['EtcdctlCommand']):
        pulumi.set(self, "commands", value)

    @property
    @pulumi.getter(name="caCert")
    def ca_cert(self) -> Optional[pulumi.Input[str]]:
        """
        TODO
        """
        return pulumi.get(self, "ca_cert")

    @ca_cert.setter
    def ca_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_cert", value)

    @property
    @pulumi.getter
    def cert(self) -> Optional[pulumi.Input[str]]:
        """
        TODO
        """
        return pulumi.get(self, "cert")

    @cert.setter
    def cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert", value)

    @property
    @pulumi.getter
    def endpoints(self) -> Optional[pulumi.Input[str]]:
        """
        TODO
        """
        return pulumi.get(self, "endpoints")

    @endpoints.setter
    def endpoints(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoints", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        TODO
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class HostnamectlOptsArgs:
    def __init__(__self__, *,
                 command: pulumi.Input['HostnamectlCommand'],
                 arg: Optional[pulumi.Input[str]] = None,
                 help: Optional[pulumi.Input[bool]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 json: Optional[pulumi.Input['HostnamectlJsonMode']] = None,
                 machine: Optional[pulumi.Input[str]] = None,
                 no_ask_password: Optional[pulumi.Input[bool]] = None,
                 pretty: Optional[pulumi.Input[bool]] = None,
                 static: Optional[pulumi.Input[bool]] = None,
                 transient: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[bool]] = None):
        """
        Abstraction over the `hostnamectl` utility on a remote system.
        :param pulumi.Input['HostnamectlCommand'] command: Corresponds to the {COMMAND} argument.
        :param pulumi.Input[str] arg: The argument for the specified `command`.
        :param pulumi.Input[bool] help: Print a short help text and exit.
        :param pulumi.Input[str] host: Execute the operation remotely. Specify a hostname, or a username and hostname separated by '@', to connect to.
        :param pulumi.Input['HostnamectlJsonMode'] json: Shows output formatted as JSON.
        :param pulumi.Input[str] machine: Execute operation on a local container. Specify a container name to connect to, optionally prefixed by a user name to connect as and a separating '@' character.
        :param pulumi.Input[bool] no_ask_password: Do not query the user for authentication for privileged operations.
        :param pulumi.Input[bool] pretty: If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `static` and `transient`.
        :param pulumi.Input[bool] static: If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `transient` and `pretty`.
        :param pulumi.Input[bool] transient: If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `static` and `pretty`.
        :param pulumi.Input[bool] version: Print a short version string and exit.
        """
        pulumi.set(__self__, "command", command)
        if arg is not None:
            pulumi.set(__self__, "arg", arg)
        if help is not None:
            pulumi.set(__self__, "help", help)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if json is not None:
            pulumi.set(__self__, "json", json)
        if machine is not None:
            pulumi.set(__self__, "machine", machine)
        if no_ask_password is not None:
            pulumi.set(__self__, "no_ask_password", no_ask_password)
        if pretty is not None:
            pulumi.set(__self__, "pretty", pretty)
        if static is not None:
            pulumi.set(__self__, "static", static)
        if transient is not None:
            pulumi.set(__self__, "transient", transient)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def command(self) -> pulumi.Input['HostnamectlCommand']:
        """
        Corresponds to the {COMMAND} argument.
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: pulumi.Input['HostnamectlCommand']):
        pulumi.set(self, "command", value)

    @property
    @pulumi.getter
    def arg(self) -> Optional[pulumi.Input[str]]:
        """
        The argument for the specified `command`.
        """
        return pulumi.get(self, "arg")

    @arg.setter
    def arg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arg", value)

    @property
    @pulumi.getter
    def help(self) -> Optional[pulumi.Input[bool]]:
        """
        Print a short help text and exit.
        """
        return pulumi.get(self, "help")

    @help.setter
    def help(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "help", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Execute the operation remotely. Specify a hostname, or a username and hostname separated by '@', to connect to.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def json(self) -> Optional[pulumi.Input['HostnamectlJsonMode']]:
        """
        Shows output formatted as JSON.
        """
        return pulumi.get(self, "json")

    @json.setter
    def json(self, value: Optional[pulumi.Input['HostnamectlJsonMode']]):
        pulumi.set(self, "json", value)

    @property
    @pulumi.getter
    def machine(self) -> Optional[pulumi.Input[str]]:
        """
        Execute operation on a local container. Specify a container name to connect to, optionally prefixed by a user name to connect as and a separating '@' character.
        """
        return pulumi.get(self, "machine")

    @machine.setter
    def machine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine", value)

    @property
    @pulumi.getter(name="noAskPassword")
    def no_ask_password(self) -> Optional[pulumi.Input[bool]]:
        """
        Do not query the user for authentication for privileged operations.
        """
        return pulumi.get(self, "no_ask_password")

    @no_ask_password.setter
    def no_ask_password(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_ask_password", value)

    @property
    @pulumi.getter
    def pretty(self) -> Optional[pulumi.Input[bool]]:
        """
        If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `static` and `transient`.
        """
        return pulumi.get(self, "pretty")

    @pretty.setter
    def pretty(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pretty", value)

    @property
    @pulumi.getter
    def static(self) -> Optional[pulumi.Input[bool]]:
        """
        If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `transient` and `pretty`.
        """
        return pulumi.get(self, "static")

    @static.setter
    def static(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "static", value)

    @property
    @pulumi.getter
    def transient(self) -> Optional[pulumi.Input[bool]]:
        """
        If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `static` and `pretty`.
        """
        return pulumi.get(self, "transient")

    @transient.setter
    def transient(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "transient", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[bool]]:
        """
        Print a short version string and exit.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class MkdirOptsArgs:
    def __init__(__self__, *,
                 directory: pulumi.Input[str],
                 parents: Optional[pulumi.Input[bool]] = None,
                 remove_on_delete: Optional[pulumi.Input[bool]] = None):
        """
        Abstraction over the `mkdir` utility on a remote system.
        :param pulumi.Input[str] directory: The fully qualified path of the directory on the remote system.
        :param pulumi.Input[bool] parents: Corresponds to the `--parents` option.
        :param pulumi.Input[bool] remove_on_delete: Remove the created directory when the `Mkdir` resource is deleted or updated.
        """
        pulumi.set(__self__, "directory", directory)
        if parents is not None:
            pulumi.set(__self__, "parents", parents)
        if remove_on_delete is not None:
            pulumi.set(__self__, "remove_on_delete", remove_on_delete)

    @property
    @pulumi.getter
    def directory(self) -> pulumi.Input[str]:
        """
        The fully qualified path of the directory on the remote system.
        """
        return pulumi.get(self, "directory")

    @directory.setter
    def directory(self, value: pulumi.Input[str]):
        pulumi.set(self, "directory", value)

    @property
    @pulumi.getter
    def parents(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--parents` option.
        """
        return pulumi.get(self, "parents")

    @parents.setter
    def parents(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "parents", value)

    @property
    @pulumi.getter(name="removeOnDelete")
    def remove_on_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Remove the created directory when the `Mkdir` resource is deleted or updated.
        """
        return pulumi.get(self, "remove_on_delete")

    @remove_on_delete.setter
    def remove_on_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "remove_on_delete", value)


@pulumi.input_type
class MktempOptsArgs:
    def __init__(__self__, *,
                 directory: Optional[pulumi.Input[bool]] = None,
                 dry_run: Optional[pulumi.Input[bool]] = None,
                 quiet: Optional[pulumi.Input[bool]] = None,
                 suffix: Optional[pulumi.Input[str]] = None,
                 template: Optional[pulumi.Input[str]] = None,
                 tmpdir: Optional[pulumi.Input[str]] = None):
        """
        Abstraction over the `mktemp` utility on a remote system.
        :param pulumi.Input[bool] directory: Corresponds to the `--directory` option.
        :param pulumi.Input[bool] dry_run: Corresponds to the `--dry-run` option.
        :param pulumi.Input[bool] quiet: Corresponds to the `--quiet` option.
        :param pulumi.Input[str] suffix: Corresponds to the `--suffix` option.
        :param pulumi.Input[str] template: Corresponds to the [TEMPLATE] argument.
        :param pulumi.Input[str] tmpdir: Corresponds to the `--tmpdir` option.
        """
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if dry_run is not None:
            pulumi.set(__self__, "dry_run", dry_run)
        if quiet is not None:
            pulumi.set(__self__, "quiet", quiet)
        if suffix is not None:
            pulumi.set(__self__, "suffix", suffix)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if tmpdir is not None:
            pulumi.set(__self__, "tmpdir", tmpdir)

    @property
    @pulumi.getter
    def directory(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--directory` option.
        """
        return pulumi.get(self, "directory")

    @directory.setter
    def directory(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "directory", value)

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--dry-run` option.
        """
        return pulumi.get(self, "dry_run")

    @dry_run.setter
    def dry_run(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dry_run", value)

    @property
    @pulumi.getter
    def quiet(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--quiet` option.
        """
        return pulumi.get(self, "quiet")

    @quiet.setter
    def quiet(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "quiet", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        """
        Corresponds to the `--suffix` option.
        """
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)

    @property
    @pulumi.getter
    def template(self) -> Optional[pulumi.Input[str]]:
        """
        Corresponds to the [TEMPLATE] argument.
        """
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template", value)

    @property
    @pulumi.getter
    def tmpdir(self) -> Optional[pulumi.Input[str]]:
        """
        Corresponds to the `--tmpdir` option.
        """
        return pulumi.get(self, "tmpdir")

    @tmpdir.setter
    def tmpdir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tmpdir", value)


@pulumi.input_type
class MvOptsArgs:
    def __init__(__self__, *,
                 source: pulumi.Input[Sequence[pulumi.Input[str]]],
                 backup: Optional[bool] = None,
                 context: Optional[pulumi.Input[bool]] = None,
                 control: Optional[pulumi.Input[bool]] = None,
                 dest: Optional[pulumi.Input[str]] = None,
                 directory: Optional[pulumi.Input[str]] = None,
                 force: Optional[pulumi.Input[bool]] = None,
                 no_clobber: Optional[pulumi.Input[bool]] = None,
                 no_target_directory: Optional[pulumi.Input[bool]] = None,
                 strip_trailing_slashes: Optional[pulumi.Input[bool]] = None,
                 suffix: Optional[pulumi.Input[str]] = None,
                 target_directory: Optional[pulumi.Input[bool]] = None,
                 update: Optional[pulumi.Input[bool]] = None,
                 verbose: Optional[pulumi.Input[bool]] = None):
        """
        Abstraction over the `mv` utility on a remote system.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] source: Corresponds to the [SOURCE] argument.
        :param bool backup: Corresponds to the `-b` and `--backup` options depending on whether [CONTROL] is supplied.
        :param pulumi.Input[bool] context: Corresponds to the `--context` option.
        :param pulumi.Input[bool] control: Corresponds to the [CONTROL] argument for the `--backup` option.
        :param pulumi.Input[str] dest: Corresponds to the [DEST] argument.
        :param pulumi.Input[str] directory: Corresponds to the [DIRECTORY] argument.
        :param pulumi.Input[bool] force: Corresponds to the `--force` option.
        :param pulumi.Input[bool] no_clobber: Corresponds to the `--no-clobber` option.
        :param pulumi.Input[bool] no_target_directory: Corresponds to the `--no-target-directory` option.
        :param pulumi.Input[bool] strip_trailing_slashes: Corresponds to the `--strip-trailing-slashes` option.
        :param pulumi.Input[str] suffix: Corresponds to the `--suffix` option.
        :param pulumi.Input[bool] target_directory: Corresponds to the `--target-directory` option.
        :param pulumi.Input[bool] update: Corresponds to the `--update` option.
        :param pulumi.Input[bool] verbose: Corresponds to the `--verbose` option.
        """
        pulumi.set(__self__, "source", source)
        if backup is not None:
            pulumi.set(__self__, "backup", backup)
        if context is not None:
            pulumi.set(__self__, "context", context)
        if control is not None:
            pulumi.set(__self__, "control", control)
        if dest is not None:
            pulumi.set(__self__, "dest", dest)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if force is not None:
            pulumi.set(__self__, "force", force)
        if no_clobber is not None:
            pulumi.set(__self__, "no_clobber", no_clobber)
        if no_target_directory is not None:
            pulumi.set(__self__, "no_target_directory", no_target_directory)
        if strip_trailing_slashes is not None:
            pulumi.set(__self__, "strip_trailing_slashes", strip_trailing_slashes)
        if suffix is not None:
            pulumi.set(__self__, "suffix", suffix)
        if target_directory is not None:
            pulumi.set(__self__, "target_directory", target_directory)
        if update is not None:
            pulumi.set(__self__, "update", update)
        if verbose is not None:
            pulumi.set(__self__, "verbose", verbose)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Corresponds to the [SOURCE] argument.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def backup(self) -> Optional[bool]:
        """
        Corresponds to the `-b` and `--backup` options depending on whether [CONTROL] is supplied.
        """
        return pulumi.get(self, "backup")

    @backup.setter
    def backup(self, value: Optional[bool]):
        pulumi.set(self, "backup", value)

    @property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--context` option.
        """
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def control(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the [CONTROL] argument for the `--backup` option.
        """
        return pulumi.get(self, "control")

    @control.setter
    def control(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "control", value)

    @property
    @pulumi.getter
    def dest(self) -> Optional[pulumi.Input[str]]:
        """
        Corresponds to the [DEST] argument.
        """
        return pulumi.get(self, "dest")

    @dest.setter
    def dest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dest", value)

    @property
    @pulumi.getter
    def directory(self) -> Optional[pulumi.Input[str]]:
        """
        Corresponds to the [DIRECTORY] argument.
        """
        return pulumi.get(self, "directory")

    @directory.setter
    def directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "directory", value)

    @property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--force` option.
        """
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force", value)

    @property
    @pulumi.getter(name="noClobber")
    def no_clobber(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--no-clobber` option.
        """
        return pulumi.get(self, "no_clobber")

    @no_clobber.setter
    def no_clobber(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_clobber", value)

    @property
    @pulumi.getter(name="noTargetDirectory")
    def no_target_directory(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--no-target-directory` option.
        """
        return pulumi.get(self, "no_target_directory")

    @no_target_directory.setter
    def no_target_directory(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_target_directory", value)

    @property
    @pulumi.getter(name="stripTrailingSlashes")
    def strip_trailing_slashes(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--strip-trailing-slashes` option.
        """
        return pulumi.get(self, "strip_trailing_slashes")

    @strip_trailing_slashes.setter
    def strip_trailing_slashes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "strip_trailing_slashes", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        """
        Corresponds to the `--suffix` option.
        """
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)

    @property
    @pulumi.getter(name="targetDirectory")
    def target_directory(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--target-directory` option.
        """
        return pulumi.get(self, "target_directory")

    @target_directory.setter
    def target_directory(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "target_directory", value)

    @property
    @pulumi.getter
    def update(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--update` option.
        """
        return pulumi.get(self, "update")

    @update.setter
    def update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "update", value)

    @property
    @pulumi.getter
    def verbose(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--verbose` option.
        """
        return pulumi.get(self, "verbose")

    @verbose.setter
    def verbose(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verbose", value)


@pulumi.input_type
class RmOptsArgs:
    def __init__(__self__, *,
                 files: pulumi.Input[Sequence[pulumi.Input[str]]],
                 dir: Optional[pulumi.Input[bool]] = None,
                 force: Optional[pulumi.Input[bool]] = None,
                 on_delete: Optional[pulumi.Input[bool]] = None,
                 recursive: Optional[pulumi.Input[bool]] = None,
                 verbose: Optional[pulumi.Input[bool]] = None):
        """
        Abstraction over the `rm` utility on a remote system.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] files: Corresponds to the [FILE] argument.
        :param pulumi.Input[bool] dir: Corresponds to the `--dir` option.
        :param pulumi.Input[bool] force: Corresponds to the `--force` option.
        :param pulumi.Input[bool] on_delete: Whether rm should be run when the resource is created or deleted.
        :param pulumi.Input[bool] recursive: Corresponds to the `--recursive` option.
        :param pulumi.Input[bool] verbose: Corresponds to the `--verbose` option.
        """
        pulumi.set(__self__, "files", files)
        if dir is not None:
            pulumi.set(__self__, "dir", dir)
        if force is not None:
            pulumi.set(__self__, "force", force)
        if on_delete is not None:
            pulumi.set(__self__, "on_delete", on_delete)
        if recursive is not None:
            pulumi.set(__self__, "recursive", recursive)
        if verbose is not None:
            pulumi.set(__self__, "verbose", verbose)

    @property
    @pulumi.getter
    def files(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Corresponds to the [FILE] argument.
        """
        return pulumi.get(self, "files")

    @files.setter
    def files(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "files", value)

    @property
    @pulumi.getter
    def dir(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--dir` option.
        """
        return pulumi.get(self, "dir")

    @dir.setter
    def dir(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dir", value)

    @property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--force` option.
        """
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force", value)

    @property
    @pulumi.getter(name="onDelete")
    def on_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether rm should be run when the resource is created or deleted.
        """
        return pulumi.get(self, "on_delete")

    @on_delete.setter
    def on_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_delete", value)

    @property
    @pulumi.getter
    def recursive(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--recursive` option.
        """
        return pulumi.get(self, "recursive")

    @recursive.setter
    def recursive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recursive", value)

    @property
    @pulumi.getter
    def verbose(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--verbose` option.
        """
        return pulumi.get(self, "verbose")

    @verbose.setter
    def verbose(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verbose", value)


@pulumi.input_type
class SedOptsArgs:
    def __init__(__self__, *,
                 debug: Optional[pulumi.Input[bool]] = None,
                 expressions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 follow_symlinks: Optional[pulumi.Input[bool]] = None,
                 help: Optional[pulumi.Input[bool]] = None,
                 in_place: Optional[pulumi.Input[str]] = None,
                 input_files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 line_length: Optional[pulumi.Input[int]] = None,
                 null_data: Optional[pulumi.Input[bool]] = None,
                 posix: Optional[pulumi.Input[bool]] = None,
                 quiet: Optional[pulumi.Input[bool]] = None,
                 regexp_extended: Optional[pulumi.Input[bool]] = None,
                 sandbox: Optional[pulumi.Input[bool]] = None,
                 script: Optional[pulumi.Input[str]] = None,
                 separate: Optional[pulumi.Input[bool]] = None,
                 silent: Optional[pulumi.Input[bool]] = None,
                 unbuffered: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[bool]] = None):
        """
        Abstraction over the `sed` utility on a remote system.
        :param pulumi.Input[bool] debug: annotate program execution.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] expressions: add the script to the commands to be executed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] files: add the contents of script-file to the commands to be executed.
        :param pulumi.Input[bool] follow_symlinks: follow symlinks when processing in place
        :param pulumi.Input[bool] help: display this help and exit.
        :param pulumi.Input[str] in_place: edit files in place (makes backup if SUFFIX supplied)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] input_files: corresponds to the [input-file]... argument(s).
        :param pulumi.Input[int] line_length: specify the desired line-wrap length for the `l' command
        :param pulumi.Input[bool] null_data: separate lines by NUL characters
        :param pulumi.Input[bool] posix: disable all GNU extensions.
        :param pulumi.Input[bool] quiet: suppress automatic printing of pattern space. Same as `silent`.
        :param pulumi.Input[bool] regexp_extended: use extended regular expressions in the script (for portability use POSIX -E).
        :param pulumi.Input[bool] sandbox: operate in sandbox mode (disable e/r/w commands).
        :param pulumi.Input[str] script: script only if no other script.
        :param pulumi.Input[bool] separate: consider files as separate rather than as a single, continuous long stream.
        :param pulumi.Input[bool] silent: suppress automatic printing of pattern space. Same as `quiet`.
        :param pulumi.Input[bool] unbuffered: load minimal amounts of data from the input files and flush the output buffers more often.
        :param pulumi.Input[bool] version: output version information and exit.
        """
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if expressions is not None:
            pulumi.set(__self__, "expressions", expressions)
        if files is not None:
            pulumi.set(__self__, "files", files)
        if follow_symlinks is not None:
            pulumi.set(__self__, "follow_symlinks", follow_symlinks)
        if help is not None:
            pulumi.set(__self__, "help", help)
        if in_place is not None:
            pulumi.set(__self__, "in_place", in_place)
        if input_files is not None:
            pulumi.set(__self__, "input_files", input_files)
        if line_length is not None:
            pulumi.set(__self__, "line_length", line_length)
        if null_data is not None:
            pulumi.set(__self__, "null_data", null_data)
        if posix is not None:
            pulumi.set(__self__, "posix", posix)
        if quiet is not None:
            pulumi.set(__self__, "quiet", quiet)
        if regexp_extended is not None:
            pulumi.set(__self__, "regexp_extended", regexp_extended)
        if sandbox is not None:
            pulumi.set(__self__, "sandbox", sandbox)
        if script is not None:
            pulumi.set(__self__, "script", script)
        if separate is not None:
            pulumi.set(__self__, "separate", separate)
        if silent is not None:
            pulumi.set(__self__, "silent", silent)
        if unbuffered is not None:
            pulumi.set(__self__, "unbuffered", unbuffered)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        annotate program execution.
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        add the script to the commands to be executed.
        """
        return pulumi.get(self, "expressions")

    @expressions.setter
    def expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "expressions", value)

    @property
    @pulumi.getter
    def files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        add the contents of script-file to the commands to be executed.
        """
        return pulumi.get(self, "files")

    @files.setter
    def files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "files", value)

    @property
    @pulumi.getter(name="followSymlinks")
    def follow_symlinks(self) -> Optional[pulumi.Input[bool]]:
        """
        follow symlinks when processing in place
        """
        return pulumi.get(self, "follow_symlinks")

    @follow_symlinks.setter
    def follow_symlinks(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "follow_symlinks", value)

    @property
    @pulumi.getter
    def help(self) -> Optional[pulumi.Input[bool]]:
        """
        display this help and exit.
        """
        return pulumi.get(self, "help")

    @help.setter
    def help(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "help", value)

    @property
    @pulumi.getter(name="inPlace")
    def in_place(self) -> Optional[pulumi.Input[str]]:
        """
        edit files in place (makes backup if SUFFIX supplied)
        """
        return pulumi.get(self, "in_place")

    @in_place.setter
    def in_place(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "in_place", value)

    @property
    @pulumi.getter(name="inputFiles")
    def input_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        corresponds to the [input-file]... argument(s).
        """
        return pulumi.get(self, "input_files")

    @input_files.setter
    def input_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "input_files", value)

    @property
    @pulumi.getter(name="lineLength")
    def line_length(self) -> Optional[pulumi.Input[int]]:
        """
        specify the desired line-wrap length for the `l' command
        """
        return pulumi.get(self, "line_length")

    @line_length.setter
    def line_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "line_length", value)

    @property
    @pulumi.getter(name="nullData")
    def null_data(self) -> Optional[pulumi.Input[bool]]:
        """
        separate lines by NUL characters
        """
        return pulumi.get(self, "null_data")

    @null_data.setter
    def null_data(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "null_data", value)

    @property
    @pulumi.getter
    def posix(self) -> Optional[pulumi.Input[bool]]:
        """
        disable all GNU extensions.
        """
        return pulumi.get(self, "posix")

    @posix.setter
    def posix(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "posix", value)

    @property
    @pulumi.getter
    def quiet(self) -> Optional[pulumi.Input[bool]]:
        """
        suppress automatic printing of pattern space. Same as `silent`.
        """
        return pulumi.get(self, "quiet")

    @quiet.setter
    def quiet(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "quiet", value)

    @property
    @pulumi.getter(name="regexpExtended")
    def regexp_extended(self) -> Optional[pulumi.Input[bool]]:
        """
        use extended regular expressions in the script (for portability use POSIX -E).
        """
        return pulumi.get(self, "regexp_extended")

    @regexp_extended.setter
    def regexp_extended(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "regexp_extended", value)

    @property
    @pulumi.getter
    def sandbox(self) -> Optional[pulumi.Input[bool]]:
        """
        operate in sandbox mode (disable e/r/w commands).
        """
        return pulumi.get(self, "sandbox")

    @sandbox.setter
    def sandbox(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sandbox", value)

    @property
    @pulumi.getter
    def script(self) -> Optional[pulumi.Input[str]]:
        """
        script only if no other script.
        """
        return pulumi.get(self, "script")

    @script.setter
    def script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script", value)

    @property
    @pulumi.getter
    def separate(self) -> Optional[pulumi.Input[bool]]:
        """
        consider files as separate rather than as a single, continuous long stream.
        """
        return pulumi.get(self, "separate")

    @separate.setter
    def separate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "separate", value)

    @property
    @pulumi.getter
    def silent(self) -> Optional[pulumi.Input[bool]]:
        """
        suppress automatic printing of pattern space. Same as `quiet`.
        """
        return pulumi.get(self, "silent")

    @silent.setter
    def silent(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "silent", value)

    @property
    @pulumi.getter
    def unbuffered(self) -> Optional[pulumi.Input[bool]]:
        """
        load minimal amounts of data from the input files and flush the output buffers more often.
        """
        return pulumi.get(self, "unbuffered")

    @unbuffered.setter
    def unbuffered(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "unbuffered", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[bool]]:
        """
        output version information and exit.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class SystemctlOptsArgs:
    def __init__(__self__, *,
                 command: 'SystemctlCommand',
                 pattern: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        Abstraction over the `systemctl` utility on a remote system.
        :param 'SystemctlCommand' command: Corresponds to the COMMAND argument.
        :param pulumi.Input[str] pattern: Corresponds to the [PATTERN] argument
        :param pulumi.Input[str] unit: Corresponds to the [UNIT...] argument.
        """
        pulumi.set(__self__, "command", command)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def command(self) -> 'SystemctlCommand':
        """
        Corresponds to the COMMAND argument.
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: 'SystemctlCommand'):
        pulumi.set(self, "command", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        """
        Corresponds to the [PATTERN] argument
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        Corresponds to the [UNIT...] argument.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


@pulumi.input_type
class TarOptsArgs:
    def __init__(__self__, *,
                 archive: pulumi.Input[str],
                 directory: Optional[pulumi.Input[str]] = None,
                 extract: Optional[pulumi.Input[bool]] = None,
                 files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 gzip: Optional[pulumi.Input[bool]] = None,
                 on_delete: Optional[pulumi.Input[bool]] = None,
                 recursive: Optional[pulumi.Input[bool]] = None,
                 strip_components: Optional[pulumi.Input[int]] = None):
        """
        Abstraction over the `tar` utility on a remote system.
        :param pulumi.Input[str] archive: Corresponds to the [ARCHIVE] argument.
        :param pulumi.Input[str] directory: Corresponds to the `--directory` option.
        :param pulumi.Input[bool] extract: Corresponds to the `--extract` option.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] files: Corresponds to the [FILE] argument.
        :param pulumi.Input[bool] gzip: Corresponds to the `--gzip` option.
        :param pulumi.Input[bool] on_delete: Whether rm should be run when the resource is created or deleted.
        :param pulumi.Input[bool] recursive: Corresponds to the `--recursive` option.
        :param pulumi.Input[int] strip_components: Corresponds to the `--strip-components` option.
        """
        pulumi.set(__self__, "archive", archive)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if extract is not None:
            pulumi.set(__self__, "extract", extract)
        if files is not None:
            pulumi.set(__self__, "files", files)
        if gzip is not None:
            pulumi.set(__self__, "gzip", gzip)
        if on_delete is not None:
            pulumi.set(__self__, "on_delete", on_delete)
        if recursive is not None:
            pulumi.set(__self__, "recursive", recursive)
        if strip_components is not None:
            pulumi.set(__self__, "strip_components", strip_components)

    @property
    @pulumi.getter
    def archive(self) -> pulumi.Input[str]:
        """
        Corresponds to the [ARCHIVE] argument.
        """
        return pulumi.get(self, "archive")

    @archive.setter
    def archive(self, value: pulumi.Input[str]):
        pulumi.set(self, "archive", value)

    @property
    @pulumi.getter
    def directory(self) -> Optional[pulumi.Input[str]]:
        """
        Corresponds to the `--directory` option.
        """
        return pulumi.get(self, "directory")

    @directory.setter
    def directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "directory", value)

    @property
    @pulumi.getter
    def extract(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--extract` option.
        """
        return pulumi.get(self, "extract")

    @extract.setter
    def extract(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "extract", value)

    @property
    @pulumi.getter
    def files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Corresponds to the [FILE] argument.
        """
        return pulumi.get(self, "files")

    @files.setter
    def files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "files", value)

    @property
    @pulumi.getter
    def gzip(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--gzip` option.
        """
        return pulumi.get(self, "gzip")

    @gzip.setter
    def gzip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "gzip", value)

    @property
    @pulumi.getter(name="onDelete")
    def on_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether rm should be run when the resource is created or deleted.
        """
        return pulumi.get(self, "on_delete")

    @on_delete.setter
    def on_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_delete", value)

    @property
    @pulumi.getter
    def recursive(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--recursive` option.
        """
        return pulumi.get(self, "recursive")

    @recursive.setter
    def recursive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recursive", value)

    @property
    @pulumi.getter(name="stripComponents")
    def strip_components(self) -> Optional[pulumi.Input[int]]:
        """
        Corresponds to the `--strip-components` option.
        """
        return pulumi.get(self, "strip_components")

    @strip_components.setter
    def strip_components(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "strip_components", value)


@pulumi.input_type
class TeeOptsArgs:
    def __init__(__self__, *,
                 files: pulumi.Input[Sequence[pulumi.Input[str]]],
                 append: Optional[pulumi.Input[bool]] = None,
                 ignore_interrupts: Optional[pulumi.Input[bool]] = None,
                 output_error: Optional[pulumi.Input['TeeMode']] = None,
                 pipe: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[bool]] = None):
        """
        Abstraction over the `rm` utility on a remote system.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] files: Corresponds to the [FILE] argument.
        :param pulumi.Input[bool] append: Append to the given FILEs, do not overwrite
        :param pulumi.Input[bool] ignore_interrupts: Ignore interrupt signals.
        :param pulumi.Input['TeeMode'] output_error: Set behavior on write error.
        :param pulumi.Input[bool] pipe: Operate in a more appropriate MODE with pipes.
        :param pulumi.Input[bool] version: Output version information and exit.
        """
        pulumi.set(__self__, "files", files)
        if append is not None:
            pulumi.set(__self__, "append", append)
        if ignore_interrupts is not None:
            pulumi.set(__self__, "ignore_interrupts", ignore_interrupts)
        if output_error is not None:
            pulumi.set(__self__, "output_error", output_error)
        if pipe is not None:
            pulumi.set(__self__, "pipe", pipe)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def files(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Corresponds to the [FILE] argument.
        """
        return pulumi.get(self, "files")

    @files.setter
    def files(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "files", value)

    @property
    @pulumi.getter
    def append(self) -> Optional[pulumi.Input[bool]]:
        """
        Append to the given FILEs, do not overwrite
        """
        return pulumi.get(self, "append")

    @append.setter
    def append(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "append", value)

    @property
    @pulumi.getter(name="ignoreInterrupts")
    def ignore_interrupts(self) -> Optional[pulumi.Input[bool]]:
        """
        Ignore interrupt signals.
        """
        return pulumi.get(self, "ignore_interrupts")

    @ignore_interrupts.setter
    def ignore_interrupts(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_interrupts", value)

    @property
    @pulumi.getter(name="outputError")
    def output_error(self) -> Optional[pulumi.Input['TeeMode']]:
        """
        Set behavior on write error.
        """
        return pulumi.get(self, "output_error")

    @output_error.setter
    def output_error(self, value: Optional[pulumi.Input['TeeMode']]):
        pulumi.set(self, "output_error", value)

    @property
    @pulumi.getter
    def pipe(self) -> Optional[pulumi.Input[bool]]:
        """
        Operate in a more appropriate MODE with pipes.
        """
        return pulumi.get(self, "pipe")

    @pipe.setter
    def pipe(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pipe", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[bool]]:
        """
        Output version information and exit.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class WgetOptsArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[Sequence[pulumi.Input[str]]],
                 directory_prefix: Optional[pulumi.Input[str]] = None,
                 https_only: Optional[pulumi.Input[bool]] = None,
                 no_verbose: Optional[pulumi.Input[bool]] = None,
                 output_document: Optional[pulumi.Input[str]] = None,
                 quiet: Optional[pulumi.Input[bool]] = None,
                 timestamping: Optional[pulumi.Input[bool]] = None):
        """
        Abstraction over the `wget` utility on a remote system.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] url: Corresponds to the [URL...] argument.
        :param pulumi.Input[str] directory_prefix: The  directory prefix is the directory where all other files and subdirectories will be saved to, i.e. the top of the retrieval tree.  The default is . (the current directory).
        :param pulumi.Input[bool] https_only: When in recursive mode, only HTTPS links are followed.
        :param pulumi.Input[bool] no_verbose: Turn off verbose without being completely quiet (use -q for that), which means that error messages and basic information still get printed.
        :param pulumi.Input[str] output_document: The  documents  will  not  be  written  to the appropriate files, but all will be concatenated together and written to file.
        :param pulumi.Input[bool] quiet: Turn off Wget's output.
        :param pulumi.Input[bool] timestamping: Turn on time-stamping.
        """
        pulumi.set(__self__, "url", url)
        if directory_prefix is not None:
            pulumi.set(__self__, "directory_prefix", directory_prefix)
        if https_only is not None:
            pulumi.set(__self__, "https_only", https_only)
        if no_verbose is not None:
            pulumi.set(__self__, "no_verbose", no_verbose)
        if output_document is not None:
            pulumi.set(__self__, "output_document", output_document)
        if quiet is not None:
            pulumi.set(__self__, "quiet", quiet)
        if timestamping is not None:
            pulumi.set(__self__, "timestamping", timestamping)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Corresponds to the [URL...] argument.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="directoryPrefix")
    def directory_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The  directory prefix is the directory where all other files and subdirectories will be saved to, i.e. the top of the retrieval tree.  The default is . (the current directory).
        """
        return pulumi.get(self, "directory_prefix")

    @directory_prefix.setter
    def directory_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "directory_prefix", value)

    @property
    @pulumi.getter(name="httpsOnly")
    def https_only(self) -> Optional[pulumi.Input[bool]]:
        """
        When in recursive mode, only HTTPS links are followed.
        """
        return pulumi.get(self, "https_only")

    @https_only.setter
    def https_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "https_only", value)

    @property
    @pulumi.getter(name="noVerbose")
    def no_verbose(self) -> Optional[pulumi.Input[bool]]:
        """
        Turn off verbose without being completely quiet (use -q for that), which means that error messages and basic information still get printed.
        """
        return pulumi.get(self, "no_verbose")

    @no_verbose.setter
    def no_verbose(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_verbose", value)

    @property
    @pulumi.getter(name="outputDocument")
    def output_document(self) -> Optional[pulumi.Input[str]]:
        """
        The  documents  will  not  be  written  to the appropriate files, but all will be concatenated together and written to file.
        """
        return pulumi.get(self, "output_document")

    @output_document.setter
    def output_document(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_document", value)

    @property
    @pulumi.getter
    def quiet(self) -> Optional[pulumi.Input[bool]]:
        """
        Turn off Wget's output.
        """
        return pulumi.get(self, "quiet")

    @quiet.setter
    def quiet(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "quiet", value)

    @property
    @pulumi.getter
    def timestamping(self) -> Optional[pulumi.Input[bool]]:
        """
        Turn on time-stamping.
        """
        return pulumi.get(self, "timestamping")

    @timestamping.setter
    def timestamping(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "timestamping", value)


