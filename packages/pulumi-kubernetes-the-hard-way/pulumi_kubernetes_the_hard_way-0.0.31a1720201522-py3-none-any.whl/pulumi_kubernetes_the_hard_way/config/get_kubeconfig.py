# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetKubeconfigResult',
    'AwaitableGetKubeconfigResult',
    'get_kubeconfig',
    'get_kubeconfig_output',
]

@pulumi.output_type
class GetKubeconfigResult:
    def __init__(__self__, result=None):
        if result and not isinstance(result, dict):
            raise TypeError("Expected argument 'result' to be a dict")
        pulumi.set(__self__, "result", result)

    @property
    @pulumi.getter
    def result(self) -> 'outputs.Kubeconfig':
        return pulumi.get(self, "result")


class AwaitableGetKubeconfigResult(GetKubeconfigResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetKubeconfigResult(
            result=self.result)


def get_kubeconfig(ca_pem: Optional[str] = None,
                   options: Optional[Union[pulumi.InputType['KubeconfigAdminOptions'], pulumi.InputType['KubeconfigKubeControllerManagerOptions'], pulumi.InputType['KubeconfigKubeProxyOptions'], pulumi.InputType['KubeconfigKubeSchedulerOptions'], pulumi.InputType['KubeconfigWorkerOptions']]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetKubeconfigResult:
    """
    Use this data source to access information about an existing resource.

    :param str ca_pem: Certificate authority data.
    :param Union[pulumi.InputType['KubeconfigAdminOptions'], pulumi.InputType['KubeconfigKubeControllerManagerOptions'], pulumi.InputType['KubeconfigKubeProxyOptions'], pulumi.InputType['KubeconfigKubeSchedulerOptions'], pulumi.InputType['KubeconfigWorkerOptions']] options: Options for creating the kubeconfig.
    """
    __args__ = dict()
    __args__['caPem'] = ca_pem
    __args__['options'] = options
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('kubernetes-the-hard-way:config:getKubeconfig', __args__, opts=opts, typ=GetKubeconfigResult).value

    return AwaitableGetKubeconfigResult(
        result=pulumi.get(__ret__, 'result'))


@_utilities.lift_output_func(get_kubeconfig)
def get_kubeconfig_output(ca_pem: Optional[pulumi.Input[str]] = None,
                          options: Optional[pulumi.Input[Union[pulumi.InputType['KubeconfigAdminOptions'], pulumi.InputType['KubeconfigKubeControllerManagerOptions'], pulumi.InputType['KubeconfigKubeProxyOptions'], pulumi.InputType['KubeconfigKubeSchedulerOptions'], pulumi.InputType['KubeconfigWorkerOptions']]]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetKubeconfigResult]:
    """
    Use this data source to access information about an existing resource.

    :param str ca_pem: Certificate authority data.
    :param Union[pulumi.InputType['KubeconfigAdminOptions'], pulumi.InputType['KubeconfigKubeControllerManagerOptions'], pulumi.InputType['KubeconfigKubeProxyOptions'], pulumi.InputType['KubeconfigKubeSchedulerOptions'], pulumi.InputType['KubeconfigWorkerOptions']] options: Options for creating the kubeconfig.
    """
    ...
