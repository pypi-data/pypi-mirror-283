# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from .. import tools as _tools
import pulumi_command

__all__ = ['DownloadArgs', 'Download']

@pulumi.input_type
class DownloadArgs:
    def __init__(__self__, *,
                 connection: pulumi.Input['pulumi_command.remote.ConnectionArgs'],
                 destination: pulumi.Input[str],
                 url: pulumi.Input[str],
                 remove_on_delete: Optional[bool] = None):
        """
        The set of arguments for constructing a Download resource.
        :param pulumi.Input['pulumi_command.remote.ConnectionArgs'] connection: The parameters with which to connect to the remote host.
        :param pulumi.Input[str] destination: The fully qualified path on the remote system where the file should be downloaded to.
        :param pulumi.Input[str] url: The URL of the file to be downloaded.
        :param bool remove_on_delete: Remove the downloaded fiel when the resource is deleted.
        """
        pulumi.set(__self__, "connection", connection)
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "url", url)
        if remove_on_delete is not None:
            pulumi.set(__self__, "remove_on_delete", remove_on_delete)

    @property
    @pulumi.getter
    def connection(self) -> pulumi.Input['pulumi_command.remote.ConnectionArgs']:
        """
        The parameters with which to connect to the remote host.
        """
        return pulumi.get(self, "connection")

    @connection.setter
    def connection(self, value: pulumi.Input['pulumi_command.remote.ConnectionArgs']):
        pulumi.set(self, "connection", value)

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Input[str]:
        """
        The fully qualified path on the remote system where the file should be downloaded to.
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        The URL of the file to be downloaded.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="removeOnDelete")
    def remove_on_delete(self) -> Optional[bool]:
        """
        Remove the downloaded fiel when the resource is deleted.
        """
        return pulumi.get(self, "remove_on_delete")

    @remove_on_delete.setter
    def remove_on_delete(self, value: Optional[bool]):
        pulumi.set(self, "remove_on_delete", value)


class Download(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connection: Optional[pulumi.Input[pulumi.InputType['pulumi_command.remote.ConnectionArgs']]] = None,
                 destination: Optional[pulumi.Input[str]] = None,
                 remove_on_delete: Optional[bool] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Downloads the file specified by `url` onto a remote system.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['pulumi_command.remote.ConnectionArgs']] connection: The parameters with which to connect to the remote host.
        :param pulumi.Input[str] destination: The fully qualified path on the remote system where the file should be downloaded to.
        :param bool remove_on_delete: Remove the downloaded fiel when the resource is deleted.
        :param pulumi.Input[str] url: The URL of the file to be downloaded.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DownloadArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Downloads the file specified by `url` onto a remote system.

        :param str resource_name: The name of the resource.
        :param DownloadArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DownloadArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connection: Optional[pulumi.Input[pulumi.InputType['pulumi_command.remote.ConnectionArgs']]] = None,
                 destination: Optional[pulumi.Input[str]] = None,
                 remove_on_delete: Optional[bool] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DownloadArgs.__new__(DownloadArgs)

            if connection is None and not opts.urn:
                raise TypeError("Missing required property 'connection'")
            __props__.__dict__["connection"] = connection
            if destination is None and not opts.urn:
                raise TypeError("Missing required property 'destination'")
            __props__.__dict__["destination"] = destination
            __props__.__dict__["remove_on_delete"] = remove_on_delete
            if url is None and not opts.urn:
                raise TypeError("Missing required property 'url'")
            __props__.__dict__["url"] = url
            __props__.__dict__["mkdir"] = None
            __props__.__dict__["wget"] = None
        super(Download, __self__).__init__(
            'kubernetes-the-hard-way:remote:Download',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter
    def connection(self) -> pulumi.Output['pulumi_command.remote.outputs.Connection']:
        """
        The parameters with which to connect to the remote host.
        """
        return pulumi.get(self, "connection")

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Output[str]:
        """
        The fully qualified path on the remote system where the file should be downloaded to.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def mkdir(self) -> pulumi.Output['_tools.Mkdir']:
        """
        The mkdir operation.
        """
        return pulumi.get(self, "mkdir")

    @property
    @pulumi.getter(name="removeOnDelete")
    def remove_on_delete(self) -> pulumi.Output[bool]:
        """
        Remove the downloaded fiel when the resource is deleted.
        """
        return pulumi.get(self, "remove_on_delete")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        """
        The URL of the file to be downloaded.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def wget(self) -> pulumi.Output['_tools.Wget']:
        """
        The wget operation.
        """
        return pulumi.get(self, "wget")

