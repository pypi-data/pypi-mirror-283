# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from .. import config as _config
from .. import tools as _tools
from ._enums import *
from .cni_plugins_install import CniPluginsInstall
from .containerd_install import ContainerdInstall
from .containerd_service import ContainerdService
from .crictl_install import CrictlInstall
from .file import File
from .kube_proxy_install import KubeProxyInstall
from .kube_proxy_service import KubeProxyService
from .kubectl_install import KubectlInstall
from .kubelet_install import KubeletInstall
from .kubelet_service import KubeletService
from .runc_install import RuncInstall
import pulumi_command

__all__ = ['WorkerNodeArgs', 'WorkerNode']

@pulumi.input_type
class WorkerNodeArgs:
    def __init__(__self__, *,
                 architecture: pulumi.Input['Architecture'],
                 ca_path: pulumi.Input[str],
                 connection: pulumi.Input['pulumi_command.remote.ConnectionArgs'],
                 kubelet_certificate_path: pulumi.Input[str],
                 kubelet_private_key_path: pulumi.Input[str],
                 subnet: pulumi.Input[str],
                 cluster_cidr: Optional[pulumi.Input[str]] = None,
                 cluster_domain: Optional[pulumi.Input[str]] = None,
                 cni_configuration_directory: Optional[pulumi.Input[str]] = None,
                 cni_install_directory: Optional[pulumi.Input[str]] = None,
                 cni_version: Optional[pulumi.Input[str]] = None,
                 containerd_configuration_directory: Optional[pulumi.Input[str]] = None,
                 containerd_install_directory: Optional[pulumi.Input[str]] = None,
                 containerd_version: Optional[pulumi.Input[str]] = None,
                 crictl_install_directory: Optional[pulumi.Input[str]] = None,
                 kube_proxy_configuration_directory: Optional[pulumi.Input[str]] = None,
                 kube_proxy_install_directory: Optional[pulumi.Input[str]] = None,
                 kube_proxy_kubeconfig_path: Optional[pulumi.Input[str]] = None,
                 kubectl_install_directory: Optional[pulumi.Input[str]] = None,
                 kubelet_configuration_directory: Optional[pulumi.Input[str]] = None,
                 kubelet_install_directory: Optional[pulumi.Input[str]] = None,
                 kubelet_kubeconfig_path: Optional[pulumi.Input[str]] = None,
                 kubernetes_version: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a WorkerNode resource.
        :param pulumi.Input['Architecture'] architecture: The CPU architecture of the node.
        :param pulumi.Input[str] ca_path: The path to the cluster certificate authority file.
        :param pulumi.Input['pulumi_command.remote.ConnectionArgs'] connection: The parameters with which to connect to the remote host.
        :param pulumi.Input[str] kubelet_certificate_path: The path to the kubelet certificate.
        :param pulumi.Input[str] kubelet_private_key_path: The path to the kubelet private key file.
        :param pulumi.Input[str] subnet: The subnet for the cluster.
        :param pulumi.Input[str] cluster_cidr: The CIDR to use for the cluster.
        :param pulumi.Input[str] cluster_domain: The domain for the cluster to use. Defaults to cluster.local.
        :param pulumi.Input[str] cni_configuration_directory: The directory to store CNI plugin configuration files. Defaults to /etc/cni/net.d.
        :param pulumi.Input[str] cni_install_directory: The directory to store CNI plugin binaries. Defaults to /opt/cni/bin.
        :param pulumi.Input[str] cni_version: The CNI version to use.
        :param pulumi.Input[str] containerd_configuration_directory: The directory to store containerd configuration files. Defaults to /etc/containerd.
        :param pulumi.Input[str] containerd_install_directory: The directory to store the containerd binary. Defaults to /bin.
        :param pulumi.Input[str] containerd_version: The containerd version to use.
        :param pulumi.Input[str] crictl_install_directory: The directory to store the crictl binary. Defaults to /usr/local/bin.
        :param pulumi.Input[str] kube_proxy_configuration_directory: The directory to store kube-proxy configuration files. Defaults to /var/lib/kube-proxy.
        :param pulumi.Input[str] kube_proxy_install_directory: The directory to store the kube-proxy binary. Defaults to /usr/local/bin.
        :param pulumi.Input[str] kube_proxy_kubeconfig_path: The path to the kube-proxy's kubeconfig file.
        :param pulumi.Input[str] kubectl_install_directory: The directory to store the kubectl binary. Defaults to /usr/local/bin.
        :param pulumi.Input[str] kubelet_configuration_directory: The directory to store kubelet configuration files. Defaults to /var/lib/kubelet.
        :param pulumi.Input[str] kubelet_install_directory: The directory to store the kubelet binary. Defaults to /usr/local/bin.
        :param pulumi.Input[str] kubelet_kubeconfig_path: The path to the kubelet's kubeconfig file.
        :param pulumi.Input[str] kubernetes_version: The kubernetes version to use.
        """
        pulumi.set(__self__, "architecture", architecture)
        pulumi.set(__self__, "ca_path", ca_path)
        pulumi.set(__self__, "connection", connection)
        pulumi.set(__self__, "kubelet_certificate_path", kubelet_certificate_path)
        pulumi.set(__self__, "kubelet_private_key_path", kubelet_private_key_path)
        pulumi.set(__self__, "subnet", subnet)
        if cluster_cidr is not None:
            pulumi.set(__self__, "cluster_cidr", cluster_cidr)
        if cluster_domain is not None:
            pulumi.set(__self__, "cluster_domain", cluster_domain)
        if cni_configuration_directory is not None:
            pulumi.set(__self__, "cni_configuration_directory", cni_configuration_directory)
        if cni_install_directory is not None:
            pulumi.set(__self__, "cni_install_directory", cni_install_directory)
        if cni_version is not None:
            pulumi.set(__self__, "cni_version", cni_version)
        if containerd_configuration_directory is not None:
            pulumi.set(__self__, "containerd_configuration_directory", containerd_configuration_directory)
        if containerd_install_directory is not None:
            pulumi.set(__self__, "containerd_install_directory", containerd_install_directory)
        if containerd_version is not None:
            pulumi.set(__self__, "containerd_version", containerd_version)
        if crictl_install_directory is not None:
            pulumi.set(__self__, "crictl_install_directory", crictl_install_directory)
        if kube_proxy_configuration_directory is not None:
            pulumi.set(__self__, "kube_proxy_configuration_directory", kube_proxy_configuration_directory)
        if kube_proxy_install_directory is not None:
            pulumi.set(__self__, "kube_proxy_install_directory", kube_proxy_install_directory)
        if kube_proxy_kubeconfig_path is not None:
            pulumi.set(__self__, "kube_proxy_kubeconfig_path", kube_proxy_kubeconfig_path)
        if kubectl_install_directory is not None:
            pulumi.set(__self__, "kubectl_install_directory", kubectl_install_directory)
        if kubelet_configuration_directory is not None:
            pulumi.set(__self__, "kubelet_configuration_directory", kubelet_configuration_directory)
        if kubelet_install_directory is not None:
            pulumi.set(__self__, "kubelet_install_directory", kubelet_install_directory)
        if kubelet_kubeconfig_path is not None:
            pulumi.set(__self__, "kubelet_kubeconfig_path", kubelet_kubeconfig_path)
        if kubernetes_version is not None:
            pulumi.set(__self__, "kubernetes_version", kubernetes_version)

    @property
    @pulumi.getter
    def architecture(self) -> pulumi.Input['Architecture']:
        """
        The CPU architecture of the node.
        """
        return pulumi.get(self, "architecture")

    @architecture.setter
    def architecture(self, value: pulumi.Input['Architecture']):
        pulumi.set(self, "architecture", value)

    @property
    @pulumi.getter(name="caPath")
    def ca_path(self) -> pulumi.Input[str]:
        """
        The path to the cluster certificate authority file.
        """
        return pulumi.get(self, "ca_path")

    @ca_path.setter
    def ca_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "ca_path", value)

    @property
    @pulumi.getter
    def connection(self) -> pulumi.Input['pulumi_command.remote.ConnectionArgs']:
        """
        The parameters with which to connect to the remote host.
        """
        return pulumi.get(self, "connection")

    @connection.setter
    def connection(self, value: pulumi.Input['pulumi_command.remote.ConnectionArgs']):
        pulumi.set(self, "connection", value)

    @property
    @pulumi.getter(name="kubeletCertificatePath")
    def kubelet_certificate_path(self) -> pulumi.Input[str]:
        """
        The path to the kubelet certificate.
        """
        return pulumi.get(self, "kubelet_certificate_path")

    @kubelet_certificate_path.setter
    def kubelet_certificate_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "kubelet_certificate_path", value)

    @property
    @pulumi.getter(name="kubeletPrivateKeyPath")
    def kubelet_private_key_path(self) -> pulumi.Input[str]:
        """
        The path to the kubelet private key file.
        """
        return pulumi.get(self, "kubelet_private_key_path")

    @kubelet_private_key_path.setter
    def kubelet_private_key_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "kubelet_private_key_path", value)

    @property
    @pulumi.getter
    def subnet(self) -> pulumi.Input[str]:
        """
        The subnet for the cluster.
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet", value)

    @property
    @pulumi.getter(name="clusterCIDR")
    def cluster_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        The CIDR to use for the cluster.
        """
        return pulumi.get(self, "cluster_cidr")

    @cluster_cidr.setter
    def cluster_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_cidr", value)

    @property
    @pulumi.getter(name="clusterDomain")
    def cluster_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The domain for the cluster to use. Defaults to cluster.local.
        """
        return pulumi.get(self, "cluster_domain")

    @cluster_domain.setter
    def cluster_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_domain", value)

    @property
    @pulumi.getter(name="cniConfigurationDirectory")
    def cni_configuration_directory(self) -> Optional[pulumi.Input[str]]:
        """
        The directory to store CNI plugin configuration files. Defaults to /etc/cni/net.d.
        """
        return pulumi.get(self, "cni_configuration_directory")

    @cni_configuration_directory.setter
    def cni_configuration_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cni_configuration_directory", value)

    @property
    @pulumi.getter(name="cniInstallDirectory")
    def cni_install_directory(self) -> Optional[pulumi.Input[str]]:
        """
        The directory to store CNI plugin binaries. Defaults to /opt/cni/bin.
        """
        return pulumi.get(self, "cni_install_directory")

    @cni_install_directory.setter
    def cni_install_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cni_install_directory", value)

    @property
    @pulumi.getter(name="cniVersion")
    def cni_version(self) -> Optional[pulumi.Input[str]]:
        """
        The CNI version to use.
        """
        return pulumi.get(self, "cni_version")

    @cni_version.setter
    def cni_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cni_version", value)

    @property
    @pulumi.getter(name="containerdConfigurationDirectory")
    def containerd_configuration_directory(self) -> Optional[pulumi.Input[str]]:
        """
        The directory to store containerd configuration files. Defaults to /etc/containerd.
        """
        return pulumi.get(self, "containerd_configuration_directory")

    @containerd_configuration_directory.setter
    def containerd_configuration_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "containerd_configuration_directory", value)

    @property
    @pulumi.getter(name="containerdInstallDirectory")
    def containerd_install_directory(self) -> Optional[pulumi.Input[str]]:
        """
        The directory to store the containerd binary. Defaults to /bin.
        """
        return pulumi.get(self, "containerd_install_directory")

    @containerd_install_directory.setter
    def containerd_install_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "containerd_install_directory", value)

    @property
    @pulumi.getter(name="containerdVersion")
    def containerd_version(self) -> Optional[pulumi.Input[str]]:
        """
        The containerd version to use.
        """
        return pulumi.get(self, "containerd_version")

    @containerd_version.setter
    def containerd_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "containerd_version", value)

    @property
    @pulumi.getter(name="crictlInstallDirectory")
    def crictl_install_directory(self) -> Optional[pulumi.Input[str]]:
        """
        The directory to store the crictl binary. Defaults to /usr/local/bin.
        """
        return pulumi.get(self, "crictl_install_directory")

    @crictl_install_directory.setter
    def crictl_install_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "crictl_install_directory", value)

    @property
    @pulumi.getter(name="kubeProxyConfigurationDirectory")
    def kube_proxy_configuration_directory(self) -> Optional[pulumi.Input[str]]:
        """
        The directory to store kube-proxy configuration files. Defaults to /var/lib/kube-proxy.
        """
        return pulumi.get(self, "kube_proxy_configuration_directory")

    @kube_proxy_configuration_directory.setter
    def kube_proxy_configuration_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kube_proxy_configuration_directory", value)

    @property
    @pulumi.getter(name="kubeProxyInstallDirectory")
    def kube_proxy_install_directory(self) -> Optional[pulumi.Input[str]]:
        """
        The directory to store the kube-proxy binary. Defaults to /usr/local/bin.
        """
        return pulumi.get(self, "kube_proxy_install_directory")

    @kube_proxy_install_directory.setter
    def kube_proxy_install_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kube_proxy_install_directory", value)

    @property
    @pulumi.getter(name="kubeProxyKubeconfigPath")
    def kube_proxy_kubeconfig_path(self) -> Optional[pulumi.Input[str]]:
        """
        The path to the kube-proxy's kubeconfig file.
        """
        return pulumi.get(self, "kube_proxy_kubeconfig_path")

    @kube_proxy_kubeconfig_path.setter
    def kube_proxy_kubeconfig_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kube_proxy_kubeconfig_path", value)

    @property
    @pulumi.getter(name="kubectlInstallDirectory")
    def kubectl_install_directory(self) -> Optional[pulumi.Input[str]]:
        """
        The directory to store the kubectl binary. Defaults to /usr/local/bin.
        """
        return pulumi.get(self, "kubectl_install_directory")

    @kubectl_install_directory.setter
    def kubectl_install_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubectl_install_directory", value)

    @property
    @pulumi.getter(name="kubeletConfigurationDirectory")
    def kubelet_configuration_directory(self) -> Optional[pulumi.Input[str]]:
        """
        The directory to store kubelet configuration files. Defaults to /var/lib/kubelet.
        """
        return pulumi.get(self, "kubelet_configuration_directory")

    @kubelet_configuration_directory.setter
    def kubelet_configuration_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubelet_configuration_directory", value)

    @property
    @pulumi.getter(name="kubeletInstallDirectory")
    def kubelet_install_directory(self) -> Optional[pulumi.Input[str]]:
        """
        The directory to store the kubelet binary. Defaults to /usr/local/bin.
        """
        return pulumi.get(self, "kubelet_install_directory")

    @kubelet_install_directory.setter
    def kubelet_install_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubelet_install_directory", value)

    @property
    @pulumi.getter(name="kubeletKubeconfigPath")
    def kubelet_kubeconfig_path(self) -> Optional[pulumi.Input[str]]:
        """
        The path to the kubelet's kubeconfig file.
        """
        return pulumi.get(self, "kubelet_kubeconfig_path")

    @kubelet_kubeconfig_path.setter
    def kubelet_kubeconfig_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubelet_kubeconfig_path", value)

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> Optional[pulumi.Input[str]]:
        """
        The kubernetes version to use.
        """
        return pulumi.get(self, "kubernetes_version")

    @kubernetes_version.setter
    def kubernetes_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubernetes_version", value)


class WorkerNode(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 architecture: Optional[pulumi.Input['Architecture']] = None,
                 ca_path: Optional[pulumi.Input[str]] = None,
                 cluster_cidr: Optional[pulumi.Input[str]] = None,
                 cluster_domain: Optional[pulumi.Input[str]] = None,
                 cni_configuration_directory: Optional[pulumi.Input[str]] = None,
                 cni_install_directory: Optional[pulumi.Input[str]] = None,
                 cni_version: Optional[pulumi.Input[str]] = None,
                 connection: Optional[pulumi.Input[pulumi.InputType['pulumi_command.remote.ConnectionArgs']]] = None,
                 containerd_configuration_directory: Optional[pulumi.Input[str]] = None,
                 containerd_install_directory: Optional[pulumi.Input[str]] = None,
                 containerd_version: Optional[pulumi.Input[str]] = None,
                 crictl_install_directory: Optional[pulumi.Input[str]] = None,
                 kube_proxy_configuration_directory: Optional[pulumi.Input[str]] = None,
                 kube_proxy_install_directory: Optional[pulumi.Input[str]] = None,
                 kube_proxy_kubeconfig_path: Optional[pulumi.Input[str]] = None,
                 kubectl_install_directory: Optional[pulumi.Input[str]] = None,
                 kubelet_certificate_path: Optional[pulumi.Input[str]] = None,
                 kubelet_configuration_directory: Optional[pulumi.Input[str]] = None,
                 kubelet_install_directory: Optional[pulumi.Input[str]] = None,
                 kubelet_kubeconfig_path: Optional[pulumi.Input[str]] = None,
                 kubelet_private_key_path: Optional[pulumi.Input[str]] = None,
                 kubernetes_version: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        A Kubernetes worker node.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input['Architecture'] architecture: The CPU architecture of the node.
        :param pulumi.Input[str] ca_path: The path to the cluster certificate authority file.
        :param pulumi.Input[str] cluster_cidr: The CIDR to use for the cluster.
        :param pulumi.Input[str] cluster_domain: The domain for the cluster to use. Defaults to cluster.local.
        :param pulumi.Input[str] cni_configuration_directory: The directory to store CNI plugin configuration files. Defaults to /etc/cni/net.d.
        :param pulumi.Input[str] cni_install_directory: The directory to store CNI plugin binaries. Defaults to /opt/cni/bin.
        :param pulumi.Input[str] cni_version: The CNI version to use.
        :param pulumi.Input[pulumi.InputType['pulumi_command.remote.ConnectionArgs']] connection: The parameters with which to connect to the remote host.
        :param pulumi.Input[str] containerd_configuration_directory: The directory to store containerd configuration files. Defaults to /etc/containerd.
        :param pulumi.Input[str] containerd_install_directory: The directory to store the containerd binary. Defaults to /bin.
        :param pulumi.Input[str] containerd_version: The containerd version to use.
        :param pulumi.Input[str] crictl_install_directory: The directory to store the crictl binary. Defaults to /usr/local/bin.
        :param pulumi.Input[str] kube_proxy_configuration_directory: The directory to store kube-proxy configuration files. Defaults to /var/lib/kube-proxy.
        :param pulumi.Input[str] kube_proxy_install_directory: The directory to store the kube-proxy binary. Defaults to /usr/local/bin.
        :param pulumi.Input[str] kube_proxy_kubeconfig_path: The path to the kube-proxy's kubeconfig file.
        :param pulumi.Input[str] kubectl_install_directory: The directory to store the kubectl binary. Defaults to /usr/local/bin.
        :param pulumi.Input[str] kubelet_certificate_path: The path to the kubelet certificate.
        :param pulumi.Input[str] kubelet_configuration_directory: The directory to store kubelet configuration files. Defaults to /var/lib/kubelet.
        :param pulumi.Input[str] kubelet_install_directory: The directory to store the kubelet binary. Defaults to /usr/local/bin.
        :param pulumi.Input[str] kubelet_kubeconfig_path: The path to the kubelet's kubeconfig file.
        :param pulumi.Input[str] kubelet_private_key_path: The path to the kubelet private key file.
        :param pulumi.Input[str] kubernetes_version: The kubernetes version to use.
        :param pulumi.Input[str] subnet: The subnet for the cluster.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WorkerNodeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A Kubernetes worker node.

        :param str resource_name: The name of the resource.
        :param WorkerNodeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkerNodeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 architecture: Optional[pulumi.Input['Architecture']] = None,
                 ca_path: Optional[pulumi.Input[str]] = None,
                 cluster_cidr: Optional[pulumi.Input[str]] = None,
                 cluster_domain: Optional[pulumi.Input[str]] = None,
                 cni_configuration_directory: Optional[pulumi.Input[str]] = None,
                 cni_install_directory: Optional[pulumi.Input[str]] = None,
                 cni_version: Optional[pulumi.Input[str]] = None,
                 connection: Optional[pulumi.Input[pulumi.InputType['pulumi_command.remote.ConnectionArgs']]] = None,
                 containerd_configuration_directory: Optional[pulumi.Input[str]] = None,
                 containerd_install_directory: Optional[pulumi.Input[str]] = None,
                 containerd_version: Optional[pulumi.Input[str]] = None,
                 crictl_install_directory: Optional[pulumi.Input[str]] = None,
                 kube_proxy_configuration_directory: Optional[pulumi.Input[str]] = None,
                 kube_proxy_install_directory: Optional[pulumi.Input[str]] = None,
                 kube_proxy_kubeconfig_path: Optional[pulumi.Input[str]] = None,
                 kubectl_install_directory: Optional[pulumi.Input[str]] = None,
                 kubelet_certificate_path: Optional[pulumi.Input[str]] = None,
                 kubelet_configuration_directory: Optional[pulumi.Input[str]] = None,
                 kubelet_install_directory: Optional[pulumi.Input[str]] = None,
                 kubelet_kubeconfig_path: Optional[pulumi.Input[str]] = None,
                 kubelet_private_key_path: Optional[pulumi.Input[str]] = None,
                 kubernetes_version: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkerNodeArgs.__new__(WorkerNodeArgs)

            if architecture is None and not opts.urn:
                raise TypeError("Missing required property 'architecture'")
            __props__.__dict__["architecture"] = architecture
            if ca_path is None and not opts.urn:
                raise TypeError("Missing required property 'ca_path'")
            __props__.__dict__["ca_path"] = ca_path
            __props__.__dict__["cluster_cidr"] = cluster_cidr
            __props__.__dict__["cluster_domain"] = cluster_domain
            __props__.__dict__["cni_configuration_directory"] = cni_configuration_directory
            __props__.__dict__["cni_install_directory"] = cni_install_directory
            __props__.__dict__["cni_version"] = cni_version
            if connection is None and not opts.urn:
                raise TypeError("Missing required property 'connection'")
            __props__.__dict__["connection"] = connection
            __props__.__dict__["containerd_configuration_directory"] = containerd_configuration_directory
            __props__.__dict__["containerd_install_directory"] = containerd_install_directory
            __props__.__dict__["containerd_version"] = containerd_version
            __props__.__dict__["crictl_install_directory"] = crictl_install_directory
            __props__.__dict__["kube_proxy_configuration_directory"] = kube_proxy_configuration_directory
            __props__.__dict__["kube_proxy_install_directory"] = kube_proxy_install_directory
            __props__.__dict__["kube_proxy_kubeconfig_path"] = kube_proxy_kubeconfig_path
            __props__.__dict__["kubectl_install_directory"] = kubectl_install_directory
            if kubelet_certificate_path is None and not opts.urn:
                raise TypeError("Missing required property 'kubelet_certificate_path'")
            __props__.__dict__["kubelet_certificate_path"] = kubelet_certificate_path
            __props__.__dict__["kubelet_configuration_directory"] = kubelet_configuration_directory
            __props__.__dict__["kubelet_install_directory"] = kubelet_install_directory
            __props__.__dict__["kubelet_kubeconfig_path"] = kubelet_kubeconfig_path
            if kubelet_private_key_path is None and not opts.urn:
                raise TypeError("Missing required property 'kubelet_private_key_path'")
            __props__.__dict__["kubelet_private_key_path"] = kubelet_private_key_path
            __props__.__dict__["kubernetes_version"] = kubernetes_version
            if subnet is None and not opts.urn:
                raise TypeError("Missing required property 'subnet'")
            __props__.__dict__["subnet"] = subnet
            __props__.__dict__["cni_bridge_configuration"] = None
            __props__.__dict__["cni_bridge_configuration_file"] = None
            __props__.__dict__["cni_loopback_configuration"] = None
            __props__.__dict__["cni_loopback_configuration_file"] = None
            __props__.__dict__["cni_mkdir"] = None
            __props__.__dict__["cni_plugins_install"] = None
            __props__.__dict__["containerd_configuration"] = None
            __props__.__dict__["containerd_configuration_file"] = None
            __props__.__dict__["containerd_install"] = None
            __props__.__dict__["containerd_mkdir"] = None
            __props__.__dict__["containerd_service"] = None
            __props__.__dict__["crictl_install"] = None
            __props__.__dict__["kube_proxy_configuration"] = None
            __props__.__dict__["kube_proxy_configuration_file"] = None
            __props__.__dict__["kube_proxy_install"] = None
            __props__.__dict__["kube_proxy_mkdir"] = None
            __props__.__dict__["kube_proxy_service"] = None
            __props__.__dict__["kubectl_install"] = None
            __props__.__dict__["kubelet_configuration"] = None
            __props__.__dict__["kubelet_configuration_file"] = None
            __props__.__dict__["kubelet_install"] = None
            __props__.__dict__["kubelet_mkdir"] = None
            __props__.__dict__["kubelet_service"] = None
            __props__.__dict__["runc_install"] = None
            __props__.__dict__["var_lib_kubernetes_mkdir"] = None
            __props__.__dict__["var_run_kubernetes_mkdir"] = None
        super(WorkerNode, __self__).__init__(
            'kubernetes-the-hard-way:remote:WorkerNode',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter
    def architecture(self) -> pulumi.Output['Architecture']:
        """
        The CPU architecture of the node.
        """
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter(name="caPath")
    def ca_path(self) -> pulumi.Output[str]:
        """
        The path to the cluster certificate authority file.
        """
        return pulumi.get(self, "ca_path")

    @property
    @pulumi.getter(name="clusterCIDR")
    def cluster_cidr(self) -> pulumi.Output[Optional[str]]:
        """
        The CIDR to use for the cluster.
        """
        return pulumi.get(self, "cluster_cidr")

    @property
    @pulumi.getter(name="clusterDomain")
    def cluster_domain(self) -> pulumi.Output[Optional[str]]:
        """
        The domain for the cluster to use. Defaults to cluster.local.
        """
        return pulumi.get(self, "cluster_domain")

    @property
    @pulumi.getter(name="cniBridgeConfiguration")
    def cni_bridge_configuration(self) -> pulumi.Output['_config.CniBridgePluginConfiguration']:
        """
        The CNI bridge plugin configuration.
        """
        return pulumi.get(self, "cni_bridge_configuration")

    @property
    @pulumi.getter(name="cniBridgeConfigurationFile")
    def cni_bridge_configuration_file(self) -> pulumi.Output['File']:
        """
        The CNI bridge plugin configuration file.
        """
        return pulumi.get(self, "cni_bridge_configuration_file")

    @property
    @pulumi.getter(name="cniConfigurationDirectory")
    def cni_configuration_directory(self) -> pulumi.Output[Optional[str]]:
        """
        The directory to store CNI plugin configuration files. Defaults to /etc/cni/net.d.
        """
        return pulumi.get(self, "cni_configuration_directory")

    @property
    @pulumi.getter(name="cniInstallDirectory")
    def cni_install_directory(self) -> pulumi.Output[Optional[str]]:
        """
        The directory to store CNI plugin binaries. Defaults to /opt/cni/bin.
        """
        return pulumi.get(self, "cni_install_directory")

    @property
    @pulumi.getter(name="cniLoopbackConfiguration")
    def cni_loopback_configuration(self) -> pulumi.Output['_config.CniLoopbackPluginConfiguration']:
        """
        The CNI loopback plugin configuration.
        """
        return pulumi.get(self, "cni_loopback_configuration")

    @property
    @pulumi.getter(name="cniLoopbackConfigurationFile")
    def cni_loopback_configuration_file(self) -> pulumi.Output['File']:
        """
        The CNI loopback plugin configuration file.
        """
        return pulumi.get(self, "cni_loopback_configuration_file")

    @property
    @pulumi.getter(name="cniMkdir")
    def cni_mkdir(self) -> pulumi.Output['_tools.Mkdir']:
        """
        The CNI configuration mkdir operation.
        """
        return pulumi.get(self, "cni_mkdir")

    @property
    @pulumi.getter(name="cniPluginsInstall")
    def cni_plugins_install(self) -> pulumi.Output[Optional['CniPluginsInstall']]:
        """
        The CNI plugin install.
        """
        return pulumi.get(self, "cni_plugins_install")

    @property
    @pulumi.getter(name="cniVersion")
    def cni_version(self) -> pulumi.Output[Optional[str]]:
        """
        The CNI version to use.
        """
        return pulumi.get(self, "cni_version")

    @property
    @pulumi.getter
    def connection(self) -> pulumi.Output['pulumi_command.remote.outputs.Connection']:
        """
        The parameters with which to connect to the remote host.
        """
        return pulumi.get(self, "connection")

    @property
    @pulumi.getter(name="containerdConfiguration")
    def containerd_configuration(self) -> pulumi.Output['_config.ContainerdConfiguration']:
        """
        The containerd configuration.
        """
        return pulumi.get(self, "containerd_configuration")

    @property
    @pulumi.getter(name="containerdConfigurationDirectory")
    def containerd_configuration_directory(self) -> pulumi.Output[Optional[str]]:
        """
        The directory to store containerd configuration files. Defaults to /etc/containerd.
        """
        return pulumi.get(self, "containerd_configuration_directory")

    @property
    @pulumi.getter(name="containerdConfigurationFile")
    def containerd_configuration_file(self) -> pulumi.Output['File']:
        """
        The containerd configuration file.
        """
        return pulumi.get(self, "containerd_configuration_file")

    @property
    @pulumi.getter(name="containerdInstall")
    def containerd_install(self) -> pulumi.Output['ContainerdInstall']:
        """
        The containerd install.
        """
        return pulumi.get(self, "containerd_install")

    @property
    @pulumi.getter(name="containerdInstallDirectory")
    def containerd_install_directory(self) -> pulumi.Output[Optional[str]]:
        """
        The directory to store the containerd binary. Defaults to /bin.
        """
        return pulumi.get(self, "containerd_install_directory")

    @property
    @pulumi.getter(name="containerdMkdir")
    def containerd_mkdir(self) -> pulumi.Output['_tools.Mkdir']:
        """
        The containerd configuration mkdir operation.
        """
        return pulumi.get(self, "containerd_mkdir")

    @property
    @pulumi.getter(name="containerdService")
    def containerd_service(self) -> pulumi.Output['ContainerdService']:
        """
        The containerd systemd service.
        """
        return pulumi.get(self, "containerd_service")

    @property
    @pulumi.getter(name="containerdVersion")
    def containerd_version(self) -> pulumi.Output[Optional[str]]:
        """
        The containerd version to use.
        """
        return pulumi.get(self, "containerd_version")

    @property
    @pulumi.getter(name="crictlInstall")
    def crictl_install(self) -> pulumi.Output['CrictlInstall']:
        """
        The crictl install.
        """
        return pulumi.get(self, "crictl_install")

    @property
    @pulumi.getter(name="crictlInstallDirectory")
    def crictl_install_directory(self) -> pulumi.Output[Optional[str]]:
        """
        The directory to store the crictl binary. Defaults to /usr/local/bin.
        """
        return pulumi.get(self, "crictl_install_directory")

    @property
    @pulumi.getter(name="kubeProxyConfiguration")
    def kube_proxy_configuration(self) -> pulumi.Output['_config.KubeProxyConfiguration']:
        """
        The kube-proxy configuration
        """
        return pulumi.get(self, "kube_proxy_configuration")

    @property
    @pulumi.getter(name="kubeProxyConfigurationDirectory")
    def kube_proxy_configuration_directory(self) -> pulumi.Output[Optional[str]]:
        """
        The directory to store kube-proxy configuration files. Defaults to /var/lib/kube-proxy.
        """
        return pulumi.get(self, "kube_proxy_configuration_directory")

    @property
    @pulumi.getter(name="kubeProxyConfigurationFile")
    def kube_proxy_configuration_file(self) -> pulumi.Output['File']:
        """
        The kube-proxy configuration file.
        """
        return pulumi.get(self, "kube_proxy_configuration_file")

    @property
    @pulumi.getter(name="kubeProxyInstall")
    def kube_proxy_install(self) -> pulumi.Output[Optional['KubeProxyInstall']]:
        """
        The kube-proxy install.
        """
        return pulumi.get(self, "kube_proxy_install")

    @property
    @pulumi.getter(name="kubeProxyInstallDirectory")
    def kube_proxy_install_directory(self) -> pulumi.Output[Optional[str]]:
        """
        The directory to store the kube-proxy binary. Defaults to /usr/local/bin.
        """
        return pulumi.get(self, "kube_proxy_install_directory")

    @property
    @pulumi.getter(name="kubeProxyKubeconfigPath")
    def kube_proxy_kubeconfig_path(self) -> pulumi.Output[Optional[str]]:
        """
        The path to the kube-proxy's kubeconfig file.
        """
        return pulumi.get(self, "kube_proxy_kubeconfig_path")

    @property
    @pulumi.getter(name="kubeProxyMkdir")
    def kube_proxy_mkdir(self) -> pulumi.Output['_tools.Mkdir']:
        """
        The kube-proxy configuration mkdir operation.
        """
        return pulumi.get(self, "kube_proxy_mkdir")

    @property
    @pulumi.getter(name="kubeProxyService")
    def kube_proxy_service(self) -> pulumi.Output['KubeProxyService']:
        """
        The kubelet systemd service.
        """
        return pulumi.get(self, "kube_proxy_service")

    @property
    @pulumi.getter(name="kubectlInstall")
    def kubectl_install(self) -> pulumi.Output['KubectlInstall']:
        """
        The kubectl install.
        """
        return pulumi.get(self, "kubectl_install")

    @property
    @pulumi.getter(name="kubectlInstallDirectory")
    def kubectl_install_directory(self) -> pulumi.Output[Optional[str]]:
        """
        The directory to store the kubectl binary. Defaults to /usr/local/bin.
        """
        return pulumi.get(self, "kubectl_install_directory")

    @property
    @pulumi.getter(name="kubeletCertificatePath")
    def kubelet_certificate_path(self) -> pulumi.Output[str]:
        """
        The path to the kubelet certificate.
        """
        return pulumi.get(self, "kubelet_certificate_path")

    @property
    @pulumi.getter(name="kubeletConfiguration")
    def kubelet_configuration(self) -> pulumi.Output['_config.KubeletConfiguration']:
        """
        The kubelet configuration
        """
        return pulumi.get(self, "kubelet_configuration")

    @property
    @pulumi.getter(name="kubeletConfigurationDirectory")
    def kubelet_configuration_directory(self) -> pulumi.Output[Optional[str]]:
        """
        The directory to store kubelet configuration files. Defaults to /var/lib/kubelet.
        """
        return pulumi.get(self, "kubelet_configuration_directory")

    @property
    @pulumi.getter(name="kubeletConfigurationFile")
    def kubelet_configuration_file(self) -> pulumi.Output['File']:
        """
        The kubelet configuration file.
        """
        return pulumi.get(self, "kubelet_configuration_file")

    @property
    @pulumi.getter(name="kubeletInstall")
    def kubelet_install(self) -> pulumi.Output['KubeletInstall']:
        """
        The kubelet install.
        """
        return pulumi.get(self, "kubelet_install")

    @property
    @pulumi.getter(name="kubeletInstallDirectory")
    def kubelet_install_directory(self) -> pulumi.Output[Optional[str]]:
        """
        The directory to store the kubelet binary. Defaults to /usr/local/bin.
        """
        return pulumi.get(self, "kubelet_install_directory")

    @property
    @pulumi.getter(name="kubeletKubeconfigPath")
    def kubelet_kubeconfig_path(self) -> pulumi.Output[Optional[str]]:
        """
        The path to the kubelet's kubeconfig file.
        """
        return pulumi.get(self, "kubelet_kubeconfig_path")

    @property
    @pulumi.getter(name="kubeletMkdir")
    def kubelet_mkdir(self) -> pulumi.Output['_tools.Mkdir']:
        """
        The kubelet configuration mkdir operation.
        """
        return pulumi.get(self, "kubelet_mkdir")

    @property
    @pulumi.getter(name="kubeletPrivateKeyPath")
    def kubelet_private_key_path(self) -> pulumi.Output[str]:
        """
        The path to the kubelet private key file.
        """
        return pulumi.get(self, "kubelet_private_key_path")

    @property
    @pulumi.getter(name="kubeletService")
    def kubelet_service(self) -> pulumi.Output['KubeletService']:
        """
        The kubelet systemd service.
        """
        return pulumi.get(self, "kubelet_service")

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> pulumi.Output[Optional[str]]:
        """
        The kubernetes version to use.
        """
        return pulumi.get(self, "kubernetes_version")

    @property
    @pulumi.getter(name="runcInstall")
    def runc_install(self) -> pulumi.Output[Optional['RuncInstall']]:
        """
        The runc install.
        """
        return pulumi.get(self, "runc_install")

    @property
    @pulumi.getter
    def subnet(self) -> pulumi.Output[str]:
        """
        The subnet for the cluster.
        """
        return pulumi.get(self, "subnet")

    @property
    @pulumi.getter(name="varLibKubernetesMkdir")
    def var_lib_kubernetes_mkdir(self) -> pulumi.Output['_tools.Mkdir']:
        """
        The /var/lib/kubernetes mkdir operation.
        """
        return pulumi.get(self, "var_lib_kubernetes_mkdir")

    @property
    @pulumi.getter(name="varRunKubernetesMkdir")
    def var_run_kubernetes_mkdir(self) -> pulumi.Output['_tools.Mkdir']:
        """
        The /var/run/kubernetes mkdir operation.
        """
        return pulumi.get(self, "var_run_kubernetes_mkdir")

