# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
import pulumi_random

__all__ = ['EncryptionKeyArgs', 'EncryptionKey']

@pulumi.input_type
class EncryptionKeyArgs:
    def __init__(__self__, *,
                 bytes: pulumi.Input[int]):
        """
        The set of arguments for constructing a EncryptionKey resource.
        :param pulumi.Input[int] bytes: The number of bytes requested. The minimum value for length is 1.
        """
        pulumi.set(__self__, "bytes", bytes)

    @property
    @pulumi.getter
    def bytes(self) -> pulumi.Input[int]:
        """
        The number of bytes requested. The minimum value for length is 1.
        """
        return pulumi.get(self, "bytes")

    @bytes.setter
    def bytes(self, value: pulumi.Input[int]):
        pulumi.set(self, "bytes", value)


class EncryptionKey(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bytes: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        A cluster encryption key.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] bytes: The number of bytes requested. The minimum value for length is 1.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EncryptionKeyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A cluster encryption key.

        :param str resource_name: The name of the resource.
        :param EncryptionKeyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EncryptionKeyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bytes: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EncryptionKeyArgs.__new__(EncryptionKeyArgs)

            if bytes is None and not opts.urn:
                raise TypeError("Missing required property 'bytes'")
            __props__.__dict__["bytes"] = bytes
            __props__.__dict__["config"] = None
            __props__.__dict__["key"] = None
        super(EncryptionKey, __self__).__init__(
            'kubernetes-the-hard-way:tls:EncryptionKey',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter
    def bytes(self) -> pulumi.Output[int]:
        """
        The number of bytes requested. The minimum value for length is 1.
        """
        return pulumi.get(self, "bytes")

    @property
    @pulumi.getter
    def config(self) -> pulumi.Output[str]:
        """
        The generated `v1/EncryptionConfig`.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output['pulumi_random.RandomBytes']:
        """
        The generated random key.
        """
        return pulumi.get(self, "key")

