from .addwidgets_ps import icons_path
# -*- coding: utf-8 -*-

################################################################################
## Form generated from reading UI file 'gCalVifXhOuH.ui'
##
## Created by: Qt User Interface Compiler version 6.3.1
##
## WARNING! All changes made in this file will be lost when recompiling UI file!
################################################################################

from PySide6.QtCore import (QCoreApplication, QDate, QDateTime, QLocale,
    QMetaObject, QObject, QPoint, QRect,
    QSize, QTime, QUrl, Qt)
from PySide6.QtGui import (QAction, QBrush, QColor, QConicalGradient,
    QCursor, QFont, QFontDatabase, QGradient,
    QIcon, QImage, QKeySequence, QLinearGradient,
    QPainter, QPalette, QPixmap, QRadialGradient,
    QTransform)
from PySide6.QtWidgets import (QAbstractScrollArea, QApplication, QFrame, QHBoxLayout,
    QLabel, QMainWindow, QMenu, QMenuBar,
    QScrollArea, QSizePolicy, QSpacerItem, QStatusBar,
    QToolButton, QVBoxLayout, QWidget)

from .addwidgets_ps import (RichTextPushButton, myQSplitter)

class Ui_gCalVi(object):
    def setupUi(self, gCalVi):
        if not gCalVi.objectName():
            gCalVi.setObjectName(u"gCalVi")
        gCalVi.resize(1200, 800)
        gCalVi.setMinimumSize(QSize(880, 0))
        font = QFont()
        font.setPointSize(11)
        gCalVi.setFont(font)
        icon = QIcon()
        icon.addFile(u""+ icons_path +"icon_CalVi.png", QSize(), QIcon.Normal, QIcon.Off)
        gCalVi.setWindowIcon(icon)
        gCalVi.setUnifiedTitleAndToolBarOnMac(False)
        self.actionExit = QAction(gCalVi)
        self.actionExit.setObjectName(u"actionExit")
        self.aExit = QAction(gCalVi)
        self.aExit.setObjectName(u"aExit")
        icon1 = QIcon()
        icon1.addFile(u""+ icons_path +"quit.png", QSize(), QIcon.Normal, QIcon.Off)
        self.aExit.setIcon(icon1)
        self.aExit.setShortcutVisibleInContextMenu(True)
        self.actionSave = QAction(gCalVi)
        self.actionSave.setObjectName(u"actionSave")
        icon2 = QIcon()
        icon2.addFile(u""+ icons_path +"save.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionSave.setIcon(icon2)
        self.actionSave.setShortcutVisibleInContextMenu(True)
        self.actionLoad = QAction(gCalVi)
        self.actionLoad.setObjectName(u"actionLoad")
        icon3 = QIcon()
        icon3.addFile(u""+ icons_path +"open.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionLoad.setIcon(icon3)
        self.actionLoad.setShortcutVisibleInContextMenu(True)
        self.actionNew = QAction(gCalVi)
        self.actionNew.setObjectName(u"actionNew")
        icon4 = QIcon()
        icon4.addFile(u""+ icons_path +"new.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionNew.setIcon(icon4)
        self.actionNew.setShortcutVisibleInContextMenu(True)
        self.actionAbout = QAction(gCalVi)
        self.actionAbout.setObjectName(u"actionAbout")
        icon5 = QIcon()
        icon5.addFile(u""+ icons_path +"about.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionAbout.setIcon(icon5)
        self.actionAbout.setShortcutVisibleInContextMenu(True)
        self.actionGuide = QAction(gCalVi)
        self.actionGuide.setObjectName(u"actionGuide")
        icon6 = QIcon()
        icon6.addFile(u""+ icons_path +"guide.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionGuide.setIcon(icon6)
        self.actionSave_as = QAction(gCalVi)
        self.actionSave_as.setObjectName(u"actionSave_as")
        icon7 = QIcon()
        icon7.addFile(u""+ icons_path +"saveas.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionSave_as.setIcon(icon7)
        self.actionSave_as.setShortcutVisibleInContextMenu(True)
        self.actionClose = QAction(gCalVi)
        self.actionClose.setObjectName(u"actionClose")
        icon8 = QIcon()
        icon8.addFile(u""+ icons_path +"close_project.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionClose.setIcon(icon8)
        self.actionClose.setShortcutVisibleInContextMenu(True)
        self.actionPaIRS_Run = QAction(gCalVi)
        self.actionPaIRS_Run.setObjectName(u"actionPaIRS_Run")
        icon9 = QIcon()
        icon9.addFile(u""+ icons_path +"normal_run.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionPaIRS_Run.setIcon(icon9)
        self.actionPaIRS_Clean_run = QAction(gCalVi)
        self.actionPaIRS_Clean_run.setObjectName(u"actionPaIRS_Clean_run")
        icon10 = QIcon()
        icon10.addFile(u""+ icons_path +"clean_run.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionPaIRS_Clean_run.setIcon(icon10)
        self.actionPaIRS_Debug_run = QAction(gCalVi)
        self.actionPaIRS_Debug_run.setObjectName(u"actionPaIRS_Debug_run")
        icon11 = QIcon()
        icon11.addFile(u""+ icons_path +"debug_run.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionPaIRS_Debug_run.setIcon(icon11)
        self.actionCalVi_Run = QAction(gCalVi)
        self.actionCalVi_Run.setObjectName(u"actionCalVi_Run")
        self.actionCalVi_Run.setIcon(icon9)
        self.actionCalVi_Clean_run = QAction(gCalVi)
        self.actionCalVi_Clean_run.setObjectName(u"actionCalVi_Clean_run")
        self.actionCalVi_Clean_run.setIcon(icon10)
        self.actionCalVi_Debug_run = QAction(gCalVi)
        self.actionCalVi_Debug_run.setObjectName(u"actionCalVi_Debug_run")
        self.actionCalVi_Debug_run.setIcon(icon11)
        self.actionChanges = QAction(gCalVi)
        self.actionChanges.setObjectName(u"actionChanges")
        icon12 = QIcon()
        icon12.addFile(u""+ icons_path +"news.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionChanges.setIcon(icon12)
        self.centralwidget = QWidget(gCalVi)
        self.centralwidget.setObjectName(u"centralwidget")
        self.centralwidget.setMinimumSize(QSize(880, 0))
        self.Clayout = QVBoxLayout(self.centralwidget)
        self.Clayout.setSpacing(5)
        self.Clayout.setObjectName(u"Clayout")
        self.Clayout.setContentsMargins(10, 5, 10, 0)
        self.w_Buttons_Run = QWidget(self.centralwidget)
        self.w_Buttons_Run.setObjectName(u"w_Buttons_Run")
        self.w_Buttons_Run.setMinimumSize(QSize(600, 40))
        self.w_Buttons_Run.setMaximumSize(QSize(16777215, 40))
        self.horizontalLayout_10 = QHBoxLayout(self.w_Buttons_Run)
        self.horizontalLayout_10.setSpacing(10)
        self.horizontalLayout_10.setObjectName(u"horizontalLayout_10")
        self.horizontalLayout_10.setContentsMargins(0, 0, 0, 0)
        self.logo = QLabel(self.w_Buttons_Run)
        self.logo.setObjectName(u"logo")
        self.logo.setMinimumSize(QSize(90, 30))
        self.logo.setMaximumSize(QSize(90, 30))
        self.logo.setPixmap(QPixmap(u""+ icons_path +"logo_CalVi.png"))
        self.logo.setScaledContents(True)

        self.horizontalLayout_10.addWidget(self.logo)

        self.button_PaIRS_download = QToolButton(self.w_Buttons_Run)
        self.button_PaIRS_download.setObjectName(u"button_PaIRS_download")
        self.button_PaIRS_download.setMinimumSize(QSize(30, 30))
        self.button_PaIRS_download.setMaximumSize(QSize(30, 30))
        font1 = QFont()
        font1.setPointSize(16)
        self.button_PaIRS_download.setFont(font1)
        self.button_PaIRS_download.setStyleSheet(u"border: none")
        icon13 = QIcon()
        icon13.addFile(u""+ icons_path +"flaticon_PaIRS_download.png", QSize(), QIcon.Normal, QIcon.Off)
        self.button_PaIRS_download.setIcon(icon13)
        self.button_PaIRS_download.setIconSize(QSize(24, 24))
        self.button_PaIRS_download.setCheckable(False)

        self.horizontalLayout_10.addWidget(self.button_PaIRS_download)

        self.w_bf = QWidget(self.w_Buttons_Run)
        self.w_bf.setObjectName(u"w_bf")
        self.w_bf.setMinimumSize(QSize(60, 0))
        self.bfLayout = QHBoxLayout(self.w_bf)
        self.bfLayout.setSpacing(3)
        self.bfLayout.setObjectName(u"bfLayout")
        self.bfLayout.setContentsMargins(0, 0, 0, 0)

        self.horizontalLayout_10.addWidget(self.w_bf)

        self.button_import = QToolButton(self.w_Buttons_Run)
        self.button_import.setObjectName(u"button_import")
        self.button_import.setMinimumSize(QSize(30, 30))
        self.button_import.setMaximumSize(QSize(30, 30))
        self.button_import.setFont(font1)
        icon14 = QIcon()
        icon14.addFile(u""+ icons_path +"import_blue.png", QSize(), QIcon.Normal, QIcon.Off)
        self.button_import.setIcon(icon14)
        self.button_import.setIconSize(QSize(24, 24))
        self.button_import.setCheckable(False)

        self.horizontalLayout_10.addWidget(self.button_import)

        self.button_default_sizes = QToolButton(self.w_Buttons_Run)
        self.button_default_sizes.setObjectName(u"button_default_sizes")
        self.button_default_sizes.setMinimumSize(QSize(30, 30))
        self.button_default_sizes.setMaximumSize(QSize(30, 30))
        self.button_default_sizes.setFont(font1)
        icon15 = QIcon()
        icon15.addFile(u""+ icons_path +"default_sizes.png", QSize(), QIcon.Normal, QIcon.Off)
        self.button_default_sizes.setIcon(icon15)
        self.button_default_sizes.setIconSize(QSize(24, 24))
        self.button_default_sizes.setCheckable(False)

        self.horizontalLayout_10.addWidget(self.button_default_sizes)

        self.button_dock = QToolButton(self.w_Buttons_Run)
        self.button_dock.setObjectName(u"button_dock")
        self.button_dock.setMinimumSize(QSize(30, 30))
        self.button_dock.setMaximumSize(QSize(30, 30))
        self.button_dock.setFont(font1)
        icon16 = QIcon()
        icon16.addFile(u""+ icons_path +"undock_tabs.png", QSize(), QIcon.Normal, QIcon.Off)
        self.button_dock.setIcon(icon16)
        self.button_dock.setIconSize(QSize(20, 20))
        self.button_dock.setCheckable(False)

        self.horizontalLayout_10.addWidget(self.button_dock)

        self.button_Input = RichTextPushButton(self.w_Buttons_Run)
        self.button_Input.setObjectName(u"button_Input")
        sizePolicy = QSizePolicy(QSizePolicy.Preferred, QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.button_Input.sizePolicy().hasHeightForWidth())
        self.button_Input.setSizePolicy(sizePolicy)
        self.button_Input.setMinimumSize(QSize(50, 40))
        self.button_Input.setMaximumSize(QSize(130, 40))
        font2 = QFont()
        font2.setFamilies([u"Arial"])
        font2.setPointSize(13)
        font2.setBold(False)
        self.button_Input.setFont(font2)
        self.button_Input.setStyleSheet(u"")
        icon17 = QIcon()
        icon17.addFile(u""+ icons_path +"import_logo.png", QSize(), QIcon.Normal, QIcon.Off)
        self.button_Input.setIcon(icon17)
        self.button_Input.setIconSize(QSize(15, 15))
        self.button_Input.setCheckable(False)

        self.horizontalLayout_10.addWidget(self.button_Input)

        self.button_Process = RichTextPushButton(self.w_Buttons_Run)
        self.button_Process.setObjectName(u"button_Process")
        sizePolicy.setHeightForWidth(self.button_Process.sizePolicy().hasHeightForWidth())
        self.button_Process.setSizePolicy(sizePolicy)
        self.button_Process.setMinimumSize(QSize(50, 40))
        self.button_Process.setMaximumSize(QSize(130, 40))
        self.button_Process.setFont(font2)
        self.button_Process.setStyleSheet(u"")
        icon18 = QIcon()
        icon18.addFile(u""+ icons_path +"process_icon.png", QSize(), QIcon.Normal, QIcon.Off)
        self.button_Process.setIcon(icon18)
        self.button_Process.setIconSize(QSize(15, 15))
        self.button_Process.setCheckable(False)

        self.horizontalLayout_10.addWidget(self.button_Process)

        self.button_Vis = RichTextPushButton(self.w_Buttons_Run)
        self.button_Vis.setObjectName(u"button_Vis")
        sizePolicy.setHeightForWidth(self.button_Vis.sizePolicy().hasHeightForWidth())
        self.button_Vis.setSizePolicy(sizePolicy)
        self.button_Vis.setMinimumSize(QSize(50, 40))
        self.button_Vis.setMaximumSize(QSize(130, 40))
        self.button_Vis.setFont(font2)
        self.button_Vis.setStyleSheet(u"")
        icon19 = QIcon()
        icon19.addFile(u""+ icons_path +"vect_field.png", QSize(), QIcon.Normal, QIcon.Off)
        self.button_Vis.setIcon(icon19)
        self.button_Vis.setIconSize(QSize(15, 15))
        self.button_Vis.setCheckable(False)

        self.horizontalLayout_10.addWidget(self.button_Vis)

        self.button_Run = RichTextPushButton(self.w_Buttons_Run)
        self.button_Run.setObjectName(u"button_Run")
        sizePolicy.setHeightForWidth(self.button_Run.sizePolicy().hasHeightForWidth())
        self.button_Run.setSizePolicy(sizePolicy)
        self.button_Run.setMinimumSize(QSize(50, 40))
        self.button_Run.setMaximumSize(QSize(130, 40))
        font3 = QFont()
        font3.setFamilies([u"Arial"])
        font3.setPointSize(15)
        self.button_Run.setFont(font3)
        icon20 = QIcon()
        icon20.addFile(u""+ icons_path +"play.png", QSize(), QIcon.Normal, QIcon.Off)
        self.button_Run.setIcon(icon20)

        self.horizontalLayout_10.addWidget(self.button_Run)

        self.button_Abort = RichTextPushButton(self.w_Buttons_Run)
        self.button_Abort.setObjectName(u"button_Abort")
        sizePolicy.setHeightForWidth(self.button_Abort.sizePolicy().hasHeightForWidth())
        self.button_Abort.setSizePolicy(sizePolicy)
        self.button_Abort.setMinimumSize(QSize(50, 40))
        self.button_Abort.setMaximumSize(QSize(130, 40))
        self.button_Abort.setFont(font3)
        icon21 = QIcon()
        icon21.addFile(u""+ icons_path +"abort.png", QSize(), QIcon.Normal, QIcon.Off)
        self.button_Abort.setIcon(icon21)

        self.horizontalLayout_10.addWidget(self.button_Abort)

        self.label_updating_import = QLabel(self.w_Buttons_Run)
        self.label_updating_import.setObjectName(u"label_updating_import")
        self.label_updating_import.setMinimumSize(QSize(40, 40))
        self.label_updating_import.setMaximumSize(QSize(40, 40))

        self.horizontalLayout_10.addWidget(self.label_updating_import)

        self.label_updating_pairs = QLabel(self.w_Buttons_Run)
        self.label_updating_pairs.setObjectName(u"label_updating_pairs")
        self.label_updating_pairs.setMinimumSize(QSize(40, 40))
        self.label_updating_pairs.setMaximumSize(QSize(40, 40))

        self.horizontalLayout_10.addWidget(self.label_updating_pairs)

        self.hs_logo = QSpacerItem(20, 30, QSizePolicy.Expanding, QSizePolicy.Minimum)

        self.horizontalLayout_10.addItem(self.hs_logo)


        self.Clayout.addWidget(self.w_Buttons_Run)

        self.lab_happy_days = QLabel(self.centralwidget)
        self.lab_happy_days.setObjectName(u"lab_happy_days")
        self.lab_happy_days.setMinimumSize(QSize(0, 20))
        self.lab_happy_days.setMaximumSize(QSize(16777215, 20))
        font4 = QFont()
        font4.setPointSize(11)
        font4.setItalic(False)
        font4.setUnderline(False)
        self.lab_happy_days.setFont(font4)

        self.Clayout.addWidget(self.lab_happy_days)

        self.w_Operating_Tabs = QWidget(self.centralwidget)
        self.w_Operating_Tabs.setObjectName(u"w_Operating_Tabs")
        sizePolicy.setHeightForWidth(self.w_Operating_Tabs.sizePolicy().hasHeightForWidth())
        self.w_Operating_Tabs.setSizePolicy(sizePolicy)
        self.w_Operating_Tabs.setMinimumSize(QSize(500, 0))
        self.oplay = QVBoxLayout(self.w_Operating_Tabs)
        self.oplay.setSpacing(5)
        self.oplay.setObjectName(u"oplay")
        self.oplay.setContentsMargins(0, 0, 0, 0)
        self.scrollArea = QScrollArea(self.w_Operating_Tabs)
        self.scrollArea.setObjectName(u"scrollArea")
        self.scrollArea.setMinimumSize(QSize(0, 0))
        self.scrollArea.setStyleSheet(u" QScrollArea {\n"
"        border: 1pix solid gray;\n"
"    }\n"
"\n"
"QScrollBar:horizontal\n"
"    {\n"
"        height: 15px;\n"
"        margin: 3px 0px 3px 0px;\n"
"        border: 1px transparent #2A2929;\n"
"        border-radius: 4px;\n"
"        background-color:  rgba(200,200,200,50);    /* #2A2929; */\n"
"    }\n"
"\n"
"QScrollBar::handle:horizontal\n"
"    {\n"
"        background-color: rgba(180,180,180,180);      /* #605F5F; */\n"
"        min-width: 5px;\n"
"        border-radius: 4px;\n"
"    }\n"
"\n"
"QScrollBar:vertical\n"
"    {\n"
"        background-color: rgba(200,200,200,50);  ;\n"
"        width: 15px;\n"
"        margin: 10px 3px 10px 3px;\n"
"        border: 1px transparent #2A2929;\n"
"        border-radius: 4px;\n"
"    }\n"
"\n"
"QScrollBar::handle:vertical\n"
"    {\n"
"        background-color: rgba(180,180,180,180);         /* #605F5F; */\n"
"        min-height: 5px;\n"
"        border-radius: 4px;\n"
"    }\n"
"\n"
"QScrollBar::add-line {\n"
"        border: none;\n"
"        "
                        "background: none;\n"
"    }\n"
"\n"
"QScrollBar::sub-line {\n"
"        border: none;\n"
"        background: none;\n"
"    }\n"
"")
        self.scrollArea.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.scrollArea.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOn)
        self.scrollArea.setSizeAdjustPolicy(QAbstractScrollArea.AdjustIgnored)
        self.scrollArea.setWidgetResizable(True)
        self.scrollAreaWidgetContents = QWidget()
        self.scrollAreaWidgetContents.setObjectName(u"scrollAreaWidgetContents")
        self.scrollAreaWidgetContents.setGeometry(QRect(0, 0, 4000, 654))
        self.scrollAreaWidgetContents.setMinimumSize(QSize(4000, 0))
        self.flay = QHBoxLayout(self.scrollAreaWidgetContents)
        self.flay.setSpacing(0)
        self.flay.setObjectName(u"flay")
        self.flay.setContentsMargins(0, 0, 0, 0)
        self.secondary_splitter = myQSplitter(self.scrollAreaWidgetContents)
        self.secondary_splitter.setObjectName(u"secondary_splitter")
        self.secondary_splitter.setOrientation(Qt.Horizontal)
        self.secondary_splitter.setOpaqueResize(False)
        self.secondary_splitter.setHandleWidth(10)
        self.secondary_splitter.setChildrenCollapsible(False)
        self.f_ImportTab = QFrame(self.secondary_splitter)
        self.f_ImportTab.setObjectName(u"f_ImportTab")
        self.f_ImportTab.setMinimumSize(QSize(500, 0))
        self.f_ImportTab.setMaximumSize(QSize(750, 16777215))
        self.f_ImportTab.setStyleSheet(u"QFrame#f_ImportTab{\n"
"border: 1px solid gray;\n"
"border-radius: 15px;\n"
"}")
        self.fImport_lay = QHBoxLayout(self.f_ImportTab)
        self.fImport_lay.setObjectName(u"fImport_lay")
        self.fImport_lay.setContentsMargins(0, 0, 0, 0)
        self.secondary_splitter.addWidget(self.f_ImportTab)
        self.f_ProcessTab = QFrame(self.secondary_splitter)
        self.f_ProcessTab.setObjectName(u"f_ProcessTab")
        self.f_ProcessTab.setMinimumSize(QSize(500, 0))
        self.f_ProcessTab.setMaximumSize(QSize(750, 16777215))
        self.f_ProcessTab.setStyleSheet(u"QFrame#f_ProcessTab{\n"
"border: 1px solid gray;\n"
"border-radius: 15px;\n"
"}")
        self.fProcess_lay = QHBoxLayout(self.f_ProcessTab)
        self.fProcess_lay.setObjectName(u"fProcess_lay")
        self.fProcess_lay.setContentsMargins(0, 0, 0, 0)
        self.secondary_splitter.addWidget(self.f_ProcessTab)
        self.f_VisTab = QFrame(self.secondary_splitter)
        self.f_VisTab.setObjectName(u"f_VisTab")
        self.f_VisTab.setMinimumSize(QSize(1050, 0))
        self.f_VisTab.setMaximumSize(QSize(2000, 16777215))
        self.f_VisTab.setStyleSheet(u"QFrame#f_VisTab{\n"
"border: 1px solid gray;\n"
"border-radius: 15px;\n"
"}")
        self.f_VisTab.setFrameShape(QFrame.Box)
        self.fVis_lay = QHBoxLayout(self.f_VisTab)
        self.fVis_lay.setObjectName(u"fVis_lay")
        self.fVis_lay.setContentsMargins(0, 0, 0, 0)
        self.secondary_splitter.addWidget(self.f_VisTab)
        self.f_empty = QFrame(self.secondary_splitter)
        self.f_empty.setObjectName(u"f_empty")
        sizePolicy.setHeightForWidth(self.f_empty.sizePolicy().hasHeightForWidth())
        self.f_empty.setSizePolicy(sizePolicy)
        self.f_empty.setMinimumSize(QSize(0, 0))
        self.f_empty.setStyleSheet(u"")
        self.secondary_splitter.addWidget(self.f_empty)

        self.flay.addWidget(self.secondary_splitter)

        self.scrollArea.setWidget(self.scrollAreaWidgetContents)

        self.oplay.addWidget(self.scrollArea)


        self.Clayout.addWidget(self.w_Operating_Tabs)

        gCalVi.setCentralWidget(self.centralwidget)
        self.statusbar = QStatusBar(gCalVi)
        self.statusbar.setObjectName(u"statusbar")
        self.statusbar.setMinimumSize(QSize(0, 30))
        font5 = QFont()
        font5.setPointSize(11)
        font5.setBold(True)
        font5.setItalic(True)
        self.statusbar.setFont(font5)
        self.statusbar.setStyleSheet(u"color: rgb(0, 0, 255);")
        gCalVi.setStatusBar(self.statusbar)
        self.menubar = QMenuBar(gCalVi)
        self.menubar.setObjectName(u"menubar")
        self.menubar.setGeometry(QRect(0, 0, 1200, 26))
        self.menubar.setMinimumSize(QSize(0, 20))
        self.menubar.setFont(font)
        self.menubar.setNativeMenuBar(False)
        self.menuFile = QMenu(self.menubar)
        self.menuFile.setObjectName(u"menuFile")
        self.menuHelp = QMenu(self.menubar)
        self.menuHelp.setObjectName(u"menuHelp")
        self.menuPaIRS_UniNa = QMenu(self.menubar)
        self.menuPaIRS_UniNa.setObjectName(u"menuPaIRS_UniNa")
        self.menuPaIRS_UniNa.setTearOffEnabled(False)
        icon22 = QIcon()
        icon22.addFile(u""+ icons_path +"flaticon_PaIRS.png", QSize(), QIcon.Normal, QIcon.Off)
        self.menuPaIRS_UniNa.setIcon(icon22)
        self.menuPaIRS = QMenu(self.menuPaIRS_UniNa)
        self.menuPaIRS.setObjectName(u"menuPaIRS")
        self.menuPaIRS.setTearOffEnabled(False)
        icon23 = QIcon()
        icon23.addFile(u""+ icons_path +"logo_PaIRS.png", QSize(), QIcon.Normal, QIcon.Off)
        self.menuPaIRS.setIcon(icon23)
        self.menuCalVi = QMenu(self.menuPaIRS_UniNa)
        self.menuCalVi.setObjectName(u"menuCalVi")
        icon24 = QIcon()
        icon24.addFile(u""+ icons_path +"logo_CalVi.png", QSize(), QIcon.Normal, QIcon.Off)
        self.menuCalVi.setIcon(icon24)
        gCalVi.setMenuBar(self.menubar)

        self.menubar.addAction(self.menuPaIRS_UniNa.menuAction())
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.menuFile.addAction(self.actionNew)
        self.menuFile.addAction(self.actionLoad)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.actionSave_as)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionClose)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.aExit)
        self.menuHelp.addAction(self.actionChanges)
        self.menuHelp.addAction(self.actionGuide)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionAbout)
        self.menuPaIRS_UniNa.addAction(self.menuPaIRS.menuAction())
        self.menuPaIRS_UniNa.addAction(self.menuCalVi.menuAction())
        self.menuPaIRS.addAction(self.actionPaIRS_Run)
        self.menuPaIRS.addAction(self.actionPaIRS_Clean_run)
        self.menuPaIRS.addAction(self.actionPaIRS_Debug_run)
        self.menuCalVi.addAction(self.actionCalVi_Run)
        self.menuCalVi.addAction(self.actionCalVi_Clean_run)
        self.menuCalVi.addAction(self.actionCalVi_Debug_run)

        self.retranslateUi(gCalVi)

        QMetaObject.connectSlotsByName(gCalVi)
    # setupUi

    def retranslateUi(self, gCalVi):
        gCalVi.setWindowTitle(QCoreApplication.translate("gCalVi", u"CalVi", None))
        self.actionExit.setText(QCoreApplication.translate("gCalVi", u"Exit", None))
        self.aExit.setText(QCoreApplication.translate("gCalVi", u"Exit", None))
#if QT_CONFIG(shortcut)
        self.aExit.setShortcut(QCoreApplication.translate("gCalVi", u"Alt+F4", None))
#endif // QT_CONFIG(shortcut)
        self.actionSave.setText(QCoreApplication.translate("gCalVi", u"Save", None))
#if QT_CONFIG(shortcut)
        self.actionSave.setShortcut(QCoreApplication.translate("gCalVi", u"Ctrl+S", None))
#endif // QT_CONFIG(shortcut)
        self.actionLoad.setText(QCoreApplication.translate("gCalVi", u"Open", None))
#if QT_CONFIG(shortcut)
        self.actionLoad.setShortcut(QCoreApplication.translate("gCalVi", u"Ctrl+B", None))
#endif // QT_CONFIG(shortcut)
        self.actionNew.setText(QCoreApplication.translate("gCalVi", u"New", None))
#if QT_CONFIG(shortcut)
        self.actionNew.setShortcut(QCoreApplication.translate("gCalVi", u"Ctrl+N", None))
#endif // QT_CONFIG(shortcut)
        self.actionAbout.setText(QCoreApplication.translate("gCalVi", u"About CalVi", None))
#if QT_CONFIG(shortcut)
        self.actionAbout.setShortcut(QCoreApplication.translate("gCalVi", u"Ctrl+H", None))
#endif // QT_CONFIG(shortcut)
        self.actionGuide.setText(QCoreApplication.translate("gCalVi", u"Guide", None))
#if QT_CONFIG(shortcut)
        self.actionGuide.setShortcut(QCoreApplication.translate("gCalVi", u"Ctrl+G", None))
#endif // QT_CONFIG(shortcut)
        self.actionSave_as.setText(QCoreApplication.translate("gCalVi", u"Save as...", None))
#if QT_CONFIG(shortcut)
        self.actionSave_as.setShortcut(QCoreApplication.translate("gCalVi", u"Ctrl+Shift+S", None))
#endif // QT_CONFIG(shortcut)
        self.actionClose.setText(QCoreApplication.translate("gCalVi", u"Close", None))
#if QT_CONFIG(shortcut)
        self.actionClose.setShortcut(QCoreApplication.translate("gCalVi", u"Ctrl+Esc", None))
#endif // QT_CONFIG(shortcut)
        self.actionPaIRS_Run.setText(QCoreApplication.translate("gCalVi", u"Normal run", None))
        self.actionPaIRS_Clean_run.setText(QCoreApplication.translate("gCalVi", u"Clean run", None))
        self.actionPaIRS_Debug_run.setText(QCoreApplication.translate("gCalVi", u"Debug run", None))
        self.actionCalVi_Run.setText(QCoreApplication.translate("gCalVi", u"Normal run", None))
        self.actionCalVi_Clean_run.setText(QCoreApplication.translate("gCalVi", u"Clean run", None))
        self.actionCalVi_Debug_run.setText(QCoreApplication.translate("gCalVi", u"Debug run", None))
        self.actionChanges.setText(QCoreApplication.translate("gCalVi", u"Changes", None))
        self.logo.setText("")
#if QT_CONFIG(tooltip)
        self.button_PaIRS_download.setToolTip(QCoreApplication.translate("gCalVi", u"Download the latest version of PaIRS-UniNa", None))
#endif // QT_CONFIG(tooltip)
        self.button_PaIRS_download.setText("")
#if QT_CONFIG(tooltip)
        self.button_import.setToolTip(QCoreApplication.translate("gCalVi", u"Import saved project", None))
#endif // QT_CONFIG(tooltip)
        self.button_import.setText("")
#if QT_CONFIG(shortcut)
        self.button_import.setShortcut(QCoreApplication.translate("gCalVi", u"Ctrl+O", None))
#endif // QT_CONFIG(shortcut)
#if QT_CONFIG(tooltip)
        self.button_default_sizes.setToolTip(QCoreApplication.translate("gCalVi", u"Change sizes", None))
#endif // QT_CONFIG(tooltip)
        self.button_default_sizes.setText("")
#if QT_CONFIG(shortcut)
        self.button_default_sizes.setShortcut(QCoreApplication.translate("gCalVi", u"Ctrl+Space", None))
#endif // QT_CONFIG(shortcut)
#if QT_CONFIG(tooltip)
        self.button_dock.setToolTip(QCoreApplication.translate("gCalVi", u"Dock/undock tabs", None))
#endif // QT_CONFIG(tooltip)
        self.button_dock.setText("")
#if QT_CONFIG(shortcut)
        self.button_dock.setShortcut(QCoreApplication.translate("gCalVi", u"Ctrl+U", None))
#endif // QT_CONFIG(shortcut)
#if QT_CONFIG(tooltip)
        self.button_Input.setToolTip(QCoreApplication.translate("gCalVi", u"Input tab", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.button_Input.setStatusTip("")
#endif // QT_CONFIG(statustip)
        self.button_Input.setText(QCoreApplication.translate("gCalVi", u"Input", None))
#if QT_CONFIG(shortcut)
        self.button_Input.setShortcut(QCoreApplication.translate("gCalVi", u"Ctrl+I", None))
#endif // QT_CONFIG(shortcut)
#if QT_CONFIG(tooltip)
        self.button_Process.setToolTip(QCoreApplication.translate("gCalVi", u"Process tab", None))
#endif // QT_CONFIG(tooltip)
        self.button_Process.setText(QCoreApplication.translate("gCalVi", u"Process", None))
#if QT_CONFIG(shortcut)
        self.button_Process.setShortcut(QCoreApplication.translate("gCalVi", u"Ctrl+P", None))
#endif // QT_CONFIG(shortcut)
#if QT_CONFIG(tooltip)
        self.button_Vis.setToolTip(QCoreApplication.translate("gCalVi", u"Vis tab", None))
#endif // QT_CONFIG(tooltip)
        self.button_Vis.setText(QCoreApplication.translate("gCalVi", u"Vis", None))
#if QT_CONFIG(shortcut)
        self.button_Vis.setShortcut(QCoreApplication.translate("gCalVi", u"Ctrl+K", None))
#endif // QT_CONFIG(shortcut)
#if QT_CONFIG(tooltip)
        self.button_Run.setToolTip(QCoreApplication.translate("gCalVi", u"Run and enjoy!", None))
#endif // QT_CONFIG(tooltip)
        self.button_Run.setText(QCoreApplication.translate("gCalVi", u"Run", None))
#if QT_CONFIG(shortcut)
        self.button_Run.setShortcut(QCoreApplication.translate("gCalVi", u"Ctrl+Return", None))
#endif // QT_CONFIG(shortcut)
#if QT_CONFIG(tooltip)
        self.button_Abort.setToolTip(QCoreApplication.translate("gCalVi", u"Stop the process without saving results", None))
#endif // QT_CONFIG(tooltip)
        self.button_Abort.setText(QCoreApplication.translate("gCalVi", u"Abort", None))
#if QT_CONFIG(shortcut)
        self.button_Abort.setShortcut(QCoreApplication.translate("gCalVi", u"Ctrl+Del", None))
#endif // QT_CONFIG(shortcut)
        self.label_updating_import.setText("")
        self.label_updating_pairs.setText("")
        self.lab_happy_days.setText(QCoreApplication.translate("gCalVi", u"Happy Birthday!", None))
        self.menuFile.setTitle(QCoreApplication.translate("gCalVi", u"File", None))
        self.menuHelp.setTitle(QCoreApplication.translate("gCalVi", u"?", None))
        self.menuPaIRS_UniNa.setTitle("")
        self.menuPaIRS.setTitle(QCoreApplication.translate("gCalVi", u"PaIRS", None))
        self.menuCalVi.setTitle(QCoreApplication.translate("gCalVi", u"CalVi", None))
    # retranslateUi

