"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from .basesdk import BaseSDK
from clerk_dev import models
from clerk_dev._hooks import HookContext
from clerk_dev.types import Nullable
import clerk_dev.utils as utils
from typing import List, Optional

class Templates(BaseSDK):
    
    
    def list(
        self, *,
        template_type: models.TemplateType,
        server_url: Optional[str] = None,
    ) -> List[models.Template]:
        r"""List all templates

        Returns a list of all templates.
        The templates are returned sorted by position.

        :param template_type: The type of templates to list (email or SMS)
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.GetTemplateListRequest(
            template_type=template_type,
        )
        
        req = self.build_request(
            method="GET",
            path="/templates/{template_type}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="GetTemplateList", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","401","422","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[List[models.Template]])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code in [400, 401, 422]:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
                out = models.ClerkErrors(data=data)
                  
                raise out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def list_async(
        self, *,
        template_type: models.TemplateType,
        server_url: Optional[str] = None,
    ) -> List[models.Template]:
        r"""List all templates

        Returns a list of all templates.
        The templates are returned sorted by position.

        :param template_type: The type of templates to list (email or SMS)
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.GetTemplateListRequest(
            template_type=template_type,
        )
        
        req = self.build_request(
            method="GET",
            path="/templates/{template_type}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="GetTemplateList", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","401","422","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[List[models.Template]])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code in [400, 401, 422]:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
                out = models.ClerkErrors(data=data)
                  
                raise out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    def get(
        self, *,
        template_type: models.PathParamTemplateType,
        slug: str,
        server_url: Optional[str] = None,
    ) -> models.Template:
        r"""Retrieve a template

        Returns the details of a template

        :param template_type: The type of templates to retrieve (email or SMS)
        :param slug: The slug (i.e. machine-friendly name) of the template to retrieve
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.GetTemplateRequest(
            template_type=template_type,
            slug=slug,
        )
        
        req = self.build_request(
            method="GET",
            path="/templates/{template_type}/{slug}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="GetTemplate", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","401","404","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[models.Template])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code in [400, 401, 404]:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
                out = models.ClerkErrors(data=data)
                  
                raise out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def get_async(
        self, *,
        template_type: models.PathParamTemplateType,
        slug: str,
        server_url: Optional[str] = None,
    ) -> models.Template:
        r"""Retrieve a template

        Returns the details of a template

        :param template_type: The type of templates to retrieve (email or SMS)
        :param slug: The slug (i.e. machine-friendly name) of the template to retrieve
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.GetTemplateRequest(
            template_type=template_type,
            slug=slug,
        )
        
        req = self.build_request(
            method="GET",
            path="/templates/{template_type}/{slug}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="GetTemplate", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","401","404","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[models.Template])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code in [400, 401, 404]:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
                out = models.ClerkErrors(data=data)
                  
                raise out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    def upsert(
        self, *,
        template_type: models.UpsertTemplatePathParamTemplateType,
        slug: str,
        body: Optional[str] = None,
        delivered_by_clerk: Optional[Nullable[bool]] = None,
        from_email_name: Optional[str] = None,
        markup: Optional[Nullable[str]] = None,
        name: Optional[str] = None,
        reply_to_email_name: Optional[str] = None,
        subject: Optional[Nullable[str]] = None,
        server_url: Optional[str] = None,
    ) -> models.Template:
        r"""Update a template for a given type and slug

        Updates the existing template of the given type and slug

        :param template_type: The type of template to update
        :param slug: The slug of the template to update
        :param body: The template body before variable interpolation
        :param delivered_by_clerk: Whether Clerk should deliver emails or SMS messages based on the current template
        :param from_email_name: The local part of the From email address that will be used for emails. For example, in the address 'hello@example.com', the local part is 'hello'. Applicable only to email templates.
        :param markup: The editor markup used to generate the body of the template
        :param name: The user-friendly name of the template
        :param reply_to_email_name: The local part of the Reply To email address that will be used for emails. For example, in the address 'hello@example.com', the local part is 'hello'. Applicable only to email templates.
        :param subject: The email subject. Applicable only to email templates.
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.UpsertTemplateRequest(
            template_type=template_type,
            slug=slug,
            request_body=models.UpsertTemplateRequestBody(
                body=body,
                delivered_by_clerk=delivered_by_clerk,
                from_email_name=from_email_name,
                markup=markup,
                name=name,
                reply_to_email_name=reply_to_email_name,
                subject=subject,
            ),
        )
        
        req = self.build_request(
            method="PUT",
            path="/templates/{template_type}/{slug}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request.request_body, False, True, "json", Optional[models.UpsertTemplateRequestBody]),
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="UpsertTemplate", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","401","402","403","404","422","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[models.Template])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code in [400, 401, 402, 403, 404, 422]:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
                out = models.ClerkErrors(data=data)
                  
                raise out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def upsert_async(
        self, *,
        template_type: models.UpsertTemplatePathParamTemplateType,
        slug: str,
        body: Optional[str] = None,
        delivered_by_clerk: Optional[Nullable[bool]] = None,
        from_email_name: Optional[str] = None,
        markup: Optional[Nullable[str]] = None,
        name: Optional[str] = None,
        reply_to_email_name: Optional[str] = None,
        subject: Optional[Nullable[str]] = None,
        server_url: Optional[str] = None,
    ) -> models.Template:
        r"""Update a template for a given type and slug

        Updates the existing template of the given type and slug

        :param template_type: The type of template to update
        :param slug: The slug of the template to update
        :param body: The template body before variable interpolation
        :param delivered_by_clerk: Whether Clerk should deliver emails or SMS messages based on the current template
        :param from_email_name: The local part of the From email address that will be used for emails. For example, in the address 'hello@example.com', the local part is 'hello'. Applicable only to email templates.
        :param markup: The editor markup used to generate the body of the template
        :param name: The user-friendly name of the template
        :param reply_to_email_name: The local part of the Reply To email address that will be used for emails. For example, in the address 'hello@example.com', the local part is 'hello'. Applicable only to email templates.
        :param subject: The email subject. Applicable only to email templates.
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.UpsertTemplateRequest(
            template_type=template_type,
            slug=slug,
            request_body=models.UpsertTemplateRequestBody(
                body=body,
                delivered_by_clerk=delivered_by_clerk,
                from_email_name=from_email_name,
                markup=markup,
                name=name,
                reply_to_email_name=reply_to_email_name,
                subject=subject,
            ),
        )
        
        req = self.build_request(
            method="PUT",
            path="/templates/{template_type}/{slug}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request.request_body, False, True, "json", Optional[models.UpsertTemplateRequestBody]),
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="UpsertTemplate", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","401","402","403","404","422","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[models.Template])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code in [400, 401, 402, 403, 404, 422]:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
                out = models.ClerkErrors(data=data)
                  
                raise out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    def preview(
        self, *,
        template_type: str,
        slug: str,
        body: Optional[str] = None,
        from_email_name: Optional[str] = None,
        reply_to_email_name: Optional[str] = None,
        subject: Optional[Nullable[str]] = None,
        server_url: Optional[str] = None,
    ) -> models.PreviewTemplateResponseBody:
        r"""Preview changes to a template

        Returns a preview of a template for a given template_type, slug and body

        :param template_type: The type of template to preview
        :param slug: The slug of the template to preview
        :param body: The template body before variable interpolation
        :param from_email_name: The local part of the From email address that will be used for emails. For example, in the address 'hello@example.com', the local part is 'hello'. Applicable only to email templates.
        :param reply_to_email_name: The local part of the Reply To email address that will be used for emails. For example, in the address 'hello@example.com', the local part is 'hello'. Applicable only to email templates.
        :param subject: The email subject. Applicable only to email templates.
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.PreviewTemplateRequest(
            template_type=template_type,
            slug=slug,
            request_body=models.PreviewTemplateRequestBody(
                body=body,
                from_email_name=from_email_name,
                reply_to_email_name=reply_to_email_name,
                subject=subject,
            ),
        )
        
        req = self.build_request(
            method="POST",
            path="/templates/{template_type}/{slug}/preview",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request.request_body, False, True, "json", Optional[models.PreviewTemplateRequestBody]),
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="PreviewTemplate", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","401","404","422","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[models.PreviewTemplateResponseBody])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code in [400, 401, 404, 422]:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
                out = models.ClerkErrors(data=data)
                  
                raise out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def preview_async(
        self, *,
        template_type: str,
        slug: str,
        body: Optional[str] = None,
        from_email_name: Optional[str] = None,
        reply_to_email_name: Optional[str] = None,
        subject: Optional[Nullable[str]] = None,
        server_url: Optional[str] = None,
    ) -> models.PreviewTemplateResponseBody:
        r"""Preview changes to a template

        Returns a preview of a template for a given template_type, slug and body

        :param template_type: The type of template to preview
        :param slug: The slug of the template to preview
        :param body: The template body before variable interpolation
        :param from_email_name: The local part of the From email address that will be used for emails. For example, in the address 'hello@example.com', the local part is 'hello'. Applicable only to email templates.
        :param reply_to_email_name: The local part of the Reply To email address that will be used for emails. For example, in the address 'hello@example.com', the local part is 'hello'. Applicable only to email templates.
        :param subject: The email subject. Applicable only to email templates.
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.PreviewTemplateRequest(
            template_type=template_type,
            slug=slug,
            request_body=models.PreviewTemplateRequestBody(
                body=body,
                from_email_name=from_email_name,
                reply_to_email_name=reply_to_email_name,
                subject=subject,
            ),
        )
        
        req = self.build_request(
            method="POST",
            path="/templates/{template_type}/{slug}/preview",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request.request_body, False, True, "json", Optional[models.PreviewTemplateRequestBody]),
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="PreviewTemplate", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","401","404","422","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[models.PreviewTemplateResponseBody])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code in [400, 401, 404, 422]:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
                out = models.ClerkErrors(data=data)
                  
                raise out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    def revert(
        self, *,
        template_type: models.RevertTemplatePathParamTemplateType,
        slug: str,
        server_url: Optional[str] = None,
    ) -> models.Template:
        r"""Revert a template

        Reverts an updated template to its default state

        :param template_type: The type of template to revert
        :param slug: The slug of the template to revert
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.RevertTemplateRequest(
            template_type=template_type,
            slug=slug,
        )
        
        req = self.build_request(
            method="POST",
            path="/templates/{template_type}/{slug}/revert",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="RevertTemplate", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","401","402","404","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[models.Template])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code in [400, 401, 402, 404]:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
                out = models.ClerkErrors(data=data)
                  
                raise out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def revert_async(
        self, *,
        template_type: models.RevertTemplatePathParamTemplateType,
        slug: str,
        server_url: Optional[str] = None,
    ) -> models.Template:
        r"""Revert a template

        Reverts an updated template to its default state

        :param template_type: The type of template to revert
        :param slug: The slug of the template to revert
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.RevertTemplateRequest(
            template_type=template_type,
            slug=slug,
        )
        
        req = self.build_request(
            method="POST",
            path="/templates/{template_type}/{slug}/revert",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="RevertTemplate", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","401","402","404","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[models.Template])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code in [400, 401, 402, 404]:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
                out = models.ClerkErrors(data=data)
                  
                raise out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    def toggle_delivery(
        self, *,
        template_type: models.ToggleTemplateDeliveryPathParamTemplateType,
        slug: str,
        delivered_by_clerk: Optional[Nullable[bool]] = None,
        server_url: Optional[str] = None,
    ) -> models.Template:
        r"""Toggle the delivery by Clerk for a template of a given type and slug

        Toggles the delivery by Clerk for a template of a given type and slug.
        If disabled, Clerk will not deliver the resulting email or SMS.
        The app developer will need to listen to the `email.created` or `sms.created` webhooks in order to handle delivery themselves.

        :param template_type: The type of template to toggle delivery for
        :param slug: The slug of the template for which to toggle delivery
        :param delivered_by_clerk: Whether Clerk should deliver emails or SMS messages based on the current template
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.ToggleTemplateDeliveryRequest(
            template_type=template_type,
            slug=slug,
            request_body=models.ToggleTemplateDeliveryRequestBody(
                delivered_by_clerk=delivered_by_clerk,
            ),
        )
        
        req = self.build_request(
            method="POST",
            path="/templates/{template_type}/{slug}/toggle_delivery",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request.request_body, False, True, "json", Optional[models.ToggleTemplateDeliveryRequestBody]),
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="ToggleTemplateDelivery", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","401","404","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[models.Template])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code in [400, 401, 404]:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
                out = models.ClerkErrors(data=data)
                  
                raise out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def toggle_delivery_async(
        self, *,
        template_type: models.ToggleTemplateDeliveryPathParamTemplateType,
        slug: str,
        delivered_by_clerk: Optional[Nullable[bool]] = None,
        server_url: Optional[str] = None,
    ) -> models.Template:
        r"""Toggle the delivery by Clerk for a template of a given type and slug

        Toggles the delivery by Clerk for a template of a given type and slug.
        If disabled, Clerk will not deliver the resulting email or SMS.
        The app developer will need to listen to the `email.created` or `sms.created` webhooks in order to handle delivery themselves.

        :param template_type: The type of template to toggle delivery for
        :param slug: The slug of the template for which to toggle delivery
        :param delivered_by_clerk: Whether Clerk should deliver emails or SMS messages based on the current template
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.ToggleTemplateDeliveryRequest(
            template_type=template_type,
            slug=slug,
            request_body=models.ToggleTemplateDeliveryRequestBody(
                delivered_by_clerk=delivered_by_clerk,
            ),
        )
        
        req = self.build_request(
            method="POST",
            path="/templates/{template_type}/{slug}/toggle_delivery",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request.request_body, False, True, "json", Optional[models.ToggleTemplateDeliveryRequestBody]),
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="ToggleTemplateDelivery", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","401","404","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[models.Template])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code in [400, 401, 404]:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
                out = models.ClerkErrors(data=data)
                  
                raise out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
