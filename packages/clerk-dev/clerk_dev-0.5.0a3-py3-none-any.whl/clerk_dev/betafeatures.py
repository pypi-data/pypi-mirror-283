"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from .basesdk import BaseSDK
from clerk_dev import models
from clerk_dev._hooks import HookContext
from clerk_dev.types import Nullable
import clerk_dev.utils as utils
from typing import Optional
from typing_extensions import deprecated

class BetaFeatures(BaseSDK):
    
    
    @deprecated("warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible.")
    def update_production_instance_domain(
        self, *,
        home_url: Optional[str] = None,
        server_url: Optional[str] = None,
    ):
        r"""Update production instance domain

        Change the domain of a production instance.

        Changing the domain requires updating the [DNS records](https://clerk.com/docs/deployments/overview#dns-records) accordingly, deploying new [SSL certificates](https://clerk.com/docs/deployments/overview#deploy), updating your Social Connection's redirect URLs and setting the new keys in your code.

        WARNING: Changing your domain will invalidate all current user sessions (i.e. users will be logged out). Also, while your application is being deployed, a small downtime is expected to occur.

        :param home_url: The new home URL of the production instance e.g. https://www.example.com
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.UpdateProductionInstanceDomainRequestBody(
            home_url=home_url,
        )
        
        req = self.build_request(
            method="PUT",
            path="/beta_features/domain",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, True, "json", Optional[models.UpdateProductionInstanceDomainRequestBody]),
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="UpdateProductionInstanceDomain", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","422","4XX","5XX"],
        )
        
        
        if http_res.status_code == 202:
            pass
        elif http_res.status_code in [400, 422]:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
                out = models.ClerkErrors(data=data)
                  
                raise out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    @deprecated("warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible.")
    async def update_production_instance_domain_async(
        self, *,
        home_url: Optional[str] = None,
        server_url: Optional[str] = None,
    ):
        r"""Update production instance domain

        Change the domain of a production instance.

        Changing the domain requires updating the [DNS records](https://clerk.com/docs/deployments/overview#dns-records) accordingly, deploying new [SSL certificates](https://clerk.com/docs/deployments/overview#deploy), updating your Social Connection's redirect URLs and setting the new keys in your code.

        WARNING: Changing your domain will invalidate all current user sessions (i.e. users will be logged out). Also, while your application is being deployed, a small downtime is expected to occur.

        :param home_url: The new home URL of the production instance e.g. https://www.example.com
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.UpdateProductionInstanceDomainRequestBody(
            home_url=home_url,
        )
        
        req = self.build_request(
            method="PUT",
            path="/beta_features/domain",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, True, "json", Optional[models.UpdateProductionInstanceDomainRequestBody]),
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="UpdateProductionInstanceDomain", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","422","4XX","5XX"],
        )
        
        
        if http_res.status_code == 202:
            pass
        elif http_res.status_code in [400, 422]:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
                out = models.ClerkErrors(data=data)
                  
                raise out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    def update_instance_auth_config(
        self, *,
        enhanced_email_deliverability: Optional[Nullable[bool]] = None,
        from_email_address: Optional[Nullable[str]] = None,
        progressive_sign_up: Optional[Nullable[bool]] = None,
        restricted_to_allowlist: Optional[Nullable[bool]] = None,
        session_token_template: Optional[Nullable[str]] = None,
        test_mode: Optional[Nullable[bool]] = None,
        server_url: Optional[str] = None,
    ) -> models.InstanceSettings:
        r"""Update instance settings

        Updates the settings of an instance

        :param enhanced_email_deliverability: The \"enhanced_email_deliverability\" feature will send emails from \"verifications@clerk.dev\" instead of your domain. This can be helpful if you do not have a high domain reputation.
        :param from_email_address: The local part of the email address from which authentication-related emails (e.g. OTP code, magic links) will be sent. Only alphanumeric values are allowed. Note that this value should contain only the local part of the address (e.g. `foo` for `foo@example.com`).
        :param progressive_sign_up: Enable the Progressive Sign Up algorithm. Refer to the [docs](https://clerk.com/docs/upgrade-guides/progressive-sign-up) for more info.
        :param restricted_to_allowlist: Whether sign up is restricted to email addresses, phone numbers and usernames that are on the allowlist.
        :param session_token_template: The name of the JWT Template used to augment your session tokens. To disable this, pass an empty string.
        :param test_mode: Toggles test mode for this instance, allowing the use of test email addresses and phone numbers. Defaults to true for development instances.
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.UpdateInstanceAuthConfigRequestBody(
            enhanced_email_deliverability=enhanced_email_deliverability,
            from_email_address=from_email_address,
            progressive_sign_up=progressive_sign_up,
            restricted_to_allowlist=restricted_to_allowlist,
            session_token_template=session_token_template,
            test_mode=test_mode,
        )
        
        req = self.build_request(
            method="PATCH",
            path="/beta_features/instance_settings",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, True, "json", Optional[models.UpdateInstanceAuthConfigRequestBody]),
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="UpdateInstanceAuthConfig", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["402","422","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[models.InstanceSettings])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code in [402, 422]:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
                out = models.ClerkErrors(data=data)
                  
                raise out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def update_instance_auth_config_async(
        self, *,
        enhanced_email_deliverability: Optional[Nullable[bool]] = None,
        from_email_address: Optional[Nullable[str]] = None,
        progressive_sign_up: Optional[Nullable[bool]] = None,
        restricted_to_allowlist: Optional[Nullable[bool]] = None,
        session_token_template: Optional[Nullable[str]] = None,
        test_mode: Optional[Nullable[bool]] = None,
        server_url: Optional[str] = None,
    ) -> models.InstanceSettings:
        r"""Update instance settings

        Updates the settings of an instance

        :param enhanced_email_deliverability: The \"enhanced_email_deliverability\" feature will send emails from \"verifications@clerk.dev\" instead of your domain. This can be helpful if you do not have a high domain reputation.
        :param from_email_address: The local part of the email address from which authentication-related emails (e.g. OTP code, magic links) will be sent. Only alphanumeric values are allowed. Note that this value should contain only the local part of the address (e.g. `foo` for `foo@example.com`).
        :param progressive_sign_up: Enable the Progressive Sign Up algorithm. Refer to the [docs](https://clerk.com/docs/upgrade-guides/progressive-sign-up) for more info.
        :param restricted_to_allowlist: Whether sign up is restricted to email addresses, phone numbers and usernames that are on the allowlist.
        :param session_token_template: The name of the JWT Template used to augment your session tokens. To disable this, pass an empty string.
        :param test_mode: Toggles test mode for this instance, allowing the use of test email addresses and phone numbers. Defaults to true for development instances.
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.UpdateInstanceAuthConfigRequestBody(
            enhanced_email_deliverability=enhanced_email_deliverability,
            from_email_address=from_email_address,
            progressive_sign_up=progressive_sign_up,
            restricted_to_allowlist=restricted_to_allowlist,
            session_token_template=session_token_template,
            test_mode=test_mode,
        )
        
        req = self.build_request(
            method="PATCH",
            path="/beta_features/instance_settings",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, True, "json", Optional[models.UpdateInstanceAuthConfigRequestBody]),
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="UpdateInstanceAuthConfig", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["402","422","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[models.InstanceSettings])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code in [402, 422]:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
                out = models.ClerkErrors(data=data)
                  
                raise out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    def change_production_instance_domain(
        self, *,
        home_url: Optional[str] = None,
        server_url: Optional[str] = None,
    ):
        r"""Update production instance domain

        Change the domain of a production instance.

        Changing the domain requires updating the [DNS records](https://clerk.com/docs/deployments/overview#dns-records) accordingly, deploying new [SSL certificates](https://clerk.com/docs/deployments/overview#deploy), updating your Social Connection's redirect URLs and setting the new keys in your code.

        WARNING: Changing your domain will invalidate all current user sessions (i.e. users will be logged out). Also, while your application is being deployed, a small downtime is expected to occur.

        :param home_url: The new home URL of the production instance e.g. https://www.example.com
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.ChangeProductionInstanceDomainRequestBody(
            home_url=home_url,
        )
        
        req = self.build_request(
            method="POST",
            path="/instance/change_domain",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, True, "json", Optional[models.ChangeProductionInstanceDomainRequestBody]),
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="ChangeProductionInstanceDomain", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","422","4XX","5XX"],
        )
        
        
        if http_res.status_code == 202:
            pass
        elif http_res.status_code in [400, 422]:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
                out = models.ClerkErrors(data=data)
                  
                raise out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def change_production_instance_domain_async(
        self, *,
        home_url: Optional[str] = None,
        server_url: Optional[str] = None,
    ):
        r"""Update production instance domain

        Change the domain of a production instance.

        Changing the domain requires updating the [DNS records](https://clerk.com/docs/deployments/overview#dns-records) accordingly, deploying new [SSL certificates](https://clerk.com/docs/deployments/overview#deploy), updating your Social Connection's redirect URLs and setting the new keys in your code.

        WARNING: Changing your domain will invalidate all current user sessions (i.e. users will be logged out). Also, while your application is being deployed, a small downtime is expected to occur.

        :param home_url: The new home URL of the production instance e.g. https://www.example.com
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.ChangeProductionInstanceDomainRequestBody(
            home_url=home_url,
        )
        
        req = self.build_request(
            method="POST",
            path="/instance/change_domain",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, True, "json", Optional[models.ChangeProductionInstanceDomainRequestBody]),
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="ChangeProductionInstanceDomain", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","422","4XX","5XX"],
        )
        
        
        if http_res.status_code == 202:
            pass
        elif http_res.status_code in [400, 422]:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
                out = models.ClerkErrors(data=data)
                  
                raise out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
