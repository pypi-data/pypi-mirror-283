"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
from clerk_dev.types import BaseModel, Nullable
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class OrganizationMembershipObject(str, Enum):
    r"""String representing the object's type. Objects of the same type share the same value.

    """
    ORGANIZATION_MEMBERSHIP = "organization_membership"


class OrganizationMembershipOrganizationObject(str, Enum):
    ORGANIZATION = "organization"


class OrganizationMembershipOrganizationPrivateMetadataTypedDict(TypedDict):
    pass
    

class OrganizationMembershipOrganizationPrivateMetadata(BaseModel):
    pass
    

class OrganizationMembershipOrganizationPublicMetadataTypedDict(TypedDict):
    pass
    

class OrganizationMembershipOrganizationPublicMetadata(BaseModel):
    pass
    

class OrganizationMembershipOrganizationTypedDict(TypedDict):
    created_at: int
    r"""Unix timestamp of creation.

    """
    id: str
    max_allowed_memberships: int
    name: str
    object: OrganizationMembershipOrganizationObject
    private_metadata: OrganizationMembershipOrganizationPrivateMetadataTypedDict
    public_metadata: OrganizationMembershipOrganizationPublicMetadataTypedDict
    slug: str
    updated_at: int
    r"""Unix timestamp of last update.

    """
    admin_delete_enabled: NotRequired[bool]
    created_by: NotRequired[str]
    members_count: NotRequired[Nullable[int]]
    

class OrganizationMembershipOrganization(BaseModel):
    created_at: int
    r"""Unix timestamp of creation.

    """
    id: str
    max_allowed_memberships: int
    name: str
    object: OrganizationMembershipOrganizationObject
    private_metadata: OrganizationMembershipOrganizationPrivateMetadata
    public_metadata: OrganizationMembershipOrganizationPublicMetadata
    slug: str
    updated_at: int
    r"""Unix timestamp of last update.

    """
    admin_delete_enabled: Optional[bool] = None
    created_by: Optional[str] = None
    members_count: Optional[Nullable[int]] = None
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["admin_delete_enabled", "created_by", "members_count"]
        nullable_fields = ["members_count"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None:
                m[k] = val
            elif not k in optional_fields or (
                    k in optional_fields
                    and k in nullable_fields
                    and (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member
                ):
                m[k] = val

        return m
        

class OrganizationMembershipPrivateMetadataTypedDict(TypedDict):
    r"""Metadata saved on the organization membership, accessible only from the Backend API"""
    
    

class OrganizationMembershipPrivateMetadata(BaseModel):
    r"""Metadata saved on the organization membership, accessible only from the Backend API"""
    
    

class OrganizationMembershipPublicMetadataTypedDict(TypedDict):
    r"""Metadata saved on the organization membership, accessible from both Frontend and Backend APIs"""
    
    

class OrganizationMembershipPublicMetadata(BaseModel):
    r"""Metadata saved on the organization membership, accessible from both Frontend and Backend APIs"""
    
    

class PublicUserDataTypedDict(TypedDict):
    first_name: NotRequired[Nullable[str]]
    has_image: NotRequired[bool]
    identifier: NotRequired[Nullable[str]]
    image_url: NotRequired[str]
    last_name: NotRequired[Nullable[str]]
    profile_image_url: NotRequired[Nullable[str]]
    user_id: NotRequired[str]
    

class PublicUserData(BaseModel):
    first_name: Optional[Nullable[str]] = None
    has_image: Optional[bool] = None
    identifier: Optional[Nullable[str]] = None
    image_url: Optional[str] = None
    last_name: Optional[Nullable[str]] = None
    profile_image_url: Annotated[Optional[Nullable[str]], pydantic.Field(deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible.")] = None
    user_id: Optional[str] = None
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["first_name", "has_image", "identifier", "image_url", "last_name", "profile_image_url", "user_id"]
        nullable_fields = ["first_name", "identifier", "last_name", "profile_image_url"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None:
                m[k] = val
            elif not k in optional_fields or (
                    k in optional_fields
                    and k in nullable_fields
                    and (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member
                ):
                m[k] = val

        return m
        

class OrganizationMembershipTypedDict(TypedDict):
    r"""Hello world"""
    
    created_at: NotRequired[int]
    r"""Unix timestamp of creation."""
    id: NotRequired[str]
    object: NotRequired[OrganizationMembershipObject]
    r"""String representing the object's type. Objects of the same type share the same value.

    """
    organization: NotRequired[OrganizationMembershipOrganizationTypedDict]
    permissions: NotRequired[List[str]]
    private_metadata: NotRequired[OrganizationMembershipPrivateMetadataTypedDict]
    r"""Metadata saved on the organization membership, accessible only from the Backend API"""
    public_metadata: NotRequired[OrganizationMembershipPublicMetadataTypedDict]
    r"""Metadata saved on the organization membership, accessible from both Frontend and Backend APIs"""
    public_user_data: NotRequired[PublicUserDataTypedDict]
    role: NotRequired[str]
    updated_at: NotRequired[int]
    r"""Unix timestamp of last update."""
    

class OrganizationMembership(BaseModel):
    r"""Hello world"""
    
    created_at: Optional[int] = None
    r"""Unix timestamp of creation."""
    id: Optional[str] = None
    object: Optional[OrganizationMembershipObject] = None
    r"""String representing the object's type. Objects of the same type share the same value.

    """
    organization: Optional[OrganizationMembershipOrganization] = None
    permissions: Optional[List[str]] = None
    private_metadata: Optional[OrganizationMembershipPrivateMetadata] = None
    r"""Metadata saved on the organization membership, accessible only from the Backend API"""
    public_metadata: Optional[OrganizationMembershipPublicMetadata] = None
    r"""Metadata saved on the organization membership, accessible from both Frontend and Backend APIs"""
    public_user_data: Optional[PublicUserData] = None
    role: Optional[str] = None
    updated_at: Optional[int] = None
    r"""Unix timestamp of last update."""
    
