"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
from clerk_dev.types import BaseModel, Nullable
from enum import Enum
from pydantic import model_serializer
from typing import Optional, TypedDict
from typing_extensions import NotRequired


class SessionActorTypedDict(TypedDict):
    pass
    

class SessionActor(BaseModel):
    pass
    

class SessionObject(str, Enum):
    r"""String representing the object's type. Objects of the same type share the same value.

    """
    SESSION = "session"


class SessionStatus(str, Enum):
    ACTIVE = "active"
    REVOKED = "revoked"
    ENDED = "ended"
    EXPIRED = "expired"
    REMOVED = "removed"
    ABANDONED = "abandoned"
    REPLACED = "replaced"


class SessionTypedDict(TypedDict):
    abandon_at: int
    client_id: str
    created_at: int
    r"""Unix timestamp of creation.

    """
    expire_at: int
    id: str
    last_active_at: int
    object: SessionObject
    r"""String representing the object's type. Objects of the same type share the same value.

    """
    status: SessionStatus
    updated_at: int
    r"""Unix timestamp of last update.

    """
    user_id: str
    actor: NotRequired[Nullable[SessionActorTypedDict]]
    last_active_organization_id: NotRequired[Nullable[str]]
    

class Session(BaseModel):
    abandon_at: int
    client_id: str
    created_at: int
    r"""Unix timestamp of creation.

    """
    expire_at: int
    id: str
    last_active_at: int
    object: SessionObject
    r"""String representing the object's type. Objects of the same type share the same value.

    """
    status: SessionStatus
    updated_at: int
    r"""Unix timestamp of last update.

    """
    user_id: str
    actor: Optional[Nullable[SessionActor]] = None
    last_active_organization_id: Optional[Nullable[str]] = None
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["actor", "last_active_organization_id"]
        nullable_fields = ["actor", "last_active_organization_id"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None:
                m[k] = val
            elif not k in optional_fields or (
                    k in optional_fields
                    and k in nullable_fields
                    and (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member
                ):
                m[k] = val

        return m
        
