"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
from clerk_dev.types import BaseModel, Nullable
from pydantic import model_serializer
from typing import List, Optional, TypedDict
from typing_extensions import NotRequired


class UpdateInstanceOrganizationSettingsRequestBodyTypedDict(TypedDict):
    admin_delete_enabled: NotRequired[Nullable[bool]]
    creator_role_id: NotRequired[str]
    r"""Specify what the default organization role is for an organization creator."""
    domains_default_role_id: NotRequired[str]
    r"""Specify what the default organization role is for the organization domains."""
    domains_enabled: NotRequired[Nullable[bool]]
    domains_enrollment_modes: NotRequired[List[str]]
    r"""Specify which enrollment modes to enable for your Organization Domains.
    Supported modes are 'automatic_invitation' & 'automatic_suggestion'.
    """
    enabled: NotRequired[Nullable[bool]]
    max_allowed_memberships: NotRequired[Nullable[int]]
    

class UpdateInstanceOrganizationSettingsRequestBody(BaseModel):
    admin_delete_enabled: Optional[Nullable[bool]] = None
    creator_role_id: Optional[str] = None
    r"""Specify what the default organization role is for an organization creator."""
    domains_default_role_id: Optional[str] = None
    r"""Specify what the default organization role is for the organization domains."""
    domains_enabled: Optional[Nullable[bool]] = None
    domains_enrollment_modes: Optional[List[str]] = None
    r"""Specify which enrollment modes to enable for your Organization Domains.
    Supported modes are 'automatic_invitation' & 'automatic_suggestion'.
    """
    enabled: Optional[Nullable[bool]] = None
    max_allowed_memberships: Optional[Nullable[int]] = None
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["admin_delete_enabled", "creator_role_id", "domains_default_role_id", "domains_enabled", "domains_enrollment_modes", "enabled", "max_allowed_memberships"]
        nullable_fields = ["admin_delete_enabled", "domains_enabled", "enabled", "max_allowed_memberships"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None:
                m[k] = val
            elif not k in optional_fields or (
                    k in optional_fields
                    and k in nullable_fields
                    and (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member
                ):
                m[k] = val

        return m
        
