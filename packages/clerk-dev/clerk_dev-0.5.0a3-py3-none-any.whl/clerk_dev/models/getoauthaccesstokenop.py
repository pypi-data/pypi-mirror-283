"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
from clerk_dev.types import BaseModel, Nullable
from clerk_dev.utils import FieldMetadata, PathParamMetadata
from pydantic import model_serializer
from typing import List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class GetOAuthAccessTokenRequestTypedDict(TypedDict):
    user_id: str
    r"""The ID of the user for which to retrieve the OAuth access token"""
    provider: str
    r"""The ID of the OAuth provider (e.g. `oauth_google`)"""
    

class GetOAuthAccessTokenRequest(BaseModel):
    user_id: Annotated[str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))]
    r"""The ID of the user for which to retrieve the OAuth access token"""
    provider: Annotated[str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))]
    r"""The ID of the OAuth provider (e.g. `oauth_google`)"""
    

class GetOAuthAccessTokenPublicMetadataTypedDict(TypedDict):
    pass
    

class GetOAuthAccessTokenPublicMetadata(BaseModel):
    pass
    

class ResponseBodyTypedDict(TypedDict):
    external_account_id: NotRequired[str]
    r"""External account ID"""
    label: NotRequired[Nullable[str]]
    object: NotRequired[str]
    provider: NotRequired[str]
    r"""The ID of the provider"""
    provider_user_id: NotRequired[str]
    r"""The unique ID of the user in the external provider's system"""
    public_metadata: NotRequired[GetOAuthAccessTokenPublicMetadataTypedDict]
    scopes: NotRequired[List[str]]
    r"""The list of scopes that the token is valid for.
    Only present for OAuth 2.0 tokens.
    """
    token: NotRequired[str]
    r"""The access token"""
    token_secret: NotRequired[str]
    r"""The token secret. Only present for OAuth 1.0 tokens."""
    

class ResponseBody(BaseModel):
    external_account_id: Optional[str] = None
    r"""External account ID"""
    label: Optional[Nullable[str]] = None
    object: Optional[str] = None
    provider: Optional[str] = None
    r"""The ID of the provider"""
    provider_user_id: Optional[str] = None
    r"""The unique ID of the user in the external provider's system"""
    public_metadata: Optional[GetOAuthAccessTokenPublicMetadata] = None
    scopes: Optional[List[str]] = None
    r"""The list of scopes that the token is valid for.
    Only present for OAuth 2.0 tokens.
    """
    token: Optional[str] = None
    r"""The access token"""
    token_secret: Optional[str] = None
    r"""The token secret. Only present for OAuth 1.0 tokens."""
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["external_account_id", "label", "object", "provider", "provider_user_id", "public_metadata", "scopes", "token", "token_secret"]
        nullable_fields = ["label"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None:
                m[k] = val
            elif not k in optional_fields or (
                    k in optional_fields
                    and k in nullable_fields
                    and (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member
                ):
                m[k] = val

        return m
        
