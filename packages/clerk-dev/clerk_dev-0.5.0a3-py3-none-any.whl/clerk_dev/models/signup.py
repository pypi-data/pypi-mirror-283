"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
from clerk_dev.types import BaseModel, Nullable
from enum import Enum
from pydantic import model_serializer
from typing import List, Optional, TypedDict
from typing_extensions import NotRequired


class ExternalAccountTypedDict(TypedDict):
    pass
    

class ExternalAccount(BaseModel):
    pass
    

class SignUpObject(str, Enum):
    SIGN_UP_ATTEMPT = "sign_up_attempt"


class SignUpPublicMetadataTypedDict(TypedDict):
    pass
    

class SignUpPublicMetadata(BaseModel):
    pass
    

class SignUpStatus(str, Enum):
    MISSING_REQUIREMENTS = "missing_requirements"
    COMPLETE = "complete"
    ABANDONED = "abandoned"


class UnsafeMetadataTypedDict(TypedDict):
    pass
    

class UnsafeMetadata(BaseModel):
    pass
    

class VerificationsTypedDict(TypedDict):
    pass
    

class Verifications(BaseModel):
    pass
    

class SignUpTypedDict(TypedDict):
    abandon_at: int
    custom_action: bool
    id: str
    object: SignUpObject
    password_enabled: bool
    status: SignUpStatus
    created_session_id: NotRequired[Nullable[str]]
    created_user_id: NotRequired[Nullable[str]]
    email_address: NotRequired[Nullable[str]]
    external_account: NotRequired[ExternalAccountTypedDict]
    external_id: NotRequired[Nullable[str]]
    first_name: NotRequired[Nullable[str]]
    last_name: NotRequired[Nullable[str]]
    missing_fields: NotRequired[List[str]]
    optional_fields: NotRequired[List[str]]
    phone_number: NotRequired[Nullable[str]]
    public_metadata: NotRequired[SignUpPublicMetadataTypedDict]
    required_fields: NotRequired[List[str]]
    unsafe_metadata: NotRequired[UnsafeMetadataTypedDict]
    unverified_fields: NotRequired[List[str]]
    username: NotRequired[Nullable[str]]
    verifications: NotRequired[VerificationsTypedDict]
    web3_wallet: NotRequired[Nullable[str]]
    

class SignUp(BaseModel):
    abandon_at: int
    custom_action: bool
    id: str
    object: SignUpObject
    password_enabled: bool
    status: SignUpStatus
    created_session_id: Optional[Nullable[str]] = None
    created_user_id: Optional[Nullable[str]] = None
    email_address: Optional[Nullable[str]] = None
    external_account: Optional[ExternalAccount] = None
    external_id: Optional[Nullable[str]] = None
    first_name: Optional[Nullable[str]] = None
    last_name: Optional[Nullable[str]] = None
    missing_fields: Optional[List[str]] = None
    optional_fields: Optional[List[str]] = None
    phone_number: Optional[Nullable[str]] = None
    public_metadata: Optional[SignUpPublicMetadata] = None
    required_fields: Optional[List[str]] = None
    unsafe_metadata: Optional[UnsafeMetadata] = None
    unverified_fields: Optional[List[str]] = None
    username: Optional[Nullable[str]] = None
    verifications: Optional[Verifications] = None
    web3_wallet: Optional[Nullable[str]] = None
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["created_session_id", "created_user_id", "email_address", "external_account", "external_id", "first_name", "last_name", "missing_fields", "optional_fields", "phone_number", "public_metadata", "required_fields", "unsafe_metadata", "unverified_fields", "username", "verifications", "web3_wallet"]
        nullable_fields = ["created_session_id", "created_user_id", "email_address", "external_id", "first_name", "last_name", "phone_number", "username", "web3_wallet"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None:
                m[k] = val
            elif not k in optional_fields or (
                    k in optional_fields
                    and k in nullable_fields
                    and (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member
                ):
                m[k] = val

        return m
        
