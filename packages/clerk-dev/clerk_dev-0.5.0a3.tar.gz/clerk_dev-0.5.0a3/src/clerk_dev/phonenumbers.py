"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from .basesdk import BaseSDK
from clerk_dev import models
from clerk_dev._hooks import HookContext
from clerk_dev.types import Nullable
import clerk_dev.utils as utils
from typing import Optional

class PhoneNumbers(BaseSDK):
    
    
    def create(
        self, *,
        phone_number: Optional[str] = None,
        primary: Optional[Nullable[bool]] = None,
        reserved_for_second_factor: Optional[Nullable[bool]] = None,
        user_id: Optional[str] = None,
        verified: Optional[Nullable[bool]] = None,
        server_url: Optional[str] = None,
    ) -> models.PhoneNumber:
        r"""Create a phone number

        Create a new phone number

        :param phone_number: The new phone number. Must adhere to the E.164 standard for phone number format.
        :param primary: Create this phone number as the primary phone number for the user. Default: false, unless it is the first phone number.
        :param reserved_for_second_factor: Create this phone number as reserved for multi-factor authentication. The phone number must also be verified. If there are no other reserved second factors, the phone number will be set as the default second factor.
        :param user_id: The ID representing the user
        :param verified: When created, the phone number will be marked as verified.
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.CreatePhoneNumberRequestBody(
            phone_number=phone_number,
            primary=primary,
            reserved_for_second_factor=reserved_for_second_factor,
            user_id=user_id,
            verified=verified,
        )
        
        req = self.build_request(
            method="POST",
            path="/phone_numbers",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, True, "json", Optional[models.CreatePhoneNumberRequestBody]),
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="CreatePhoneNumber", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","401","403","404","422","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[models.PhoneNumber])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code in [400, 401, 403, 404, 422]:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
                out = models.ClerkErrors(data=data)
                  
                raise out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def create_async(
        self, *,
        phone_number: Optional[str] = None,
        primary: Optional[Nullable[bool]] = None,
        reserved_for_second_factor: Optional[Nullable[bool]] = None,
        user_id: Optional[str] = None,
        verified: Optional[Nullable[bool]] = None,
        server_url: Optional[str] = None,
    ) -> models.PhoneNumber:
        r"""Create a phone number

        Create a new phone number

        :param phone_number: The new phone number. Must adhere to the E.164 standard for phone number format.
        :param primary: Create this phone number as the primary phone number for the user. Default: false, unless it is the first phone number.
        :param reserved_for_second_factor: Create this phone number as reserved for multi-factor authentication. The phone number must also be verified. If there are no other reserved second factors, the phone number will be set as the default second factor.
        :param user_id: The ID representing the user
        :param verified: When created, the phone number will be marked as verified.
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.CreatePhoneNumberRequestBody(
            phone_number=phone_number,
            primary=primary,
            reserved_for_second_factor=reserved_for_second_factor,
            user_id=user_id,
            verified=verified,
        )
        
        req = self.build_request(
            method="POST",
            path="/phone_numbers",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, True, "json", Optional[models.CreatePhoneNumberRequestBody]),
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="CreatePhoneNumber", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","401","403","404","422","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[models.PhoneNumber])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code in [400, 401, 403, 404, 422]:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
                out = models.ClerkErrors(data=data)
                  
                raise out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    def delete(
        self, *,
        phone_number_id: str,
        server_url: Optional[str] = None,
    ) -> models.DeletedObject:
        r"""Delete a phone number

        Delete the phone number with the given ID

        :param phone_number_id: The ID of the phone number to delete
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.DeletePhoneNumberRequest(
            phone_number_id=phone_number_id,
        )
        
        req = self.build_request(
            method="DELETE",
            path="/phone_numbers/{phone_number_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="DeletePhoneNumber", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","401","403","404","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[models.DeletedObject])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code in [400, 401, 403, 404]:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
                out = models.ClerkErrors(data=data)
                  
                raise out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def delete_async(
        self, *,
        phone_number_id: str,
        server_url: Optional[str] = None,
    ) -> models.DeletedObject:
        r"""Delete a phone number

        Delete the phone number with the given ID

        :param phone_number_id: The ID of the phone number to delete
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.DeletePhoneNumberRequest(
            phone_number_id=phone_number_id,
        )
        
        req = self.build_request(
            method="DELETE",
            path="/phone_numbers/{phone_number_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="DeletePhoneNumber", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","401","403","404","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[models.DeletedObject])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code in [400, 401, 403, 404]:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
                out = models.ClerkErrors(data=data)
                  
                raise out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    def get(
        self, *,
        phone_number_id: str,
        server_url: Optional[str] = None,
    ) -> models.PhoneNumber:
        r"""Retrieve a phone number

        Returns the details of a phone number

        :param phone_number_id: The ID of the phone number to retrieve
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.GetPhoneNumberRequest(
            phone_number_id=phone_number_id,
        )
        
        req = self.build_request(
            method="GET",
            path="/phone_numbers/{phone_number_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="GetPhoneNumber", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","401","403","404","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[models.PhoneNumber])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code in [400, 401, 403, 404]:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
                out = models.ClerkErrors(data=data)
                  
                raise out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def get_async(
        self, *,
        phone_number_id: str,
        server_url: Optional[str] = None,
    ) -> models.PhoneNumber:
        r"""Retrieve a phone number

        Returns the details of a phone number

        :param phone_number_id: The ID of the phone number to retrieve
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.GetPhoneNumberRequest(
            phone_number_id=phone_number_id,
        )
        
        req = self.build_request(
            method="GET",
            path="/phone_numbers/{phone_number_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="GetPhoneNumber", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","401","403","404","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[models.PhoneNumber])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code in [400, 401, 403, 404]:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
                out = models.ClerkErrors(data=data)
                  
                raise out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    def update(
        self, *,
        phone_number_id: str,
        primary: Optional[Nullable[bool]] = None,
        reserved_for_second_factor: Optional[Nullable[bool]] = None,
        verified: Optional[Nullable[bool]] = None,
        server_url: Optional[str] = None,
    ) -> models.PhoneNumber:
        r"""Update a phone number

        Updates a phone number

        :param phone_number_id: The ID of the phone number to update
        :param primary: Set this phone number as the primary phone number for the user.
        :param reserved_for_second_factor: Set this phone number as reserved for multi-factor authentication. The phone number must also be verified. If there are no other reserved second factors, the phone number will be set as the default second factor.
        :param verified: The phone number will be marked as verified.
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.UpdatePhoneNumberRequest(
            phone_number_id=phone_number_id,
            request_body=models.UpdatePhoneNumberRequestBody(
                primary=primary,
                reserved_for_second_factor=reserved_for_second_factor,
                verified=verified,
            ),
        )
        
        req = self.build_request(
            method="PATCH",
            path="/phone_numbers/{phone_number_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request.request_body, False, True, "json", Optional[models.UpdatePhoneNumberRequestBody]),
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="UpdatePhoneNumber", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","401","403","404","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[models.PhoneNumber])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code in [400, 401, 403, 404]:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
                out = models.ClerkErrors(data=data)
                  
                raise out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def update_async(
        self, *,
        phone_number_id: str,
        primary: Optional[Nullable[bool]] = None,
        reserved_for_second_factor: Optional[Nullable[bool]] = None,
        verified: Optional[Nullable[bool]] = None,
        server_url: Optional[str] = None,
    ) -> models.PhoneNumber:
        r"""Update a phone number

        Updates a phone number

        :param phone_number_id: The ID of the phone number to update
        :param primary: Set this phone number as the primary phone number for the user.
        :param reserved_for_second_factor: Set this phone number as reserved for multi-factor authentication. The phone number must also be verified. If there are no other reserved second factors, the phone number will be set as the default second factor.
        :param verified: The phone number will be marked as verified.
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.UpdatePhoneNumberRequest(
            phone_number_id=phone_number_id,
            request_body=models.UpdatePhoneNumberRequestBody(
                primary=primary,
                reserved_for_second_factor=reserved_for_second_factor,
                verified=verified,
            ),
        )
        
        req = self.build_request(
            method="PATCH",
            path="/phone_numbers/{phone_number_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request.request_body, False, True, "json", Optional[models.UpdatePhoneNumberRequestBody]),
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="UpdatePhoneNumber", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","401","403","404","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[models.PhoneNumber])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code in [400, 401, 403, 404]:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
                out = models.ClerkErrors(data=data)
                  
                raise out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
