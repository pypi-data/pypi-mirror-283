"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from .basesdk import BaseSDK
from clerk_dev import models
from clerk_dev._hooks import HookContext
import clerk_dev.utils as utils
from typing import Any, Dict, Optional

class ActorTokens(BaseSDK):
    
    
    def create(
        self, *,
        actor: Dict[str, Any],
        user_id: str,
        expires_in_seconds: Optional[int] = None,
        session_max_duration_in_seconds: Optional[int] = None,
        server_url: Optional[str] = None,
    ) -> models.ActorToken:
        r"""Create actor token

        Create an actor token that can be used to impersonate the given user.
        The `actor` parameter needs to include at least a \"sub\" key whose value is the ID of the actor (impersonating) user.

        :param actor: The actor payload. It needs to include a sub property which should contain the ID of the actor. This whole payload will be also included in the JWT session token.
        :param user_id: The ID of the user that can use the newly created sign in token.
        :param expires_in_seconds: Optional parameter to specify the life duration of the actor token in seconds. By default, the duration is 1 hour.
        :param session_max_duration_in_seconds: The maximum duration that the session which will be created by the generated actor token should last. By default, the duration of a session created via an actor token, lasts 30 minutes.
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.CreateActorTokenRequestBody(
            actor=actor,
            expires_in_seconds=expires_in_seconds,
            session_max_duration_in_seconds=session_max_duration_in_seconds,
            user_id=user_id,
        )
        
        req = self.build_request(
            method="POST",
            path="/actor_tokens",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, True, "json", Optional[models.CreateActorTokenRequestBody]),
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="CreateActorToken", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","402","422","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[models.ActorToken])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code in [400, 402, 422]:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
                out = models.ClerkErrors(data=data)
                  
                raise out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def create_async(
        self, *,
        actor: Dict[str, Any],
        user_id: str,
        expires_in_seconds: Optional[int] = None,
        session_max_duration_in_seconds: Optional[int] = None,
        server_url: Optional[str] = None,
    ) -> models.ActorToken:
        r"""Create actor token

        Create an actor token that can be used to impersonate the given user.
        The `actor` parameter needs to include at least a \"sub\" key whose value is the ID of the actor (impersonating) user.

        :param actor: The actor payload. It needs to include a sub property which should contain the ID of the actor. This whole payload will be also included in the JWT session token.
        :param user_id: The ID of the user that can use the newly created sign in token.
        :param expires_in_seconds: Optional parameter to specify the life duration of the actor token in seconds. By default, the duration is 1 hour.
        :param session_max_duration_in_seconds: The maximum duration that the session which will be created by the generated actor token should last. By default, the duration of a session created via an actor token, lasts 30 minutes.
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.CreateActorTokenRequestBody(
            actor=actor,
            expires_in_seconds=expires_in_seconds,
            session_max_duration_in_seconds=session_max_duration_in_seconds,
            user_id=user_id,
        )
        
        req = self.build_request(
            method="POST",
            path="/actor_tokens",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, True, "json", Optional[models.CreateActorTokenRequestBody]),
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="CreateActorToken", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","402","422","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[models.ActorToken])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code in [400, 402, 422]:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
                out = models.ClerkErrors(data=data)
                  
                raise out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    def revoke(
        self, *,
        actor_token_id: str,
        server_url: Optional[str] = None,
    ) -> models.ActorToken:
        r"""Revoke actor token

        Revokes a pending actor token.

        :param actor_token_id: The ID of the actor token to be revoked.
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.RevokeActorTokenRequest(
            actor_token_id=actor_token_id,
        )
        
        req = self.build_request(
            method="POST",
            path="/actor_tokens/{actor_token_id}/revoke",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="RevokeActorToken", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","404","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[models.ActorToken])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code in [400, 404]:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
                out = models.ClerkErrors(data=data)
                  
                raise out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def revoke_async(
        self, *,
        actor_token_id: str,
        server_url: Optional[str] = None,
    ) -> models.ActorToken:
        r"""Revoke actor token

        Revokes a pending actor token.

        :param actor_token_id: The ID of the actor token to be revoked.
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.RevokeActorTokenRequest(
            actor_token_id=actor_token_id,
        )
        
        req = self.build_request(
            method="POST",
            path="/actor_tokens/{actor_token_id}/revoke",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="RevokeActorToken", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","404","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[models.ActorToken])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code in [400, 404]:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
                out = models.ClerkErrors(data=data)
                  
                raise out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
