"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from .basesdk import BaseSDK
from clerk_dev import models
from clerk_dev._hooks import HookContext
from clerk_dev.types import BaseModel, Nullable
import clerk_dev.utils as utils
from typing import List, Optional, Union

class JwtTemplates(BaseSDK):
    
    
    def list(
        self, *,
        server_url: Optional[str] = None,
    ) -> List[models.JWTTemplate]:
        r"""List all templates

        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        req = self.build_request(
            method="GET",
            path="/jwt_templates",
            base_url=base_url,
            url_variables=url_variables,
            request=None,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="ListJWTTemplates", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[List[models.JWTTemplate]])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def list_async(
        self, *,
        server_url: Optional[str] = None,
    ) -> List[models.JWTTemplate]:
        r"""List all templates

        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        req = self.build_request(
            method="GET",
            path="/jwt_templates",
            base_url=base_url,
            url_variables=url_variables,
            request=None,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="ListJWTTemplates", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[List[models.JWTTemplate]])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    def create(
        self, *,
        allowed_clock_skew: Optional[Nullable[float]] = None,
        claims: Optional[Union[models.CreateJWTTemplateClaims, models.CreateJWTTemplateClaimsTypedDict]] = None,
        custom_signing_key: Optional[bool] = None,
        lifetime: Optional[Nullable[float]] = None,
        name: Optional[str] = None,
        signing_algorithm: Optional[Nullable[str]] = None,
        signing_key: Optional[Nullable[str]] = None,
        server_url: Optional[str] = None,
    ) -> models.JWTTemplate:
        r"""Create a JWT template

        Create a new JWT template

        :param allowed_clock_skew: JWT token allowed clock skew
        :param claims: JWT template claims in JSON format
        :param custom_signing_key: Whether a custom signing key/algorithm is also provided for this template
        :param lifetime: JWT token lifetime
        :param name: JWT template name
        :param signing_algorithm: The custom signing algorithm to use when minting JWTs
        :param signing_key: The custom signing private key to use when minting JWTs
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.CreateJWTTemplateRequestBody(
            allowed_clock_skew=allowed_clock_skew,
            claims=utils.unmarshal(claims, models.CreateJWTTemplateClaims) if not isinstance(claims, BaseModel) and claims is not None else claims,
            custom_signing_key=custom_signing_key,
            lifetime=lifetime,
            name=name,
            signing_algorithm=signing_algorithm,
            signing_key=signing_key,
        )
        
        req = self.build_request(
            method="POST",
            path="/jwt_templates",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, True, "json", Optional[models.CreateJWTTemplateRequestBody]),
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="CreateJWTTemplate", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","402","422","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[models.JWTTemplate])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code in [400, 402, 422]:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
                out = models.ClerkErrors(data=data)
                  
                raise out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def create_async(
        self, *,
        allowed_clock_skew: Optional[Nullable[float]] = None,
        claims: Optional[Union[models.CreateJWTTemplateClaims, models.CreateJWTTemplateClaimsTypedDict]] = None,
        custom_signing_key: Optional[bool] = None,
        lifetime: Optional[Nullable[float]] = None,
        name: Optional[str] = None,
        signing_algorithm: Optional[Nullable[str]] = None,
        signing_key: Optional[Nullable[str]] = None,
        server_url: Optional[str] = None,
    ) -> models.JWTTemplate:
        r"""Create a JWT template

        Create a new JWT template

        :param allowed_clock_skew: JWT token allowed clock skew
        :param claims: JWT template claims in JSON format
        :param custom_signing_key: Whether a custom signing key/algorithm is also provided for this template
        :param lifetime: JWT token lifetime
        :param name: JWT template name
        :param signing_algorithm: The custom signing algorithm to use when minting JWTs
        :param signing_key: The custom signing private key to use when minting JWTs
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.CreateJWTTemplateRequestBody(
            allowed_clock_skew=allowed_clock_skew,
            claims=utils.unmarshal(claims, models.CreateJWTTemplateClaims) if not isinstance(claims, BaseModel) and claims is not None else claims,
            custom_signing_key=custom_signing_key,
            lifetime=lifetime,
            name=name,
            signing_algorithm=signing_algorithm,
            signing_key=signing_key,
        )
        
        req = self.build_request(
            method="POST",
            path="/jwt_templates",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, True, "json", Optional[models.CreateJWTTemplateRequestBody]),
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="CreateJWTTemplate", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","402","422","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[models.JWTTemplate])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code in [400, 402, 422]:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
                out = models.ClerkErrors(data=data)
                  
                raise out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    def delete(
        self, *,
        template_id: str,
        server_url: Optional[str] = None,
    ) -> models.DeletedObject:
        r"""Delete a Template

        :param template_id: JWT Template ID
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.DeleteJWTTemplateRequest(
            template_id=template_id,
        )
        
        req = self.build_request(
            method="DELETE",
            path="/jwt_templates/{template_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="DeleteJWTTemplate", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["403","404","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[models.DeletedObject])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code in [403, 404]:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
                out = models.ClerkErrors(data=data)
                  
                raise out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def delete_async(
        self, *,
        template_id: str,
        server_url: Optional[str] = None,
    ) -> models.DeletedObject:
        r"""Delete a Template

        :param template_id: JWT Template ID
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.DeleteJWTTemplateRequest(
            template_id=template_id,
        )
        
        req = self.build_request(
            method="DELETE",
            path="/jwt_templates/{template_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="DeleteJWTTemplate", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["403","404","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[models.DeletedObject])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code in [403, 404]:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
                out = models.ClerkErrors(data=data)
                  
                raise out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    def get(
        self, *,
        template_id: str,
        server_url: Optional[str] = None,
    ) -> models.JWTTemplate:
        r"""Retrieve a template

        Retrieve the details of a given JWT template

        :param template_id: JWT Template ID
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.GetJWTTemplateRequest(
            template_id=template_id,
        )
        
        req = self.build_request(
            method="GET",
            path="/jwt_templates/{template_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="GetJWTTemplate", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["404","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[models.JWTTemplate])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 404:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
                out = models.ClerkErrors(data=data)
                  
                raise out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def get_async(
        self, *,
        template_id: str,
        server_url: Optional[str] = None,
    ) -> models.JWTTemplate:
        r"""Retrieve a template

        Retrieve the details of a given JWT template

        :param template_id: JWT Template ID
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.GetJWTTemplateRequest(
            template_id=template_id,
        )
        
        req = self.build_request(
            method="GET",
            path="/jwt_templates/{template_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="GetJWTTemplate", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["404","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[models.JWTTemplate])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 404:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
                out = models.ClerkErrors(data=data)
                  
                raise out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    def update(
        self, *,
        template_id: str,
        allowed_clock_skew: Optional[Nullable[float]] = None,
        claims: Optional[Union[models.UpdateJWTTemplateClaims, models.UpdateJWTTemplateClaimsTypedDict]] = None,
        custom_signing_key: Optional[bool] = None,
        lifetime: Optional[Nullable[float]] = None,
        name: Optional[str] = None,
        signing_algorithm: Optional[Nullable[str]] = None,
        signing_key: Optional[Nullable[str]] = None,
        server_url: Optional[str] = None,
    ) -> models.JWTTemplate:
        r"""Update a JWT template

        Updates an existing JWT template

        :param template_id: The ID of the JWT template to update
        :param allowed_clock_skew: JWT token allowed clock skew
        :param claims: JWT template claims in JSON format
        :param custom_signing_key: Whether a custom signing key/algorithm is also provided for this template
        :param lifetime: JWT token lifetime
        :param name: JWT template name
        :param signing_algorithm: The custom signing algorithm to use when minting JWTs
        :param signing_key: The custom signing private key to use when minting JWTs
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.UpdateJWTTemplateRequest(
            template_id=template_id,
            request_body=models.UpdateJWTTemplateRequestBody(
                allowed_clock_skew=allowed_clock_skew,
                claims=utils.unmarshal(claims, models.UpdateJWTTemplateClaims) if not isinstance(claims, BaseModel) and claims is not None else claims,
                custom_signing_key=custom_signing_key,
                lifetime=lifetime,
                name=name,
                signing_algorithm=signing_algorithm,
                signing_key=signing_key,
            ),
        )
        
        req = self.build_request(
            method="PATCH",
            path="/jwt_templates/{template_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request.request_body, False, True, "json", Optional[models.UpdateJWTTemplateRequestBody]),
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="UpdateJWTTemplate", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","402","422","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[models.JWTTemplate])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code in [400, 402, 422]:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
                out = models.ClerkErrors(data=data)
                  
                raise out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def update_async(
        self, *,
        template_id: str,
        allowed_clock_skew: Optional[Nullable[float]] = None,
        claims: Optional[Union[models.UpdateJWTTemplateClaims, models.UpdateJWTTemplateClaimsTypedDict]] = None,
        custom_signing_key: Optional[bool] = None,
        lifetime: Optional[Nullable[float]] = None,
        name: Optional[str] = None,
        signing_algorithm: Optional[Nullable[str]] = None,
        signing_key: Optional[Nullable[str]] = None,
        server_url: Optional[str] = None,
    ) -> models.JWTTemplate:
        r"""Update a JWT template

        Updates an existing JWT template

        :param template_id: The ID of the JWT template to update
        :param allowed_clock_skew: JWT token allowed clock skew
        :param claims: JWT template claims in JSON format
        :param custom_signing_key: Whether a custom signing key/algorithm is also provided for this template
        :param lifetime: JWT token lifetime
        :param name: JWT template name
        :param signing_algorithm: The custom signing algorithm to use when minting JWTs
        :param signing_key: The custom signing private key to use when minting JWTs
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.UpdateJWTTemplateRequest(
            template_id=template_id,
            request_body=models.UpdateJWTTemplateRequestBody(
                allowed_clock_skew=allowed_clock_skew,
                claims=utils.unmarshal(claims, models.UpdateJWTTemplateClaims) if not isinstance(claims, BaseModel) and claims is not None else claims,
                custom_signing_key=custom_signing_key,
                lifetime=lifetime,
                name=name,
                signing_algorithm=signing_algorithm,
                signing_key=signing_key,
            ),
        )
        
        req = self.build_request(
            method="PATCH",
            path="/jwt_templates/{template_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request.request_body, False, True, "json", Optional[models.UpdateJWTTemplateRequestBody]),
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="UpdateJWTTemplate", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","402","422","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[models.JWTTemplate])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code in [400, 402, 422]:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, models.ClerkErrorsData)
                out = models.ClerkErrors(data=data)
                  
                raise out
            
            content_type = http_res.headers.get("Content-Type")
            raise models.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise models.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
