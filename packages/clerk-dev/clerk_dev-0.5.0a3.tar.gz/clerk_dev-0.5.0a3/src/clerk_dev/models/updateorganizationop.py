"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
from clerk_dev.types import BaseModel, Nullable
from clerk_dev.utils import FieldMetadata, PathParamMetadata, RequestMetadata
from pydantic import model_serializer
from typing import Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class UpdateOrganizationPrivateMetadataTypedDict(TypedDict):
    r"""Metadata saved on the organization that is only visible to your backend."""
    
    

class UpdateOrganizationPrivateMetadata(BaseModel):
    r"""Metadata saved on the organization that is only visible to your backend."""
    
    

class UpdateOrganizationPublicMetadataTypedDict(TypedDict):
    r"""Metadata saved on the organization, that is visible to both your frontend and backend."""
    
    

class UpdateOrganizationPublicMetadata(BaseModel):
    r"""Metadata saved on the organization, that is visible to both your frontend and backend."""
    
    

class UpdateOrganizationRequestBodyTypedDict(TypedDict):
    admin_delete_enabled: NotRequired[Nullable[bool]]
    r"""If true, an admin can delete this organization with the Frontend API."""
    max_allowed_memberships: NotRequired[Nullable[int]]
    r"""The maximum number of memberships allowed for this organization"""
    name: NotRequired[Nullable[str]]
    r"""The new name of the organization"""
    private_metadata: NotRequired[UpdateOrganizationPrivateMetadataTypedDict]
    r"""Metadata saved on the organization that is only visible to your backend."""
    public_metadata: NotRequired[UpdateOrganizationPublicMetadataTypedDict]
    r"""Metadata saved on the organization, that is visible to both your frontend and backend."""
    slug: NotRequired[Nullable[str]]
    r"""The new slug of the organization, which needs to be unique in the instance"""
    

class UpdateOrganizationRequestBody(BaseModel):
    admin_delete_enabled: Optional[Nullable[bool]] = None
    r"""If true, an admin can delete this organization with the Frontend API."""
    max_allowed_memberships: Optional[Nullable[int]] = None
    r"""The maximum number of memberships allowed for this organization"""
    name: Optional[Nullable[str]] = None
    r"""The new name of the organization"""
    private_metadata: Optional[UpdateOrganizationPrivateMetadata] = None
    r"""Metadata saved on the organization that is only visible to your backend."""
    public_metadata: Optional[UpdateOrganizationPublicMetadata] = None
    r"""Metadata saved on the organization, that is visible to both your frontend and backend."""
    slug: Optional[Nullable[str]] = None
    r"""The new slug of the organization, which needs to be unique in the instance"""
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["admin_delete_enabled", "max_allowed_memberships", "name", "private_metadata", "public_metadata", "slug"]
        nullable_fields = ["admin_delete_enabled", "max_allowed_memberships", "name", "slug"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None:
                m[k] = val
            elif not k in optional_fields or (
                    k in optional_fields
                    and k in nullable_fields
                    and (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member
                ):
                m[k] = val

        return m
        

class UpdateOrganizationRequestTypedDict(TypedDict):
    organization_id: str
    r"""The ID of the organization to update"""
    request_body: UpdateOrganizationRequestBodyTypedDict
    

class UpdateOrganizationRequest(BaseModel):
    organization_id: Annotated[str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))]
    r"""The ID of the organization to update"""
    request_body: Annotated[UpdateOrganizationRequestBody, FieldMetadata(request=RequestMetadata(media_type="application/json"))]
    
