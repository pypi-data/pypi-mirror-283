"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
from clerk_dev.types import BaseModel, Nullable
from enum import Enum
from pydantic import model_serializer
from typing import Optional, TypedDict
from typing_extensions import NotRequired


class OrganizationObject(str, Enum):
    ORGANIZATION = "organization"


class PrivateMetadataTypedDict(TypedDict):
    pass
    

class PrivateMetadata(BaseModel):
    pass
    

class OrganizationPublicMetadataTypedDict(TypedDict):
    pass
    

class OrganizationPublicMetadata(BaseModel):
    pass
    

class OrganizationTypedDict(TypedDict):
    created_at: int
    r"""Unix timestamp of creation.

    """
    id: str
    max_allowed_memberships: int
    name: str
    object: OrganizationObject
    private_metadata: PrivateMetadataTypedDict
    public_metadata: OrganizationPublicMetadataTypedDict
    slug: str
    updated_at: int
    r"""Unix timestamp of last update.

    """
    admin_delete_enabled: NotRequired[bool]
    created_by: NotRequired[str]
    members_count: NotRequired[Nullable[int]]
    

class Organization(BaseModel):
    created_at: int
    r"""Unix timestamp of creation.

    """
    id: str
    max_allowed_memberships: int
    name: str
    object: OrganizationObject
    private_metadata: PrivateMetadata
    public_metadata: OrganizationPublicMetadata
    slug: str
    updated_at: int
    r"""Unix timestamp of last update.

    """
    admin_delete_enabled: Optional[bool] = None
    created_by: Optional[str] = None
    members_count: Optional[Nullable[int]] = None
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["admin_delete_enabled", "created_by", "members_count"]
        nullable_fields = ["members_count"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None:
                m[k] = val
            elif not k in optional_fields or (
                    k in optional_fields
                    and k in nullable_fields
                    and (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member
                ):
                m[k] = val

        return m
        
