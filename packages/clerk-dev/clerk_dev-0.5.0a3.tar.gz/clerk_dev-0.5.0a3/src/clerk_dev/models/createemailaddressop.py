"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
from clerk_dev.types import BaseModel, Nullable
from pydantic import model_serializer
from typing import Optional, TypedDict
from typing_extensions import NotRequired


class CreateEmailAddressRequestBodyTypedDict(TypedDict):
    email_address: NotRequired[str]
    r"""The new email address. Must adhere to the RFC 5322 specification for email address format."""
    primary: NotRequired[Nullable[bool]]
    r"""Create this email address as the primary email address for the user.
    Default: false, unless it is the first email address.
    """
    user_id: NotRequired[str]
    r"""The ID representing the user"""
    verified: NotRequired[Nullable[bool]]
    r"""When created, the email address will be marked as verified."""
    

class CreateEmailAddressRequestBody(BaseModel):
    email_address: Optional[str] = None
    r"""The new email address. Must adhere to the RFC 5322 specification for email address format."""
    primary: Optional[Nullable[bool]] = None
    r"""Create this email address as the primary email address for the user.
    Default: false, unless it is the first email address.
    """
    user_id: Optional[str] = None
    r"""The ID representing the user"""
    verified: Optional[Nullable[bool]] = None
    r"""When created, the email address will be marked as verified."""
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["email_address", "primary", "user_id", "verified"]
        nullable_fields = ["primary", "verified"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None:
                m[k] = val
            elif not k in optional_fields or (
                    k in optional_fields
                    and k in nullable_fields
                    and (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member
                ):
                m[k] = val

        return m
        
