"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
from clerk_dev.types import BaseModel, Nullable
from enum import Enum
from pydantic import model_serializer
from typing import Optional, TypedDict
from typing_extensions import NotRequired


class ActorTypedDict(TypedDict):
    pass
    

class Actor(BaseModel):
    pass
    

class Object(str, Enum):
    ACTOR_TOKEN = "actor_token"


class Status(str, Enum):
    PENDING = "pending"
    ACCEPTED = "accepted"
    REVOKED = "revoked"


class ActorTokenTypedDict(TypedDict):
    actor: ActorTypedDict
    created_at: int
    r"""Unix timestamp of creation.

    """
    id: str
    object: Object
    status: Status
    updated_at: int
    r"""Unix timestamp of last update.

    """
    user_id: str
    token: NotRequired[Nullable[str]]
    url: NotRequired[Nullable[str]]
    

class ActorToken(BaseModel):
    actor: Actor
    created_at: int
    r"""Unix timestamp of creation.

    """
    id: str
    object: Object
    status: Status
    updated_at: int
    r"""Unix timestamp of last update.

    """
    user_id: str
    token: Optional[Nullable[str]] = None
    url: Optional[Nullable[str]] = None
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["token", "url"]
        nullable_fields = ["token", "url"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None:
                m[k] = val
            elif not k in optional_fields or (
                    k in optional_fields
                    and k in nullable_fields
                    and (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member
                ):
                m[k] = val

        return m
        
