"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
from .emailaddress import EmailAddress, EmailAddressTypedDict
from .phonenumber import PhoneNumber, PhoneNumberTypedDict
from .samlaccount import SAMLAccount, SAMLAccountTypedDict
from .schemas_passkey import SchemasPasskey, SchemasPasskeyTypedDict
from .web3wallet import Web3Wallet, Web3WalletTypedDict
from clerk_dev.types import BaseModel, Nullable
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class ExternalAccountsTypedDict(TypedDict):
    pass
    

class ExternalAccounts(BaseModel):
    pass
    

class UserObject(str, Enum):
    r"""String representing the object's type. Objects of the same type share the same value.

    """
    USER = "user"


class UserPrivateMetadataTypedDict(TypedDict):
    pass
    

class UserPrivateMetadata(BaseModel):
    pass
    

class UserPublicMetadataTypedDict(TypedDict):
    pass
    

class UserPublicMetadata(BaseModel):
    pass
    

class UserUnsafeMetadataTypedDict(TypedDict):
    pass
    

class UserUnsafeMetadata(BaseModel):
    pass
    

class UserTypedDict(TypedDict):
    backup_code_enabled: NotRequired[bool]
    banned: NotRequired[bool]
    r"""Flag to denote whether user is banned or not.

    """
    create_organization_enabled: NotRequired[bool]
    r"""If enabled, user can create organizations via FAPI.

    """
    created_at: NotRequired[int]
    r"""Unix timestamp of creation.

    """
    delete_self_enabled: NotRequired[bool]
    r"""If enabled, user can delete themselves via FAPI.

    """
    email_addresses: NotRequired[List[EmailAddressTypedDict]]
    external_accounts: NotRequired[List[ExternalAccountsTypedDict]]
    external_id: NotRequired[Nullable[str]]
    first_name: NotRequired[Nullable[str]]
    has_image: NotRequired[bool]
    id: NotRequired[str]
    image_url: NotRequired[str]
    last_active_at: NotRequired[Nullable[int]]
    r"""Unix timestamp of the latest session activity, with day precision.

    """
    last_name: NotRequired[Nullable[str]]
    last_sign_in_at: NotRequired[Nullable[int]]
    r"""Unix timestamp of last sign-in.

    """
    locked: NotRequired[bool]
    r"""Flag to denote whether user is currently locked, i.e. restricted from signing in or not.

    """
    lockout_expires_in_seconds: NotRequired[Nullable[int]]
    r"""The number of seconds remaining until the lockout period expires for a locked user. A null value for a locked user indicates that lockout never expires.

    """
    mfa_disabled_at: NotRequired[Nullable[int]]
    r"""Unix timestamp of when MFA was last disabled for this user. It should be noted that this field is not nullified if MFA is enabled again.

    """
    mfa_enabled_at: NotRequired[Nullable[int]]
    r"""Unix timestamp of when MFA was last enabled for this user. It should be noted that this field is not nullified if MFA is disabled.

    """
    object: NotRequired[UserObject]
    r"""String representing the object's type. Objects of the same type share the same value.

    """
    passkeys: NotRequired[List[SchemasPasskeyTypedDict]]
    password_enabled: NotRequired[bool]
    phone_numbers: NotRequired[List[PhoneNumberTypedDict]]
    primary_email_address_id: NotRequired[Nullable[str]]
    primary_phone_number_id: NotRequired[Nullable[str]]
    primary_web3_wallet_id: NotRequired[Nullable[str]]
    private_metadata: NotRequired[Nullable[UserPrivateMetadataTypedDict]]
    profile_image_url: NotRequired[str]
    public_metadata: NotRequired[UserPublicMetadataTypedDict]
    saml_accounts: NotRequired[List[SAMLAccountTypedDict]]
    totp_enabled: NotRequired[bool]
    two_factor_enabled: NotRequired[bool]
    unsafe_metadata: NotRequired[UserUnsafeMetadataTypedDict]
    updated_at: NotRequired[int]
    r"""Unix timestamp of last update.

    """
    username: NotRequired[Nullable[str]]
    verification_attempts_remaining: NotRequired[Nullable[int]]
    r"""The number of verification attempts remaining until the user is locked. Null if account lockout is not enabled. Note: if a user is locked explicitly via the Backend API, they may still have verification attempts remaining.

    """
    web3_wallets: NotRequired[List[Web3WalletTypedDict]]
    

class User(BaseModel):
    backup_code_enabled: Optional[bool] = None
    banned: Optional[bool] = None
    r"""Flag to denote whether user is banned or not.

    """
    create_organization_enabled: Optional[bool] = None
    r"""If enabled, user can create organizations via FAPI.

    """
    created_at: Optional[int] = None
    r"""Unix timestamp of creation.

    """
    delete_self_enabled: Optional[bool] = None
    r"""If enabled, user can delete themselves via FAPI.

    """
    email_addresses: Optional[List[EmailAddress]] = None
    external_accounts: Optional[List[ExternalAccounts]] = None
    external_id: Optional[Nullable[str]] = None
    first_name: Optional[Nullable[str]] = None
    has_image: Optional[bool] = None
    id: Optional[str] = None
    image_url: Optional[str] = None
    last_active_at: Optional[Nullable[int]] = None
    r"""Unix timestamp of the latest session activity, with day precision.

    """
    last_name: Optional[Nullable[str]] = None
    last_sign_in_at: Optional[Nullable[int]] = None
    r"""Unix timestamp of last sign-in.

    """
    locked: Optional[bool] = None
    r"""Flag to denote whether user is currently locked, i.e. restricted from signing in or not.

    """
    lockout_expires_in_seconds: Optional[Nullable[int]] = None
    r"""The number of seconds remaining until the lockout period expires for a locked user. A null value for a locked user indicates that lockout never expires.

    """
    mfa_disabled_at: Optional[Nullable[int]] = None
    r"""Unix timestamp of when MFA was last disabled for this user. It should be noted that this field is not nullified if MFA is enabled again.

    """
    mfa_enabled_at: Optional[Nullable[int]] = None
    r"""Unix timestamp of when MFA was last enabled for this user. It should be noted that this field is not nullified if MFA is disabled.

    """
    object: Optional[UserObject] = None
    r"""String representing the object's type. Objects of the same type share the same value.

    """
    passkeys: Optional[List[SchemasPasskey]] = None
    password_enabled: Optional[bool] = None
    phone_numbers: Optional[List[PhoneNumber]] = None
    primary_email_address_id: Optional[Nullable[str]] = None
    primary_phone_number_id: Optional[Nullable[str]] = None
    primary_web3_wallet_id: Optional[Nullable[str]] = None
    private_metadata: Optional[Nullable[UserPrivateMetadata]] = None
    profile_image_url: Annotated[Optional[str], pydantic.Field(deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible.")] = None
    public_metadata: Optional[UserPublicMetadata] = None
    saml_accounts: Optional[List[SAMLAccount]] = None
    totp_enabled: Optional[bool] = None
    two_factor_enabled: Optional[bool] = None
    unsafe_metadata: Optional[UserUnsafeMetadata] = None
    updated_at: Optional[int] = None
    r"""Unix timestamp of last update.

    """
    username: Optional[Nullable[str]] = None
    verification_attempts_remaining: Optional[Nullable[int]] = None
    r"""The number of verification attempts remaining until the user is locked. Null if account lockout is not enabled. Note: if a user is locked explicitly via the Backend API, they may still have verification attempts remaining.

    """
    web3_wallets: Optional[List[Web3Wallet]] = None
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["backup_code_enabled", "banned", "create_organization_enabled", "created_at", "delete_self_enabled", "email_addresses", "external_accounts", "external_id", "first_name", "has_image", "id", "image_url", "last_active_at", "last_name", "last_sign_in_at", "locked", "lockout_expires_in_seconds", "mfa_disabled_at", "mfa_enabled_at", "object", "passkeys", "password_enabled", "phone_numbers", "primary_email_address_id", "primary_phone_number_id", "primary_web3_wallet_id", "private_metadata", "profile_image_url", "public_metadata", "saml_accounts", "totp_enabled", "two_factor_enabled", "unsafe_metadata", "updated_at", "username", "verification_attempts_remaining", "web3_wallets"]
        nullable_fields = ["external_id", "first_name", "last_active_at", "last_name", "last_sign_in_at", "lockout_expires_in_seconds", "mfa_disabled_at", "mfa_enabled_at", "primary_email_address_id", "primary_phone_number_id", "primary_web3_wallet_id", "private_metadata", "username", "verification_attempts_remaining"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None:
                m[k] = val
            elif not k in optional_fields or (
                    k in optional_fields
                    and k in nullable_fields
                    and (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member
                ):
                m[k] = val

        return m
        
