"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
from clerk_dev.types import BaseModel, Nullable
from enum import Enum
from pydantic import model_serializer
from typing import Optional, TypedDict
from typing_extensions import NotRequired


class CreateSAMLConnectionAttributeMappingTypedDict(TypedDict):
    r"""Define the attribute name mapping between Identity Provider and Clerk's user properties"""
    
    email_address: NotRequired[str]
    first_name: NotRequired[str]
    last_name: NotRequired[str]
    user_id: NotRequired[str]
    

class CreateSAMLConnectionAttributeMapping(BaseModel):
    r"""Define the attribute name mapping between Identity Provider and Clerk's user properties"""
    
    email_address: Optional[str] = None
    first_name: Optional[str] = None
    last_name: Optional[str] = None
    user_id: Optional[str] = None
    

class Provider(str, Enum):
    r"""The IdP provider of the connection."""
    SAML_CUSTOM = "saml_custom"
    SAML_OKTA = "saml_okta"
    SAML_GOOGLE = "saml_google"
    SAML_MICROSOFT = "saml_microsoft"


class CreateSAMLConnectionRequestBodyTypedDict(TypedDict):
    domain: str
    r"""The domain of your organization. Sign in flows using an email with this domain, will use this SAML Connection."""
    name: str
    r"""The name to use as a label for this SAML Connection"""
    provider: Provider
    r"""The IdP provider of the connection."""
    attribute_mapping: NotRequired[Nullable[CreateSAMLConnectionAttributeMappingTypedDict]]
    r"""Define the attribute name mapping between Identity Provider and Clerk's user properties"""
    idp_certificate: NotRequired[Nullable[str]]
    r"""The X.509 certificate as provided by the IdP"""
    idp_entity_id: NotRequired[Nullable[str]]
    r"""The Entity ID as provided by the IdP"""
    idp_metadata: NotRequired[Nullable[str]]
    r"""The XML content of the IdP metadata file. If present, it takes priority over the corresponding individual properties"""
    idp_metadata_url: NotRequired[Nullable[str]]
    r"""The URL which serves the IdP metadata. If present, it takes priority over the corresponding individual properties"""
    idp_sso_url: NotRequired[Nullable[str]]
    r"""The Single-Sign On URL as provided by the IdP"""
    

class CreateSAMLConnectionRequestBody(BaseModel):
    domain: str
    r"""The domain of your organization. Sign in flows using an email with this domain, will use this SAML Connection."""
    name: str
    r"""The name to use as a label for this SAML Connection"""
    provider: Provider
    r"""The IdP provider of the connection."""
    attribute_mapping: Optional[Nullable[CreateSAMLConnectionAttributeMapping]] = None
    r"""Define the attribute name mapping between Identity Provider and Clerk's user properties"""
    idp_certificate: Optional[Nullable[str]] = None
    r"""The X.509 certificate as provided by the IdP"""
    idp_entity_id: Optional[Nullable[str]] = None
    r"""The Entity ID as provided by the IdP"""
    idp_metadata: Optional[Nullable[str]] = None
    r"""The XML content of the IdP metadata file. If present, it takes priority over the corresponding individual properties"""
    idp_metadata_url: Optional[Nullable[str]] = None
    r"""The URL which serves the IdP metadata. If present, it takes priority over the corresponding individual properties"""
    idp_sso_url: Optional[Nullable[str]] = None
    r"""The Single-Sign On URL as provided by the IdP"""
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["attribute_mapping", "idp_certificate", "idp_entity_id", "idp_metadata", "idp_metadata_url", "idp_sso_url"]
        nullable_fields = ["attribute_mapping", "idp_certificate", "idp_entity_id", "idp_metadata", "idp_metadata_url", "idp_sso_url"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None:
                m[k] = val
            elif not k in optional_fields or (
                    k in optional_fields
                    and k in nullable_fields
                    and (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member
                ):
                m[k] = val

        return m
        
