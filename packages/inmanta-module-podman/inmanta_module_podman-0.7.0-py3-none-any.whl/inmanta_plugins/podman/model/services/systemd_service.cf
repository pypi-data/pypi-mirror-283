"""
    Copyright 2023 Guillaume Everarts de Velp

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Contact: edvgui@gmail.com
"""
import std
import exec
import files


SystemdService.file_resources [0:] -- std::Resource
"""
Relation containing all the file resources managed by this service.
"""

SystemdService.runtime_resources [0:] -- std::Resource
"""
Relation containing all the runtime resources, these are exec commands
starting and stopping the service.
"""

SystemdService.configuration_resources [0:] -- std::Resource
"""
Relation containing all the configuration resources, these are the resources
making sure that the service ready to be deployed.
"""

SystemdService._systemd_config_dir [1] -- std::Directory


implementation timer_name for SystemdService:
    """
    Calculate an assign the timer unit name.
    """
    self.timer_name = join(std::split(self.service_name, ".service"), separator=".timer")
end


implementation service_configuration for SystemdService:
    """
    Deploy and cleanup all the configuration files required by our service.
    """
    user = self._container_like.owner
    host = self._container_like.host

    systemd_path = self.systemd_unit_dir is defined
        ? self.systemd_unit_dir
            : user == "root"
                ? "/etc/systemd/system/"
                : f"/home/{user}/.config/systemd/user/"

    systemctl_command = user == "root"
        ? "systemctl"
        : f"sudo --login -u {user} -- systemctl --user"

    # Make sure that the systemd directory exists
    self._systemd_config_dir = std::Directory(
        path=systemd_path,
        mode=755,
        owner=user,
        group=user,
        host=host,
        send_event=true,
        reload=true,
        # requires=self.requires,  # We don't need this directory to be created after our requires
        provides=self.provides,  # But we need to make sure it is created before our provides
    )
    self.file_resources += self._systemd_config_dir

    # Run systemctl daemon-reload after any config file change
    reload = exec::Run(
        command=f"{systemctl_command} daemon-reload",
        host=host,
        send_event=true,
        requires=[
            self.requires,  # We don't want to run this command before any of our requires
            self.file_resources,  # We need to run this command every time the files have been changed
        ],
        # provides=self.provides,  # We don't need to run this command before any of our provides
    )
    self.configuration_resources += reload

    # All file resources are configuration resources
    self.configuration_resources += self.file_resources

    # All configuration resources are resources of the service
    self.resources += self.configuration_resources

    # All runtime resources are resources of the service
    self.resources += self.runtime_resources

    # In most cases, the runtime resources (start/restart/stop) of the service
    # should be deployed once the files have been placed on the system
    # The only exception is the removed state, which ensure that the service
    # is both stopped and removed, in this case we first stop it then remove it.
    for resource in self.runtime_resources:
        if self.state == "removed":
            resource.provides += self.configuration_resources
        else:
            resource.requires += self.configuration_resources
        end
    end
end


implementation service_timer for SystemdService:
    """
    Setup a timer file when the service should be executed periodically.
    """
    user = self._container_like.owner
    host = self._container_like.host

    if self.on_calendar is defined:
        self.timer = files::SystemdUnitFile(
            path=f"{self._systemd_config_dir.path}{self.timer_name}",
            permissions=644,
            owner=user,
            group=user,
            host=host,
            unit=Unit(
                description=self.description is defined ? self.description : f"Podman {self.timer_name}",
                documentation=["https://github.com/edvgui/inmanta-module-podman"],
                requires=[self.service_name],
            ),
            timer=Timer(
                on_calendar=self.on_calendar,
                unit=self.service_name,
            ),
            install=Install(
                wanted_by=["timers.target"],
            ),
            send_event=true,
            purged=self.state == "removed",
            requires=self.requires,
            provides=self.provides,
        )
        self.timer.requires += self._systemd_config_dir
        self.file_resources += self.timer
    else:
        self.timer = null
    end
end


implementation run_service for SystemdService:
    """
    Make sure that the service is running.
    """
    user = self._container_like.owner
    host = self._container_like.host

    # When on_calendar is configured, we should start the timer and not
    # the service itself
    unit_name = self.on_calendar is defined ? self.timer_name : self.service_name

    systemctl_command = user == "root"
        ? "systemctl"
        : f"sudo --login -u {user} -- systemctl --user"

    # If the service is not active, we start it
    self.runtime_resources = exec::Run(
        command=f"{systemctl_command} start {unit_name}",
        unless=exec::in_shell(f"{systemctl_command} show {unit_name} --property=ActiveState | grep ActiveState=active"),
        host=host,
        send_event=true,
        reload="true",  # Dummy command, we don't want to execute our command twice
        requires=self.requires,
        provides=self.provides,
    )
end


implementation restart_service for SystemdService:
    """
    Make sure the the service is restarted.
    """
    user = self._container_like.owner
    host = self._container_like.host

    # When on_calendar is configured, we should start the timer and not
    # the service itself
    unit_name = self.on_calendar is defined ? self.timer_name : self.service_name

    systemctl_command = user == "root"
        ? "systemctl"
        : f"sudo --login -u {user} -- systemctl --user"

    # If the service is not active, we start it
    self.runtime_resources += exec::Run(
        command=f"{systemctl_command} restart {unit_name}",
        host=host,
        send_event=true,
        reload="true",  # Dummy command, we don't want to execute our command twice
        requires=self.requires,
        provides=self.provides,
    )
end


implementation stop_service for SystemdService:
    """
    Make sure that the service is not running.
    """
    user = self._container_like.owner
    host = self._container_like.host

    systemctl_command = user == "root"
        ? "systemctl"
        : f"sudo --login -u {user} -- systemctl --user"

    # If the service is active, we stop it
    stop_service = exec::Run(
        command=f"{systemctl_command} stop {self.service_name}",
        onlyif=exec::in_shell(f"{systemctl_command} show {self.service_name} --property=ActiveState | grep ActiveState=active"),
        host=host,
        send_event=true,
        reload="true",  # Dummy command, we don't want to execute our command twice
        requires=self.requires,
        provides=self.provides,
    )
    self.runtime_resources += stop_service

    if self.on_calendar is defined:
        # If the timer is active, we stop it
        stop_timer = exec::Run(
            command=f"{systemctl_command} stop {self.timer_name}",
            onlyif=exec::in_shell(f"{systemctl_command} show {self.timer_name} --property=ActiveState | grep ActiveState=active"),
            host=host,
            send_event=true,
            reload="true",  # Dummy command, we don't want to execute our command twice
            requires=self.requires,
            provides=[self.provides, stop_service],
        )
        self.runtime_resources += stop_timer
    end
end


implementation service_activation for SystemdService:
    """
    Make sure the symlink to our file is present or not depending on
    whether the service is activated or not.
    """
    user = self._container_like.owner
    host = self._container_like.host

    # When on_calendar is configured, we want to enable/disable the timer unit attached
    # to the service, not the service itself
    unit_name = self.on_calendar is defined ? self.timer_name : self.service_name

    symlink = files::Symlink(
        target=f"{self._systemd_config_dir.path}{unit_name}",
        path=f"{self._systemd_config_dir.path}default.target.wants/{unit_name}",
        host=host,
        owner=user,
        group=user,
        purged=self.state == "removed" or not self.enabled,
        requires=self.requires,
        provides=self.provides,
    )
    self.file_resources += symlink

    if self.state == "removed":
        # When deleting the service, remove the symlink before the file
        self.unit.requires += symlink
    else:
        # Otherwise, do the opposite
        self.unit.provides += symlink
    end
end


implement SystemdService using service_configuration, service_activation, timer_name, service_timer
implement SystemdService using run_service when self.state == "running"
implement SystemdService using restart_service when self.state == "restart"
implement SystemdService using stop_service when self.state in ["stopped", "removed"]
