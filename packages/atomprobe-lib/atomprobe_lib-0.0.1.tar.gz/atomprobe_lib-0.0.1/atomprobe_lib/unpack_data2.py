DALTON_CONVERSION = 1024
X_LSB = 0.03811
Y_LSB = 0.03815

#First ion does not convert
#client does not recv enough
#linkedin profile

def parse_records(binary_data):
    records = []
    record_size = 4

    num_records = len(binary_data) // record_size
    exact_num_record = len(binary_data) / record_size
    if num_records != exact_num_record:
        print("Received data length does not match expected format. There may be extra bytes. Program will proceed.")

    print("Records F-12: ", end="")
    for i in range(num_records):
        record = binary_data[i * record_size:(i + 1) * record_size]
        tag = record[3]

        # from_bytes method, automatically inserts based on endian
        data = int.from_bytes(record[:3], 'little', signed=True)
        
        if tag >= 15 and tag <= 18:
            for byte in record:
                print(f"\\x{byte:02x}", end="")
            records.append((tag, data))

    return records

def parse_ions(records):
    records.append((0, 0))
    currentIon = {}
    ions = []

    for i in range(len(records)):
        if(i == 0):
            currentIon[records[i][0]] = records[i][1]
            currentIon['Exceptions'] = ""
        else:
            if records[i][0] <= records[i - 1][0]:
                if ions:
                    currentIon = fill_ion(currentIon, ions[len(ions) - 1])
                if len(currentIon) == 5:
                    ions.append(currentIon)
                else:
                    print("Ion with missing data was removed")
    
                currentIon = {}

            currentIon[records[i][0]] = records[i][1]

    return ions

def fill_ion(ion, previousIon):
    ion['Exceptions'] = ""
    for key in previousIon:
        if key in ion:
            ion[key] = conversions(key, ion[key])
        else:
            ion[key] = previousIon[key]
            ion['Exceptions'] += f"{key} "

    return ion

def conversions(tag, data):
    if tag == 15:
        return data * X_LSB
    elif tag == 16:
        return data * Y_LSB
    elif tag == 18:
        return data / DALTON_CONVERSION
    return data

def print_ion_data(ions):
    print("Ion Data:")
    for ion in ions:
        if ion['Exceptions'] != "":
            print(f"X_POS: {ion[15]:.6f}mm, Y_POS: {ion[16]:.6f}mm, TOF: {ion[17]}, MASS: {ion[18]} Daltons, Missing: {ion['Exceptions']}")
            #print(f"X_POS: {ion[15]}, Y_POS: {ion[16]}, TOF: {ion[17]}, MASS: {ion[18]}, Missing: {ion['Exceptions']}")
        else:
            print(f"X_POS: {ion[15]:.6f}mm, Y_POS: {ion[16]:.6f}mm, TOF: {ion[17]}, MASS: {ion[18]} Daltons")
            #print(f"X_POS: {ion[15]}, Y_POS: {ion[16]}, TOF: {ion[17]}, MASS: {ion[18]}")

def handle_ions(binary_data):
    records = parse_records(binary_data)
    ions = parse_ions(records)
    print_ion_data(ions)

if __name__ == "__main__":
    # Example binary data
    binary_data = b'\x06\x00\x00\x0f\x51\x00\x00\x10\x22\x22\x00\x11\x3b\x43\x00\x12'
    #binary_data += b'\xf6\x30\x00\x11'
    #binary_data += b'\x00\x00\x00\x0d\x00\x00\x00\x0c'
    binary_data += b'\x1f\xff\xff\x0f\x33\x02\x00\x10\x4a\x9d\x0b\x11\x5b\x88\x00\x12'
    binary_data += b'\x51\x02\x00\x0f\x5e\xff\xff\x10\xc3\xb9\x06\x11\x8b\x28\x00\x12'
    #binary_data += b'\x3d\xfe\xff\x0f\x49\xda\x0d\x11\x68\xb6\x00\x12'
    #binary_data += b'\x49\xda\x0d\x11\x68\xb6\x00\x12'
    #binary_data += b'\x3d\xfe\xff\x0f\x9e\x01\x00\x10\x78\x1e\x0c\x11'
    binary_data += b'\x96\xff\xff\x0f\x9d\x01\x00\x10\x6d\xb2\x05\x11\x7a\x1e\x00\x12'
    #binary_data += b'\xd0\x00\x00\x0f\xea\xfd\xff\x10\xdb\x47\x0a\x11\x43\x60\x00\x12'
    #binary_data += b'\x45\x01\x00\x0f\x74\xff\xff\x10\x94\x57\x12\x11\xc1\x3f\x01\x12'
    #binary_data += b'\xfb\xff\xff\x0f\xa8\xff\xff\x10\x4e\x0e\x04\x11\x16\x0e\x00\x12'
    binary_data += b'\x63\x00\x00\x0f\xcc\x00\x00\x10\x9f\x6b\x0d\x11\xd7\xae\x00\x12'
    #binary_data += b'\x5f\x02\x00\x0f\xe5\x00\x00\x10\x94\xab\x04\x11\x5a\x13\x00\x12'
    #binary_data += b'\xf2\xff\xff\x0f\xee\xfd\xff\x10\x26\x4c\x01\x11\xfb\x00\x00\x12'
    #binary_data += b'\xbc\x00\x00\x0f\xbf\x7d\x0a\x11\x0c\x67\x00\x12'
    binary_data += b'\x34\xff\xff\x0f\xfb\x00\x00\x10\xe2\xca\x10\x11\x37\x19\x01\x12'
    #binary_data += b'\x5a\xff\xff\x0f\x82\x00\x00\x10\x47\x58\x11\x11\x8b\x28\x01\x12'
    #binary_data += b'\xe8\xff\xff\x0f\x96\xff\xff\x10\xe0\x8f\x12\x11\xcc\x4b\x01\x12'
    #binary_data += b'\xad\x00\x00\x0f\xda\xff\xff\x10\x51\xe4\x09\x11\x62\x5b\x00\x12'
    #binary_data += b'\x5a\xff\xff\x0f\x8e\x02\x00\x10\x7d\x91\x0e\x11\xfb\xd9\x00\x12'
    handle_ions(binary_data)

test_data = b'\x31\x20\x4f\x4b\x3a\x20\x37\x34\x20\x72\x65\x63\x6f\x72\x64\x73\x20\x72\x65\x61\x64\x2e\x20\x42\x49\x4e\x5f\x50\x41\x59\x4c\x4f\x41\x44\x3d\x32\x39\x36\x0a\x00\x00\x00\x0d\x00\x00\x00\x0c\x06\x00\x00\x0f\x51\x00\x00\x10\x10\xfb\x06\x11\x0c\x2d\x00\x12\xd7\xff\xff\x0f\x98\x00\x00\x10\xba\x3c\x07\x11\xf6\x30\x00\x12\x1f\xff\xff\x0f\x33\x02\x00\x10\x4a\x9d\x0b\x11\x5b\x88\x00\x12\x51\x02\x00\x0f\x5e\xff\xff\x10\xc3\xb9\x06\x11\x8b\x28\x00\x12\x49\xda\x0d\x11\x68\xb6\x00\x12\x3d\xfe\xff\x0f\x9e\x01\x00\x10\x78\x1e\x0c\x11\xab\x94\x00\x12\x96\xff\xff\x0f\x9d\x01\x00\x10\x6d\xb2\x05\x11\x7a\x1e\x00\x12\xd0\x00\x00\x0f\xea\xfd\xff\x10\xdb\x47\x0a\x11\x43\x60\x00\x12\x45\x01\x00\x0f\x74\xff\xff\x10\x94\x57\x12\x11\xc1\x3f\x01\x12\xfb\xff\xff\x0f\xa8\xff\xff\x10\x4e\x0e\x04\x11\x16\x0e\x00\x12\x63\x00\x00\x0f\xcc\x00\x00\x10\x9f\x6b\x0d\x11\xd7\xae\x00\x12\x5f\x02\x00\x0f\xe5\x00\x00\x10\x94\xab\x04\x11\x5a\x13\x00\x12\xf2\xff\xff\x0f\xee\xfd\xff\x10\x26\x4c\x01\x11\xfb\x00\x00\x12\xbc\x00\x00\x0f\xd1\xff\xff\x10\xbf\x7d\x0a\x11\x0c\x67\x00\x12\x34\xff\xff\x0f\xfb\x00\x00\x10\xe2\xca\x10\x11\x37\x19\x01\x12\x5a\xff\xff\x0f\x82\x00\x00\x10\x47\x58\x11\x11\x8b\x28\x01\x12\xe8\xff\xff\x0f\x96\xff\xff\x10\xe0\x8f\x12\x11\xcc\x4b\x01\x12\xad\x00\x00\x0f\xda\xff\xff\x10\x51\xe4\x09\x11\x62\x5b\x00\x12\x5a\xff\xff\x0f\x8e\x02\x00\x10\x7d\x91\x0e\x11\xfb\xd9\x00\x12'
